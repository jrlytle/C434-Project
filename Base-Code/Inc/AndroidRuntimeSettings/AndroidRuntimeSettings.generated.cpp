// Copyright 1998-2015 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Boilerplate C++ definitions for a single module.
	This is automatically generated by UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "Private/AndroidRuntimeSettingsPrivatePCH.h"
#include "AndroidRuntimeSettings.generated.dep.h"
PRAGMA_DISABLE_DEPRECATION_WARNINGS
void EmptyLinkFunctionForGeneratedCodeAndroidRuntimeSettings() {}
static class UEnum* EAndroidAudio_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern ANDROIDRUNTIMESETTINGS_API class UEnum* Z_Construct_UEnum_AndroidRuntimeSettings_EAndroidAudio();
		extern ANDROIDRUNTIMESETTINGS_API class UPackage* Z_Construct_UPackage_AndroidRuntimeSettings();
		Singleton = GetStaticEnum(Z_Construct_UEnum_AndroidRuntimeSettings_EAndroidAudio, Z_Construct_UPackage_AndroidRuntimeSettings(), TEXT("EAndroidAudio"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EAndroidAudio(EAndroidAudio_StaticEnum, TEXT("/Script/AndroidRuntimeSettings"));
static class UEnum* EAndroidDepthBufferPreference_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern ANDROIDRUNTIMESETTINGS_API class UEnum* Z_Construct_UEnum_AndroidRuntimeSettings_EAndroidDepthBufferPreference();
		extern ANDROIDRUNTIMESETTINGS_API class UPackage* Z_Construct_UPackage_AndroidRuntimeSettings();
		Singleton = GetStaticEnum(Z_Construct_UEnum_AndroidRuntimeSettings_EAndroidDepthBufferPreference, Z_Construct_UPackage_AndroidRuntimeSettings(), TEXT("EAndroidDepthBufferPreference"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EAndroidDepthBufferPreference(EAndroidDepthBufferPreference_StaticEnum, TEXT("/Script/AndroidRuntimeSettings"));
static class UEnum* EAndroidScreenOrientation_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern ANDROIDRUNTIMESETTINGS_API class UEnum* Z_Construct_UEnum_AndroidRuntimeSettings_EAndroidScreenOrientation();
		extern ANDROIDRUNTIMESETTINGS_API class UPackage* Z_Construct_UPackage_AndroidRuntimeSettings();
		Singleton = GetStaticEnum(Z_Construct_UEnum_AndroidRuntimeSettings_EAndroidScreenOrientation, Z_Construct_UPackage_AndroidRuntimeSettings(), TEXT("EAndroidScreenOrientation"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EAndroidScreenOrientation(EAndroidScreenOrientation_StaticEnum, TEXT("/Script/AndroidRuntimeSettings"));
class UScriptStruct* FGooglePlayLeaderboardMapping::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern ANDROIDRUNTIMESETTINGS_API class UScriptStruct* Z_Construct_UScriptStruct_FGooglePlayLeaderboardMapping();
		extern ANDROIDRUNTIMESETTINGS_API uint32 Get_Z_Construct_UScriptStruct_FGooglePlayLeaderboardMapping_CRC();
		extern ANDROIDRUNTIMESETTINGS_API class UPackage* Z_Construct_UPackage_AndroidRuntimeSettings();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FGooglePlayLeaderboardMapping, Z_Construct_UPackage_AndroidRuntimeSettings(), TEXT("GooglePlayLeaderboardMapping"), sizeof(FGooglePlayLeaderboardMapping), Get_Z_Construct_UScriptStruct_FGooglePlayLeaderboardMapping_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FGooglePlayLeaderboardMapping(FGooglePlayLeaderboardMapping::StaticStruct, TEXT("/Script/AndroidRuntimeSettings"));
static struct FScriptStruct_AndroidRuntimeSettings_StaticRegisterNativesFGooglePlayLeaderboardMapping
{
	FScriptStruct_AndroidRuntimeSettings_StaticRegisterNativesFGooglePlayLeaderboardMapping()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("GooglePlayLeaderboardMapping")),new UScriptStruct::TCppStructOps<FGooglePlayLeaderboardMapping>);
	}
} ScriptStruct_AndroidRuntimeSettings_StaticRegisterNativesFGooglePlayLeaderboardMapping;
class UScriptStruct* FGooglePlayAchievementMapping::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern ANDROIDRUNTIMESETTINGS_API class UScriptStruct* Z_Construct_UScriptStruct_FGooglePlayAchievementMapping();
		extern ANDROIDRUNTIMESETTINGS_API uint32 Get_Z_Construct_UScriptStruct_FGooglePlayAchievementMapping_CRC();
		extern ANDROIDRUNTIMESETTINGS_API class UPackage* Z_Construct_UPackage_AndroidRuntimeSettings();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FGooglePlayAchievementMapping, Z_Construct_UPackage_AndroidRuntimeSettings(), TEXT("GooglePlayAchievementMapping"), sizeof(FGooglePlayAchievementMapping), Get_Z_Construct_UScriptStruct_FGooglePlayAchievementMapping_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FGooglePlayAchievementMapping(FGooglePlayAchievementMapping::StaticStruct, TEXT("/Script/AndroidRuntimeSettings"));
static struct FScriptStruct_AndroidRuntimeSettings_StaticRegisterNativesFGooglePlayAchievementMapping
{
	FScriptStruct_AndroidRuntimeSettings_StaticRegisterNativesFGooglePlayAchievementMapping()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("GooglePlayAchievementMapping")),new UScriptStruct::TCppStructOps<FGooglePlayAchievementMapping>);
	}
} ScriptStruct_AndroidRuntimeSettings_StaticRegisterNativesFGooglePlayAchievementMapping;
	void UAndroidRuntimeSettings::StaticRegisterNativesUAndroidRuntimeSettings()
	{
	}
	IMPLEMENT_CLASS(UAndroidRuntimeSettings, 4177740433);
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	COREUOBJECT_API class UClass* Z_Construct_UClass_UObject();

	ANDROIDRUNTIMESETTINGS_API class UEnum* Z_Construct_UEnum_AndroidRuntimeSettings_EAndroidAudio();
	ANDROIDRUNTIMESETTINGS_API class UEnum* Z_Construct_UEnum_AndroidRuntimeSettings_EAndroidDepthBufferPreference();
	ANDROIDRUNTIMESETTINGS_API class UEnum* Z_Construct_UEnum_AndroidRuntimeSettings_EAndroidScreenOrientation();
	ANDROIDRUNTIMESETTINGS_API class UScriptStruct* Z_Construct_UScriptStruct_FGooglePlayLeaderboardMapping();
	ANDROIDRUNTIMESETTINGS_API class UScriptStruct* Z_Construct_UScriptStruct_FGooglePlayAchievementMapping();
	ANDROIDRUNTIMESETTINGS_API class UClass* Z_Construct_UClass_UAndroidRuntimeSettings_NoRegister();
	ANDROIDRUNTIMESETTINGS_API class UClass* Z_Construct_UClass_UAndroidRuntimeSettings();
	ANDROIDRUNTIMESETTINGS_API class UPackage* Z_Construct_UPackage_AndroidRuntimeSettings();
	UEnum* Z_Construct_UEnum_AndroidRuntimeSettings_EAndroidAudio()
	{
		UPackage* Outer=Z_Construct_UPackage_AndroidRuntimeSettings();
		extern uint32 Get_Z_Construct_UEnum_AndroidRuntimeSettings_EAndroidAudio_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EAndroidAudio"), 0, Get_Z_Construct_UEnum_AndroidRuntimeSettings_EAndroidAudio_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EAndroidAudio"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EAndroidAudio::Default")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EAndroidAudio::OGG")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EAndroidAudio::ADPCM")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EAndroidAudio::EAndroidAudio_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ADPCM.DisplayName"), TEXT("ADPCM"));
			MetaData->SetValue(ReturnEnum, TEXT("ADPCM.ToolTip"), TEXT("This option selects ADPCM lossless encoding."));
			MetaData->SetValue(ReturnEnum, TEXT("Default.DisplayName"), TEXT("Default"));
			MetaData->SetValue(ReturnEnum, TEXT("Default.ToolTip"), TEXT("This option selects the default encoder."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/AndroidRuntimeSettings.h"));
			MetaData->SetValue(ReturnEnum, TEXT("OGG.DisplayName"), TEXT("Ogg Vorbis"));
			MetaData->SetValue(ReturnEnum, TEXT("OGG.ToolTip"), TEXT("Selects Ogg Vorbis encoding."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_AndroidRuntimeSettings_EAndroidAudio_CRC() { return 3848569396U; }
	UEnum* Z_Construct_UEnum_AndroidRuntimeSettings_EAndroidDepthBufferPreference()
	{
		UPackage* Outer=Z_Construct_UPackage_AndroidRuntimeSettings();
		extern uint32 Get_Z_Construct_UEnum_AndroidRuntimeSettings_EAndroidDepthBufferPreference_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EAndroidDepthBufferPreference"), 0, Get_Z_Construct_UEnum_AndroidRuntimeSettings_EAndroidDepthBufferPreference_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EAndroidDepthBufferPreference"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EAndroidDepthBufferPreference::Default")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EAndroidDepthBufferPreference::Bits16")), 16));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EAndroidDepthBufferPreference::Bits24")), 24));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EAndroidDepthBufferPreference::Bits32")), 32));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EAndroidDepthBufferPreference::EAndroidDepthBufferPreference_MAX")), 33));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("Bits16.DisplayName"), TEXT("16-bit"));
			MetaData->SetValue(ReturnEnum, TEXT("Bits24.DisplayName"), TEXT("24-bit"));
			MetaData->SetValue(ReturnEnum, TEXT("Bits32.DisplayName"), TEXT("32-bit"));
			MetaData->SetValue(ReturnEnum, TEXT("Default.DisplayName"), TEXT("Default"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/AndroidRuntimeSettings.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Depth buffer precision preferences // IF THIS CHANGES, MAKE SURE TO UPDATE UEDeployAndroid.cs, ConvertDepthBufferIniValue()!"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_AndroidRuntimeSettings_EAndroidDepthBufferPreference_CRC() { return 3171266619U; }
	UEnum* Z_Construct_UEnum_AndroidRuntimeSettings_EAndroidScreenOrientation()
	{
		UPackage* Outer=Z_Construct_UPackage_AndroidRuntimeSettings();
		extern uint32 Get_Z_Construct_UEnum_AndroidRuntimeSettings_EAndroidScreenOrientation_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EAndroidScreenOrientation"), 0, Get_Z_Construct_UEnum_AndroidRuntimeSettings_EAndroidScreenOrientation_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EAndroidScreenOrientation"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EAndroidScreenOrientation::Portrait")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EAndroidScreenOrientation::ReversePortrait")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EAndroidScreenOrientation::SensorPortrait")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EAndroidScreenOrientation::Landscape")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EAndroidScreenOrientation::ReverseLandscape")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EAndroidScreenOrientation::SensorLandscape")), 5));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EAndroidScreenOrientation::Sensor")), 6));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EAndroidScreenOrientation::FullSensor")), 7));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EAndroidScreenOrientation::EAndroidScreenOrientation_MAX")), 8));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("FullSensor.ToolTip"), TEXT("Use any orientation (including ones the device wouldn't choose in Sensor mode), based on the device orientation sensor."));
			MetaData->SetValue(ReturnEnum, TEXT("Landscape.ToolTip"), TEXT("Landscape orientation (the display is wider than it is tall)."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/AndroidRuntimeSettings.h"));
			MetaData->SetValue(ReturnEnum, TEXT("Portrait.ToolTip"), TEXT("Portrait orientation (the display is taller than it is wide)."));
			MetaData->SetValue(ReturnEnum, TEXT("ReverseLandscape.ToolTip"), TEXT("Landscape orientation rotated 180 degrees."));
			MetaData->SetValue(ReturnEnum, TEXT("ReversePortrait.ToolTip"), TEXT("Portrait orientation rotated 180 degrees."));
			MetaData->SetValue(ReturnEnum, TEXT("Sensor.ToolTip"), TEXT("Use any orientation the device normally supports, based on the device orientation sensor."));
			MetaData->SetValue(ReturnEnum, TEXT("SensorLandscape.ToolTip"), TEXT("Use either landscape or reverse landscape orientation, based on the device orientation sensor."));
			MetaData->SetValue(ReturnEnum, TEXT("SensorPortrait.ToolTip"), TEXT("Use either portrait or reverse portrait orientation, where supported by the device, based on the device orientation sensor."));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("IF THIS CHANGES, MAKE SURE TO UPDATE UEDeployAndroid.cs, ConvertOrientationIniValue()!"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_AndroidRuntimeSettings_EAndroidScreenOrientation_CRC() { return 2635791650U; }
	UScriptStruct* Z_Construct_UScriptStruct_FGooglePlayLeaderboardMapping()
	{
		UPackage* Outer=Z_Construct_UPackage_AndroidRuntimeSettings();
		extern uint32 Get_Z_Construct_UScriptStruct_FGooglePlayLeaderboardMapping_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("GooglePlayLeaderboardMapping"), sizeof(FGooglePlayLeaderboardMapping), Get_Z_Construct_UScriptStruct_FGooglePlayLeaderboardMapping_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GooglePlayLeaderboardMapping"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FGooglePlayLeaderboardMapping>, EStructFlags(0x00000001));
			UProperty* NewProp_LeaderboardID = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LeaderboardID"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(LeaderboardID, FGooglePlayLeaderboardMapping), 0x0000000000000001);
			UProperty* NewProp_Name = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Name"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Name, FGooglePlayLeaderboardMapping), 0x0000000000000001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/AndroidRuntimeSettings.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Holds the game-specific leaderboard name and corresponding ID from Google Play services."));
			MetaData->SetValue(NewProp_LeaderboardID, TEXT("Category"), TEXT("GooglePlayServices"));
			MetaData->SetValue(NewProp_LeaderboardID, TEXT("ModuleRelativePath"), TEXT("Classes/AndroidRuntimeSettings.h"));
			MetaData->SetValue(NewProp_LeaderboardID, TEXT("ToolTip"), TEXT("The ID of the corresponding leaderboard, generated by the Google Play developer console."));
			MetaData->SetValue(NewProp_Name, TEXT("Category"), TEXT("GooglePlayServices"));
			MetaData->SetValue(NewProp_Name, TEXT("ModuleRelativePath"), TEXT("Classes/AndroidRuntimeSettings.h"));
			MetaData->SetValue(NewProp_Name, TEXT("ToolTip"), TEXT("The game-specific leaderboard name (the one passed in to WriteLeaderboards calls)."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FGooglePlayLeaderboardMapping_CRC() { return 1246440576U; }
	UScriptStruct* Z_Construct_UScriptStruct_FGooglePlayAchievementMapping()
	{
		UPackage* Outer=Z_Construct_UPackage_AndroidRuntimeSettings();
		extern uint32 Get_Z_Construct_UScriptStruct_FGooglePlayAchievementMapping_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("GooglePlayAchievementMapping"), sizeof(FGooglePlayAchievementMapping), Get_Z_Construct_UScriptStruct_FGooglePlayAchievementMapping_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GooglePlayAchievementMapping"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FGooglePlayAchievementMapping>, EStructFlags(0x00000001));
			UProperty* NewProp_AchievementID = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("AchievementID"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(AchievementID, FGooglePlayAchievementMapping), 0x0000000000000001);
			UProperty* NewProp_Name = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Name"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Name, FGooglePlayAchievementMapping), 0x0000000000000001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/AndroidRuntimeSettings.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Holds the game-specific achievement name and corresponding ID from Google Play services."));
			MetaData->SetValue(NewProp_AchievementID, TEXT("Category"), TEXT("GooglePlayServices"));
			MetaData->SetValue(NewProp_AchievementID, TEXT("ModuleRelativePath"), TEXT("Classes/AndroidRuntimeSettings.h"));
			MetaData->SetValue(NewProp_AchievementID, TEXT("ToolTip"), TEXT("The ID of the corresponding achievement, generated by the Google Play developer console."));
			MetaData->SetValue(NewProp_Name, TEXT("Category"), TEXT("GooglePlayServices"));
			MetaData->SetValue(NewProp_Name, TEXT("ModuleRelativePath"), TEXT("Classes/AndroidRuntimeSettings.h"));
			MetaData->SetValue(NewProp_Name, TEXT("ToolTip"), TEXT("The game-specific achievement name (the one passed in to WriteAchievement calls)."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FGooglePlayAchievementMapping_CRC() { return 3204000281U; }
	UClass* Z_Construct_UClass_UAndroidRuntimeSettings_NoRegister()
	{
		return UAndroidRuntimeSettings::StaticClass();
	}
	UClass* Z_Construct_UClass_UAndroidRuntimeSettings()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_AndroidRuntimeSettings();
			OuterClass = UAndroidRuntimeSettings::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100086;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bMultiTargetFormat_ASTC, UAndroidRuntimeSettings, bool);
				UProperty* NewProp_bMultiTargetFormat_ASTC = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bMultiTargetFormat_ASTC"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bMultiTargetFormat_ASTC, UAndroidRuntimeSettings), 0x0000000000044001, CPP_BOOL_PROPERTY_BITMASK(bMultiTargetFormat_ASTC, UAndroidRuntimeSettings), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bMultiTargetFormat_ATC, UAndroidRuntimeSettings, bool);
				UProperty* NewProp_bMultiTargetFormat_ATC = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bMultiTargetFormat_ATC"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bMultiTargetFormat_ATC, UAndroidRuntimeSettings), 0x0000000000044001, CPP_BOOL_PROPERTY_BITMASK(bMultiTargetFormat_ATC, UAndroidRuntimeSettings), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bMultiTargetFormat_PVRTC, UAndroidRuntimeSettings, bool);
				UProperty* NewProp_bMultiTargetFormat_PVRTC = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bMultiTargetFormat_PVRTC"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bMultiTargetFormat_PVRTC, UAndroidRuntimeSettings), 0x0000000000044001, CPP_BOOL_PROPERTY_BITMASK(bMultiTargetFormat_PVRTC, UAndroidRuntimeSettings), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bMultiTargetFormat_DXT, UAndroidRuntimeSettings, bool);
				UProperty* NewProp_bMultiTargetFormat_DXT = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bMultiTargetFormat_DXT"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bMultiTargetFormat_DXT, UAndroidRuntimeSettings), 0x0000000000044001, CPP_BOOL_PROPERTY_BITMASK(bMultiTargetFormat_DXT, UAndroidRuntimeSettings), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bMultiTargetFormat_ETC2, UAndroidRuntimeSettings, bool);
				UProperty* NewProp_bMultiTargetFormat_ETC2 = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bMultiTargetFormat_ETC2"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bMultiTargetFormat_ETC2, UAndroidRuntimeSettings), 0x0000000000044001, CPP_BOOL_PROPERTY_BITMASK(bMultiTargetFormat_ETC2, UAndroidRuntimeSettings), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bMultiTargetFormat_ETC1, UAndroidRuntimeSettings, bool);
				UProperty* NewProp_bMultiTargetFormat_ETC1 = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bMultiTargetFormat_ETC1"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bMultiTargetFormat_ETC1, UAndroidRuntimeSettings), 0x0000000000044001, CPP_BOOL_PROPERTY_BITMASK(bMultiTargetFormat_ETC1, UAndroidRuntimeSettings), sizeof(bool), true);
				UProperty* NewProp_AndroidAudio = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AndroidAudio"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(AndroidAudio, UAndroidRuntimeSettings), 0x0000000000044001, Z_Construct_UEnum_AndroidRuntimeSettings_EAndroidAudio());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bShowLaunchImage, UAndroidRuntimeSettings, bool);
				UProperty* NewProp_bShowLaunchImage = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bShowLaunchImage"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bShowLaunchImage, UAndroidRuntimeSettings), 0x0000000000044001, CPP_BOOL_PROPERTY_BITMASK(bShowLaunchImage, UAndroidRuntimeSettings), sizeof(bool), true);
				UProperty* NewProp_GooglePlayLicenseKey = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GooglePlayLicenseKey"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(GooglePlayLicenseKey, UAndroidRuntimeSettings), 0x0000000000044001);
				UProperty* NewProp_AdMobAdUnitIDs = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AdMobAdUnitIDs"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(AdMobAdUnitIDs, UAndroidRuntimeSettings), 0x0000000000044001);
				UProperty* NewProp_AdMobAdUnitIDs_Inner = new(EC_InternalUseOnlyConstructor, NewProp_AdMobAdUnitIDs, TEXT("AdMobAdUnitIDs"), RF_Public|RF_Transient|RF_Native) UStrProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000004000);
				UProperty* NewProp_AdMobAdUnitID = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AdMobAdUnitID"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(AdMobAdUnitID, UAndroidRuntimeSettings), 0x0000000000044001);
				UProperty* NewProp_LeaderboardMap = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LeaderboardMap"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(LeaderboardMap, UAndroidRuntimeSettings), 0x0000000000044001);
				UProperty* NewProp_LeaderboardMap_Inner = new(EC_InternalUseOnlyConstructor, NewProp_LeaderboardMap, TEXT("LeaderboardMap"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000004000, Z_Construct_UScriptStruct_FGooglePlayLeaderboardMapping());
				UProperty* NewProp_AchievementMap = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AchievementMap"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(AchievementMap, UAndroidRuntimeSettings), 0x0000000000044001);
				UProperty* NewProp_AchievementMap_Inner = new(EC_InternalUseOnlyConstructor, NewProp_AchievementMap, TEXT("AchievementMap"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000004000, Z_Construct_UScriptStruct_FGooglePlayAchievementMapping());
				UProperty* NewProp_GamesAppID = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GamesAppID"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(GamesAppID, UAndroidRuntimeSettings), 0x0000000000044001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnableGooglePlaySupport, UAndroidRuntimeSettings, bool);
				UProperty* NewProp_bEnableGooglePlaySupport = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bEnableGooglePlaySupport"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnableGooglePlaySupport, UAndroidRuntimeSettings), 0x0000000000044001, CPP_BOOL_PROPERTY_BITMASK(bEnableGooglePlaySupport, UAndroidRuntimeSettings), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bBuildForES31, UAndroidRuntimeSettings, bool);
				UProperty* NewProp_bBuildForES31 = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bBuildForES31"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bBuildForES31, UAndroidRuntimeSettings), 0x0000000000044001, CPP_BOOL_PROPERTY_BITMASK(bBuildForES31, UAndroidRuntimeSettings), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bBuildForES2, UAndroidRuntimeSettings, bool);
				UProperty* NewProp_bBuildForES2 = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bBuildForES2"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bBuildForES2, UAndroidRuntimeSettings), 0x0000000000044001, CPP_BOOL_PROPERTY_BITMASK(bBuildForES2, UAndroidRuntimeSettings), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bBuildForX8664, UAndroidRuntimeSettings, bool);
				UProperty* NewProp_bBuildForX8664 = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bBuildForX8664"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bBuildForX8664, UAndroidRuntimeSettings), 0x0000000000044001, CPP_BOOL_PROPERTY_BITMASK(bBuildForX8664, UAndroidRuntimeSettings), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bBuildForX86, UAndroidRuntimeSettings, bool);
				UProperty* NewProp_bBuildForX86 = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bBuildForX86"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bBuildForX86, UAndroidRuntimeSettings), 0x0000000000044001, CPP_BOOL_PROPERTY_BITMASK(bBuildForX86, UAndroidRuntimeSettings), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bBuildForArmV7, UAndroidRuntimeSettings, bool);
				UProperty* NewProp_bBuildForArmV7 = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bBuildForArmV7"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bBuildForArmV7, UAndroidRuntimeSettings), 0x0000000000044001, CPP_BOOL_PROPERTY_BITMASK(bBuildForArmV7, UAndroidRuntimeSettings), sizeof(bool), true);
				UProperty* NewProp_KeyPassword = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("KeyPassword"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(KeyPassword, UAndroidRuntimeSettings), 0x0000000000044001);
				UProperty* NewProp_KeyStorePassword = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("KeyStorePassword"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(KeyStorePassword, UAndroidRuntimeSettings), 0x0000000000044001);
				UProperty* NewProp_KeyAlias = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("KeyAlias"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(KeyAlias, UAndroidRuntimeSettings), 0x0000000000044001);
				UProperty* NewProp_KeyStore = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("KeyStore"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(KeyStore, UAndroidRuntimeSettings), 0x0000000000044001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bRemoveOSIG, UAndroidRuntimeSettings, bool);
				UProperty* NewProp_bRemoveOSIG = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bRemoveOSIG"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bRemoveOSIG, UAndroidRuntimeSettings), 0x0000000000044001, CPP_BOOL_PROPERTY_BITMASK(bRemoveOSIG, UAndroidRuntimeSettings), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bPackageForGearVR, UAndroidRuntimeSettings, bool);
				UProperty* NewProp_bPackageForGearVR = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bPackageForGearVR"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bPackageForGearVR, UAndroidRuntimeSettings), 0x0000000000044001, CPP_BOOL_PROPERTY_BITMASK(bPackageForGearVR, UAndroidRuntimeSettings), sizeof(bool), true);
				UProperty* NewProp_ExtraPermissions = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ExtraPermissions"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ExtraPermissions, UAndroidRuntimeSettings), 0x0000000000044001);
				UProperty* NewProp_ExtraPermissions_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ExtraPermissions, TEXT("ExtraPermissions"), RF_Public|RF_Transient|RF_Native) UStrProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000004000);
				UProperty* NewProp_ExtraActivitySettings = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ExtraActivitySettings"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ExtraActivitySettings, UAndroidRuntimeSettings), 0x0000000000044001);
				UProperty* NewProp_ExtraActivityNodeTags = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ExtraActivityNodeTags"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ExtraActivityNodeTags, UAndroidRuntimeSettings), 0x0000000000044001);
				UProperty* NewProp_ExtraActivityNodeTags_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ExtraActivityNodeTags, TEXT("ExtraActivityNodeTags"), RF_Public|RF_Transient|RF_Native) UStrProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000004000);
				UProperty* NewProp_ExtraApplicationSettings = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ExtraApplicationSettings"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ExtraApplicationSettings, UAndroidRuntimeSettings), 0x0000000000044001);
				UProperty* NewProp_ExtraApplicationNodeTags = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ExtraApplicationNodeTags"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ExtraApplicationNodeTags, UAndroidRuntimeSettings), 0x0000000000044001);
				UProperty* NewProp_ExtraApplicationNodeTags_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ExtraApplicationNodeTags, TEXT("ExtraApplicationNodeTags"), RF_Public|RF_Transient|RF_Native) UStrProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000004000);
				UProperty* NewProp_ExtraManifestNodeTags = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ExtraManifestNodeTags"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ExtraManifestNodeTags, UAndroidRuntimeSettings), 0x0000000000044001);
				UProperty* NewProp_ExtraManifestNodeTags_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ExtraManifestNodeTags, TEXT("ExtraManifestNodeTags"), RF_Public|RF_Transient|RF_Native) UStrProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000004000);
				UProperty* NewProp_DepthBufferPreference = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DepthBufferPreference"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(DepthBufferPreference, UAndroidRuntimeSettings), 0x0000000000044001, Z_Construct_UEnum_AndroidRuntimeSettings_EAndroidDepthBufferPreference());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bFullScreen, UAndroidRuntimeSettings, bool);
				UProperty* NewProp_bFullScreen = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bFullScreen"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bFullScreen, UAndroidRuntimeSettings), 0x0000000000044001, CPP_BOOL_PROPERTY_BITMASK(bFullScreen, UAndroidRuntimeSettings), sizeof(bool), true);
				UProperty* NewProp_Orientation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Orientation"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(Orientation, UAndroidRuntimeSettings), 0x0000000000044001, Z_Construct_UEnum_AndroidRuntimeSettings_EAndroidScreenOrientation());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDisableVerifyOBBOnStartUp, UAndroidRuntimeSettings, bool);
				UProperty* NewProp_bDisableVerifyOBBOnStartUp = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bDisableVerifyOBBOnStartUp"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDisableVerifyOBBOnStartUp, UAndroidRuntimeSettings), 0x0000000000044001, CPP_BOOL_PROPERTY_BITMASK(bDisableVerifyOBBOnStartUp, UAndroidRuntimeSettings), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bPackageDataInsideApk, UAndroidRuntimeSettings, bool);
				UProperty* NewProp_bPackageDataInsideApk = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bPackageDataInsideApk"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bPackageDataInsideApk, UAndroidRuntimeSettings), 0x0000000000044001, CPP_BOOL_PROPERTY_BITMASK(bPackageDataInsideApk, UAndroidRuntimeSettings), sizeof(bool), true);
				UProperty* NewProp_TargetSDKVersion = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TargetSDKVersion"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(TargetSDKVersion, UAndroidRuntimeSettings), 0x0000000000044001);
				UProperty* NewProp_MinSDKVersion = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MinSDKVersion"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MinSDKVersion, UAndroidRuntimeSettings), 0x0000000000044001);
				UProperty* NewProp_VersionDisplayName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VersionDisplayName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(VersionDisplayName, UAndroidRuntimeSettings), 0x0000000000044001);
				UProperty* NewProp_ApplicationDisplayName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ApplicationDisplayName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ApplicationDisplayName, UAndroidRuntimeSettings), 0x0000000000044001);
				UProperty* NewProp_StoreVersion = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StoreVersion"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(StoreVersion, UAndroidRuntimeSettings), 0x0000000000044001);
				UProperty* NewProp_PackageName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PackageName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(PackageName, UAndroidRuntimeSettings), 0x0000000000044001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("AndroidRuntimeSettings.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/AndroidRuntimeSettings.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Implements the settings for the Android runtime platform."));
				MetaData->SetValue(NewProp_bMultiTargetFormat_ASTC, TEXT("Category"), TEXT("MultiTextureFormats"));
				MetaData->SetValue(NewProp_bMultiTargetFormat_ASTC, TEXT("DisplayName"), TEXT("Include ASTC textures"));
				MetaData->SetValue(NewProp_bMultiTargetFormat_ASTC, TEXT("ModuleRelativePath"), TEXT("Classes/AndroidRuntimeSettings.h"));
				MetaData->SetValue(NewProp_bMultiTargetFormat_ASTC, TEXT("ToolTip"), TEXT("Include ASTC textures when packaging with the Android (Multi) variant."));
				MetaData->SetValue(NewProp_bMultiTargetFormat_ATC, TEXT("Category"), TEXT("MultiTextureFormats"));
				MetaData->SetValue(NewProp_bMultiTargetFormat_ATC, TEXT("DisplayName"), TEXT("Include ATC textures"));
				MetaData->SetValue(NewProp_bMultiTargetFormat_ATC, TEXT("ModuleRelativePath"), TEXT("Classes/AndroidRuntimeSettings.h"));
				MetaData->SetValue(NewProp_bMultiTargetFormat_ATC, TEXT("ToolTip"), TEXT("Include ATC textures when packaging with the Android (Multi) variant."));
				MetaData->SetValue(NewProp_bMultiTargetFormat_PVRTC, TEXT("Category"), TEXT("MultiTextureFormats"));
				MetaData->SetValue(NewProp_bMultiTargetFormat_PVRTC, TEXT("DisplayName"), TEXT("Include PVRTC textures"));
				MetaData->SetValue(NewProp_bMultiTargetFormat_PVRTC, TEXT("ModuleRelativePath"), TEXT("Classes/AndroidRuntimeSettings.h"));
				MetaData->SetValue(NewProp_bMultiTargetFormat_PVRTC, TEXT("ToolTip"), TEXT("Include PVRTC textures when packaging with the Android (Multi) variant."));
				MetaData->SetValue(NewProp_bMultiTargetFormat_DXT, TEXT("Category"), TEXT("MultiTextureFormats"));
				MetaData->SetValue(NewProp_bMultiTargetFormat_DXT, TEXT("DisplayName"), TEXT("Include DXT textures"));
				MetaData->SetValue(NewProp_bMultiTargetFormat_DXT, TEXT("ModuleRelativePath"), TEXT("Classes/AndroidRuntimeSettings.h"));
				MetaData->SetValue(NewProp_bMultiTargetFormat_DXT, TEXT("ToolTip"), TEXT("Include DXT textures when packaging with the Android (Multi) variant."));
				MetaData->SetValue(NewProp_bMultiTargetFormat_ETC2, TEXT("Category"), TEXT("MultiTextureFormats"));
				MetaData->SetValue(NewProp_bMultiTargetFormat_ETC2, TEXT("DisplayName"), TEXT("Include ETC2 textures"));
				MetaData->SetValue(NewProp_bMultiTargetFormat_ETC2, TEXT("ModuleRelativePath"), TEXT("Classes/AndroidRuntimeSettings.h"));
				MetaData->SetValue(NewProp_bMultiTargetFormat_ETC2, TEXT("ToolTip"), TEXT("Include ETC2 textures when packaging with the Android (Multi) variant."));
				MetaData->SetValue(NewProp_bMultiTargetFormat_ETC1, TEXT("Category"), TEXT("MultiTextureFormats"));
				MetaData->SetValue(NewProp_bMultiTargetFormat_ETC1, TEXT("DisplayName"), TEXT("Include ETC1 textures"));
				MetaData->SetValue(NewProp_bMultiTargetFormat_ETC1, TEXT("ModuleRelativePath"), TEXT("Classes/AndroidRuntimeSettings.h"));
				MetaData->SetValue(NewProp_bMultiTargetFormat_ETC1, TEXT("ToolTip"), TEXT("Include ETC1 textures when packaging with the Android (Multi) variant. ETC1 will be included if no other formats are selected."));
				MetaData->SetValue(NewProp_AndroidAudio, TEXT("Category"), TEXT("DataCooker"));
				MetaData->SetValue(NewProp_AndroidAudio, TEXT("DisplayName"), TEXT("Audio encoding"));
				MetaData->SetValue(NewProp_AndroidAudio, TEXT("ModuleRelativePath"), TEXT("Classes/AndroidRuntimeSettings.h"));
				MetaData->SetValue(NewProp_AndroidAudio, TEXT("ToolTip"), TEXT("Android Audio encoding options"));
				MetaData->SetValue(NewProp_bShowLaunchImage, TEXT("Category"), TEXT("LaunchImages"));
				MetaData->SetValue(NewProp_bShowLaunchImage, TEXT("DisplayName"), TEXT("Show launch image"));
				MetaData->SetValue(NewProp_bShowLaunchImage, TEXT("ModuleRelativePath"), TEXT("Classes/AndroidRuntimeSettings.h"));
				MetaData->SetValue(NewProp_bShowLaunchImage, TEXT("ToolTip"), TEXT("Show the launch image as a startup slash screen"));
				MetaData->SetValue(NewProp_GooglePlayLicenseKey, TEXT("Category"), TEXT("GooglePlayServices"));
				MetaData->SetValue(NewProp_GooglePlayLicenseKey, TEXT("ModuleRelativePath"), TEXT("Classes/AndroidRuntimeSettings.h"));
				MetaData->SetValue(NewProp_GooglePlayLicenseKey, TEXT("ToolTip"), TEXT("The unique identifier for this application (needed for IAP)"));
				MetaData->SetValue(NewProp_AdMobAdUnitIDs, TEXT("Category"), TEXT("GooglePlayServices"));
				MetaData->SetValue(NewProp_AdMobAdUnitIDs, TEXT("ModuleRelativePath"), TEXT("Classes/AndroidRuntimeSettings.h"));
				MetaData->SetValue(NewProp_AdMobAdUnitIDs, TEXT("ToolTip"), TEXT("Identifiers for ads obtained from AdMob"));
				MetaData->SetValue(NewProp_AdMobAdUnitID, TEXT("Category"), TEXT("GooglePlayServices"));
				MetaData->SetValue(NewProp_AdMobAdUnitID, TEXT("ModuleRelativePath"), TEXT("Classes/AndroidRuntimeSettings.h"));
				MetaData->SetValue(NewProp_AdMobAdUnitID, TEXT("ToolTip"), TEXT("The unique identifier for the ad obtained from AdMob."));
				MetaData->SetValue(NewProp_LeaderboardMap, TEXT("Category"), TEXT("GooglePlayServices"));
				MetaData->SetValue(NewProp_LeaderboardMap, TEXT("ModuleRelativePath"), TEXT("Classes/AndroidRuntimeSettings.h"));
				MetaData->SetValue(NewProp_LeaderboardMap, TEXT("ToolTip"), TEXT("Mapping of game leaderboard names to IDs generated by Google Play."));
				MetaData->SetValue(NewProp_AchievementMap, TEXT("Category"), TEXT("GooglePlayServices"));
				MetaData->SetValue(NewProp_AchievementMap, TEXT("ModuleRelativePath"), TEXT("Classes/AndroidRuntimeSettings.h"));
				MetaData->SetValue(NewProp_AchievementMap, TEXT("ToolTip"), TEXT("Mapping of game achievement names to IDs generated by Google Play."));
				MetaData->SetValue(NewProp_GamesAppID, TEXT("Category"), TEXT("GooglePlayServices"));
				MetaData->SetValue(NewProp_GamesAppID, TEXT("ModuleRelativePath"), TEXT("Classes/AndroidRuntimeSettings.h"));
				MetaData->SetValue(NewProp_GamesAppID, TEXT("ToolTip"), TEXT("The app id obtained from the Google Play Developer Console"));
				MetaData->SetValue(NewProp_bEnableGooglePlaySupport, TEXT("Category"), TEXT("GooglePlayServices"));
				MetaData->SetValue(NewProp_bEnableGooglePlaySupport, TEXT("ModuleRelativePath"), TEXT("Classes/AndroidRuntimeSettings.h"));
				MetaData->SetValue(NewProp_bEnableGooglePlaySupport, TEXT("ToolTip"), TEXT("Should Google Play support be enabled?"));
				MetaData->SetValue(NewProp_bBuildForES31, TEXT("Category"), TEXT("Build"));
				MetaData->SetValue(NewProp_bBuildForES31, TEXT("DisplayName"), TEXT("Support OpenGL ES31 + AEP"));
				MetaData->SetValue(NewProp_bBuildForES31, TEXT("ModuleRelativePath"), TEXT("Classes/AndroidRuntimeSettings.h"));
				MetaData->SetValue(NewProp_bBuildForES31, TEXT("ToolTip"), TEXT("Enable ES31 support? [CURRENTLY FOR FULL SOURCE GAMES ONLY]"));
				MetaData->SetValue(NewProp_bBuildForES2, TEXT("Category"), TEXT("Build"));
				MetaData->SetValue(NewProp_bBuildForES2, TEXT("DisplayName"), TEXT("Support OpenGL ES2"));
				MetaData->SetValue(NewProp_bBuildForES2, TEXT("ModuleRelativePath"), TEXT("Classes/AndroidRuntimeSettings.h"));
				MetaData->SetValue(NewProp_bBuildForES2, TEXT("ToolTip"), TEXT("Enable ES2 support? [CURRENTLY FOR FULL SOURCE GAMES ONLY]"));
				MetaData->SetValue(NewProp_bBuildForX8664, TEXT("Category"), TEXT("Build"));
				MetaData->SetValue(NewProp_bBuildForX8664, TEXT("DisplayName"), TEXT("Support x86_64 [aka x64]"));
				MetaData->SetValue(NewProp_bBuildForX8664, TEXT("ModuleRelativePath"), TEXT("Classes/AndroidRuntimeSettings.h"));
				MetaData->SetValue(NewProp_bBuildForX8664, TEXT("ToolTip"), TEXT("Enable x86-64 support? [CURRENTLY FOR FULL SOURCE GAMES ONLY]"));
				MetaData->SetValue(NewProp_bBuildForX86, TEXT("Category"), TEXT("Build"));
				MetaData->SetValue(NewProp_bBuildForX86, TEXT("DisplayName"), TEXT("Support x86"));
				MetaData->SetValue(NewProp_bBuildForX86, TEXT("ModuleRelativePath"), TEXT("Classes/AndroidRuntimeSettings.h"));
				MetaData->SetValue(NewProp_bBuildForX86, TEXT("ToolTip"), TEXT("Enable x86 support? [CURRENTLY FOR FULL SOURCE GAMES ONLY]"));
				MetaData->SetValue(NewProp_bBuildForArmV7, TEXT("Category"), TEXT("Build"));
				MetaData->SetValue(NewProp_bBuildForArmV7, TEXT("DisplayName"), TEXT("Support armv7 [aka armeabi-v7a]"));
				MetaData->SetValue(NewProp_bBuildForArmV7, TEXT("ModuleRelativePath"), TEXT("Classes/AndroidRuntimeSettings.h"));
				MetaData->SetValue(NewProp_bBuildForArmV7, TEXT("ToolTip"), TEXT("Enable ArmV7 support? (this will be used if all type are unchecked)"));
				MetaData->SetValue(NewProp_KeyPassword, TEXT("Category"), TEXT("DistributionSigning"));
				MetaData->SetValue(NewProp_KeyPassword, TEXT("DisplayName"), TEXT("Key Password (leave blank to use Key Store Password)"));
				MetaData->SetValue(NewProp_KeyPassword, TEXT("ModuleRelativePath"), TEXT("Classes/AndroidRuntimeSettings.h"));
				MetaData->SetValue(NewProp_KeyPassword, TEXT("ToolTip"), TEXT("This is the password for the key that you may have specified with keytool, if it's different from the keystore password. Leave blank to use same as Keystore"));
				MetaData->SetValue(NewProp_KeyStorePassword, TEXT("Category"), TEXT("DistributionSigning"));
				MetaData->SetValue(NewProp_KeyStorePassword, TEXT("DisplayName"), TEXT("Key Store Password (-storepass parameter to keytool)"));
				MetaData->SetValue(NewProp_KeyStorePassword, TEXT("ModuleRelativePath"), TEXT("Classes/AndroidRuntimeSettings.h"));
				MetaData->SetValue(NewProp_KeyStorePassword, TEXT("ToolTip"), TEXT("This is the password that you specified FOR THE KEYSTORE NOT THE KEY, when running keytool (either with -storepass or by typing it in)."));
				MetaData->SetValue(NewProp_KeyAlias, TEXT("Category"), TEXT("DistributionSigning"));
				MetaData->SetValue(NewProp_KeyAlias, TEXT("DisplayName"), TEXT("Key Alias (-alias parameter to keytool)"));
				MetaData->SetValue(NewProp_KeyAlias, TEXT("ModuleRelativePath"), TEXT("Classes/AndroidRuntimeSettings.h"));
				MetaData->SetValue(NewProp_KeyAlias, TEXT("ToolTip"), TEXT("This is the name of the key that you specified with the -alias parameter to keytool"));
				MetaData->SetValue(NewProp_KeyStore, TEXT("Category"), TEXT("DistributionSigning"));
				MetaData->SetValue(NewProp_KeyStore, TEXT("DisplayName"), TEXT("Key Store (output of keytool, placed in <Project>/Build/Android)"));
				MetaData->SetValue(NewProp_KeyStore, TEXT("ModuleRelativePath"), TEXT("Classes/AndroidRuntimeSettings.h"));
				MetaData->SetValue(NewProp_KeyStore, TEXT("ToolTip"), TEXT("This is the file that keytool outputs, specified with the -keystore parameter (file should be in <Project>/Build/Android)"));
				MetaData->SetValue(NewProp_bRemoveOSIG, TEXT("Category"), TEXT("AdvancedAPKPackaging"));
				MetaData->SetValue(NewProp_bRemoveOSIG, TEXT("DisplayName"), TEXT("Remove Oculus Signature Files from Distribution APK"));
				MetaData->SetValue(NewProp_bRemoveOSIG, TEXT("ModuleRelativePath"), TEXT("Classes/AndroidRuntimeSettings.h"));
				MetaData->SetValue(NewProp_bRemoveOSIG, TEXT("ToolTip"), TEXT("Removes Oculus Signature Files (osig) from APK if GearVR APK signed for distribution and enables entitlement checker"));
				MetaData->SetValue(NewProp_bPackageForGearVR, TEXT("Category"), TEXT("AdvancedAPKPackaging"));
				MetaData->SetValue(NewProp_bPackageForGearVR, TEXT("DisplayName"), TEXT("Configure the AndroidManifest for deployment to GearVR"));
				MetaData->SetValue(NewProp_bPackageForGearVR, TEXT("ModuleRelativePath"), TEXT("Classes/AndroidRuntimeSettings.h"));
				MetaData->SetValue(NewProp_bPackageForGearVR, TEXT("ToolTip"), TEXT("Configure AndroidManifest.xml for GearVR"));
				MetaData->SetValue(NewProp_ExtraPermissions, TEXT("Category"), TEXT("AdvancedAPKPackaging"));
				MetaData->SetValue(NewProp_ExtraPermissions, TEXT("DisplayName"), TEXT("Extra Permissions (e.g. 'android.permission.INTERNET')"));
				MetaData->SetValue(NewProp_ExtraPermissions, TEXT("ModuleRelativePath"), TEXT("Classes/AndroidRuntimeSettings.h"));
				MetaData->SetValue(NewProp_ExtraPermissions, TEXT("ToolTip"), TEXT("Any extra permissions your app needs (an optional file <Project>/Build/Android/ManifestRequirementsAdditions.txt will also be included,\nor an optional file <Project>/Build/Android/ManifestRequirementsOverride.txt will replace the entire <!-- Requirements --> section)"));
				MetaData->SetValue(NewProp_ExtraActivitySettings, TEXT("Category"), TEXT("AdvancedAPKPackaging"));
				MetaData->SetValue(NewProp_ExtraActivitySettings, TEXT("DisplayName"), TEXT("Extra Settings for <activity> section (\\n to separate lines)"));
				MetaData->SetValue(NewProp_ExtraActivitySettings, TEXT("ModuleRelativePath"), TEXT("Classes/AndroidRuntimeSettings.h"));
				MetaData->SetValue(NewProp_ExtraActivitySettings, TEXT("ToolTip"), TEXT("Any extra settings for the main <activity> section (an optional file <Project>/Build/Android/ManifestApplicationActivtyAdditions.txt will also be included)"));
				MetaData->SetValue(NewProp_ExtraActivityNodeTags, TEXT("Category"), TEXT("AdvancedAPKPackaging"));
				MetaData->SetValue(NewProp_ExtraActivityNodeTags, TEXT("DisplayName"), TEXT("Extra Tags for UE4.GameActivity <activity> node"));
				MetaData->SetValue(NewProp_ExtraActivityNodeTags, TEXT("ModuleRelativePath"), TEXT("Classes/AndroidRuntimeSettings.h"));
				MetaData->SetValue(NewProp_ExtraApplicationSettings, TEXT("Category"), TEXT("AdvancedAPKPackaging"));
				MetaData->SetValue(NewProp_ExtraApplicationSettings, TEXT("DisplayName"), TEXT("Extra Settings for <application> section (\\n to separate lines)"));
				MetaData->SetValue(NewProp_ExtraApplicationSettings, TEXT("ModuleRelativePath"), TEXT("Classes/AndroidRuntimeSettings.h"));
				MetaData->SetValue(NewProp_ExtraApplicationSettings, TEXT("ToolTip"), TEXT("Any extra tags for the com.epicgames.UE4.GameActivity <activity> node\nAny extra settings for the <application> section (an optional file <Project>/Build/Android/ManifestApplicationAdditions.txt will also be included)"));
				MetaData->SetValue(NewProp_ExtraApplicationNodeTags, TEXT("Category"), TEXT("AdvancedAPKPackaging"));
				MetaData->SetValue(NewProp_ExtraApplicationNodeTags, TEXT("DisplayName"), TEXT("Extra Tags for <application> node"));
				MetaData->SetValue(NewProp_ExtraApplicationNodeTags, TEXT("ModuleRelativePath"), TEXT("Classes/AndroidRuntimeSettings.h"));
				MetaData->SetValue(NewProp_ExtraApplicationNodeTags, TEXT("ToolTip"), TEXT("Any extra tags for the <application> node"));
				MetaData->SetValue(NewProp_ExtraManifestNodeTags, TEXT("Category"), TEXT("AdvancedAPKPackaging"));
				MetaData->SetValue(NewProp_ExtraManifestNodeTags, TEXT("DisplayName"), TEXT("Extra Tags for <manifest> node"));
				MetaData->SetValue(NewProp_ExtraManifestNodeTags, TEXT("ModuleRelativePath"), TEXT("Classes/AndroidRuntimeSettings.h"));
				MetaData->SetValue(NewProp_ExtraManifestNodeTags, TEXT("ToolTip"), TEXT("Any extra tags for the <manifest> node"));
				MetaData->SetValue(NewProp_DepthBufferPreference, TEXT("Category"), TEXT("APKPackaging"));
				MetaData->SetValue(NewProp_DepthBufferPreference, TEXT("DisplayName"), TEXT("Preferred Depth Buffer format"));
				MetaData->SetValue(NewProp_DepthBufferPreference, TEXT("ModuleRelativePath"), TEXT("Classes/AndroidRuntimeSettings.h"));
				MetaData->SetValue(NewProp_DepthBufferPreference, TEXT("ToolTip"), TEXT("The preferred depth buffer bitcount for Android"));
				MetaData->SetValue(NewProp_bFullScreen, TEXT("Category"), TEXT("APKPackaging"));
				MetaData->SetValue(NewProp_bFullScreen, TEXT("DisplayName"), TEXT("Enable FullScreen Immersive on KitKat and above devices."));
				MetaData->SetValue(NewProp_bFullScreen, TEXT("ModuleRelativePath"), TEXT("Classes/AndroidRuntimeSettings.h"));
				MetaData->SetValue(NewProp_bFullScreen, TEXT("ToolTip"), TEXT("Should the software navigation buttons be hidden or not"));
				MetaData->SetValue(NewProp_Orientation, TEXT("Category"), TEXT("APKPackaging"));
				MetaData->SetValue(NewProp_Orientation, TEXT("ModuleRelativePath"), TEXT("Classes/AndroidRuntimeSettings.h"));
				MetaData->SetValue(NewProp_Orientation, TEXT("ToolTip"), TEXT("The permitted orientation of the application on the device"));
				MetaData->SetValue(NewProp_bDisableVerifyOBBOnStartUp, TEXT("Category"), TEXT("APKPackaging"));
				MetaData->SetValue(NewProp_bDisableVerifyOBBOnStartUp, TEXT("DisplayName"), TEXT("Disable verify OBB on first start/update."));
				MetaData->SetValue(NewProp_bDisableVerifyOBBOnStartUp, TEXT("ModuleRelativePath"), TEXT("Classes/AndroidRuntimeSettings.h"));
				MetaData->SetValue(NewProp_bDisableVerifyOBBOnStartUp, TEXT("ToolTip"), TEXT("Disable the verification of an OBB file when it is downloaded or on first start when in a distribution build."));
				MetaData->SetValue(NewProp_bPackageDataInsideApk, TEXT("Category"), TEXT("APKPackaging"));
				MetaData->SetValue(NewProp_bPackageDataInsideApk, TEXT("DisplayName"), TEXT("Package game data inside .apk?"));
				MetaData->SetValue(NewProp_bPackageDataInsideApk, TEXT("ModuleRelativePath"), TEXT("Classes/AndroidRuntimeSettings.h"));
				MetaData->SetValue(NewProp_bPackageDataInsideApk, TEXT("ToolTip"), TEXT("Should the data be placed into the .apk file instead of a separate .obb file. Amazon requires this to be enabled, but Google Play Store will not allow .apk files larger than 50MB, so only small games will work with this enabled."));
				MetaData->SetValue(NewProp_TargetSDKVersion, TEXT("Category"), TEXT("APKPackaging"));
				MetaData->SetValue(NewProp_TargetSDKVersion, TEXT("DisplayName"), TEXT("Target SDK Version (9=Gingerbread, 14=Ice Cream Sandwich, 21=Lollipop)"));
				MetaData->SetValue(NewProp_TargetSDKVersion, TEXT("ModuleRelativePath"), TEXT("Classes/AndroidRuntimeSettings.h"));
				MetaData->SetValue(NewProp_TargetSDKVersion, TEXT("ToolTip"), TEXT("What OS version the app is expected to run on (do not set this lower than 9, set to 19 for GearVR)"));
				MetaData->SetValue(NewProp_MinSDKVersion, TEXT("Category"), TEXT("APKPackaging"));
				MetaData->SetValue(NewProp_MinSDKVersion, TEXT("DisplayName"), TEXT("Minimum SDK Version (9=Gingerbread, 14=Ice Cream Sandwich, 21=Lollipop)"));
				MetaData->SetValue(NewProp_MinSDKVersion, TEXT("ModuleRelativePath"), TEXT("Classes/AndroidRuntimeSettings.h"));
				MetaData->SetValue(NewProp_MinSDKVersion, TEXT("ToolTip"), TEXT("What OS version the app is allowed to be installed on (do not set this lower than 9)"));
				MetaData->SetValue(NewProp_VersionDisplayName, TEXT("Category"), TEXT("APKPackaging"));
				MetaData->SetValue(NewProp_VersionDisplayName, TEXT("DisplayName"), TEXT("Version Display Name (usually x.y)"));
				MetaData->SetValue(NewProp_VersionDisplayName, TEXT("ModuleRelativePath"), TEXT("Classes/AndroidRuntimeSettings.h"));
				MetaData->SetValue(NewProp_VersionDisplayName, TEXT("ToolTip"), TEXT("The visual version displayed for end users"));
				MetaData->SetValue(NewProp_ApplicationDisplayName, TEXT("Category"), TEXT("APKPackaging"));
				MetaData->SetValue(NewProp_ApplicationDisplayName, TEXT("DisplayName"), TEXT("Application Display Name (app_name), project name if blank"));
				MetaData->SetValue(NewProp_ApplicationDisplayName, TEXT("ModuleRelativePath"), TEXT("Classes/AndroidRuntimeSettings.h"));
				MetaData->SetValue(NewProp_ApplicationDisplayName, TEXT("ToolTip"), TEXT("The visual application name displayed for end users"));
				MetaData->SetValue(NewProp_StoreVersion, TEXT("Category"), TEXT("APKPackaging"));
				MetaData->SetValue(NewProp_StoreVersion, TEXT("ClampMax"), TEXT("65535"));
				MetaData->SetValue(NewProp_StoreVersion, TEXT("ClampMin"), TEXT("1"));
				MetaData->SetValue(NewProp_StoreVersion, TEXT("DisplayName"), TEXT("Store Version (1-65535)"));
				MetaData->SetValue(NewProp_StoreVersion, TEXT("ModuleRelativePath"), TEXT("Classes/AndroidRuntimeSettings.h"));
				MetaData->SetValue(NewProp_StoreVersion, TEXT("ToolTip"), TEXT("The version number used to indicate newer versions in the Store"));
				MetaData->SetValue(NewProp_PackageName, TEXT("Category"), TEXT("APKPackaging"));
				MetaData->SetValue(NewProp_PackageName, TEXT("DisplayName"), TEXT("Android Package Name ('com.Company.Project', [PROJECT] is replaced with project name)"));
				MetaData->SetValue(NewProp_PackageName, TEXT("ModuleRelativePath"), TEXT("Classes/AndroidRuntimeSettings.h"));
				MetaData->SetValue(NewProp_PackageName, TEXT("ToolTip"), TEXT("The official name of the product (same as the name you use on the Play Store web site). Note: Must have at least 2 sections separated by a period and be unique!"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UAndroidRuntimeSettings(Z_Construct_UClass_UAndroidRuntimeSettings, TEXT("UAndroidRuntimeSettings"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UAndroidRuntimeSettings);
	UPackage* Z_Construct_UPackage_AndroidRuntimeSettings()
	{
		static UPackage* ReturnPackage = NULL;
		if (!ReturnPackage)
		{
			ReturnPackage = CastChecked<UPackage>(StaticFindObjectFast(UPackage::StaticClass(), NULL, FName(TEXT("/Script/AndroidRuntimeSettings")), false, false));
			ReturnPackage->SetPackageFlags(PKG_CompiledIn | 0x00000000);
			FGuid Guid;
			Guid.A = 0xA0F9D7DA;
			Guid.B = 0x9A88C43B;
			Guid.C = 0x00000000;
			Guid.D = 0x00000000;
			ReturnPackage->SetGuid(Guid);

		}
		return ReturnPackage;
	}
#endif

PRAGMA_ENABLE_DEPRECATION_WARNINGS
