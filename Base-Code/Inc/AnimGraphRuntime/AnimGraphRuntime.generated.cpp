// Copyright 1998-2015 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Boilerplate C++ definitions for a single module.
	This is automatically generated by UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "Private/AnimGraphRuntimePrivatePCH.h"
#include "AnimGraphRuntime.generated.dep.h"
PRAGMA_DISABLE_DEPRECATION_WARNINGS
void EmptyLinkFunctionForGeneratedCodeAnimGraphRuntime() {}
class UScriptStruct* FAnimNode_SkeletalControlBase::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_SkeletalControlBase();
		extern ANIMGRAPHRUNTIME_API uint32 Get_Z_Construct_UScriptStruct_FAnimNode_SkeletalControlBase_CRC();
		extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage_AnimGraphRuntime();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FAnimNode_SkeletalControlBase, Z_Construct_UPackage_AnimGraphRuntime(), TEXT("AnimNode_SkeletalControlBase"), sizeof(FAnimNode_SkeletalControlBase), Get_Z_Construct_UScriptStruct_FAnimNode_SkeletalControlBase_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FAnimNode_SkeletalControlBase(FAnimNode_SkeletalControlBase::StaticStruct, TEXT("/Script/AnimGraphRuntime"));
static struct FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_SkeletalControlBase
{
	FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_SkeletalControlBase()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("AnimNode_SkeletalControlBase")),new UScriptStruct::TCppStructOps<FAnimNode_SkeletalControlBase>);
	}
} ScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_SkeletalControlBase;
static class UEnum* EDrivenBoneModificationMode_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UEnum* Z_Construct_UEnum_AnimGraphRuntime_EDrivenBoneModificationMode();
		extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage_AnimGraphRuntime();
		Singleton = GetStaticEnum(Z_Construct_UEnum_AnimGraphRuntime_EDrivenBoneModificationMode, Z_Construct_UPackage_AnimGraphRuntime(), TEXT("EDrivenBoneModificationMode"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EDrivenBoneModificationMode(EDrivenBoneModificationMode_StaticEnum, TEXT("/Script/AnimGraphRuntime"));
static class UEnum* EComponentType_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UEnum* Z_Construct_UEnum_AnimGraphRuntime_EComponentType();
		extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage_AnimGraphRuntime();
		Singleton = GetStaticEnum(Z_Construct_UEnum_AnimGraphRuntime_EComponentType, Z_Construct_UPackage_AnimGraphRuntime(), TEXT("EComponentType"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EComponentType(EComponentType_StaticEnum, TEXT("/Script/AnimGraphRuntime"));
class UScriptStruct* FAnimNode_BoneDrivenController::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_BoneDrivenController();
		extern ANIMGRAPHRUNTIME_API uint32 Get_Z_Construct_UScriptStruct_FAnimNode_BoneDrivenController_CRC();
		extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage_AnimGraphRuntime();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FAnimNode_BoneDrivenController, Z_Construct_UPackage_AnimGraphRuntime(), TEXT("AnimNode_BoneDrivenController"), sizeof(FAnimNode_BoneDrivenController), Get_Z_Construct_UScriptStruct_FAnimNode_BoneDrivenController_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FAnimNode_BoneDrivenController(FAnimNode_BoneDrivenController::StaticStruct, TEXT("/Script/AnimGraphRuntime"));
static struct FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_BoneDrivenController
{
	FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_BoneDrivenController()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("AnimNode_BoneDrivenController")),new UScriptStruct::TCppStructOps<FAnimNode_BoneDrivenController>);
	}
} ScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_BoneDrivenController;
class UScriptStruct* FAnimNode_CopyBone::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_CopyBone();
		extern ANIMGRAPHRUNTIME_API uint32 Get_Z_Construct_UScriptStruct_FAnimNode_CopyBone_CRC();
		extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage_AnimGraphRuntime();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FAnimNode_CopyBone, Z_Construct_UPackage_AnimGraphRuntime(), TEXT("AnimNode_CopyBone"), sizeof(FAnimNode_CopyBone), Get_Z_Construct_UScriptStruct_FAnimNode_CopyBone_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FAnimNode_CopyBone(FAnimNode_CopyBone::StaticStruct, TEXT("/Script/AnimGraphRuntime"));
static struct FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_CopyBone
{
	FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_CopyBone()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("AnimNode_CopyBone")),new UScriptStruct::TCppStructOps<FAnimNode_CopyBone>);
	}
} ScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_CopyBone;
class UScriptStruct* FAnimNode_Fabrik::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_Fabrik();
		extern ANIMGRAPHRUNTIME_API uint32 Get_Z_Construct_UScriptStruct_FAnimNode_Fabrik_CRC();
		extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage_AnimGraphRuntime();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FAnimNode_Fabrik, Z_Construct_UPackage_AnimGraphRuntime(), TEXT("AnimNode_Fabrik"), sizeof(FAnimNode_Fabrik), Get_Z_Construct_UScriptStruct_FAnimNode_Fabrik_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FAnimNode_Fabrik(FAnimNode_Fabrik::StaticStruct, TEXT("/Script/AnimGraphRuntime"));
static struct FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_Fabrik
{
	FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_Fabrik()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("AnimNode_Fabrik")),new UScriptStruct::TCppStructOps<FAnimNode_Fabrik>);
	}
} ScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_Fabrik;
class UScriptStruct* FAnimNode_HandIKRetargeting::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_HandIKRetargeting();
		extern ANIMGRAPHRUNTIME_API uint32 Get_Z_Construct_UScriptStruct_FAnimNode_HandIKRetargeting_CRC();
		extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage_AnimGraphRuntime();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FAnimNode_HandIKRetargeting, Z_Construct_UPackage_AnimGraphRuntime(), TEXT("AnimNode_HandIKRetargeting"), sizeof(FAnimNode_HandIKRetargeting), Get_Z_Construct_UScriptStruct_FAnimNode_HandIKRetargeting_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FAnimNode_HandIKRetargeting(FAnimNode_HandIKRetargeting::StaticStruct, TEXT("/Script/AnimGraphRuntime"));
static struct FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_HandIKRetargeting
{
	FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_HandIKRetargeting()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("AnimNode_HandIKRetargeting")),new UScriptStruct::TCppStructOps<FAnimNode_HandIKRetargeting>);
	}
} ScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_HandIKRetargeting;
static class UEnum* EInterpolationBlend_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UEnum* Z_Construct_UEnum_AnimGraphRuntime_EInterpolationBlend();
		extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage_AnimGraphRuntime();
		Singleton = GetStaticEnum(Z_Construct_UEnum_AnimGraphRuntime_EInterpolationBlend, Z_Construct_UPackage_AnimGraphRuntime(), TEXT("EInterpolationBlend"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EInterpolationBlend(EInterpolationBlend_StaticEnum, TEXT("/Script/AnimGraphRuntime"));
static class UEnum* EAxisOption_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UEnum* Z_Construct_UEnum_AnimGraphRuntime_EAxisOption();
		extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage_AnimGraphRuntime();
		Singleton = GetStaticEnum(Z_Construct_UEnum_AnimGraphRuntime_EAxisOption, Z_Construct_UPackage_AnimGraphRuntime(), TEXT("EAxisOption"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EAxisOption(EAxisOption_StaticEnum, TEXT("/Script/AnimGraphRuntime"));
class UScriptStruct* FAnimNode_LookAt::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_LookAt();
		extern ANIMGRAPHRUNTIME_API uint32 Get_Z_Construct_UScriptStruct_FAnimNode_LookAt_CRC();
		extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage_AnimGraphRuntime();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FAnimNode_LookAt, Z_Construct_UPackage_AnimGraphRuntime(), TEXT("AnimNode_LookAt"), sizeof(FAnimNode_LookAt), Get_Z_Construct_UScriptStruct_FAnimNode_LookAt_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FAnimNode_LookAt(FAnimNode_LookAt::StaticStruct, TEXT("/Script/AnimGraphRuntime"));
static struct FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_LookAt
{
	FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_LookAt()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("AnimNode_LookAt")),new UScriptStruct::TCppStructOps<FAnimNode_LookAt>);
	}
} ScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_LookAt;
static class UEnum* EBoneModificationMode_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UEnum* Z_Construct_UEnum_AnimGraphRuntime_EBoneModificationMode();
		extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage_AnimGraphRuntime();
		Singleton = GetStaticEnum(Z_Construct_UEnum_AnimGraphRuntime_EBoneModificationMode, Z_Construct_UPackage_AnimGraphRuntime(), TEXT("EBoneModificationMode"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EBoneModificationMode(EBoneModificationMode_StaticEnum, TEXT("/Script/AnimGraphRuntime"));
class UScriptStruct* FAnimNode_ModifyBone::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_ModifyBone();
		extern ANIMGRAPHRUNTIME_API uint32 Get_Z_Construct_UScriptStruct_FAnimNode_ModifyBone_CRC();
		extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage_AnimGraphRuntime();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FAnimNode_ModifyBone, Z_Construct_UPackage_AnimGraphRuntime(), TEXT("AnimNode_ModifyBone"), sizeof(FAnimNode_ModifyBone), Get_Z_Construct_UScriptStruct_FAnimNode_ModifyBone_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FAnimNode_ModifyBone(FAnimNode_ModifyBone::StaticStruct, TEXT("/Script/AnimGraphRuntime"));
static struct FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_ModifyBone
{
	FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_ModifyBone()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("AnimNode_ModifyBone")),new UScriptStruct::TCppStructOps<FAnimNode_ModifyBone>);
	}
} ScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_ModifyBone;
class UScriptStruct* FAnimNode_ObserveBone::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_ObserveBone();
		extern ANIMGRAPHRUNTIME_API uint32 Get_Z_Construct_UScriptStruct_FAnimNode_ObserveBone_CRC();
		extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage_AnimGraphRuntime();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FAnimNode_ObserveBone, Z_Construct_UPackage_AnimGraphRuntime(), TEXT("AnimNode_ObserveBone"), sizeof(FAnimNode_ObserveBone), Get_Z_Construct_UScriptStruct_FAnimNode_ObserveBone_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FAnimNode_ObserveBone(FAnimNode_ObserveBone::StaticStruct, TEXT("/Script/AnimGraphRuntime"));
static struct FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_ObserveBone
{
	FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_ObserveBone()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("AnimNode_ObserveBone")),new UScriptStruct::TCppStructOps<FAnimNode_ObserveBone>);
	}
} ScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_ObserveBone;
static class UEnum* EBoneAxis_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UEnum* Z_Construct_UEnum_AnimGraphRuntime_EBoneAxis();
		extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage_AnimGraphRuntime();
		Singleton = GetStaticEnum(Z_Construct_UEnum_AnimGraphRuntime_EBoneAxis, Z_Construct_UPackage_AnimGraphRuntime(), TEXT("EBoneAxis"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EBoneAxis(EBoneAxis_StaticEnum, TEXT("/Script/AnimGraphRuntime"));
class UScriptStruct* FAnimNode_RotationMultiplier::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_RotationMultiplier();
		extern ANIMGRAPHRUNTIME_API uint32 Get_Z_Construct_UScriptStruct_FAnimNode_RotationMultiplier_CRC();
		extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage_AnimGraphRuntime();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FAnimNode_RotationMultiplier, Z_Construct_UPackage_AnimGraphRuntime(), TEXT("AnimNode_RotationMultiplier"), sizeof(FAnimNode_RotationMultiplier), Get_Z_Construct_UScriptStruct_FAnimNode_RotationMultiplier_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FAnimNode_RotationMultiplier(FAnimNode_RotationMultiplier::StaticStruct, TEXT("/Script/AnimGraphRuntime"));
static struct FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_RotationMultiplier
{
	FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_RotationMultiplier()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("AnimNode_RotationMultiplier")),new UScriptStruct::TCppStructOps<FAnimNode_RotationMultiplier>);
	}
} ScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_RotationMultiplier;
class UScriptStruct* FAnimNode_SpringBone::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_SpringBone();
		extern ANIMGRAPHRUNTIME_API uint32 Get_Z_Construct_UScriptStruct_FAnimNode_SpringBone_CRC();
		extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage_AnimGraphRuntime();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FAnimNode_SpringBone, Z_Construct_UPackage_AnimGraphRuntime(), TEXT("AnimNode_SpringBone"), sizeof(FAnimNode_SpringBone), Get_Z_Construct_UScriptStruct_FAnimNode_SpringBone_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FAnimNode_SpringBone(FAnimNode_SpringBone::StaticStruct, TEXT("/Script/AnimGraphRuntime"));
static struct FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_SpringBone
{
	FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_SpringBone()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("AnimNode_SpringBone")),new UScriptStruct::TCppStructOps<FAnimNode_SpringBone>);
	}
} ScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_SpringBone;
class UScriptStruct* FAnimNode_Trail::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_Trail();
		extern ANIMGRAPHRUNTIME_API uint32 Get_Z_Construct_UScriptStruct_FAnimNode_Trail_CRC();
		extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage_AnimGraphRuntime();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FAnimNode_Trail, Z_Construct_UPackage_AnimGraphRuntime(), TEXT("AnimNode_Trail"), sizeof(FAnimNode_Trail), Get_Z_Construct_UScriptStruct_FAnimNode_Trail_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FAnimNode_Trail(FAnimNode_Trail::StaticStruct, TEXT("/Script/AnimGraphRuntime"));
static struct FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_Trail
{
	FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_Trail()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("AnimNode_Trail")),new UScriptStruct::TCppStructOps<FAnimNode_Trail>);
	}
} ScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_Trail;
class UScriptStruct* FAnimNode_TwoBoneIK::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_TwoBoneIK();
		extern ANIMGRAPHRUNTIME_API uint32 Get_Z_Construct_UScriptStruct_FAnimNode_TwoBoneIK_CRC();
		extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage_AnimGraphRuntime();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FAnimNode_TwoBoneIK, Z_Construct_UPackage_AnimGraphRuntime(), TEXT("AnimNode_TwoBoneIK"), sizeof(FAnimNode_TwoBoneIK), Get_Z_Construct_UScriptStruct_FAnimNode_TwoBoneIK_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FAnimNode_TwoBoneIK(FAnimNode_TwoBoneIK::StaticStruct, TEXT("/Script/AnimGraphRuntime"));
static struct FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_TwoBoneIK
{
	FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_TwoBoneIK()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("AnimNode_TwoBoneIK")),new UScriptStruct::TCppStructOps<FAnimNode_TwoBoneIK>);
	}
} ScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_TwoBoneIK;
class UScriptStruct* FAnimNode_WheelHandler::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_WheelHandler();
		extern ANIMGRAPHRUNTIME_API uint32 Get_Z_Construct_UScriptStruct_FAnimNode_WheelHandler_CRC();
		extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage_AnimGraphRuntime();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FAnimNode_WheelHandler, Z_Construct_UPackage_AnimGraphRuntime(), TEXT("AnimNode_WheelHandler"), sizeof(FAnimNode_WheelHandler), Get_Z_Construct_UScriptStruct_FAnimNode_WheelHandler_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FAnimNode_WheelHandler(FAnimNode_WheelHandler::StaticStruct, TEXT("/Script/AnimGraphRuntime"));
static struct FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_WheelHandler
{
	FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_WheelHandler()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("AnimNode_WheelHandler")),new UScriptStruct::TCppStructOps<FAnimNode_WheelHandler>);
	}
} ScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_WheelHandler;
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_Base();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FInputScaleBias();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FComponentSpacePoseLink();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBoneReference();
	ENGINE_API class UClass* Z_Construct_UClass_UCurveFloat_NoRegister();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EBoneRotationSource();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EBoneControlSpace();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FTransform();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FVector();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FRotator();
	COREUOBJECT_API class UEnum* Z_Construct_UEnum_CoreUObject_EAxis();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FVector2D();
	ENGINE_API class UClass* Z_Construct_UClass_UWheeledVehicleMovementComponent_NoRegister();

	ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_SkeletalControlBase();
	ANIMGRAPHRUNTIME_API class UEnum* Z_Construct_UEnum_AnimGraphRuntime_EDrivenBoneModificationMode();
	ANIMGRAPHRUNTIME_API class UEnum* Z_Construct_UEnum_AnimGraphRuntime_EComponentType();
	ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_BoneDrivenController();
	ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_CopyBone();
	ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_Fabrik();
	ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_HandIKRetargeting();
	ANIMGRAPHRUNTIME_API class UEnum* Z_Construct_UEnum_AnimGraphRuntime_EInterpolationBlend();
	ANIMGRAPHRUNTIME_API class UEnum* Z_Construct_UEnum_AnimGraphRuntime_EAxisOption();
	ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_LookAt();
	ANIMGRAPHRUNTIME_API class UEnum* Z_Construct_UEnum_AnimGraphRuntime_EBoneModificationMode();
	ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_ModifyBone();
	ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_ObserveBone();
	ANIMGRAPHRUNTIME_API class UEnum* Z_Construct_UEnum_AnimGraphRuntime_EBoneAxis();
	ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_RotationMultiplier();
	ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_SpringBone();
	ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_Trail();
	ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_TwoBoneIK();
	ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_WheelHandler();
	ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage_AnimGraphRuntime();
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_SkeletalControlBase()
	{
		UPackage* Outer=Z_Construct_UPackage_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_SkeletalControlBase_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("AnimNode_SkeletalControlBase"), sizeof(FAnimNode_SkeletalControlBase), Get_Z_Construct_UScriptStruct_FAnimNode_SkeletalControlBase_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_SkeletalControlBase"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_Base(), new UScriptStruct::TCppStructOps<FAnimNode_SkeletalControlBase>, EStructFlags(0x00000201));
			UProperty* NewProp_AlphaScaleBias = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("AlphaScaleBias"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(AlphaScaleBias, FAnimNode_SkeletalControlBase), 0x0000000000000005, Z_Construct_UScriptStruct_FInputScaleBias());
			UProperty* NewProp_Alpha = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Alpha"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Alpha, FAnimNode_SkeletalControlBase), 0x0000000000000005);
			UProperty* NewProp_ComponentPose = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ComponentPose"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ComponentPose, FAnimNode_SkeletalControlBase), 0x0000000000000005, Z_Construct_UScriptStruct_FComponentSpacePoseLink());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_SkeletalControlBase.h"));
			MetaData->SetValue(NewProp_AlphaScaleBias, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_AlphaScaleBias, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_SkeletalControlBase.h"));
			MetaData->SetValue(NewProp_Alpha, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_Alpha, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_SkeletalControlBase.h"));
			MetaData->SetValue(NewProp_Alpha, TEXT("PinShownByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_Alpha, TEXT("ToolTip"), TEXT("Current strength of the skeletal control"));
			MetaData->SetValue(NewProp_ComponentPose, TEXT("Category"), TEXT("Links"));
			MetaData->SetValue(NewProp_ComponentPose, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_SkeletalControlBase.h"));
			MetaData->SetValue(NewProp_ComponentPose, TEXT("ToolTip"), TEXT("Input link"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_SkeletalControlBase_CRC() { return 2075073151U; }
	UEnum* Z_Construct_UEnum_AnimGraphRuntime_EDrivenBoneModificationMode()
	{
		UPackage* Outer=Z_Construct_UPackage_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UEnum_AnimGraphRuntime_EDrivenBoneModificationMode_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EDrivenBoneModificationMode"), 0, Get_Z_Construct_UEnum_AnimGraphRuntime_EDrivenBoneModificationMode_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EDrivenBoneModificationMode"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDrivenBoneModificationMode::AddToInput")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDrivenBoneModificationMode::ReplaceComponent")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDrivenBoneModificationMode::AddToRefPose")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDrivenBoneModificationMode::EDrivenBoneModificationMode_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("AddToInput.ToolTip"), TEXT("Add the driven value to the input component value(s)"));
			MetaData->SetValue(ReturnEnum, TEXT("AddToRefPose.ToolTip"), TEXT("Add the driven value to the reference pose value"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_BoneDrivenController.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ReplaceComponent.ToolTip"), TEXT("Replace the input component value(s) with the driven value"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("The type of modification to make to the destination component(s)"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_AnimGraphRuntime_EDrivenBoneModificationMode_CRC() { return 2758283905U; }
	UEnum* Z_Construct_UEnum_AnimGraphRuntime_EComponentType()
	{
		UPackage* Outer=Z_Construct_UPackage_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UEnum_AnimGraphRuntime_EComponentType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EComponentType"), 0, Get_Z_Construct_UEnum_AnimGraphRuntime_EComponentType_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EComponentType"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EComponentType::None")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EComponentType::TranslationX")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EComponentType::TranslationY")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EComponentType::TranslationZ")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EComponentType::RotationX")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EComponentType::RotationY")), 5));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EComponentType::RotationZ")), 6));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EComponentType::Scale")), 7));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EComponentType::ScaleX")), 8));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EComponentType::ScaleY")), 9));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EComponentType::ScaleZ")), 10));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EComponentType::EComponentType_MAX")), 11));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_BoneDrivenController.h"));
			MetaData->SetValue(ReturnEnum, TEXT("Scale.DisplayName"), TEXT("Scale (largest component)"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("The transform component (attribute) to read from"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_AnimGraphRuntime_EComponentType_CRC() { return 891570683U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_BoneDrivenController()
	{
		UPackage* Outer=Z_Construct_UPackage_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_BoneDrivenController_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("AnimNode_BoneDrivenController"), sizeof(FAnimNode_BoneDrivenController), Get_Z_Construct_UScriptStruct_FAnimNode_BoneDrivenController_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_BoneDrivenController"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_SkeletalControlBase(), new UScriptStruct::TCppStructOps<FAnimNode_BoneDrivenController>, EStructFlags(0x00000201));
			UProperty* NewProp_ModificationMode = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ModificationMode"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(ModificationMode, FAnimNode_BoneDrivenController), 0x0000000000000001, Z_Construct_UEnum_AnimGraphRuntime_EDrivenBoneModificationMode());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAffectTargetScaleZ, FAnimNode_BoneDrivenController, uint8);
			UProperty* NewProp_bAffectTargetScaleZ = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bAffectTargetScaleZ"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAffectTargetScaleZ, FAnimNode_BoneDrivenController), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bAffectTargetScaleZ, FAnimNode_BoneDrivenController), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAffectTargetScaleY, FAnimNode_BoneDrivenController, uint8);
			UProperty* NewProp_bAffectTargetScaleY = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bAffectTargetScaleY"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAffectTargetScaleY, FAnimNode_BoneDrivenController), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bAffectTargetScaleY, FAnimNode_BoneDrivenController), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAffectTargetScaleX, FAnimNode_BoneDrivenController, uint8);
			UProperty* NewProp_bAffectTargetScaleX = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bAffectTargetScaleX"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAffectTargetScaleX, FAnimNode_BoneDrivenController), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bAffectTargetScaleX, FAnimNode_BoneDrivenController), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAffectTargetRotationZ, FAnimNode_BoneDrivenController, uint8);
			UProperty* NewProp_bAffectTargetRotationZ = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bAffectTargetRotationZ"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAffectTargetRotationZ, FAnimNode_BoneDrivenController), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bAffectTargetRotationZ, FAnimNode_BoneDrivenController), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAffectTargetRotationY, FAnimNode_BoneDrivenController, uint8);
			UProperty* NewProp_bAffectTargetRotationY = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bAffectTargetRotationY"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAffectTargetRotationY, FAnimNode_BoneDrivenController), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bAffectTargetRotationY, FAnimNode_BoneDrivenController), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAffectTargetRotationX, FAnimNode_BoneDrivenController, uint8);
			UProperty* NewProp_bAffectTargetRotationX = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bAffectTargetRotationX"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAffectTargetRotationX, FAnimNode_BoneDrivenController), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bAffectTargetRotationX, FAnimNode_BoneDrivenController), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAffectTargetTranslationZ, FAnimNode_BoneDrivenController, uint8);
			UProperty* NewProp_bAffectTargetTranslationZ = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bAffectTargetTranslationZ"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAffectTargetTranslationZ, FAnimNode_BoneDrivenController), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bAffectTargetTranslationZ, FAnimNode_BoneDrivenController), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAffectTargetTranslationY, FAnimNode_BoneDrivenController, uint8);
			UProperty* NewProp_bAffectTargetTranslationY = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bAffectTargetTranslationY"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAffectTargetTranslationY, FAnimNode_BoneDrivenController), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bAffectTargetTranslationY, FAnimNode_BoneDrivenController), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAffectTargetTranslationX, FAnimNode_BoneDrivenController, uint8);
			UProperty* NewProp_bAffectTargetTranslationX = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bAffectTargetTranslationX"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAffectTargetTranslationX, FAnimNode_BoneDrivenController), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bAffectTargetTranslationX, FAnimNode_BoneDrivenController), sizeof(uint8), false);
			UProperty* NewProp_TargetComponent = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TargetComponent"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(TargetComponent_DEPRECATED, FAnimNode_BoneDrivenController), 0x0000000020000000, Z_Construct_UEnum_AnimGraphRuntime_EComponentType());
			UProperty* NewProp_TargetBone = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TargetBone"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TargetBone, FAnimNode_BoneDrivenController), 0x0000000000000001, Z_Construct_UScriptStruct_FBoneReference());
			UProperty* NewProp_RemappedMax = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RemappedMax"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(RemappedMax, FAnimNode_BoneDrivenController), 0x0000000000000001);
			UProperty* NewProp_RemappedMin = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RemappedMin"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(RemappedMin, FAnimNode_BoneDrivenController), 0x0000000000000001);
			UProperty* NewProp_RangeMax = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RangeMax"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(RangeMax, FAnimNode_BoneDrivenController), 0x0000000000000001);
			UProperty* NewProp_RangeMin = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RangeMin"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(RangeMin, FAnimNode_BoneDrivenController), 0x0000000000000001);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseRange, FAnimNode_BoneDrivenController, bool);
			UProperty* NewProp_bUseRange = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bUseRange"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseRange, FAnimNode_BoneDrivenController), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bUseRange, FAnimNode_BoneDrivenController), sizeof(bool), true);
			UProperty* NewProp_Multiplier = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Multiplier"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Multiplier, FAnimNode_BoneDrivenController), 0x0000000000000001);
			UProperty* NewProp_DrivingCurve = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DrivingCurve"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(DrivingCurve, FAnimNode_BoneDrivenController), 0x0000000000000001, Z_Construct_UClass_UCurveFloat_NoRegister());
			UProperty* NewProp_SourceComponent = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SourceComponent"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(SourceComponent, FAnimNode_BoneDrivenController), 0x0000000000000001, Z_Construct_UEnum_AnimGraphRuntime_EComponentType());
			UProperty* NewProp_SourceBone = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SourceBone"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SourceBone, FAnimNode_BoneDrivenController), 0x0000000000000001, Z_Construct_UScriptStruct_FBoneReference());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_BoneDrivenController.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("This is the runtime version of a bone driven controller, which maps part of the state from one bone to another (e.g., 2 * source.x -> target.z)"));
			MetaData->SetValue(NewProp_ModificationMode, TEXT("Category"), TEXT("Destination (driven)"));
			MetaData->SetValue(NewProp_ModificationMode, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_BoneDrivenController.h"));
			MetaData->SetValue(NewProp_ModificationMode, TEXT("ToolTip"), TEXT("The type of modification to make to the destination component(s)"));
			MetaData->SetValue(NewProp_bAffectTargetScaleZ, TEXT("Category"), TEXT("Destination (driven)"));
			MetaData->SetValue(NewProp_bAffectTargetScaleZ, TEXT("DisplayName"), TEXT("Z"));
			MetaData->SetValue(NewProp_bAffectTargetScaleZ, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_BoneDrivenController.h"));
			MetaData->SetValue(NewProp_bAffectTargetScaleZ, TEXT("ToolTip"), TEXT("Affect the Z component of scale on the target bone"));
			MetaData->SetValue(NewProp_bAffectTargetScaleY, TEXT("Category"), TEXT("Destination (driven)"));
			MetaData->SetValue(NewProp_bAffectTargetScaleY, TEXT("DisplayName"), TEXT("Y"));
			MetaData->SetValue(NewProp_bAffectTargetScaleY, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_BoneDrivenController.h"));
			MetaData->SetValue(NewProp_bAffectTargetScaleY, TEXT("ToolTip"), TEXT("Affect the Y component of scale on the target bone"));
			MetaData->SetValue(NewProp_bAffectTargetScaleX, TEXT("Category"), TEXT("Destination (driven)"));
			MetaData->SetValue(NewProp_bAffectTargetScaleX, TEXT("DisplayName"), TEXT("X"));
			MetaData->SetValue(NewProp_bAffectTargetScaleX, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_BoneDrivenController.h"));
			MetaData->SetValue(NewProp_bAffectTargetScaleX, TEXT("ToolTip"), TEXT("Affect the X component of scale on the target bone"));
			MetaData->SetValue(NewProp_bAffectTargetRotationZ, TEXT("Category"), TEXT("Destination (driven)"));
			MetaData->SetValue(NewProp_bAffectTargetRotationZ, TEXT("DisplayName"), TEXT("Z"));
			MetaData->SetValue(NewProp_bAffectTargetRotationZ, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_BoneDrivenController.h"));
			MetaData->SetValue(NewProp_bAffectTargetRotationZ, TEXT("ToolTip"), TEXT("Affect the Z component of rotation on the target bone"));
			MetaData->SetValue(NewProp_bAffectTargetRotationY, TEXT("Category"), TEXT("Destination (driven)"));
			MetaData->SetValue(NewProp_bAffectTargetRotationY, TEXT("DisplayName"), TEXT("Y"));
			MetaData->SetValue(NewProp_bAffectTargetRotationY, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_BoneDrivenController.h"));
			MetaData->SetValue(NewProp_bAffectTargetRotationY, TEXT("ToolTip"), TEXT("Affect the Y component of rotation on the target bone"));
			MetaData->SetValue(NewProp_bAffectTargetRotationX, TEXT("Category"), TEXT("Destination (driven)"));
			MetaData->SetValue(NewProp_bAffectTargetRotationX, TEXT("DisplayName"), TEXT("X"));
			MetaData->SetValue(NewProp_bAffectTargetRotationX, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_BoneDrivenController.h"));
			MetaData->SetValue(NewProp_bAffectTargetRotationX, TEXT("ToolTip"), TEXT("Affect the X component of rotation on the target bone"));
			MetaData->SetValue(NewProp_bAffectTargetTranslationZ, TEXT("Category"), TEXT("Destination (driven)"));
			MetaData->SetValue(NewProp_bAffectTargetTranslationZ, TEXT("DisplayName"), TEXT("Z"));
			MetaData->SetValue(NewProp_bAffectTargetTranslationZ, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_BoneDrivenController.h"));
			MetaData->SetValue(NewProp_bAffectTargetTranslationZ, TEXT("ToolTip"), TEXT("Affect the Z component of translation on the target bone"));
			MetaData->SetValue(NewProp_bAffectTargetTranslationY, TEXT("Category"), TEXT("Destination (driven)"));
			MetaData->SetValue(NewProp_bAffectTargetTranslationY, TEXT("DisplayName"), TEXT("Y"));
			MetaData->SetValue(NewProp_bAffectTargetTranslationY, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_BoneDrivenController.h"));
			MetaData->SetValue(NewProp_bAffectTargetTranslationY, TEXT("ToolTip"), TEXT("Affect the Y component of translation on the target bone"));
			MetaData->SetValue(NewProp_bAffectTargetTranslationX, TEXT("Category"), TEXT("Destination (driven)"));
			MetaData->SetValue(NewProp_bAffectTargetTranslationX, TEXT("DisplayName"), TEXT("X"));
			MetaData->SetValue(NewProp_bAffectTargetTranslationX, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_BoneDrivenController.h"));
			MetaData->SetValue(NewProp_bAffectTargetTranslationX, TEXT("ToolTip"), TEXT("Affect the X component of translation on the target bone"));
			MetaData->SetValue(NewProp_TargetComponent, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_BoneDrivenController.h"));
			MetaData->SetValue(NewProp_TargetBone, TEXT("Category"), TEXT("Destination (driven)"));
			MetaData->SetValue(NewProp_TargetBone, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_BoneDrivenController.h"));
			MetaData->SetValue(NewProp_TargetBone, TEXT("ToolTip"), TEXT("Bone to drive using controller input"));
			MetaData->SetValue(NewProp_RemappedMax, TEXT("Category"), TEXT("Mapping"));
			MetaData->SetValue(NewProp_RemappedMax, TEXT("DisplayName"), TEXT("Mapped Range Max"));
			MetaData->SetValue(NewProp_RemappedMax, TEXT("EditCondition"), TEXT("bUseRange"));
			MetaData->SetValue(NewProp_RemappedMax, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_BoneDrivenController.h"));
			MetaData->SetValue(NewProp_RemappedMax, TEXT("ToolTip"), TEXT("Maximum value to apply to the destination (remapped from the input range)"));
			MetaData->SetValue(NewProp_RemappedMin, TEXT("Category"), TEXT("Mapping"));
			MetaData->SetValue(NewProp_RemappedMin, TEXT("DisplayName"), TEXT("Mapped Range Min"));
			MetaData->SetValue(NewProp_RemappedMin, TEXT("EditCondition"), TEXT("bUseRange"));
			MetaData->SetValue(NewProp_RemappedMin, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_BoneDrivenController.h"));
			MetaData->SetValue(NewProp_RemappedMin, TEXT("ToolTip"), TEXT("Minimum value to apply to the destination (remapped from the input range)"));
			MetaData->SetValue(NewProp_RangeMax, TEXT("Category"), TEXT("Mapping"));
			MetaData->SetValue(NewProp_RangeMax, TEXT("DisplayName"), TEXT("Source Range Max"));
			MetaData->SetValue(NewProp_RangeMax, TEXT("EditCondition"), TEXT("bUseRange"));
			MetaData->SetValue(NewProp_RangeMax, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_BoneDrivenController.h"));
			MetaData->SetValue(NewProp_RangeMax, TEXT("ToolTip"), TEXT("Maximum limit of the input value (mapped to RemappedMax, only used when limiting the source range)"));
			MetaData->SetValue(NewProp_RangeMin, TEXT("Category"), TEXT("Mapping"));
			MetaData->SetValue(NewProp_RangeMin, TEXT("DisplayName"), TEXT("Source Range Min"));
			MetaData->SetValue(NewProp_RangeMin, TEXT("EditCondition"), TEXT("bUseRange"));
			MetaData->SetValue(NewProp_RangeMin, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_BoneDrivenController.h"));
			MetaData->SetValue(NewProp_RangeMin, TEXT("ToolTip"), TEXT("Minimum limit of the input value (mapped to RemappedMin, only used when limiting the source range)"));
			MetaData->SetValue(NewProp_bUseRange, TEXT("Category"), TEXT("Mapping"));
			MetaData->SetValue(NewProp_bUseRange, TEXT("DisplayName"), TEXT("Remap Source"));
			MetaData->SetValue(NewProp_bUseRange, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_BoneDrivenController.h"));
			MetaData->SetValue(NewProp_bUseRange, TEXT("ToolTip"), TEXT("Whether or not to clamp the driver value and remap it before scaling it"));
			MetaData->SetValue(NewProp_Multiplier, TEXT("Category"), TEXT("Mapping"));
			MetaData->SetValue(NewProp_Multiplier, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_BoneDrivenController.h"));
			MetaData->SetValue(NewProp_Multiplier, TEXT("ToolTip"), TEXT("Multiplier to apply to the input value (Note: Ignored when a curve is used)"));
			MetaData->SetValue(NewProp_DrivingCurve, TEXT("Category"), TEXT("Mapping"));
			MetaData->SetValue(NewProp_DrivingCurve, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_BoneDrivenController.h"));
			MetaData->SetValue(NewProp_DrivingCurve, TEXT("ToolTip"), TEXT("Curve used to map from the source attribute to the driven attributes if present (otherwise the Multiplier will be used)"));
			MetaData->SetValue(NewProp_SourceComponent, TEXT("Category"), TEXT("Source (driver)"));
			MetaData->SetValue(NewProp_SourceComponent, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_BoneDrivenController.h"));
			MetaData->SetValue(NewProp_SourceComponent, TEXT("ToolTip"), TEXT("Transform component to use as input"));
			MetaData->SetValue(NewProp_SourceBone, TEXT("Category"), TEXT("Source (driver)"));
			MetaData->SetValue(NewProp_SourceBone, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_BoneDrivenController.h"));
			MetaData->SetValue(NewProp_SourceBone, TEXT("ToolTip"), TEXT("Bone to use as controller input"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_BoneDrivenController_CRC() { return 4141637128U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_CopyBone()
	{
		UPackage* Outer=Z_Construct_UPackage_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_CopyBone_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("AnimNode_CopyBone"), sizeof(FAnimNode_CopyBone), Get_Z_Construct_UScriptStruct_FAnimNode_CopyBone_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_CopyBone"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_SkeletalControlBase(), new UScriptStruct::TCppStructOps<FAnimNode_CopyBone>, EStructFlags(0x00000201));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCopyScale, FAnimNode_CopyBone, bool);
			UProperty* NewProp_bCopyScale = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bCopyScale"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCopyScale, FAnimNode_CopyBone), 0x0000000000000005, CPP_BOOL_PROPERTY_BITMASK(bCopyScale, FAnimNode_CopyBone), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCopyRotation, FAnimNode_CopyBone, bool);
			UProperty* NewProp_bCopyRotation = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bCopyRotation"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCopyRotation, FAnimNode_CopyBone), 0x0000000000000005, CPP_BOOL_PROPERTY_BITMASK(bCopyRotation, FAnimNode_CopyBone), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCopyTranslation, FAnimNode_CopyBone, bool);
			UProperty* NewProp_bCopyTranslation = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bCopyTranslation"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCopyTranslation, FAnimNode_CopyBone), 0x0000000000000005, CPP_BOOL_PROPERTY_BITMASK(bCopyTranslation, FAnimNode_CopyBone), sizeof(bool), true);
			UProperty* NewProp_TargetBone = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TargetBone"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TargetBone, FAnimNode_CopyBone), 0x0000000000000005, Z_Construct_UScriptStruct_FBoneReference());
			UProperty* NewProp_SourceBone = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SourceBone"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SourceBone, FAnimNode_CopyBone), 0x0000000000000005, Z_Construct_UScriptStruct_FBoneReference());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_CopyBone.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Simple controller to copy a bone's transform to another one."));
			MetaData->SetValue(NewProp_bCopyScale, TEXT("Category"), TEXT("Copy"));
			MetaData->SetValue(NewProp_bCopyScale, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_CopyBone.h"));
			MetaData->SetValue(NewProp_bCopyScale, TEXT("PinShownByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_bCopyScale, TEXT("ToolTip"), TEXT("If Scale should be copied"));
			MetaData->SetValue(NewProp_bCopyRotation, TEXT("Category"), TEXT("Copy"));
			MetaData->SetValue(NewProp_bCopyRotation, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_CopyBone.h"));
			MetaData->SetValue(NewProp_bCopyRotation, TEXT("PinShownByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_bCopyRotation, TEXT("ToolTip"), TEXT("If Rotation should be copied"));
			MetaData->SetValue(NewProp_bCopyTranslation, TEXT("Category"), TEXT("Copy"));
			MetaData->SetValue(NewProp_bCopyTranslation, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_CopyBone.h"));
			MetaData->SetValue(NewProp_bCopyTranslation, TEXT("PinShownByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_bCopyTranslation, TEXT("ToolTip"), TEXT("If Translation should be copied"));
			MetaData->SetValue(NewProp_TargetBone, TEXT("Category"), TEXT("Copy"));
			MetaData->SetValue(NewProp_TargetBone, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_CopyBone.h"));
			MetaData->SetValue(NewProp_TargetBone, TEXT("ToolTip"), TEXT("Name of bone to control. This is the main bone chain to modify from. *"));
			MetaData->SetValue(NewProp_SourceBone, TEXT("Category"), TEXT("Copy"));
			MetaData->SetValue(NewProp_SourceBone, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_CopyBone.h"));
			MetaData->SetValue(NewProp_SourceBone, TEXT("ToolTip"), TEXT("Source Bone Name to get transform from"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_CopyBone_CRC() { return 868099499U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_Fabrik()
	{
		UPackage* Outer=Z_Construct_UPackage_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_Fabrik_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("AnimNode_Fabrik"), sizeof(FAnimNode_Fabrik), Get_Z_Construct_UScriptStruct_FAnimNode_Fabrik_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_Fabrik"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_SkeletalControlBase(), new UScriptStruct::TCppStructOps<FAnimNode_Fabrik>, EStructFlags(0x00000201));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnableDebugDraw, FAnimNode_Fabrik, bool);
			UProperty* NewProp_bEnableDebugDraw = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bEnableDebugDraw"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnableDebugDraw, FAnimNode_Fabrik), 0x0000000000000005, CPP_BOOL_PROPERTY_BITMASK(bEnableDebugDraw, FAnimNode_Fabrik), sizeof(bool), true);
			UProperty* NewProp_MaxIterations = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MaxIterations"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MaxIterations, FAnimNode_Fabrik), 0x0000000000000005);
			UProperty* NewProp_Precision = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Precision"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Precision, FAnimNode_Fabrik), 0x0000000000000005);
			UProperty* NewProp_RootBone = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RootBone"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(RootBone, FAnimNode_Fabrik), 0x0000000000000005, Z_Construct_UScriptStruct_FBoneReference());
			UProperty* NewProp_TipBone = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TipBone"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TipBone, FAnimNode_Fabrik), 0x0000000000000005, Z_Construct_UScriptStruct_FBoneReference());
			UProperty* NewProp_EffectorRotationSource = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("EffectorRotationSource"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(EffectorRotationSource, FAnimNode_Fabrik), 0x0000000000000005, Z_Construct_UEnum_Engine_EBoneRotationSource());
			UProperty* NewProp_EffectorTransformBone = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("EffectorTransformBone"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(EffectorTransformBone, FAnimNode_Fabrik), 0x0000000000000005, Z_Construct_UScriptStruct_FBoneReference());
			UProperty* NewProp_EffectorTransformSpace = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("EffectorTransformSpace"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(EffectorTransformSpace, FAnimNode_Fabrik), 0x0000000000000005, Z_Construct_UEnum_Engine_EBoneControlSpace());
			UProperty* NewProp_EffectorTransform = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("EffectorTransform"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(EffectorTransform, FAnimNode_Fabrik), 0x0000000000000005, Z_Construct_UScriptStruct_FTransform());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_Fabrik.h"));
			MetaData->SetValue(NewProp_bEnableDebugDraw, TEXT("Category"), TEXT("Solver"));
			MetaData->SetValue(NewProp_bEnableDebugDraw, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_Fabrik.h"));
			MetaData->SetValue(NewProp_bEnableDebugDraw, TEXT("ToolTip"), TEXT("Toggle drawing of axes to debug joint rotation"));
			MetaData->SetValue(NewProp_MaxIterations, TEXT("Category"), TEXT("Solver"));
			MetaData->SetValue(NewProp_MaxIterations, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_Fabrik.h"));
			MetaData->SetValue(NewProp_MaxIterations, TEXT("ToolTip"), TEXT("Maximum number of iterations allowed, to control performance."));
			MetaData->SetValue(NewProp_Precision, TEXT("Category"), TEXT("Solver"));
			MetaData->SetValue(NewProp_Precision, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_Fabrik.h"));
			MetaData->SetValue(NewProp_Precision, TEXT("ToolTip"), TEXT("Tolerance for final tip location delta from EffectorLocation"));
			MetaData->SetValue(NewProp_RootBone, TEXT("Category"), TEXT("Solver"));
			MetaData->SetValue(NewProp_RootBone, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_Fabrik.h"));
			MetaData->SetValue(NewProp_RootBone, TEXT("ToolTip"), TEXT("Name of the root bone"));
			MetaData->SetValue(NewProp_TipBone, TEXT("Category"), TEXT("Solver"));
			MetaData->SetValue(NewProp_TipBone, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_Fabrik.h"));
			MetaData->SetValue(NewProp_TipBone, TEXT("ToolTip"), TEXT("Name of tip bone"));
			MetaData->SetValue(NewProp_EffectorRotationSource, TEXT("Category"), TEXT("EndEffector"));
			MetaData->SetValue(NewProp_EffectorRotationSource, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_Fabrik.h"));
			MetaData->SetValue(NewProp_EffectorTransformBone, TEXT("Category"), TEXT("EndEffector"));
			MetaData->SetValue(NewProp_EffectorTransformBone, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_Fabrik.h"));
			MetaData->SetValue(NewProp_EffectorTransformBone, TEXT("ToolTip"), TEXT("If EffectorTransformSpace is a bone, this is the bone to use. *"));
			MetaData->SetValue(NewProp_EffectorTransformSpace, TEXT("Category"), TEXT("EndEffector"));
			MetaData->SetValue(NewProp_EffectorTransformSpace, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_Fabrik.h"));
			MetaData->SetValue(NewProp_EffectorTransformSpace, TEXT("ToolTip"), TEXT("Reference frame of Effector Transform."));
			MetaData->SetValue(NewProp_EffectorTransform, TEXT("Category"), TEXT("EndEffector"));
			MetaData->SetValue(NewProp_EffectorTransform, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_Fabrik.h"));
			MetaData->SetValue(NewProp_EffectorTransform, TEXT("PinShownByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_EffectorTransform, TEXT("ToolTip"), TEXT("Coordinates for target location of tip bone - if EffectorLocationSpace is bone, this is the offset from Target Bone to use as target location"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_Fabrik_CRC() { return 3548834687U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_HandIKRetargeting()
	{
		UPackage* Outer=Z_Construct_UPackage_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_HandIKRetargeting_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("AnimNode_HandIKRetargeting"), sizeof(FAnimNode_HandIKRetargeting), Get_Z_Construct_UScriptStruct_FAnimNode_HandIKRetargeting_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_HandIKRetargeting"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_SkeletalControlBase(), new UScriptStruct::TCppStructOps<FAnimNode_HandIKRetargeting>, EStructFlags(0x00000201));
			UProperty* NewProp_HandFKWeight = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("HandFKWeight"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(HandFKWeight, FAnimNode_HandIKRetargeting), 0x0000000000000005);
			UProperty* NewProp_IKBonesToMove = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("IKBonesToMove"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(IKBonesToMove, FAnimNode_HandIKRetargeting), 0x0000000000000005);
			UProperty* NewProp_IKBonesToMove_Inner = new(EC_InternalUseOnlyConstructor, NewProp_IKBonesToMove, TEXT("IKBonesToMove"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FBoneReference());
			UProperty* NewProp_LeftHandIK = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LeftHandIK"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LeftHandIK, FAnimNode_HandIKRetargeting), 0x0000000000000005, Z_Construct_UScriptStruct_FBoneReference());
			UProperty* NewProp_RightHandIK = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RightHandIK"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(RightHandIK, FAnimNode_HandIKRetargeting), 0x0000000000000005, Z_Construct_UScriptStruct_FBoneReference());
			UProperty* NewProp_LeftHandFK = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LeftHandFK"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LeftHandFK, FAnimNode_HandIKRetargeting), 0x0000000000000005, Z_Construct_UScriptStruct_FBoneReference());
			UProperty* NewProp_RightHandFK = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RightHandFK"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(RightHandFK, FAnimNode_HandIKRetargeting), 0x0000000000000005, Z_Construct_UScriptStruct_FBoneReference());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_HandIKRetargeting.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Node to handle re-targeting of Hand IK bone chain.\nIt looks at position in Mesh Space of Left and Right IK bones, and moves Left and Right IK bones to those.\nbased on HandFKWeight. (0 = favor left hand, 1 = favor right hand, 0.5 = equal weight).\nThis is used so characters of different proportions can handle the same props."));
			MetaData->SetValue(NewProp_HandFKWeight, TEXT("Category"), TEXT("HandIKRetargeting"));
			MetaData->SetValue(NewProp_HandFKWeight, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_HandIKRetargeting.h"));
			MetaData->SetValue(NewProp_HandFKWeight, TEXT("PinShownByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_HandFKWeight, TEXT("ToolTip"), TEXT("Which hand to favor. 0.5 is equal weight for both, 1 = right hand, 0 = left hand."));
			MetaData->SetValue(NewProp_IKBonesToMove, TEXT("Category"), TEXT("HandIKRetargeting"));
			MetaData->SetValue(NewProp_IKBonesToMove, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_HandIKRetargeting.h"));
			MetaData->SetValue(NewProp_IKBonesToMove, TEXT("ToolTip"), TEXT("IK Bones to move."));
			MetaData->SetValue(NewProp_LeftHandIK, TEXT("Category"), TEXT("HandIKRetargeting"));
			MetaData->SetValue(NewProp_LeftHandIK, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_HandIKRetargeting.h"));
			MetaData->SetValue(NewProp_LeftHandIK, TEXT("ToolTip"), TEXT("Bone for Left Hand FK"));
			MetaData->SetValue(NewProp_RightHandIK, TEXT("Category"), TEXT("HandIKRetargeting"));
			MetaData->SetValue(NewProp_RightHandIK, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_HandIKRetargeting.h"));
			MetaData->SetValue(NewProp_RightHandIK, TEXT("ToolTip"), TEXT("Bone for Right Hand IK"));
			MetaData->SetValue(NewProp_LeftHandFK, TEXT("Category"), TEXT("HandIKRetargeting"));
			MetaData->SetValue(NewProp_LeftHandFK, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_HandIKRetargeting.h"));
			MetaData->SetValue(NewProp_LeftHandFK, TEXT("ToolTip"), TEXT("Bone for Left Hand FK"));
			MetaData->SetValue(NewProp_RightHandFK, TEXT("Category"), TEXT("HandIKRetargeting"));
			MetaData->SetValue(NewProp_RightHandFK, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_HandIKRetargeting.h"));
			MetaData->SetValue(NewProp_RightHandFK, TEXT("ToolTip"), TEXT("Bone for Right Hand FK"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_HandIKRetargeting_CRC() { return 522566605U; }
	UEnum* Z_Construct_UEnum_AnimGraphRuntime_EInterpolationBlend()
	{
		UPackage* Outer=Z_Construct_UPackage_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UEnum_AnimGraphRuntime_EInterpolationBlend_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EInterpolationBlend"), 0, Get_Z_Construct_UEnum_AnimGraphRuntime_EInterpolationBlend_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EInterpolationBlend"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EInterpolationBlend::Linear")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EInterpolationBlend::Cubic")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EInterpolationBlend::Sinusoidal")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EInterpolationBlend::EaseInOutExponent2")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EInterpolationBlend::EaseInOutExponent3")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EInterpolationBlend::EaseInOutExponent4")), 5));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EInterpolationBlend::EaseInOutExponent5")), 6));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EInterpolationBlend::MAX")), 7));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EInterpolationBlend::EInterpolationBlend_MAX")), 8));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_LookAt.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Various ways to interpolate TAlphaBlend."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_AnimGraphRuntime_EInterpolationBlend_CRC() { return 975835101U; }
	UEnum* Z_Construct_UEnum_AnimGraphRuntime_EAxisOption()
	{
		UPackage* Outer=Z_Construct_UPackage_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UEnum_AnimGraphRuntime_EAxisOption_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EAxisOption"), 0, Get_Z_Construct_UEnum_AnimGraphRuntime_EAxisOption_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EAxisOption"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EAxisOption::X")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EAxisOption::Y")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EAxisOption::Z")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EAxisOption::X_Neg")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EAxisOption::Y_Neg")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EAxisOption::Z_Neg")), 5));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EAxisOption::EAxisOption_MAX")), 6));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_LookAt.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_AnimGraphRuntime_EAxisOption_CRC() { return 364368718U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_LookAt()
	{
		UPackage* Outer=Z_Construct_UPackage_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_LookAt_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("AnimNode_LookAt"), sizeof(FAnimNode_LookAt), Get_Z_Construct_UScriptStruct_FAnimNode_LookAt_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_LookAt"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_SkeletalControlBase(), new UScriptStruct::TCppStructOps<FAnimNode_LookAt>, EStructFlags(0x00000201));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnableDebug, FAnimNode_LookAt, bool);
			UProperty* NewProp_bEnableDebug = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bEnableDebug"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnableDebug, FAnimNode_LookAt), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bEnableDebug, FAnimNode_LookAt), sizeof(bool), true);
			UProperty* NewProp_InterpolationTriggerThreashold = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("InterpolationTriggerThreashold"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InterpolationTriggerThreashold, FAnimNode_LookAt), 0x0000000000000005);
			UProperty* NewProp_InterpolationTime = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("InterpolationTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InterpolationTime, FAnimNode_LookAt), 0x0000000000000005);
			UProperty* NewProp_InterpolationType = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("InterpolationType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(InterpolationType, FAnimNode_LookAt), 0x0000000000000005, Z_Construct_UEnum_AnimGraphRuntime_EInterpolationBlend());
			UProperty* NewProp_LookAtClamp = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LookAtClamp"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(LookAtClamp, FAnimNode_LookAt), 0x0000000000000005);
			UProperty* NewProp_LookUpAxis = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LookUpAxis"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(LookUpAxis, FAnimNode_LookAt), 0x0000000000000005, Z_Construct_UEnum_AnimGraphRuntime_EAxisOption());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseLookUpAxis, FAnimNode_LookAt, bool);
			UProperty* NewProp_bUseLookUpAxis = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bUseLookUpAxis"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseLookUpAxis, FAnimNode_LookAt), 0x0000000000000005, CPP_BOOL_PROPERTY_BITMASK(bUseLookUpAxis, FAnimNode_LookAt), sizeof(bool), true);
			UProperty* NewProp_LookAtAxis = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LookAtAxis"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(LookAtAxis, FAnimNode_LookAt), 0x0000000000000005, Z_Construct_UEnum_AnimGraphRuntime_EAxisOption());
			UProperty* NewProp_LookAtLocation = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LookAtLocation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LookAtLocation, FAnimNode_LookAt), 0x0000000000000005, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_LookAtBone = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LookAtBone"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LookAtBone, FAnimNode_LookAt), 0x0000000000000005, Z_Construct_UScriptStruct_FBoneReference());
			UProperty* NewProp_BoneToModify = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BoneToModify"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(BoneToModify, FAnimNode_LookAt), 0x0000000000000005, Z_Construct_UScriptStruct_FBoneReference());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_LookAt.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Simple controller that make a bone to look at the point or another bone"));
			MetaData->SetValue(NewProp_bEnableDebug, TEXT("Category"), TEXT("SkeletalControl"));
			MetaData->SetValue(NewProp_bEnableDebug, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_LookAt.h"));
			MetaData->SetValue(NewProp_InterpolationTriggerThreashold, TEXT("Category"), TEXT("SkeletalControl"));
			MetaData->SetValue(NewProp_InterpolationTriggerThreashold, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_LookAt.h"));
			MetaData->SetValue(NewProp_InterpolationTriggerThreashold, TEXT("PinHiddenByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_InterpolationTime, TEXT("Category"), TEXT("SkeletalControl"));
			MetaData->SetValue(NewProp_InterpolationTime, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_LookAt.h"));
			MetaData->SetValue(NewProp_InterpolationTime, TEXT("PinHiddenByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_InterpolationType, TEXT("Category"), TEXT("SkeletalControl"));
			MetaData->SetValue(NewProp_InterpolationType, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_LookAt.h"));
			MetaData->SetValue(NewProp_InterpolationType, TEXT("PinHiddenByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_LookAtClamp, TEXT("Category"), TEXT("SkeletalControl"));
			MetaData->SetValue(NewProp_LookAtClamp, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_LookAt.h"));
			MetaData->SetValue(NewProp_LookAtClamp, TEXT("PinHiddenByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_LookAtClamp, TEXT("ToolTip"), TEXT("Look at Clamp value in degree - if you're look at axis is Z, only X, Y degree of clamp will be used"));
			MetaData->SetValue(NewProp_LookUpAxis, TEXT("Category"), TEXT("SkeletalControl"));
			MetaData->SetValue(NewProp_LookUpAxis, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_LookAt.h"));
			MetaData->SetValue(NewProp_LookUpAxis, TEXT("ToolTip"), TEXT("Look up axis in local space"));
			MetaData->SetValue(NewProp_bUseLookUpAxis, TEXT("Category"), TEXT("SkeletalControl"));
			MetaData->SetValue(NewProp_bUseLookUpAxis, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_LookAt.h"));
			MetaData->SetValue(NewProp_bUseLookUpAxis, TEXT("ToolTip"), TEXT("Whether or not to use Look up axis"));
			MetaData->SetValue(NewProp_LookAtAxis, TEXT("Category"), TEXT("SkeletalControl"));
			MetaData->SetValue(NewProp_LookAtAxis, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_LookAt.h"));
			MetaData->SetValue(NewProp_LookAtAxis, TEXT("ToolTip"), TEXT("Look at axis, which axis to align to look at point"));
			MetaData->SetValue(NewProp_LookAtLocation, TEXT("Category"), TEXT("SkeletalControl"));
			MetaData->SetValue(NewProp_LookAtLocation, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_LookAt.h"));
			MetaData->SetValue(NewProp_LookAtLocation, TEXT("PinHiddenByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_LookAtLocation, TEXT("ToolTip"), TEXT("Target Location in world space if LookAtBone is empty"));
			MetaData->SetValue(NewProp_LookAtBone, TEXT("Category"), TEXT("SkeletalControl"));
			MetaData->SetValue(NewProp_LookAtBone, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_LookAt.h"));
			MetaData->SetValue(NewProp_LookAtBone, TEXT("ToolTip"), TEXT("Target Bone to look at - you can't use LookAtLocation as alternative as you'll get a delay on bone location if you query directly *"));
			MetaData->SetValue(NewProp_BoneToModify, TEXT("Category"), TEXT("SkeletalControl"));
			MetaData->SetValue(NewProp_BoneToModify, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_LookAt.h"));
			MetaData->SetValue(NewProp_BoneToModify, TEXT("ToolTip"), TEXT("Name of bone to control. This is the main bone chain to modify from. *"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_LookAt_CRC() { return 2315936112U; }
	UEnum* Z_Construct_UEnum_AnimGraphRuntime_EBoneModificationMode()
	{
		UPackage* Outer=Z_Construct_UPackage_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UEnum_AnimGraphRuntime_EBoneModificationMode_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EBoneModificationMode"), 0, Get_Z_Construct_UEnum_AnimGraphRuntime_EBoneModificationMode_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EBoneModificationMode"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("BMM_Ignore")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("BMM_Replace")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("BMM_Additive")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("BMM_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BMM_Additive.DisplayName"), TEXT("Add to Existing"));
			MetaData->SetValue(ReturnEnum, TEXT("BMM_Additive.ToolTip"), TEXT("The modifier adds to the existing translation, rotation, or scale."));
			MetaData->SetValue(ReturnEnum, TEXT("BMM_Ignore.DisplayName"), TEXT("Ignore"));
			MetaData->SetValue(ReturnEnum, TEXT("BMM_Ignore.ToolTip"), TEXT("The modifier ignores this channel (keeps the existing bone translation, rotation, or scale)."));
			MetaData->SetValue(ReturnEnum, TEXT("BMM_Replace.DisplayName"), TEXT("Replace Existing"));
			MetaData->SetValue(ReturnEnum, TEXT("BMM_Replace.ToolTip"), TEXT("The modifier replaces the existing translation, rotation, or scale."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_ModifyBone.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_AnimGraphRuntime_EBoneModificationMode_CRC() { return 2400792664U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_ModifyBone()
	{
		UPackage* Outer=Z_Construct_UPackage_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_ModifyBone_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("AnimNode_ModifyBone"), sizeof(FAnimNode_ModifyBone), Get_Z_Construct_UScriptStruct_FAnimNode_ModifyBone_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_ModifyBone"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_SkeletalControlBase(), new UScriptStruct::TCppStructOps<FAnimNode_ModifyBone>, EStructFlags(0x00000201));
			UProperty* NewProp_ScaleSpace = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ScaleSpace"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(ScaleSpace, FAnimNode_ModifyBone), 0x0000000000000005, Z_Construct_UEnum_Engine_EBoneControlSpace());
			UProperty* NewProp_RotationSpace = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RotationSpace"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(RotationSpace, FAnimNode_ModifyBone), 0x0000000000000005, Z_Construct_UEnum_Engine_EBoneControlSpace());
			UProperty* NewProp_TranslationSpace = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TranslationSpace"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(TranslationSpace, FAnimNode_ModifyBone), 0x0000000000000005, Z_Construct_UEnum_Engine_EBoneControlSpace());
			UProperty* NewProp_ScaleMode = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ScaleMode"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(ScaleMode, FAnimNode_ModifyBone), 0x0000000000000005, Z_Construct_UEnum_AnimGraphRuntime_EBoneModificationMode());
			UProperty* NewProp_RotationMode = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RotationMode"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(RotationMode, FAnimNode_ModifyBone), 0x0000000000000005, Z_Construct_UEnum_AnimGraphRuntime_EBoneModificationMode());
			UProperty* NewProp_TranslationMode = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TranslationMode"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(TranslationMode, FAnimNode_ModifyBone), 0x0000000000000005, Z_Construct_UEnum_AnimGraphRuntime_EBoneModificationMode());
			UProperty* NewProp_Scale = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Scale"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Scale, FAnimNode_ModifyBone), 0x0000000000000005, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Rotation = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Rotation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Rotation, FAnimNode_ModifyBone), 0x0000000000000005, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_Translation = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Translation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Translation, FAnimNode_ModifyBone), 0x0000000000000005, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_BoneToModify = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BoneToModify"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(BoneToModify, FAnimNode_ModifyBone), 0x0000000000000005, Z_Construct_UScriptStruct_FBoneReference());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_ModifyBone.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Simple controller that replaces or adds to the translation/rotation of a single bone."));
			MetaData->SetValue(NewProp_ScaleSpace, TEXT("Category"), TEXT("Scale"));
			MetaData->SetValue(NewProp_ScaleSpace, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_ModifyBone.h"));
			MetaData->SetValue(NewProp_ScaleSpace, TEXT("ToolTip"), TEXT("Reference frame to apply Scale in."));
			MetaData->SetValue(NewProp_RotationSpace, TEXT("Category"), TEXT("Rotation"));
			MetaData->SetValue(NewProp_RotationSpace, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_ModifyBone.h"));
			MetaData->SetValue(NewProp_RotationSpace, TEXT("ToolTip"), TEXT("Reference frame to apply Rotation in."));
			MetaData->SetValue(NewProp_TranslationSpace, TEXT("Category"), TEXT("Translation"));
			MetaData->SetValue(NewProp_TranslationSpace, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_ModifyBone.h"));
			MetaData->SetValue(NewProp_TranslationSpace, TEXT("ToolTip"), TEXT("Reference frame to apply Translation in."));
			MetaData->SetValue(NewProp_ScaleMode, TEXT("Category"), TEXT("Scale"));
			MetaData->SetValue(NewProp_ScaleMode, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_ModifyBone.h"));
			MetaData->SetValue(NewProp_ScaleMode, TEXT("ToolTip"), TEXT("Whether and how to modify the translation of this bone."));
			MetaData->SetValue(NewProp_RotationMode, TEXT("Category"), TEXT("Rotation"));
			MetaData->SetValue(NewProp_RotationMode, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_ModifyBone.h"));
			MetaData->SetValue(NewProp_RotationMode, TEXT("ToolTip"), TEXT("Whether and how to modify the translation of this bone."));
			MetaData->SetValue(NewProp_TranslationMode, TEXT("Category"), TEXT("Translation"));
			MetaData->SetValue(NewProp_TranslationMode, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_ModifyBone.h"));
			MetaData->SetValue(NewProp_TranslationMode, TEXT("ToolTip"), TEXT("Whether and how to modify the translation of this bone."));
			MetaData->SetValue(NewProp_Scale, TEXT("Category"), TEXT("Scale"));
			MetaData->SetValue(NewProp_Scale, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_ModifyBone.h"));
			MetaData->SetValue(NewProp_Scale, TEXT("PinShownByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_Scale, TEXT("ToolTip"), TEXT("New Scale of bone to apply. This is only worldspace."));
			MetaData->SetValue(NewProp_Rotation, TEXT("Category"), TEXT("Rotation"));
			MetaData->SetValue(NewProp_Rotation, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_ModifyBone.h"));
			MetaData->SetValue(NewProp_Rotation, TEXT("PinShownByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_Rotation, TEXT("ToolTip"), TEXT("New rotation of bone to apply."));
			MetaData->SetValue(NewProp_Translation, TEXT("Category"), TEXT("Translation"));
			MetaData->SetValue(NewProp_Translation, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_ModifyBone.h"));
			MetaData->SetValue(NewProp_Translation, TEXT("PinShownByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_Translation, TEXT("ToolTip"), TEXT("New translation of bone to apply."));
			MetaData->SetValue(NewProp_BoneToModify, TEXT("Category"), TEXT("SkeletalControl"));
			MetaData->SetValue(NewProp_BoneToModify, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_ModifyBone.h"));
			MetaData->SetValue(NewProp_BoneToModify, TEXT("ToolTip"), TEXT("Name of bone to control. This is the main bone chain to modify from. *"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_ModifyBone_CRC() { return 4101547128U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_ObserveBone()
	{
		UPackage* Outer=Z_Construct_UPackage_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_ObserveBone_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("AnimNode_ObserveBone"), sizeof(FAnimNode_ObserveBone), Get_Z_Construct_UScriptStruct_FAnimNode_ObserveBone_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_ObserveBone"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_SkeletalControlBase(), new UScriptStruct::TCppStructOps<FAnimNode_ObserveBone>, EStructFlags(0x00000201));
			UProperty* NewProp_Scale = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Scale"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Scale, FAnimNode_ObserveBone), 0x0000000000000000, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Rotation = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Rotation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Rotation, FAnimNode_ObserveBone), 0x0000000000000000, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_Translation = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Translation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Translation, FAnimNode_ObserveBone), 0x0000000000000000, Z_Construct_UScriptStruct_FVector());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bRelativeToRefPose, FAnimNode_ObserveBone, bool);
			UProperty* NewProp_bRelativeToRefPose = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bRelativeToRefPose"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bRelativeToRefPose, FAnimNode_ObserveBone), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bRelativeToRefPose, FAnimNode_ObserveBone), sizeof(bool), true);
			UProperty* NewProp_DisplaySpace = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DisplaySpace"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(DisplaySpace, FAnimNode_ObserveBone), 0x0000000000000001, Z_Construct_UEnum_Engine_EBoneControlSpace());
			UProperty* NewProp_BoneToObserve = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BoneToObserve"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(BoneToObserve, FAnimNode_ObserveBone), 0x0000000000000001, Z_Construct_UScriptStruct_FBoneReference());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_ObserveBone.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Debugging node that displays the current value of a bone in a specific space."));
			MetaData->SetValue(NewProp_Scale, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_ObserveBone.h"));
			MetaData->SetValue(NewProp_Scale, TEXT("ToolTip"), TEXT("Scale of the bone being observed."));
			MetaData->SetValue(NewProp_Rotation, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_ObserveBone.h"));
			MetaData->SetValue(NewProp_Rotation, TEXT("ToolTip"), TEXT("Rotation of the bone being observed."));
			MetaData->SetValue(NewProp_Translation, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_ObserveBone.h"));
			MetaData->SetValue(NewProp_Translation, TEXT("ToolTip"), TEXT("Translation of the bone being observed."));
			MetaData->SetValue(NewProp_bRelativeToRefPose, TEXT("Category"), TEXT("SkeletalControl"));
			MetaData->SetValue(NewProp_bRelativeToRefPose, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_ObserveBone.h"));
			MetaData->SetValue(NewProp_bRelativeToRefPose, TEXT("ToolTip"), TEXT("Show the difference from the reference pose?"));
			MetaData->SetValue(NewProp_DisplaySpace, TEXT("Category"), TEXT("SkeletalControl"));
			MetaData->SetValue(NewProp_DisplaySpace, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_ObserveBone.h"));
			MetaData->SetValue(NewProp_DisplaySpace, TEXT("ToolTip"), TEXT("Reference frame to display the bone transform in."));
			MetaData->SetValue(NewProp_BoneToObserve, TEXT("Category"), TEXT("SkeletalControl"));
			MetaData->SetValue(NewProp_BoneToObserve, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_ObserveBone.h"));
			MetaData->SetValue(NewProp_BoneToObserve, TEXT("ToolTip"), TEXT("Name of bone to observe."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_ObserveBone_CRC() { return 1646006594U; }
	UEnum* Z_Construct_UEnum_AnimGraphRuntime_EBoneAxis()
	{
		UPackage* Outer=Z_Construct_UPackage_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UEnum_AnimGraphRuntime_EBoneAxis_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EBoneAxis"), 0, Get_Z_Construct_UEnum_AnimGraphRuntime_EBoneAxis_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EBoneAxis"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("BA_X")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("BA_Y")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("BA_Z")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("BA_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_RotationMultiplier.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_AnimGraphRuntime_EBoneAxis_CRC() { return 3555249480U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_RotationMultiplier()
	{
		UPackage* Outer=Z_Construct_UPackage_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_RotationMultiplier_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("AnimNode_RotationMultiplier"), sizeof(FAnimNode_RotationMultiplier), Get_Z_Construct_UScriptStruct_FAnimNode_RotationMultiplier_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_RotationMultiplier"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_SkeletalControlBase(), new UScriptStruct::TCppStructOps<FAnimNode_RotationMultiplier>, EStructFlags(0x00000201));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsAdditive, FAnimNode_RotationMultiplier, bool);
			UProperty* NewProp_bIsAdditive = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bIsAdditive"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsAdditive, FAnimNode_RotationMultiplier), 0x0000000000000005, CPP_BOOL_PROPERTY_BITMASK(bIsAdditive, FAnimNode_RotationMultiplier), sizeof(bool), true);
			UProperty* NewProp_RotationAxisToRefer = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RotationAxisToRefer"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(RotationAxisToRefer, FAnimNode_RotationMultiplier), 0x0000000000000005, Z_Construct_UEnum_AnimGraphRuntime_EBoneAxis());
			UProperty* NewProp_Multiplier = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Multiplier"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Multiplier, FAnimNode_RotationMultiplier), 0x0000000000000005);
			UProperty* NewProp_SourceBone = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SourceBone"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SourceBone, FAnimNode_RotationMultiplier), 0x0000000000000005, Z_Construct_UScriptStruct_FBoneReference());
			UProperty* NewProp_TargetBone = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TargetBone"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TargetBone, FAnimNode_RotationMultiplier), 0x0000000000000005, Z_Construct_UScriptStruct_FBoneReference());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_RotationMultiplier.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Simple controller that multiplies scalar value to the translation/rotation/scale of a single bone."));
			MetaData->SetValue(NewProp_bIsAdditive, TEXT("Category"), TEXT("Multiplier"));
			MetaData->SetValue(NewProp_bIsAdditive, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_RotationMultiplier.h"));
			MetaData->SetValue(NewProp_RotationAxisToRefer, TEXT("Category"), TEXT("Multiplier"));
			MetaData->SetValue(NewProp_RotationAxisToRefer, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_RotationMultiplier.h"));
			MetaData->SetValue(NewProp_Multiplier, TEXT("Category"), TEXT("Multiplier"));
			MetaData->SetValue(NewProp_Multiplier, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_RotationMultiplier.h"));
			MetaData->SetValue(NewProp_Multiplier, TEXT("PinShownByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_Multiplier, TEXT("ToolTip"), TEXT("To make these to be easily pin-hookable, I'm not making it struct, but each variable\n0.f is invalid, and default"));
			MetaData->SetValue(NewProp_SourceBone, TEXT("Category"), TEXT("Multiplier"));
			MetaData->SetValue(NewProp_SourceBone, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_RotationMultiplier.h"));
			MetaData->SetValue(NewProp_SourceBone, TEXT("ToolTip"), TEXT("Source to get transform from *"));
			MetaData->SetValue(NewProp_TargetBone, TEXT("Category"), TEXT("Multiplier"));
			MetaData->SetValue(NewProp_TargetBone, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_RotationMultiplier.h"));
			MetaData->SetValue(NewProp_TargetBone, TEXT("ToolTip"), TEXT("Name of bone to control. This is the main bone chain to modify from. *"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_RotationMultiplier_CRC() { return 648821470U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_SpringBone()
	{
		UPackage* Outer=Z_Construct_UPackage_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_SpringBone_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("AnimNode_SpringBone"), sizeof(FAnimNode_SpringBone), Get_Z_Construct_UScriptStruct_FAnimNode_SpringBone_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_SpringBone"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_SkeletalControlBase(), new UScriptStruct::TCppStructOps<FAnimNode_SpringBone>, EStructFlags(0x00000201));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bRotateZ, FAnimNode_SpringBone, bool);
			UProperty* NewProp_bRotateZ = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bRotateZ"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bRotateZ, FAnimNode_SpringBone), 0x0000000000000005, CPP_BOOL_PROPERTY_BITMASK(bRotateZ, FAnimNode_SpringBone), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bRotateY, FAnimNode_SpringBone, bool);
			UProperty* NewProp_bRotateY = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bRotateY"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bRotateY, FAnimNode_SpringBone), 0x0000000000000005, CPP_BOOL_PROPERTY_BITMASK(bRotateY, FAnimNode_SpringBone), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bRotateX, FAnimNode_SpringBone, bool);
			UProperty* NewProp_bRotateX = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bRotateX"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bRotateX, FAnimNode_SpringBone), 0x0000000000000005, CPP_BOOL_PROPERTY_BITMASK(bRotateX, FAnimNode_SpringBone), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTranslateZ, FAnimNode_SpringBone, bool);
			UProperty* NewProp_bTranslateZ = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bTranslateZ"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTranslateZ, FAnimNode_SpringBone), 0x0000000000000005, CPP_BOOL_PROPERTY_BITMASK(bTranslateZ, FAnimNode_SpringBone), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTranslateY, FAnimNode_SpringBone, bool);
			UProperty* NewProp_bTranslateY = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bTranslateY"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTranslateY, FAnimNode_SpringBone), 0x0000000000000005, CPP_BOOL_PROPERTY_BITMASK(bTranslateY, FAnimNode_SpringBone), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTranslateX, FAnimNode_SpringBone, bool);
			UProperty* NewProp_bTranslateX = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bTranslateX"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTranslateX, FAnimNode_SpringBone), 0x0000000000000005, CPP_BOOL_PROPERTY_BITMASK(bTranslateX, FAnimNode_SpringBone), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bNoZSpring_DEPRECATED, FAnimNode_SpringBone, bool);
			UProperty* NewProp_bNoZSpring = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bNoZSpring"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bNoZSpring_DEPRECATED, FAnimNode_SpringBone), 0x0000000020000000, CPP_BOOL_PROPERTY_BITMASK(bNoZSpring_DEPRECATED, FAnimNode_SpringBone), sizeof(bool), true);
			UProperty* NewProp_ErrorResetThresh = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ErrorResetThresh"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ErrorResetThresh, FAnimNode_SpringBone), 0x0000000000000005);
			UProperty* NewProp_SpringDamping = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SpringDamping"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(SpringDamping, FAnimNode_SpringBone), 0x0000000000000005);
			UProperty* NewProp_SpringStiffness = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SpringStiffness"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(SpringStiffness, FAnimNode_SpringBone), 0x0000000000000005);
			UProperty* NewProp_MaxDisplacement = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MaxDisplacement"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MaxDisplacement, FAnimNode_SpringBone), 0x0000000000000005);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLimitDisplacement, FAnimNode_SpringBone, bool);
			UProperty* NewProp_bLimitDisplacement = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bLimitDisplacement"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLimitDisplacement, FAnimNode_SpringBone), 0x0000000000000005, CPP_BOOL_PROPERTY_BITMASK(bLimitDisplacement, FAnimNode_SpringBone), sizeof(bool), true);
			UProperty* NewProp_SpringBone = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SpringBone"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SpringBone, FAnimNode_SpringBone), 0x0000000000000005, Z_Construct_UScriptStruct_FBoneReference());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_SpringBone.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Simple controller that replaces or adds to the translation/rotation of a single bone."));
			MetaData->SetValue(NewProp_bRotateZ, TEXT("Category"), TEXT("FilterChannels"));
			MetaData->SetValue(NewProp_bRotateZ, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_SpringBone.h"));
			MetaData->SetValue(NewProp_bRotateZ, TEXT("ToolTip"), TEXT("If true take the spring calculation for rotation in Z"));
			MetaData->SetValue(NewProp_bRotateY, TEXT("Category"), TEXT("FilterChannels"));
			MetaData->SetValue(NewProp_bRotateY, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_SpringBone.h"));
			MetaData->SetValue(NewProp_bRotateY, TEXT("ToolTip"), TEXT("If true take the spring calculation for rotation in Y"));
			MetaData->SetValue(NewProp_bRotateX, TEXT("Category"), TEXT("FilterChannels"));
			MetaData->SetValue(NewProp_bRotateX, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_SpringBone.h"));
			MetaData->SetValue(NewProp_bRotateX, TEXT("ToolTip"), TEXT("If true take the spring calculation for rotation in X"));
			MetaData->SetValue(NewProp_bTranslateZ, TEXT("Category"), TEXT("FilterChannels"));
			MetaData->SetValue(NewProp_bTranslateZ, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_SpringBone.h"));
			MetaData->SetValue(NewProp_bTranslateZ, TEXT("ToolTip"), TEXT("If true take the spring calculation for translation in Z"));
			MetaData->SetValue(NewProp_bTranslateY, TEXT("Category"), TEXT("FilterChannels"));
			MetaData->SetValue(NewProp_bTranslateY, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_SpringBone.h"));
			MetaData->SetValue(NewProp_bTranslateY, TEXT("ToolTip"), TEXT("If true take the spring calculation for translation in Y"));
			MetaData->SetValue(NewProp_bTranslateX, TEXT("Category"), TEXT("FilterChannels"));
			MetaData->SetValue(NewProp_bTranslateX, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_SpringBone.h"));
			MetaData->SetValue(NewProp_bTranslateX, TEXT("ToolTip"), TEXT("If true take the spring calculation for translation in X"));
			MetaData->SetValue(NewProp_bNoZSpring, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_SpringBone.h"));
			MetaData->SetValue(NewProp_bNoZSpring, TEXT("ToolTip"), TEXT("If true, Z position is always correct, no spring applied"));
			MetaData->SetValue(NewProp_ErrorResetThresh, TEXT("Category"), TEXT("Spring"));
			MetaData->SetValue(NewProp_ErrorResetThresh, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_SpringBone.h"));
			MetaData->SetValue(NewProp_ErrorResetThresh, TEXT("ToolTip"), TEXT("If spring stretches more than this, reset it. Useful for catching teleports etc"));
			MetaData->SetValue(NewProp_SpringDamping, TEXT("Category"), TEXT("Spring"));
			MetaData->SetValue(NewProp_SpringDamping, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_SpringBone.h"));
			MetaData->SetValue(NewProp_SpringDamping, TEXT("ToolTip"), TEXT("Damping of spring"));
			MetaData->SetValue(NewProp_SpringStiffness, TEXT("Category"), TEXT("Spring"));
			MetaData->SetValue(NewProp_SpringStiffness, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_SpringBone.h"));
			MetaData->SetValue(NewProp_SpringStiffness, TEXT("ToolTip"), TEXT("Stiffness of spring"));
			MetaData->SetValue(NewProp_MaxDisplacement, TEXT("Category"), TEXT("Spring"));
			MetaData->SetValue(NewProp_MaxDisplacement, TEXT("EditCondition"), TEXT("bLimitDisplacement"));
			MetaData->SetValue(NewProp_MaxDisplacement, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_SpringBone.h"));
			MetaData->SetValue(NewProp_MaxDisplacement, TEXT("ToolTip"), TEXT("If bLimitDisplacement is true, this indicates how long a bone can stretch beyond its length in the ref-pose."));
			MetaData->SetValue(NewProp_bLimitDisplacement, TEXT("Category"), TEXT("Spring"));
			MetaData->SetValue(NewProp_bLimitDisplacement, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_SpringBone.h"));
			MetaData->SetValue(NewProp_bLimitDisplacement, TEXT("ToolTip"), TEXT("Limit the amount that a bone can stretch from its ref-pose length."));
			MetaData->SetValue(NewProp_SpringBone, TEXT("Category"), TEXT("Spring"));
			MetaData->SetValue(NewProp_SpringBone, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_SpringBone.h"));
			MetaData->SetValue(NewProp_SpringBone, TEXT("ToolTip"), TEXT("Name of bone to control. This is the main bone chain to modify from. *"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_SpringBone_CRC() { return 2442897250U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_Trail()
	{
		UPackage* Outer=Z_Construct_UPackage_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_Trail_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("AnimNode_Trail"), sizeof(FAnimNode_Trail), Get_Z_Construct_UScriptStruct_FAnimNode_Trail_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_Trail"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_SkeletalControlBase(), new UScriptStruct::TCppStructOps<FAnimNode_Trail>, EStructFlags(0x00000201));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bActorSpaceFakeVel, FAnimNode_Trail, bool);
			UProperty* NewProp_bActorSpaceFakeVel = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bActorSpaceFakeVel"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bActorSpaceFakeVel, FAnimNode_Trail), 0x0000000000000005, CPP_BOOL_PROPERTY_BITMASK(bActorSpaceFakeVel, FAnimNode_Trail), sizeof(bool), true);
			UProperty* NewProp_FakeVelocity = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("FakeVelocity"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(FakeVelocity, FAnimNode_Trail), 0x0000000000000005, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_StretchLimit = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("StretchLimit"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(StretchLimit, FAnimNode_Trail), 0x0000000000000005);
			UProperty* NewProp_TrailRelaxation = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TrailRelaxation"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(TrailRelaxation, FAnimNode_Trail), 0x0000000000000005);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLimitStretch, FAnimNode_Trail, bool);
			UProperty* NewProp_bLimitStretch = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bLimitStretch"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLimitStretch, FAnimNode_Trail), 0x0000000000000005, CPP_BOOL_PROPERTY_BITMASK(bLimitStretch, FAnimNode_Trail), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bInvertChainBoneAxis, FAnimNode_Trail, bool);
			UProperty* NewProp_bInvertChainBoneAxis = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bInvertChainBoneAxis"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bInvertChainBoneAxis, FAnimNode_Trail), 0x0000000000000005, CPP_BOOL_PROPERTY_BITMASK(bInvertChainBoneAxis, FAnimNode_Trail), sizeof(bool), true);
			UProperty* NewProp_ChainBoneAxis = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ChainBoneAxis"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(ChainBoneAxis, FAnimNode_Trail), 0x0000000000000005, Z_Construct_UEnum_CoreUObject_EAxis());
			UProperty* NewProp_ChainLength = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ChainLength"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ChainLength, FAnimNode_Trail), 0x0000000000000005);
			UProperty* NewProp_TrailBone = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TrailBone"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TrailBone, FAnimNode_Trail), 0x0000000000000005, Z_Construct_UScriptStruct_FBoneReference());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_Trail.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Trail Controller"));
			MetaData->SetValue(NewProp_bActorSpaceFakeVel, TEXT("Category"), TEXT("Trail"));
			MetaData->SetValue(NewProp_bActorSpaceFakeVel, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_Trail.h"));
			MetaData->SetValue(NewProp_bActorSpaceFakeVel, TEXT("ToolTip"), TEXT("Whether 'fake' velocity should be applied in actor or world space."));
			MetaData->SetValue(NewProp_FakeVelocity, TEXT("Category"), TEXT("Trail"));
			MetaData->SetValue(NewProp_FakeVelocity, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_Trail.h"));
			MetaData->SetValue(NewProp_FakeVelocity, TEXT("ToolTip"), TEXT("'Fake' velocity applied to bones."));
			MetaData->SetValue(NewProp_StretchLimit, TEXT("Category"), TEXT("Trail"));
			MetaData->SetValue(NewProp_StretchLimit, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_Trail.h"));
			MetaData->SetValue(NewProp_StretchLimit, TEXT("ToolTip"), TEXT("If bLimitStretch is true, this indicates how long a bone can stretch beyond its length in the ref-pose."));
			MetaData->SetValue(NewProp_TrailRelaxation, TEXT("Category"), TEXT("Trail"));
			MetaData->SetValue(NewProp_TrailRelaxation, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_Trail.h"));
			MetaData->SetValue(NewProp_TrailRelaxation, TEXT("ToolTip"), TEXT("How quickly we 'relax' the bones to their animated positions."));
			MetaData->SetValue(NewProp_bLimitStretch, TEXT("Category"), TEXT("Trail"));
			MetaData->SetValue(NewProp_bLimitStretch, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_Trail.h"));
			MetaData->SetValue(NewProp_bLimitStretch, TEXT("ToolTip"), TEXT("Limit the amount that a bone can stretch from its ref-pose length."));
			MetaData->SetValue(NewProp_bInvertChainBoneAxis, TEXT("Category"), TEXT("Trail"));
			MetaData->SetValue(NewProp_bInvertChainBoneAxis, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_Trail.h"));
			MetaData->SetValue(NewProp_bInvertChainBoneAxis, TEXT("ToolTip"), TEXT("Invert the direction specified in ChainBoneAxis."));
			MetaData->SetValue(NewProp_ChainBoneAxis, TEXT("Category"), TEXT("Trail"));
			MetaData->SetValue(NewProp_ChainBoneAxis, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_Trail.h"));
			MetaData->SetValue(NewProp_ChainBoneAxis, TEXT("ToolTip"), TEXT("Axis of the bones to point along trail."));
			MetaData->SetValue(NewProp_ChainLength, TEXT("Category"), TEXT("Trail"));
			MetaData->SetValue(NewProp_ChainLength, TEXT("ClampMin"), TEXT("2"));
			MetaData->SetValue(NewProp_ChainLength, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_Trail.h"));
			MetaData->SetValue(NewProp_ChainLength, TEXT("ToolTip"), TEXT("Number of bones above the active one in the hierarchy to modify. ChainLength should be at least 2."));
			MetaData->SetValue(NewProp_ChainLength, TEXT("UIMin"), TEXT("2"));
			MetaData->SetValue(NewProp_TrailBone, TEXT("Category"), TEXT("Trail"));
			MetaData->SetValue(NewProp_TrailBone, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_Trail.h"));
			MetaData->SetValue(NewProp_TrailBone, TEXT("ToolTip"), TEXT("Reference to the active bone in the hierarchy to modify."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_Trail_CRC() { return 3068061550U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_TwoBoneIK()
	{
		UPackage* Outer=Z_Construct_UPackage_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_TwoBoneIK_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("AnimNode_TwoBoneIK"), sizeof(FAnimNode_TwoBoneIK), Get_Z_Construct_UScriptStruct_FAnimNode_TwoBoneIK_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_TwoBoneIK"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_SkeletalControlBase(), new UScriptStruct::TCppStructOps<FAnimNode_TwoBoneIK>, EStructFlags(0x00000201));
			UProperty* NewProp_JointTargetSpaceBoneName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("JointTargetSpaceBoneName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(JointTargetSpaceBoneName, FAnimNode_TwoBoneIK), 0x0000000000000005);
			UProperty* NewProp_JointTargetLocationSpace = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("JointTargetLocationSpace"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(JointTargetLocationSpace, FAnimNode_TwoBoneIK), 0x0000000000000005, Z_Construct_UEnum_Engine_EBoneControlSpace());
			UProperty* NewProp_EffectorLocationSpace = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("EffectorLocationSpace"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(EffectorLocationSpace, FAnimNode_TwoBoneIK), 0x0000000000000005, Z_Construct_UEnum_Engine_EBoneControlSpace());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAllowStretching, FAnimNode_TwoBoneIK, uint8);
			UProperty* NewProp_bAllowStretching = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bAllowStretching"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAllowStretching, FAnimNode_TwoBoneIK), 0x0000000000000005, CPP_BOOL_PROPERTY_BITMASK(bAllowStretching, FAnimNode_TwoBoneIK), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bMaintainEffectorRelRot, FAnimNode_TwoBoneIK, uint8);
			UProperty* NewProp_bMaintainEffectorRelRot = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bMaintainEffectorRelRot"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bMaintainEffectorRelRot, FAnimNode_TwoBoneIK), 0x0000000000000005, CPP_BOOL_PROPERTY_BITMASK(bMaintainEffectorRelRot, FAnimNode_TwoBoneIK), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTakeRotationFromEffectorSpace, FAnimNode_TwoBoneIK, uint8);
			UProperty* NewProp_bTakeRotationFromEffectorSpace = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bTakeRotationFromEffectorSpace"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTakeRotationFromEffectorSpace, FAnimNode_TwoBoneIK), 0x0000000000000005, CPP_BOOL_PROPERTY_BITMASK(bTakeRotationFromEffectorSpace, FAnimNode_TwoBoneIK), sizeof(uint8), false);
			UProperty* NewProp_EffectorSpaceBoneName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("EffectorSpaceBoneName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(EffectorSpaceBoneName, FAnimNode_TwoBoneIK), 0x0000000000000005);
			UProperty* NewProp_StretchLimits = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("StretchLimits"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(StretchLimits, FAnimNode_TwoBoneIK), 0x0000000000000005, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_JointTargetLocation = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("JointTargetLocation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(JointTargetLocation, FAnimNode_TwoBoneIK), 0x0000000000000005, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_EffectorLocation = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("EffectorLocation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(EffectorLocation, FAnimNode_TwoBoneIK), 0x0000000000000005, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_IKBone = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("IKBone"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(IKBone, FAnimNode_TwoBoneIK), 0x0000000000000005, Z_Construct_UScriptStruct_FBoneReference());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_TwoBoneIK.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Simple 2 Bone IK Controller."));
			MetaData->SetValue(NewProp_JointTargetSpaceBoneName, TEXT("Category"), TEXT("JointTarget"));
			MetaData->SetValue(NewProp_JointTargetSpaceBoneName, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_TwoBoneIK.h"));
			MetaData->SetValue(NewProp_JointTargetSpaceBoneName, TEXT("ToolTip"), TEXT("If JointTargetSpaceBoneName is a bone, this is the bone to use. *"));
			MetaData->SetValue(NewProp_JointTargetLocationSpace, TEXT("Category"), TEXT("JointTarget"));
			MetaData->SetValue(NewProp_JointTargetLocationSpace, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_TwoBoneIK.h"));
			MetaData->SetValue(NewProp_JointTargetLocationSpace, TEXT("ToolTip"), TEXT("Reference frame of Joint Target Location."));
			MetaData->SetValue(NewProp_EffectorLocationSpace, TEXT("Category"), TEXT("IK"));
			MetaData->SetValue(NewProp_EffectorLocationSpace, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_TwoBoneIK.h"));
			MetaData->SetValue(NewProp_EffectorLocationSpace, TEXT("ToolTip"), TEXT("Reference frame of Effector Location."));
			MetaData->SetValue(NewProp_bAllowStretching, TEXT("Category"), TEXT("IK"));
			MetaData->SetValue(NewProp_bAllowStretching, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_TwoBoneIK.h"));
			MetaData->SetValue(NewProp_bAllowStretching, TEXT("ToolTip"), TEXT("Should stretching be allowed, to be prevent over extension"));
			MetaData->SetValue(NewProp_bMaintainEffectorRelRot, TEXT("Category"), TEXT("EndEffector"));
			MetaData->SetValue(NewProp_bMaintainEffectorRelRot, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_TwoBoneIK.h"));
			MetaData->SetValue(NewProp_bMaintainEffectorRelRot, TEXT("ToolTip"), TEXT("Keep local rotation of end bone"));
			MetaData->SetValue(NewProp_bTakeRotationFromEffectorSpace, TEXT("Category"), TEXT("EndEffector"));
			MetaData->SetValue(NewProp_bTakeRotationFromEffectorSpace, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_TwoBoneIK.h"));
			MetaData->SetValue(NewProp_bTakeRotationFromEffectorSpace, TEXT("ToolTip"), TEXT("Set end bone to use End Effector rotation"));
			MetaData->SetValue(NewProp_EffectorSpaceBoneName, TEXT("Category"), TEXT("EndEffector"));
			MetaData->SetValue(NewProp_EffectorSpaceBoneName, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_TwoBoneIK.h"));
			MetaData->SetValue(NewProp_EffectorSpaceBoneName, TEXT("ToolTip"), TEXT("If EffectorLocationSpace is a bone, this is the bone to use. *"));
			MetaData->SetValue(NewProp_StretchLimits, TEXT("Category"), TEXT("IK"));
			MetaData->SetValue(NewProp_StretchLimits, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_TwoBoneIK.h"));
			MetaData->SetValue(NewProp_StretchLimits, TEXT("ToolTip"), TEXT("Limits to use if stretching is allowed."));
			MetaData->SetValue(NewProp_JointTargetLocation, TEXT("Category"), TEXT("JointTarget"));
			MetaData->SetValue(NewProp_JointTargetLocation, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_TwoBoneIK.h"));
			MetaData->SetValue(NewProp_JointTargetLocation, TEXT("PinShownByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_JointTargetLocation, TEXT("ToolTip"), TEXT("Joint Target Location. Location used to orient Joint bone. *"));
			MetaData->SetValue(NewProp_EffectorLocation, TEXT("Category"), TEXT("EndEffector"));
			MetaData->SetValue(NewProp_EffectorLocation, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_TwoBoneIK.h"));
			MetaData->SetValue(NewProp_EffectorLocation, TEXT("PinShownByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_EffectorLocation, TEXT("ToolTip"), TEXT("Effector Location. Target Location to reach."));
			MetaData->SetValue(NewProp_IKBone, TEXT("Category"), TEXT("IK"));
			MetaData->SetValue(NewProp_IKBone, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_TwoBoneIK.h"));
			MetaData->SetValue(NewProp_IKBone, TEXT("ToolTip"), TEXT("Name of bone to control. This is the main bone chain to modify from. *"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_TwoBoneIK_CRC() { return 2678908548U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_WheelHandler()
	{
		UPackage* Outer=Z_Construct_UPackage_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_WheelHandler_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("AnimNode_WheelHandler"), sizeof(FAnimNode_WheelHandler), Get_Z_Construct_UScriptStruct_FAnimNode_WheelHandler_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_WheelHandler"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_SkeletalControlBase(), new UScriptStruct::TCppStructOps<FAnimNode_WheelHandler>, EStructFlags(0x00000205));
			UProperty* NewProp_VehicleSimComponent = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("VehicleSimComponent"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(VehicleSimComponent, FAnimNode_WheelHandler), 0x0000000000082008, Z_Construct_UClass_UWheeledVehicleMovementComponent_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_WheelHandler.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Simple controller that replaces or adds to the translation/rotation of a single bone."));
			MetaData->SetValue(NewProp_VehicleSimComponent, TEXT("EditInline"), TEXT("true"));
			MetaData->SetValue(NewProp_VehicleSimComponent, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_WheelHandler.h"));
			MetaData->SetValue(NewProp_VehicleSimComponent, TEXT("ToolTip"), TEXT("Current Asset being played *"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_WheelHandler_CRC() { return 1236531015U; }
	UPackage* Z_Construct_UPackage_AnimGraphRuntime()
	{
		static UPackage* ReturnPackage = NULL;
		if (!ReturnPackage)
		{
			ReturnPackage = CastChecked<UPackage>(StaticFindObjectFast(UPackage::StaticClass(), NULL, FName(TEXT("/Script/AnimGraphRuntime")), false, false));
			ReturnPackage->SetPackageFlags(PKG_CompiledIn | 0x00000000);
			FGuid Guid;
			Guid.A = 0xE3EC1166;
			Guid.B = 0x1B8514BD;
			Guid.C = 0x00000000;
			Guid.D = 0x00000000;
			ReturnPackage->SetGuid(Guid);

		}
		return ReturnPackage;
	}
#endif

PRAGMA_ENABLE_DEPRECATION_WARNINGS
