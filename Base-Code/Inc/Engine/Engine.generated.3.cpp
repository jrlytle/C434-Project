// Copyright 1998-2015 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Boilerplate C++ definitions for a single module.
	This is automatically generated by UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "Private/EnginePrivate.h"
#include "Engine.generated.dep.h"
PRAGMA_DISABLE_DEPRECATION_WARNINGS
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	COREUOBJECT_API class UClass* Z_Construct_UClass_UObject();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FVector();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FLinearColor();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FVector2D();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FRotator();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FIntPoint();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FQuat();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FGuid();
	COREUOBJECT_API class UClass* Z_Construct_UClass_UObject_NoRegister();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FTransform();
	INPUTCORE_API class UEnum* Z_Construct_UEnum_InputCore_ETouchIndex();
	INPUTCORE_API class UScriptStruct* Z_Construct_UScriptStruct_FKey();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FColor();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FStringClassReference();
	INPUTCORE_API class UEnum* Z_Construct_UEnum_InputCore_EControllerHand();
	COREUOBJECT_API class UEnum* Z_Construct_UEnum_CoreUObject_EMouseCursor();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FIntVector();
	COREUOBJECT_API class UEnum* Z_Construct_UEnum_CoreUObject_EAxis();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FBoxSphereBounds();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FInterpCurveFloat();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FInterpCurveVector();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FInterpCurveQuat();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FPackedNormal();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FMatrix();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FBox();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FStringAssetReference();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FControllerEvent();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnalogInputEvent();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FKeyEvent();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FInputEvent();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FPointerEvent();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FDateTime();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FTimespan();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FRandomStream();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FPlane();
	COREUOBJECT_API class UEnum* Z_Construct_UEnum_CoreUObject_ESearchCase();
	COREUOBJECT_API class UEnum* Z_Construct_UEnum_CoreUObject_ESearchDir();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FButtonStyle();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FCheckBoxStyle();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FInterpCurveVector2D();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FInterpCurveTwoVectors();
	SLATE_API class UScriptStruct* Z_Construct_UScriptStruct_FInputChord();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FFloatRange();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FCompositeFont();
	SLATECORE_API class UClass* Z_Construct_UClass_UFontProviderInterface_NoRegister();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FInterpCurveLinearColor();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FVector4();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FSlateBrush();
	COREUOBJECT_API class UEnum* Z_Construct_UEnum_CoreUObject_EPixelFormat();

	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EViewModeIndex();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EDemoPlayFailure();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETravelType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETravelFailure();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ENetworkFailure();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETickingGroup();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EInputEvent();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FExposureSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FURL();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPrimitiveComponentPostPhysicsTickFunction();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FActorComponentTickFunction();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FActorTickFunction();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTickFunction();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTickPrerequisite();
	ENGINE_API class UClass* Z_Construct_UClass_UEngineBaseTypes_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UEngineBaseTypes();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FVector_NetQuantizeNormal();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FVector_NetQuantize100();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FVector_NetQuantize10();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FVector_NetQuantize();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FFastArraySerializer();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FFastArraySerializerItem();
	ENGINE_API class UClass* Z_Construct_UClass_UDamageType_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDamageType();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_TimerDynamicDelegate__DelegateSignature();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESpawnActorCollisionHandlingMethod();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAngularConstraintMotion();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EComponentSocketType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EComponentMobility();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EPhysicalSurface();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EWalkableSlopeBehavior();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ERotatorQuantization();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EVectorQuantization();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EEndPlayReason();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAutoPossessAI();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAutoReceiveInput();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ENetDormancy();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ENetRole();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMeshFeatureImportance();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EShadowMapFlags();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ELightMapPaddingType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ECollisionEnabled();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETimelineSigType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESleepFamily();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ERadialImpulseFalloff();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EInputConsumeOptions();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EFilterInterpolationType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ECollisionResponse();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EPhysicsSceneType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETraceTypeQuery();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EObjectTypeQuery();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EOverlapFilterOption();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ECollisionChannel();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMovementMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETriangleSortAxis();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETriangleSortOption();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ELightingBuildQuality();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMaterialSamplerType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMaterialTessellationMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMaterialShadingModel();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EParticleCollisionMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETrailWidthMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETranslucentSortPolicy();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETranslucencyLightingMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESamplerSourceMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EBlendMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EIndirectLightingCacheQuality();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESceneDepthPriorityGroup();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAttachLocation();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EActorMetricsType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAspectRatioAxisConstraint();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCanvasUVTri();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FFontRenderInfo();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDepthFieldGlowInfo();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDebugFloatHistory();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRedirector();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDirectoryPath();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FFilePath();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FComponentReference();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FConstrainComponentPropName();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FWalkableSlopeOverride();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRepAttachment();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRepMovement();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTimerHandle();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRadialDamageEvent();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRadialDamageParams();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPointDamageEvent();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDamageEvent();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMeshMergingSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMeshProxySettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMaterialSimplificationSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMeshBuildSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMeshReductionSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPOV();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimUpdateRateParameters();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimSlotDesc();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimSlotInfo();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMTDResult();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FOverlapResult();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FHitResult();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPrimitiveMaterialRef();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSwarmDebugOptions();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FLightmassDebugOptions();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FLightmassPrimitiveSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FLightmassDirectionalLightSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FLightmassPointLightSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FLightmassLightSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FLocalizedSubtitle();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSubtitleCue();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBasedPosition();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FFractureEffect();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCollisionImpactData();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRigidBodyContactInfo();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRigidBodyErrorCorrection();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRigidBodyState();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCollisionResponseContainer();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FResponseChannel();
	ENGINE_API class UClass* Z_Construct_UClass_UEngineTypes_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UEngineTypes();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ENodeAdvancedPins();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ENodeTitleType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EEdGraphPinDirection();
	ENGINE_API class UClass* Z_Construct_UClass_UEdGraphNode_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UEdGraphNode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EBlueprintPinStyleType();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FEdGraphPinType();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSimpleMemberReference();
	ENGINE_API class UClass* Z_Construct_UClass_UEdGraphPin_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UEdGraphPin();
	ENGINE_API class UClass* Z_Construct_UClass_UBlueprintCore_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBlueprintCore();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EBlueprintType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EBlueprintStatus();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FEditedDocumentInfo();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBPInterfaceDescription();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBPVariableDescription();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBPVariableMetaDataEntry();
	ENGINE_API class UClass* Z_Construct_UClass_UBlueprint_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBlueprint();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMemberReference();
	ENGINE_API class UClass* Z_Construct_UClass_UInterface_AssetUserData_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterface_AssetUserData();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EComponentCreationMethod();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_Activate();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_AddTickPrerequisiteActor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_AddTickPrerequisiteComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_ComponentHasTag();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_Deactivate();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_GetOwner();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_IsActive();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_IsBeingDestroyed();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_IsComponentTickEnabled();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_K2_DestroyComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_OnRep_IsActive();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_ReceiveBeginPlay();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_ReceiveEndPlay();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_ReceiveTick();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_RemoveTickPrerequisiteActor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_RemoveTickPrerequisiteComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_SetActive();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_SetComponentTickEnabled();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_SetIsReplicated();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_SetTickableWhenPaused();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_SetTickGroup();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_ToggleActive();
	ENGINE_API class UClass* Z_Construct_UClass_UActorComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UActorComponent();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_PhysicsVolumeChanged__DelegateSignature();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ERelativeTransformSpace();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EDetailMode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FOverlapInfo();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_DetachFromParent();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_DoesSocketExist();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_GetAllSocketNames();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_GetAttachParent();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_GetChildComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_GetChildrenComponents();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_GetComponentVelocity();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_GetForwardVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_GetNumChildrenComponents();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_GetParentComponents();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_GetPhysicsVolume();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_GetRelativeTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_GetRightVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_GetSocketLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_GetSocketQuaternion();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_GetSocketRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_GetSocketTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_GetUpVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_IsAnySimulatingPhysics();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_IsSimulatingPhysics();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_IsVisible();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_AddLocalOffset();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_AddLocalRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_AddLocalTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_AddRelativeLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_AddRelativeRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_AddWorldOffset();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_AddWorldRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_AddWorldTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_AttachTo();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_GetComponentLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_GetComponentRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_GetComponentScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_GetComponentToWorld();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_SetRelativeLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_SetRelativeLocationAndRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_SetRelativeRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_SetRelativeTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_SetWorldLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_SetWorldLocationAndRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_SetWorldRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_SetWorldTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_OnRep_Transform();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_OnRep_Visibility();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_ResetRelativeTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_SetAbsolute();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_SetHiddenInGame();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_SetRelativeScale3D();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_SetVisibility();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_SetWorldScale3D();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_SnapTo();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_ToggleVisibility();
	ENGINE_API class UClass* Z_Construct_UClass_USceneComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USceneComponent();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ActorEndPlaySignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ActorDestroyedSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ActorEndTouchOverSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ActorBeginTouchOverSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ActorOnInputTouchEndSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ActorOnInputTouchBeginSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ActorOnReleasedSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ActorOnClickedSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ActorEndCursorOverSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ActorBeginCursorOverSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ActorHitSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ActorEndOverlapSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ActorBeginOverlapSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_TakePointDamageSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_TakeAnyDamageSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ActorHasTag();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_AddComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_AddTickPrerequisiteActor();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_AddTickPrerequisiteComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_DetachRootComponentFromParent();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_DisableInput();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_EnableInput();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_FlushNetDormancy();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ForceNetUpdate();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetActorBounds();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetActorEnableCollision();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetActorEyesViewPoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetActorForwardVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetActorRelativeScale3D();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetActorRightVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetActorScale3D();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetActorTimeDilation();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetActorUpVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetComponentByClass();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetComponentsByClass();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetComponentsByTag();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetDistanceTo();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetDotProductTo();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetHorizontalDistanceTo();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetHorizontalDotProductTo();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetInputAxisKeyValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetInputAxisValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetInputVectorAxisValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetInstigator();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetInstigatorController();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetLifeSpan();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetOverlappingActors();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetOverlappingComponents();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetOwner();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetTickableWhenPaused();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetVelocity();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetVerticalDistanceTo();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_HasAuthority();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_IsActorBeingDestroyed();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_IsActorTickEnabled();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_IsOverlappingActor();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_AddActorLocalOffset();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_AddActorLocalRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_AddActorLocalTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_AddActorWorldOffset();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_AddActorWorldRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_AddActorWorldTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_AttachRootComponentTo();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_AttachRootComponentToActor();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_DestroyActor();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_DestroyComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_GetActorLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_GetActorRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_GetRootComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_OnBecomeViewTarget();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_OnEndViewTarget();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_OnReset();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_SetActorLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_SetActorLocationAndRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_SetActorRelativeLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_SetActorRelativeRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_SetActorRelativeTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_SetActorTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_TeleportTo();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_MakeMIDForMaterial();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_MakeNoise();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_OnRep_AttachmentReplication();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_OnRep_Instigator();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_OnRep_ReplicatedMovement();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_OnRep_ReplicateMovement();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ReceiveActorBeginCursorOver();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ReceiveActorBeginOverlap();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ReceiveActorEndCursorOver();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ReceiveActorEndOverlap();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ReceiveActorOnClicked();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ReceiveActorOnInputTouchBegin();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ReceiveActorOnInputTouchEnd();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ReceiveActorOnInputTouchEnter();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ReceiveActorOnInputTouchLeave();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ReceiveActorOnReleased();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ReceiveAnyDamage();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ReceiveBeginPlay();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ReceiveDestroyed();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ReceiveEndPlay();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ReceiveHit();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ReceivePointDamage();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ReceiveRadialDamage();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ReceiveTick();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_RemoveTickPrerequisiteActor();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_RemoveTickPrerequisiteComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_SetActorEnableCollision();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_SetActorHiddenInGame();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_SetActorRelativeScale3D();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_SetActorRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_SetActorScale3D();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_SetActorTickEnabled();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_SetLifeSpan();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_SetOwner();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_SetReplicateMovement();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_SetReplicates();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_SetTickableWhenPaused();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_SetTickGroup();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_SnapRootComponentTo();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_TearOff();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_UserConstructionScript();
	ENGINE_API class UClass* Z_Construct_UClass_AActor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AActor();
	ENGINE_API class UFunction* Z_Construct_UFunction_AAmbientSound_AdjustVolume();
	ENGINE_API class UFunction* Z_Construct_UFunction_AAmbientSound_FadeIn();
	ENGINE_API class UFunction* Z_Construct_UFunction_AAmbientSound_FadeOut();
	ENGINE_API class UFunction* Z_Construct_UFunction_AAmbientSound_Play();
	ENGINE_API class UFunction* Z_Construct_UFunction_AAmbientSound_Stop();
	ENGINE_API class UClass* Z_Construct_UClass_AAmbientSound_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AAmbientSound();
	ENGINE_API class UClass* Z_Construct_UClass_UPendingNetGame_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPendingNetGame();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FLatentActionManager();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FLatentActionInfo();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameInstance_DebugCreatePlayer();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameInstance_DebugRemovePlayer();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameInstance_HandleNetworkError();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameInstance_HandleTravelError();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameInstance_ReceiveInit();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameInstance_ReceiveShutdown();
	ENGINE_API class UClass* Z_Construct_UClass_UGameInstance_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UGameInstance();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FEndClothSimulationFunction();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FStartClothSimulationFunction();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FEndPhysicsTickFunction();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FStartPhysicsTickFunction();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FLevelViewportInfo();
	ENGINE_API class UClass* Z_Construct_UClass_UWorld_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UWorld();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FLevelSimplificationDetails();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDynamicTextureInstance();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FStreamableTextureInstance();
	ENGINE_API class UClass* Z_Construct_UClass_ULevel_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ULevel();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EBrushType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ECsgOper();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FGeomSelection();
	ENGINE_API class UClass* Z_Construct_UClass_ABrush_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ABrush();
	ENGINE_API class UClass* Z_Construct_UClass_ABrushShape_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ABrushShape();
	ENGINE_API class UClass* Z_Construct_UClass_AVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AVolume();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ReverbPreset();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FInteriorSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FReverbSettings();
	ENGINE_API class UClass* Z_Construct_UClass_AAudioVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AAudioVolume();
	ENGINE_API class UClass* Z_Construct_UClass_ABlockingVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ABlockingVolume();
	ENGINE_API class UClass* Z_Construct_UClass_ACameraBlockingVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ACameraBlockingVolume();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCullDistanceSizePair();
	ENGINE_API class UClass* Z_Construct_UClass_ACullDistanceVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ACullDistanceVolume();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EStreamingVolumeUsage();
	ENGINE_API class UClass* Z_Construct_UClass_ALevelStreamingVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ALevelStreamingVolume();
	ENGINE_API class UClass* Z_Construct_UClass_ALightmassCharacterIndirectDetailVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ALightmassCharacterIndirectDetailVolume();
	ENGINE_API class UClass* Z_Construct_UClass_ALightmassImportanceVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ALightmassImportanceVolume();
	ENGINE_API class UClass* Z_Construct_UClass_ANavMeshBoundsVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ANavMeshBoundsVolume();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ENavigationQueryResult();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ENavPathEvent();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ENavDataGatheringModeConfig();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ENavDataGatheringMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ENavigationOptionFlag();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNavDataConfig();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNavAgentProperties();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMovementProperties();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNavAgentSelector();
	ENGINE_API class UClass* Z_Construct_UClass_UNavigationTypes_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavigationTypes();
	ENGINE_API class UClass* Z_Construct_UClass_UNavRelevantInterface_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavRelevantInterface();
	ENGINE_API class UFunction* Z_Construct_UFunction_ANavModifierVolume_SetAreaClass();
	ENGINE_API class UClass* Z_Construct_UClass_ANavModifierVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ANavModifierVolume();
	ENGINE_API class UClass* Z_Construct_UClass_APhysicsVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_APhysicsVolume();
	ENGINE_API class UClass* Z_Construct_UClass_ADefaultPhysicsVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ADefaultPhysicsVolume();
	ENGINE_API class UClass* Z_Construct_UClass_AKillZVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AKillZVolume();
	ENGINE_API class UClass* Z_Construct_UClass_APainCausingVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_APainCausingVolume();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EBlendableLocation();
	ENGINE_API class UClass* Z_Construct_UClass_UBlendableInterface_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBlendableInterface();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAntiAliasingMethod();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EDepthOfFieldMethod();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPostProcessSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FWeightedBlendables();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FWeightedBlendable();
	ENGINE_API class UClass* Z_Construct_UClass_UScene_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UScene();
	ENGINE_API class UClass* Z_Construct_UClass_UInterface_PostProcessVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterface_PostProcessVolume();
	ENGINE_API class UFunction* Z_Construct_UFunction_APostProcessVolume_AddOrUpdateBlendable();
	ENGINE_API class UClass* Z_Construct_UClass_APostProcessVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_APostProcessVolume();
	ENGINE_API class UClass* Z_Construct_UClass_APrecomputedVisibilityOverrideVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_APrecomputedVisibilityOverrideVolume();
	ENGINE_API class UClass* Z_Construct_UClass_APrecomputedVisibilityVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_APrecomputedVisibilityVolume();
	ENGINE_API class UClass* Z_Construct_UClass_ATriggerVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ATriggerVolume();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACameraActor_GetAutoActivatePlayerIndex();
	ENGINE_API class UClass* Z_Construct_UClass_ACameraActor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ACameraActor();
	ENGINE_API class UClass* Z_Construct_UClass_UNavAgentInterface_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavAgentInterface();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_InstigatedAnyDamageSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_CastToPlayerController();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_ClientSetLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_ClientSetRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_GetControlRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_GetDesiredRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_GetViewTarget();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_IsLocalController();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_IsLocalPlayerController();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_K2_GetPawn();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_LineOfSightTo();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_OnRep_Pawn();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_OnRep_PlayerState();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_Possess();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_ReceiveInstigatedAnyDamage();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_SetControlRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_SetInitialLocationAndRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_StopMovement();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_UnPossess();
	ENGINE_API class UClass* Z_Construct_UClass_AController_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AController();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPlayerMuteList();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ECameraAnimPlaySpace();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ECameraProjectionMode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMinimalViewInfo();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EInitialOscillatorOffset();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FVOscillator();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FROscillator();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FFOscillator();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCameraShake_BlueprintUpdateCameraShake();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCameraShake_ReceiveIsFinished();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCameraShake_ReceivePlayShake();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCameraShake_ReceiveStopShake();
	ENGINE_API class UClass* Z_Construct_UClass_UCameraShake_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCameraShake();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EViewTargetBlendFunction();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FViewTargetTransitionParams();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTViewTarget();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCameraCacheEntry();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_AddCameraLensEffect();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_AddNewCameraModifier();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_BlueprintUpdateCamera();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_ClearCameraLensEffects();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_FindCameraModifierByClass();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_GetCameraLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_GetCameraRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_GetFOVAngle();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_GetOwningPlayerController();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_PlayCameraAnim();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_PlayCameraShake();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_RemoveCameraLensEffect();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_RemoveCameraModifier();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_SetManualCameraFade();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_StartCameraFade();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_StopAllCameraAnims();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_StopAllCameraShakes();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_StopAllInstancesOfCameraAnim();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_StopAllInstancesOfCameraShake();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_StopCameraAnimInst();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_StopCameraFade();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_StopCameraShake();
	ENGINE_API class UClass* Z_Construct_UClass_APlayerCameraManager_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_APlayerCameraManager();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_InputGestureHandlerDynamicSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_InputVectorAxisHandlerDynamicSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_InputAxisHandlerDynamicSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_InputTouchHandlerDynamicSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_InputActionHandlerDynamicSignature__DelegateSignature();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EControllerAnalogStick();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInputComponent_GetControllerAnalogKeyState();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInputComponent_GetControllerAnalogStickState();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInputComponent_GetControllerKeyTimeDown();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInputComponent_GetControllerMouseDelta();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInputComponent_GetControllerVectorKeyState();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInputComponent_GetTouchState();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInputComponent_IsControllerKeyDown();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInputComponent_WasControllerKeyJustPressed();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInputComponent_WasControllerKeyJustReleased();
	ENGINE_API class UClass* Z_Construct_UClass_UInputComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInputComponent();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ERichCurveExtrapolation();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ERichCurveTangentWeightMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ERichCurveTangentMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ERichCurveInterpMode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FIntegralCurve();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FIntegralKey();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRichCurve();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRichCurveKey();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNameCurve();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNameCurveKey();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FIndexedCurve();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FKeyHandleMap();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCurveBase_GetTimeRange();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCurveBase_GetValueRange();
	ENGINE_API class UClass* Z_Construct_UClass_UCurveBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCurveBase();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRuntimeFloatCurve();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCurveFloat_GetFloatValue();
	ENGINE_API class UClass* Z_Construct_UClass_UCurveFloat_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCurveFloat();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FActiveForceFeedbackEffect();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FForceFeedbackChannelDetails();
	ENGINE_API class UClass* Z_Construct_UClass_UForceFeedbackEffect_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UForceFeedbackEffect();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FUniqueNetIdRepl();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EDynamicForceFeedbackAction();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ActivateTouchInterface();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_AddPitchInput();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_AddRollInput();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_AddYawInput();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_Camera();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClearAudioListenerOverride();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientAddTextureStreamingLoc();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientCancelPendingMapChange();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientCapBandwidth();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientClearCameraLensEffects();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientCommitMapChange();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientEnableNetworkVoice();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientEndOnlineSession();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientFlushLevelStreaming();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientForceGarbageCollection();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientGameEnded();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientGotoState();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientIgnoreLookInput();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientIgnoreMoveInput();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientMessage();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientMutePlayer();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientPlayCameraAnim();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientPlayCameraShake();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientPlayForceFeedback();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientPlaySound();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientPlaySoundAtLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientPrepareMapChange();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientPrestreamTextures();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientReceiveLocalizedMessage();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientRepObjRef();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientReset();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientRestart();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientRetryClientRestart();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientReturnToMainMenu();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientSetBlockOnAsyncLoading();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientSetCameraFade();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientSetCameraMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientSetCinematicMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientSetForceMipLevelsToBeResident();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientSetHUD();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientSetSpectatorWaiting();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientSetViewTarget();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientSpawnCameraLensEffect();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientStartOnlineSession();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientStopCameraAnim();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientStopCameraShake();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientStopForceFeedback();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientTeamMessage();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientTravel();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientTravelInternal();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientUnmutePlayer();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientUpdateLevelStreamingStatus();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientVoiceHandshakeComplete();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientWasKicked();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ConsoleKey();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_DeprojectMousePositionToWorld();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_DeprojectScreenPositionToWorld();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_EnableCheats();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_FOV();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_GetFocalLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_GetHitResultUnderCursor();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_GetHitResultUnderCursorByChannel();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_GetHitResultUnderCursorForObjects();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_GetHitResultUnderFinger();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_GetHitResultUnderFingerByChannel();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_GetHitResultUnderFingerForObjects();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_GetHUD();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_GetInputAnalogKeyState();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_GetInputAnalogStickState();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_GetInputKeyTimeDown();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_GetInputMotionState();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_GetInputMouseDelta();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_GetInputTouchState();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_GetInputVectorKeyState();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_GetMousePosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_GetSpectatorPawn();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_GetViewportSize();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_IsInputKeyDown();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_IsLookInputIgnored();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_IsMoveInputIgnored();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_LocalTravel();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_OnServerStartedVisualLogger();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_Pause();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_PlayDynamicForceFeedback();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_PlayHapticEffect();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ProjectWorldLocationToScreen();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ResetIgnoreInputFlags();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ResetIgnoreLookInput();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ResetIgnoreMoveInput();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_RestartLevel();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_SendToConsole();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerAcknowledgePossession();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerCamera();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerChangeName();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerCheckClientPossession();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerCheckClientPossessionReliable();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerMutePlayer();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerNotifyLoadedWorld();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerPause();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerRestartPlayer();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerSetSpectatorLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerSetSpectatorWaiting();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerShortTimeout();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerToggleAILogging();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerUnmutePlayer();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerUpdateCamera();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerUpdateLevelVisibility();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerVerifyViewTarget();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerViewNextPlayer();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerViewPrevPlayer();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerViewSelf();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_SetAudioListenerOverride();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_SetCinematicMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_SetHapticsByValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_SetIgnoreLookInput();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_SetIgnoreMoveInput();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_SetName();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_SetViewTargetWithBlend();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_SetVirtualJoystickVisibility();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_StartFire();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_StopHapticEffect();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_SwitchLevel();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ToggleSpeaking();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_WasInputKeyJustPressed();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_WasInputKeyJustReleased();
	ENGINE_API class UClass* Z_Construct_UClass_APlayerController_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_APlayerController();
	ENGINE_API class UFunction* Z_Construct_UFunction_ADebugCameraController_ShowDebugSelectedInfo();
	ENGINE_API class UClass* Z_Construct_UClass_ADebugCameraController_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ADebugCameraController();
	ENGINE_API class UClass* Z_Construct_UClass_ALogVisualizerCameraController_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ALogVisualizerCameraController();
	ENGINE_API class UFunction* Z_Construct_UFunction_ADecalActor_CreateDynamicMaterialInstance();
	ENGINE_API class UFunction* Z_Construct_UFunction_ADecalActor_GetDecalMaterial();
	ENGINE_API class UFunction* Z_Construct_UFunction_ADecalActor_SetDecalMaterial();
	ENGINE_API class UClass* Z_Construct_UClass_ADecalActor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ADecalActor();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ActorFractureSignature__DelegateSignature();
	ENGINE_API class UClass* Z_Construct_UClass_ADestructibleActor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ADestructibleActor();
	ENGINE_API class UClass* Z_Construct_UClass_ADocumentationActor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ADocumentationActor();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ParticleCollisionSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ParticleDeathSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ParticleBurstSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ParticleSpawnSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UFunction_AEmitter_Activate();
	ENGINE_API class UFunction* Z_Construct_UFunction_AEmitter_Deactivate();
	ENGINE_API class UFunction* Z_Construct_UFunction_AEmitter_IsActive();
	ENGINE_API class UFunction* Z_Construct_UFunction_AEmitter_OnParticleSystemFinished();
	ENGINE_API class UFunction* Z_Construct_UFunction_AEmitter_OnRep_bCurrentlyActive();
	ENGINE_API class UFunction* Z_Construct_UFunction_AEmitter_SetActorParameter();
	ENGINE_API class UFunction* Z_Construct_UFunction_AEmitter_SetColorParameter();
	ENGINE_API class UFunction* Z_Construct_UFunction_AEmitter_SetFloatParameter();
	ENGINE_API class UFunction* Z_Construct_UFunction_AEmitter_SetMaterialParameter();
	ENGINE_API class UFunction* Z_Construct_UFunction_AEmitter_SetTemplate();
	ENGINE_API class UFunction* Z_Construct_UFunction_AEmitter_SetVectorParameter();
	ENGINE_API class UFunction* Z_Construct_UFunction_AEmitter_ToggleActive();
	ENGINE_API class UClass* Z_Construct_UClass_AEmitter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AEmitter();
	ENGINE_API class UClass* Z_Construct_UClass_AEmitterCameraLensEffectBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AEmitterCameraLensEffectBase();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDebugTextInfo();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_AddDebugText();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_AddHitBox();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_Deproject();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_DrawLine();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_DrawMaterial();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_DrawMaterialSimple();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_DrawMaterialTriangle();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_DrawRect();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_DrawText();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_DrawTexture();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_DrawTextureSimple();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_GetActorsInSelectionRectangle();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_GetOwningPawn();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_GetOwningPlayerController();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_GetTextSize();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_Project();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_ReceiveDrawHUD();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_ReceiveHitBoxBeginCursorOver();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_ReceiveHitBoxClick();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_ReceiveHitBoxEndCursorOver();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_ReceiveHitBoxRelease();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_RemoveAllDebugStrings();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_RemoveDebugText();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_ShowDebug();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_ShowDebugForReticleTargetToggle();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_ShowDebugToggleSubCategory();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_ShowHUD();
	ENGINE_API class UClass* Z_Construct_UClass_AHUD_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AHUD();
	ENGINE_API class UClass* Z_Construct_UClass_ADebugCameraHUD_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ADebugCameraHUD();
	ENGINE_API class UClass* Z_Construct_UClass_ALogVisualizerHUD_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ALogVisualizerHUD();
	ENGINE_API class UClass* Z_Construct_UClass_AInfo_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AInfo();
	ENGINE_API class UClass* Z_Construct_UClass_AAtmosphericFog_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AAtmosphericFog();
	ENGINE_API class UFunction* Z_Construct_UFunction_AExponentialHeightFog_OnRep_bEnabled();
	ENGINE_API class UClass* Z_Construct_UClass_AExponentialHeightFog_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AExponentialHeightFog();
	ENGINE_API class UClass* Z_Construct_UClass_ANavigationObjectBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ANavigationObjectBase();
	ENGINE_API class UClass* Z_Construct_UClass_APlayerStart_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_APlayerStart();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FGameClassShortName();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_AbortMatch();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_CanSpectate();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_ChangeName();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_ChoosePlayerStart();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_EndMatch();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_FindPlayerStart();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_GetDefaultPawnClassForController();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_GetMatchState();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_GetNumPlayers();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_HasMatchEnded();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_HasMatchStarted();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_InitStartSpot();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_IsMatchInProgress();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_K2_FindPlayerStart();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_K2_OnChangeName();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_K2_OnLogout();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_K2_OnRestartPlayer();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_K2_OnSetMatchState();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_K2_OnSwapPlayerControllers();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_K2_PostLogin();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_MustSpectate();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_PlayerCanRestart();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_ReadyToEndMatch();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_ReadyToStartMatch();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_ResetLevel();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_RestartGame();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_ReturnToMainMenuHost();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_SetBandwidthLimit();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_ShouldReset();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_SpawnDefaultPawnFor();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_StartMatch();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_StartPlay();
	ENGINE_API class UClass* Z_Construct_UClass_AGameMode_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AGameMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EStandbyType();
	ENGINE_API class UClass* Z_Construct_UClass_AGameNetworkManager_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AGameNetworkManager();
	ENGINE_API class UClass* Z_Construct_UClass_AGameSession_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AGameSession();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameState_GetServerWorldTimeSeconds();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameState_OnRep_ElapsedTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameState_OnRep_GameModeClass();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameState_OnRep_MatchState();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameState_OnRep_ReplicatedWorldTimeSeconds();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameState_OnRep_SpectatorClass();
	ENGINE_API class UClass* Z_Construct_UClass_AGameState_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AGameState();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerState_OnRep_bIsInactive();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerState_OnRep_PlayerName();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerState_OnRep_Score();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerState_OnRep_UniqueId();
	ENGINE_API class UClass* Z_Construct_UClass_APlayerState_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_APlayerState();
	ENGINE_API class UFunction* Z_Construct_UFunction_ASkyLight_OnRep_bEnabled();
	ENGINE_API class UClass* Z_Construct_UClass_ASkyLight_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ASkyLight();
	ENGINE_API class UClass* Z_Construct_UClass_AWindDirectionalSource_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AWindDirectionalSource();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EVisibilityAggressiveness();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FHierarchicalSimplification();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNetViewer();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FLightmassWorldInfoSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FGameModePrefix();
	ENGINE_API class UFunction* Z_Construct_UFunction_AWorldSettings_OnRep_WorldGravityZ();
	ENGINE_API class UClass* Z_Construct_UClass_AWorldSettings_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AWorldSettings();
	ENGINE_API class UClass* Z_Construct_UClass_ALevelBounds_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ALevelBounds();
	ENGINE_API class UFunction* Z_Construct_UFunction_ALevelScriptActor_LevelReset();
	ENGINE_API class UFunction* Z_Construct_UFunction_ALevelScriptActor_RemoteEvent();
	ENGINE_API class UFunction* Z_Construct_UFunction_ALevelScriptActor_SetCinematicMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_ALevelScriptActor_WorldOriginLocationChanged();
	ENGINE_API class UClass* Z_Construct_UClass_ALevelScriptActor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ALevelScriptActor();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULightComponentBase_GetLightColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULightComponentBase_SetCastShadows();
	ENGINE_API class UClass* Z_Construct_UClass_ULightComponentBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ULightComponentBase();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULightComponent_SetAffectDynamicIndirectLighting();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULightComponent_SetAffectTranslucentLighting();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULightComponent_SetBloomScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULightComponent_SetBloomThreshold();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULightComponent_SetBloomTint();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULightComponent_SetEnableLightShaftBloom();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULightComponent_SetIESTexture();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULightComponent_SetIndirectLightingIntensity();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULightComponent_SetIntensity();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULightComponent_SetLightColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULightComponent_SetLightFunctionDisabledBrightness();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULightComponent_SetLightFunctionFadeDistance();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULightComponent_SetLightFunctionMaterial();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULightComponent_SetLightFunctionScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULightComponent_SetTemperature();
	ENGINE_API class UClass* Z_Construct_UClass_ULightComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ULightComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_ALight_GetBrightness();
	ENGINE_API class UFunction* Z_Construct_UFunction_ALight_GetLightColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_ALight_IsEnabled();
	ENGINE_API class UFunction* Z_Construct_UFunction_ALight_OnRep_bEnabled();
	ENGINE_API class UFunction* Z_Construct_UFunction_ALight_SetAffectTranslucentLighting();
	ENGINE_API class UFunction* Z_Construct_UFunction_ALight_SetBrightness();
	ENGINE_API class UFunction* Z_Construct_UFunction_ALight_SetCastShadows();
	ENGINE_API class UFunction* Z_Construct_UFunction_ALight_SetEnabled();
	ENGINE_API class UFunction* Z_Construct_UFunction_ALight_SetLightColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_ALight_SetLightFunctionFadeDistance();
	ENGINE_API class UFunction* Z_Construct_UFunction_ALight_SetLightFunctionMaterial();
	ENGINE_API class UFunction* Z_Construct_UFunction_ALight_SetLightFunctionScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_ALight_ToggleEnabled();
	ENGINE_API class UClass* Z_Construct_UClass_ALight_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ALight();
	ENGINE_API class UClass* Z_Construct_UClass_ADirectionalLight_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ADirectionalLight();
	ENGINE_API class UFunction* Z_Construct_UFunction_APointLight_SetLightFalloffExponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_APointLight_SetRadius();
	ENGINE_API class UClass* Z_Construct_UClass_APointLight_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_APointLight();
	ENGINE_API class UFunction* Z_Construct_UFunction_ASpotLight_SetInnerConeAngle();
	ENGINE_API class UFunction* Z_Construct_UFunction_ASpotLight_SetOuterConeAngle();
	ENGINE_API class UClass* Z_Construct_UClass_ASpotLight_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ASpotLight();
	ENGINE_API class UClass* Z_Construct_UClass_AGeneratedMeshAreaLight_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AGeneratedMeshAreaLight();
	ENGINE_API class UClass* Z_Construct_UClass_ALODActor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ALODActor();
	ENGINE_API class UClass* Z_Construct_UClass_AMaterialInstanceActor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AMaterialInstanceActor();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_OnMatineeEvent__DelegateSignature();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FInterpGroupActorInfo();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCameraCutInfo();
	ENGINE_API class UFunction* Z_Construct_UFunction_AMatineeActor_ChangePlaybackDirection();
	ENGINE_API class UFunction* Z_Construct_UFunction_AMatineeActor_Pause();
	ENGINE_API class UFunction* Z_Construct_UFunction_AMatineeActor_Play();
	ENGINE_API class UFunction* Z_Construct_UFunction_AMatineeActor_Reverse();
	ENGINE_API class UFunction* Z_Construct_UFunction_AMatineeActor_SetLoopingState();
	ENGINE_API class UFunction* Z_Construct_UFunction_AMatineeActor_SetPosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_AMatineeActor_Stop();
	ENGINE_API class UClass* Z_Construct_UClass_AMatineeActor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AMatineeActor();
	ENGINE_API class UClass* Z_Construct_UClass_AMatineeActorCameraAnim_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AMatineeActorCameraAnim();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNavigationFilterFlags();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNavigationFilterArea();
	ENGINE_API class UClass* Z_Construct_UClass_UNavigationQueryFilter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavigationQueryFilter();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ERuntimeGenerationType();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSupportedAreaData();
	ENGINE_API class UClass* Z_Construct_UClass_ANavigationData_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ANavigationData();
	ENGINE_API class UClass* Z_Construct_UClass_AAbstractNavData_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AAbstractNavData();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNavGraphNode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNavGraphEdge();
	ENGINE_API class UClass* Z_Construct_UClass_ANavigationGraph_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ANavigationGraph();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ERecastPartitioning();
	ENGINE_API class UClass* Z_Construct_UClass_ARecastNavMesh_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ARecastNavMesh();
	ENGINE_API class UClass* Z_Construct_UClass_ANavigationGraphNode_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ANavigationGraphNode();
	ENGINE_API class UClass* Z_Construct_UClass_APlayerStartPIE_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_APlayerStartPIE();
	ENGINE_API class UClass* Z_Construct_UClass_UNavPathObserverInterface_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavPathObserverInterface();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ENavCostDisplay();
	ENGINE_API class UClass* Z_Construct_UClass_ANavigationTestingActor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ANavigationTestingActor();
	ENGINE_API class UClass* Z_Construct_UClass_UNavArea_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavArea();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ENavLinkDirection();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNavigationSegmentLink();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNavigationLink();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNavigationLinkBase();
	ENGINE_API class UClass* Z_Construct_UClass_UNavLinkDefinition_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavLinkDefinition();
	ENGINE_API class UClass* Z_Construct_UClass_UNavLinkHostInterface_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavLinkHostInterface();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_SmartLinkReachedSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UFunction_ANavLinkProxy_HasMovingAgents();
	ENGINE_API class UFunction* Z_Construct_UFunction_ANavLinkProxy_IsSmartLinkEnabled();
	ENGINE_API class UFunction* Z_Construct_UFunction_ANavLinkProxy_ReceiveSmartLinkReached();
	ENGINE_API class UFunction* Z_Construct_UFunction_ANavLinkProxy_ResumePathFollowing();
	ENGINE_API class UFunction* Z_Construct_UFunction_ANavLinkProxy_SetSmartLinkEnabled();
	ENGINE_API class UClass* Z_Construct_UClass_ANavLinkProxy_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ANavLinkProxy();
	ENGINE_API class UClass* Z_Construct_UClass_ANote_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ANote();
	ENGINE_API class UClass* Z_Construct_UClass_AParticleEventManager_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AParticleEventManager();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_AddControllerPitchInput();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_AddControllerRollInput();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_AddControllerYawInput();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_AddMovementInput();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_ConsumeMovementInputVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_DetachFromControllerPendingDestroy();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_GetBaseAimRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_GetController();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_GetControlRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_GetLastMovementInputVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_GetMovementBaseActor();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_GetMovementComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_GetNavAgentLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_GetPendingMovementInputVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_IsControlled();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_IsLocallyControlled();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_IsMoveInputIgnored();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_K2_GetMovementInputVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_LaunchPawn();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_OnRep_Controller();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_OnRep_PlayerState();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_PawnMakeNoise();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_ReceivePossessed();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_ReceiveUnpossessed();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_SetCanAffectNavigationGeneration();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_SpawnDefaultController();
	ENGINE_API class UClass* Z_Construct_UClass_APawn_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_APawn();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPreviewAssetAttachContainer();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPreviewAttachedObjectPair();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSmartNameContainer();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSmartNameMapping();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EBoneTranslationRetargetingMode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimSlotGroup();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRigConfiguration();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNameMapping();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBoneReductionSetting();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FReferencePose();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBoneNode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSkeletonToMeshLinkup();
	ENGINE_API class UClass* Z_Construct_UClass_USkeleton_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USkeleton();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTriMeshCollisionData();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTriIndices();
	ENGINE_API class UClass* Z_Construct_UClass_UInterface_CollisionDataProvider_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterface_CollisionDataProvider();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_SkeletalMeshOptimizationType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_SkeletalMeshOptimizationImportance();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSkeletalMaterial();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FClothingAssetData();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FClothPhysicsProperties();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMorphTargetMap();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSkeletalMeshLODInfo();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSkeletalMeshOptimizationSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBoneReference();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTriangleSortSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBoneMirrorExport();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBoneMirrorInfo();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMesh_FindSocket();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMesh_IsSectionUsingCloth();
	ENGINE_API class UClass* Z_Construct_UClass_USkeletalMesh_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USkeletalMesh();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAnimGroupRole();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ERootMotionMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ERootMotionRootLock();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimationGroupReference();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRootMotionMovementParams();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimGroupInstance();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimTickRecord();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimExtractContext();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBlendFilter();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBlendSampleData();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimationAsset_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimationAsset();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_CharacterReachedApexSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_CharacterMovementUpdatedSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_MovementModeChangedSignature__DelegateSignature();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBasedMovementInfo();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSimulatedRootMotionReplicatedMove();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRepRootMotionMontage();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_CanJump();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_CanJumpInternal();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_ClientCheatFly();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_ClientCheatGhost();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_ClientCheatWalk();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_Crouch();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_GetCurrentMontage();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_IsJumpProvidingForce();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_IsPlayingNetworkedRootMotionMontage();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_IsPlayingRootMotion();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_Jump();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_K2_OnEndCrouch();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_K2_OnMovementModeChanged();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_K2_OnStartCrouch();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_K2_UpdateCustomMovement();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_LaunchCharacter();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_OnJumped();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_OnLanded();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_OnLaunched();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_OnRep_IsCrouched();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_OnRep_ReplicatedBasedMovement();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_OnRep_RootMotion();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_OnWalkingOffLedge();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_PlayAnimMontage();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_SetReplicateMovement();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_StopAnimMontage();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_StopJumping();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_UnCrouch();
	ENGINE_API class UClass* Z_Construct_UClass_ACharacter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ACharacter();
	ENGINE_API class UFunction* Z_Construct_UFunction_ADefaultPawn_LookUp();
	ENGINE_API class UFunction* Z_Construct_UFunction_ADefaultPawn_LookUpAtRate();
	ENGINE_API class UFunction* Z_Construct_UFunction_ADefaultPawn_MoveForward();
	ENGINE_API class UFunction* Z_Construct_UFunction_ADefaultPawn_MoveRight();
	ENGINE_API class UFunction* Z_Construct_UFunction_ADefaultPawn_MoveUp_World();
	ENGINE_API class UFunction* Z_Construct_UFunction_ADefaultPawn_Turn();
	ENGINE_API class UFunction* Z_Construct_UFunction_ADefaultPawn_TurnAtRate();
	ENGINE_API class UClass* Z_Construct_UClass_ADefaultPawn_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ADefaultPawn();
	ENGINE_API class UClass* Z_Construct_UClass_ASpectatorPawn_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ASpectatorPawn();
	ENGINE_API class UClass* Z_Construct_UClass_AWheeledVehicle_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AWheeledVehicle();
	ENGINE_API class UClass* Z_Construct_UClass_AReflectionCapture_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AReflectionCapture();
	ENGINE_API class UClass* Z_Construct_UClass_ABoxReflectionCapture_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ABoxReflectionCapture();
	ENGINE_API class UClass* Z_Construct_UClass_APlaneReflectionCapture_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_APlaneReflectionCapture();
	ENGINE_API class UClass* Z_Construct_UClass_ASphereReflectionCapture_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ASphereReflectionCapture();
	ENGINE_API class UClass* Z_Construct_UClass_ARigidBodyBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ARigidBodyBase();
	ENGINE_API class UClass* Z_Construct_UClass_APhysicsConstraintActor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_APhysicsConstraintActor();
	ENGINE_API class UClass* Z_Construct_UClass_APhysicsThruster_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_APhysicsThruster();
	ENGINE_API class UFunction* Z_Construct_UFunction_ARadialForceActor_DisableForce();
	ENGINE_API class UFunction* Z_Construct_UFunction_ARadialForceActor_EnableForce();
	ENGINE_API class UFunction* Z_Construct_UFunction_ARadialForceActor_FireImpulse();
	ENGINE_API class UFunction* Z_Construct_UFunction_ARadialForceActor_ToggleForce();
	ENGINE_API class UClass* Z_Construct_UClass_ARadialForceActor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ARadialForceActor();
	ENGINE_API class UClass* Z_Construct_UClass_ASceneCapture_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ASceneCapture();
	ENGINE_API class UFunction* Z_Construct_UFunction_ASceneCapture2D_OnInterpToggle();
	ENGINE_API class UClass* Z_Construct_UClass_ASceneCapture2D_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ASceneCapture2D();
	ENGINE_API class UFunction* Z_Construct_UFunction_ASceneCaptureCube_OnInterpToggle();
	ENGINE_API class UClass* Z_Construct_UClass_ASceneCaptureCube_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ASceneCaptureCube();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EDOFMode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBodyInstance();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCollisionResponse();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ComponentEndTouchOverSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ComponentBeginTouchOverSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ComponentOnInputTouchEndSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ComponentOnInputTouchBeginSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ComponentOnReleasedSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ComponentOnClickedSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ComponentEndCursorOverSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ComponentBeginCursorOverSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ComponentSleepSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ComponentWakeSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ComponentEndOverlapSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ComponentBeginOverlapSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ComponentHitSignature__DelegateSignature();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EHasCustomNavigableGeometry();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ECanBeCharacterBase();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSpriteCategoryInfo();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_AddAngularImpulse();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_AddForce();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_AddForceAtLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_AddImpulse();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_AddImpulseAtLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_AddRadialForce();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_AddRadialImpulse();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_AddTorque();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_CanCharacterStepUp();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_ClearMoveIgnoreActors();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_CopyArrayOfMoveIgnoreActors();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_CreateAndSetMaterialInstanceDynamic();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_CreateAndSetMaterialInstanceDynamicFromMaterial();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_CreateDynamicMaterialInstance();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_GetAngularDamping();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_GetCenterOfMass();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_GetClosestPointOnCollision();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_GetCollisionObjectType();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_GetCollisionProfileName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_GetCollisionResponseToChannel();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_GetInertiaTensor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_GetLinearDamping();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_GetMass();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_GetMassScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_GetMaterial();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_GetNumMaterials();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_GetOverlapInfos();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_GetOverlappingActors();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_GetOverlappingComponents();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_GetPhysicsAngularVelocity();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_GetPhysicsLinearVelocity();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_GetPhysicsLinearVelocityAtPoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_GetWalkableSlopeOverride();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_IgnoreActorWhenMoving();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_IsGravityEnabled();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_IsOverlappingActor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_IsOverlappingComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_K2_LineTraceComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_PutRigidBodyToSleep();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_ScaleByMomentOfInertia();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetAllMassScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetAllPhysicsLinearVelocity();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetAngularDamping();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetCastShadow();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetCenterOfMass();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetCollisionEnabled();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetCollisionObjectType();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetCollisionProfileName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetCollisionResponseToAllChannels();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetCollisionResponseToChannel();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetConstraintMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetCullDistance();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetCustomDepthStencilValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetEnableGravity();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetLinearDamping();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetLockedAxis();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetMassOverrideInKg();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetMassScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetMaterial();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetNotifyRigidBodyCollision();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetOnlyOwnerSee();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetOwnerNoSee();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetPhysicsAngularVelocity();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetPhysicsLinearVelocity();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetPhysicsMaxAngularVelocity();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetPhysMaterialOverride();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetRenderCustomDepth();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetRenderInMainPass();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetSimulatePhysics();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetTranslucentSortPriority();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetWalkableSlopeOverride();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_WakeAllRigidBodies();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_WakeRigidBody();
	ENGINE_API class UClass* Z_Construct_UClass_UPrimitiveComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPrimitiveComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMeshComponent_GetMaterials();
	ENGINE_API class UClass* Z_Construct_UClass_UMeshComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMeshComponent();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EBoneSpaces();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMeshComponentUpdateFlag();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EPhysBodyOp();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EBoneVisibilityStatus();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSkelMeshComponentLODInfo();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FActiveVertexAnim();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkinnedMeshComponent_BoneIsChildOf();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkinnedMeshComponent_GetBoneIndex();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkinnedMeshComponent_GetBoneName();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkinnedMeshComponent_GetParentBone();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkinnedMeshComponent_GetSocketBoneName();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkinnedMeshComponent_HideBoneByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkinnedMeshComponent_IsBoneHiddenByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkinnedMeshComponent_SetMasterPoseComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkinnedMeshComponent_SetPhysicsAsset();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkinnedMeshComponent_SetSkeletalMesh();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkinnedMeshComponent_TransformFromBoneSpace();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkinnedMeshComponent_TransformToBoneSpace();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkinnedMeshComponent_UnHideBoneByName();
	ENGINE_API class UClass* Z_Construct_UClass_USkinnedMeshComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USkinnedMeshComponent();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAngularDriveMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EConstraintFrame();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ELinearConstraintMotion();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FConstraintInstance();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ConstraintBrokenSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_BreakConstraint();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_GetConstraintForce();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_GetCurrentSwing1();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_GetCurrentSwing2();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_GetCurrentTwist();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetAngularDriveParams();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetAngularOrientationDrive();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetAngularOrientationTarget();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetAngularSwing1Limit();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetAngularSwing2Limit();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetAngularTwistLimit();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetAngularVelocityDrive();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetAngularVelocityTarget();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetConstrainedComponents();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetConstraintReferenceFrame();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetConstraintReferenceOrientation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetConstraintReferencePosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetDisableCollision();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetLinearDriveParams();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetLinearPositionDrive();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetLinearPositionTarget();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetLinearVelocityDrive();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetLinearVelocityTarget();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetLinearXLimit();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetLinearYLimit();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetLinearZLimit();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicsConstraintComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicsConstraintComponent();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAnimLinkMethod();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimLinkableElement();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ECurveBlendOption();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAdditiveAnimationType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ENotifyFilterType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMontageNotifyTickType();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNotifyTrack();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNotifyEvent();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRawCurveTracks();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTransformCurve();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FVectorCurve();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FFloatCurve();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimCurveBase();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAnimationMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EKinematicBonesUpdateToPhysics();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSkeletalMeshComponentPreClothTickFunction();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSingleAnimationPlayData();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_AccumulateAllBodiesBelowPhysicsBlendWeight();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_BindClothToMasterPoseComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_ClearMorphTargets();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_ForceClothNextUpdateTeleport();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_ForceClothNextUpdateTeleportAndReset();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_GetAnimationMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_GetAnimInstance();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_GetClothMaxDistanceScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_GetMorphTarget();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_GetPlayRate();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_GetPosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_IsPlaying();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_Play();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_PlayAnimation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_ResetAllBodiesSimulatePhysics();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_ResetClothTeleportMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_SetAllBodiesBelowPhysicsBlendWeight();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_SetAllBodiesBelowSimulatePhysics();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_SetAllBodiesPhysicsBlendWeight();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_SetAllBodiesSimulatePhysics();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_SetAllMotorsAngularDriveParams();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_SetAllMotorsAngularPositionDrive();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_SetAllMotorsAngularVelocityDrive();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_SetAnimation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_SetAnimationMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_SetAnimInstanceClass();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_SetClothMaxDistanceScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_SetEnablePhysicsBlending();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_SetMorphTarget();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_SetPhysicsBlendWeight();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_SetPlayRate();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_SetPosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_Stop();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_UnbindClothFromMasterPoseComponent();
	ENGINE_API class UClass* Z_Construct_UClass_USkeletalMeshComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USkeletalMeshComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UMatineeAnimInterface_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMatineeAnimInterface();
	ENGINE_API class UFunction* Z_Construct_UFunction_ASkeletalMeshActor_OnRep_ReplicatedMaterial0();
	ENGINE_API class UFunction* Z_Construct_UFunction_ASkeletalMeshActor_OnRep_ReplicatedMaterial1();
	ENGINE_API class UFunction* Z_Construct_UFunction_ASkeletalMeshActor_OnRep_ReplicatedMesh();
	ENGINE_API class UFunction* Z_Construct_UFunction_ASkeletalMeshActor_OnRep_ReplicatedPhysAsset();
	ENGINE_API class UClass* Z_Construct_UClass_ASkeletalMeshActor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ASkeletalMeshActor();
	ENGINE_API class UClass* Z_Construct_UClass_ASplineMeshActor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ASplineMeshActor();
	ENGINE_API class UClass* Z_Construct_UClass_AStaticMeshActor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AStaticMeshActor();
	ENGINE_API class UClass* Z_Construct_UClass_ATargetPoint_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ATargetPoint();
	ENGINE_API class UClass* Z_Construct_UClass_ATextRenderActor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ATextRenderActor();
	ENGINE_API class UClass* Z_Construct_UClass_ATriggerBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ATriggerBase();
	ENGINE_API class UClass* Z_Construct_UClass_ATriggerBox_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ATriggerBox();
	ENGINE_API class UClass* Z_Construct_UClass_ATriggerCapsule_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ATriggerCapsule();
	ENGINE_API class UClass* Z_Construct_UClass_ATriggerSphere_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ATriggerSphere();
	ENGINE_API class UClass* Z_Construct_UClass_AVectorFieldVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AVectorFieldVolume();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_UApplicationLifecycleComponent_ApplicationLifetimeDelegate__DelegateSignature();
	ENGINE_API class UClass* Z_Construct_UClass_UApplicationLifecycleComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UApplicationLifecycleComponent();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EPlaneConstraintAxisSetting();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_ConstrainDirectionToPlane();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_ConstrainLocationToPlane();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_ConstrainNormalToPlane();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_GetGravityZ();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_GetMaxSpeed();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_GetPhysicsVolume();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_GetPlaneConstraintAxisSetting();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_GetPlaneConstraintNormal();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_GetPlaneConstraintOrigin();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_IsExceedingMaxSpeed();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_K2_GetMaxSpeedModifier();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_K2_GetModifiedMaxSpeed();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_K2_MoveUpdatedComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_PhysicsVolumeChanged();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_SetPlaneConstraintAxisSetting();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_SetPlaneConstraintEnabled();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_SetPlaneConstraintFromVectors();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_SetPlaneConstraintNormal();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_SetPlaneConstraintOrigin();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_SetUpdatedComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_SnapUpdatedComponentToPlane();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_StopMovementImmediately();
	ENGINE_API class UClass* Z_Construct_UClass_UMovementComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMovementComponent();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESplineCoordinateSpace();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESplinePointType();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_AddSplineLocalPoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_AddSplinePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_AddSplineWorldPoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_ClearSplinePoints();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetDefaultUpVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetDirectionAtDistanceAlongSpline();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetDirectionAtSplinePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetDirectionAtTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetDistanceAlongSplineAtSplinePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetInputKeyAtDistanceAlongSpline();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetLocalLocationAndTangentAtSplinePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetLocationAndTangentAtSplinePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetLocationAtDistanceAlongSpline();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetLocationAtSplinePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetLocationAtTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetNumberOfSplinePoints();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetQuaternionAtDistanceAlongSpline();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetQuaternionAtSplinePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetQuaternionAtTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetRightVectorAtDistanceAlongSpline();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetRightVectorAtSplinePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetRightVectorAtTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetRollAtDistanceAlongSpline();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetRollAtSplinePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetRollAtTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetRotationAtDistanceAlongSpline();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetRotationAtSplinePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetRotationAtTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetScaleAtDistanceAlongSpline();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetScaleAtSplinePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetScaleAtTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetSplineLength();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetSplinePointType();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetTangentAtDistanceAlongSpline();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetTangentAtSplinePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetTangentAtTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetTransformAtDistanceAlongSpline();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetTransformAtSplinePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetTransformAtTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetUpVectorAtDistanceAlongSpline();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetUpVectorAtSplinePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetUpVectorAtTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetWorldDirectionAtDistanceAlongSpline();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetWorldDirectionAtTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetWorldLocationAtDistanceAlongSpline();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetWorldLocationAtSplinePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetWorldLocationAtTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetWorldRotationAtDistanceAlongSpline();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetWorldRotationAtTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetWorldTangentAtDistanceAlongSpline();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_IsClosedLoop();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_SetClosedLoop();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_SetDefaultUpVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_SetLocationAtSplinePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_SetSelectedSplineSegmentColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_SetSplineLocalPoints();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_SetSplinePoints();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_SetSplinePointType();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_SetSplineWorldPoints();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_SetTangentAtSplinePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_SetUnselectedSplineSegmentColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_SetWorldLocationAtSplinePoint();
	ENGINE_API class UClass* Z_Construct_UClass_USplineComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USplineComponent();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_UInterpToMovementComponent_OnInterpToResetDelegate__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_UInterpToMovementComponent_OnInterpToWaitEndDelegate__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_UInterpToMovementComponent_OnInterpToWaitBeginDelegate__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_UInterpToMovementComponent_OnInterpToStopDelegate__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_UInterpToMovementComponent_OnInterpToReverseDelegate__DelegateSignature();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EInterpToBehaviourType();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FInterpControlPoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInterpToMovementComponent_StopSimulating();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpToMovementComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpToMovementComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UBlueprintFunctionLibrary_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBlueprintFunctionLibrary();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_OnNavDataGenerigEvent__DelegateSignature();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_FNavigationSystemRunMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_FindPathToActorSynchronously();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_FindPathToLocationSynchronously();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_GetNavigationSystem();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_GetPathCost();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_GetPathLength();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_GetRandomPoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_GetRandomPointInNavigableRadius();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_GetRandomPointInRadius();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_GetRandomReachablePointInRadius();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_IsNavigationBeingBuilt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_NavigationRaycast();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_OnNavigationBoundsUpdated();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_ProjectPointToNavigation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_RegisterNavigationInvoker();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_ResetMaxSimultaneousTileGenerationJobsCount();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_SetGeometryGatheringMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_SetMaxSimultaneousTileGenerationJobsCount();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_SimpleMoveToActor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_SimpleMoveToLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_UnregisterNavigationInvoker();
	ENGINE_API class UClass* Z_Construct_UClass_UNavigationSystem_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavigationSystem();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavMovementComponent_IsCrouching();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavMovementComponent_IsFalling();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavMovementComponent_IsFlying();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavMovementComponent_IsMovingOnGround();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavMovementComponent_IsSwimming();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavMovementComponent_StopActiveMovement();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavMovementComponent_StopMovementKeepPathing();
	ENGINE_API class UClass* Z_Construct_UClass_UNavMovementComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavMovementComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPawnMovementComponent_AddInputVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPawnMovementComponent_ConsumeInputVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPawnMovementComponent_GetLastInputVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPawnMovementComponent_GetPawnOwner();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPawnMovementComponent_GetPendingInputVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPawnMovementComponent_IsMoveInputIgnored();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPawnMovementComponent_K2_GetInputVector();
	ENGINE_API class UClass* Z_Construct_UClass_UPawnMovementComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPawnMovementComponent();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNavAvoidanceMask();
	ENGINE_API class UClass* Z_Construct_UClass_URVOAvoidanceInterface_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_URVOAvoidanceInterface();
	ENGINE_API class UClass* Z_Construct_UClass_UNetworkPredictionInterface_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNetworkPredictionInterface();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCharacterMovementComponentPreClothTickFunction();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FFindFloorResult();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_AddForce();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_AddImpulse();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_CalcVelocity();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_CapsuleTouched();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_ClientAckGoodMove();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_ClientAdjustPosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_ClientAdjustRootMotionPosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_ClientVeryShortAdjustPosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_DisableMovement();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_GetAnalogInputModifier();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_GetCharacterOwner();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_GetCurrentAcceleration();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_GetImpartedMovementBaseVelocity();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_GetMaxAcceleration();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_GetMaxJumpHeight();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_GetMovementBase();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_GetPerchRadiusThreshold();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_GetValidPerchRadius();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_IsWalkable();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_IsWalking();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_K2_GetModifiedMaxAcceleration();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_K2_GetWalkableFloorAngle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_K2_GetWalkableFloorZ();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_ServerMove();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_ServerMoveDual();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_ServerMoveDualHybridRootMotion();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_ServerMoveOld();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_SetAvoidanceEnabled();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_SetAvoidanceGroup();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_SetGroupsToAvoid();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_SetGroupsToIgnore();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_SetMovementMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_SetWalkableFloorAngle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_SetWalkableFloorZ();
	ENGINE_API class UClass* Z_Construct_UClass_UCharacterMovementComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCharacterMovementComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UFloatingPawnMovement_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UFloatingPawnMovement();
	ENGINE_API class UClass* Z_Construct_UClass_USpectatorPawnMovement_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USpectatorPawnMovement();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FVehicleInputRate();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FReplicatedVehicleState();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FWheelSetup();
	ENGINE_API class UFunction* Z_Construct_UFunction_UWheeledVehicleMovementComponent_GetCurrentGear();
	ENGINE_API class UFunction* Z_Construct_UFunction_UWheeledVehicleMovementComponent_GetEngineMaxRotationSpeed();
	ENGINE_API class UFunction* Z_Construct_UFunction_UWheeledVehicleMovementComponent_GetEngineRotationSpeed();
	ENGINE_API class UFunction* Z_Construct_UFunction_UWheeledVehicleMovementComponent_GetForwardSpeed();
	ENGINE_API class UFunction* Z_Construct_UFunction_UWheeledVehicleMovementComponent_GetTargetGear();
	ENGINE_API class UFunction* Z_Construct_UFunction_UWheeledVehicleMovementComponent_GetUseAutoGears();
	ENGINE_API class UFunction* Z_Construct_UFunction_UWheeledVehicleMovementComponent_ServerUpdateState();
	ENGINE_API class UFunction* Z_Construct_UFunction_UWheeledVehicleMovementComponent_SetAvoidanceEnabled();
	ENGINE_API class UFunction* Z_Construct_UFunction_UWheeledVehicleMovementComponent_SetAvoidanceGroup();
	ENGINE_API class UFunction* Z_Construct_UFunction_UWheeledVehicleMovementComponent_SetGearDown();
	ENGINE_API class UFunction* Z_Construct_UFunction_UWheeledVehicleMovementComponent_SetGearUp();
	ENGINE_API class UFunction* Z_Construct_UFunction_UWheeledVehicleMovementComponent_SetGroupsToAvoid();
	ENGINE_API class UFunction* Z_Construct_UFunction_UWheeledVehicleMovementComponent_SetGroupsToIgnore();
	ENGINE_API class UFunction* Z_Construct_UFunction_UWheeledVehicleMovementComponent_SetHandbrakeInput();
	ENGINE_API class UFunction* Z_Construct_UFunction_UWheeledVehicleMovementComponent_SetSteeringInput();
	ENGINE_API class UFunction* Z_Construct_UFunction_UWheeledVehicleMovementComponent_SetTargetGear();
	ENGINE_API class UFunction* Z_Construct_UFunction_UWheeledVehicleMovementComponent_SetThrottleInput();
	ENGINE_API class UFunction* Z_Construct_UFunction_UWheeledVehicleMovementComponent_SetUseAutoGears();
	ENGINE_API class UClass* Z_Construct_UClass_UWheeledVehicleMovementComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UWheeledVehicleMovementComponent();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EVehicleDifferential4W();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FVehicleTransmissionData();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FVehicleGearData();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FVehicleEngineData();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FVehicleDifferential4WData();
	ENGINE_API class UClass* Z_Construct_UClass_UWheeledVehicleMovementComponent4W_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UWheeledVehicleMovementComponent4W();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_UProjectileMovementComponent_OnProjectileStopDelegate__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_UProjectileMovementComponent_OnProjectileBounceDelegate__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UFunction_UProjectileMovementComponent_LimitVelocity();
	ENGINE_API class UFunction* Z_Construct_UFunction_UProjectileMovementComponent_SetVelocityInLocalSpace();
	ENGINE_API class UFunction* Z_Construct_UFunction_UProjectileMovementComponent_StopSimulating();
	ENGINE_API class UClass* Z_Construct_UClass_UProjectileMovementComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UProjectileMovementComponent();
	ENGINE_API class UClass* Z_Construct_UClass_URotatingMovementComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_URotatingMovementComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UNavigationInvokerComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavigationInvokerComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavRelevantComponent_SetNavigationRelevancy();
	ENGINE_API class UClass* Z_Construct_UClass_UNavRelevantComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavRelevantComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UNavLinkCustomInterface_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavLinkCustomInterface();
	ENGINE_API class UClass* Z_Construct_UClass_UNavLinkCustomComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavLinkCustomComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UNavModifierComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavModifierComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPawnNoiseEmitterComponent_MakeNoise();
	ENGINE_API class UClass* Z_Construct_UClass_UPawnNoiseEmitterComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPawnNoiseEmitterComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsHandleComponent_GetTargetLocationAndRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsHandleComponent_GrabComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsHandleComponent_ReleaseComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsHandleComponent_SetAngularDamping();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsHandleComponent_SetAngularStiffness();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsHandleComponent_SetInterpolationSpeed();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsHandleComponent_SetLinearDamping();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsHandleComponent_SetLinearStiffness();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsHandleComponent_SetTargetLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsHandleComponent_SetTargetLocationAndRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsHandleComponent_SetTargetRotation();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicsHandleComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicsHandleComponent();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_UPlatformEventsComponent_PlatformEventDelegate__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPlatformEventsComponent_IsInLaptopMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPlatformEventsComponent_IsInTabletMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPlatformEventsComponent_SupportsConvertibleLaptops();
	ENGINE_API class UClass* Z_Construct_UClass_UPlatformEventsComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPlatformEventsComponent();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAtmospherePrecomputeParameters();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAtmosphericFogComponent_DisableGroundScattering();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAtmosphericFogComponent_DisableSunDisk();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAtmosphericFogComponent_SetAltitudeScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAtmosphericFogComponent_SetDefaultBrightness();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAtmosphericFogComponent_SetDefaultLightColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAtmosphericFogComponent_SetDensityMultiplier();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAtmosphericFogComponent_SetDensityOffset();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAtmosphericFogComponent_SetDistanceOffset();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAtmosphericFogComponent_SetDistanceScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAtmosphericFogComponent_SetFogMultiplier();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAtmosphericFogComponent_SetPrecomputeParams();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAtmosphericFogComponent_SetStartDistance();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAtmosphericFogComponent_SetSunMultiplier();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAtmosphericFogComponent_StartPrecompute();
	ENGINE_API class UClass* Z_Construct_UClass_UAtmosphericFogComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAtmosphericFogComponent();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESoundSpatializationAlgorithm();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAttenuationShape();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESoundDistanceCalc();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESoundDistanceModel();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAttenuationSettings();
	ENGINE_API class UClass* Z_Construct_UClass_USoundAttenuation_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundAttenuation();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_OnQueueSubtitles__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_OnAudioFinished__DelegateSignature();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAudioComponentParam();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAudioComponent_AdjustAttenuation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAudioComponent_AdjustVolume();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAudioComponent_BP_GetAttenuationSettingsToApply();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAudioComponent_FadeIn();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAudioComponent_FadeOut();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAudioComponent_IsPlaying();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAudioComponent_Play();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAudioComponent_SetBoolParameter();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAudioComponent_SetFloatParameter();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAudioComponent_SetIntParameter();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAudioComponent_SetPitchMultiplier();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAudioComponent_SetSound();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAudioComponent_SetUISound();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAudioComponent_SetVolumeMultiplier();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAudioComponent_SetWaveParameter();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAudioComponent_Stop();
	ENGINE_API class UClass* Z_Construct_UClass_UAudioComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAudioComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCameraComponent_AddOrUpdateBlendable();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCameraComponent_GetCameraView();
	ENGINE_API class UClass* Z_Construct_UClass_UCameraComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCameraComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UChildActorComponent_SetChildActorClass();
	ENGINE_API class UClass* Z_Construct_UClass_UChildActorComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UChildActorComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDecalComponent_CreateDynamicMaterialInstance();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDecalComponent_GetDecalMaterial();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDecalComponent_SetDecalMaterial();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDecalComponent_SetSortOrder();
	ENGINE_API class UClass* Z_Construct_UClass_UDecalComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDecalComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UExponentialHeightFogComponent_SetDirectionalInscatteringColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UExponentialHeightFogComponent_SetDirectionalInscatteringExponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UExponentialHeightFogComponent_SetDirectionalInscatteringStartDistance();
	ENGINE_API class UFunction* Z_Construct_UFunction_UExponentialHeightFogComponent_SetFogDensity();
	ENGINE_API class UFunction* Z_Construct_UFunction_UExponentialHeightFogComponent_SetFogHeightFalloff();
	ENGINE_API class UFunction* Z_Construct_UFunction_UExponentialHeightFogComponent_SetFogInscatteringColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UExponentialHeightFogComponent_SetFogMaxOpacity();
	ENGINE_API class UFunction* Z_Construct_UFunction_UExponentialHeightFogComponent_SetStartDistance();
	ENGINE_API class UClass* Z_Construct_UClass_UExponentialHeightFogComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UExponentialHeightFogComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDirectionalLightComponent_SetCascadeDistributionExponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDirectionalLightComponent_SetCascadeTransitionFraction();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDirectionalLightComponent_SetDynamicShadowCascades();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDirectionalLightComponent_SetDynamicShadowDistanceMovableLight();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDirectionalLightComponent_SetDynamicShadowDistanceStationaryLight();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDirectionalLightComponent_SetEnableLightShaftOcclusion();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDirectionalLightComponent_SetLightShaftOverrideDirection();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDirectionalLightComponent_SetOcclusionMaskDarkness();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDirectionalLightComponent_SetShadowDistanceFadeoutFraction();
	ENGINE_API class UClass* Z_Construct_UClass_UDirectionalLightComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDirectionalLightComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPointLightComponent_SetAttenuationRadius();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPointLightComponent_SetLightFalloffExponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPointLightComponent_SetSourceLength();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPointLightComponent_SetSourceRadius();
	ENGINE_API class UClass* Z_Construct_UClass_UPointLightComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPointLightComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_USpotLightComponent_SetInnerConeAngle();
	ENGINE_API class UFunction* Z_Construct_UFunction_USpotLightComponent_SetOuterConeAngle();
	ENGINE_API class UClass* Z_Construct_UClass_USpotLightComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USpotLightComponent();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESkyLightSourceType();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkyLightComponent_RecaptureSky();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkyLightComponent_SetCubemap();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkyLightComponent_SetCubemapBlend();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkyLightComponent_SetIndirectLightingIntensity();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkyLightComponent_SetIntensity();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkyLightComponent_SetLightColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkyLightComponent_SetMinOcclusion();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkyLightComponent_SetOcclusionTint();
	ENGINE_API class UClass* Z_Construct_UClass_USkyLightComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USkyLightComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UNavigationGraphNodeComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavigationGraphNodeComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsSpringComponent_GetNormalizedCompressionScalar();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsSpringComponent_GetSpringCurrentEndPoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsSpringComponent_GetSpringDirection();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsSpringComponent_GetSpringRestingPoint();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicsSpringComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicsSpringComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicsThrusterComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicsThrusterComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPostProcessComponent_AddOrUpdateBlendable();
	ENGINE_API class UClass* Z_Construct_UClass_UPostProcessComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPostProcessComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UArrowComponent_SetArrowColor_DEPRECATED();
	ENGINE_API class UFunction* Z_Construct_UFunction_UArrowComponent_SetArrowColor_New();
	ENGINE_API class UClass* Z_Construct_UClass_UArrowComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UArrowComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UBillboardComponent_SetSprite();
	ENGINE_API class UFunction* Z_Construct_UFunction_UBillboardComponent_SetSpriteAndUV();
	ENGINE_API class UFunction* Z_Construct_UFunction_UBillboardComponent_SetUV();
	ENGINE_API class UClass* Z_Construct_UClass_UBillboardComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBillboardComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UBrushComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBrushComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UDrawFrustumComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDrawFrustumComponent();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBatchedPoint();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBatchedLine();
	ENGINE_API class UClass* Z_Construct_UClass_ULineBatchComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ULineBatchComponent();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMaterialSpriteElement();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMaterialBillboardComponent_AddElement();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialBillboardComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialBillboardComponent();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ComponentFractureSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDestructibleComponent_ApplyDamage();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDestructibleComponent_ApplyRadiusDamage();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDestructibleComponent_GetDestructibleMesh();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDestructibleComponent_SetDestructibleMesh();
	ENGINE_API class UClass* Z_Construct_UClass_UDestructibleComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDestructibleComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPoseableMeshComponent_GetBoneLocationByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPoseableMeshComponent_GetBoneRotationByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPoseableMeshComponent_GetBoneScaleByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPoseableMeshComponent_GetBoneTransformByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPoseableMeshComponent_ResetBoneTransformByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPoseableMeshComponent_SetBoneLocationByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPoseableMeshComponent_SetBoneRotationByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPoseableMeshComponent_SetBoneScaleByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPoseableMeshComponent_SetBoneTransformByName();
	ENGINE_API class UClass* Z_Construct_UClass_UPoseableMeshComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPoseableMeshComponent();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FStaticMeshComponentLODInfo();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPaintedVertex();
	ENGINE_API class UFunction* Z_Construct_UFunction_UStaticMeshComponent_GetLocalBounds();
	ENGINE_API class UFunction* Z_Construct_UFunction_UStaticMeshComponent_OnRep_StaticMesh();
	ENGINE_API class UFunction* Z_Construct_UFunction_UStaticMeshComponent_SetForcedLodModel();
	ENGINE_API class UFunction* Z_Construct_UFunction_UStaticMeshComponent_SetStaticMesh();
	ENGINE_API class UClass* Z_Construct_UClass_UStaticMeshComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UStaticMeshComponent();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FInstancedStaticMeshMappingInfo();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FInstancedStaticMeshInstanceData();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInstancedStaticMeshComponent_AddInstance();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInstancedStaticMeshComponent_AddInstanceWorldSpace();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInstancedStaticMeshComponent_ClearInstances();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInstancedStaticMeshComponent_GetInstanceCount();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInstancedStaticMeshComponent_GetInstancesOverlappingSphere();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInstancedStaticMeshComponent_GetInstanceTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInstancedStaticMeshComponent_RemoveInstance();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInstancedStaticMeshComponent_SetCullDistances();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInstancedStaticMeshComponent_UpdateInstanceTransform();
	ENGINE_API class UClass* Z_Construct_UClass_UInstancedStaticMeshComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInstancedStaticMeshComponent();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FClusterNode();
	ENGINE_API class UFunction* Z_Construct_UFunction_UHierarchicalInstancedStaticMeshComponent_RemoveInstances();
	ENGINE_API class UClass* Z_Construct_UClass_UHierarchicalInstancedStaticMeshComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UHierarchicalInstancedStaticMeshComponent();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESplineMeshAxis();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSplineMeshParams();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_GetBoundaryMax();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_GetBoundaryMin();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_GetEndOffset();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_GetEndPosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_GetEndRoll();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_GetEndScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_GetEndTangent();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_GetForwardAxis();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_GetSplineUpDir();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_GetStartOffset();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_GetStartPosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_GetStartRoll();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_GetStartScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_GetStartTangent();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_SetBoundaryMax();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_SetBoundaryMin();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_SetEndOffset();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_SetEndPosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_SetEndRoll();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_SetEndScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_SetEndTangent();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_SetForwardAxis();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_SetSplineUpDir();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_SetStartAndEnd();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_SetStartOffset();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_SetStartPosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_SetStartRoll();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_SetStartScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_SetStartTangent();
	ENGINE_API class UClass* Z_Construct_UClass_USplineMeshComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USplineMeshComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UModelComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UModelComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UNavLinkRenderingComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavLinkRenderingComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UNavMeshRenderingComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavMeshRenderingComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UNavTestRenderingComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavTestRenderingComponent();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMaterialUsage();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FLightmassMaterialInterfaceSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMaterialRelevance();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMaterialInterface_GetBaseMaterial();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMaterialInterface_GetPhysicalMaterial();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialInterface_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialInterface();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EParticleSystemOcclusionBoundsMethod();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ParticleSystemLODMethod();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EParticleSystemUpdateMode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNamedEmitterMaterial();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FLODSoloTrack();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FParticleSystemLOD();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystem_ContainsEmitterType();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleSystem_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleSystem();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_OnSystemFinished__DelegateSignature();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EParticleEventType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ParticleReplayState();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EParticleSysParamType();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FParticleSysParam();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_BeginTrails();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_CreateNamedDynamicMaterialInstance();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_EndTrails();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_GenerateParticleEvent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_GetNamedMaterial();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_GetNumActiveParticles();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_SetActorParameter();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_SetBeamEndPoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_SetBeamSourcePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_SetBeamSourceStrength();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_SetBeamSourceTangent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_SetBeamTargetPoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_SetBeamTargetStrength();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_SetBeamTargetTangent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_SetColorParameter();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_SetEmitterEnable();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_SetFloatParameter();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_SetMaterialParameter();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_SetTemplate();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_SetTrailSourceData();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_SetVectorParameter();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleSystemComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleSystemComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UShapeComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UShapeComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UBoxComponent_GetScaledBoxExtent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UBoxComponent_GetUnscaledBoxExtent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UBoxComponent_SetBoxExtent();
	ENGINE_API class UClass* Z_Construct_UClass_UBoxComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBoxComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCapsuleComponent_GetScaledCapsuleHalfHeight();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCapsuleComponent_GetScaledCapsuleRadius();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCapsuleComponent_GetScaledCapsuleSize();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCapsuleComponent_GetShapeScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCapsuleComponent_GetUnscaledCapsuleHalfHeight();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCapsuleComponent_GetUnscaledCapsuleRadius();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCapsuleComponent_GetUnscaledCapsuleSize();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCapsuleComponent_SetCapsuleHalfHeight();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCapsuleComponent_SetCapsuleRadius();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCapsuleComponent_SetCapsuleSize();
	ENGINE_API class UClass* Z_Construct_UClass_UCapsuleComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCapsuleComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_USphereComponent_GetScaledSphereRadius();
	ENGINE_API class UFunction* Z_Construct_UFunction_USphereComponent_GetShapeScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_USphereComponent_GetUnscaledSphereRadius();
	ENGINE_API class UFunction* Z_Construct_UFunction_USphereComponent_SetSphereRadius();
	ENGINE_API class UClass* Z_Construct_UClass_USphereComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USphereComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UDrawSphereComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDrawSphereComponent();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EVerticalTextAligment();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EHorizTextAligment();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTextRenderComponent_GetTextLocalSize();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTextRenderComponent_GetTextWorldSize();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTextRenderComponent_K2_SetText();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTextRenderComponent_SetFont();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTextRenderComponent_SetHorizontalAlignment();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTextRenderComponent_SetHorizSpacingAdjust();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTextRenderComponent_SetText();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTextRenderComponent_SetTextMaterial();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTextRenderComponent_SetTextRenderColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTextRenderComponent_SetWorldSize();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTextRenderComponent_SetXScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTextRenderComponent_SetYScale();
	ENGINE_API class UClass* Z_Construct_UClass_UTextRenderComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UTextRenderComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UVectorFieldComponent_SetIntensity();
	ENGINE_API class UClass* Z_Construct_UClass_UVectorFieldComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UVectorFieldComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_URadialForceComponent_AddObjectTypeToAffect();
	ENGINE_API class UFunction* Z_Construct_UFunction_URadialForceComponent_FireImpulse();
	ENGINE_API class UFunction* Z_Construct_UFunction_URadialForceComponent_RemoveObjectTypeToAffect();
	ENGINE_API class UClass* Z_Construct_UClass_URadialForceComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_URadialForceComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UReflectionCaptureComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UReflectionCaptureComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UBoxReflectionCaptureComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBoxReflectionCaptureComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UPlaneReflectionCaptureComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPlaneReflectionCaptureComponent();
	ENGINE_API class UClass* Z_Construct_UClass_USphereReflectionCaptureComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USphereReflectionCaptureComponent();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FEngineShowFlagsSetting();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneCaptureComponent_HideActorComponents();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneCaptureComponent_HideComponent();
	ENGINE_API class UClass* Z_Construct_UClass_USceneCaptureComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USceneCaptureComponent();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESceneCaptureSource();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneCaptureComponent2D_AddOrUpdateBlendable();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneCaptureComponent2D_UpdateContent();
	ENGINE_API class UClass* Z_Construct_UClass_USceneCaptureComponent2D_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USceneCaptureComponent2D();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneCaptureComponentCube_UpdateContent();
	ENGINE_API class UClass* Z_Construct_UClass_USceneCaptureComponentCube_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USceneCaptureComponentCube();
	ENGINE_API class UClass* Z_Construct_UClass_USpringArmComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USpringArmComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UWindDirectionalSourceComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UWindDirectionalSourceComponent();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_OnTimelineLinearColor__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_OnTimelineVector__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_OnTimelineFloat__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_OnTimelineEvent__DelegateSignature();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETimelineDirection();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETimelineLengthMode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTimeline();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTimelineLinearColorTrack();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTimelineFloatTrack();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTimelineVectorTrack();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTimelineEventEntry();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTimelineComponent_GetPlaybackPosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTimelineComponent_GetPlayRate();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTimelineComponent_GetTimelineLength();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTimelineComponent_IsLooping();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTimelineComponent_IsPlaying();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTimelineComponent_IsReversing();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTimelineComponent_OnRep_Timeline();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTimelineComponent_Play();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTimelineComponent_PlayFromStart();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTimelineComponent_Reverse();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTimelineComponent_ReverseFromEnd();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTimelineComponent_SetLooping();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTimelineComponent_SetNewTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTimelineComponent_SetPlaybackPosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTimelineComponent_SetPlayRate();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTimelineComponent_SetTimelineLength();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTimelineComponent_SetTimelineLengthMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTimelineComponent_Stop();
	ENGINE_API class UClass* Z_Construct_UClass_UTimelineComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UTimelineComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UAISystemBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAISystemBase();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETypeAdvanceAnim();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimSequenceBase_GetPlayLength();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimSequenceBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimSequenceBase();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimTrack();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimSegment();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRootMotionExtractionStep();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimCompositeBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimCompositeBase();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimComposite_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimComposite();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAlphaBlendOption();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAlphaBlend();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETransitionLogicType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETransitionBlendMode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBakedAnimationStateMachine();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBakedAnimationState();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBakedStateExitTransition();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimationTransitionBetweenStates();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimationState();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimationStateBase();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimationTransitionRule();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimStateMachineTypes_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimStateMachineTypes();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_OnMontageBlendingOutStartedMCDelegate__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_OnMontageEndedMCDelegate__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_OnMontageStartedMCDelegate__DelegateSignature();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EBoneRotationSource();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EBoneControlSpace();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSlotEvaluationPose();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPerBoneBlendWeights();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPerBoneBlendWeight();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FA2CSPose();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FA2Pose();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_AnimNotify_Sound();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_BlueprintInitializeAnimation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_BlueprintPostEvaluateAnimation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_BlueprintUpdateAnimation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_CalculateDirection();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_ClearMorphTargets();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetAnimAssetPlayerLength();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetAnimAssetPlayerTimeFraction();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetAnimAssetPlayerTimeFromEnd();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetAnimAssetPlayerTimeFromEndFraction();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetCurrentStateElapsedTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetCurrentStateName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetCurveValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetInstanceAssetPlayerLength();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetInstanceAssetPlayerTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetInstanceAssetPlayerTimeFraction();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetInstanceAssetPlayerTimeFromEnd();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetInstanceAssetPlayerTimeFromEndFraction();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetInstanceCurrentStateElapsedTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetInstanceStateWeight();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetInstanceTransitionCrossfadeDuration();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetInstanceTransitionTimeElapsed();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetInstanceTransitionTimeElapsedFraction();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetOwningActor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetOwningComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetRelevantAnimLength();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetRelevantAnimTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetRelevantAnimTimeFraction();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetRelevantAnimTimeRemaining();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetRelevantAnimTimeRemainingFraction();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetStateWeight();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_IsPlayingSlotAnimation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_LockAIResources();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_Montage_GetCurrentSection();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_Montage_IsActive();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_Montage_IsPlaying();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_Montage_JumpToSection();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_Montage_JumpToSectionsEnd();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_Montage_Pause();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_Montage_Play();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_Montage_SetNextSection();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_Montage_SetPlayRate();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_Montage_Stop();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_PlaySlotAnimation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_PlaySlotAnimationAsDynamicMontage();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_SetMorphTarget();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_StopSlotAnimation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_TryGetPawnOwner();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_UnlockAIResources();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimInstance_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimInstance();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAnimNotifyEventType();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimMontageInstance();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBranchingPointMarker();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBranchingPoint();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSlotAnimationTrack();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCompositeSection();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimMontage_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimMontage();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAdditiveBasePoseType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_AnimationKeyFormat();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_AnimationCompressionFormat();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCompressedOffsetData();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCompressedTrack();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCurveTrack();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FScaleTrack();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRotationTrack();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTranslationTrack();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTrackToSkeletonMap();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimSequenceTrackContainer();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRawAnimSequenceTrack();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimSequence_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimSequence();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ENotifyTriggerMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EBlendSpaceAxis();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPerBoneInterpolation();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FGridBlendSample();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FEditorElement();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBlendSample();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBlendParameter();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FInterpolationParameter();
	ENGINE_API class UClass* Z_Construct_UClass_UBlendSpaceBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBlendSpaceBase();
	ENGINE_API class UClass* Z_Construct_UClass_UBlendSpace_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBlendSpace();
	ENGINE_API class UClass* Z_Construct_UClass_UAimOffsetBlendSpace_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAimOffsetBlendSpace();
	ENGINE_API class UClass* Z_Construct_UClass_UBlendSpace1D_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBlendSpace1D();
	ENGINE_API class UClass* Z_Construct_UClass_UAimOffsetBlendSpace1D_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAimOffsetBlendSpace1D();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimCompress_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimCompress();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimCompress_Automatic_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimCompress_Automatic();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimCompress_BitwiseCompressOnly_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimCompress_BitwiseCompressOnly();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimCompress_LeastDestructive_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimCompress_LeastDestructive();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimCompress_RemoveEverySecondKey_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimCompress_RemoveEverySecondKey();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimCompress_RemoveLinearKeys_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimCompress_RemoveLinearKeys();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimCompress_PerTrackCompression_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimCompress_PerTrackCompression();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimCompress_RemoveTrivialKeys_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimCompress_RemoveTrivialKeys();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_PostEvaluateAnimEvent__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimSingleNodeInstance_GetLength();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimSingleNodeInstance_PlayAnim();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimSingleNodeInstance_SetAnimationAsset();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimSingleNodeInstance_SetBlendSpaceInput();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimSingleNodeInstance_SetLooping();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimSingleNodeInstance_SetPlaying();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimSingleNodeInstance_SetPlayRate();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimSingleNodeInstance_SetPosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimSingleNodeInstance_SetReverse();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimSingleNodeInstance_SetVertexAnimation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimSingleNodeInstance_StopAnim();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimSingleNodeInstance_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimSingleNodeInstance();
	ENGINE_API class UFunction* Z_Construct_UFunction_UVehicleAnimInstance_GetVehicle();
	ENGINE_API class UClass* Z_Construct_UClass_UVehicleAnimInstance_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UVehicleAnimInstance();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimMetaData_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimMetaData();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimNotify_GetNotifyName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimNotify_Received_Notify();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimNotify_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimNotify();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimNotifyState_GetNotifyName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimNotifyState_Received_NotifyBegin();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimNotifyState_Received_NotifyEnd();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimNotifyState_Received_NotifyTick();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimNotifyState_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimNotifyState();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimNotifyState_TimedParticleEffect_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimNotifyState_TimedParticleEffect();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimNotifyState_Trail_OverridePSTemplate();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimNotifyState_Trail_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimNotifyState_Trail();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimSetMeshLinkup();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimSet_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimSet();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAssetImportInfo();
	ENGINE_API class UClass* Z_Construct_UClass_UAssetImportData_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAssetImportData();
	ENGINE_API class UClass* Z_Construct_UClass_UAssetUserData_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAssetUserData();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FLaunchOnTestSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FEditorMapPerformanceTestDefinition();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBuildPromotionTestSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FParticleEditorPromotionSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMaterialEditorPromotionSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBuildPromotionNewProjectSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBuildPromotionBlueprintSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBuildPromotionOpenAssetSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBuildPromotionImportWorkflowSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FEditorImportWorkflowDefinition();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FEditorImportExportTestDefinition();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FImportFactorySettingValues();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FExternalToolDefinition();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FOpenTestAsset();
	ENGINE_API class UClass* Z_Construct_UClass_UAutomationTestSettings_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAutomationTestSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNavAvoidanceData();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAvoidanceManager_GetAvoidanceVelocity();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAvoidanceManager_GetAvoidanceVelocityForComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAvoidanceManager_GetAvoidanceVelocityIgnoringUID();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAvoidanceManager_GetNewAvoidanceUID();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAvoidanceManager_GetObjectCount();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAvoidanceManager_RegisterMovementComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UAvoidanceManager_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAvoidanceManager();
	ENGINE_API class UFunction* Z_Construct_UFunction_UBlueprintAsyncActionBase_Activate();
	ENGINE_API class UClass* Z_Construct_UClass_UBlueprintAsyncActionBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBlueprintAsyncActionBase();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimParentNodeAssetOverride();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimGroupInfo();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimBlueprint_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimBlueprint();
	ENGINE_API class UClass* Z_Construct_UClass_ULevelScriptBlueprint_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ULevelScriptBlueprint();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDataTableCategoryHandle();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDataTableRowHandle();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTableRowBase();
	ENGINE_API class UClass* Z_Construct_UClass_UDataTable_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDataTable();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EEvaluateCurveTableResult();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDataTableFunctionLibrary_EvaluateCurveTableRow();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDataTableFunctionLibrary_GetDataTableRowFromName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDataTableFunctionLibrary_GetDataTableRowNames();
	ENGINE_API class UClass* Z_Construct_UClass_UDataTableFunctionLibrary_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDataTableFunctionLibrary();
	ENGINE_API class UClass* Z_Construct_UClass_UDebugDrawService_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDebugDrawService();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EGrammaticalNumber();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EGrammaticalGender();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDialogueWaveParameter();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDialogueContext();
	ENGINE_API class UClass* Z_Construct_UClass_UDialogueTypes_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDialogueTypes();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESuggestProjVelocityTraceOption();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_ActivateReverbEffect();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_ApplyDamage();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_ApplyPointDamage();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_ApplyRadialDamage();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_ApplyRadialDamageWithFalloff();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_AreAnyListenersWithinRange();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_BeginDeferredActorSpawnFromClass();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_BeginSpawningActorFromBlueprint();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_BeginSpawningActorFromClass();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_BlueprintSuggestProjectileVelocity();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_BreakHitResult();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_CancelAsyncLoading();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_ClearSoundMixModifiers();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_CreatePlayer();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_CreateSaveGameObject();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_CreateSaveGameObjectFromBlueprint();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_DeactivateReverbEffect();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_DeleteGameInSlot();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_DeprojectScreenToWorld();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_DoesSaveGameExist();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_EnableLiveStreaming();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_FinishSpawningActor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_FlushLevelStreaming();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetAccurateRealTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetActorArrayAverageLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetActorArrayBounds();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetAllActorsOfClass();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetAllActorsWithInterface();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetAudioTimeSeconds();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetCurrentLevelName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetGameInstance();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetGameMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetGameState();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetGlobalTimeDilation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetIntOption();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetKeyValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetObjectClass();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetPlatformName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetPlayerCameraManager();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetPlayerCharacter();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetPlayerController();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetPlayerPawn();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetRealTimeSeconds();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetStreamingLevel();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetSurfaceType();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetWorldDeltaSeconds();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetWorldOriginLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GrassOverlappingSphereCount();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_HasOption();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_IsGamePaused();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_LoadGameFromSlot();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_LoadStreamLevel();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_OpenLevel();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_ParseOption();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_PlayDialogue2D();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_PlayDialogueAtLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_PlaySound2D();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_PlaySoundAtLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_PlayWorldCameraShake();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_PopSoundMixModifier();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_ProjectWorldToScreen();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_PushSoundMixModifier();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_RemovePlayer();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_SaveGameToSlot();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_SetBaseSoundMix();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_SetGamePaused();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_SetGlobalTimeDilation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_SetWorldOriginLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_SpawnDecalAtLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_SpawnDecalAttached();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_SpawnDialogue2D();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_SpawnDialogueAtLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_SpawnDialogueAttached();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_SpawnEmitterAtLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_SpawnEmitterAttached();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_SpawnObject();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_SpawnSound2D();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_SpawnSoundAtLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_SpawnSoundAttached();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_UnloadStreamLevel();
	ENGINE_API class UClass* Z_Construct_UClass_UGameplayStatics_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UGameplayStatics();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EOrientPositionSelector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_EnableHMD();
	ENGINE_API class UFunction* Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_EnableLowPersistenceMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_GetOrientationAndPosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_GetPositionalTrackingCameraParameters();
	ENGINE_API class UFunction* Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_GetScreenPercentage();
	ENGINE_API class UFunction* Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_GetWorldToMetersScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_HasValidTrackingPosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_IsHeadMountedDisplayEnabled();
	ENGINE_API class UFunction* Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_IsInLowPersistenceMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_ResetOrientationAndPosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_SetClippingPlanes();
	ENGINE_API class UFunction* Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_SetWorldToMetersScale();
	ENGINE_API class UClass* Z_Construct_UClass_UHeadMountedDisplayFunctionLibrary_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UHeadMountedDisplayFunctionLibrary();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetArrayLibrary_Array_Add();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetArrayLibrary_Array_AddUnique();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetArrayLibrary_Array_Append();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetArrayLibrary_Array_Clear();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetArrayLibrary_Array_Contains();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetArrayLibrary_Array_Find();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetArrayLibrary_Array_Get();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetArrayLibrary_Array_Insert();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetArrayLibrary_Array_LastIndex();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetArrayLibrary_Array_Length();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetArrayLibrary_Array_Remove();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetArrayLibrary_Array_RemoveItem();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetArrayLibrary_Array_Resize();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetArrayLibrary_Array_Set();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetArrayLibrary_Array_Shuffle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetArrayLibrary_FilterArray();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetArrayLibrary_SetArrayPropertyByName();
	ENGINE_API class UClass* Z_Construct_UClass_UKismetArrayLibrary_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UKismetArrayLibrary();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetGuidLibrary_Conv_GuidToString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetGuidLibrary_EqualEqual_GuidGuid();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetGuidLibrary_Invalidate_Guid();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetGuidLibrary_IsValid_Guid();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetGuidLibrary_NewGuid();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetGuidLibrary_NotEqual_GuidGuid();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetGuidLibrary_Parse_StringToGuid();
	ENGINE_API class UClass* Z_Construct_UClass_UKismetGuidLibrary_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UKismetGuidLibrary();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_CalibrateTilt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_ControllerEvent_GetAnalogValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_ControllerEvent_GetEffectingButton();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_ControllerEvent_GetUserIndex();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_EqualEqual_KeyKey();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_GetAnalogValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_GetKey();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_GetUserIndex();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsAltDown();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsCommandDown();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsControlDown();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsLeftAltDown();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsLeftCommandDown();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsLeftControlDown();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsLeftShiftDown();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsRepeat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsRightAltDown();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsRightCommandDown();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsRightControlDown();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsRightShiftDown();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsShiftDown();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_Key_GetDisplayName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_Key_IsFloatAxis();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_Key_IsGamepadKey();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_Key_IsKeyboardKey();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_Key_IsModifierKey();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_Key_IsMouseButton();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_Key_IsVectorAxis();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_PointerEvent_GetCursorDelta();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_PointerEvent_GetEffectingButton();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_PointerEvent_GetGestureDelta();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_PointerEvent_GetLastScreenSpacePosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_PointerEvent_GetPointerIndex();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_PointerEvent_GetScreenSpacePosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_PointerEvent_GetTouchpadIndex();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_PointerEvent_GetUserIndex();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_PointerEvent_GetWheelDelta();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_PointerEvent_IsMouseButtonDown();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_PointerEvent_IsTouchEvent();
	ENGINE_API class UClass* Z_Construct_UClass_UKismetInputLibrary_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UKismetInputLibrary();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMaterialLibrary_CreateDynamicMaterialInstance();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMaterialLibrary_GetScalarParameterValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMaterialLibrary_GetVectorParameterValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMaterialLibrary_SetScalarParameterValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMaterialLibrary_SetVectorParameterValue();
	ENGINE_API class UClass* Z_Construct_UClass_UKismetMaterialLibrary_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UKismetMaterialLibrary();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EEasingFunc();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Abs();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Abs_Int();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Acos();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Add_ByteByte();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Add_DateTimeTimespan();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Add_FloatFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Add_IntInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Add_TimespanTimespan();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Add_Vector2DFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Add_Vector2DVector2D();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Add_VectorFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Add_VectorInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Add_VectorVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_And_IntInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Asin();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Atan();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Atan2();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_BooleanAND();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_BooleanNAND();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_BooleanNOR();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_BooleanOR();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_BooleanXOR();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_BreakColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_BreakDateTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_BreakRandomStream();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_BreakRotator();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_BreakRotIntoAxes();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_BreakTimespan();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_BreakTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_BreakVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_BreakVector2D();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_CInterpTo();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Clamp();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_ClampAngle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_ClampAxis();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_ClampVectorSize();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_ClassIsChildOf();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_ComposeRotators();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_ComposeTransforms();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_BoolToByte();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_BoolToFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_BoolToInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_ByteToFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_ByteToInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_ColorToLinearColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_FloatToLinearColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_FloatToVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_IntToBool();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_IntToByte();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_IntToFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_LinearColorToColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_LinearColorToVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_RotatorToVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_Vector2DToVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_VectorToLinearColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_VectorToRotator();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_VectorToTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_VectorToVector2D();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_ConvertTransformToRelative();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Cos();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_CreateVectorFromYawPitch();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Cross_VectorVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_CrossProduct2D();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_DateTimeFromIsoString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_DateTimeFromString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_DateTimeMaxValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_DateTimeMinValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_DaysInMonth();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_DaysInYear();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_DegAcos();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_DegAsin();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_DegAtan();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_DegAtan2();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_DegCos();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_DegreesToRadians();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_DegSin();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_DegTan();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Divide_ByteByte();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Divide_FloatFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Divide_IntInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Divide_Vector2DFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Divide_VectorFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Divide_VectorInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Divide_VectorVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Dot_VectorVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_DotProduct2D();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Ease();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_BoolBool();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_ByteByte();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_ClassClass();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_DateTimeDateTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_FloatFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_IntInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_NameName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_ObjectObject();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_RotatorRotator();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_TimespanTimespan();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_TransformTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_VectorVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Exp();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_FCeil();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_FClamp();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_FFloor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_FindLookAtRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_FInterpEaseInOut();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_FInterpTo();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_FInterpTo_Constant();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_FixedTurn();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_FMax();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_FMin();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_FMod();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Fraction();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_FromDays();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_FromHours();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_FromMilliseconds();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_FromMinutes();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_FromSeconds();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_FTrunc();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetAxes();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetDate();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetDay();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetDayOfYear();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetDays();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetDirectionVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetDuration();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetForwardVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetHour();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetHour12();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetHours();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetMaxElement();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetMillisecond();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetMilliseconds();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetMinElement();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetMinute();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetMinutes();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetMonth();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetPI();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetRightVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetSecond();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetSeconds();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetTimeOfDay();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetTotalDays();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetTotalHours();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetTotalMilliseconds();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetTotalMinutes();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetTotalSeconds();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetUpVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetVectorArrayAverage();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetYawPitchFromVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetYear();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Greater_ByteByte();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Greater_DateTimeDateTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Greater_FloatFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Greater_IntInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Greater_TimespanTimespan();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GreaterEqual_ByteByte();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GreaterEqual_DateTimeDateTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GreaterEqual_FloatFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GreaterEqual_IntInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GreaterEqual_TimespanTimespan();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GreaterGreater_VectorRotator();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GridSnap_Float();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_HSVToRGB();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_HSVToRGB_Vector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Hypotenuse();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_InRange_FloatFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_InverseLerp();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_InverseTransformDirection();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_InverseTransformLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_InvertTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_IsAfternoon();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_IsLeapYear();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_IsMorning();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Lerp();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Less_ByteByte();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Less_DateTimeDateTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Less_FloatFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Less_IntInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Less_TimespanTimespan();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_LessEqual_ByteByte();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_LessEqual_DateTimeDateTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_LessEqual_FloatFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_LessEqual_IntInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_LessEqual_TimespanTimespan();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_LessLess_VectorRotator();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_LinearColorLerp();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_LinearColorLerpUsingHSV();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_LinePlaneIntersection();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_LinePlaneIntersection_OriginNormal();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Loge();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeDateTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakePulsatingValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeRandomStream();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeRotationFromAxes();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeRotator();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeRotFromX();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeRotFromXY();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeRotFromXZ();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeRotFromY();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeRotFromYX();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeRotFromYZ();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeRotFromZ();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeRotFromZX();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeRotFromZY();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeTimespan();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeVector2D();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MapRangeClamped();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MapRangeUnclamped();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Max();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MaxOfByteArray();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MaxOfFloatArray();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MaxOfIntArray();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Min();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MinimumAreaRectangle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MinOfByteArray();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MinOfFloatArray();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MinOfIntArray();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MirrorVectorByNormal();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Multiply_ByteByte();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Multiply_FloatFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Multiply_IntFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Multiply_IntInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Multiply_LinearColorFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Multiply_LinearColorLinearColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Multiply_RotatorFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Multiply_RotatorInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Multiply_TimespanFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Multiply_Vector2DFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Multiply_VectorFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Multiply_VectorInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Multiply_VectorVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MultiplyByPi();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MultiplyMultiply_FloatFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_NearlyEqual_FloatFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_NearlyEqual_TransformTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_NegateRotator();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_NegateVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Normal();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Normal2D();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_NormalizeAxis();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_NormalizedDeltaRotator();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_NormalizeToRange();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Not_PreBool();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_NotEqual_BoolBool();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_NotEqual_ByteByte();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_NotEqual_ClassClass();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_NotEqual_DateTimeDateTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_NotEqual_FloatFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_NotEqual_IntInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_NotEqual_NameName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_NotEqual_ObjectObject();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_NotEqual_RotatorRotator();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_NotEqual_TimespanTimespan();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_NotEqual_VectorVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Now();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Or_IntInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Percent_ByteByte();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Percent_FloatFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Percent_IntInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_PointsAreCoplanar();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_ProjectPointOnToPlane();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_ProjectVectorOnToPlane();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_ProjectVectorOnToVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RadiansToDegrees();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomBool();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomBoolFromStream();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomFloatFromStream();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomFloatInRange();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomFloatInRangeFromStream();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomInteger();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomIntegerFromStream();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomIntegerInRange();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomIntegerInRangeFromStream();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomPointInBoundingBox();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomRotator();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomRotatorFromStream();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomUnitVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomUnitVectorFromStream();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomUnitVectorInCone();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomUnitVectorInConeWithYawAndPitch();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_REase();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_ResetRandomStream();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RGBToHSV();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RGBToHSV_Vector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RInterpTo();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RInterpTo_Constant();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RLerp();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RotateAngleAxis();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RotatorFromAxisAndAngle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Round();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_SeedRandomStream();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_SelectClass();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_SelectColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_SelectFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_SelectInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_SelectObject();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_SelectRotator();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_SelectString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_SelectTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_SelectVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_SetRandomStreamSeed();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_SignOfFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_SignOfInteger();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Sin();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Sqrt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Square();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Subtract_ByteByte();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Subtract_DateTimeDateTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Subtract_DateTimeTimespan();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Subtract_FloatFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Subtract_IntInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Subtract_TimespanTimespan();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Subtract_Vector2DFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Subtract_Vector2DVector2D();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Subtract_VectorFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Subtract_VectorInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Subtract_VectorVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Tan();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_TEase();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_TimespanFromString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_TimespanMaxValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_TimespanMinValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_TimespanRatio();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_TimespanZeroValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_TInterpTo();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_TLerp();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Today();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_TransformDirection();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_TransformLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_UtcNow();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_VEase();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Vector2DInterpTo();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Vector2DInterpTo_Constant();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_VInterpTo();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_VInterpTo_Constant();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_VLerp();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_VSize();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_VSize2D();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_VSize2DSquared();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_VSizeSquared();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Xor_IntInt();
	ENGINE_API class UClass* Z_Construct_UClass_UKismetMathLibrary_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UKismetMathLibrary();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetNodeHelperLibrary_BitIsMarked();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetNodeHelperLibrary_ClearAllBits();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetNodeHelperLibrary_ClearBit();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetNodeHelperLibrary_GetEnumeratorName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetNodeHelperLibrary_GetEnumeratorUserFriendlyName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetNodeHelperLibrary_GetFirstUnmarkedBit();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetNodeHelperLibrary_GetRandomUnmarkedBit();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetNodeHelperLibrary_GetUnmarkedBit();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetNodeHelperLibrary_GetValidIndex();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetNodeHelperLibrary_HasMarkedBit();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetNodeHelperLibrary_HasUnmarkedBit();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetNodeHelperLibrary_MarkBit();
	ENGINE_API class UClass* Z_Construct_UClass_UKismetNodeHelperLibrary_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UKismetNodeHelperLibrary();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_BuildString_Bool();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_BuildString_Color();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_BuildString_Float();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_BuildString_Int();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_BuildString_Name();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_BuildString_Object();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_BuildString_Rotator();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_BuildString_Vector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_BuildString_Vector2d();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Concat_StrStr();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Conv_BoolToString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Conv_ByteToString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Conv_ColorToString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Conv_FloatToString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Conv_IntToString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Conv_NameToString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Conv_ObjectToString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Conv_RotatorToString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Conv_StringToFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Conv_StringToInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Conv_StringToName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Conv_TransformToString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Conv_Vector2dToString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Conv_VectorToString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_CullArray();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_EndsWith();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_EqualEqual_StriStri();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_EqualEqual_StrStr();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_FindSubstring();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_GetCharacterArrayFromString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_GetCharacterAsNumber();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_GetSubstring();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_IsNumeric();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_JoinStringArray();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Left();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_LeftChop();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_LeftPad();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Len();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_MatchesWildcard();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Mid();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_NotEqual_StriStri();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_NotEqual_StrStr();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_ParseIntoArray();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Replace();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_ReplaceInline();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Reverse();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Right();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_RightChop();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_RightPad();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Split();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_StartsWith();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_TimeSecondsToString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_ToLower();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_ToUpper();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Trim();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_TrimTrailing();
	ENGINE_API class UClass* Z_Construct_UClass_UKismetStringLibrary_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UKismetStringLibrary();
	ENGINE_API class UClass* Z_Construct_UClass_UDeveloperSettings_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDeveloperSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCustomProfile();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCustomChannelSetup();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCollisionResponseTemplate();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCollisionProfileName();
	ENGINE_API class UClass* Z_Construct_UClass_UCollisionProfile_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCollisionProfile();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_UKismetSystemLibrary_OnAssetClassLoaded__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_UKismetSystemLibrary_OnAssetLoaded__DelegateSignature();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EQuitPreference();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMoveComponentAction();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EDrawDebugTrace();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FGenericStruct();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_AddFloatHistorySample();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_BoxOverlapActors_DEPRECATED();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_BoxOverlapActors_NEW();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_BoxOverlapComponents_DEPRECATED();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_BoxOverlapComponents_NEW();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_BoxTraceMulti();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_BoxTraceMultiForObjects();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_BoxTraceSingle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_BoxTraceSingleForObjects();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_CapsuleOverlapActors_DEPRECATED();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_CapsuleOverlapActors_NEW();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_CapsuleOverlapComponents_DEPRECATED();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_CapsuleOverlapComponents_NEW();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_CapsuleTraceMulti_DEPRECATED();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_CapsuleTraceMulti_NEW();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_CapsuleTraceMultiByObject_DEPRECATED();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_CapsuleTraceMultiForObjects();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_CapsuleTraceSingle_DEPRECATED();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_CapsuleTraceSingle_NEW();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_CapsuleTraceSingleByObject_DEPRECATED();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_CapsuleTraceSingleForObjects();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_CollectGarbage();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_ComponentOverlapActors_DEPRECATED();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_ComponentOverlapActors_NEW();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_ComponentOverlapComponents_DEPRECATED();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_ComponentOverlapComponents_NEW();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_ControlScreensaver();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_Conv_AssetClassToClass();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_Conv_AssetToObject();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_Conv_InterfaceToObject();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_CreateCopyForUndoBuffer();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_Delay();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DoesImplementInterface();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugArrow();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugBox();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugCamera();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugCapsule();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugCircle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugCone();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugConeInDegrees();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugCoordinateSystem();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugCylinder();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugFloatHistoryLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugFloatHistoryTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugFrustum();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugLine();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugPlane();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugPoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugSphere();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_ExecuteConsoleCommand();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_FlushDebugStrings();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_FlushPersistentDebugLines();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_ForceCloseAdBanner();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetActorBounds();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetActorListFromComponentList();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetAdIDCount();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetClassDisplayName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetComponentBounds();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetDisplayName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetEngineVersion();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetGameName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetGameTimeInSeconds();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetLocalCurrencyCode();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetLocalCurrencySymbol();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetObjectName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetPlatformUserName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetPreferredLanguages();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetRenderingDetailMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetRenderingMaterialQualityLevel();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetSupportedFullscreenResolutions();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetUniqueDeviceId();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetVolumeButtonsHandledBySystem();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_HideAdBanner();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_IsControllerAssignedToGamepad();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_IsDedicatedServer();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_IsLoggedIn();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_IsPackagedForDistribution();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_IsServer();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_IsValid();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_IsValidClass();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_ClearTimer();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_ClearTimerDelegate();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_ClearTimerHandle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_GetTimerElapsedTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_GetTimerElapsedTimeDelegate();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_GetTimerElapsedTimeHandle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_GetTimerRemainingTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_GetTimerRemainingTimeDelegate();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_GetTimerRemainingTimeHandle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_InvalidateTimerHandle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_IsTimerActive();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_IsTimerActiveDelegate();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_IsTimerActiveHandle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_IsTimerPaused();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_IsTimerPausedDelegate();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_IsTimerPausedHandle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_IsValidTimerHandle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_PauseTimer();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_PauseTimerDelegate();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_PauseTimerHandle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_SetTimer();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_SetTimerDelegate();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_TimerExists();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_TimerExistsDelegate();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_TimerExistsHandle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_UnPauseTimer();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_UnPauseTimerDelegate();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_UnPauseTimerHandle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_LaunchURL();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_LineTraceMulti_DEPRECATED();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_LineTraceMulti_NEW();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_LineTraceMultiByObject_DEPRECATED();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_LineTraceMultiForObjects();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_LineTraceSingle_DEPRECATED();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_LineTraceSingle_NEW();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_LineTraceSingleByObject_DEPRECATED();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_LineTraceSingleForObjects();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_LoadAsset();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_LoadAssetClass();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_MakeLiteralBool();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_MakeLiteralByte();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_MakeLiteralFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_MakeLiteralInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_MakeLiteralName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_MakeLiteralString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_MakeLiteralText();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_MoveComponentTo();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_PrintString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_PrintText();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_PrintWarning();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_QuitGame();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_RegisterForRemoteNotifications();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_ResetGamepadAssignments();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_ResetGamepadAssignmentToController();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_RetriggerableDelay();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetAssetClassPropertyByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetAssetPropertyByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetBoolPropertyByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetBytePropertyByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetClassPropertyByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetCollisionProfileNameProperty();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetFloatPropertyByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetIntPropertyByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetLinearColorPropertyByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetNamePropertyByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetObjectPropertyByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetRotatorPropertyByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetStringPropertyByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetStructurePropertyByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetSupressViewportTransitionMessage();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetTextPropertyByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetTransformPropertyByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetVectorPropertyByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetVolumeButtonsHandledBySystem();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetWindowTitle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_ShowAdBanner();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_ShowPlatformSpecificAchievementsScreen();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_ShowPlatformSpecificLeaderboardScreen();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SphereOverlapActors_DEPRECATED();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SphereOverlapActors_NEW();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SphereOverlapComponents_DEPRECATED();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SphereOverlapComponents_NEW();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SphereTraceMulti_DEPRECATED();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SphereTraceMulti_NEW();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SphereTraceMultiByObject_DEPRECATED();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SphereTraceMultiForObjects();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SphereTraceSingle_DEPRECATED();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SphereTraceSingle_NEW();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SphereTraceSingleByObject_DEPRECATED();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SphereTraceSingleForObjects();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_StackTrace();
	ENGINE_API class UClass* Z_Construct_UClass_UKismetSystemLibrary_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UKismetSystemLibrary();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ERoundingMode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FFormatTextArgument();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_AsCurrency_Float();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_AsCurrency_Integer();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_AsDate_DateTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_AsDateTime_DateTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_AsPercent_Float();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_AsTime_DateTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_AsTimespan_Timespan();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_Conv_BoolToText();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_Conv_ByteToText();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_Conv_FloatToText();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_Conv_IntToText();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_Conv_NameToText();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_Conv_StringToText();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_Conv_TextToString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_EqualEqual_IgnoreCase_TextText();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_EqualEqual_TextText();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_FindTextInLocalizationTable();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_Format();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_GetEmptyText();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_NotEqual_IgnoreCase_TextText();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_NotEqual_TextText();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_TextIsCultureInvariant();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_TextIsEmpty();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_TextIsTransient();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_TextTrimPreceding();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_TextTrimPrecedingAndTrailing();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_TextTrimTrailing();
	ENGINE_API class UClass* Z_Construct_UClass_UKismetTextLibrary_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UKismetTextLibrary();
	ENGINE_API class UFunction* Z_Construct_UFunction_UVisualLoggerKismetLibrary_LogBox();
	ENGINE_API class UFunction* Z_Construct_UFunction_UVisualLoggerKismetLibrary_LogLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UVisualLoggerKismetLibrary_LogText();
	ENGINE_API class UClass* Z_Construct_UClass_UVisualLoggerKismetLibrary_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UVisualLoggerKismetLibrary();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FEventGraphFastCallPair();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBlueprintDebugData();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPointerToUberGraphFrame();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDebuggingInfoForSingleFunction();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNodeToCodeAssociation();
	ENGINE_API class UClass* Z_Construct_UClass_UBlueprintGeneratedClass_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBlueprintGeneratedClass();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimBlueprintDebugData();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimationFrameSnapshot();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FStateMachineDebugData();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimBlueprintGeneratedClass_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimBlueprintGeneratedClass();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FKShapeElem();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FKConvexElem();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FKBoxElem();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FKSphereElem();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FKSphylElem();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FKAggregateGeom();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EBodyCollisionResponse();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EPhysicsType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ECollisionTraceFlag();
	ENGINE_API class UClass* Z_Construct_UClass_UBodySetup_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBodySetup();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAggregateGeometry2D();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBoxElement2D();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCircleElement2D();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FConvexElement2D();
	ENGINE_API class UClass* Z_Construct_UClass_UBodySetup2D_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBodySetup2D();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FInputBlendPose();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBranchFilter();
	ENGINE_API class UClass* Z_Construct_UClass_UBoneMaskFilter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBoneMaskFilter();
	ENGINE_API class UClass* Z_Construct_UClass_UBookMark_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBookMark();
	ENGINE_API class UClass* Z_Construct_UClass_UBookMark2D_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBookMark2D();
	ENGINE_API class UClass* Z_Construct_UClass_UBreakpoint_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBreakpoint();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBuilderPoly();
	ENGINE_API class UClass* Z_Construct_UClass_UBrushBuilder_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBrushBuilder();
	ENGINE_API class UClass* Z_Construct_UClass_UButtonStyleAsset_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UButtonStyleAsset();
	ENGINE_API class UClass* Z_Construct_UClass_UCameraAnim_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCameraAnim();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCameraAnimInst_SetDuration();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCameraAnimInst_SetScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCameraAnimInst_Stop();
	ENGINE_API class UClass* Z_Construct_UClass_UCameraAnimInst_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCameraAnimInst();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCameraModifier_BlueprintModifyCamera();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCameraModifier_BlueprintModifyPostProcess();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCameraModifier_DisableModifier();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCameraModifier_EnableModifier();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCameraModifier_GetViewTarget();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCameraModifier_IsDisabled();
	ENGINE_API class UClass* Z_Construct_UClass_UCameraModifier_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCameraModifier();
	ENGINE_API class UClass* Z_Construct_UClass_UCameraModifier_CameraShake_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCameraModifier_CameraShake();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FWrappedStringElement();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTextSizingParameters();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCanvasIcon();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCanvas_K2_Deproject();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCanvas_K2_DrawBorder();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCanvas_K2_DrawBox();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCanvas_K2_DrawLine();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCanvas_K2_DrawMaterial();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCanvas_K2_DrawMaterialTriangle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCanvas_K2_DrawPolygon();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCanvas_K2_DrawText();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCanvas_K2_DrawTexture();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCanvas_K2_DrawTriangle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCanvas_K2_Project();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCanvas_K2_StrLen();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCanvas_K2_TextSize();
	ENGINE_API class UClass* Z_Construct_UClass_UCanvas_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCanvas();
	ENGINE_API class UClass* Z_Construct_UClass_UChannel_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UChannel();
	ENGINE_API class UClass* Z_Construct_UClass_UActorChannel_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UActorChannel();
	ENGINE_API class UClass* Z_Construct_UClass_UControlChannel_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UControlChannel();
	ENGINE_API class UClass* Z_Construct_UClass_UVoiceChannel_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UVoiceChannel();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_BugIt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_BugItGo();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_BugItStringCreator();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_ChangeSize();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_DamageTarget();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_DebugCapsuleSweep();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_DebugCapsuleSweepCapture();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_DebugCapsuleSweepChannel();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_DebugCapsuleSweepClear();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_DebugCapsuleSweepComplex();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_DebugCapsuleSweepPawn();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_DebugCapsuleSweepSize();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_DestroyAll();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_DestroyAllPawnsExceptTarget();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_DestroyPawns();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_DestroyTarget();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_DumpOnlineSessionState();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_DumpPartyState();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_DumpVoiceMutingState();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_FlushLog();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_Fly();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_FontAtlasVisualizer();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_FreezeFrame();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_Ghost();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_God();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_InvertMouse();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_LogLoc();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_OnlyLoadLevel();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_PlayersOnly();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_RebuildNavigation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_ServerToggleAILogging();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_SetMouseSensitivityToDefault();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_SetNavDrawDistance();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_SetWorldOrigin();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_Slomo();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_StreamLevelIn();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_StreamLevelOut();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_Summon();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_Teleport();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_TestCollisionDistance();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_TextureAtlasVisualizer();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_ToggleAILogging();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_ToggleDebugCamera();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_ViewActor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_ViewClass();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_ViewPlayer();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_ViewSelf();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_Walk();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_WidgetReflector();
	ENGINE_API class UClass* Z_Construct_UClass_UCheatManager_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCheatManager();
	ENGINE_API class UClass* Z_Construct_UClass_UCheckBoxStyleAsset_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCheckBoxStyleAsset();
	ENGINE_API class UClass* Z_Construct_UClass_UCommandlet_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCommandlet();
	ENGINE_API class UClass* Z_Construct_UClass_UPluginCommandlet_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPluginCommandlet();
	ENGINE_API class UClass* Z_Construct_UClass_USmokeTestCommandlet_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USmokeTestCommandlet();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAutoCompleteNode();
	ENGINE_API class UClass* Z_Construct_UClass_UConsole_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UConsole();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRuntimeCurveLinearColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCurveLinearColor_GetLinearColorValue();
	ENGINE_API class UClass* Z_Construct_UClass_UCurveLinearColor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCurveLinearColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCurveVector_GetVectorValue();
	ENGINE_API class UClass* Z_Construct_UClass_UCurveVector_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCurveVector();
	ENGINE_API class UClass* Z_Construct_UClass_UDEPRECATED_CurveEdPresetCurve_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDEPRECATED_CurveEdPresetCurve();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCurveTableRowHandle();
	ENGINE_API class UClass* Z_Construct_UClass_UCurveTable_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCurveTable();
	ENGINE_API class UClass* Z_Construct_UClass_UDataAsset_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDataAsset();
	ENGINE_API class UClass* Z_Construct_UClass_UTireType_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UTireType();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDestructibleChunkParameters();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FFractureMaterial();
	ENGINE_API class UClass* Z_Construct_UClass_UDestructibleFractureSettings_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDestructibleFractureSettings();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimationSettings_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimationSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAudioQualitySettings();
	ENGINE_API class UClass* Z_Construct_UClass_UAudioSettings_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAudioSettings();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EUIScalingRule();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ERenderFocusRule();
	ENGINE_API class UClass* Z_Construct_UClass_UUserInterfaceSettings_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UUserInterfaceSettings();
	ENGINE_API class UClass* Z_Construct_UClass_UStreamingSettings_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UStreamingSettings();
	ENGINE_API class UClass* Z_Construct_UClass_UGarbageCollectionSettings_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UGarbageCollectionSettings();
	ENGINE_API class UClass* Z_Construct_UClass_UNetworkSettings_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNetworkSettings();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESettingsLockedAxis();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESettingsDOF();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EFrictionCombineMode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPhysicalSurfaceName();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicsSettings_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicsSettings();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAntiAliasingMethodUI();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EEarlyZPass();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ECustomDepthStencil();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ECompositingSampleCount();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EClearSceneOptions();
	ENGINE_API class UClass* Z_Construct_UClass_URendererSettings_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_URendererSettings();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETextureSamplerFilter();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETexturePowerOfTwoSetting();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_TextureMipGenSettings();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_TextureGroup();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTextureLODGroup();
	ENGINE_API class UClass* Z_Construct_UClass_UTextureLODSettings_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UTextureLODSettings();
	ENGINE_API class UClass* Z_Construct_UClass_UDeviceProfile_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDeviceProfile();
	ENGINE_API class UClass* Z_Construct_UClass_UDeviceProfileManager_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDeviceProfileManager();
	ENGINE_API class UClass* Z_Construct_UClass_UDialogueVoice_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDialogueVoice();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDialogueContextMapping();
	ENGINE_API class UClass* Z_Construct_UClass_UDialogueWave_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDialogueWave();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_DistributionParamMode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRawDistribution();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDistributionLookupTable();
	ENGINE_API class UClass* Z_Construct_UClass_UDistribution_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDistribution();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRawDistributionFloat();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FFloatDistribution();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionFloat_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionFloat();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionFloatConstant_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionFloatConstant();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionFloatParameterBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionFloatParameterBase();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionFloatParticleParameter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionFloatParticleParameter();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionFloatConstantCurve_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionFloatConstantCurve();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionFloatUniform_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionFloatUniform();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionFloatUniformCurve_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionFloatUniformCurve();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EDistributionVectorMirrorFlags();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EDistributionVectorLockFlags();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRawDistributionVector();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FVector4Distribution();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FVectorDistribution();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionVector_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionVector();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionVectorConstant_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionVectorConstant();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionVectorParameterBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionVectorParameterBase();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionVectorParticleParameter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionVectorParticleParameter();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionVectorConstantCurve_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionVectorConstantCurve();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionVectorUniform_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionVectorUniform();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionVectorUniformCurve_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionVectorUniformCurve();
	ENGINE_API class UClass* Z_Construct_UClass_UDPICustomScalingRule_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDPICustomScalingRule();
	ENGINE_API class UClass* Z_Construct_UClass_UDynamicBlueprintBinding_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDynamicBlueprintBinding();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBlueprintComponentDelegateBinding();
	ENGINE_API class UClass* Z_Construct_UClass_UComponentDelegateBinding_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UComponentDelegateBinding();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBlueprintInputDelegateBinding();
	ENGINE_API class UClass* Z_Construct_UClass_UInputDelegateBinding_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInputDelegateBinding();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBlueprintInputActionDelegateBinding();
	ENGINE_API class UClass* Z_Construct_UClass_UInputActionDelegateBinding_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInputActionDelegateBinding();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBlueprintInputAxisDelegateBinding();
	ENGINE_API class UClass* Z_Construct_UClass_UInputAxisDelegateBinding_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInputAxisDelegateBinding();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBlueprintInputAxisKeyDelegateBinding();
	ENGINE_API class UClass* Z_Construct_UClass_UInputAxisKeyDelegateBinding_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInputAxisKeyDelegateBinding();
	ENGINE_API class UClass* Z_Construct_UClass_UInputVectorAxisDelegateBinding_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInputVectorAxisDelegateBinding();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBlueprintInputKeyDelegateBinding();
	ENGINE_API class UClass* Z_Construct_UClass_UInputKeyDelegateBinding_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInputKeyDelegateBinding();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBlueprintInputTouchDelegateBinding();
	ENGINE_API class UClass* Z_Construct_UClass_UInputTouchDelegateBinding_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInputTouchDelegateBinding();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FGraphReference();
	ENGINE_API class UClass* Z_Construct_UClass_UEdGraph_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UEdGraph();
	ENGINE_API class UClass* Z_Construct_UClass_UEdGraphNode_Documentation_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UEdGraphNode_Documentation();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ECanCreateConnectionResponse();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EGraphType();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FEdGraphSchemaAction_NewNode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FEdGraphSchemaAction();
	ENGINE_API class UClass* Z_Construct_UClass_UEdGraphSchema_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UEdGraphSchema();
	ENGINE_API class UClass* Z_Construct_UClass_UImportantToggleSettingInterface_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UImportantToggleSettingInterface();
	ENGINE_API class UClass* Z_Construct_UClass_UEndUserSettings_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UEndUserSettings();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EConsoleType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETransitionType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EFullyLoadPackageType();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPluginRedirect();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FStructRedirect();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FClassRedirect();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FGameNameRedirect();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FScreenMessageString();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDropNoteInfo();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FStatColorMapping();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FStatColorMapEntry();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FWorldContext();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNamedNetDriver();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNetDriverDefinition();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FLevelStreamingStatus();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FFullyLoadedPackagesInfo();
	ENGINE_API class UClass* Z_Construct_UClass_UEngine_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UEngine();
	ENGINE_API class UClass* Z_Construct_UClass_UGameEngine_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UGameEngine();
	ENGINE_API class UClass* Z_Construct_UClass_UExporter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UExporter();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EFontImportCharacterSet();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FFontImportOptionsData();
	ENGINE_API class UClass* Z_Construct_UClass_UFontImportOptions_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UFontImportOptions();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EFontCacheType();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FFontCharacter();
	ENGINE_API class UClass* Z_Construct_UClass_UFont_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UFont();
	ENGINE_API class UClass* Z_Construct_UClass_UGameUserSettings_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UGameUserSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FActiveHapticFeedbackEffect();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FHapticFeedbackDetails();
	ENGINE_API class UClass* Z_Construct_UClass_UHapticFeedbackEffect_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UHapticFeedbackEffect();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FComponentOverrideRecord();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FComponentKey();
	ENGINE_API class UClass* Z_Construct_UClass_UInheritableComponentHandler_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInheritableComponentHandler();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FInputAxisKeyMapping();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FInputActionKeyMapping();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FInputAxisConfigEntry();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FInputAxisProperties();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FKeyBind();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPlayerInput_ClearSmoothing();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPlayerInput_InvertAxis();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPlayerInput_InvertAxisKey();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPlayerInput_SetBind();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPlayerInput_SetMouseSensitivity();
	ENGINE_API class UClass* Z_Construct_UClass_UPlayerInput_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPlayerInput();
	ENGINE_API class UClass* Z_Construct_UClass_UInputSettings_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInputSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCurveEdTab();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCurveEdEntry();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpCurveEdSetup_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpCurveEdSetup();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpData_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpData();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpFilter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpFilter();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpFilter_Classes_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpFilter_Classes();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpFilter_Custom_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpFilter_Custom();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FInterpEdSelKey();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpGroup_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpGroup();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCameraPreviewInfo();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpGroupCamera_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpGroupCamera();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpGroupDirector_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpGroupDirector();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpGroupInst_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpGroupInst();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpGroupInstCamera_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpGroupInstCamera();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpGroupInstDirector_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpGroupInstDirector();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETrackActiveCondition();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSubTrackGroup();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSupportedSubTrackInfo();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrack_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrack();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBoolTrackKey();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackBoolProp_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackBoolProp();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDirectorTrackCut();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackDirector_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackDirector();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FEventTrackKey();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackEvent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackEvent();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackFloatBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackFloatBase();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimControlTrackKey();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackAnimControl_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackAnimControl();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackFade_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackFade();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackFloatAnimBPParam_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackFloatAnimBPParam();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackFloatMaterialParam_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackFloatMaterialParam();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackFloatParticleParam_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackFloatParticleParam();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackFloatProp_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackFloatProp();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EInterpTrackMoveRotMode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FInterpLookupTrack();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FInterpLookupPoint();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackMove_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackMove();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EInterpMoveAxis();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackMoveAxis_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackMoveAxis();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackSlomo_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackSlomo();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackLinearColorBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackLinearColorBase();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackLinearColorProp_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackLinearColorProp();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FParticleReplayTrackKey();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackParticleReplay_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackParticleReplay();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETrackToggleAction();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FToggleTrackKey();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackToggle_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackToggle();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackVectorBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackVectorBase();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackAudioMaster_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackAudioMaster();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackColorProp_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackColorProp();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackColorScale_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackColorScale();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSoundTrackKey();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackSound_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackSound();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackVectorMaterialParam_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackVectorMaterialParam();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackVectorProp_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackVectorProp();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EVisibilityTrackCondition();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EVisibilityTrackAction();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FVisibilityTrackKey();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackVisibility_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackVisibility();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInst_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInst();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstAnimControl_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstAnimControl();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstAudioMaster_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstAudioMaster();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstColorScale_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstColorScale();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstDirector_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstDirector();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstEvent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstEvent();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstFade_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstFade();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstFloatAnimBPParam_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstFloatAnimBPParam();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstFloatMaterialParam_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstFloatMaterialParam();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstFloatParticleParam_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstFloatParticleParam();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstMove_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstMove();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstParticleReplay_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstParticleReplay();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstProperty_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstProperty();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstBoolProp_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstBoolProp();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstColorProp_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstColorProp();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstFloatProp_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstFloatProp();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstLinearColorProp_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstLinearColorProp();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstVectorProp_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstVectorProp();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstSlomo_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstSlomo();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstSound_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstSound();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstToggle_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstToggle();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstVectorMaterialParam_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstVectorMaterialParam();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstVisibility_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstVisibility();
	ENGINE_API class UClass* Z_Construct_UClass_UIntSerialization_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UIntSerialization();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FLayerActorStats();
	ENGINE_API class UClass* Z_Construct_UClass_ULayer_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ULayer();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_LevelStreamingVisibilityStatus__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_LevelStreamingLoadedStatus__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULevelStreaming_CreateInstance();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULevelStreaming_GetLevelScriptActor();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULevelStreaming_IsLevelLoaded();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULevelStreaming_IsLevelVisible();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULevelStreaming_IsStreamingStatePending();
	ENGINE_API class UClass* Z_Construct_UClass_ULevelStreaming_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ULevelStreaming();
	ENGINE_API class UClass* Z_Construct_UClass_ULevelStreamingAlwaysLoaded_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ULevelStreamingAlwaysLoaded();
	ENGINE_API class UClass* Z_Construct_UClass_ULevelStreamingKismet_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ULevelStreamingKismet();
	ENGINE_API class UClass* Z_Construct_UClass_ULevelStreamingPersistent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ULevelStreamingPersistent();
	ENGINE_API class UClass* Z_Construct_UClass_ULightmappedSurfaceCollection_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ULightmappedSurfaceCollection();
	ENGINE_API class UClass* Z_Construct_UClass_ULightmassPrimitiveSettingsObject_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ULightmassPrimitiveSettingsObject();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FClientReceiveData();
	ENGINE_API class UClass* Z_Construct_UClass_ULocalMessage_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ULocalMessage();
	ENGINE_API class UClass* Z_Construct_UClass_UEngineMessage_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UEngineMessage();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FExpressionOutput();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMaterialAttributesInput();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FExpressionInput();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpression_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpression();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionAbs_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionAbs();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionActorPositionWS_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionActorPositionWS();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionAdd_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionAdd();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionAppendVector_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionAppendVector();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionAtmosphericFogColor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionAtmosphericFogColor();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionBlackBody_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionBlackBody();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionBreakMaterialAttributes_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionBreakMaterialAttributes();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionBumpOffset_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionBumpOffset();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionCameraPositionWS_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionCameraPositionWS();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionCameraVectorWS_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionCameraVectorWS();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionCeil_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionCeil();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EClampMode();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionClamp_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionClamp();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionCollectionParameter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionCollectionParameter();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionComment_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionComment();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionComponentMask_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionComponentMask();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionConstant_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionConstant();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionConstant2Vector_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionConstant2Vector();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionConstant3Vector_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionConstant3Vector();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionConstant4Vector_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionConstant4Vector();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionConstantBiasScale_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionConstantBiasScale();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionCosine_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionCosine();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionCrossProduct_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionCrossProduct();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ECustomMaterialOutputType();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCustomInput();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionCustom_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionCustom();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionCustomOutput_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionCustomOutput();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDDX_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDDX();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDDY_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDDY();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDecalMipmapLevel_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDecalMipmapLevel();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDepthFade_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDepthFade();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EDepthOfFieldFunctionValue();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDepthOfFieldFunction_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDepthOfFieldFunction();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDeriveNormalZ_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDeriveNormalZ();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDesaturation_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDesaturation();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDistance_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDistance();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDistanceCullFade_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDistanceCullFade();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDistanceFieldGradient_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDistanceFieldGradient();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDistanceToNearestSurface_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDistanceToNearestSurface();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDivide_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDivide();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDotProduct_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDotProduct();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDynamicParameter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDynamicParameter();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionEyeAdaptation_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionEyeAdaptation();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionFeatureLevelSwitch_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionFeatureLevelSwitch();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionFloor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionFloor();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionFmod_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionFmod();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionFontSample_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionFontSample();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionFontSampleParameter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionFontSampleParameter();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionFrac_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionFrac();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionFresnel_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionFresnel();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EFunctionInputType();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionFunctionInput_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionFunctionInput();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionFunctionOutput_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionFunctionOutput();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionGIReplace_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionGIReplace();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionIf_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionIf();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionLightmapUVs_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionLightmapUVs();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionLightmassReplace_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionLightmassReplace();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionLightVector_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionLightVector();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionLinearInterpolate_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionLinearInterpolate();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionLogarithm2_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionLogarithm2();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionMakeMaterialAttributes_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionMakeMaterialAttributes();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FFunctionExpressionOutput();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FFunctionExpressionInput();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionMaterialFunctionCall_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionMaterialFunctionCall();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionMax_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionMax();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionMin_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionMin();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionMultiply_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionMultiply();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ENoiseFunction();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionNoise_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionNoise();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionNormalize_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionNormalize();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionObjectBounds_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionObjectBounds();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionObjectOrientation_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionObjectOrientation();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionObjectPositionWS_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionObjectPositionWS();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionObjectRadius_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionObjectRadius();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionOneMinus_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionOneMinus();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionPanner_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionPanner();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParameter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParameter();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionScalarParameter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionScalarParameter();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionStaticBoolParameter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionStaticBoolParameter();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionStaticSwitchParameter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionStaticSwitchParameter();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionStaticComponentMaskParameter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionStaticComponentMaskParameter();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionVectorParameter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionVectorParameter();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticleColor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticleColor();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticleDirection_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticleDirection();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticleMacroUV_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticleMacroUV();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticleMotionBlurFade_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticleMotionBlurFade();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticlePositionWS_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticlePositionWS();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticleRadius_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticleRadius();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticleRelativeTime_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticleRelativeTime();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticleSize_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticleSize();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticleSpeed_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticleSpeed();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionPerInstanceFadeAmount_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionPerInstanceFadeAmount();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionPerInstanceRandom_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionPerInstanceRandom();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionPixelDepth_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionPixelDepth();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionPixelNormalWS_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionPixelNormalWS();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionPower_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionPower();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionPrecomputedAOMask_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionPrecomputedAOMask();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionQualitySwitch_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionQualitySwitch();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionReflectionVectorWS_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionReflectionVectorWS();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionRotateAboutAxis_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionRotateAboutAxis();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionRotator_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionRotator();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMaterialSceneAttributeInputMode();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSceneColor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSceneColor();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSceneDepth_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSceneDepth();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSceneTexelSize_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSceneTexelSize();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESceneTextureId();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSceneTexture_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSceneTexture();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionScreenPosition_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionScreenPosition();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSine_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSine();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESpeedTreeLODType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESpeedTreeWindType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESpeedTreeGeometryType();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSpeedTree_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSpeedTree();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSphereMask_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSphereMask();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSphericalParticleOpacity_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSphericalParticleOpacity();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSquareRoot_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSquareRoot();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionStaticBool_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionStaticBool();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionStaticSwitch_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionStaticSwitch();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSubtract_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSubtract();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTextureBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTextureBase();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTextureObject_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTextureObject();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETextureMipValueMode();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTextureSample_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTextureSample();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticleSubUV_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticleSubUV();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTextureSampleParameter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTextureSampleParameter();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTextureObjectParameter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTextureObjectParameter();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTextureSampleParameter2D_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTextureSampleParameter2D();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETextureColorChannel();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionAntialiasedTextureMask_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionAntialiasedTextureMask();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTextureSampleParameterSubUV_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTextureSampleParameterSubUV();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTextureSampleParameterCube_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTextureSampleParameterCube();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTextureCoordinate_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTextureCoordinate();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTime_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTime();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMaterialVectorCoordTransform();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMaterialVectorCoordTransformSource();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTransform_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTransform();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMaterialPositionTransformSource();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTransformPosition_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTransformPosition();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTwoSidedSign_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTwoSidedSign();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionVertexColor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionVertexColor();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionVertexNormalWS_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionVertexNormalWS();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMaterialExposedViewProperty();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionViewProperty_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionViewProperty();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionViewSize_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionViewSize();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EWorldPositionIncludedOffsets();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionWorldPosition_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionWorldPosition();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialFunction_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialFunction();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMaterialDecalResponse();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMaterialDomain();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EDecalBlendMode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMaterialParameterCollectionInfo();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMaterialFunctionInfo();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FVector2MaterialInput();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FVectorMaterialInput();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FScalarMaterialInput();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FColorMaterialInput();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMaterialInput();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterial_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterial();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMaterialInstanceBasePropertyOverrides();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FVectorParameterValue();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTextureParameterValue();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FScalarParameterValue();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FFontParameterValue();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialInstance_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialInstance();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialInstanceConstant_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialInstanceConstant();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMaterialInstanceDynamic_CopyParameterOverrides();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMaterialInstanceDynamic_K2_CopyMaterialInstanceParameters();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMaterialInstanceDynamic_K2_GetScalarParameterValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMaterialInstanceDynamic_K2_GetTextureParameterValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMaterialInstanceDynamic_K2_GetVectorParameterValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMaterialInstanceDynamic_K2_InterpolateMaterialInstanceParams();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMaterialInstanceDynamic_SetScalarParameterValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMaterialInstanceDynamic_SetTextureParameterValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMaterialInstanceDynamic_SetVectorParameterValue();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialInstanceDynamic_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialInstanceDynamic();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCollectionVectorParameter();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCollectionScalarParameter();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCollectionParameterBase();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialParameterCollection_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialParameterCollection();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialParameterCollectionInstance_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialParameterCollectionInstance();
	ENGINE_API class UClass* Z_Construct_UClass_UMatineeInterface_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMatineeInterface();
	ENGINE_API class UClass* Z_Construct_UClass_UNavArea_Default_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavArea_Default();
	ENGINE_API class UClass* Z_Construct_UClass_UNavArea_LowHeight_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavArea_LowHeight();
	ENGINE_API class UClass* Z_Construct_UClass_UNavArea_Null_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavArea_Null();
	ENGINE_API class UClass* Z_Construct_UClass_UNavArea_Obstacle_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavArea_Obstacle();
	ENGINE_API class UClass* Z_Construct_UClass_UNavAreaMeta_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavAreaMeta();
	ENGINE_API class UClass* Z_Construct_UClass_UNavAreaMeta_SwitchByAgent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavAreaMeta_SwitchByAgent();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNavCollisionBox();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNavCollisionCylinder();
	ENGINE_API class UClass* Z_Construct_UClass_UNavCollision_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavCollision();
	ENGINE_API class UClass* Z_Construct_UClass_UNavigationDataChunk_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavigationDataChunk();
	ENGINE_API class UClass* Z_Construct_UClass_URecastNavMeshDataChunk_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_URecastNavMeshDataChunk();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_OnNavigationPathUpdated__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationPath_EnableDebugDrawing();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationPath_EnableRecalculationOnInvalidation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationPath_GetDebugString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationPath_GetPathCost();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationPath_GetPathLength();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationPath_IsPartial();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationPath_IsStringPulled();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationPath_IsValid();
	ENGINE_API class UClass* Z_Construct_UClass_UNavigationPath_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavigationPath();
	ENGINE_API class UClass* Z_Construct_UClass_UNavigationPathGenerator_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavigationPathGenerator();
	ENGINE_API class UClass* Z_Construct_UClass_URecastFilter_UseDefaultArea_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_URecastFilter_UseDefaultArea();
	ENGINE_API class UClass* Z_Construct_UClass_UNavLinkTrivial_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavLinkTrivial();
	ENGINE_API class UClass* Z_Construct_UClass_UNavNodeInterface_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavNodeInterface();
	ENGINE_API class UClass* Z_Construct_UClass_UNetDriver_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNetDriver();
	ENGINE_API class UClass* Z_Construct_UClass_UDemoNetDriver_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDemoNetDriver();
	ENGINE_API class UClass* Z_Construct_UClass_UNiagaraEffectRendererProperties_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNiagaraEffectRendererProperties();
	ENGINE_API class UClass* Z_Construct_UClass_UNiagaraRibbonRendererProperties_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNiagaraRibbonRendererProperties();
	ENGINE_API class UClass* Z_Construct_UClass_UNiagaraSpriteRendererProperties_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNiagaraSpriteRendererProperties();
	ENGINE_API class UClass* Z_Construct_UClass_UObjectLibrary_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UObjectLibrary();
	ENGINE_API class UClass* Z_Construct_UClass_UObjectReferencer_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UObjectReferencer();
	ENGINE_API class UClass* Z_Construct_UClass_UOnlineSession_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UOnlineSession();
	ENGINE_API class UClass* Z_Construct_UClass_UPackageMapClient_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPackageMapClient();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EEmitterRenderMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EParticleSubUVInterpMethod();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EParticleBurstMethod();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FParticleBurst();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleEmitter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleEmitter();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EParticleScreenAlignment();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleSpriteEmitter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleSpriteEmitter();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleLODLevel_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleLODLevel();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EParticleSourceSelectionMethod();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EModuleType();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FParticleRandomSeedInfo();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FParticleCurvePair();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModule_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModule();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAccelerationBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAccelerationBase();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAcceleration_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAcceleration();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAccelerationConstant_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAccelerationConstant();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAccelerationDrag_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAccelerationDrag();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAccelerationDragScaleOverLife_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAccelerationDragScaleOverLife();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAccelerationOverLifetime_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAccelerationOverLifetime();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAttractorBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAttractorBase();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAttractorLine_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAttractorLine();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAttractorParticleSelectionMethod();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAttractorParticle_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAttractorParticle();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAttractorPoint_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAttractorPoint();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAttractorPointGravity_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAttractorPointGravity();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_Beam2SourceTargetTangentMethod();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_Beam2SourceTargetMethod();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleBeamBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleBeamBase();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_BeamModifierType();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBeamModifierOptions();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleBeamModifier_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleBeamModifier();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleBeamNoise_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleBeamNoise();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleBeamSource_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleBeamSource();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleBeamTarget_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleBeamTarget();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleCameraBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleCameraBase();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EParticleCameraOffsetUpdateMethod();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleCameraOffset_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleCameraOffset();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EParticleCollisionComplete();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleCollisionBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleCollisionBase();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleCollision_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleCollision();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EParticleCollisionResponse();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleCollisionGPU_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleCollisionGPU();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleColorBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleColorBase();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleColor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleColor();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleColor_Seeded_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleColor_Seeded();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleColorOverLife_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleColorOverLife();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleColorScaleOverLife_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleColorScaleOverLife();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleEventBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleEventBase();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FParticleEvent_GenerateInfo();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleEventGenerator_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleEventGenerator();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleEventReceiverBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleEventReceiverBase();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleEventReceiverKillParticles_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleEventReceiverKillParticles();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleEventReceiverSpawn_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleEventReceiverSpawn();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleKillBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleKillBase();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleKillBox_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleKillBox();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleKillHeight_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleKillHeight();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLifetimeBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLifetimeBase();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLifetime_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLifetime();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLifetime_Seeded_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLifetime_Seeded();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLightBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLightBase();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLight_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLight();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLight_Seeded_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLight_Seeded();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationBase();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocation_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocation();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocation_Seeded_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocation_Seeded();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationWorldOffset_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationWorldOffset();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationWorldOffset_Seeded_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationWorldOffset_Seeded();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ELocationBoneSocketSelectionMethod();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ELocationBoneSocketSource();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FLocationBoneSocketInfo();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationBoneSocket_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationBoneSocket();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationDirect_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationDirect();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ELocationEmitterSelectionMethod();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationEmitter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationEmitter();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationEmitterDirect_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationEmitterDirect();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationPrimitiveBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationPrimitiveBase();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_CylinderHeightAxis();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationPrimitiveCylinder_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationPrimitiveCylinder();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationPrimitiveCylinder_Seeded_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationPrimitiveCylinder_Seeded();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationPrimitiveSphere_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationPrimitiveSphere();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationPrimitiveSphere_Seeded_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationPrimitiveSphere_Seeded();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationPrimitiveTriangle_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationPrimitiveTriangle();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ELocationSkelVertSurfaceSource();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationSkelVertSurface_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationSkelVertSurface();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModulePivotOffset_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModulePivotOffset();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSourceMovement_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSourceMovement();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleMaterialBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleMaterialBase();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleMeshMaterial_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleMeshMaterial();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleOrbitBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleOrbitBase();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EOrbitChainMode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FOrbitOptions();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleOrbit_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleOrbit();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleOrientationBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleOrientationBase();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EParticleAxisLock();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleOrientationAxisLock_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleOrientationAxisLock();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleParameterBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleParameterBase();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EEmitterDynamicParameterValue();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FEmitterDynamicParameter();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleParameterDynamic_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleParameterDynamic();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleParameterDynamic_Seeded_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleParameterDynamic_Seeded();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EEmitterNormalsMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EParticleSortMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EParticleUVFlipMode();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleRequired_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleRequired();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleRotationBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleRotationBase();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleMeshRotation_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleMeshRotation();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleMeshRotation_Seeded_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleMeshRotation_Seeded();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleRotation_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleRotation();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleRotation_Seeded_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleRotation_Seeded();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleRotationOverLifetime_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleRotationOverLifetime();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleRotationRateBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleRotationRateBase();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleMeshRotationRate_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleMeshRotationRate();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleRotationRate_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleRotationRate();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleMeshRotationRate_Seeded_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleMeshRotationRate_Seeded();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleMeshRotationRateMultiplyLife_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleMeshRotationRateMultiplyLife();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleMeshRotationRateOverLife_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleMeshRotationRateOverLife();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleRotationRate_Seeded_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleRotationRate_Seeded();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleRotationRateMultiplyLife_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleRotationRateMultiplyLife();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSizeBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSizeBase();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSize_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSize();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSize_Seeded_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSize_Seeded();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSizeMultiplyLife_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSizeMultiplyLife();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSizeScale_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSizeScale();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSizeScaleBySpeed_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSizeScaleBySpeed();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSpawnBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSpawnBase();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSpawn_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSpawn();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSpawnPerUnit_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSpawnPerUnit();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSubUVBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSubUVBase();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSubUV_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSubUV();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSubUVMovie_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSubUVMovie();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleTrailBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleTrailBase();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETrail2SourceMethod();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleTrailSource_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleTrailSource();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleTypeDataBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleTypeDataBase();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleTypeDataAnimTrail_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleTypeDataAnimTrail();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EBeamTaperMethod();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EBeam2Method();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBeamTargetData();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleTypeDataBeam2_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleTypeDataBeam2();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FGPUSpriteResourceData();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FGPUSpriteEmitterInfo();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FGPUSpriteLocalVectorFieldInfo();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleTypeDataGpu_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleTypeDataGpu();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMeshCameraFacingOptions();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMeshCameraFacingUpAxis();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMeshScreenAlignment();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleTypeDataMesh_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleTypeDataMesh();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETrailsRenderAxisOption();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleTypeDataRibbon_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleTypeDataRibbon();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVectorFieldBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVectorFieldBase();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVectorFieldGlobal_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVectorFieldGlobal();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVectorFieldLocal_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVectorFieldLocal();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVectorFieldRotation_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVectorFieldRotation();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVectorFieldRotationRate_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVectorFieldRotationRate();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVectorFieldScale_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVectorFieldScale();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVectorFieldScaleOverLife_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVectorFieldScaleOverLife();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVelocityBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVelocityBase();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVelocity_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVelocity();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVelocity_Seeded_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVelocity_Seeded();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVelocityCone_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVelocityCone();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVelocityInheritParent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVelocityInheritParent();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVelocityOverLifetime_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVelocityOverLifetime();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleEventSendToGame_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleEventSendToGame();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FParticleSystemReplayFrame();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FParticleEmitterReplayFrame();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleSystemReplay_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleSystemReplay();
	ENGINE_API class UClass* Z_Construct_UClass_UDemoPendingNetGame_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDemoPendingNetGame();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTireFrictionScalePair();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicalMaterial_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicalMaterial();
	ENGINE_API class UClass* Z_Construct_UClass_UDEPRECATED_PhysicalMaterialPropertyBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDEPRECATED_PhysicalMaterialPropertyBase();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicsAsset_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicsAsset();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicsCollisionHandler_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicsCollisionHandler();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicsConstraintTemplate_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicsConstraintTemplate();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicsSerializer_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicsSerializer();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_PlatformInterfaceDelegate__DelegateSignature();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EPlatformInterfaceDataType();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDelegateArray();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPlatformInterfaceDelegateResult();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPlatformInterfaceData();
	ENGINE_API class UClass* Z_Construct_UClass_UPlatformInterfaceBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPlatformInterfaceBase();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ECloudStorageDelegate();
	ENGINE_API class UClass* Z_Construct_UClass_UCloudStorageBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCloudStorageBase();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_OnUserClosedAdvertisement__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_OnUserClickedBanner__DelegateSignature();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAdManagerDelegate();
	ENGINE_API class UClass* Z_Construct_UClass_UInGameAdManager_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInGameAdManager();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMicroTransactionResult();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMicroTransactionDelegate();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPurchaseInfo();
	ENGINE_API class UClass* Z_Construct_UClass_UMicroTransactionBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMicroTransactionBase();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETwitterIntegrationDelegate();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETwitterRequestMethod();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTwitterIntegrationBase_AuthorizeAccounts();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTwitterIntegrationBase_CanShowTweetUI();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTwitterIntegrationBase_GetAccountName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTwitterIntegrationBase_GetNumAccounts();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTwitterIntegrationBase_Init();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTwitterIntegrationBase_ShowTweetUI();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTwitterIntegrationBase_TwitterRequest();
	ENGINE_API class UClass* Z_Construct_UClass_UTwitterIntegrationBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UTwitterIntegrationBase();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPlatformInterfaceWebResponse_GetHeader();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPlatformInterfaceWebResponse_GetHeaderValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPlatformInterfaceWebResponse_GetNumHeaders();
	ENGINE_API class UClass* Z_Construct_UClass_UPlatformInterfaceWebResponse_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPlatformInterfaceWebResponse();
	ENGINE_API class UClass* Z_Construct_UClass_UPlayer_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPlayer();
	ENGINE_API class UClass* Z_Construct_UClass_ULocalPlayer_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ULocalPlayer();
	ENGINE_API class UClass* Z_Construct_UClass_UNetConnection_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNetConnection();
	ENGINE_API class UClass* Z_Construct_UClass_UChildConnection_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UChildConnection();
	ENGINE_API class UClass* Z_Construct_UClass_UDemoNetConnection_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDemoNetConnection();
	ENGINE_API class UClass* Z_Construct_UClass_UPolys_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPolys();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EReporterLineStyle();
	ENGINE_API class UClass* Z_Construct_UClass_UReporterBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UReporterBase();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ELegendPosition();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EGraphDataStyle();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EGraphAxisStyle();
	ENGINE_API class UClass* Z_Construct_UClass_UReporterGraph_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UReporterGraph();
	ENGINE_API class UClass* Z_Construct_UClass_UReverbEffect_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UReverbEffect();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EConstraintTransform();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EControlConstraint();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTransformBase();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTransformBaseConstraint();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRigTransformConstraint();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNode();
	ENGINE_API class UClass* Z_Construct_UClass_URig_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_URig();
	ENGINE_API class UClass* Z_Construct_UClass_USaveGame_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USaveGame();
	ENGINE_API class UClass* Z_Construct_UClass_UScriptViewportClient_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UScriptViewportClient();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDebugDisplayProperty();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameViewportClient_SetConsoleTarget();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameViewportClient_ShowTitleSafeArea();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameViewportClient_SSSwapControllers();
	ENGINE_API class UClass* Z_Construct_UClass_UGameViewportClient_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UGameViewportClient();
	ENGINE_API class UClass* Z_Construct_UClass_USimpleConstructionScript_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USimpleConstructionScript();
	ENGINE_API class UClass* Z_Construct_UClass_USCS_Node_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USCS_Node();
	ENGINE_API class UClass* Z_Construct_UClass_USelection_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USelection();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EImpactDamageOverride();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDestructibleParameters();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDestructibleSpecialHierarchyDepths();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDestructibleAdvancedParameters();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDestructibleDebrisParameters();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDestructibleDamageParameters();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDestructibleParametersFlag();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDestructibleDepthParameters();
	ENGINE_API class UClass* Z_Construct_UClass_UDestructibleMesh_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDestructibleMesh();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshSocket_GetSocketLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshSocket_InitializeSocketFromLocation();
	ENGINE_API class UClass* Z_Construct_UClass_USkeletalMeshSocket_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USkeletalMeshSocket();
	ENGINE_API class UClass* Z_Construct_UClass_USlateBrushAsset_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USlateBrushAsset();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMaxConcurrentResolutionRule();
	ENGINE_API class UClass* Z_Construct_UClass_USoundBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundBase();
	ENGINE_API class UClass* Z_Construct_UClass_UDialogueSoundWaveProxy_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDialogueSoundWaveProxy();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSoundNodeEditorData();
	ENGINE_API class UClass* Z_Construct_UClass_USoundCue_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundCue();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESoundGroup();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSoundGroup();
	ENGINE_API class UClass* Z_Construct_UClass_USoundGroups_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundGroups();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EDecompressionType();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FStreamedAudioPlatformData();
	ENGINE_API class UClass* Z_Construct_UClass_USoundWave_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundWave();
	ENGINE_API class UClass* Z_Construct_UClass_USoundWaveProcedural_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundWaveProcedural();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAudioOutputTarget();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPassiveSoundMixModifier();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSoundClassProperties();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSoundClassEditorData();
	ENGINE_API class UClass* Z_Construct_UClass_USoundClass_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundClass();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSoundClassAdjuster();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAudioEQEffect();
	ENGINE_API class UClass* Z_Construct_UClass_USoundMix_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundMix();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNode_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNode();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeAssetReferencer_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeAssetReferencer();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeWavePlayer_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeWavePlayer();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeAttenuation_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeAttenuation();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeBranch_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeBranch();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeConcatenator_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeConcatenator();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeDelay_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeDelay();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeDialoguePlayer_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeDialoguePlayer();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDistanceDatum();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeDistanceCrossFade_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeDistanceCrossFade();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeParamCrossFade_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeParamCrossFade();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeDoppler_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeDoppler();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeEnveloper_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeEnveloper();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeGroupControl_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeGroupControl();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeLooping_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeLooping();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeMature_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeMature();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeMixer_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeMixer();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeModulator_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeModulator();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ModulationParamMode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FModulatorContinuousParams();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeModulatorContinuous_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeModulatorContinuous();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeOscillator_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeOscillator();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeQualityLevel_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeQualityLevel();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeRandom_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeRandom();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeSoundClass_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeSoundClass();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeSwitch_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeSwitch();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeWaveParam_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeWaveParam();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EOptimizationType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EImportanceLevel();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ENormalMode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAssetEditorOrbitCameraPosition();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMeshSectionInfoMap();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMeshSectionInfo();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FStaticMeshSourceModel();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FStaticMeshOptimizationSettings();
	ENGINE_API class UFunction* Z_Construct_UFunction_UStaticMesh_GetBoundingBox();
	ENGINE_API class UClass* Z_Construct_UClass_UStaticMesh_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UStaticMesh();
	ENGINE_API class UClass* Z_Construct_UClass_UStaticMeshSocket_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UStaticMeshSocket();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSubsurfaceProfileStruct();
	ENGINE_API class UClass* Z_Construct_UClass_USubsurfaceProfile_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USubsurfaceProfile();
	ENGINE_API class UClass* Z_Construct_UClass_UTextPropertyTestObject_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UTextPropertyTestObject();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETextureSourceFormat();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETextureSourceArtType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETextureMipCount();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ECompositeTextureMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_TextureAddress();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_TextureFilter();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_TextureCompressionSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTexturePlatformData();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTextureSource();
	ENGINE_API class UClass* Z_Construct_UClass_UTexture_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UTexture();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTexture2D_Blueprint_GetSizeX();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTexture2D_Blueprint_GetSizeY();
	ENGINE_API class UClass* Z_Construct_UClass_UTexture2D_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UTexture2D();
	ENGINE_API class UClass* Z_Construct_UClass_ULightMapTexture2D_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ULightMapTexture2D();
	ENGINE_API class UClass* Z_Construct_UClass_UShadowMapTexture2D_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UShadowMapTexture2D();
	ENGINE_API class UClass* Z_Construct_UClass_UTextureLightProfile_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UTextureLightProfile();
	ENGINE_API class UClass* Z_Construct_UClass_UTexture2DDynamic_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UTexture2DDynamic();
	ENGINE_API class UClass* Z_Construct_UClass_UTextureCube_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UTextureCube();
	ENGINE_API class UClass* Z_Construct_UClass_UTextureRenderTarget_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UTextureRenderTarget();
	ENGINE_API class UClass* Z_Construct_UClass_UTextureRenderTarget2D_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UTextureRenderTarget2D();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_OnCanvasRenderTargetUpdate__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCanvasRenderTarget2D_CreateCanvasRenderTarget2D();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCanvasRenderTarget2D_GetSize();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCanvasRenderTarget2D_ReceiveUpdate();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCanvasRenderTarget2D_UpdateResource();
	ENGINE_API class UClass* Z_Construct_UClass_UCanvasRenderTarget2D_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCanvasRenderTarget2D();
	ENGINE_API class UClass* Z_Construct_UClass_UTextureRenderTargetCube_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UTextureRenderTargetCube();
	ENGINE_API class UClass* Z_Construct_UClass_UThumbnailInfo_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UThumbnailInfo();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTTLinearColorTrack();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTTVectorTrack();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTTFloatTrack();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTTEventTrack();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTTTrackBase();
	ENGINE_API class UClass* Z_Construct_UClass_UTimelineTemplate_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UTimelineTemplate();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTouchInputControl();
	ENGINE_API class UClass* Z_Construct_UClass_UTouchInterface_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UTouchInterface();
	ENGINE_API class UClass* Z_Construct_UClass_UUserDefinedEnum_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UUserDefinedEnum();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EUserDefinedStructureStatus();
	ENGINE_API class UClass* Z_Construct_UClass_UUserDefinedStruct_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UUserDefinedStruct();
	ENGINE_API class UClass* Z_Construct_UClass_UVectorField_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UVectorField();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EVectorFieldConstructionOp();
	ENGINE_API class UClass* Z_Construct_UClass_UVectorFieldAnimated_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UVectorFieldAnimated();
	ENGINE_API class UClass* Z_Construct_UClass_UVectorFieldStatic_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UVectorFieldStatic();
	ENGINE_API class UFunction* Z_Construct_UFunction_UVehicleWheel_GetRotationAngle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UVehicleWheel_GetSteerAngle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UVehicleWheel_GetSuspensionOffset();
	ENGINE_API class UClass* Z_Construct_UClass_UVehicleWheel_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UVehicleWheel();
	ENGINE_API class UClass* Z_Construct_UClass_UVertexAnimBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UVertexAnimBase();
	ENGINE_API class UClass* Z_Construct_UClass_UMorphTarget_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMorphTarget();
	ENGINE_API class UClass* Z_Construct_UClass_UVertexAnimation_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UVertexAnimation();
	ENGINE_API class UClass* Z_Construct_UClass_UVisualLoggerAutomationTests_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UVisualLoggerAutomationTests();
	ENGINE_API class UClass* Z_Construct_UClass_UWorldComposition_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UWorldComposition();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EPinHidingMode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_Base();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FExposedValueHandler();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FComponentSpacePoseLink();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPoseLink();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPoseLinkBase();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FInputScaleBias();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_ApplyAdditive();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_AssetPlayerBase();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_BlendListBase();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_BlendListByBool();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_BlendListByEnum();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_BlendListByInt();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_BlendSpacePlayer();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_BlendSpaceEvaluator();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_LayeredBoneBlend();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ERefPoseType();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_MeshSpaceRefPose();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_RefPose();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_Root();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_RotateRootBone();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_RotationOffsetBlendSpace();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_SaveCachedPose();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_SequenceEvaluator();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_SequencePlayer();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_Slot();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_StateMachine();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimationPotentialTransition();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimationActiveTransitionEntry();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EEvaluatorMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EEvaluatorDataSource();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_TransitionPoseEvaluator();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_TransitionResult();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimationNode_TwoWayBlend();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_UseCachedPose();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_ConvertLocalToComponentSpace();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_ConvertComponentToLocalSpace();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ECameraAlphaBlendMode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDummySpacerCameraTypes();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FStreamableManager();
	ENGINE_API class UPackage* Z_Construct_UPackage_Engine();
	UScriptStruct* Z_Construct_UScriptStruct_FAnimationTransitionRule()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimationTransitionRule_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("AnimationTransitionRule"), sizeof(FAnimationTransitionRule), Get_Z_Construct_UScriptStruct_FAnimationTransitionRule_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimationTransitionRule"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FAnimationTransitionRule>, EStructFlags(0x00000001));
			UProperty* NewProp_TransitionIndex = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TransitionIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(TransitionIndex, FAnimationTransitionRule), 0x0000000000000000);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(TransitionReturnVal, FAnimationTransitionRule, bool);
			UProperty* NewProp_TransitionReturnVal = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TransitionReturnVal"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(TransitionReturnVal, FAnimationTransitionRule), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(TransitionReturnVal, FAnimationTransitionRule), sizeof(bool), true);
			UProperty* NewProp_RuleToExecute = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RuleToExecute"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(RuleToExecute, FAnimationTransitionRule), 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimStateMachineTypes.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("This structure represents a baked transition rule inside a state"));
			MetaData->SetValue(NewProp_TransitionIndex, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimStateMachineTypes.h"));
			MetaData->SetValue(NewProp_TransitionReturnVal, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimStateMachineTypes.h"));
			MetaData->SetValue(NewProp_TransitionReturnVal, TEXT("ToolTip"), TEXT("What RuleToExecute must return to take transition (for bidirectional transitions)"));
			MetaData->SetValue(NewProp_RuleToExecute, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimStateMachineTypes.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimationTransitionRule_CRC() { return 3099867819U; }
	UClass* Z_Construct_UClass_UAnimStateMachineTypes_NoRegister()
	{
		return UAnimStateMachineTypes::StaticClass();
	}
	UClass* Z_Construct_UClass_UAnimStateMachineTypes()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UAnimStateMachineTypes::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Animation/AnimStateMachineTypes.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimStateMachineTypes.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UAnimStateMachineTypes(Z_Construct_UClass_UAnimStateMachineTypes, TEXT("UAnimStateMachineTypes"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UAnimStateMachineTypes);
	UFunction* Z_Construct_UDelegateFunction_Engine_OnMontageBlendingOutStartedMCDelegate__DelegateSignature()
	{
		struct _Script_Engine_eventOnMontageBlendingOutStartedMCDelegate_Parms
		{
			UAnimMontage* Montage;
			bool bInterrupted;
		};
		UObject* Outer=Z_Construct_UPackage_Engine();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnMontageBlendingOutStartedMCDelegate__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535, sizeof(_Script_Engine_eventOnMontageBlendingOutStartedMCDelegate_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bInterrupted, _Script_Engine_eventOnMontageBlendingOutStartedMCDelegate_Parms, bool);
			UProperty* NewProp_bInterrupted = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bInterrupted"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bInterrupted, _Script_Engine_eventOnMontageBlendingOutStartedMCDelegate_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bInterrupted, _Script_Engine_eventOnMontageBlendingOutStartedMCDelegate_Parms), sizeof(bool), true);
			UProperty* NewProp_Montage = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Montage"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Montage, _Script_Engine_eventOnMontageBlendingOutStartedMCDelegate_Parms), 0x0000000000000080, Z_Construct_UClass_UAnimMontage_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Delegate for when Montage started to blend out, whether interrupted or finished\nDesiredWeight of this montage becomes 0.f, but this still contributes to the output pose\n\nbInterrupted = true if it was not property finished"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UDelegateFunction_Engine_OnMontageEndedMCDelegate__DelegateSignature()
	{
		struct _Script_Engine_eventOnMontageEndedMCDelegate_Parms
		{
			UAnimMontage* Montage;
			bool bInterrupted;
		};
		UObject* Outer=Z_Construct_UPackage_Engine();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnMontageEndedMCDelegate__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535, sizeof(_Script_Engine_eventOnMontageEndedMCDelegate_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bInterrupted, _Script_Engine_eventOnMontageEndedMCDelegate_Parms, bool);
			UProperty* NewProp_bInterrupted = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bInterrupted"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bInterrupted, _Script_Engine_eventOnMontageEndedMCDelegate_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bInterrupted, _Script_Engine_eventOnMontageEndedMCDelegate_Parms), sizeof(bool), true);
			UProperty* NewProp_Montage = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Montage"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Montage, _Script_Engine_eventOnMontageEndedMCDelegate_Parms), 0x0000000000000080, Z_Construct_UClass_UAnimMontage_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Delegate for when Montage is completed, whether interrupted or finished\nWeight of this montage is 0.f, so it stops contributing to output pose\n\nbInterrupted = true if it was not property finished"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UDelegateFunction_Engine_OnMontageStartedMCDelegate__DelegateSignature()
	{
		struct _Script_Engine_eventOnMontageStartedMCDelegate_Parms
		{
			UAnimMontage* Montage;
		};
		UObject* Outer=Z_Construct_UPackage_Engine();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnMontageStartedMCDelegate__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535, sizeof(_Script_Engine_eventOnMontageStartedMCDelegate_Parms));
			UProperty* NewProp_Montage = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Montage"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Montage, _Script_Engine_eventOnMontageStartedMCDelegate_Parms), 0x0000000000000080, Z_Construct_UClass_UAnimMontage_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Delegate for when Montage is started"));
#endif
		}
		return ReturnFunction;
	}
	UEnum* Z_Construct_UEnum_Engine_EBoneRotationSource()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EBoneRotationSource_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EBoneRotationSource"), 0, Get_Z_Construct_UEnum_Engine_EBoneRotationSource_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EBoneRotationSource"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("BRS_KeepComponentSpaceRotation")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("BRS_KeepLocalSpaceRotation")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("BRS_CopyFromTarget")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("BRS_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BRS_CopyFromTarget.DisplayName"), TEXT("Copy Target Rotation"));
			MetaData->SetValue(ReturnEnum, TEXT("BRS_CopyFromTarget.ToolTip"), TEXT("Copy rotation of target to bone."));
			MetaData->SetValue(ReturnEnum, TEXT("BRS_KeepComponentSpaceRotation.DisplayName"), TEXT("No Change (Preserve Existing Component Space Rotation)"));
			MetaData->SetValue(ReturnEnum, TEXT("BRS_KeepComponentSpaceRotation.ToolTip"), TEXT("Don't change rotation at all."));
			MetaData->SetValue(ReturnEnum, TEXT("BRS_KeepLocalSpaceRotation.DisplayName"), TEXT("Maintain Local Rotation Relative to Parent"));
			MetaData->SetValue(ReturnEnum, TEXT("BRS_KeepLocalSpaceRotation.ToolTip"), TEXT("Keep forward direction vector relative to the parent bone."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Enum for specifying the source of a bone's rotation."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EBoneRotationSource_CRC() { return 1383252413U; }
	UEnum* Z_Construct_UEnum_Engine_EBoneControlSpace()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EBoneControlSpace_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EBoneControlSpace"), 0, Get_Z_Construct_UEnum_Engine_EBoneControlSpace_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EBoneControlSpace"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("BCS_WorldSpace")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("BCS_ComponentSpace")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("BCS_ParentBoneSpace")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("BCS_BoneSpace")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("BCS_MAX")), 4));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BCS_BoneSpace.DisplayName"), TEXT("Bone Space"));
			MetaData->SetValue(ReturnEnum, TEXT("BCS_BoneSpace.ToolTip"), TEXT("Set position of bone in its own reference frame."));
			MetaData->SetValue(ReturnEnum, TEXT("BCS_ComponentSpace.DisplayName"), TEXT("Component Space"));
			MetaData->SetValue(ReturnEnum, TEXT("BCS_ComponentSpace.ToolTip"), TEXT("Set position of bone in SkeletalMeshComponent's reference frame."));
			MetaData->SetValue(ReturnEnum, TEXT("BCS_ParentBoneSpace.DisplayName"), TEXT("Parent Bone Space"));
			MetaData->SetValue(ReturnEnum, TEXT("BCS_ParentBoneSpace.ToolTip"), TEXT("Set position of bone relative to parent bone."));
			MetaData->SetValue(ReturnEnum, TEXT("BCS_WorldSpace.DisplayName"), TEXT("World Space"));
			MetaData->SetValue(ReturnEnum, TEXT("BCS_WorldSpace.ToolTip"), TEXT("Set absolute position of bone in world space."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Enum for controlling which reference frame a controller is applied in."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EBoneControlSpace_CRC() { return 1917459361U; }
	UScriptStruct* Z_Construct_UScriptStruct_FSlotEvaluationPose()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FSlotEvaluationPose_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("SlotEvaluationPose"), sizeof(FSlotEvaluationPose), Get_Z_Construct_UScriptStruct_FSlotEvaluationPose_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SlotEvaluationPose"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FSlotEvaluationPose>, EStructFlags(0x00000001));
			UProperty* NewProp_Weight = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Weight"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Weight, FSlotEvaluationPose), 0x0000000000000000);
			UProperty* NewProp_AdditiveType = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("AdditiveType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(AdditiveType, FSlotEvaluationPose), 0x0000000000000000, Z_Construct_UEnum_Engine_EAdditiveAnimationType());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Helper struct for Slot node pose evaluation."));
			MetaData->SetValue(NewProp_Weight, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
			MetaData->SetValue(NewProp_Weight, TEXT("ToolTip"), TEXT("Weight of pose"));
			MetaData->SetValue(NewProp_AdditiveType, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
			MetaData->SetValue(NewProp_AdditiveType, TEXT("ToolTip"), TEXT("Type of additive for pose"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FSlotEvaluationPose_CRC() { return 4102340690U; }
	UScriptStruct* Z_Construct_UScriptStruct_FPerBoneBlendWeights()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FPerBoneBlendWeights_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("PerBoneBlendWeights"), sizeof(FPerBoneBlendWeights), Get_Z_Construct_UScriptStruct_FPerBoneBlendWeights_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PerBoneBlendWeights"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FPerBoneBlendWeights>, EStructFlags(0x00000001));
			UProperty* NewProp_BoneBlendWeights = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BoneBlendWeights"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(BoneBlendWeights, FPerBoneBlendWeights), 0x0000000000000000);
			UProperty* NewProp_BoneBlendWeights_Inner = new(EC_InternalUseOnlyConstructor, NewProp_BoneBlendWeights, TEXT("BoneBlendWeights"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FPerBoneBlendWeight());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
			MetaData->SetValue(NewProp_BoneBlendWeights, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FPerBoneBlendWeights_CRC() { return 2173367313U; }
	UScriptStruct* Z_Construct_UScriptStruct_FPerBoneBlendWeight()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FPerBoneBlendWeight_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("PerBoneBlendWeight"), sizeof(FPerBoneBlendWeight), Get_Z_Construct_UScriptStruct_FPerBoneBlendWeight_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PerBoneBlendWeight"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FPerBoneBlendWeight>, EStructFlags(0x00000001));
			UProperty* NewProp_BlendWeight = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BlendWeight"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(BlendWeight, FPerBoneBlendWeight), 0x0000000000000000);
			UProperty* NewProp_SourceIndex = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SourceIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(SourceIndex, FPerBoneBlendWeight), 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
			MetaData->SetValue(NewProp_BlendWeight, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
			MetaData->SetValue(NewProp_SourceIndex, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
			MetaData->SetValue(NewProp_SourceIndex, TEXT("ToolTip"), TEXT("Source index of the buffer."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FPerBoneBlendWeight_CRC() { return 3859542730U; }
	UScriptStruct* Z_Construct_UScriptStruct_FA2CSPose()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FA2CSPose_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("A2CSPose"), sizeof(FA2CSPose), Get_Z_Construct_UScriptStruct_FA2CSPose_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("A2CSPose"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FA2Pose(), new UScriptStruct::TCppStructOps<FA2CSPose>, EStructFlags(0x00000201));
			UProperty* NewProp_ComponentSpaceFlags = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ComponentSpaceFlags"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ComponentSpaceFlags, FA2CSPose), 0x0000000000000000);
			UProperty* NewProp_ComponentSpaceFlags_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ComponentSpaceFlags, TEXT("ComponentSpaceFlags"), RF_Public|RF_Transient|RF_Native) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Component space poses."));
			MetaData->SetValue(NewProp_ComponentSpaceFlags, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
			MetaData->SetValue(NewProp_ComponentSpaceFlags, TEXT("ToolTip"), TEXT("Once evaluated to be mesh space, this flag will be set."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FA2CSPose_CRC() { return 368350561U; }
	UScriptStruct* Z_Construct_UScriptStruct_FA2Pose()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FA2Pose_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("A2Pose"), sizeof(FA2Pose), Get_Z_Construct_UScriptStruct_FA2Pose_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("A2Pose"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FA2Pose>, EStructFlags(0x00000001));
			UProperty* NewProp_Bones = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Bones"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Bones, FA2Pose), 0x0000000000000000);
			UProperty* NewProp_Bones_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Bones, TEXT("Bones"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FTransform());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
			MetaData->SetValue(NewProp_Bones, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FA2Pose_CRC() { return 1625284328U; }
	UFunction* Z_Construct_UFunction_UAnimInstance_AnimNotify_Sound()
	{
		struct AnimInstance_eventAnimNotify_Sound_Parms
		{
			const UAnimNotify* Notify;
		};
		UObject* Outer=Z_Construct_UClass_UAnimInstance();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNotify_Sound"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020401, 65535, sizeof(AnimInstance_eventAnimNotify_Sound_Parms));
			UProperty* NewProp_Notify = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Notify"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Notify, AnimInstance_eventAnimNotify_Sound_Parms), 0x0000000000000080, Z_Construct_UClass_UAnimNotify_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimInstance_BlueprintInitializeAnimation()
	{
		UObject* Outer=Z_Construct_UClass_UAnimInstance();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BlueprintInitializeAnimation"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08020800, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Executed when the Animation is initialized"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimInstance_BlueprintPostEvaluateAnimation()
	{
		UObject* Outer=Z_Construct_UClass_UAnimInstance();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BlueprintPostEvaluateAnimation"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08020800, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Executed after the Animation is evaluated"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimInstance_BlueprintUpdateAnimation()
	{
		UObject* Outer=Z_Construct_UClass_UAnimInstance();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BlueprintUpdateAnimation"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08020800, 65535, sizeof(AnimInstance_eventBlueprintUpdateAnimation_Parms));
			UProperty* NewProp_DeltaTimeX = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DeltaTimeX"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DeltaTimeX, AnimInstance_eventBlueprintUpdateAnimation_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Executed when the Animation is updated"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimInstance_CalculateDirection()
	{
		struct AnimInstance_eventCalculateDirection_Parms
		{
			FVector Velocity;
			FRotator BaseRotation;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAnimInstance();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CalculateDirection"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C20401, 65535, sizeof(AnimInstance_eventCalculateDirection_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, AnimInstance_eventCalculateDirection_Parms), 0x0000000000000580);
			UProperty* NewProp_BaseRotation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("BaseRotation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(BaseRotation, AnimInstance_eventCalculateDirection_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_Velocity = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Velocity"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Velocity, AnimInstance_eventCalculateDirection_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Animation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns degree of the angle betwee velocity and Rotation forward vector\nThe range of return will be from [-180, 180], and this can be used to feed blendspace directional value"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimInstance_ClearMorphTargets()
	{
		UObject* Outer=Z_Construct_UClass_UAnimInstance();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ClearMorphTargets"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Animation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Clears the current morph targets."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimInstance_GetAnimAssetPlayerLength()
	{
		struct AnimInstance_eventGetAnimAssetPlayerLength_Parms
		{
			UAnimationAsset* AnimAsset;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAnimInstance();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetAnimAssetPlayerLength"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(AnimInstance_eventGetAnimAssetPlayerLength_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, AnimInstance_eventGetAnimAssetPlayerLength_Parms), 0x0000000000000580);
			UProperty* NewProp_AnimAsset = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AnimAsset"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(AnimAsset, AnimInstance_eventGetAnimAssetPlayerLength_Parms), 0x0000000000000080, Z_Construct_UClass_UAnimationAsset_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Animation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimInstance_GetAnimAssetPlayerTimeFraction()
	{
		struct AnimInstance_eventGetAnimAssetPlayerTimeFraction_Parms
		{
			UAnimationAsset* AnimAsset;
			float CurrentTime;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAnimInstance();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetAnimAssetPlayerTimeFraction"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(AnimInstance_eventGetAnimAssetPlayerTimeFraction_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, AnimInstance_eventGetAnimAssetPlayerTimeFraction_Parms), 0x0000000000000580);
			UProperty* NewProp_CurrentTime = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CurrentTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(CurrentTime, AnimInstance_eventGetAnimAssetPlayerTimeFraction_Parms), 0x0000000000000080);
			UProperty* NewProp_AnimAsset = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AnimAsset"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(AnimAsset, AnimInstance_eventGetAnimAssetPlayerTimeFraction_Parms), 0x0000000000000080, Z_Construct_UClass_UAnimationAsset_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Animation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimInstance_GetAnimAssetPlayerTimeFromEnd()
	{
		struct AnimInstance_eventGetAnimAssetPlayerTimeFromEnd_Parms
		{
			UAnimationAsset* AnimAsset;
			float CurrentTime;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAnimInstance();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetAnimAssetPlayerTimeFromEnd"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14020401, 65535, sizeof(AnimInstance_eventGetAnimAssetPlayerTimeFromEnd_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, AnimInstance_eventGetAnimAssetPlayerTimeFromEnd_Parms), 0x0000000000000580);
			UProperty* NewProp_CurrentTime = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CurrentTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(CurrentTime, AnimInstance_eventGetAnimAssetPlayerTimeFromEnd_Parms), 0x0000000000000080);
			UProperty* NewProp_AnimAsset = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AnimAsset"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(AnimAsset, AnimInstance_eventGetAnimAssetPlayerTimeFromEnd_Parms), 0x0000000000000080, Z_Construct_UClass_UAnimationAsset_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Animation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimInstance_GetAnimAssetPlayerTimeFromEndFraction()
	{
		struct AnimInstance_eventGetAnimAssetPlayerTimeFromEndFraction_Parms
		{
			UAnimationAsset* AnimAsset;
			float CurrentTime;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAnimInstance();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetAnimAssetPlayerTimeFromEndFraction"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(AnimInstance_eventGetAnimAssetPlayerTimeFromEndFraction_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, AnimInstance_eventGetAnimAssetPlayerTimeFromEndFraction_Parms), 0x0000000000000580);
			UProperty* NewProp_CurrentTime = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CurrentTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(CurrentTime, AnimInstance_eventGetAnimAssetPlayerTimeFromEndFraction_Parms), 0x0000000000000080);
			UProperty* NewProp_AnimAsset = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AnimAsset"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(AnimAsset, AnimInstance_eventGetAnimAssetPlayerTimeFromEndFraction_Parms), 0x0000000000000080, Z_Construct_UClass_UAnimationAsset_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Animation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimInstance_GetCurrentStateElapsedTime()
	{
		struct AnimInstance_eventGetCurrentStateElapsedTime_Parms
		{
			int32 MachineIndex;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAnimInstance();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetCurrentStateElapsedTime"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14020401, 65535, sizeof(AnimInstance_eventGetCurrentStateElapsedTime_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, AnimInstance_eventGetCurrentStateElapsedTime_Parms), 0x0000000000000580);
			UProperty* NewProp_MachineIndex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MachineIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MachineIndex, AnimInstance_eventGetCurrentStateElapsedTime_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Animation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimInstance_GetCurrentStateName()
	{
		struct AnimInstance_eventGetCurrentStateName_Parms
		{
			int32 MachineIndex;
			FName ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAnimInstance();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetCurrentStateName"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14020401, 65535, sizeof(AnimInstance_eventGetCurrentStateName_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(ReturnValue, AnimInstance_eventGetCurrentStateName_Parms), 0x0000000000000580);
			UProperty* NewProp_MachineIndex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MachineIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MachineIndex, AnimInstance_eventGetCurrentStateName_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AnimGetter"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Animation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the name of a currently active state in a state machine."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimInstance_GetCurveValue()
	{
		struct AnimInstance_eventGetCurveValue_Parms
		{
			FName CurveName;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAnimInstance();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetCurveValue"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14020401, 65535, sizeof(AnimInstance_eventGetCurveValue_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, AnimInstance_eventGetCurveValue_Parms), 0x0000000000000580);
			UProperty* NewProp_CurveName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CurveName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(CurveName, AnimInstance_eventGetCurveValue_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Animation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the value of a named curve."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimInstance_GetInstanceAssetPlayerLength()
	{
		struct AnimInstance_eventGetInstanceAssetPlayerLength_Parms
		{
			int32 AssetPlayerIndex;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAnimInstance();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetInstanceAssetPlayerLength"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14020401, 65535, sizeof(AnimInstance_eventGetInstanceAssetPlayerLength_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, AnimInstance_eventGetInstanceAssetPlayerLength_Parms), 0x0000000000000580);
			UProperty* NewProp_AssetPlayerIndex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AssetPlayerIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(AssetPlayerIndex, AnimInstance_eventGetInstanceAssetPlayerLength_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AnimGetter"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Asset Player"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Length"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the length in seconds of the asset referenced in an asset player node"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimInstance_GetInstanceAssetPlayerTime()
	{
		struct AnimInstance_eventGetInstanceAssetPlayerTime_Parms
		{
			int32 AssetPlayerIndex;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAnimInstance();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetInstanceAssetPlayerTime"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14020401, 65535, sizeof(AnimInstance_eventGetInstanceAssetPlayerTime_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, AnimInstance_eventGetInstanceAssetPlayerTime_Parms), 0x0000000000000580);
			UProperty* NewProp_AssetPlayerIndex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AssetPlayerIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(AssetPlayerIndex, AnimInstance_eventGetInstanceAssetPlayerTime_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AnimGetter"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Asset Player"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Current Time"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get the current accumulated time in seconds for an asset player node"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimInstance_GetInstanceAssetPlayerTimeFraction()
	{
		struct AnimInstance_eventGetInstanceAssetPlayerTimeFraction_Parms
		{
			int32 AssetPlayerIndex;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAnimInstance();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetInstanceAssetPlayerTimeFraction"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14020401, 65535, sizeof(AnimInstance_eventGetInstanceAssetPlayerTimeFraction_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, AnimInstance_eventGetInstanceAssetPlayerTimeFraction_Parms), 0x0000000000000580);
			UProperty* NewProp_AssetPlayerIndex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AssetPlayerIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(AssetPlayerIndex, AnimInstance_eventGetInstanceAssetPlayerTimeFraction_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AnimGetter"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Asset Player"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Current Time (ratio)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get the current accumulated time as a fraction for an asset player node"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimInstance_GetInstanceAssetPlayerTimeFromEnd()
	{
		struct AnimInstance_eventGetInstanceAssetPlayerTimeFromEnd_Parms
		{
			int32 AssetPlayerIndex;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAnimInstance();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetInstanceAssetPlayerTimeFromEnd"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14020401, 65535, sizeof(AnimInstance_eventGetInstanceAssetPlayerTimeFromEnd_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, AnimInstance_eventGetInstanceAssetPlayerTimeFromEnd_Parms), 0x0000000000000580);
			UProperty* NewProp_AssetPlayerIndex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AssetPlayerIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(AssetPlayerIndex, AnimInstance_eventGetInstanceAssetPlayerTimeFromEnd_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AnimGetter"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Asset Player"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Time Remaining"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get the time in seconds from the end of an animation in an asset player node"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimInstance_GetInstanceAssetPlayerTimeFromEndFraction()
	{
		struct AnimInstance_eventGetInstanceAssetPlayerTimeFromEndFraction_Parms
		{
			int32 AssetPlayerIndex;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAnimInstance();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetInstanceAssetPlayerTimeFromEndFraction"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14020401, 65535, sizeof(AnimInstance_eventGetInstanceAssetPlayerTimeFromEndFraction_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, AnimInstance_eventGetInstanceAssetPlayerTimeFromEndFraction_Parms), 0x0000000000000580);
			UProperty* NewProp_AssetPlayerIndex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AssetPlayerIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(AssetPlayerIndex, AnimInstance_eventGetInstanceAssetPlayerTimeFromEndFraction_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AnimGetter"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Asset Player"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Time Remaining (ratio)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get the time as a fraction of the asset length of an animation in an asset player node"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimInstance_GetInstanceCurrentStateElapsedTime()
	{
		struct AnimInstance_eventGetInstanceCurrentStateElapsedTime_Parms
		{
			int32 MachineIndex;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAnimInstance();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetInstanceCurrentStateElapsedTime"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14020401, 65535, sizeof(AnimInstance_eventGetInstanceCurrentStateElapsedTime_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, AnimInstance_eventGetInstanceCurrentStateElapsedTime_Parms), 0x0000000000000580);
			UProperty* NewProp_MachineIndex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MachineIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MachineIndex, AnimInstance_eventGetInstanceCurrentStateElapsedTime_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AnimGetter"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("States"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Current State Time"));
			MetaData->SetValue(ReturnFunction, TEXT("GetterContext"), TEXT("Transition"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get the current elapsed time of a state within the specified state machine"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimInstance_GetInstanceStateWeight()
	{
		struct AnimInstance_eventGetInstanceStateWeight_Parms
		{
			int32 MachineIndex;
			int32 StateIndex;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAnimInstance();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetInstanceStateWeight"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14020401, 65535, sizeof(AnimInstance_eventGetInstanceStateWeight_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, AnimInstance_eventGetInstanceStateWeight_Parms), 0x0000000000000580);
			UProperty* NewProp_StateIndex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("StateIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(StateIndex, AnimInstance_eventGetInstanceStateWeight_Parms), 0x0000000000000080);
			UProperty* NewProp_MachineIndex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MachineIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MachineIndex, AnimInstance_eventGetInstanceStateWeight_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AnimGetter"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("States"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("State Weight"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get the blend weight of a specified state"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimInstance_GetInstanceTransitionCrossfadeDuration()
	{
		struct AnimInstance_eventGetInstanceTransitionCrossfadeDuration_Parms
		{
			int32 MachineIndex;
			int32 TransitionIndex;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAnimInstance();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetInstanceTransitionCrossfadeDuration"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14020401, 65535, sizeof(AnimInstance_eventGetInstanceTransitionCrossfadeDuration_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, AnimInstance_eventGetInstanceTransitionCrossfadeDuration_Parms), 0x0000000000000580);
			UProperty* NewProp_TransitionIndex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TransitionIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(TransitionIndex, AnimInstance_eventGetInstanceTransitionCrossfadeDuration_Parms), 0x0000000000000080);
			UProperty* NewProp_MachineIndex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MachineIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MachineIndex, AnimInstance_eventGetInstanceTransitionCrossfadeDuration_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AnimGetter"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Transitions"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Get Transition Crossfade Duration"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get the crossfade duration of a specified transition"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimInstance_GetInstanceTransitionTimeElapsed()
	{
		struct AnimInstance_eventGetInstanceTransitionTimeElapsed_Parms
		{
			int32 MachineIndex;
			int32 TransitionIndex;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAnimInstance();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetInstanceTransitionTimeElapsed"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14020401, 65535, sizeof(AnimInstance_eventGetInstanceTransitionTimeElapsed_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, AnimInstance_eventGetInstanceTransitionTimeElapsed_Parms), 0x0000000000000580);
			UProperty* NewProp_TransitionIndex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TransitionIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(TransitionIndex, AnimInstance_eventGetInstanceTransitionTimeElapsed_Parms), 0x0000000000000080);
			UProperty* NewProp_MachineIndex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MachineIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MachineIndex, AnimInstance_eventGetInstanceTransitionTimeElapsed_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AnimGetter"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Transitions"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Get Transition Time Elapsed"));
			MetaData->SetValue(ReturnFunction, TEXT("GetterContext"), TEXT("CustomBlend"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get the elapsed time in seconds of a specified transition"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimInstance_GetInstanceTransitionTimeElapsedFraction()
	{
		struct AnimInstance_eventGetInstanceTransitionTimeElapsedFraction_Parms
		{
			int32 MachineIndex;
			int32 TransitionIndex;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAnimInstance();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetInstanceTransitionTimeElapsedFraction"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14020401, 65535, sizeof(AnimInstance_eventGetInstanceTransitionTimeElapsedFraction_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, AnimInstance_eventGetInstanceTransitionTimeElapsedFraction_Parms), 0x0000000000000580);
			UProperty* NewProp_TransitionIndex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TransitionIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(TransitionIndex, AnimInstance_eventGetInstanceTransitionTimeElapsedFraction_Parms), 0x0000000000000080);
			UProperty* NewProp_MachineIndex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MachineIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MachineIndex, AnimInstance_eventGetInstanceTransitionTimeElapsedFraction_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AnimGetter"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Transitions"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Get Transition Time Elapsed (ratio)"));
			MetaData->SetValue(ReturnFunction, TEXT("GetterContext"), TEXT("CustomBlend"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get the elapsed time as a fraction of the crossfade duration of a specified transition"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimInstance_GetOwningActor()
	{
		struct AnimInstance_eventGetOwningActor_Parms
		{
			AActor* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAnimInstance();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetOwningActor"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(AnimInstance_eventGetOwningActor_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, AnimInstance_eventGetOwningActor_Parms), 0x0000000000000580, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Animation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the owning actor of this AnimInstance"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimInstance_GetOwningComponent()
	{
		struct AnimInstance_eventGetOwningComponent_Parms
		{
			USkeletalMeshComponent* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAnimInstance();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetOwningComponent"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(AnimInstance_eventGetOwningComponent_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, AnimInstance_eventGetOwningComponent_Parms), 0x0000000000080588, Z_Construct_UClass_USkeletalMeshComponent_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Animation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the skeletal mesh component that has created this AnimInstance"));
			MetaData->SetValue(NewProp_ReturnValue, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimInstance_GetRelevantAnimLength()
	{
		struct AnimInstance_eventGetRelevantAnimLength_Parms
		{
			int32 MachineIndex;
			int32 StateIndex;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAnimInstance();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetRelevantAnimLength"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14020401, 65535, sizeof(AnimInstance_eventGetRelevantAnimLength_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, AnimInstance_eventGetRelevantAnimLength_Parms), 0x0000000000000580);
			UProperty* NewProp_StateIndex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("StateIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(StateIndex, AnimInstance_eventGetRelevantAnimLength_Parms), 0x0000000000000080);
			UProperty* NewProp_MachineIndex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MachineIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MachineIndex, AnimInstance_eventGetRelevantAnimLength_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AnimGetter"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Asset Player"));
			MetaData->SetValue(ReturnFunction, TEXT("GetterContext"), TEXT("Transition"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get the length in seconds of the most relevant animation in the source state"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimInstance_GetRelevantAnimTime()
	{
		struct AnimInstance_eventGetRelevantAnimTime_Parms
		{
			int32 MachineIndex;
			int32 StateIndex;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAnimInstance();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetRelevantAnimTime"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14020401, 65535, sizeof(AnimInstance_eventGetRelevantAnimTime_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, AnimInstance_eventGetRelevantAnimTime_Parms), 0x0000000000000580);
			UProperty* NewProp_StateIndex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("StateIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(StateIndex, AnimInstance_eventGetRelevantAnimTime_Parms), 0x0000000000000080);
			UProperty* NewProp_MachineIndex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MachineIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MachineIndex, AnimInstance_eventGetRelevantAnimTime_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AnimGetter"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Asset Player"));
			MetaData->SetValue(ReturnFunction, TEXT("GetterContext"), TEXT("Transition"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get the current accumulated time in seconds for the most relevant animation in the source state"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimInstance_GetRelevantAnimTimeFraction()
	{
		struct AnimInstance_eventGetRelevantAnimTimeFraction_Parms
		{
			int32 MachineIndex;
			int32 StateIndex;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAnimInstance();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetRelevantAnimTimeFraction"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14020401, 65535, sizeof(AnimInstance_eventGetRelevantAnimTimeFraction_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, AnimInstance_eventGetRelevantAnimTimeFraction_Parms), 0x0000000000000580);
			UProperty* NewProp_StateIndex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("StateIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(StateIndex, AnimInstance_eventGetRelevantAnimTimeFraction_Parms), 0x0000000000000080);
			UProperty* NewProp_MachineIndex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MachineIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MachineIndex, AnimInstance_eventGetRelevantAnimTimeFraction_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AnimGetter"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Asset Player"));
			MetaData->SetValue(ReturnFunction, TEXT("GetterContext"), TEXT("Transition"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get the current accumulated time as a fraction of the length of the most relevant animation in the source state"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimInstance_GetRelevantAnimTimeRemaining()
	{
		struct AnimInstance_eventGetRelevantAnimTimeRemaining_Parms
		{
			int32 MachineIndex;
			int32 StateIndex;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAnimInstance();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetRelevantAnimTimeRemaining"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14020401, 65535, sizeof(AnimInstance_eventGetRelevantAnimTimeRemaining_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, AnimInstance_eventGetRelevantAnimTimeRemaining_Parms), 0x0000000000000580);
			UProperty* NewProp_StateIndex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("StateIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(StateIndex, AnimInstance_eventGetRelevantAnimTimeRemaining_Parms), 0x0000000000000080);
			UProperty* NewProp_MachineIndex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MachineIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MachineIndex, AnimInstance_eventGetRelevantAnimTimeRemaining_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AnimGetter"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Asset Player"));
			MetaData->SetValue(ReturnFunction, TEXT("GetterContext"), TEXT("Transition"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get the time remaining in seconds for the most relevant animation in the source state"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimInstance_GetRelevantAnimTimeRemainingFraction()
	{
		struct AnimInstance_eventGetRelevantAnimTimeRemainingFraction_Parms
		{
			int32 MachineIndex;
			int32 StateIndex;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAnimInstance();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetRelevantAnimTimeRemainingFraction"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14020401, 65535, sizeof(AnimInstance_eventGetRelevantAnimTimeRemainingFraction_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, AnimInstance_eventGetRelevantAnimTimeRemainingFraction_Parms), 0x0000000000000580);
			UProperty* NewProp_StateIndex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("StateIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(StateIndex, AnimInstance_eventGetRelevantAnimTimeRemainingFraction_Parms), 0x0000000000000080);
			UProperty* NewProp_MachineIndex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MachineIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MachineIndex, AnimInstance_eventGetRelevantAnimTimeRemainingFraction_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AnimGetter"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Asset Player"));
			MetaData->SetValue(ReturnFunction, TEXT("GetterContext"), TEXT("Transition"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get the time remaining as a fraction of the duration for the most relevant animation in the source state"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimInstance_GetStateWeight()
	{
		struct AnimInstance_eventGetStateWeight_Parms
		{
			int32 MachineIndex;
			int32 StateIndex;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAnimInstance();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetStateWeight"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14020401, 65535, sizeof(AnimInstance_eventGetStateWeight_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, AnimInstance_eventGetStateWeight_Parms), 0x0000000000000580);
			UProperty* NewProp_StateIndex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("StateIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(StateIndex, AnimInstance_eventGetStateWeight_Parms), 0x0000000000000080);
			UProperty* NewProp_MachineIndex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MachineIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MachineIndex, AnimInstance_eventGetStateWeight_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Animation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimInstance_IsPlayingSlotAnimation()
	{
		struct AnimInstance_eventIsPlayingSlotAnimation_Parms
		{
			UAnimSequenceBase* Asset;
			FName SlotNodeName;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAnimInstance();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsPlayingSlotAnimation"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(AnimInstance_eventIsPlayingSlotAnimation_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, AnimInstance_eventIsPlayingSlotAnimation_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, AnimInstance_eventIsPlayingSlotAnimation_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, AnimInstance_eventIsPlayingSlotAnimation_Parms), sizeof(bool), true);
			UProperty* NewProp_SlotNodeName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SlotNodeName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(SlotNodeName, AnimInstance_eventIsPlayingSlotAnimation_Parms), 0x0000000000000080);
			UProperty* NewProp_Asset = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Asset"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Asset, AnimInstance_eventIsPlayingSlotAnimation_Parms), 0x0000000000000080, Z_Construct_UClass_UAnimSequenceBase_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Animation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Return true if it's playing the slot animation"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimInstance_LockAIResources()
	{
		struct AnimInstance_eventLockAIResources_Parms
		{
			bool bLockMovement;
			bool LockAILogic;
		};
		UObject* Outer=Z_Construct_UClass_UAnimInstance();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LockAIResources"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020405, 65535, sizeof(AnimInstance_eventLockAIResources_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(LockAILogic, AnimInstance_eventLockAIResources_Parms, bool);
			UProperty* NewProp_LockAILogic = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LockAILogic"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(LockAILogic, AnimInstance_eventLockAIResources_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(LockAILogic, AnimInstance_eventLockAIResources_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLockMovement, AnimInstance_eventLockAIResources_Parms, bool);
			UProperty* NewProp_bLockMovement = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bLockMovement"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLockMovement, AnimInstance_eventLockAIResources_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bLockMovement, AnimInstance_eventLockAIResources_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Animation"));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecatedFunction"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecationMessage"), TEXT("Use LockAIResourcesWithAnimation instead"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("locks indicated AI resources of animated pawn\n    DEPRECATED. Use LockAIResourcesWithAnimation instead"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimInstance_Montage_GetCurrentSection()
	{
		struct AnimInstance_eventMontage_GetCurrentSection_Parms
		{
			UAnimMontage* Montage;
			FName ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAnimInstance();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Montage_GetCurrentSection"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(AnimInstance_eventMontage_GetCurrentSection_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(ReturnValue, AnimInstance_eventMontage_GetCurrentSection_Parms), 0x0000000000000580);
			UProperty* NewProp_Montage = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Montage"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Montage, AnimInstance_eventMontage_GetCurrentSection_Parms), 0x0000000000000080, Z_Construct_UClass_UAnimMontage_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Animation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the name of the current animation montage section."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimInstance_Montage_IsActive()
	{
		struct AnimInstance_eventMontage_IsActive_Parms
		{
			UAnimMontage* Montage;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAnimInstance();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Montage_IsActive"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(AnimInstance_eventMontage_IsActive_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, AnimInstance_eventMontage_IsActive_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, AnimInstance_eventMontage_IsActive_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, AnimInstance_eventMontage_IsActive_Parms), sizeof(bool), true);
			UProperty* NewProp_Montage = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Montage"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Montage, AnimInstance_eventMontage_IsActive_Parms), 0x0000000000000080, Z_Construct_UClass_UAnimMontage_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Animation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if the animation montage is active. If the Montage reference is NULL, it will return true if any Montage is active."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimInstance_Montage_IsPlaying()
	{
		struct AnimInstance_eventMontage_IsPlaying_Parms
		{
			UAnimMontage* Montage;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAnimInstance();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Montage_IsPlaying"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(AnimInstance_eventMontage_IsPlaying_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, AnimInstance_eventMontage_IsPlaying_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, AnimInstance_eventMontage_IsPlaying_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, AnimInstance_eventMontage_IsPlaying_Parms), sizeof(bool), true);
			UProperty* NewProp_Montage = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Montage"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Montage, AnimInstance_eventMontage_IsPlaying_Parms), 0x0000000000000080, Z_Construct_UClass_UAnimMontage_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Animation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if the animation montage is currently active and playing.\n      If reference is NULL, it will return true is ANY montage is currently active and playing."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimInstance_Montage_JumpToSection()
	{
		struct AnimInstance_eventMontage_JumpToSection_Parms
		{
			FName SectionName;
			UAnimMontage* Montage;
		};
		UObject* Outer=Z_Construct_UClass_UAnimInstance();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Montage_JumpToSection"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(AnimInstance_eventMontage_JumpToSection_Parms));
			UProperty* NewProp_Montage = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Montage"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Montage, AnimInstance_eventMontage_JumpToSection_Parms), 0x0000000000000080, Z_Construct_UClass_UAnimMontage_NoRegister());
			UProperty* NewProp_SectionName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SectionName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(SectionName, AnimInstance_eventMontage_JumpToSection_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Animation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Makes a montage jump to a named section. If Montage reference is NULL, it will do that to all active montages."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimInstance_Montage_JumpToSectionsEnd()
	{
		struct AnimInstance_eventMontage_JumpToSectionsEnd_Parms
		{
			FName SectionName;
			UAnimMontage* Montage;
		};
		UObject* Outer=Z_Construct_UClass_UAnimInstance();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Montage_JumpToSectionsEnd"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(AnimInstance_eventMontage_JumpToSectionsEnd_Parms));
			UProperty* NewProp_Montage = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Montage"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Montage, AnimInstance_eventMontage_JumpToSectionsEnd_Parms), 0x0000000000000080, Z_Construct_UClass_UAnimMontage_NoRegister());
			UProperty* NewProp_SectionName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SectionName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(SectionName, AnimInstance_eventMontage_JumpToSectionsEnd_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Animation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Makes a montage jump to the end of a named section. If Montage reference is NULL, it will do that to all active montages."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimInstance_Montage_Pause()
	{
		struct AnimInstance_eventMontage_Pause_Parms
		{
			UAnimMontage* Montage;
		};
		UObject* Outer=Z_Construct_UClass_UAnimInstance();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Montage_Pause"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(AnimInstance_eventMontage_Pause_Parms));
			UProperty* NewProp_Montage = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Montage"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Montage, AnimInstance_eventMontage_Pause_Parms), 0x0000000000000080, Z_Construct_UClass_UAnimMontage_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Animation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Pauses the animation montage. If reference is NULL, it will stop ALL active montages."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimInstance_Montage_Play()
	{
		struct AnimInstance_eventMontage_Play_Parms
		{
			UAnimMontage* MontageToPlay;
			float InPlayRate;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAnimInstance();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Montage_Play"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(AnimInstance_eventMontage_Play_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, AnimInstance_eventMontage_Play_Parms), 0x0000000000000580);
			UProperty* NewProp_InPlayRate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InPlayRate"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InPlayRate, AnimInstance_eventMontage_Play_Parms), 0x0000000000000080);
			UProperty* NewProp_MontageToPlay = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MontageToPlay"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(MontageToPlay, AnimInstance_eventMontage_Play_Parms), 0x0000000000000080, Z_Construct_UClass_UAnimMontage_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Animation"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_InPlayRate"), TEXT("1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Plays an animation montage. Returns the length of the animation montage in seconds. Returns 0.f if failed to play."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimInstance_Montage_SetNextSection()
	{
		struct AnimInstance_eventMontage_SetNextSection_Parms
		{
			FName SectionNameToChange;
			FName NextSection;
			UAnimMontage* Montage;
		};
		UObject* Outer=Z_Construct_UClass_UAnimInstance();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Montage_SetNextSection"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(AnimInstance_eventMontage_SetNextSection_Parms));
			UProperty* NewProp_Montage = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Montage"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Montage, AnimInstance_eventMontage_SetNextSection_Parms), 0x0000000000000080, Z_Construct_UClass_UAnimMontage_NoRegister());
			UProperty* NewProp_NextSection = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NextSection"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(NextSection, AnimInstance_eventMontage_SetNextSection_Parms), 0x0000000000000080);
			UProperty* NewProp_SectionNameToChange = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SectionNameToChange"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(SectionNameToChange, AnimInstance_eventMontage_SetNextSection_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Animation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Relink new next section AFTER SectionNameToChange in run-time\n    You can link section order the way you like in editor, but in run-time if you'd like to change it dynamically,\n    use this function to relink the next section\n    For example, you can have Start->Loop->Loop->Loop.... but when you want it to end, you can relink\n    next section of Loop to be End to finish the montage, in which case, it stops looping by Loop->End.\n\n@param SectionNameToChange : This should be the name of the Montage Section after which you want to insert a new next section\n@param NextSection   : new next section"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimInstance_Montage_SetPlayRate()
	{
		struct AnimInstance_eventMontage_SetPlayRate_Parms
		{
			UAnimMontage* Montage;
			float NewPlayRate;
		};
		UObject* Outer=Z_Construct_UClass_UAnimInstance();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Montage_SetPlayRate"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(AnimInstance_eventMontage_SetPlayRate_Parms));
			UProperty* NewProp_NewPlayRate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewPlayRate"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(NewPlayRate, AnimInstance_eventMontage_SetPlayRate_Parms), 0x0000000000000080);
			UProperty* NewProp_Montage = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Montage"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Montage, AnimInstance_eventMontage_SetPlayRate_Parms), 0x0000000000000080, Z_Construct_UClass_UAnimMontage_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Animation"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_NewPlayRate"), TEXT("1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Change AnimMontage play rate. NewPlayRate = 1.0 is the default playback rate."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimInstance_Montage_Stop()
	{
		struct AnimInstance_eventMontage_Stop_Parms
		{
			float InBlendOutTime;
			UAnimMontage* Montage;
		};
		UObject* Outer=Z_Construct_UClass_UAnimInstance();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Montage_Stop"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(AnimInstance_eventMontage_Stop_Parms));
			UProperty* NewProp_Montage = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Montage"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Montage, AnimInstance_eventMontage_Stop_Parms), 0x0000000000000080, Z_Construct_UClass_UAnimMontage_NoRegister());
			UProperty* NewProp_InBlendOutTime = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InBlendOutTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InBlendOutTime, AnimInstance_eventMontage_Stop_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Animation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Stops the animation montage. If reference is NULL, it will stop ALL active montages."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimInstance_PlaySlotAnimation()
	{
		struct AnimInstance_eventPlaySlotAnimation_Parms
		{
			UAnimSequenceBase* Asset;
			FName SlotNodeName;
			float BlendInTime;
			float BlendOutTime;
			float InPlayRate;
			int32 LoopCount;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAnimInstance();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PlaySlotAnimation"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(AnimInstance_eventPlaySlotAnimation_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, AnimInstance_eventPlaySlotAnimation_Parms), 0x0000000000000580);
			UProperty* NewProp_LoopCount = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LoopCount"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(LoopCount, AnimInstance_eventPlaySlotAnimation_Parms), 0x0000000000000080);
			UProperty* NewProp_InPlayRate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InPlayRate"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InPlayRate, AnimInstance_eventPlaySlotAnimation_Parms), 0x0000000000000080);
			UProperty* NewProp_BlendOutTime = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("BlendOutTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(BlendOutTime, AnimInstance_eventPlaySlotAnimation_Parms), 0x0000000000000080);
			UProperty* NewProp_BlendInTime = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("BlendInTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(BlendInTime, AnimInstance_eventPlaySlotAnimation_Parms), 0x0000000000000080);
			UProperty* NewProp_SlotNodeName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SlotNodeName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(SlotNodeName, AnimInstance_eventPlaySlotAnimation_Parms), 0x0000000000000080);
			UProperty* NewProp_Asset = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Asset"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Asset, AnimInstance_eventPlaySlotAnimation_Parms), 0x0000000000000080, Z_Construct_UClass_UAnimSequenceBase_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Animation"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_BlendInTime"), TEXT("0.250000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_BlendOutTime"), TEXT("0.250000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_InPlayRate"), TEXT("1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_LoopCount"), TEXT("1"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimInstance_PlaySlotAnimationAsDynamicMontage()
	{
		struct AnimInstance_eventPlaySlotAnimationAsDynamicMontage_Parms
		{
			UAnimSequenceBase* Asset;
			FName SlotNodeName;
			float BlendInTime;
			float BlendOutTime;
			float InPlayRate;
			int32 LoopCount;
			float BlendOutTriggerTime;
			UAnimMontage* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAnimInstance();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PlaySlotAnimationAsDynamicMontage"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(AnimInstance_eventPlaySlotAnimationAsDynamicMontage_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, AnimInstance_eventPlaySlotAnimationAsDynamicMontage_Parms), 0x0000000000000580, Z_Construct_UClass_UAnimMontage_NoRegister());
			UProperty* NewProp_BlendOutTriggerTime = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("BlendOutTriggerTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(BlendOutTriggerTime, AnimInstance_eventPlaySlotAnimationAsDynamicMontage_Parms), 0x0000000000000080);
			UProperty* NewProp_LoopCount = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LoopCount"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(LoopCount, AnimInstance_eventPlaySlotAnimationAsDynamicMontage_Parms), 0x0000000000000080);
			UProperty* NewProp_InPlayRate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InPlayRate"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InPlayRate, AnimInstance_eventPlaySlotAnimationAsDynamicMontage_Parms), 0x0000000000000080);
			UProperty* NewProp_BlendOutTime = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("BlendOutTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(BlendOutTime, AnimInstance_eventPlaySlotAnimationAsDynamicMontage_Parms), 0x0000000000000080);
			UProperty* NewProp_BlendInTime = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("BlendInTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(BlendInTime, AnimInstance_eventPlaySlotAnimationAsDynamicMontage_Parms), 0x0000000000000080);
			UProperty* NewProp_SlotNodeName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SlotNodeName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(SlotNodeName, AnimInstance_eventPlaySlotAnimationAsDynamicMontage_Parms), 0x0000000000000080);
			UProperty* NewProp_Asset = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Asset"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Asset, AnimInstance_eventPlaySlotAnimationAsDynamicMontage_Parms), 0x0000000000000080, Z_Construct_UClass_UAnimSequenceBase_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Animation"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_BlendInTime"), TEXT("0.250000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_BlendOutTime"), TEXT("0.250000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_BlendOutTriggerTime"), TEXT("-1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_InPlayRate"), TEXT("1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_LoopCount"), TEXT("1"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Play normal animation asset on the slot node by creating a dynamic UAnimMontage. You can only play one asset (whether montage or animsequence) at a time per SlotGroup."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimInstance_SetMorphTarget()
	{
		struct AnimInstance_eventSetMorphTarget_Parms
		{
			FName MorphTargetName;
			float Value;
		};
		UObject* Outer=Z_Construct_UClass_UAnimInstance();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetMorphTarget"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(AnimInstance_eventSetMorphTarget_Parms));
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Value, AnimInstance_eventSetMorphTarget_Parms), 0x0000000000000080);
			UProperty* NewProp_MorphTargetName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MorphTargetName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(MorphTargetName, AnimInstance_eventSetMorphTarget_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Animation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets a morph target to a certain weight."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimInstance_StopSlotAnimation()
	{
		struct AnimInstance_eventStopSlotAnimation_Parms
		{
			float InBlendOutTime;
			FName SlotNodeName;
		};
		UObject* Outer=Z_Construct_UClass_UAnimInstance();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("StopSlotAnimation"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(AnimInstance_eventStopSlotAnimation_Parms));
			UProperty* NewProp_SlotNodeName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SlotNodeName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(SlotNodeName, AnimInstance_eventStopSlotAnimation_Parms), 0x0000000000000080);
			UProperty* NewProp_InBlendOutTime = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InBlendOutTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InBlendOutTime, AnimInstance_eventStopSlotAnimation_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Animation"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_InBlendOutTime"), TEXT("0.250000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_SlotNodeName"), TEXT("None"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Stops currently playing slot animation slot or all"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimInstance_TryGetPawnOwner()
	{
		struct AnimInstance_eventTryGetPawnOwner_Parms
		{
			APawn* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAnimInstance();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TryGetPawnOwner"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020400, 65535, sizeof(AnimInstance_eventTryGetPawnOwner_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, AnimInstance_eventTryGetPawnOwner_Parms), 0x0000000000000580, Z_Construct_UClass_APawn_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Animation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("kismet event functions"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimInstance_UnlockAIResources()
	{
		struct AnimInstance_eventUnlockAIResources_Parms
		{
			bool bUnlockMovement;
			bool UnlockAILogic;
		};
		UObject* Outer=Z_Construct_UClass_UAnimInstance();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("UnlockAIResources"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020405, 65535, sizeof(AnimInstance_eventUnlockAIResources_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(UnlockAILogic, AnimInstance_eventUnlockAIResources_Parms, bool);
			UProperty* NewProp_UnlockAILogic = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnlockAILogic"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(UnlockAILogic, AnimInstance_eventUnlockAIResources_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(UnlockAILogic, AnimInstance_eventUnlockAIResources_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUnlockMovement, AnimInstance_eventUnlockAIResources_Parms, bool);
			UProperty* NewProp_bUnlockMovement = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bUnlockMovement"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUnlockMovement, AnimInstance_eventUnlockAIResources_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bUnlockMovement, AnimInstance_eventUnlockAIResources_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Animation"));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecatedFunction"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecationMessage"), TEXT("Use UnlockAIResourcesWithAnimation instead"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("unlocks indicated AI resources of animated pawn. Will unlock only animation-locked resources.\n    DEPRECATED. Use UnlockAIResourcesWithAnimation instead"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UAnimInstance_NoRegister()
	{
		return UAnimInstance::StaticClass();
	}
	UClass* Z_Construct_UClass_UAnimInstance()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UAnimInstance::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900088;

				OuterClass->LinkChild(Z_Construct_UFunction_UAnimInstance_AnimNotify_Sound());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimInstance_BlueprintInitializeAnimation());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimInstance_BlueprintPostEvaluateAnimation());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimInstance_BlueprintUpdateAnimation());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimInstance_CalculateDirection());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimInstance_ClearMorphTargets());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimInstance_GetAnimAssetPlayerLength());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimInstance_GetAnimAssetPlayerTimeFraction());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimInstance_GetAnimAssetPlayerTimeFromEnd());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimInstance_GetAnimAssetPlayerTimeFromEndFraction());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimInstance_GetCurrentStateElapsedTime());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimInstance_GetCurrentStateName());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimInstance_GetCurveValue());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimInstance_GetInstanceAssetPlayerLength());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimInstance_GetInstanceAssetPlayerTime());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimInstance_GetInstanceAssetPlayerTimeFraction());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimInstance_GetInstanceAssetPlayerTimeFromEnd());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimInstance_GetInstanceAssetPlayerTimeFromEndFraction());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimInstance_GetInstanceCurrentStateElapsedTime());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimInstance_GetInstanceStateWeight());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimInstance_GetInstanceTransitionCrossfadeDuration());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimInstance_GetInstanceTransitionTimeElapsed());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimInstance_GetInstanceTransitionTimeElapsedFraction());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimInstance_GetOwningActor());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimInstance_GetOwningComponent());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimInstance_GetRelevantAnimLength());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimInstance_GetRelevantAnimTime());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimInstance_GetRelevantAnimTimeFraction());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimInstance_GetRelevantAnimTimeRemaining());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimInstance_GetRelevantAnimTimeRemainingFraction());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimInstance_GetStateWeight());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimInstance_IsPlayingSlotAnimation());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimInstance_LockAIResources());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimInstance_Montage_GetCurrentSection());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimInstance_Montage_IsActive());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimInstance_Montage_IsPlaying());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimInstance_Montage_JumpToSection());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimInstance_Montage_JumpToSectionsEnd());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimInstance_Montage_Pause());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimInstance_Montage_Play());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimInstance_Montage_SetNextSection());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimInstance_Montage_SetPlayRate());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimInstance_Montage_Stop());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimInstance_PlaySlotAnimation());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimInstance_PlaySlotAnimationAsDynamicMontage());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimInstance_SetMorphTarget());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimInstance_StopSlotAnimation());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimInstance_TryGetPawnOwner());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimInstance_UnlockAIResources());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bBoneCachesInvalidated, UAnimInstance, bool);
				UProperty* NewProp_bBoneCachesInvalidated = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bBoneCachesInvalidated"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bBoneCachesInvalidated, UAnimInstance), 0x0000000000002000, CPP_BOOL_PROPERTY_BITMASK(bBoneCachesInvalidated, UAnimInstance), sizeof(bool), true);
				UProperty* NewProp_GraphTraversalCounter = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GraphTraversalCounter"), RF_Public|RF_Transient|RF_Native) UInt16Property(CPP_PROPERTY_BASE(GraphTraversalCounter, UAnimInstance), 0x0000000000002000);
				UProperty* NewProp_SlotNodeInitializationCounter = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SlotNodeInitializationCounter"), RF_Public|RF_Transient|RF_Native) UInt16Property(CPP_PROPERTY_BASE(SlotNodeInitializationCounter, UAnimInstance), 0x0000000000002000);
				UProperty* NewProp_ActiveAnimNotifyState = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ActiveAnimNotifyState"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ActiveAnimNotifyState, UAnimInstance), 0x0000008000002000);
				UProperty* NewProp_ActiveAnimNotifyState_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ActiveAnimNotifyState, TEXT("ActiveAnimNotifyState"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000008000000000, Z_Construct_UScriptStruct_FAnimNotifyEvent());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bQueueMontageEvents, UAnimInstance, bool);
				UProperty* NewProp_bQueueMontageEvents = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bQueueMontageEvents"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bQueueMontageEvents, UAnimInstance), 0x0000000000002000, CPP_BOOL_PROPERTY_BITMASK(bQueueMontageEvents, UAnimInstance), sizeof(bool), true);
				UProperty* NewProp_OnMontageEnded = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnMontageEnded"), RF_Public|RF_Transient|RF_Native) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnMontageEnded, UAnimInstance), 0x0000000010080000, Z_Construct_UDelegateFunction_Engine_OnMontageEndedMCDelegate__DelegateSignature());
				UProperty* NewProp_OnMontageStarted = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnMontageStarted"), RF_Public|RF_Transient|RF_Native) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnMontageStarted, UAnimInstance), 0x0000000010080000, Z_Construct_UDelegateFunction_Engine_OnMontageStartedMCDelegate__DelegateSignature());
				UProperty* NewProp_OnMontageBlendingOut = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnMontageBlendingOut"), RF_Public|RF_Transient|RF_Native) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnMontageBlendingOut, UAnimInstance), 0x0000000010080000, Z_Construct_UDelegateFunction_Engine_OnMontageBlendingOutStartedMCDelegate__DelegateSignature());
				UProperty* NewProp_RootMotionMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RootMotionMode"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(RootMotionMode, UAnimInstance), 0x0000000000010001, Z_Construct_UEnum_Engine_ERootMotionMode());
				UProperty* NewProp_VertexAnims = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VertexAnims"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(VertexAnims, UAnimInstance), 0x0000000000002000);
				UProperty* NewProp_VertexAnims_Inner = new(EC_InternalUseOnlyConstructor, NewProp_VertexAnims, TEXT("VertexAnims"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FActiveVertexAnim());
				UProperty* NewProp_SyncGroups = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SyncGroups"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(SyncGroups, UAnimInstance), 0x0000000000002000);
				UProperty* NewProp_SyncGroups_Inner = new(EC_InternalUseOnlyConstructor, NewProp_SyncGroups, TEXT("SyncGroups"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FAnimGroupInstance());
				UProperty* NewProp_UngroupedActivePlayers = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UngroupedActivePlayers"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(UngroupedActivePlayers, UAnimInstance), 0x0000000000002000);
				UProperty* NewProp_UngroupedActivePlayers_Inner = new(EC_InternalUseOnlyConstructor, NewProp_UngroupedActivePlayers, TEXT("UngroupedActivePlayers"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FAnimTickRecord());
				UProperty* NewProp_CurrentSkeleton = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CurrentSkeleton"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(CurrentSkeleton, UAnimInstance), 0x0000000000002000, Z_Construct_UClass_USkeleton_NoRegister());
				UProperty* NewProp_DeltaTime = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DeltaTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DeltaTime_DEPRECATED, UAnimInstance), 0x0000000020000000);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimInstance_AnimNotify_Sound()); // 2154238830
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimInstance_BlueprintInitializeAnimation()); // 518969538
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimInstance_BlueprintPostEvaluateAnimation()); // 2814217948
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimInstance_BlueprintUpdateAnimation()); // 2763060108
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimInstance_CalculateDirection()); // 4095134635
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimInstance_ClearMorphTargets()); // 358898049
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimInstance_GetAnimAssetPlayerLength()); // 3967070385
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimInstance_GetAnimAssetPlayerTimeFraction()); // 782018992
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimInstance_GetAnimAssetPlayerTimeFromEnd()); // 886475546
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimInstance_GetAnimAssetPlayerTimeFromEndFraction()); // 123811628
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimInstance_GetCurrentStateElapsedTime()); // 4111799093
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimInstance_GetCurrentStateName()); // 2665490200
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimInstance_GetCurveValue()); // 3629181879
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimInstance_GetInstanceAssetPlayerLength()); // 4175688260
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimInstance_GetInstanceAssetPlayerTime()); // 1957389415
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimInstance_GetInstanceAssetPlayerTimeFraction()); // 4200363370
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimInstance_GetInstanceAssetPlayerTimeFromEnd()); // 4022866939
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimInstance_GetInstanceAssetPlayerTimeFromEndFraction()); // 2678077651
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimInstance_GetInstanceCurrentStateElapsedTime()); // 2274413138
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimInstance_GetInstanceStateWeight()); // 4212631948
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimInstance_GetInstanceTransitionCrossfadeDuration()); // 1658152096
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimInstance_GetInstanceTransitionTimeElapsed()); // 3578862179
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimInstance_GetInstanceTransitionTimeElapsedFraction()); // 988026283
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimInstance_GetOwningActor()); // 2263172694
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimInstance_GetOwningComponent()); // 3712872485
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimInstance_GetRelevantAnimLength()); // 1786100411
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimInstance_GetRelevantAnimTime()); // 286466656
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimInstance_GetRelevantAnimTimeFraction()); // 1749820247
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimInstance_GetRelevantAnimTimeRemaining()); // 3335755061
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimInstance_GetRelevantAnimTimeRemainingFraction()); // 2143100218
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimInstance_GetStateWeight()); // 933557326
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimInstance_IsPlayingSlotAnimation()); // 1801115874
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimInstance_LockAIResources()); // 623263647
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimInstance_Montage_GetCurrentSection()); // 2411888802
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimInstance_Montage_IsActive()); // 480675887
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimInstance_Montage_IsPlaying()); // 490255631
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimInstance_Montage_JumpToSection()); // 120713589
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimInstance_Montage_JumpToSectionsEnd()); // 3385968701
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimInstance_Montage_Pause()); // 182038044
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimInstance_Montage_Play()); // 1212557122
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimInstance_Montage_SetNextSection()); // 2628309149
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimInstance_Montage_SetPlayRate()); // 370918188
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimInstance_Montage_Stop()); // 2270308130
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimInstance_PlaySlotAnimation()); // 2112258866
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimInstance_PlaySlotAnimationAsDynamicMontage()); // 3422786407
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimInstance_SetMorphTarget()); // 1409443943
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimInstance_StopSlotAnimation()); // 1656252249
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimInstance_TryGetPawnOwner()); // 634812090
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimInstance_UnlockAIResources()); // 4221589049
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("AnimInstance"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Animation/AnimInstance.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
				MetaData->SetValue(NewProp_bBoneCachesInvalidated, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
				MetaData->SetValue(NewProp_bBoneCachesInvalidated, TEXT("ToolTip"), TEXT("When RequiredBones mapping has changed, AnimNodes need to update their bones caches."));
				MetaData->SetValue(NewProp_GraphTraversalCounter, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
				MetaData->SetValue(NewProp_GraphTraversalCounter, TEXT("ToolTip"), TEXT("Counter incremented every time the graph is about to be traversed, to ensure every node is only touched once."));
				MetaData->SetValue(NewProp_SlotNodeInitializationCounter, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
				MetaData->SetValue(NewProp_SlotNodeInitializationCounter, TEXT("ToolTip"), TEXT("Counter so we register Slot nodes just once per Initialization pass\nState can trigger initialization later, and we don't want to register these nodes multiple times."));
				MetaData->SetValue(NewProp_ActiveAnimNotifyState, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
				MetaData->SetValue(NewProp_ActiveAnimNotifyState, TEXT("ToolTip"), TEXT("Currently Active AnimNotifyState, stored as a copy of the event as we need to\n              call NotifyEnd on the event after a deletion in the editor. After this the event\n              is removed correctly."));
				MetaData->SetValue(NewProp_bQueueMontageEvents, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
				MetaData->SetValue(NewProp_bQueueMontageEvents, TEXT("ToolTip"), TEXT("True when Montages are being ticked, and Montage Events should be queued.\nWhen Montage are being ticked, we queue AnimNotifies and Events. We trigger notifies first, then Montage events."));
				MetaData->SetValue(NewProp_OnMontageEnded, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
				MetaData->SetValue(NewProp_OnMontageEnded, TEXT("ToolTip"), TEXT("Called when a montage has ended, whether interrupted or finished"));
				MetaData->SetValue(NewProp_OnMontageStarted, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
				MetaData->SetValue(NewProp_OnMontageStarted, TEXT("ToolTip"), TEXT("Called when a montage has started"));
				MetaData->SetValue(NewProp_OnMontageBlendingOut, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
				MetaData->SetValue(NewProp_OnMontageBlendingOut, TEXT("ToolTip"), TEXT("Called when a montage starts blending out, whether interrupted or finished"));
				MetaData->SetValue(NewProp_RootMotionMode, TEXT("Category"), TEXT("RootMotion"));
				MetaData->SetValue(NewProp_RootMotionMode, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
				MetaData->SetValue(NewProp_RootMotionMode, TEXT("ToolTip"), TEXT("Sets where this blueprint pulls Root Motion from"));
				MetaData->SetValue(NewProp_VertexAnims, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
				MetaData->SetValue(NewProp_VertexAnims, TEXT("ToolTip"), TEXT("Array indicating active vertex anims (by reference) generated by anim instance."));
				MetaData->SetValue(NewProp_SyncGroups, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
				MetaData->SetValue(NewProp_SyncGroups, TEXT("ToolTip"), TEXT("The set of tick groups for this anim instance"));
				MetaData->SetValue(NewProp_UngroupedActivePlayers, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
				MetaData->SetValue(NewProp_UngroupedActivePlayers, TEXT("ToolTip"), TEXT("The list of animation assets which are going to be evaluated this frame and need to be ticked (ungrouped)"));
				MetaData->SetValue(NewProp_CurrentSkeleton, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
				MetaData->SetValue(NewProp_CurrentSkeleton, TEXT("ToolTip"), TEXT("This is used to extract animation. If Mesh exists, this will be overwritten by Mesh->Skeleton"));
				MetaData->SetValue(NewProp_DeltaTime, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimInstance.h"));
				MetaData->SetValue(NewProp_DeltaTime, TEXT("ToolTip"), TEXT("DeltaTime *"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UAnimInstance(Z_Construct_UClass_UAnimInstance, TEXT("UAnimInstance"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UAnimInstance);
	UEnum* Z_Construct_UEnum_Engine_EAnimNotifyEventType()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EAnimNotifyEventType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EAnimNotifyEventType"), 0, Get_Z_Construct_UEnum_Engine_EAnimNotifyEventType_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EAnimNotifyEventType"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EAnimNotifyEventType::Begin")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EAnimNotifyEventType::End")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EAnimNotifyEventType::EAnimNotifyEventType_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimMontage.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EAnimNotifyEventType_CRC() { return 471840639U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimMontageInstance()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimMontageInstance_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("AnimMontageInstance"), sizeof(FAnimMontageInstance), Get_Z_Construct_UScriptStruct_FAnimMontageInstance_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimMontageInstance"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FAnimMontageInstance>, EStructFlags(0x00000005));
			UProperty* NewProp_PlayRate = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PlayRate"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(PlayRate, FAnimMontageInstance), 0x0000000000000000);
			UProperty* NewProp_Position = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Position"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Position, FAnimMontageInstance), 0x0000000000000000);
			UProperty* NewProp_ActiveStateBranchingPoints = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ActiveStateBranchingPoints"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ActiveStateBranchingPoints, FAnimMontageInstance), 0x0000008000002000);
			UProperty* NewProp_ActiveStateBranchingPoints_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ActiveStateBranchingPoints, TEXT("ActiveStateBranchingPoints"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000008000000000, Z_Construct_UScriptStruct_FAnimNotifyEvent());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bPlaying, FAnimMontageInstance, bool);
			UProperty* NewProp_bPlaying = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bPlaying"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bPlaying, FAnimMontageInstance), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bPlaying, FAnimMontageInstance), sizeof(bool), true);
			UProperty* NewProp_PrevSections = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PrevSections"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(PrevSections, FAnimMontageInstance), 0x0000000000000000);
			UProperty* NewProp_PrevSections_Inner = new(EC_InternalUseOnlyConstructor, NewProp_PrevSections, TEXT("PrevSections"), RF_Public|RF_Transient|RF_Native) UIntProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_NextSections = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("NextSections"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(NextSections, FAnimMontageInstance), 0x0000000000000000);
			UProperty* NewProp_NextSections_Inner = new(EC_InternalUseOnlyConstructor, NewProp_NextSections, TEXT("NextSections"), RF_Public|RF_Transient|RF_Native) UIntProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_DefaultBlendTimeMultiplier = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DefaultBlendTimeMultiplier"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DefaultBlendTimeMultiplier, FAnimMontageInstance), 0x0000000000002000);
			UProperty* NewProp_BlendTime = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BlendTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(BlendTime, FAnimMontageInstance), 0x0000000000002000);
			UProperty* NewProp_Weight = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Weight"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Weight, FAnimMontageInstance), 0x0000000000000000);
			UProperty* NewProp_DesiredWeight = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DesiredWeight"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DesiredWeight, FAnimMontageInstance), 0x0000000000000000);
			UProperty* NewProp_Montage = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Montage"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Montage, FAnimMontageInstance), 0x0000000000000000, Z_Construct_UClass_UAnimMontage_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimMontage.h"));
			MetaData->SetValue(NewProp_PlayRate, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimMontage.h"));
			MetaData->SetValue(NewProp_Position, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimMontage.h"));
			MetaData->SetValue(NewProp_ActiveStateBranchingPoints, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimMontage.h"));
			MetaData->SetValue(NewProp_ActiveStateBranchingPoints, TEXT("ToolTip"), TEXT("Currently Active AnimNotifyState, stored as a copy of the event as we need to\n              call NotifyEnd on the event after a deletion in the editor. After this the event\n              is removed correctly."));
			MetaData->SetValue(NewProp_bPlaying, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimMontage.h"));
			MetaData->SetValue(NewProp_PrevSections, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimMontage.h"));
			MetaData->SetValue(NewProp_PrevSections, TEXT("ToolTip"), TEXT("list of prev sections per section - index of array is section id"));
			MetaData->SetValue(NewProp_NextSections, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimMontage.h"));
			MetaData->SetValue(NewProp_NextSections, TEXT("ToolTip"), TEXT("list of next sections per section - index of array is section id"));
			MetaData->SetValue(NewProp_DefaultBlendTimeMultiplier, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimMontage.h"));
			MetaData->SetValue(NewProp_DefaultBlendTimeMultiplier, TEXT("ToolTip"), TEXT("Blend Time multiplier to allow extending and narrowing blendtimes"));
			MetaData->SetValue(NewProp_BlendTime, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimMontage.h"));
			MetaData->SetValue(NewProp_Weight, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimMontage.h"));
			MetaData->SetValue(NewProp_DesiredWeight, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimMontage.h"));
			MetaData->SetValue(NewProp_Montage, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimMontage.h"));
			MetaData->SetValue(NewProp_Montage, TEXT("ToolTip"), TEXT("Montage reference"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimMontageInstance_CRC() { return 1753774045U; }
	UScriptStruct* Z_Construct_UScriptStruct_FBranchingPointMarker()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FBranchingPointMarker_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("BranchingPointMarker"), sizeof(FBranchingPointMarker), Get_Z_Construct_UScriptStruct_FBranchingPointMarker_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BranchingPointMarker"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FBranchingPointMarker>, EStructFlags(0x00000001));
			UProperty* NewProp_NotifyEventType = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("NotifyEventType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(NotifyEventType, FBranchingPointMarker), 0x0000000000000000, Z_Construct_UEnum_Engine_EAnimNotifyEventType());
			UProperty* NewProp_TriggerTime = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TriggerTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(TriggerTime, FBranchingPointMarker), 0x0000000000000000);
			UProperty* NewProp_NotifyIndex = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("NotifyIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(NotifyIndex, FBranchingPointMarker), 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimMontage.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("AnimNotifies marked as BranchingPoints will create these markers on their Begin/End times.\n      They create stopping points when the Montage is being ticked to dispatch events."));
			MetaData->SetValue(NewProp_NotifyEventType, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimMontage.h"));
			MetaData->SetValue(NewProp_TriggerTime, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimMontage.h"));
			MetaData->SetValue(NewProp_NotifyIndex, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimMontage.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FBranchingPointMarker_CRC() { return 2717742303U; }
	UScriptStruct* Z_Construct_UScriptStruct_FBranchingPoint()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FBranchingPoint_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("BranchingPoint"), sizeof(FBranchingPoint), Get_Z_Construct_UScriptStruct_FBranchingPoint_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BranchingPoint"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimLinkableElement(), new UScriptStruct::TCppStructOps<FBranchingPoint>, EStructFlags(0x00000001));
			UProperty* NewProp_TriggerTimeOffset = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TriggerTimeOffset"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(TriggerTimeOffset, FBranchingPoint), 0x0000000000000000);
			UProperty* NewProp_DisplayTime = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DisplayTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DisplayTime_DEPRECATED, FBranchingPoint), 0x0000000020000000);
			UProperty* NewProp_EventName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("EventName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(EventName, FBranchingPoint), 0x0000000000000001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimMontage.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Remove FBranchingPoint when VER_UE4_MONTAGE_BRANCHING_POINT_REMOVAL is removed."));
			MetaData->SetValue(NewProp_TriggerTimeOffset, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimMontage.h"));
			MetaData->SetValue(NewProp_TriggerTimeOffset, TEXT("ToolTip"), TEXT("An offset from the DisplayTime to the actual time we will trigger the notify, as we cannot always trigger it exactly at the time the user wants"));
			MetaData->SetValue(NewProp_DisplayTime, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimMontage.h"));
			MetaData->SetValue(NewProp_EventName, TEXT("Category"), TEXT("BranchingPoint"));
			MetaData->SetValue(NewProp_EventName, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimMontage.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FBranchingPoint_CRC() { return 3377804912U; }
	UScriptStruct* Z_Construct_UScriptStruct_FSlotAnimationTrack()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FSlotAnimationTrack_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("SlotAnimationTrack"), sizeof(FSlotAnimationTrack), Get_Z_Construct_UScriptStruct_FSlotAnimationTrack_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SlotAnimationTrack"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FSlotAnimationTrack>, EStructFlags(0x00000001));
			UProperty* NewProp_AnimTrack = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("AnimTrack"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(AnimTrack, FSlotAnimationTrack), 0x0000000000000001, Z_Construct_UScriptStruct_FAnimTrack());
			UProperty* NewProp_SlotName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SlotName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(SlotName, FSlotAnimationTrack), 0x0000000000000001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimMontage.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Each slot data referenced by Animation Slot\ncontains slot name, and animation data"));
			MetaData->SetValue(NewProp_AnimTrack, TEXT("Category"), TEXT("Slot"));
			MetaData->SetValue(NewProp_AnimTrack, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimMontage.h"));
			MetaData->SetValue(NewProp_SlotName, TEXT("Category"), TEXT("Slot"));
			MetaData->SetValue(NewProp_SlotName, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimMontage.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FSlotAnimationTrack_CRC() { return 1733505232U; }
	UScriptStruct* Z_Construct_UScriptStruct_FCompositeSection()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FCompositeSection_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("CompositeSection"), sizeof(FCompositeSection), Get_Z_Construct_UScriptStruct_FCompositeSection_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CompositeSection"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimLinkableElement(), new UScriptStruct::TCppStructOps<FCompositeSection>, EStructFlags(0x00000005));
			UProperty* NewProp_MetaData = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MetaData"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(MetaData, FCompositeSection), 0x0000008000000009);
			UProperty* NewProp_MetaData_Inner = new(EC_InternalUseOnlyConstructor, NewProp_MetaData, TEXT("MetaData"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0002000000080008, Z_Construct_UClass_UAnimMetaData_NoRegister());
			UProperty* NewProp_NextSectionName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("NextSectionName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(NextSectionName, FCompositeSection), 0x0000000000000000);
			UProperty* NewProp_StartTime = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("StartTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(StartTime_DEPRECATED, FCompositeSection), 0x0000000020000000);
			UProperty* NewProp_SectionName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SectionName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(SectionName, FCompositeSection), 0x0000000000000001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimMontage.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Section data for each track. Reference of data will be stored in the child class for the way they want\nAnimComposite vs AnimMontage have different requirement for the actual data reference\nThis only contains composite section information. (vertical sequences)"));
			MetaData->SetValue(NewProp_MetaData, TEXT("Category"), TEXT("Section"));
			MetaData->SetValue(NewProp_MetaData, TEXT("EditInline"), TEXT("true"));
			MetaData->SetValue(NewProp_MetaData, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimMontage.h"));
			MetaData->SetValue(NewProp_MetaData, TEXT("ToolTip"), TEXT("Meta data that can be saved with the asset\n\nYou can query by GetMetaData function"));
			MetaData->SetValue(NewProp_MetaData_Inner, TEXT("Category"), TEXT("Section"));
			MetaData->SetValue(NewProp_MetaData_Inner, TEXT("EditInline"), TEXT("true"));
			MetaData->SetValue(NewProp_MetaData_Inner, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimMontage.h"));
			MetaData->SetValue(NewProp_MetaData_Inner, TEXT("ToolTip"), TEXT("Meta data that can be saved with the asset\n\nYou can query by GetMetaData function"));
			MetaData->SetValue(NewProp_NextSectionName, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimMontage.h"));
			MetaData->SetValue(NewProp_NextSectionName, TEXT("ToolTip"), TEXT("Should this animation loop."));
			MetaData->SetValue(NewProp_StartTime, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimMontage.h"));
			MetaData->SetValue(NewProp_StartTime, TEXT("ToolTip"), TEXT("Start Time *"));
			MetaData->SetValue(NewProp_SectionName, TEXT("Category"), TEXT("Section"));
			MetaData->SetValue(NewProp_SectionName, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimMontage.h"));
			MetaData->SetValue(NewProp_SectionName, TEXT("ToolTip"), TEXT("Section Name"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FCompositeSection_CRC() { return 2044910852U; }
	UClass* Z_Construct_UClass_UAnimMontage_NoRegister()
	{
		return UAnimMontage::StaticClass();
	}
	UClass* Z_Construct_UClass_UAnimMontage()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UAnimCompositeBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UAnimMontage::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_BranchingPointStateNotifyIndices = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BranchingPointStateNotifyIndices"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(BranchingPointStateNotifyIndices, UAnimMontage), 0x0000000000000000);
				UProperty* NewProp_BranchingPointStateNotifyIndices_Inner = new(EC_InternalUseOnlyConstructor, NewProp_BranchingPointStateNotifyIndices, TEXT("BranchingPointStateNotifyIndices"), RF_Public|RF_Transient|RF_Native) UIntProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAnimBranchingPointNeedsSort, UAnimMontage, bool);
				UProperty* NewProp_bAnimBranchingPointNeedsSort = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAnimBranchingPointNeedsSort"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAnimBranchingPointNeedsSort, UAnimMontage), 0x0000000000002000, CPP_BOOL_PROPERTY_BITMASK(bAnimBranchingPointNeedsSort, UAnimMontage), sizeof(bool), true);
				UProperty* NewProp_BranchingPointMarkers = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BranchingPointMarkers"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(BranchingPointMarkers, UAnimMontage), 0x0000000000000000);
				UProperty* NewProp_BranchingPointMarkers_Inner = new(EC_InternalUseOnlyConstructor, NewProp_BranchingPointMarkers, TEXT("BranchingPointMarkers"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FBranchingPointMarker());
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_PreviewBasePose = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PreviewBasePose"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(PreviewBasePose, UAnimMontage), 0x0000000800000001, Z_Construct_UClass_UAnimSequence_NoRegister());
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_RootMotionRootLock = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RootMotionRootLock"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(RootMotionRootLock, UAnimMontage), 0x0000000000000000, Z_Construct_UEnum_Engine_ERootMotionRootLock());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnableRootMotionRotation, UAnimMontage, bool);
				UProperty* NewProp_bEnableRootMotionRotation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bEnableRootMotionRotation"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnableRootMotionRotation, UAnimMontage), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bEnableRootMotionRotation, UAnimMontage), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnableRootMotionTranslation, UAnimMontage, bool);
				UProperty* NewProp_bEnableRootMotionTranslation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bEnableRootMotionTranslation"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnableRootMotionTranslation, UAnimMontage), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bEnableRootMotionTranslation, UAnimMontage), sizeof(bool), true);
				UProperty* NewProp_BranchingPoints = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BranchingPoints"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(BranchingPoints_DEPRECATED, UAnimMontage), 0x0000000020000000);
				UProperty* NewProp_BranchingPoints_Inner = new(EC_InternalUseOnlyConstructor, NewProp_BranchingPoints, TEXT("BranchingPoints"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000020000000, Z_Construct_UScriptStruct_FBranchingPoint());
				UProperty* NewProp_SlotAnimTracks = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SlotAnimTracks"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(SlotAnimTracks, UAnimMontage), 0x0000000000000000);
				UProperty* NewProp_SlotAnimTracks_Inner = new(EC_InternalUseOnlyConstructor, NewProp_SlotAnimTracks, TEXT("SlotAnimTracks"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FSlotAnimationTrack());
				UProperty* NewProp_CompositeSections = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CompositeSections"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(CompositeSections, UAnimMontage), 0x0000008000000000);
				UProperty* NewProp_CompositeSections_Inner = new(EC_InternalUseOnlyConstructor, NewProp_CompositeSections, TEXT("CompositeSections"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000008000000000, Z_Construct_UScriptStruct_FCompositeSection());
				UProperty* NewProp_BlendOutTriggerTime = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BlendOutTriggerTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(BlendOutTriggerTime, UAnimMontage), 0x0000000000000001);
				UProperty* NewProp_BlendOutTime = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BlendOutTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(BlendOutTime, UAnimMontage), 0x0000000000000001);
				UProperty* NewProp_BlendInTime = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BlendInTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(BlendInTime, UAnimMontage), 0x0000000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("UObject Length"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Animation/AnimMontage.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimMontage.h"));
				MetaData->SetValue(NewProp_BranchingPointStateNotifyIndices, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimMontage.h"));
				MetaData->SetValue(NewProp_BranchingPointStateNotifyIndices, TEXT("ToolTip"), TEXT("Keep track of which AnimNotify_State are marked as BranchingPoints, so we can update their state when the Montage is ticked"));
				MetaData->SetValue(NewProp_bAnimBranchingPointNeedsSort, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimMontage.h"));
				MetaData->SetValue(NewProp_bAnimBranchingPointNeedsSort, TEXT("ToolTip"), TEXT("@remove me: temporary variable to do sort while property window changed\nthis should be fixed when we have tool to do so."));
				MetaData->SetValue(NewProp_BranchingPointMarkers, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimMontage.h"));
				MetaData->SetValue(NewProp_BranchingPointMarkers, TEXT("ToolTip"), TEXT("Cached list of Branching Point markers"));
				MetaData->SetValue(NewProp_PreviewBasePose, TEXT("Category"), TEXT("AdditiveSettings"));
				MetaData->SetValue(NewProp_PreviewBasePose, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimMontage.h"));
				MetaData->SetValue(NewProp_PreviewBasePose, TEXT("ToolTip"), TEXT("Preview Base pose for additive BlendSpace *"));
				MetaData->SetValue(NewProp_RootMotionRootLock, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimMontage.h"));
				MetaData->SetValue(NewProp_RootMotionRootLock, TEXT("ToolTip"), TEXT("Root Bone will be locked to that position when extracting root motion. DEPRECATED in 4.5 root motion is controlled by anim sequences *"));
				MetaData->SetValue(NewProp_bEnableRootMotionRotation, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimMontage.h"));
				MetaData->SetValue(NewProp_bEnableRootMotionRotation, TEXT("ToolTip"), TEXT("If this is on, it will allow extracting root motion rotation. DEPRECATED in 4.5 root motion is controlled by anim sequences *"));
				MetaData->SetValue(NewProp_bEnableRootMotionTranslation, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimMontage.h"));
				MetaData->SetValue(NewProp_bEnableRootMotionTranslation, TEXT("ToolTip"), TEXT("If this is on, it will allow extracting root motion translation. DEPRECATED in 4.5 root motion is controlled by anim sequences *"));
				MetaData->SetValue(NewProp_BranchingPoints, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimMontage.h"));
				MetaData->SetValue(NewProp_BranchingPoints, TEXT("ToolTip"), TEXT("Remove this when VER_UE4_MONTAGE_BRANCHING_POINT_REMOVAL is removed."));
				MetaData->SetValue(NewProp_SlotAnimTracks, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimMontage.h"));
				MetaData->SetValue(NewProp_SlotAnimTracks, TEXT("ToolTip"), TEXT("slot data, each slot contains anim track"));
				MetaData->SetValue(NewProp_CompositeSections, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimMontage.h"));
				MetaData->SetValue(NewProp_CompositeSections, TEXT("ToolTip"), TEXT("composite section."));
				MetaData->SetValue(NewProp_BlendOutTriggerTime, TEXT("Category"), TEXT("Montage"));
				MetaData->SetValue(NewProp_BlendOutTriggerTime, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimMontage.h"));
				MetaData->SetValue(NewProp_BlendOutTriggerTime, TEXT("ToolTip"), TEXT("Time from Sequence End to trigger blend out.\n<0 means using BlendOutTime, so BlendOut finishes as Montage ends.\n>=0 means using 'SequenceEnd - BlendOutTriggerTime' to trigger blend out."));
				MetaData->SetValue(NewProp_BlendOutTime, TEXT("Category"), TEXT("Montage"));
				MetaData->SetValue(NewProp_BlendOutTime, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimMontage.h"));
				MetaData->SetValue(NewProp_BlendOutTime, TEXT("ToolTip"), TEXT("Default blend out time."));
				MetaData->SetValue(NewProp_BlendInTime, TEXT("Category"), TEXT("Montage"));
				MetaData->SetValue(NewProp_BlendInTime, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimMontage.h"));
				MetaData->SetValue(NewProp_BlendInTime, TEXT("ToolTip"), TEXT("Default blend in time."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UAnimMontage(Z_Construct_UClass_UAnimMontage, TEXT("UAnimMontage"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UAnimMontage);
	UEnum* Z_Construct_UEnum_Engine_EAdditiveBasePoseType()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EAdditiveBasePoseType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EAdditiveBasePoseType"), 0, Get_Z_Construct_UEnum_Engine_EAdditiveBasePoseType_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EAdditiveBasePoseType"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ABPT_None")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ABPT_RefPose")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ABPT_AnimScaled")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ABPT_AnimFrame")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ABPT_MAX")), 4));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ABPT_AnimFrame.DisplayName"), TEXT("Selected animation frame"));
			MetaData->SetValue(ReturnEnum, TEXT("ABPT_AnimFrame.ToolTip"), TEXT("Use one frame of an animation as a base pose. BasePoseSeq and RefFrameIndex must be set (RefFrameIndex will be clamped)."));
			MetaData->SetValue(ReturnEnum, TEXT("ABPT_AnimScaled.DisplayName"), TEXT("Selected animation scaled"));
			MetaData->SetValue(ReturnEnum, TEXT("ABPT_AnimScaled.ToolTip"), TEXT("Use a whole animation as a base pose. BasePoseSeq must be set."));
			MetaData->SetValue(ReturnEnum, TEXT("ABPT_None.DisplayName"), TEXT("None"));
			MetaData->SetValue(ReturnEnum, TEXT("ABPT_None.ToolTip"), TEXT("Will be deprecated."));
			MetaData->SetValue(ReturnEnum, TEXT("ABPT_RefPose.DisplayName"), TEXT("Reference Pose"));
			MetaData->SetValue(ReturnEnum, TEXT("ABPT_RefPose.ToolTip"), TEXT("Use the Skeleton's ref pose as base."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSequence.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("For an additive animation, indicates what the animation is relative to."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EAdditiveBasePoseType_CRC() { return 926214338U; }
	UEnum* Z_Construct_UEnum_Engine_AnimationKeyFormat()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_AnimationKeyFormat_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("AnimationKeyFormat"), 0, Get_Z_Construct_UEnum_Engine_AnimationKeyFormat_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimationKeyFormat"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("AKF_ConstantKeyLerp")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("AKF_VariableKeyLerp")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("AKF_PerTrackCompression")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("AKF_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSequence.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Indicates animation data key format."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_AnimationKeyFormat_CRC() { return 160618779U; }
	UEnum* Z_Construct_UEnum_Engine_AnimationCompressionFormat()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_AnimationCompressionFormat_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("AnimationCompressionFormat"), 0, Get_Z_Construct_UEnum_Engine_AnimationCompressionFormat_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimationCompressionFormat"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ACF_None")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ACF_Float96NoW")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ACF_Fixed48NoW")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ACF_IntervalFixed32NoW")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ACF_Fixed32NoW")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ACF_Float32NoW")), 5));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ACF_Identity")), 6));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ACF_MAX")), 7));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ACF_MAX.Hidden"), TEXT(""));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSequence.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Indicates animation data compression format."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_AnimationCompressionFormat_CRC() { return 2751725148U; }
	UScriptStruct* Z_Construct_UScriptStruct_FCompressedOffsetData()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FCompressedOffsetData_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("CompressedOffsetData"), sizeof(FCompressedOffsetData), Get_Z_Construct_UScriptStruct_FCompressedOffsetData_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CompressedOffsetData"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FCompressedOffsetData>, EStructFlags(0x00000201));
			UProperty* NewProp_StripSize = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("StripSize"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(StripSize, FCompressedOffsetData), 0x0000000000000000);
			UProperty* NewProp_OffsetData = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("OffsetData"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(OffsetData, FCompressedOffsetData), 0x0000000000000000);
			UProperty* NewProp_OffsetData_Inner = new(EC_InternalUseOnlyConstructor, NewProp_OffsetData, TEXT("OffsetData"), RF_Public|RF_Transient|RF_Native) UIntProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSequence.h"));
			MetaData->SetValue(NewProp_StripSize, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSequence.h"));
			MetaData->SetValue(NewProp_OffsetData, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSequence.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FCompressedOffsetData_CRC() { return 2933842473U; }
	UScriptStruct* Z_Construct_UScriptStruct_FCompressedTrack()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FCompressedTrack_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("CompressedTrack"), sizeof(FCompressedTrack), Get_Z_Construct_UScriptStruct_FCompressedTrack_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CompressedTrack"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FCompressedTrack>, EStructFlags(0x00000201));
			UProperty* NewProp_Ranges = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Ranges"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Ranges, FCompressedTrack), 0x0000000000000000);
			NewProp_Ranges->ArrayDim = CPP_ARRAY_DIM(Ranges, FCompressedTrack);
			UProperty* NewProp_Mins = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Mins"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Mins, FCompressedTrack), 0x0000000000000000);
			NewProp_Mins->ArrayDim = CPP_ARRAY_DIM(Mins, FCompressedTrack);
			UProperty* NewProp_Times = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Times"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Times, FCompressedTrack), 0x0000000000000000);
			UProperty* NewProp_Times_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Times, TEXT("Times"), RF_Public|RF_Transient|RF_Native) UFloatProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_ByteStream = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ByteStream"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ByteStream, FCompressedTrack), 0x0000000000000000);
			UProperty* NewProp_ByteStream_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ByteStream, TEXT("ByteStream"), RF_Public|RF_Transient|RF_Native) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSequence.h"));
			MetaData->SetValue(NewProp_Ranges, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSequence.h"));
			MetaData->SetValue(NewProp_Mins, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSequence.h"));
			MetaData->SetValue(NewProp_Times, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSequence.h"));
			MetaData->SetValue(NewProp_ByteStream, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSequence.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FCompressedTrack_CRC() { return 3748221376U; }
	UScriptStruct* Z_Construct_UScriptStruct_FCurveTrack()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FCurveTrack_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("CurveTrack"), sizeof(FCurveTrack), Get_Z_Construct_UScriptStruct_FCurveTrack_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CurveTrack"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FCurveTrack>, EStructFlags(0x00000201));
			UProperty* NewProp_CurveWeights = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CurveWeights"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(CurveWeights, FCurveTrack), 0x0000000000000000);
			UProperty* NewProp_CurveWeights_Inner = new(EC_InternalUseOnlyConstructor, NewProp_CurveWeights, TEXT("CurveWeights"), RF_Public|RF_Transient|RF_Native) UFloatProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_CurveName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CurveName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(CurveName, FCurveTrack), 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSequence.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Key frame curve data for one track\nCurveName: Morph Target Name\nCurveWeights: List of weights for each frame"));
			MetaData->SetValue(NewProp_CurveWeights, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSequence.h"));
			MetaData->SetValue(NewProp_CurveName, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSequence.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FCurveTrack_CRC() { return 250301214U; }
	UScriptStruct* Z_Construct_UScriptStruct_FScaleTrack()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FScaleTrack_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("ScaleTrack"), sizeof(FScaleTrack), Get_Z_Construct_UScriptStruct_FScaleTrack_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ScaleTrack"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FScaleTrack>, EStructFlags(0x00000201));
			UProperty* NewProp_Times = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Times"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Times, FScaleTrack), 0x0000000000000000);
			UProperty* NewProp_Times_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Times, TEXT("Times"), RF_Public|RF_Transient|RF_Native) UFloatProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_ScaleKeys = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ScaleKeys"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ScaleKeys, FScaleTrack), 0x0000000000000000);
			UProperty* NewProp_ScaleKeys_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ScaleKeys, TEXT("ScaleKeys"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FVector());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSequence.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Keyframe scale data for one track.  Scale(i) occurs at Time(i).  Rot.Num() always equals Time.Num()."));
			MetaData->SetValue(NewProp_Times, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSequence.h"));
			MetaData->SetValue(NewProp_ScaleKeys, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSequence.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FScaleTrack_CRC() { return 910659507U; }
	UScriptStruct* Z_Construct_UScriptStruct_FRotationTrack()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FRotationTrack_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("RotationTrack"), sizeof(FRotationTrack), Get_Z_Construct_UScriptStruct_FRotationTrack_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RotationTrack"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FRotationTrack>, EStructFlags(0x00000201));
			UProperty* NewProp_Times = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Times"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Times, FRotationTrack), 0x0000000000000000);
			UProperty* NewProp_Times_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Times, TEXT("Times"), RF_Public|RF_Transient|RF_Native) UFloatProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_RotKeys = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RotKeys"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(RotKeys, FRotationTrack), 0x0000000000000000);
			UProperty* NewProp_RotKeys_Inner = new(EC_InternalUseOnlyConstructor, NewProp_RotKeys, TEXT("RotKeys"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FQuat());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSequence.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Keyframe rotation data for one track.  Rot(i) occurs at Time(i).  Rot.Num() always equals Time.Num()."));
			MetaData->SetValue(NewProp_Times, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSequence.h"));
			MetaData->SetValue(NewProp_RotKeys, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSequence.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FRotationTrack_CRC() { return 3957944422U; }
	UScriptStruct* Z_Construct_UScriptStruct_FTranslationTrack()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FTranslationTrack_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("TranslationTrack"), sizeof(FTranslationTrack), Get_Z_Construct_UScriptStruct_FTranslationTrack_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TranslationTrack"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FTranslationTrack>, EStructFlags(0x00000201));
			UProperty* NewProp_Times = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Times"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Times, FTranslationTrack), 0x0000000000000000);
			UProperty* NewProp_Times_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Times, TEXT("Times"), RF_Public|RF_Transient|RF_Native) UFloatProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_PosKeys = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PosKeys"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(PosKeys, FTranslationTrack), 0x0000000000000000);
			UProperty* NewProp_PosKeys_Inner = new(EC_InternalUseOnlyConstructor, NewProp_PosKeys, TEXT("PosKeys"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FVector());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSequence.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Keyframe position data for one track.  Pos(i) occurs at Time(i).  Pos.Num() always equals Time.Num()."));
			MetaData->SetValue(NewProp_Times, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSequence.h"));
			MetaData->SetValue(NewProp_PosKeys, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSequence.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FTranslationTrack_CRC() { return 4026478167U; }
	UScriptStruct* Z_Construct_UScriptStruct_FTrackToSkeletonMap()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FTrackToSkeletonMap_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("TrackToSkeletonMap"), sizeof(FTrackToSkeletonMap), Get_Z_Construct_UScriptStruct_FTrackToSkeletonMap_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TrackToSkeletonMap"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FTrackToSkeletonMap>, EStructFlags(0x00000201));
			UProperty* NewProp_BoneTreeIndex = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BoneTreeIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(BoneTreeIndex, FTrackToSkeletonMap), 0x0000000000000000);
			UProperty* NewProp_SkeletonIndex = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SkeletonIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(SkeletonIndex_DEPRECATED, FTrackToSkeletonMap), 0x0000000020000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSequence.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("@note We have a plan to support skeletal hierarchy. When that happens, we'd like to keep skeleton indexing."));
			MetaData->SetValue(NewProp_BoneTreeIndex, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSequence.h"));
			MetaData->SetValue(NewProp_BoneTreeIndex, TEXT("ToolTip"), TEXT("Index of Skeleton.BoneTree this Track belongs to."));
			MetaData->SetValue(NewProp_SkeletonIndex, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSequence.h"));
			MetaData->SetValue(NewProp_SkeletonIndex, TEXT("ToolTip"), TEXT("0 is the current Skeleton (the one above), and N is the Nth parent."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FTrackToSkeletonMap_CRC() { return 3715739568U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimSequenceTrackContainer()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimSequenceTrackContainer_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("AnimSequenceTrackContainer"), sizeof(FAnimSequenceTrackContainer), Get_Z_Construct_UScriptStruct_FAnimSequenceTrackContainer_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimSequenceTrackContainer"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FAnimSequenceTrackContainer>, EStructFlags(0x00000201));
			UProperty* NewProp_TrackNames = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TrackNames"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(TrackNames, FAnimSequenceTrackContainer), 0x0000000000000000);
			UProperty* NewProp_TrackNames_Inner = new(EC_InternalUseOnlyConstructor, NewProp_TrackNames, TEXT("TrackNames"), RF_Public|RF_Transient|RF_Native) UNameProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_AnimationTracks = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("AnimationTracks"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(AnimationTracks, FAnimSequenceTrackContainer), 0x0000000000000000);
			UProperty* NewProp_AnimationTracks_Inner = new(EC_InternalUseOnlyConstructor, NewProp_AnimationTracks, TEXT("AnimationTracks"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FRawAnimSequenceTrack());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSequence.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("These two always should go together, but it is not right now.\nI wonder in the future, we change all compressed to be inside as well, so they all stay together\nWhen remove tracks, it should be handled together"));
			MetaData->SetValue(NewProp_TrackNames, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSequence.h"));
			MetaData->SetValue(NewProp_AnimationTracks, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSequence.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimSequenceTrackContainer_CRC() { return 664979695U; }
	UScriptStruct* Z_Construct_UScriptStruct_FRawAnimSequenceTrack()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FRawAnimSequenceTrack_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("RawAnimSequenceTrack"), sizeof(FRawAnimSequenceTrack), Get_Z_Construct_UScriptStruct_FRawAnimSequenceTrack_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RawAnimSequenceTrack"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FRawAnimSequenceTrack>, EStructFlags(0x00000201));
			UProperty* NewProp_ScaleKeys = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ScaleKeys"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ScaleKeys, FRawAnimSequenceTrack), 0x0000000000000000);
			UProperty* NewProp_ScaleKeys_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ScaleKeys, TEXT("ScaleKeys"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_RotKeys = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RotKeys"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(RotKeys, FRawAnimSequenceTrack), 0x0000000000000000);
			UProperty* NewProp_RotKeys_Inner = new(EC_InternalUseOnlyConstructor, NewProp_RotKeys, TEXT("RotKeys"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FQuat());
			UProperty* NewProp_PosKeys = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PosKeys"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(PosKeys, FRawAnimSequenceTrack), 0x0000000000000000);
			UProperty* NewProp_PosKeys_Inner = new(EC_InternalUseOnlyConstructor, NewProp_PosKeys, TEXT("PosKeys"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FVector());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSequence.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Raw keyframe data for one track.  Each array will contain either NumFrames elements or 1 element.\nOne element is used as a simple compression scheme where if all keys are the same, they'll be\nreduced to 1 key that is constant over the entire sequence."));
			MetaData->SetValue(NewProp_ScaleKeys, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSequence.h"));
			MetaData->SetValue(NewProp_ScaleKeys, TEXT("ToolTip"), TEXT("Scale keys."));
			MetaData->SetValue(NewProp_RotKeys, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSequence.h"));
			MetaData->SetValue(NewProp_RotKeys, TEXT("ToolTip"), TEXT("Rotation keys."));
			MetaData->SetValue(NewProp_PosKeys, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSequence.h"));
			MetaData->SetValue(NewProp_PosKeys, TEXT("ToolTip"), TEXT("Position keys."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FRawAnimSequenceTrack_CRC() { return 3028227076U; }
	UClass* Z_Construct_UClass_UAnimSequence_NoRegister()
	{
		return UAnimSequence::StaticClass();
	}
	UClass* Z_Construct_UClass_UAnimSequence()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UAnimSequenceBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UAnimSequence::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
#if WITH_EDITORONLY_DATA
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bNeedsRebake, UAnimSequence, bool);
				UProperty* NewProp_bNeedsRebake = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bNeedsRebake"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bNeedsRebake, UAnimSequence), 0x0000000800002000, CPP_BOOL_PROPERTY_BITMASK(bNeedsRebake, UAnimSequence), sizeof(bool), true);
				UProperty* NewProp_SourceFileTimestamp = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SourceFileTimestamp"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(SourceFileTimestamp_DEPRECATED, UAnimSequence), 0x0000000820000000);
				UProperty* NewProp_SourceFilePath = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SourceFilePath"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(SourceFilePath_DEPRECATED, UAnimSequence), 0x0000000820000000);
				UProperty* NewProp_AssetImportData = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AssetImportData"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(AssetImportData, UAnimSequence), 0x0002000800080009, Z_Construct_UClass_UAssetImportData_NoRegister());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bWasCompressedWithoutTranslations, UAnimSequence, uint8);
				UProperty* NewProp_bWasCompressedWithoutTranslations = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bWasCompressedWithoutTranslations"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bWasCompressedWithoutTranslations, UAnimSequence), 0x0000000800000000, CPP_BOOL_PROPERTY_BITMASK(bWasCompressedWithoutTranslations, UAnimSequence), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDoNotOverrideCompression, UAnimSequence, uint8);
				UProperty* NewProp_bDoNotOverrideCompression = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bDoNotOverrideCompression"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDoNotOverrideCompression, UAnimSequence), 0x0000000800000001, CPP_BOOL_PROPERTY_BITMASK(bDoNotOverrideCompression, UAnimSequence), sizeof(uint8), false);
				UProperty* NewProp_CompressCommandletVersion = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CompressCommandletVersion"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(CompressCommandletVersion, UAnimSequence), 0x0000000800000000);
#endif // WITH_EDITORONLY_DATA
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bRootMotionSettingsCopiedFromMontage, UAnimSequence, bool);
				UProperty* NewProp_bRootMotionSettingsCopiedFromMontage = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bRootMotionSettingsCopiedFromMontage"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bRootMotionSettingsCopiedFromMontage, UAnimSequence), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bRootMotionSettingsCopiedFromMontage, UAnimSequence), sizeof(bool), true);
				UProperty* NewProp_RootMotionRootLock = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RootMotionRootLock"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(RootMotionRootLock, UAnimSequence), 0x0000000000000001, Z_Construct_UEnum_Engine_ERootMotionRootLock());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnableRootMotion, UAnimSequence, bool);
				UProperty* NewProp_bEnableRootMotion = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bEnableRootMotion"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnableRootMotion, UAnimSequence), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bEnableRootMotion, UAnimSequence), sizeof(bool), true);
				UProperty* NewProp_RetargetSource = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RetargetSource"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(RetargetSource, UAnimSequence), 0x0000010000000001);
				UProperty* NewProp_EncodingPkgVersion = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EncodingPkgVersion"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(EncodingPkgVersion, UAnimSequence), 0x0000000000000000);
				UProperty* NewProp_RefFrameIndex = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RefFrameIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(RefFrameIndex, UAnimSequence), 0x0000000000000001);
				UProperty* NewProp_RefPoseSeq = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RefPoseSeq"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(RefPoseSeq, UAnimSequence), 0x0000000000000001, Z_Construct_UClass_UAnimSequence_NoRegister());
				UProperty* NewProp_RefPoseType = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RefPoseType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(RefPoseType, UAnimSequence), 0x0000000000000001, Z_Construct_UEnum_Engine_EAdditiveBasePoseType());
				UProperty* NewProp_AdditiveAnimType = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AdditiveAnimType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(AdditiveAnimType, UAnimSequence), 0x0000010000000001, Z_Construct_UEnum_Engine_EAdditiveAnimationType());
				UProperty* NewProp_KeyEncodingFormat = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("KeyEncodingFormat"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(KeyEncodingFormat, UAnimSequence), 0x0000000000000000, Z_Construct_UEnum_Engine_AnimationKeyFormat());
				UProperty* NewProp_CompressedScaleOffsets = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CompressedScaleOffsets"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(CompressedScaleOffsets, UAnimSequence), 0x0000000000000000, Z_Construct_UScriptStruct_FCompressedOffsetData());
				UProperty* NewProp_CompressedTrackOffsets = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CompressedTrackOffsets"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(CompressedTrackOffsets, UAnimSequence), 0x0000000000000000);
				UProperty* NewProp_CompressedTrackOffsets_Inner = new(EC_InternalUseOnlyConstructor, NewProp_CompressedTrackOffsets, TEXT("CompressedTrackOffsets"), RF_Public|RF_Transient|RF_Native) UIntProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
				UProperty* NewProp_ScaleCompressionFormat = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ScaleCompressionFormat"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(ScaleCompressionFormat, UAnimSequence), 0x0000000000000000, Z_Construct_UEnum_Engine_AnimationCompressionFormat());
				UProperty* NewProp_RotationCompressionFormat = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RotationCompressionFormat"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(RotationCompressionFormat, UAnimSequence), 0x0000000000000000, Z_Construct_UEnum_Engine_AnimationCompressionFormat());
				UProperty* NewProp_TranslationCompressionFormat = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TranslationCompressionFormat"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(TranslationCompressionFormat, UAnimSequence), 0x0000000000000000, Z_Construct_UEnum_Engine_AnimationCompressionFormat());
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_CompressionScheme = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CompressionScheme"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(CompressionScheme, UAnimSequence), 0x00020008000a0009, Z_Construct_UClass_UAnimCompress_NoRegister());
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_ScaleData = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ScaleData"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ScaleData, UAnimSequence), 0x0000000000002000);
				UProperty* NewProp_ScaleData_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ScaleData, TEXT("ScaleData"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FScaleTrack());
				UProperty* NewProp_RotationData = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RotationData"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(RotationData, UAnimSequence), 0x0000000000002000);
				UProperty* NewProp_RotationData_Inner = new(EC_InternalUseOnlyConstructor, NewProp_RotationData, TEXT("RotationData"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FRotationTrack());
				UProperty* NewProp_TranslationData = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TranslationData"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(TranslationData, UAnimSequence), 0x0000000000002000);
				UProperty* NewProp_TranslationData_Inner = new(EC_InternalUseOnlyConstructor, NewProp_TranslationData, TEXT("TranslationData"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FTranslationTrack());
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_AnimationTrackNames = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AnimationTrackNames"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(AnimationTrackNames, UAnimSequence), 0x0000000800000000);
				UProperty* NewProp_AnimationTrackNames_Inner = new(EC_InternalUseOnlyConstructor, NewProp_AnimationTrackNames, TEXT("AnimationTrackNames"), RF_Public|RF_Transient|RF_Native) UNameProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000800000000);
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_TrackToSkeletonMapTable = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TrackToSkeletonMapTable"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(TrackToSkeletonMapTable, UAnimSequence), 0x0000000000000000);
				UProperty* NewProp_TrackToSkeletonMapTable_Inner = new(EC_InternalUseOnlyConstructor, NewProp_TrackToSkeletonMapTable, TEXT("TrackToSkeletonMapTable"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FTrackToSkeletonMap());
				UProperty* NewProp_NumFrames = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NumFrames"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(NumFrames, UAnimSequence), 0x0000010000000000);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("UObject Length"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Animation/AnimSequence.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSequence.h"));
				MetaData->SetValue(NewProp_bNeedsRebake, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSequence.h"));
				MetaData->SetValue(NewProp_SourceFileTimestamp, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSequence.h"));
				MetaData->SetValue(NewProp_SourceFileTimestamp, TEXT("ToolTip"), TEXT("Date/Time-stamp of the file from the last import"));
				MetaData->SetValue(NewProp_SourceFilePath, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSequence.h"));
				MetaData->SetValue(NewProp_SourceFilePath, TEXT("ToolTip"), TEXT("Path to the resource used to construct this skeletal mesh"));
				MetaData->SetValue(NewProp_AssetImportData, TEXT("Category"), TEXT("ImportSettings"));
				MetaData->SetValue(NewProp_AssetImportData, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_AssetImportData, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSequence.h"));
				MetaData->SetValue(NewProp_AssetImportData, TEXT("ToolTip"), TEXT("Importing data and options used for this mesh"));
				MetaData->SetValue(NewProp_bWasCompressedWithoutTranslations, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSequence.h"));
				MetaData->SetValue(NewProp_bWasCompressedWithoutTranslations, TEXT("ToolTip"), TEXT("Used to track whether, or not, this sequence was compressed with it's full translation tracks"));
				MetaData->SetValue(NewProp_bDoNotOverrideCompression, TEXT("Category"), TEXT("Compression"));
				MetaData->SetValue(NewProp_bDoNotOverrideCompression, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSequence.h"));
				MetaData->SetValue(NewProp_bDoNotOverrideCompression, TEXT("ToolTip"), TEXT("Do not attempt to override compression scheme when running CompressAnimations commandlet.\nSome high frequency animations are too sensitive and shouldn't be changed."));
				MetaData->SetValue(NewProp_CompressCommandletVersion, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSequence.h"));
				MetaData->SetValue(NewProp_CompressCommandletVersion, TEXT("ToolTip"), TEXT("Saved version number with CompressAnimations commandlet. To help with doing it in multiple passes."));
				MetaData->SetValue(NewProp_bRootMotionSettingsCopiedFromMontage, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSequence.h"));
				MetaData->SetValue(NewProp_bRootMotionSettingsCopiedFromMontage, TEXT("ToolTip"), TEXT("Have we copied root motion settings from an owning montage"));
				MetaData->SetValue(NewProp_RootMotionRootLock, TEXT("Category"), TEXT("RootMotion"));
				MetaData->SetValue(NewProp_RootMotionRootLock, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSequence.h"));
				MetaData->SetValue(NewProp_RootMotionRootLock, TEXT("ToolTip"), TEXT("Root Bone will be locked to that position when extracting root motion.*"));
				MetaData->SetValue(NewProp_bEnableRootMotion, TEXT("Category"), TEXT("RootMotion"));
				MetaData->SetValue(NewProp_bEnableRootMotion, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSequence.h"));
				MetaData->SetValue(NewProp_bEnableRootMotion, TEXT("ToolTip"), TEXT("If this is on, it will allow extracting of root motion *"));
				MetaData->SetValue(NewProp_RetargetSource, TEXT("Category"), TEXT("Animation"));
				MetaData->SetValue(NewProp_RetargetSource, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSequence.h"));
				MetaData->SetValue(NewProp_RetargetSource, TEXT("ToolTip"), TEXT("Base pose to use when retargeting"));
				MetaData->SetValue(NewProp_EncodingPkgVersion, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSequence.h"));
				MetaData->SetValue(NewProp_EncodingPkgVersion, TEXT("ToolTip"), TEXT("The version of the global encoding package used at the time of import"));
				MetaData->SetValue(NewProp_RefFrameIndex, TEXT("Category"), TEXT("AdditiveSettings"));
				MetaData->SetValue(NewProp_RefFrameIndex, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSequence.h"));
				MetaData->SetValue(NewProp_RefFrameIndex, TEXT("ToolTip"), TEXT("Additve reference frame if RefPoseType == AnimFrame *"));
				MetaData->SetValue(NewProp_RefPoseSeq, TEXT("Category"), TEXT("AdditiveSettings"));
				MetaData->SetValue(NewProp_RefPoseSeq, TEXT("DisplayName"), TEXT("Base Pose Animation"));
				MetaData->SetValue(NewProp_RefPoseSeq, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSequence.h"));
				MetaData->SetValue(NewProp_RefPoseSeq, TEXT("ToolTip"), TEXT("Additive reference animation if it's relevant - i.e. AnimScaled or AnimFrame *"));
				MetaData->SetValue(NewProp_RefPoseType, TEXT("Category"), TEXT("AdditiveSettings"));
				MetaData->SetValue(NewProp_RefPoseType, TEXT("DisplayName"), TEXT("Base Pose Type"));
				MetaData->SetValue(NewProp_RefPoseType, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSequence.h"));
				MetaData->SetValue(NewProp_RefPoseType, TEXT("ToolTip"), TEXT("Additive refrerence pose type. Refer above enum type"));
				MetaData->SetValue(NewProp_AdditiveAnimType, TEXT("Category"), TEXT("AdditiveSettings"));
				MetaData->SetValue(NewProp_AdditiveAnimType, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSequence.h"));
				MetaData->SetValue(NewProp_AdditiveAnimType, TEXT("ToolTip"), TEXT("Additive animation type. *"));
				MetaData->SetValue(NewProp_KeyEncodingFormat, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSequence.h"));
				MetaData->SetValue(NewProp_CompressedScaleOffsets, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSequence.h"));
				MetaData->SetValue(NewProp_CompressedScaleOffsets, TEXT("ToolTip"), TEXT("An array of 2*NumTrack ints, arranged as follows:\n               if identity, it is offset\n               if not, it is num of keys\n  [0] Scale0.Offset or NumKeys\n  [1] Scale1.Offset or NumKeys\n\n@TODO NOTE: first implementation is offset is [0], numkeys [1]\n  . . ."));
				MetaData->SetValue(NewProp_CompressedTrackOffsets, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSequence.h"));
				MetaData->SetValue(NewProp_CompressedTrackOffsets, TEXT("ToolTip"), TEXT("An array of 4*NumTrack ints, arranged as follows: - PerTrack is 2*NumTrack, so this isn't true any more\n  [0] Trans0.Offset\n  [1] Trans0.NumKeys\n  [2] Rot0.Offset\n  [3] Rot0.NumKeys\n  [4] Trans1.Offset\n  . . ."));
				MetaData->SetValue(NewProp_ScaleCompressionFormat, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSequence.h"));
				MetaData->SetValue(NewProp_ScaleCompressionFormat, TEXT("ToolTip"), TEXT("The compression format that was used to compress rotation tracks."));
				MetaData->SetValue(NewProp_RotationCompressionFormat, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSequence.h"));
				MetaData->SetValue(NewProp_RotationCompressionFormat, TEXT("ToolTip"), TEXT("The compression format that was used to compress rotation tracks."));
				MetaData->SetValue(NewProp_TranslationCompressionFormat, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSequence.h"));
				MetaData->SetValue(NewProp_TranslationCompressionFormat, TEXT("ToolTip"), TEXT("The compression format that was used to compress translation tracks."));
				MetaData->SetValue(NewProp_CompressionScheme, TEXT("Category"), TEXT("Compression"));
				MetaData->SetValue(NewProp_CompressionScheme, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_CompressionScheme, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSequence.h"));
				MetaData->SetValue(NewProp_CompressionScheme, TEXT("ToolTip"), TEXT("The compression scheme that was most recently used to compress this animation.\nMay be NULL."));
				MetaData->SetValue(NewProp_ScaleData, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSequence.h"));
				MetaData->SetValue(NewProp_ScaleData, TEXT("ToolTip"), TEXT("Scale data post keyframe reduction.  ScaleData.Num() is zero if keyframe reduction\nhas not yet been applied."));
				MetaData->SetValue(NewProp_RotationData, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSequence.h"));
				MetaData->SetValue(NewProp_RotationData, TEXT("ToolTip"), TEXT("Rotation data post keyframe reduction.  RotationData.Num() is zero if keyframe reduction\nhas not yet been applied."));
				MetaData->SetValue(NewProp_TranslationData, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSequence.h"));
				MetaData->SetValue(NewProp_TranslationData, TEXT("ToolTip"), TEXT("Translation data post keyframe reduction.  TranslationData.Num() is zero if keyframe reduction\nhas not yet been applied."));
				MetaData->SetValue(NewProp_AnimationTrackNames, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSequence.h"));
				MetaData->SetValue(NewProp_AnimationTrackNames, TEXT("ToolTip"), TEXT("This is name of tracks for editoronly - if we lose skeleton, we'll need relink them"));
				MetaData->SetValue(NewProp_TrackToSkeletonMapTable, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSequence.h"));
				MetaData->SetValue(NewProp_TrackToSkeletonMapTable, TEXT("ToolTip"), TEXT("In the future, maybe keeping RawAnimSequenceTrack + TrackMap as one would be good idea to avoid inconsistent array size\nTrackToSkeletonMapTable(i) should contains  track mapping data for RawAnimationData(i)."));
				MetaData->SetValue(NewProp_NumFrames, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSequence.h"));
				MetaData->SetValue(NewProp_NumFrames, TEXT("ToolTip"), TEXT("Number of raw frames in this sequence (not used by engine - just for informational purposes)."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UAnimSequence(Z_Construct_UClass_UAnimSequence, TEXT("UAnimSequence"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UAnimSequence);
	UEnum* Z_Construct_UEnum_Engine_ENotifyTriggerMode()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_ENotifyTriggerMode_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ENotifyTriggerMode"), 0, Get_Z_Construct_UEnum_Engine_ENotifyTriggerMode_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ENotifyTriggerMode"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ENotifyTriggerMode::AllAnimations")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ENotifyTriggerMode::HighestWeightedAnimation")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ENotifyTriggerMode::None")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ENotifyTriggerMode::ENotifyTriggerMode_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("AllAnimations.DisplayName"), TEXT("All Animations"));
			MetaData->SetValue(ReturnEnum, TEXT("HighestWeightedAnimation.DisplayName"), TEXT("Highest Weighted Animation"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/BlendSpaceBase.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_ENotifyTriggerMode_CRC() { return 2001701556U; }
	UEnum* Z_Construct_UEnum_Engine_EBlendSpaceAxis()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EBlendSpaceAxis_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EBlendSpaceAxis"), 0, Get_Z_Construct_UEnum_Engine_EBlendSpaceAxis_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EBlendSpaceAxis"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("BSA_None")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("BSA_X")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("BSA_Y")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("BSA_Max")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/BlendSpaceBase.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Interpolation data types."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EBlendSpaceAxis_CRC() { return 3452770098U; }
	UScriptStruct* Z_Construct_UScriptStruct_FPerBoneInterpolation()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FPerBoneInterpolation_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("PerBoneInterpolation"), sizeof(FPerBoneInterpolation), Get_Z_Construct_UScriptStruct_FPerBoneInterpolation_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PerBoneInterpolation"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FPerBoneInterpolation>, EStructFlags(0x00000001));
			UProperty* NewProp_InterpolationSpeedPerSec = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("InterpolationSpeedPerSec"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InterpolationSpeedPerSec, FPerBoneInterpolation), 0x0000000000000001);
			UProperty* NewProp_BoneReference = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BoneReference"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(BoneReference, FPerBoneInterpolation), 0x0000000000000001, Z_Construct_UScriptStruct_FBoneReference());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/BlendSpaceBase.h"));
			MetaData->SetValue(NewProp_InterpolationSpeedPerSec, TEXT("Category"), TEXT("FPerBoneInterpolation"));
			MetaData->SetValue(NewProp_InterpolationSpeedPerSec, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/BlendSpaceBase.h"));
			MetaData->SetValue(NewProp_BoneReference, TEXT("Category"), TEXT("FPerBoneInterpolation"));
			MetaData->SetValue(NewProp_BoneReference, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/BlendSpaceBase.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FPerBoneInterpolation_CRC() { return 850533886U; }
	UScriptStruct* Z_Construct_UScriptStruct_FGridBlendSample()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FGridBlendSample_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("GridBlendSample"), sizeof(FGridBlendSample), Get_Z_Construct_UScriptStruct_FGridBlendSample_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GridBlendSample"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FGridBlendSample>, EStructFlags(0x00000001));
			UProperty* NewProp_BlendWeight = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BlendWeight"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(BlendWeight, FGridBlendSample), 0x0000000000000000);
			UProperty* NewProp_GridElement = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("GridElement"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(GridElement, FGridBlendSample), 0x0000000000000000, Z_Construct_UScriptStruct_FEditorElement());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/BlendSpaceBase.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("result of how much weight of the grid element *"));
			MetaData->SetValue(NewProp_BlendWeight, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/BlendSpaceBase.h"));
			MetaData->SetValue(NewProp_GridElement, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/BlendSpaceBase.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FGridBlendSample_CRC() { return 1794874755U; }
	UScriptStruct* Z_Construct_UScriptStruct_FEditorElement()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FEditorElement_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("EditorElement"), sizeof(FEditorElement), Get_Z_Construct_UScriptStruct_FEditorElement_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EditorElement"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FEditorElement>, EStructFlags(0x00000001));
			UProperty* NewProp_Weights = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Weights"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Weights, FEditorElement), 0x0000000000000001);
			NewProp_Weights->ArrayDim = CPP_ARRAY_DIM(Weights, FEditorElement);
			UProperty* NewProp_Indices = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Indices"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Indices, FEditorElement), 0x0000000000000001);
			NewProp_Indices->ArrayDim = CPP_ARRAY_DIM(Indices, FEditorElement);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/BlendSpaceBase.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Each elements in the grid"));
			MetaData->SetValue(NewProp_Weights, TEXT("Category"), TEXT("EditorElement"));
			MetaData->SetValue(NewProp_Weights, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/BlendSpaceBase.h"));
			MetaData->SetValue(NewProp_Weights, TEXT("ToolTip"), TEXT("MAX_VERTICES @fixmeconst"));
			MetaData->SetValue(NewProp_Indices, TEXT("Category"), TEXT("EditorElement"));
			MetaData->SetValue(NewProp_Indices, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/BlendSpaceBase.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FEditorElement_CRC() { return 2534398147U; }
	UScriptStruct* Z_Construct_UScriptStruct_FBlendSample()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FBlendSample_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("BlendSample"), sizeof(FBlendSample), Get_Z_Construct_UScriptStruct_FBlendSample_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BlendSample"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FBlendSample>, EStructFlags(0x00000001));
			UProperty* NewProp_SampleValue = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SampleValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SampleValue, FBlendSample), 0x0000000000000001, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Animation = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Animation"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Animation, FBlendSample), 0x0000000000000001, Z_Construct_UClass_UAnimSequence_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/BlendSpaceBase.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Sample data"));
			MetaData->SetValue(NewProp_SampleValue, TEXT("Category"), TEXT("BlendSample"));
			MetaData->SetValue(NewProp_SampleValue, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/BlendSpaceBase.h"));
			MetaData->SetValue(NewProp_SampleValue, TEXT("ToolTip"), TEXT("blend 0->x, blend 1->y, blend 2->z"));
			MetaData->SetValue(NewProp_Animation, TEXT("Category"), TEXT("BlendSample"));
			MetaData->SetValue(NewProp_Animation, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/BlendSpaceBase.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FBlendSample_CRC() { return 2648992566U; }
	UScriptStruct* Z_Construct_UScriptStruct_FBlendParameter()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FBlendParameter_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("BlendParameter"), sizeof(FBlendParameter), Get_Z_Construct_UScriptStruct_FBlendParameter_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BlendParameter"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FBlendParameter>, EStructFlags(0x00000001));
			UProperty* NewProp_GridNum = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("GridNum"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(GridNum, FBlendParameter), 0x0000000000000001);
			UProperty* NewProp_Max = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Max"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Max, FBlendParameter), 0x0000000000000001);
			UProperty* NewProp_Min = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Min"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Min, FBlendParameter), 0x0000000000000001);
			UProperty* NewProp_DisplayName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DisplayName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(DisplayName, FBlendParameter), 0x0000000000000001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/BlendSpaceBase.h"));
			MetaData->SetValue(NewProp_GridNum, TEXT("Category"), TEXT("BlendParameter"));
			MetaData->SetValue(NewProp_GridNum, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/BlendSpaceBase.h"));
			MetaData->SetValue(NewProp_GridNum, TEXT("ToolTip"), TEXT("how many grid for this parameter."));
			MetaData->SetValue(NewProp_Max, TEXT("Category"), TEXT("BlendParameter"));
			MetaData->SetValue(NewProp_Max, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/BlendSpaceBase.h"));
			MetaData->SetValue(NewProp_Max, TEXT("ToolTip"), TEXT("Max value for this parameter."));
			MetaData->SetValue(NewProp_Min, TEXT("Category"), TEXT("BlendParameter"));
			MetaData->SetValue(NewProp_Min, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/BlendSpaceBase.h"));
			MetaData->SetValue(NewProp_Min, TEXT("ToolTip"), TEXT("Min value for this parameter."));
			MetaData->SetValue(NewProp_DisplayName, TEXT("Category"), TEXT("BlendParameter"));
			MetaData->SetValue(NewProp_DisplayName, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/BlendSpaceBase.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FBlendParameter_CRC() { return 1435793260U; }
	UScriptStruct* Z_Construct_UScriptStruct_FInterpolationParameter()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FInterpolationParameter_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("InterpolationParameter"), sizeof(FInterpolationParameter), Get_Z_Construct_UScriptStruct_FInterpolationParameter_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("InterpolationParameter"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FInterpolationParameter>, EStructFlags(0x00000001));
			UProperty* NewProp_InterpolationType = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("InterpolationType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(InterpolationType, FInterpolationParameter), 0x0000000000000001, Z_Construct_UEnum_Engine_EFilterInterpolationType());
			UProperty* NewProp_InterpolationTime = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("InterpolationTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InterpolationTime, FInterpolationParameter), 0x0000000000000001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/BlendSpaceBase.h"));
			MetaData->SetValue(NewProp_InterpolationType, TEXT("Category"), TEXT("Parameter"));
			MetaData->SetValue(NewProp_InterpolationType, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/BlendSpaceBase.h"));
			MetaData->SetValue(NewProp_InterpolationType, TEXT("ToolTip"), TEXT("Interpolation Type for input, when it gets input, it will use this filter to decide how to get to target."));
			MetaData->SetValue(NewProp_InterpolationTime, TEXT("Category"), TEXT("Parameter"));
			MetaData->SetValue(NewProp_InterpolationTime, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/BlendSpaceBase.h"));
			MetaData->SetValue(NewProp_InterpolationTime, TEXT("ToolTip"), TEXT("Interpolation Time for input, when it gets input, it will use this time to interpolate to target, used for smoother interpolation."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FInterpolationParameter_CRC() { return 1017152023U; }
	UClass* Z_Construct_UClass_UBlendSpaceBase_NoRegister()
	{
		return UBlendSpaceBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UBlendSpaceBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UAnimationAsset();
			Z_Construct_UPackage_Engine();
			OuterClass = UBlendSpaceBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_GridSamples = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GridSamples"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(GridSamples, UBlendSpaceBase), 0x0000000000000000);
				UProperty* NewProp_GridSamples_Inner = new(EC_InternalUseOnlyConstructor, NewProp_GridSamples, TEXT("GridSamples"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FEditorElement());
				UProperty* NewProp_SampleData = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SampleData"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(SampleData, UBlendSpaceBase), 0x0000000000000000);
				UProperty* NewProp_SampleData_Inner = new(EC_InternalUseOnlyConstructor, NewProp_SampleData, TEXT("SampleData"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FBlendSample());
				UProperty* NewProp_PerBoneBlend = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PerBoneBlend"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(PerBoneBlend, UBlendSpaceBase), 0x0000000000000001);
				UProperty* NewProp_PerBoneBlend_Inner = new(EC_InternalUseOnlyConstructor, NewProp_PerBoneBlend, TEXT("PerBoneBlend"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FPerBoneInterpolation());
				UProperty* NewProp_AnimLength = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AnimLength"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(AnimLength, UBlendSpaceBase), 0x0000000000002000);
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_PreviewBasePose = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PreviewBasePose"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(PreviewBasePose, UBlendSpaceBase), 0x0000000800000001, Z_Construct_UClass_UAnimSequence_NoRegister());
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_NumOfDimension = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NumOfDimension"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(NumOfDimension, UBlendSpaceBase), 0x0000000000000000);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bRotationBlendInMeshSpace, UBlendSpaceBase, bool);
				UProperty* NewProp_bRotationBlendInMeshSpace = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bRotationBlendInMeshSpace"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bRotationBlendInMeshSpace, UBlendSpaceBase), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bRotationBlendInMeshSpace, UBlendSpaceBase), sizeof(bool), true);
				UProperty* NewProp_NotifyTriggerMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NotifyTriggerMode"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(NotifyTriggerMode, UBlendSpaceBase), 0x0000080000000001, Z_Construct_UEnum_Engine_ENotifyTriggerMode());
				UProperty* NewProp_TargetWeightInterpolationSpeedPerSec = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TargetWeightInterpolationSpeedPerSec"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(TargetWeightInterpolationSpeedPerSec, UBlendSpaceBase), 0x0000080000000001);
				UProperty* NewProp_InterpolationParam = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InterpolationParam"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InterpolationParam, UBlendSpaceBase), 0x0000080000000001, Z_Construct_UScriptStruct_FInterpolationParameter());
				NewProp_InterpolationParam->ArrayDim = CPP_ARRAY_DIM(InterpolationParam, UBlendSpaceBase);
				UProperty* NewProp_BlendParameters = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BlendParameters"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(BlendParameters, UBlendSpaceBase), 0x0000080000000000, Z_Construct_UScriptStruct_FBlendParameter());
				NewProp_BlendParameters->ArrayDim = CPP_ARRAY_DIM(BlendParameters, UBlendSpaceBase);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Animation/BlendSpaceBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/BlendSpaceBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Allows multiple animations to be blended between based on input parameters"));
				MetaData->SetValue(NewProp_GridSamples, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/BlendSpaceBase.h"));
				MetaData->SetValue(NewProp_GridSamples, TEXT("ToolTip"), TEXT("Grid samples, indexing scheme imposed by subclass *"));
				MetaData->SetValue(NewProp_SampleData, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/BlendSpaceBase.h"));
				MetaData->SetValue(NewProp_SampleData, TEXT("ToolTip"), TEXT("Sample animation data *"));
				MetaData->SetValue(NewProp_PerBoneBlend, TEXT("Category"), TEXT("SampleInterpolation"));
				MetaData->SetValue(NewProp_PerBoneBlend, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/BlendSpaceBase.h"));
				MetaData->SetValue(NewProp_PerBoneBlend, TEXT("ToolTip"), TEXT("Define target weight interpolation per bone. This will blend in different speed per each bone setting"));
				MetaData->SetValue(NewProp_AnimLength, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/BlendSpaceBase.h"));
				MetaData->SetValue(NewProp_AnimLength, TEXT("ToolTip"), TEXT("This animation length changes based on current input (resulting in different blend time)*"));
				MetaData->SetValue(NewProp_PreviewBasePose, TEXT("Category"), TEXT("AdditiveSettings"));
				MetaData->SetValue(NewProp_PreviewBasePose, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/BlendSpaceBase.h"));
				MetaData->SetValue(NewProp_PreviewBasePose, TEXT("ToolTip"), TEXT("Preview Base pose for additive BlendSpace *"));
				MetaData->SetValue(NewProp_NumOfDimension, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/BlendSpaceBase.h"));
				MetaData->SetValue(NewProp_NumOfDimension, TEXT("ToolTip"), TEXT("Number of dimensions for this blend space (1 or 2) *"));
				MetaData->SetValue(NewProp_bRotationBlendInMeshSpace, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/BlendSpaceBase.h"));
				MetaData->SetValue(NewProp_bRotationBlendInMeshSpace, TEXT("ToolTip"), TEXT("When you use blend per bone, allows rotation to blend in mesh space. This only works if this does not contain additive animation samples\nThis is more performance intensive"));
				MetaData->SetValue(NewProp_NotifyTriggerMode, TEXT("Category"), TEXT("AnimationNotifies"));
				MetaData->SetValue(NewProp_NotifyTriggerMode, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/BlendSpaceBase.h"));
				MetaData->SetValue(NewProp_NotifyTriggerMode, TEXT("ToolTip"), TEXT("The current mode used by the blendspace to decide which animation notifies to fire. Valid options are:\n              - AllAnimations - All notify events will fire\n              - HighestWeightedAnimation - Notify events will only fire from the highest weighted animation\n              - None - No notify events will fire from any animations"));
				MetaData->SetValue(NewProp_TargetWeightInterpolationSpeedPerSec, TEXT("Category"), TEXT("SampleInterpolation"));
				MetaData->SetValue(NewProp_TargetWeightInterpolationSpeedPerSec, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/BlendSpaceBase.h"));
				MetaData->SetValue(NewProp_TargetWeightInterpolationSpeedPerSec, TEXT("ToolTip"), TEXT("Target weight interpolation. When target samples are set, how fast you'd like to get to target. Improve target blending.\ni.e. for locomotion, if you interpolate input, when you move from left to right rapidly, you'll interpolate through forward, but if you use target weight interpolation,\nyou'll skip forward, but interpolate between left to right"));
				MetaData->SetValue(NewProp_InterpolationParam, TEXT("Category"), TEXT("InputInterpolation"));
				MetaData->SetValue(NewProp_InterpolationParam, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/BlendSpaceBase.h"));
				MetaData->SetValue(NewProp_InterpolationParam, TEXT("ToolTip"), TEXT("Input interpolation parameter for all 3 axis, for each axis input, decide how you'd like to interpolate input to"));
				MetaData->SetValue(NewProp_BlendParameters, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/BlendSpaceBase.h"));
				MetaData->SetValue(NewProp_BlendParameters, TEXT("ToolTip"), TEXT("Blend Parameters for each axis. *"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBlendSpaceBase(Z_Construct_UClass_UBlendSpaceBase, TEXT("UBlendSpaceBase"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBlendSpaceBase);
	UClass* Z_Construct_UClass_UBlendSpace_NoRegister()
	{
		return UBlendSpace::StaticClass();
	}
	UClass* Z_Construct_UClass_UBlendSpace()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBlendSpaceBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UBlendSpace::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_AxisToScaleAnimation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AxisToScaleAnimation"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(AxisToScaleAnimation, UBlendSpace), 0x0000000000000001, Z_Construct_UEnum_Engine_EBlendSpaceAxis());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Animation/BlendSpace.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/BlendSpace.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Contains a grid of data points with weights from sample points in the space"));
				MetaData->SetValue(NewProp_AxisToScaleAnimation, TEXT("Category"), TEXT("InputInterpolation"));
				MetaData->SetValue(NewProp_AxisToScaleAnimation, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/BlendSpace.h"));
				MetaData->SetValue(NewProp_AxisToScaleAnimation, TEXT("ToolTip"), TEXT("If you have input interpolation, which axis to drive animation speed (scale) - i.e. for locomotion animation, speed axis will drive animation speed (thus scale)*"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBlendSpace(Z_Construct_UClass_UBlendSpace, TEXT("UBlendSpace"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBlendSpace);
	UClass* Z_Construct_UClass_UAimOffsetBlendSpace_NoRegister()
	{
		return UAimOffsetBlendSpace::StaticClass();
	}
	UClass* Z_Construct_UClass_UAimOffsetBlendSpace()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBlendSpace();
			Z_Construct_UPackage_Engine();
			OuterClass = UAimOffsetBlendSpace::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880080;


				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Animation/AimOffsetBlendSpace.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AimOffsetBlendSpace.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UAimOffsetBlendSpace(Z_Construct_UClass_UAimOffsetBlendSpace, TEXT("UAimOffsetBlendSpace"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UAimOffsetBlendSpace);
	UClass* Z_Construct_UClass_UBlendSpace1D_NoRegister()
	{
		return UBlendSpace1D::StaticClass();
	}
	UClass* Z_Construct_UClass_UBlendSpace1D()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBlendSpaceBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UBlendSpace1D::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bScaleAnimation, UBlendSpace1D, bool);
				UProperty* NewProp_bScaleAnimation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bScaleAnimation"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bScaleAnimation, UBlendSpace1D), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bScaleAnimation, UBlendSpace1D), sizeof(bool), true);
#if WITH_EDITORONLY_DATA
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDisplayEditorVertically, UBlendSpace1D, bool);
				UProperty* NewProp_bDisplayEditorVertically = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bDisplayEditorVertically"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDisplayEditorVertically, UBlendSpace1D), 0x0000000800000001, CPP_BOOL_PROPERTY_BITMASK(bDisplayEditorVertically, UBlendSpace1D), sizeof(bool), true);
#endif // WITH_EDITORONLY_DATA
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Animation/BlendSpace1D.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/BlendSpace1D.h"));
				MetaData->SetValue(NewProp_bScaleAnimation, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/BlendSpace1D.h"));
				MetaData->SetValue(NewProp_bScaleAnimation, TEXT("ToolTip"), TEXT("Drive animation speed by blend input position *"));
				MetaData->SetValue(NewProp_bDisplayEditorVertically, TEXT("Category"), TEXT("BlendSpace"));
				MetaData->SetValue(NewProp_bDisplayEditorVertically, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/BlendSpace1D.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBlendSpace1D(Z_Construct_UClass_UBlendSpace1D, TEXT("UBlendSpace1D"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBlendSpace1D);
	UClass* Z_Construct_UClass_UAimOffsetBlendSpace1D_NoRegister()
	{
		return UAimOffsetBlendSpace1D::StaticClass();
	}
	UClass* Z_Construct_UClass_UAimOffsetBlendSpace1D()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBlendSpace1D();
			Z_Construct_UPackage_Engine();
			OuterClass = UAimOffsetBlendSpace1D::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880080;


				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Animation/AimOffsetBlendSpace1D.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AimOffsetBlendSpace1D.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UAimOffsetBlendSpace1D(Z_Construct_UClass_UAimOffsetBlendSpace1D, TEXT("UAimOffsetBlendSpace1D"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UAimOffsetBlendSpace1D);
	UClass* Z_Construct_UClass_UAnimCompress_NoRegister()
	{
		return UAnimCompress::StaticClass();
	}
	UClass* Z_Construct_UClass_UAnimCompress()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UAnimCompress::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080081;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ScaleCompressionFormat = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ScaleCompressionFormat"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(ScaleCompressionFormat, UAnimCompress), 0x0000000000000000, Z_Construct_UEnum_Engine_AnimationCompressionFormat());
				UProperty* NewProp_RotationCompressionFormat = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RotationCompressionFormat"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(RotationCompressionFormat, UAnimCompress), 0x0000000000000000, Z_Construct_UEnum_Engine_AnimationCompressionFormat());
				UProperty* NewProp_TranslationCompressionFormat = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TranslationCompressionFormat"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(TranslationCompressionFormat, UAnimCompress), 0x0000000000000000, Z_Construct_UEnum_Engine_AnimationCompressionFormat());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bNeedsSkeleton, UAnimCompress, uint8);
				UProperty* NewProp_bNeedsSkeleton = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bNeedsSkeleton"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bNeedsSkeleton, UAnimCompress), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bNeedsSkeleton, UAnimCompress), sizeof(uint8), false);
				UProperty* NewProp_Description = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Description"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Description, UAnimCompress), 0x0000000000020001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Animation/AnimCompress.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimCompress.h"));
				MetaData->SetValue(NewProp_ScaleCompressionFormat, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimCompress.h"));
				MetaData->SetValue(NewProp_ScaleCompressionFormat, TEXT("ToolTip"), TEXT("Format for bitwise compression of scale data."));
				MetaData->SetValue(NewProp_RotationCompressionFormat, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimCompress.h"));
				MetaData->SetValue(NewProp_RotationCompressionFormat, TEXT("ToolTip"), TEXT("Format for bitwise compression of rotation data."));
				MetaData->SetValue(NewProp_TranslationCompressionFormat, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimCompress.h"));
				MetaData->SetValue(NewProp_TranslationCompressionFormat, TEXT("ToolTip"), TEXT("Format for bitwise compression of translation data."));
				MetaData->SetValue(NewProp_bNeedsSkeleton, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimCompress.h"));
				MetaData->SetValue(NewProp_bNeedsSkeleton, TEXT("ToolTip"), TEXT("Compression algorithms requiring a skeleton should set this value to true."));
				MetaData->SetValue(NewProp_Description, TEXT("Category"), TEXT("Compression"));
				MetaData->SetValue(NewProp_Description, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimCompress.h"));
				MetaData->SetValue(NewProp_Description, TEXT("ToolTip"), TEXT("Name of Compression Scheme used for this asset"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UAnimCompress(Z_Construct_UClass_UAnimCompress, TEXT("UAnimCompress"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UAnimCompress);
	UClass* Z_Construct_UClass_UAnimCompress_Automatic_NoRegister()
	{
		return UAnimCompress_Automatic::StaticClass();
	}
	UClass* Z_Construct_UClass_UAnimCompress_Automatic()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UAnimCompress();
			Z_Construct_UPackage_Engine();
			OuterClass = UAnimCompress_Automatic::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bRaiseMaxErrorToExisting, UAnimCompress_Automatic, uint8);
				UProperty* NewProp_bRaiseMaxErrorToExisting = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bRaiseMaxErrorToExisting"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bRaiseMaxErrorToExisting, UAnimCompress_Automatic), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bRaiseMaxErrorToExisting, UAnimCompress_Automatic), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAutoReplaceIfExistingErrorTooGreat, UAnimCompress_Automatic, uint8);
				UProperty* NewProp_bAutoReplaceIfExistingErrorTooGreat = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAutoReplaceIfExistingErrorTooGreat"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAutoReplaceIfExistingErrorTooGreat, UAnimCompress_Automatic), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bAutoReplaceIfExistingErrorTooGreat, UAnimCompress_Automatic), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bRunCurrentDefaultCompressor, UAnimCompress_Automatic, uint8);
				UProperty* NewProp_bRunCurrentDefaultCompressor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bRunCurrentDefaultCompressor"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bRunCurrentDefaultCompressor, UAnimCompress_Automatic), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bRunCurrentDefaultCompressor, UAnimCompress_Automatic), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTryIntervalKeyRemoval, UAnimCompress_Automatic, uint8);
				UProperty* NewProp_bTryIntervalKeyRemoval = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bTryIntervalKeyRemoval"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTryIntervalKeyRemoval, UAnimCompress_Automatic), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bTryIntervalKeyRemoval, UAnimCompress_Automatic), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTryLinearKeyRemovalCompression, UAnimCompress_Automatic, uint8);
				UProperty* NewProp_bTryLinearKeyRemovalCompression = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bTryLinearKeyRemovalCompression"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTryLinearKeyRemovalCompression, UAnimCompress_Automatic), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bTryLinearKeyRemovalCompression, UAnimCompress_Automatic), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTryPerTrackBitwiseCompression, UAnimCompress_Automatic, uint8);
				UProperty* NewProp_bTryPerTrackBitwiseCompression = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bTryPerTrackBitwiseCompression"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTryPerTrackBitwiseCompression, UAnimCompress_Automatic), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bTryPerTrackBitwiseCompression, UAnimCompress_Automatic), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTryFixedBitwiseCompression, UAnimCompress_Automatic, uint8);
				UProperty* NewProp_bTryFixedBitwiseCompression = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bTryFixedBitwiseCompression"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTryFixedBitwiseCompression, UAnimCompress_Automatic), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bTryFixedBitwiseCompression, UAnimCompress_Automatic), sizeof(uint8), false);
				UProperty* NewProp_MaxEndEffectorError = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxEndEffectorError"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MaxEndEffectorError, UAnimCompress_Automatic), 0x0000000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("AnimationCompressionAlgorithm Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Animation/AnimCompress_Automatic.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimCompress_Automatic.h"));
				MetaData->SetValue(NewProp_bRaiseMaxErrorToExisting, TEXT("Category"), TEXT("AnimationCompressionAlgorithm_Automatic"));
				MetaData->SetValue(NewProp_bRaiseMaxErrorToExisting, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimCompress_Automatic.h"));
				MetaData->SetValue(NewProp_bAutoReplaceIfExistingErrorTooGreat, TEXT("Category"), TEXT("AnimationCompressionAlgorithm_Automatic"));
				MetaData->SetValue(NewProp_bAutoReplaceIfExistingErrorTooGreat, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimCompress_Automatic.h"));
				MetaData->SetValue(NewProp_bRunCurrentDefaultCompressor, TEXT("Category"), TEXT("AnimationCompressionAlgorithm_Automatic"));
				MetaData->SetValue(NewProp_bRunCurrentDefaultCompressor, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimCompress_Automatic.h"));
				MetaData->SetValue(NewProp_bTryIntervalKeyRemoval, TEXT("Category"), TEXT("AnimationCompressionAlgorithm_Automatic"));
				MetaData->SetValue(NewProp_bTryIntervalKeyRemoval, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimCompress_Automatic.h"));
				MetaData->SetValue(NewProp_bTryLinearKeyRemovalCompression, TEXT("Category"), TEXT("AnimationCompressionAlgorithm_Automatic"));
				MetaData->SetValue(NewProp_bTryLinearKeyRemovalCompression, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimCompress_Automatic.h"));
				MetaData->SetValue(NewProp_bTryPerTrackBitwiseCompression, TEXT("Category"), TEXT("AnimationCompressionAlgorithm_Automatic"));
				MetaData->SetValue(NewProp_bTryPerTrackBitwiseCompression, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimCompress_Automatic.h"));
				MetaData->SetValue(NewProp_bTryFixedBitwiseCompression, TEXT("Category"), TEXT("AnimationCompressionAlgorithm_Automatic"));
				MetaData->SetValue(NewProp_bTryFixedBitwiseCompression, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimCompress_Automatic.h"));
				MetaData->SetValue(NewProp_MaxEndEffectorError, TEXT("Category"), TEXT("AnimationCompressionAlgorithm_Automatic"));
				MetaData->SetValue(NewProp_MaxEndEffectorError, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimCompress_Automatic.h"));
				MetaData->SetValue(NewProp_MaxEndEffectorError, TEXT("ToolTip"), TEXT("Maximum amount of error that a compression technique can introduce in an end effector"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UAnimCompress_Automatic(Z_Construct_UClass_UAnimCompress_Automatic, TEXT("UAnimCompress_Automatic"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UAnimCompress_Automatic);
	UClass* Z_Construct_UClass_UAnimCompress_BitwiseCompressOnly_NoRegister()
	{
		return UAnimCompress_BitwiseCompressOnly::StaticClass();
	}
	UClass* Z_Construct_UClass_UAnimCompress_BitwiseCompressOnly()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UAnimCompress();
			Z_Construct_UPackage_Engine();
			OuterClass = UAnimCompress_BitwiseCompressOnly::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Animation/AnimCompress_BitwiseCompressOnly.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimCompress_BitwiseCompressOnly.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UAnimCompress_BitwiseCompressOnly(Z_Construct_UClass_UAnimCompress_BitwiseCompressOnly, TEXT("UAnimCompress_BitwiseCompressOnly"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UAnimCompress_BitwiseCompressOnly);
	UClass* Z_Construct_UClass_UAnimCompress_LeastDestructive_NoRegister()
	{
		return UAnimCompress_LeastDestructive::StaticClass();
	}
	UClass* Z_Construct_UClass_UAnimCompress_LeastDestructive()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UAnimCompress();
			Z_Construct_UPackage_Engine();
			OuterClass = UAnimCompress_LeastDestructive::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Animation/AnimCompress_LeastDestructive.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimCompress_LeastDestructive.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UAnimCompress_LeastDestructive(Z_Construct_UClass_UAnimCompress_LeastDestructive, TEXT("UAnimCompress_LeastDestructive"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UAnimCompress_LeastDestructive);
	UClass* Z_Construct_UClass_UAnimCompress_RemoveEverySecondKey_NoRegister()
	{
		return UAnimCompress_RemoveEverySecondKey::StaticClass();
	}
	UClass* Z_Construct_UClass_UAnimCompress_RemoveEverySecondKey()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UAnimCompress();
			Z_Construct_UPackage_Engine();
			OuterClass = UAnimCompress_RemoveEverySecondKey::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bStartAtSecondKey, UAnimCompress_RemoveEverySecondKey, uint8);
				UProperty* NewProp_bStartAtSecondKey = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bStartAtSecondKey"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bStartAtSecondKey, UAnimCompress_RemoveEverySecondKey), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bStartAtSecondKey, UAnimCompress_RemoveEverySecondKey), sizeof(uint8), false);
				UProperty* NewProp_MinKeys = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MinKeys"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MinKeys, UAnimCompress_RemoveEverySecondKey), 0x0000000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Animation/AnimCompress_RemoveEverySecondKey.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimCompress_RemoveEverySecondKey.h"));
				MetaData->SetValue(NewProp_bStartAtSecondKey, TEXT("Category"), TEXT("AnimationCompressionAlgorithm_RemoveEverySecondKey"));
				MetaData->SetValue(NewProp_bStartAtSecondKey, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimCompress_RemoveEverySecondKey.h"));
				MetaData->SetValue(NewProp_bStartAtSecondKey, TEXT("ToolTip"), TEXT("If bStartAtSecondKey is true, remove keys 1,3,5,etc.\nIf bStartAtSecondKey is false, remove keys 0,2,4,etc."));
				MetaData->SetValue(NewProp_MinKeys, TEXT("Category"), TEXT("AnimationCompressionAlgorithm_RemoveEverySecondKey"));
				MetaData->SetValue(NewProp_MinKeys, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimCompress_RemoveEverySecondKey.h"));
				MetaData->SetValue(NewProp_MinKeys, TEXT("ToolTip"), TEXT("Animations with fewer than MinKeys will not lose any keys."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UAnimCompress_RemoveEverySecondKey(Z_Construct_UClass_UAnimCompress_RemoveEverySecondKey, TEXT("UAnimCompress_RemoveEverySecondKey"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UAnimCompress_RemoveEverySecondKey);
	UClass* Z_Construct_UClass_UAnimCompress_RemoveLinearKeys_NoRegister()
	{
		return UAnimCompress_RemoveLinearKeys::StaticClass();
	}
	UClass* Z_Construct_UClass_UAnimCompress_RemoveLinearKeys()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UAnimCompress();
			Z_Construct_UPackage_Engine();
			OuterClass = UAnimCompress_RemoveLinearKeys::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bActuallyFilterLinearKeys, UAnimCompress_RemoveLinearKeys, uint8);
				UProperty* NewProp_bActuallyFilterLinearKeys = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bActuallyFilterLinearKeys"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bActuallyFilterLinearKeys, UAnimCompress_RemoveLinearKeys), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bActuallyFilterLinearKeys, UAnimCompress_RemoveLinearKeys), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bRetarget, UAnimCompress_RemoveLinearKeys, uint8);
				UProperty* NewProp_bRetarget = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bRetarget"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bRetarget, UAnimCompress_RemoveLinearKeys), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bRetarget, UAnimCompress_RemoveLinearKeys), sizeof(uint8), false);
				UProperty* NewProp_ParentKeyScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ParentKeyScale"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ParentKeyScale, UAnimCompress_RemoveLinearKeys), 0x0000000000000001);
				UProperty* NewProp_EffectorDiffSocket = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EffectorDiffSocket"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(EffectorDiffSocket, UAnimCompress_RemoveLinearKeys), 0x0000000000000001);
				UProperty* NewProp_MinEffectorDiff = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MinEffectorDiff"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MinEffectorDiff, UAnimCompress_RemoveLinearKeys), 0x0000000000000001);
				UProperty* NewProp_MaxEffectorDiff = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxEffectorDiff"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MaxEffectorDiff, UAnimCompress_RemoveLinearKeys), 0x0000000000000001);
				UProperty* NewProp_MaxScaleDiff = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxScaleDiff"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MaxScaleDiff, UAnimCompress_RemoveLinearKeys), 0x0000000000000001);
				UProperty* NewProp_MaxAngleDiff = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxAngleDiff"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MaxAngleDiff, UAnimCompress_RemoveLinearKeys), 0x0000000000000001);
				UProperty* NewProp_MaxPosDiff = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxPosDiff"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MaxPosDiff, UAnimCompress_RemoveLinearKeys), 0x0000000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Animation/AnimCompress_RemoveLinearKeys.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimCompress_RemoveLinearKeys.h"));
				MetaData->SetValue(NewProp_bActuallyFilterLinearKeys, TEXT("Category"), TEXT("LinearKeyRemoval"));
				MetaData->SetValue(NewProp_bActuallyFilterLinearKeys, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimCompress_RemoveLinearKeys.h"));
				MetaData->SetValue(NewProp_bActuallyFilterLinearKeys, TEXT("ToolTip"), TEXT("Controls whether the final filtering step will occur, or only the retargetting after bitwise compression.\nIf both this and bRetarget are false, then the linear compressor will do no better than the underlying bitwise compressor, extremely slowly."));
				MetaData->SetValue(NewProp_bRetarget, TEXT("Category"), TEXT("LinearKeyRemoval"));
				MetaData->SetValue(NewProp_bRetarget, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimCompress_RemoveLinearKeys.h"));
				MetaData->SetValue(NewProp_bRetarget, TEXT("ToolTip"), TEXT("true = As the animation is compressed, adjust animated nodes to compensate for compression error.\nfalse= Do not adjust animated nodes."));
				MetaData->SetValue(NewProp_ParentKeyScale, TEXT("Category"), TEXT("LinearKeyRemoval"));
				MetaData->SetValue(NewProp_ParentKeyScale, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimCompress_RemoveLinearKeys.h"));
				MetaData->SetValue(NewProp_ParentKeyScale, TEXT("ToolTip"), TEXT("A scale value which increases the likelihood that a bone will retain a key if it's parent also had a key at the same time position.\nHigher values can remove shaking artifacts from the animation, at the cost of compression."));
				MetaData->SetValue(NewProp_EffectorDiffSocket, TEXT("Category"), TEXT("LinearKeyRemoval"));
				MetaData->SetValue(NewProp_EffectorDiffSocket, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimCompress_RemoveLinearKeys.h"));
				MetaData->SetValue(NewProp_EffectorDiffSocket, TEXT("ToolTip"), TEXT("Error threshold for End Effectors with Sockets attached to them.\nTypically more important bone, where we want to be less aggressive with compression."));
				MetaData->SetValue(NewProp_MinEffectorDiff, TEXT("Category"), TEXT("LinearKeyRemoval"));
				MetaData->SetValue(NewProp_MinEffectorDiff, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimCompress_RemoveLinearKeys.h"));
				MetaData->SetValue(NewProp_MinEffectorDiff, TEXT("ToolTip"), TEXT("As keys are tested for removal, we monitor the effects all the way down to the end effectors.\nIf their position changes by more than this amount as a result of removing a key, the key will be retained.\nThis value is used for the end-effectors parent, allowing tighter restrictions near the end of a skeletal chain."));
				MetaData->SetValue(NewProp_MaxEffectorDiff, TEXT("Category"), TEXT("LinearKeyRemoval"));
				MetaData->SetValue(NewProp_MaxEffectorDiff, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimCompress_RemoveLinearKeys.h"));
				MetaData->SetValue(NewProp_MaxEffectorDiff, TEXT("ToolTip"), TEXT("As keys are tested for removal, we monitor the effects all the way down to the end effectors.\nIf their position changes by more than this amount as a result of removing a key, the key will be retained.\nThis value is used for all bones except the end-effectors parent."));
				MetaData->SetValue(NewProp_MaxScaleDiff, TEXT("Category"), TEXT("LinearKeyRemoval"));
				MetaData->SetValue(NewProp_MaxScaleDiff, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimCompress_RemoveLinearKeys.h"));
				MetaData->SetValue(NewProp_MaxScaleDiff, TEXT("ToolTip"), TEXT("Maximum Scale difference to use when testing if an animation key may be removed. Lower values retain more keys, but yield less compression."));
				MetaData->SetValue(NewProp_MaxAngleDiff, TEXT("Category"), TEXT("LinearKeyRemoval"));
				MetaData->SetValue(NewProp_MaxAngleDiff, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimCompress_RemoveLinearKeys.h"));
				MetaData->SetValue(NewProp_MaxAngleDiff, TEXT("ToolTip"), TEXT("Maximum angle difference to use when testing if an animation key may be removed. Lower values retain more keys, but yield less compression."));
				MetaData->SetValue(NewProp_MaxPosDiff, TEXT("Category"), TEXT("LinearKeyRemoval"));
				MetaData->SetValue(NewProp_MaxPosDiff, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimCompress_RemoveLinearKeys.h"));
				MetaData->SetValue(NewProp_MaxPosDiff, TEXT("ToolTip"), TEXT("Maximum position difference to use when testing if an animation key may be removed. Lower values retain more keys, but yield less compression."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UAnimCompress_RemoveLinearKeys(Z_Construct_UClass_UAnimCompress_RemoveLinearKeys, TEXT("UAnimCompress_RemoveLinearKeys"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UAnimCompress_RemoveLinearKeys);
	UClass* Z_Construct_UClass_UAnimCompress_PerTrackCompression_NoRegister()
	{
		return UAnimCompress_PerTrackCompression::StaticClass();
	}
	UClass* Z_Construct_UClass_UAnimCompress_PerTrackCompression()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UAnimCompress_RemoveLinearKeys();
			Z_Construct_UPackage_Engine();
			OuterClass = UAnimCompress_PerTrackCompression::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_PerturbationProbeSize = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PerturbationProbeSize"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(PerturbationProbeSize, UAnimCompress_PerTrackCompression), 0x0000000000000000);
				UProperty* NewProp_MaxErrorPerTrackRatio = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxErrorPerTrackRatio"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MaxErrorPerTrackRatio, UAnimCompress_PerTrackCompression), 0x0000000000000001);
				UProperty* NewProp_ScaleErrorSourceRatio = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ScaleErrorSourceRatio"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ScaleErrorSourceRatio, UAnimCompress_PerTrackCompression), 0x0000000000000001);
				UProperty* NewProp_TranslationErrorSourceRatio = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TranslationErrorSourceRatio"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(TranslationErrorSourceRatio, UAnimCompress_PerTrackCompression), 0x0000000000000001);
				UProperty* NewProp_RotationErrorSourceRatio = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RotationErrorSourceRatio"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(RotationErrorSourceRatio, UAnimCompress_PerTrackCompression), 0x0000000000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseAdaptiveError2, UAnimCompress_PerTrackCompression, uint8);
				UProperty* NewProp_bUseAdaptiveError2 = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUseAdaptiveError2"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseAdaptiveError2, UAnimCompress_PerTrackCompression), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bUseAdaptiveError2, UAnimCompress_PerTrackCompression), sizeof(uint8), false);
				UProperty* NewProp_ParentingDivisorExponent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ParentingDivisorExponent"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ParentingDivisorExponent, UAnimCompress_PerTrackCompression), 0x0000000000000001);
				UProperty* NewProp_ParentingDivisor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ParentingDivisor"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ParentingDivisor, UAnimCompress_PerTrackCompression), 0x0000000000000001);
				UProperty* NewProp_TrackHeightBias = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TrackHeightBias"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(TrackHeightBias, UAnimCompress_PerTrackCompression), 0x0000000000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseOverrideForEndEffectors, UAnimCompress_PerTrackCompression, uint8);
				UProperty* NewProp_bUseOverrideForEndEffectors = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUseOverrideForEndEffectors"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseOverrideForEndEffectors, UAnimCompress_PerTrackCompression), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bUseOverrideForEndEffectors, UAnimCompress_PerTrackCompression), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseAdaptiveError, UAnimCompress_PerTrackCompression, uint8);
				UProperty* NewProp_bUseAdaptiveError = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUseAdaptiveError"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseAdaptiveError, UAnimCompress_PerTrackCompression), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bUseAdaptiveError, UAnimCompress_PerTrackCompression), sizeof(uint8), false);
				UProperty* NewProp_MinKeysForResampling = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MinKeysForResampling"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MinKeysForResampling, UAnimCompress_PerTrackCompression), 0x0000000000000001);
				UProperty* NewProp_ResampledFramerate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ResampledFramerate"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ResampledFramerate, UAnimCompress_PerTrackCompression), 0x0000000000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bResampleAnimation, UAnimCompress_PerTrackCompression, uint8);
				UProperty* NewProp_bResampleAnimation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bResampleAnimation"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bResampleAnimation, UAnimCompress_PerTrackCompression), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bResampleAnimation, UAnimCompress_PerTrackCompression), sizeof(uint8), false);
				UProperty* NewProp_AllowedScaleFormats = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AllowedScaleFormats"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(AllowedScaleFormats, UAnimCompress_PerTrackCompression), 0x0000000000000001);
				UProperty* NewProp_AllowedScaleFormats_Inner = new(EC_InternalUseOnlyConstructor, NewProp_AllowedScaleFormats, TEXT("AllowedScaleFormats"), RF_Public|RF_Transient|RF_Native) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UEnum_Engine_AnimationCompressionFormat());
				UProperty* NewProp_AllowedTranslationFormats = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AllowedTranslationFormats"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(AllowedTranslationFormats, UAnimCompress_PerTrackCompression), 0x0000000000000001);
				UProperty* NewProp_AllowedTranslationFormats_Inner = new(EC_InternalUseOnlyConstructor, NewProp_AllowedTranslationFormats, TEXT("AllowedTranslationFormats"), RF_Public|RF_Transient|RF_Native) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UEnum_Engine_AnimationCompressionFormat());
				UProperty* NewProp_AllowedRotationFormats = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AllowedRotationFormats"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(AllowedRotationFormats, UAnimCompress_PerTrackCompression), 0x0000000000000001);
				UProperty* NewProp_AllowedRotationFormats_Inner = new(EC_InternalUseOnlyConstructor, NewProp_AllowedRotationFormats, TEXT("AllowedRotationFormats"), RF_Public|RF_Transient|RF_Native) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UEnum_Engine_AnimationCompressionFormat());
				UProperty* NewProp_MaxScaleDiffBitwise = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxScaleDiffBitwise"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MaxScaleDiffBitwise, UAnimCompress_PerTrackCompression), 0x0000000000000001);
				UProperty* NewProp_MaxAngleDiffBitwise = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxAngleDiffBitwise"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MaxAngleDiffBitwise, UAnimCompress_PerTrackCompression), 0x0000000000000001);
				UProperty* NewProp_MaxPosDiffBitwise = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxPosDiffBitwise"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MaxPosDiffBitwise, UAnimCompress_PerTrackCompression), 0x0000000000000001);
				UProperty* NewProp_MaxZeroingThreshold = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxZeroingThreshold"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MaxZeroingThreshold, UAnimCompress_PerTrackCompression), 0x0000000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("AnimCompress Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Animation/AnimCompress_PerTrackCompression.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimCompress_PerTrackCompression.h"));
				MetaData->SetValue(NewProp_PerturbationProbeSize, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimCompress_PerTrackCompression.h"));
				MetaData->SetValue(NewProp_PerturbationProbeSize, TEXT("ToolTip"), TEXT("How big of a perturbation should be made when probing error propagation"));
				MetaData->SetValue(NewProp_MaxErrorPerTrackRatio, TEXT("Category"), TEXT("AdaptiveError2"));
				MetaData->SetValue(NewProp_MaxErrorPerTrackRatio, TEXT("ClampMax"), TEXT("1.0"));
				MetaData->SetValue(NewProp_MaxErrorPerTrackRatio, TEXT("ClampMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_MaxErrorPerTrackRatio, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimCompress_PerTrackCompression.h"));
				MetaData->SetValue(NewProp_MaxErrorPerTrackRatio, TEXT("ToolTip"), TEXT("A fraction that determines how much of the total error budget can be introduced by any particular track"));
				MetaData->SetValue(NewProp_ScaleErrorSourceRatio, TEXT("Category"), TEXT("AdaptiveError2"));
				MetaData->SetValue(NewProp_ScaleErrorSourceRatio, TEXT("ClampMax"), TEXT("1.0"));
				MetaData->SetValue(NewProp_ScaleErrorSourceRatio, TEXT("ClampMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_ScaleErrorSourceRatio, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimCompress_PerTrackCompression.h"));
				MetaData->SetValue(NewProp_ScaleErrorSourceRatio, TEXT("ToolTip"), TEXT("This ratio determines how much error in end effector scale can come from a given track's rotation error or scale error.\nIf 1, all of it must come from rotation error, if 0.5, half can come from each, and if 0.0, all must come from scale error."));
				MetaData->SetValue(NewProp_TranslationErrorSourceRatio, TEXT("Category"), TEXT("AdaptiveError2"));
				MetaData->SetValue(NewProp_TranslationErrorSourceRatio, TEXT("ClampMax"), TEXT("1.0"));
				MetaData->SetValue(NewProp_TranslationErrorSourceRatio, TEXT("ClampMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_TranslationErrorSourceRatio, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimCompress_PerTrackCompression.h"));
				MetaData->SetValue(NewProp_TranslationErrorSourceRatio, TEXT("ToolTip"), TEXT("This ratio determines how much error in end effector translation can come from a given track's rotation error or translation error.\nIf 1, all of it must come from rotation error, if 0.5, half can come from each, and if 0.0, all must come from translation error."));
				MetaData->SetValue(NewProp_RotationErrorSourceRatio, TEXT("Category"), TEXT("AdaptiveError2"));
				MetaData->SetValue(NewProp_RotationErrorSourceRatio, TEXT("ClampMax"), TEXT("1.0"));
				MetaData->SetValue(NewProp_RotationErrorSourceRatio, TEXT("ClampMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_RotationErrorSourceRatio, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimCompress_PerTrackCompression.h"));
				MetaData->SetValue(NewProp_RotationErrorSourceRatio, TEXT("ToolTip"), TEXT("This ratio determines how much error in end effector rotation can come from a given track's rotation error or translation error.\nIf 1, all of it must come from rotation error, if 0.5, half can come from each, and if 0.0, all must come from translation error."));
				MetaData->SetValue(NewProp_bUseAdaptiveError2, TEXT("Category"), TEXT("AdaptiveError2"));
				MetaData->SetValue(NewProp_bUseAdaptiveError2, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimCompress_PerTrackCompression.h"));
				MetaData->SetValue(NewProp_bUseAdaptiveError2, TEXT("ToolTip"), TEXT("If true, the adaptive error system will determine how much error to allow for each track, based on the\nerror introduced in end effectors due to errors in the track."));
				MetaData->SetValue(NewProp_ParentingDivisorExponent, TEXT("Category"), TEXT("AdaptiveError"));
				MetaData->SetValue(NewProp_ParentingDivisorExponent, TEXT("ClampMin"), TEXT("0.1"));
				MetaData->SetValue(NewProp_ParentingDivisorExponent, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimCompress_PerTrackCompression.h"));
				MetaData->SetValue(NewProp_ParentingDivisorExponent, TEXT("ToolTip"), TEXT("Reduces the error tolerance the further up the tree that a key occurs\nEffectiveErrorTolerance = Max(BaseErrorTolerance / Power(ParentingDivisor, Max(Height+Bias,0) * ParentingDivisorExponent), ZeroingThreshold)\nOnly has an effect bUseAdaptiveError is true"));
				MetaData->SetValue(NewProp_ParentingDivisor, TEXT("Category"), TEXT("AdaptiveError"));
				MetaData->SetValue(NewProp_ParentingDivisor, TEXT("ClampMin"), TEXT("1.0"));
				MetaData->SetValue(NewProp_ParentingDivisor, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimCompress_PerTrackCompression.h"));
				MetaData->SetValue(NewProp_ParentingDivisor, TEXT("ToolTip"), TEXT("Reduces the error tolerance the further up the tree that a key occurs\nEffectiveErrorTolerance = Max(BaseErrorTolerance / Power(ParentingDivisor, Max(Height+Bias,0) * ParentingDivisorExponent), ZeroingThreshold)\nOnly has an effect bUseAdaptiveError is true"));
				MetaData->SetValue(NewProp_TrackHeightBias, TEXT("Category"), TEXT("AdaptiveError"));
				MetaData->SetValue(NewProp_TrackHeightBias, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimCompress_PerTrackCompression.h"));
				MetaData->SetValue(NewProp_TrackHeightBias, TEXT("ToolTip"), TEXT("A bias added to the track height before using it to calculate the adaptive error"));
				MetaData->SetValue(NewProp_bUseOverrideForEndEffectors, TEXT("Category"), TEXT("AdaptiveError"));
				MetaData->SetValue(NewProp_bUseOverrideForEndEffectors, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimCompress_PerTrackCompression.h"));
				MetaData->SetValue(NewProp_bUseOverrideForEndEffectors, TEXT("ToolTip"), TEXT("If true, uses MinEffectorDiff as the threhsold for end effectors"));
				MetaData->SetValue(NewProp_bUseAdaptiveError, TEXT("Category"), TEXT("AdaptiveError"));
				MetaData->SetValue(NewProp_bUseAdaptiveError, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimCompress_PerTrackCompression.h"));
				MetaData->SetValue(NewProp_bUseAdaptiveError, TEXT("ToolTip"), TEXT("If true, adjust the error thresholds based on the 'height' within the skeleton"));
				MetaData->SetValue(NewProp_MinKeysForResampling, TEXT("Category"), TEXT("Resampling"));
				MetaData->SetValue(NewProp_MinKeysForResampling, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimCompress_PerTrackCompression.h"));
				MetaData->SetValue(NewProp_MinKeysForResampling, TEXT("ToolTip"), TEXT("Animations with fewer keys than MinKeysForResampling will not be resampled."));
				MetaData->SetValue(NewProp_ResampledFramerate, TEXT("Category"), TEXT("Resampling"));
				MetaData->SetValue(NewProp_ResampledFramerate, TEXT("ClampMax"), TEXT("30.0"));
				MetaData->SetValue(NewProp_ResampledFramerate, TEXT("ClampMin"), TEXT("1.0"));
				MetaData->SetValue(NewProp_ResampledFramerate, TEXT("editcondition"), TEXT("bResampleAnimation"));
				MetaData->SetValue(NewProp_ResampledFramerate, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimCompress_PerTrackCompression.h"));
				MetaData->SetValue(NewProp_ResampledFramerate, TEXT("ToolTip"), TEXT("When bResampleAnimation is true, this defines the desired framerate"));
				MetaData->SetValue(NewProp_bResampleAnimation, TEXT("Category"), TEXT("Resampling"));
				MetaData->SetValue(NewProp_bResampleAnimation, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimCompress_PerTrackCompression.h"));
				MetaData->SetValue(NewProp_bResampleAnimation, TEXT("ToolTip"), TEXT("If true, resample the animation to ResampleFramerate frames per second"));
				MetaData->SetValue(NewProp_AllowedScaleFormats, TEXT("Category"), TEXT("PerTrack"));
				MetaData->SetValue(NewProp_AllowedScaleFormats, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimCompress_PerTrackCompression.h"));
				MetaData->SetValue(NewProp_AllowedScaleFormats, TEXT("ToolTip"), TEXT("Which encoding formats is the per-track compressor allowed to try on scale keys"));
				MetaData->SetValue(NewProp_AllowedTranslationFormats, TEXT("Category"), TEXT("PerTrack"));
				MetaData->SetValue(NewProp_AllowedTranslationFormats, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimCompress_PerTrackCompression.h"));
				MetaData->SetValue(NewProp_AllowedTranslationFormats, TEXT("ToolTip"), TEXT("Which encoding formats is the per-track compressor allowed to try on translation keys"));
				MetaData->SetValue(NewProp_AllowedRotationFormats, TEXT("Category"), TEXT("PerTrack"));
				MetaData->SetValue(NewProp_AllowedRotationFormats, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimCompress_PerTrackCompression.h"));
				MetaData->SetValue(NewProp_AllowedRotationFormats, TEXT("ToolTip"), TEXT("Which encoding formats is the per-track compressor allowed to try on rotation keys"));
				MetaData->SetValue(NewProp_MaxScaleDiffBitwise, TEXT("Category"), TEXT("PerTrack"));
				MetaData->SetValue(NewProp_MaxScaleDiffBitwise, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimCompress_PerTrackCompression.h"));
				MetaData->SetValue(NewProp_MaxScaleDiffBitwise, TEXT("ToolTip"), TEXT("Maximum position difference to use when testing if an animation key may be removed. Lower values retain more keys, but yield less compression."));
				MetaData->SetValue(NewProp_MaxAngleDiffBitwise, TEXT("Category"), TEXT("PerTrack"));
				MetaData->SetValue(NewProp_MaxAngleDiffBitwise, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimCompress_PerTrackCompression.h"));
				MetaData->SetValue(NewProp_MaxAngleDiffBitwise, TEXT("ToolTip"), TEXT("Maximum angle difference to use when testing if an animation key may be removed. Lower values retain more keys, but yield less compression."));
				MetaData->SetValue(NewProp_MaxPosDiffBitwise, TEXT("Category"), TEXT("PerTrack"));
				MetaData->SetValue(NewProp_MaxPosDiffBitwise, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimCompress_PerTrackCompression.h"));
				MetaData->SetValue(NewProp_MaxPosDiffBitwise, TEXT("ToolTip"), TEXT("Maximum position difference to use when testing if an animation key may be removed. Lower values retain more keys, but yield less compression."));
				MetaData->SetValue(NewProp_MaxZeroingThreshold, TEXT("Category"), TEXT("PerTrack"));
				MetaData->SetValue(NewProp_MaxZeroingThreshold, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimCompress_PerTrackCompression.h"));
				MetaData->SetValue(NewProp_MaxZeroingThreshold, TEXT("ToolTip"), TEXT("Maximum threshold to use when replacing a component with zero. Lower values retain more keys, but yield less compression."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UAnimCompress_PerTrackCompression(Z_Construct_UClass_UAnimCompress_PerTrackCompression, TEXT("UAnimCompress_PerTrackCompression"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UAnimCompress_PerTrackCompression);
	UClass* Z_Construct_UClass_UAnimCompress_RemoveTrivialKeys_NoRegister()
	{
		return UAnimCompress_RemoveTrivialKeys::StaticClass();
	}
	UClass* Z_Construct_UClass_UAnimCompress_RemoveTrivialKeys()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UAnimCompress();
			Z_Construct_UPackage_Engine();
			OuterClass = UAnimCompress_RemoveTrivialKeys::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_MaxScaleDiff = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxScaleDiff"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MaxScaleDiff, UAnimCompress_RemoveTrivialKeys), 0x0000000000000001);
				UProperty* NewProp_MaxAngleDiff = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxAngleDiff"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MaxAngleDiff, UAnimCompress_RemoveTrivialKeys), 0x0000000000000001);
				UProperty* NewProp_MaxPosDiff = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxPosDiff"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MaxPosDiff, UAnimCompress_RemoveTrivialKeys), 0x0000000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Animation/AnimCompress_RemoveTrivialKeys.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimCompress_RemoveTrivialKeys.h"));
				MetaData->SetValue(NewProp_MaxScaleDiff, TEXT("Category"), TEXT("AnimationCompressionAlgorithm_RemoveTrivialKeys"));
				MetaData->SetValue(NewProp_MaxScaleDiff, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimCompress_RemoveTrivialKeys.h"));
				MetaData->SetValue(NewProp_MaxAngleDiff, TEXT("Category"), TEXT("AnimationCompressionAlgorithm_RemoveTrivialKeys"));
				MetaData->SetValue(NewProp_MaxAngleDiff, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimCompress_RemoveTrivialKeys.h"));
				MetaData->SetValue(NewProp_MaxPosDiff, TEXT("Category"), TEXT("AnimationCompressionAlgorithm_RemoveTrivialKeys"));
				MetaData->SetValue(NewProp_MaxPosDiff, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimCompress_RemoveTrivialKeys.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UAnimCompress_RemoveTrivialKeys(Z_Construct_UClass_UAnimCompress_RemoveTrivialKeys, TEXT("UAnimCompress_RemoveTrivialKeys"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UAnimCompress_RemoveTrivialKeys);
	UFunction* Z_Construct_UDelegateFunction_Engine_PostEvaluateAnimEvent__DelegateSignature()
	{
		UObject* Outer=Z_Construct_UPackage_Engine();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PostEvaluateAnimEvent__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00120000, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSingleNodeInstance.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimSingleNodeInstance_GetLength()
	{
		struct AnimSingleNodeInstance_eventGetLength_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAnimSingleNodeInstance();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetLength"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(AnimSingleNodeInstance_eventGetLength_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, AnimSingleNodeInstance_eventGetLength_Parms), 0x0000000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Animation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSingleNodeInstance.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimSingleNodeInstance_PlayAnim()
	{
		struct AnimSingleNodeInstance_eventPlayAnim_Parms
		{
			bool bIsLooping;
			float InPlayRate;
			float InStartPosition;
		};
		UObject* Outer=Z_Construct_UClass_UAnimSingleNodeInstance();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PlayAnim"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(AnimSingleNodeInstance_eventPlayAnim_Parms));
			UProperty* NewProp_InStartPosition = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InStartPosition"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InStartPosition, AnimSingleNodeInstance_eventPlayAnim_Parms), 0x0000000000000080);
			UProperty* NewProp_InPlayRate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InPlayRate"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InPlayRate, AnimSingleNodeInstance_eventPlayAnim_Parms), 0x0000000000000080);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsLooping, AnimSingleNodeInstance_eventPlayAnim_Parms, bool);
			UProperty* NewProp_bIsLooping = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bIsLooping"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsLooping, AnimSingleNodeInstance_eventPlayAnim_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bIsLooping, AnimSingleNodeInstance_eventPlayAnim_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Animation"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bIsLooping"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_InPlayRate"), TEXT("1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_InStartPosition"), TEXT("0.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSingleNodeInstance.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("For AnimSequence specific *"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimSingleNodeInstance_SetAnimationAsset()
	{
		struct AnimSingleNodeInstance_eventSetAnimationAsset_Parms
		{
			UAnimationAsset* NewAsset;
			bool bIsLooping;
			float InPlayRate;
		};
		UObject* Outer=Z_Construct_UClass_UAnimSingleNodeInstance();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetAnimationAsset"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020400, 65535, sizeof(AnimSingleNodeInstance_eventSetAnimationAsset_Parms));
			UProperty* NewProp_InPlayRate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InPlayRate"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InPlayRate, AnimSingleNodeInstance_eventSetAnimationAsset_Parms), 0x0000000000000080);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsLooping, AnimSingleNodeInstance_eventSetAnimationAsset_Parms, bool);
			UProperty* NewProp_bIsLooping = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bIsLooping"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsLooping, AnimSingleNodeInstance_eventSetAnimationAsset_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bIsLooping, AnimSingleNodeInstance_eventSetAnimationAsset_Parms), sizeof(bool), true);
			UProperty* NewProp_NewAsset = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewAsset"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(NewAsset, AnimSingleNodeInstance_eventSetAnimationAsset_Parms), 0x0000000000000080, Z_Construct_UClass_UAnimationAsset_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Animation"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bIsLooping"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_InPlayRate"), TEXT("1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSingleNodeInstance.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set New Asset - calls InitializeAnimation, for now we need MeshComponent *"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimSingleNodeInstance_SetBlendSpaceInput()
	{
		struct AnimSingleNodeInstance_eventSetBlendSpaceInput_Parms
		{
			FVector InBlendInput;
		};
		UObject* Outer=Z_Construct_UClass_UAnimSingleNodeInstance();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetBlendSpaceInput"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C20401, 65535, sizeof(AnimSingleNodeInstance_eventSetBlendSpaceInput_Parms));
			UProperty* NewProp_InBlendInput = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InBlendInput"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InBlendInput, AnimSingleNodeInstance_eventSetBlendSpaceInput_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Animation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSingleNodeInstance.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimSingleNodeInstance_SetLooping()
	{
		struct AnimSingleNodeInstance_eventSetLooping_Parms
		{
			bool bIsLooping;
		};
		UObject* Outer=Z_Construct_UClass_UAnimSingleNodeInstance();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetLooping"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(AnimSingleNodeInstance_eventSetLooping_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsLooping, AnimSingleNodeInstance_eventSetLooping_Parms, bool);
			UProperty* NewProp_bIsLooping = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bIsLooping"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsLooping, AnimSingleNodeInstance_eventSetLooping_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bIsLooping, AnimSingleNodeInstance_eventSetLooping_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Animation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSingleNodeInstance.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimSingleNodeInstance_SetPlaying()
	{
		struct AnimSingleNodeInstance_eventSetPlaying_Parms
		{
			bool bIsPlaying;
		};
		UObject* Outer=Z_Construct_UClass_UAnimSingleNodeInstance();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetPlaying"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(AnimSingleNodeInstance_eventSetPlaying_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsPlaying, AnimSingleNodeInstance_eventSetPlaying_Parms, bool);
			UProperty* NewProp_bIsPlaying = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bIsPlaying"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsPlaying, AnimSingleNodeInstance_eventSetPlaying_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bIsPlaying, AnimSingleNodeInstance_eventSetPlaying_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Animation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSingleNodeInstance.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimSingleNodeInstance_SetPlayRate()
	{
		struct AnimSingleNodeInstance_eventSetPlayRate_Parms
		{
			float InPlayRate;
		};
		UObject* Outer=Z_Construct_UClass_UAnimSingleNodeInstance();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetPlayRate"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(AnimSingleNodeInstance_eventSetPlayRate_Parms));
			UProperty* NewProp_InPlayRate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InPlayRate"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InPlayRate, AnimSingleNodeInstance_eventSetPlayRate_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Animation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSingleNodeInstance.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimSingleNodeInstance_SetPosition()
	{
		struct AnimSingleNodeInstance_eventSetPosition_Parms
		{
			float InPosition;
			bool bFireNotifies;
		};
		UObject* Outer=Z_Construct_UClass_UAnimSingleNodeInstance();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetPosition"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(AnimSingleNodeInstance_eventSetPosition_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bFireNotifies, AnimSingleNodeInstance_eventSetPosition_Parms, bool);
			UProperty* NewProp_bFireNotifies = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bFireNotifies"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bFireNotifies, AnimSingleNodeInstance_eventSetPosition_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bFireNotifies, AnimSingleNodeInstance_eventSetPosition_Parms), sizeof(bool), true);
			UProperty* NewProp_InPosition = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InPosition"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InPosition, AnimSingleNodeInstance_eventSetPosition_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Animation"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bFireNotifies"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSingleNodeInstance.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimSingleNodeInstance_SetReverse()
	{
		struct AnimSingleNodeInstance_eventSetReverse_Parms
		{
			bool bInReverse;
		};
		UObject* Outer=Z_Construct_UClass_UAnimSingleNodeInstance();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetReverse"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(AnimSingleNodeInstance_eventSetReverse_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bInReverse, AnimSingleNodeInstance_eventSetReverse_Parms, bool);
			UProperty* NewProp_bInReverse = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bInReverse"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bInReverse, AnimSingleNodeInstance_eventSetReverse_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bInReverse, AnimSingleNodeInstance_eventSetReverse_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Animation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSingleNodeInstance.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimSingleNodeInstance_SetVertexAnimation()
	{
		struct AnimSingleNodeInstance_eventSetVertexAnimation_Parms
		{
			UVertexAnimation* NewVertexAnim;
			bool bIsLooping;
			float InPlayRate;
		};
		UObject* Outer=Z_Construct_UClass_UAnimSingleNodeInstance();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetVertexAnimation"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(AnimSingleNodeInstance_eventSetVertexAnimation_Parms));
			UProperty* NewProp_InPlayRate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InPlayRate"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InPlayRate, AnimSingleNodeInstance_eventSetVertexAnimation_Parms), 0x0000000000000080);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsLooping, AnimSingleNodeInstance_eventSetVertexAnimation_Parms, bool);
			UProperty* NewProp_bIsLooping = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bIsLooping"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsLooping, AnimSingleNodeInstance_eventSetVertexAnimation_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bIsLooping, AnimSingleNodeInstance_eventSetVertexAnimation_Parms), sizeof(bool), true);
			UProperty* NewProp_NewVertexAnim = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewVertexAnim"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(NewVertexAnim, AnimSingleNodeInstance_eventSetVertexAnimation_Parms), 0x0000000000000080, Z_Construct_UClass_UVertexAnimation_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Animation"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bIsLooping"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_InPlayRate"), TEXT("1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSingleNodeInstance.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set new vertex animation"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimSingleNodeInstance_StopAnim()
	{
		UObject* Outer=Z_Construct_UClass_UAnimSingleNodeInstance();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("StopAnim"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Animation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSingleNodeInstance.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UAnimSingleNodeInstance_NoRegister()
	{
		return UAnimSingleNodeInstance::StaticClass();
	}
	UClass* Z_Construct_UClass_UAnimSingleNodeInstance()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UAnimInstance();
			Z_Construct_UPackage_Engine();
			OuterClass = UAnimSingleNodeInstance::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900088;

				OuterClass->LinkChild(Z_Construct_UFunction_UAnimSingleNodeInstance_GetLength());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimSingleNodeInstance_PlayAnim());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimSingleNodeInstance_SetAnimationAsset());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimSingleNodeInstance_SetBlendSpaceInput());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimSingleNodeInstance_SetLooping());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimSingleNodeInstance_SetPlaying());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimSingleNodeInstance_SetPlayRate());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimSingleNodeInstance_SetPosition());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimSingleNodeInstance_SetReverse());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimSingleNodeInstance_SetVertexAnimation());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimSingleNodeInstance_StopAnim());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bReverse, UAnimSingleNodeInstance, uint8);
				UProperty* NewProp_bReverse = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bReverse"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bReverse, UAnimSingleNodeInstance), 0x0000000000002000, CPP_BOOL_PROPERTY_BITMASK(bReverse, UAnimSingleNodeInstance), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bPlaying, UAnimSingleNodeInstance, uint8);
				UProperty* NewProp_bPlaying = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bPlaying"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bPlaying, UAnimSingleNodeInstance), 0x0000000000002000, CPP_BOOL_PROPERTY_BITMASK(bPlaying, UAnimSingleNodeInstance), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLooping, UAnimSingleNodeInstance, uint8);
				UProperty* NewProp_bLooping = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bLooping"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLooping, UAnimSingleNodeInstance), 0x0000000000002000, CPP_BOOL_PROPERTY_BITMASK(bLooping, UAnimSingleNodeInstance), sizeof(uint8), false);
				UProperty* NewProp_PostEvaluateAnimEvent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PostEvaluateAnimEvent"), RF_Public|RF_Transient|RF_Native) UDelegateProperty(CPP_PROPERTY_BASE(PostEvaluateAnimEvent, UAnimSingleNodeInstance), 0x0000000000082000, Z_Construct_UDelegateFunction_Engine_PostEvaluateAnimEvent__DelegateSignature());
				UProperty* NewProp_PlayRate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PlayRate"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(PlayRate, UAnimSingleNodeInstance), 0x0000000000002000);
				UProperty* NewProp_CurrentTime = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CurrentTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(CurrentTime, UAnimSingleNodeInstance), 0x0000000000002000);
				UProperty* NewProp_BlendFilter = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BlendFilter"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(BlendFilter, UAnimSingleNodeInstance), 0x0000000000002000, Z_Construct_UScriptStruct_FBlendFilter());
				UProperty* NewProp_BlendSampleData = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BlendSampleData"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(BlendSampleData, UAnimSingleNodeInstance), 0x0000000000002000);
				UProperty* NewProp_BlendSampleData_Inner = new(EC_InternalUseOnlyConstructor, NewProp_BlendSampleData, TEXT("BlendSampleData"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FBlendSampleData());
				UProperty* NewProp_BlendSpaceInput = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BlendSpaceInput"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(BlendSpaceInput, UAnimSingleNodeInstance), 0x0000000000002000, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_CurrentVertexAnim = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CurrentVertexAnim"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(CurrentVertexAnim, UAnimSingleNodeInstance), 0x0000000000002000, Z_Construct_UClass_UVertexAnimation_NoRegister());
				UProperty* NewProp_CurrentAsset = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CurrentAsset"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(CurrentAsset, UAnimSingleNodeInstance), 0x0000000000002000, Z_Construct_UClass_UAnimationAsset_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimSingleNodeInstance_GetLength()); // 2859306691
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimSingleNodeInstance_PlayAnim()); // 3881723903
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimSingleNodeInstance_SetAnimationAsset()); // 1099212772
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimSingleNodeInstance_SetBlendSpaceInput()); // 855127853
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimSingleNodeInstance_SetLooping()); // 3448238924
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimSingleNodeInstance_SetPlaying()); // 343680765
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimSingleNodeInstance_SetPlayRate()); // 472975035
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimSingleNodeInstance_SetPosition()); // 2351551459
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimSingleNodeInstance_SetReverse()); // 264096832
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimSingleNodeInstance_SetVertexAnimation()); // 208555618
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimSingleNodeInstance_StopAnim()); // 48552341
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("AnimInstance"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Animation/AnimSingleNodeInstance.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("false"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSingleNodeInstance.h"));
				MetaData->SetValue(NewProp_bReverse, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSingleNodeInstance.h"));
				MetaData->SetValue(NewProp_bPlaying, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSingleNodeInstance.h"));
				MetaData->SetValue(NewProp_bLooping, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSingleNodeInstance.h"));
				MetaData->SetValue(NewProp_PostEvaluateAnimEvent, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSingleNodeInstance.h"));
				MetaData->SetValue(NewProp_PlayRate, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSingleNodeInstance.h"));
				MetaData->SetValue(NewProp_CurrentTime, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSingleNodeInstance.h"));
				MetaData->SetValue(NewProp_CurrentTime, TEXT("ToolTip"), TEXT("Shared parameters for previewing blendspace or animsequence *"));
				MetaData->SetValue(NewProp_BlendFilter, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSingleNodeInstance.h"));
				MetaData->SetValue(NewProp_BlendFilter, TEXT("ToolTip"), TEXT("Random cached values to play each asset *"));
				MetaData->SetValue(NewProp_BlendSampleData, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSingleNodeInstance.h"));
				MetaData->SetValue(NewProp_BlendSampleData, TEXT("ToolTip"), TEXT("Random cached values to play each asset *"));
				MetaData->SetValue(NewProp_BlendSpaceInput, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSingleNodeInstance.h"));
				MetaData->SetValue(NewProp_BlendSpaceInput, TEXT("ToolTip"), TEXT("Random cached values to play each asset *"));
				MetaData->SetValue(NewProp_CurrentVertexAnim, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSingleNodeInstance.h"));
				MetaData->SetValue(NewProp_CurrentAsset, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSingleNodeInstance.h"));
				MetaData->SetValue(NewProp_CurrentAsset, TEXT("ToolTip"), TEXT("Current Asset being played *"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UAnimSingleNodeInstance(Z_Construct_UClass_UAnimSingleNodeInstance, TEXT("UAnimSingleNodeInstance"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UAnimSingleNodeInstance);
	UFunction* Z_Construct_UFunction_UVehicleAnimInstance_GetVehicle()
	{
		struct VehicleAnimInstance_eventGetVehicle_Parms
		{
			AWheeledVehicle* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVehicleAnimInstance();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetVehicle"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(VehicleAnimInstance_eventGetVehicle_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, VehicleAnimInstance_eventGetVehicle_Parms), 0x0000000000000580, Z_Construct_UClass_AWheeledVehicle_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Animation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Vehicles/VehicleAnimInstance.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Makes a montage jump to the end of a named section."));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UVehicleAnimInstance_NoRegister()
	{
		return UVehicleAnimInstance::StaticClass();
	}
	UClass* Z_Construct_UClass_UVehicleAnimInstance()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UAnimInstance();
			Z_Construct_UPackage_Engine();
			OuterClass = UVehicleAnimInstance::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900088;

				OuterClass->LinkChild(Z_Construct_UFunction_UVehicleAnimInstance_GetVehicle());

				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UVehicleAnimInstance_GetVehicle()); // 2567701446
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("AnimInstance"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Vehicles/VehicleAnimInstance.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Vehicles/VehicleAnimInstance.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UVehicleAnimInstance(Z_Construct_UClass_UVehicleAnimInstance, TEXT("UVehicleAnimInstance"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UVehicleAnimInstance);
	UClass* Z_Construct_UClass_UAnimMetaData_NoRegister()
	{
		return UAnimMetaData::StaticClass();
	}
	UClass* Z_Construct_UClass_UAnimMetaData()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UAnimMetaData::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20093081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Animation/AnimMetaData.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimMetaData.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UAnimMetaData(Z_Construct_UClass_UAnimMetaData, TEXT("UAnimMetaData"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UAnimMetaData);
	UFunction* Z_Construct_UFunction_UAnimNotify_GetNotifyName()
	{
		UObject* Outer=Z_Construct_UClass_UAnimNotify();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetNotifyName"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x48020C00, 65535, sizeof(AnimNotify_eventGetNotifyName_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, AnimNotify_eventGetNotifyName_Parms), 0x0000000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNotifies/AnimNotify.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Implementable event to get a custom name for the notify"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimNotify_Received_Notify()
	{
		UObject* Outer=Z_Construct_UClass_UAnimNotify();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Received_Notify"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x48020800, 65535, sizeof(AnimNotify_eventReceived_Notify_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, AnimNotify_eventReceived_Notify_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, AnimNotify_eventReceived_Notify_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, AnimNotify_eventReceived_Notify_Parms), sizeof(bool), true);
			UProperty* NewProp_Animation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Animation"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Animation, AnimNotify_eventReceived_Notify_Parms), 0x0000000000000080, Z_Construct_UClass_UAnimSequenceBase_NoRegister());
			UProperty* NewProp_MeshComp = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MeshComp"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(MeshComp, AnimNotify_eventReceived_Notify_Parms), 0x0000000000080080, Z_Construct_UClass_USkeletalMeshComponent_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNotifies/AnimNotify.h"));
			MetaData->SetValue(NewProp_MeshComp, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UAnimNotify_NoRegister()
	{
		return UAnimNotify::StaticClass();
	}
	UClass* Z_Construct_UClass_UAnimNotify()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UAnimNotify::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20112081;

				OuterClass->LinkChild(Z_Construct_UFunction_UAnimNotify_GetNotifyName());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimNotify_Received_Notify());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_NotifyColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NotifyColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(NotifyColor, UAnimNotify), 0x0000000800000015, Z_Construct_UScriptStruct_FColor());
#endif // WITH_EDITORONLY_DATA
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimNotify_GetNotifyName()); // 2048531726
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimNotify_Received_Notify()); // 3855996284
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Animation/AnimNotifies/AnimNotify.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNotifies/AnimNotify.h"));
				MetaData->SetValue(NewProp_NotifyColor, TEXT("Category"), TEXT("AnimNotify"));
				MetaData->SetValue(NewProp_NotifyColor, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNotifies/AnimNotify.h"));
				MetaData->SetValue(NewProp_NotifyColor, TEXT("ToolTip"), TEXT("Color of Notify in editor"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UAnimNotify(Z_Construct_UClass_UAnimNotify, TEXT("UAnimNotify"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UAnimNotify);
	UFunction* Z_Construct_UFunction_UAnimNotifyState_GetNotifyName()
	{
		UObject* Outer=Z_Construct_UClass_UAnimNotifyState();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetNotifyName"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x48020C00, 65535, sizeof(AnimNotifyState_eventGetNotifyName_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, AnimNotifyState_eventGetNotifyName_Parms), 0x0000000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNotifies/AnimNotifyState.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Implementable event to get a custom name for the notify"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimNotifyState_Received_NotifyBegin()
	{
		UObject* Outer=Z_Construct_UClass_UAnimNotifyState();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Received_NotifyBegin"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x48020800, 65535, sizeof(AnimNotifyState_eventReceived_NotifyBegin_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, AnimNotifyState_eventReceived_NotifyBegin_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, AnimNotifyState_eventReceived_NotifyBegin_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, AnimNotifyState_eventReceived_NotifyBegin_Parms), sizeof(bool), true);
			UProperty* NewProp_TotalDuration = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TotalDuration"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(TotalDuration, AnimNotifyState_eventReceived_NotifyBegin_Parms), 0x0000000000000080);
			UProperty* NewProp_Animation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Animation"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Animation, AnimNotifyState_eventReceived_NotifyBegin_Parms), 0x0000000000000080, Z_Construct_UClass_UAnimSequenceBase_NoRegister());
			UProperty* NewProp_MeshComp = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MeshComp"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(MeshComp, AnimNotifyState_eventReceived_NotifyBegin_Parms), 0x0000000000080080, Z_Construct_UClass_USkeletalMeshComponent_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNotifies/AnimNotifyState.h"));
			MetaData->SetValue(NewProp_MeshComp, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimNotifyState_Received_NotifyEnd()
	{
		UObject* Outer=Z_Construct_UClass_UAnimNotifyState();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Received_NotifyEnd"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x48020800, 65535, sizeof(AnimNotifyState_eventReceived_NotifyEnd_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, AnimNotifyState_eventReceived_NotifyEnd_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, AnimNotifyState_eventReceived_NotifyEnd_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, AnimNotifyState_eventReceived_NotifyEnd_Parms), sizeof(bool), true);
			UProperty* NewProp_Animation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Animation"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Animation, AnimNotifyState_eventReceived_NotifyEnd_Parms), 0x0000000000000080, Z_Construct_UClass_UAnimSequenceBase_NoRegister());
			UProperty* NewProp_MeshComp = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MeshComp"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(MeshComp, AnimNotifyState_eventReceived_NotifyEnd_Parms), 0x0000000000080080, Z_Construct_UClass_USkeletalMeshComponent_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNotifies/AnimNotifyState.h"));
			MetaData->SetValue(NewProp_MeshComp, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimNotifyState_Received_NotifyTick()
	{
		UObject* Outer=Z_Construct_UClass_UAnimNotifyState();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Received_NotifyTick"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x48020800, 65535, sizeof(AnimNotifyState_eventReceived_NotifyTick_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, AnimNotifyState_eventReceived_NotifyTick_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, AnimNotifyState_eventReceived_NotifyTick_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, AnimNotifyState_eventReceived_NotifyTick_Parms), sizeof(bool), true);
			UProperty* NewProp_FrameDeltaTime = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FrameDeltaTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(FrameDeltaTime, AnimNotifyState_eventReceived_NotifyTick_Parms), 0x0000000000000080);
			UProperty* NewProp_Animation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Animation"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Animation, AnimNotifyState_eventReceived_NotifyTick_Parms), 0x0000000000000080, Z_Construct_UClass_UAnimSequenceBase_NoRegister());
			UProperty* NewProp_MeshComp = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MeshComp"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(MeshComp, AnimNotifyState_eventReceived_NotifyTick_Parms), 0x0000000000080080, Z_Construct_UClass_USkeletalMeshComponent_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNotifies/AnimNotifyState.h"));
			MetaData->SetValue(NewProp_MeshComp, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UAnimNotifyState_NoRegister()
	{
		return UAnimNotifyState::StaticClass();
	}
	UClass* Z_Construct_UClass_UAnimNotifyState()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UAnimNotifyState::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20113081;

				OuterClass->LinkChild(Z_Construct_UFunction_UAnimNotifyState_GetNotifyName());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimNotifyState_Received_NotifyBegin());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimNotifyState_Received_NotifyEnd());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimNotifyState_Received_NotifyTick());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_NotifyColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NotifyColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(NotifyColor, UAnimNotifyState), 0x0000000800000015, Z_Construct_UScriptStruct_FColor());
#endif // WITH_EDITORONLY_DATA
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimNotifyState_GetNotifyName()); // 1859680847
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimNotifyState_Received_NotifyBegin()); // 2155671649
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimNotifyState_Received_NotifyEnd()); // 957516522
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimNotifyState_Received_NotifyTick()); // 478372143
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Animation/AnimNotifies/AnimNotifyState.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNotifies/AnimNotifyState.h"));
				MetaData->SetValue(OuterClass, TEXT("ShowWorldContextPin"), TEXT(""));
				MetaData->SetValue(NewProp_NotifyColor, TEXT("Category"), TEXT("AnimNotify"));
				MetaData->SetValue(NewProp_NotifyColor, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNotifies/AnimNotifyState.h"));
				MetaData->SetValue(NewProp_NotifyColor, TEXT("ToolTip"), TEXT("Color of Notify in editor"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UAnimNotifyState(Z_Construct_UClass_UAnimNotifyState, TEXT("UAnimNotifyState"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UAnimNotifyState);
	UClass* Z_Construct_UClass_UAnimNotifyState_TimedParticleEffect_NoRegister()
	{
		return UAnimNotifyState_TimedParticleEffect::StaticClass();
	}
	UClass* Z_Construct_UClass_UAnimNotifyState_TimedParticleEffect()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UAnimNotifyState();
			Z_Construct_UPackage_Engine();
			OuterClass = UAnimNotifyState_TimedParticleEffect::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20093080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_PreviousSocketNames = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PreviousSocketNames"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(PreviousSocketNames, UAnimNotifyState_TimedParticleEffect), 0x0000000800002010);
				UProperty* NewProp_PreviousSocketNames_Inner = new(EC_InternalUseOnlyConstructor, NewProp_PreviousSocketNames, TEXT("PreviousSocketNames"), RF_Public|RF_Transient|RF_Native) UNameProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000800000000);
				UProperty* NewProp_PreviousPSTemplates = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PreviousPSTemplates"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(PreviousPSTemplates, UAnimNotifyState_TimedParticleEffect), 0x0000000800002010);
				UProperty* NewProp_PreviousPSTemplates_Inner = new(EC_InternalUseOnlyConstructor, NewProp_PreviousPSTemplates, TEXT("PreviousPSTemplates"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000800000000, Z_Construct_UClass_UParticleSystem_NoRegister());
#endif // WITH_EDITORONLY_DATA
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDestroyAtEnd, UAnimNotifyState_TimedParticleEffect, bool);
				UProperty* NewProp_bDestroyAtEnd = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bDestroyAtEnd"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDestroyAtEnd, UAnimNotifyState_TimedParticleEffect), 0x0000000000000011, CPP_BOOL_PROPERTY_BITMASK(bDestroyAtEnd, UAnimNotifyState_TimedParticleEffect), sizeof(bool), true);
				UProperty* NewProp_RotationOffset = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RotationOffset"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(RotationOffset, UAnimNotifyState_TimedParticleEffect), 0x0000000000000011, Z_Construct_UScriptStruct_FRotator());
				UProperty* NewProp_LocationOffset = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LocationOffset"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LocationOffset, UAnimNotifyState_TimedParticleEffect), 0x0000000000000011, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_SocketName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SocketName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(SocketName, UAnimNotifyState_TimedParticleEffect), 0x0000000000000011);
				UProperty* NewProp_PSTemplate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PSTemplate"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(PSTemplate, UAnimNotifyState_TimedParticleEffect), 0x0000000000000011, Z_Construct_UClass_UParticleSystem_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Timed Particle Effect"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Animation/AnimNotifies/AnimNotifyState_TimedParticleEffect.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNotifies/AnimNotifyState_TimedParticleEffect.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Timed Particle Effect Notify\nAllows a looping particle effect to be played in an animation that will activate\nat the beginning of the notify and deactivate at the end."));
				MetaData->SetValue(NewProp_PreviousSocketNames, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNotifies/AnimNotifyState_TimedParticleEffect.h"));
				MetaData->SetValue(NewProp_PreviousPSTemplates, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNotifies/AnimNotifyState_TimedParticleEffect.h"));
				MetaData->SetValue(NewProp_PreviousPSTemplates, TEXT("ToolTip"), TEXT("The following arrays are used to handle property changes during a state. Because we can't\nstore any stateful data here we can't know which emitter is ours. The best metric we have\nis an emitter on our Mesh Component with the same template and socket name we have defined.\nBecause these can change at any time we need to track previous versions when we are in an\neditor build. Refactor when stateful data is possible, tracking our component instead."));
				MetaData->SetValue(NewProp_bDestroyAtEnd, TEXT("Category"), TEXT("ParticleSystem"));
				MetaData->SetValue(NewProp_bDestroyAtEnd, TEXT("DisplayName"), TEXT("Destroy Immediately"));
				MetaData->SetValue(NewProp_bDestroyAtEnd, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNotifies/AnimNotifyState_TimedParticleEffect.h"));
				MetaData->SetValue(NewProp_bDestroyAtEnd, TEXT("ToolTip"), TEXT("Whether the particle system should be immediately destroyed at the end of the notify state or be allowed to finish"));
				MetaData->SetValue(NewProp_RotationOffset, TEXT("Category"), TEXT("ParticleSystem"));
				MetaData->SetValue(NewProp_RotationOffset, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNotifies/AnimNotifyState_TimedParticleEffect.h"));
				MetaData->SetValue(NewProp_RotationOffset, TEXT("ToolTip"), TEXT("Rotation offset from the socket or bone for the particle system"));
				MetaData->SetValue(NewProp_LocationOffset, TEXT("Category"), TEXT("ParticleSystem"));
				MetaData->SetValue(NewProp_LocationOffset, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNotifies/AnimNotifyState_TimedParticleEffect.h"));
				MetaData->SetValue(NewProp_LocationOffset, TEXT("ToolTip"), TEXT("Offset from the socket or bone to place the particle system"));
				MetaData->SetValue(NewProp_SocketName, TEXT("Category"), TEXT("ParticleSystem"));
				MetaData->SetValue(NewProp_SocketName, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNotifies/AnimNotifyState_TimedParticleEffect.h"));
				MetaData->SetValue(NewProp_SocketName, TEXT("ToolTip"), TEXT("The socket or bone to attach the system to"));
				MetaData->SetValue(NewProp_PSTemplate, TEXT("Category"), TEXT("ParticleSystem"));
				MetaData->SetValue(NewProp_PSTemplate, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNotifies/AnimNotifyState_TimedParticleEffect.h"));
				MetaData->SetValue(NewProp_PSTemplate, TEXT("ToolTip"), TEXT("The particle system to spawn for the notify state"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UAnimNotifyState_TimedParticleEffect(Z_Construct_UClass_UAnimNotifyState_TimedParticleEffect, TEXT("UAnimNotifyState_TimedParticleEffect"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UAnimNotifyState_TimedParticleEffect);
	UFunction* Z_Construct_UFunction_UAnimNotifyState_Trail_OverridePSTemplate()
	{
		UObject* Outer=Z_Construct_UClass_UAnimNotifyState_Trail();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OverridePSTemplate"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x48020800, 65535, sizeof(AnimNotifyState_Trail_eventOverridePSTemplate_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, AnimNotifyState_Trail_eventOverridePSTemplate_Parms), 0x0000000000000580, Z_Construct_UClass_UParticleSystem_NoRegister());
			UProperty* NewProp_Animation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Animation"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Animation, AnimNotifyState_Trail_eventOverridePSTemplate_Parms), 0x0000000000000080, Z_Construct_UClass_UAnimSequenceBase_NoRegister());
			UProperty* NewProp_MeshComp = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MeshComp"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(MeshComp, AnimNotifyState_Trail_eventOverridePSTemplate_Parms), 0x0000000000080080, Z_Construct_UClass_USkeletalMeshComponent_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNotifies/AnimNotifyState_Trail.h"));
			MetaData->SetValue(NewProp_MeshComp, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UAnimNotifyState_Trail_NoRegister()
	{
		return UAnimNotifyState_Trail::StaticClass();
	}
	UClass* Z_Construct_UClass_UAnimNotifyState_Trail()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UAnimNotifyState();
			Z_Construct_UPackage_Engine();
			OuterClass = UAnimNotifyState_Trail::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20093080;

				OuterClass->LinkChild(Z_Construct_UFunction_UAnimNotifyState_Trail_OverridePSTemplate());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
#if WITH_EDITORONLY_DATA
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bRenderTessellation, UAnimNotifyState_Trail, uint8);
				UProperty* NewProp_bRenderTessellation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bRenderTessellation"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bRenderTessellation, UAnimNotifyState_Trail), 0x0000000800002011, CPP_BOOL_PROPERTY_BITMASK(bRenderTessellation, UAnimNotifyState_Trail), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bRenderTangents, UAnimNotifyState_Trail, uint8);
				UProperty* NewProp_bRenderTangents = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bRenderTangents"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bRenderTangents, UAnimNotifyState_Trail), 0x0000000800002011, CPP_BOOL_PROPERTY_BITMASK(bRenderTangents, UAnimNotifyState_Trail), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bRenderSpawnPoints, UAnimNotifyState_Trail, uint8);
				UProperty* NewProp_bRenderSpawnPoints = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bRenderSpawnPoints"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bRenderSpawnPoints, UAnimNotifyState_Trail), 0x0000000800002011, CPP_BOOL_PROPERTY_BITMASK(bRenderSpawnPoints, UAnimNotifyState_Trail), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bRenderGeometry, UAnimNotifyState_Trail, uint8);
				UProperty* NewProp_bRenderGeometry = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bRenderGeometry"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bRenderGeometry, UAnimNotifyState_Trail), 0x0000000800002011, CPP_BOOL_PROPERTY_BITMASK(bRenderGeometry, UAnimNotifyState_Trail), sizeof(uint8), false);
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_WidthScaleCurve = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WidthScaleCurve"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(WidthScaleCurve, UAnimNotifyState_Trail), 0x0000000000000015);
				UProperty* NewProp_WidthScaleMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WidthScaleMode"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(WidthScaleMode, UAnimNotifyState_Trail), 0x0000000000000015, Z_Construct_UEnum_Engine_ETrailWidthMode());
				UProperty* NewProp_SecondSocketName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SecondSocketName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(SecondSocketName, UAnimNotifyState_Trail), 0x0000000000000015);
				UProperty* NewProp_FirstSocketName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FirstSocketName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(FirstSocketName, UAnimNotifyState_Trail), 0x0000000000000015);
				UProperty* NewProp_PSTemplate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PSTemplate"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(PSTemplate, UAnimNotifyState_Trail), 0x0000000000000015, Z_Construct_UClass_UParticleSystem_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimNotifyState_Trail_OverridePSTemplate()); // 2348196069
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Trail"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Animation/AnimNotifies/AnimNotifyState_Trail.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNotifies/AnimNotifyState_Trail.h"));
				MetaData->SetValue(OuterClass, TEXT("ShowWorldContextPin"), TEXT(""));
				MetaData->SetValue(NewProp_bRenderTessellation, TEXT("Category"), TEXT("Rendering"));
				MetaData->SetValue(NewProp_bRenderTessellation, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNotifies/AnimNotifyState_Trail.h"));
				MetaData->SetValue(NewProp_bRenderTessellation, TEXT("ToolTip"), TEXT("If true, render the tessellated path between spawned particles"));
				MetaData->SetValue(NewProp_bRenderTangents, TEXT("Category"), TEXT("Rendering"));
				MetaData->SetValue(NewProp_bRenderTangents, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNotifies/AnimNotifyState_Trail.h"));
				MetaData->SetValue(NewProp_bRenderTangents, TEXT("ToolTip"), TEXT("If true, render a line showing the tangent at each spawned particle point along the trail"));
				MetaData->SetValue(NewProp_bRenderSpawnPoints, TEXT("Category"), TEXT("Rendering"));
				MetaData->SetValue(NewProp_bRenderSpawnPoints, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNotifies/AnimNotifyState_Trail.h"));
				MetaData->SetValue(NewProp_bRenderSpawnPoints, TEXT("ToolTip"), TEXT("If true, render stars at each spawned particle point along the trail"));
				MetaData->SetValue(NewProp_bRenderGeometry, TEXT("Category"), TEXT("Rendering"));
				MetaData->SetValue(NewProp_bRenderGeometry, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNotifies/AnimNotifyState_Trail.h"));
				MetaData->SetValue(NewProp_bRenderGeometry, TEXT("ToolTip"), TEXT("If true, render the trail geometry (this should typically be on)"));
				MetaData->SetValue(NewProp_WidthScaleCurve, TEXT("Category"), TEXT("Trail"));
				MetaData->SetValue(NewProp_WidthScaleCurve, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNotifies/AnimNotifyState_Trail.h"));
				MetaData->SetValue(NewProp_WidthScaleCurve, TEXT("ToolTip"), TEXT("Name of the curve to drive the width scale."));
				MetaData->SetValue(NewProp_WidthScaleMode, TEXT("Category"), TEXT("Trail"));
				MetaData->SetValue(NewProp_WidthScaleMode, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNotifies/AnimNotifyState_Trail.h"));
				MetaData->SetValue(NewProp_WidthScaleMode, TEXT("ToolTip"), TEXT("Controls the way width scale is applied. In each method a width scale of 1.0 will mean the width is unchanged from the position of the sockets. A width scale of 0.0 will cause a trail of zero width.\nFrom Centre = Trail width is scaled outwards from the centre point between the two sockets.\nFrom First = Trail width is scaled outwards from the position of the first socket.\nFrom Second = Trail width is scaled outwards from the position of the Second socket."));
				MetaData->SetValue(NewProp_SecondSocketName, TEXT("Category"), TEXT("Trail"));
				MetaData->SetValue(NewProp_SecondSocketName, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNotifies/AnimNotifyState_Trail.h"));
				MetaData->SetValue(NewProp_SecondSocketName, TEXT("ToolTip"), TEXT("Name of the second socket defining this trail."));
				MetaData->SetValue(NewProp_FirstSocketName, TEXT("Category"), TEXT("Trail"));
				MetaData->SetValue(NewProp_FirstSocketName, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNotifies/AnimNotifyState_Trail.h"));
				MetaData->SetValue(NewProp_FirstSocketName, TEXT("ToolTip"), TEXT("Name of the first socket defining this trail."));
				MetaData->SetValue(NewProp_PSTemplate, TEXT("Category"), TEXT("Trail"));
				MetaData->SetValue(NewProp_PSTemplate, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNotifies/AnimNotifyState_Trail.h"));
				MetaData->SetValue(NewProp_PSTemplate, TEXT("ToolTip"), TEXT("The particle system to use for this trail."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UAnimNotifyState_Trail(Z_Construct_UClass_UAnimNotifyState_Trail, TEXT("UAnimNotifyState_Trail"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UAnimNotifyState_Trail);
	UScriptStruct* Z_Construct_UScriptStruct_FAnimSetMeshLinkup()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimSetMeshLinkup_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("AnimSetMeshLinkup"), sizeof(FAnimSetMeshLinkup), Get_Z_Construct_UScriptStruct_FAnimSetMeshLinkup_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimSetMeshLinkup"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FAnimSetMeshLinkup>, EStructFlags(0x00000001));
			UProperty* NewProp_BoneToTrackTable = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BoneToTrackTable"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(BoneToTrackTable, FAnimSetMeshLinkup), 0x0000000000000000);
			UProperty* NewProp_BoneToTrackTable_Inner = new(EC_InternalUseOnlyConstructor, NewProp_BoneToTrackTable, TEXT("BoneToTrackTable"), RF_Public|RF_Transient|RF_Native) UIntProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSet.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("This is a mapping table between each bone in a particular skeletal mesh and the tracks of this animation set."));
			MetaData->SetValue(NewProp_BoneToTrackTable, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSet.h"));
			MetaData->SetValue(NewProp_BoneToTrackTable, TEXT("ToolTip"), TEXT("Mapping table. Size must be same as size of SkelMesh reference skeleton.\nNo index should be more than the number of tracks in this AnimSet.\n-1 indicates no track for this bone - will use reference pose instead."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimSetMeshLinkup_CRC() { return 1496860525U; }
	UClass* Z_Construct_UClass_UAnimSet_NoRegister()
	{
		return UAnimSet::StaticClass();
	}
	UClass* Z_Construct_UClass_UAnimSet()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UAnimSet::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_BestRatioSkelMeshName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BestRatioSkelMeshName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(BestRatioSkelMeshName, UAnimSet), 0x0000000000000000);
				UProperty* NewProp_PreviewSkelMeshName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PreviewSkelMeshName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(PreviewSkelMeshName, UAnimSet), 0x0000000000000000);
				UProperty* NewProp_ForceMeshTranslationBoneNames = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ForceMeshTranslationBoneNames"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ForceMeshTranslationBoneNames, UAnimSet), 0x0000000000000001);
				UProperty* NewProp_ForceMeshTranslationBoneNames_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ForceMeshTranslationBoneNames, TEXT("ForceMeshTranslationBoneNames"), RF_Public|RF_Transient|RF_Native) UNameProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
				UProperty* NewProp_UseTranslationBoneNames = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UseTranslationBoneNames"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(UseTranslationBoneNames, UAnimSet), 0x0000000000000001);
				UProperty* NewProp_UseTranslationBoneNames_Inner = new(EC_InternalUseOnlyConstructor, NewProp_UseTranslationBoneNames, TEXT("UseTranslationBoneNames"), RF_Public|RF_Transient|RF_Native) UNameProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
				UProperty* NewProp_ForceUseMeshTranslation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ForceUseMeshTranslation"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ForceUseMeshTranslation, UAnimSet), 0x0000000000002000);
				UProperty* NewProp_ForceUseMeshTranslation_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ForceUseMeshTranslation, TEXT("ForceUseMeshTranslation"), RF_Public|RF_Transient|RF_Native) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
				UProperty* NewProp_BoneUseAnimTranslation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BoneUseAnimTranslation"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(BoneUseAnimTranslation, UAnimSet), 0x0000000000002000);
				UProperty* NewProp_BoneUseAnimTranslation_Inner = new(EC_InternalUseOnlyConstructor, NewProp_BoneUseAnimTranslation, TEXT("BoneUseAnimTranslation"), RF_Public|RF_Transient|RF_Native) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
				UProperty* NewProp_LinkupCache = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LinkupCache"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(LinkupCache, UAnimSet), 0x0000000000002000);
				UProperty* NewProp_LinkupCache_Inner = new(EC_InternalUseOnlyConstructor, NewProp_LinkupCache, TEXT("LinkupCache"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FAnimSetMeshLinkup());
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_Sequences = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Sequences"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Sequences, UAnimSet), 0x0000000800000000);
				UProperty* NewProp_Sequences_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Sequences, TEXT("Sequences"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000800000000, Z_Construct_UClass_UAnimSequence_NoRegister());
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_TrackBoneNames = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TrackBoneNames"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(TrackBoneNames, UAnimSet), 0x0000000000000000);
				UProperty* NewProp_TrackBoneNames_Inner = new(EC_InternalUseOnlyConstructor, NewProp_TrackBoneNames, TEXT("TrackBoneNames"), RF_Public|RF_Transient|RF_Native) UNameProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAnimRotationOnly, UAnimSet, uint8);
				UProperty* NewProp_bAnimRotationOnly = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAnimRotationOnly"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAnimRotationOnly, UAnimSet), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bAnimRotationOnly, UAnimSet), sizeof(uint8), false);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Animation/AnimSet.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSet.h"));
				MetaData->SetValue(NewProp_BestRatioSkelMeshName, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSet.h"));
				MetaData->SetValue(NewProp_BestRatioSkelMeshName, TEXT("ToolTip"), TEXT("Holds the name of the skeletal mesh whose reference skeleton best matches the TrackBoneName array."));
				MetaData->SetValue(NewProp_PreviewSkelMeshName, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSet.h"));
				MetaData->SetValue(NewProp_PreviewSkelMeshName, TEXT("ToolTip"), TEXT("In the AnimSetEditor, when you switch to this AnimSet, it sees if this skeletal mesh is loaded and if so switches to it."));
				MetaData->SetValue(NewProp_ForceMeshTranslationBoneNames, TEXT("Category"), TEXT("AnimSet"));
				MetaData->SetValue(NewProp_ForceMeshTranslationBoneNames, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSet.h"));
				MetaData->SetValue(NewProp_ForceMeshTranslationBoneNames, TEXT("ToolTip"), TEXT("List of bones which are ALWAYS going to use their translation from the mesh and not the animation. // @UE4: Do not change private - they will go away"));
				MetaData->SetValue(NewProp_UseTranslationBoneNames, TEXT("Category"), TEXT("AnimSet"));
				MetaData->SetValue(NewProp_UseTranslationBoneNames, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSet.h"));
				MetaData->SetValue(NewProp_UseTranslationBoneNames, TEXT("ToolTip"), TEXT("Names of bones that should use translation from the animation, if bAnimRotationOnly is set. // @UE4: Do not change private - they will go away"));
				MetaData->SetValue(NewProp_ForceUseMeshTranslation, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSet.h"));
				MetaData->SetValue(NewProp_ForceUseMeshTranslation, TEXT("ToolTip"), TEXT("Cooked down version of ForceMeshTranslationBoneNames // @UE4: Do not change private - they will go away"));
				MetaData->SetValue(NewProp_BoneUseAnimTranslation, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSet.h"));
				MetaData->SetValue(NewProp_BoneUseAnimTranslation, TEXT("ToolTip"), TEXT("Array of booleans that indicate whether or not to read the translation of a bone from animation or ref skeleton.\nThis is basically a cooked down version of UseTranslationBoneNames for speed.\nSize matches the number of tracks.\n   // @UE4: Do not change private - they will go away"));
				MetaData->SetValue(NewProp_LinkupCache, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSet.h"));
				MetaData->SetValue(NewProp_LinkupCache, TEXT("ToolTip"), TEXT("Non-serialised cache of linkups between different skeletal meshes and this AnimSet. // @UE4: Do not change private - they will go away"));
				MetaData->SetValue(NewProp_Sequences, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSet.h"));
				MetaData->SetValue(NewProp_Sequences, TEXT("ToolTip"), TEXT("Actual animation sequence information."));
				MetaData->SetValue(NewProp_TrackBoneNames, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSet.h"));
				MetaData->SetValue(NewProp_TrackBoneNames, TEXT("ToolTip"), TEXT("Bone name that each track relates to. TrackBoneName.Num() == Number of tracks."));
				MetaData->SetValue(NewProp_bAnimRotationOnly, TEXT("Category"), TEXT("AnimSet"));
				MetaData->SetValue(NewProp_bAnimRotationOnly, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimSet.h"));
				MetaData->SetValue(NewProp_bAnimRotationOnly, TEXT("ToolTip"), TEXT("Indicates that only the rotation should be taken from the animation sequence and the translation should come from the USkeletalMesh ref pose.\nNote that the root bone always takes translation from the animation, even if this flag is set.\nYou can use the UseTranslationBoneNames array to specify other bones that should use translation with this flag set."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UAnimSet(Z_Construct_UClass_UAnimSet, TEXT("UAnimSet"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UAnimSet);
	UScriptStruct* Z_Construct_UScriptStruct_FAssetImportInfo()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FAssetImportInfo_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("AssetImportInfo"), sizeof(FAssetImportInfo), Get_Z_Construct_UScriptStruct_FAssetImportInfo_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AssetImportInfo"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FAssetImportInfo>, EStructFlags(0x00000201));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/EditorFramework/AssetImportData.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Struct that is used to store an array of asset import data as an asset registry tag"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAssetImportInfo_CRC() { return 991821497U; }
	UClass* Z_Construct_UClass_UAssetImportData_NoRegister()
	{
		return UAssetImportData::StaticClass();
	}
	UClass* Z_Construct_UClass_UAssetImportData()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UAssetImportData::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_SourceData = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SourceData"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SourceData, UAssetImportData), 0x0000000800020001, Z_Construct_UScriptStruct_FAssetImportInfo());
				UProperty* NewProp_SourceFileTimestamp = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SourceFileTimestamp"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(SourceFileTimestamp_DEPRECATED, UAssetImportData), 0x0000000820000000);
				UProperty* NewProp_SourceFilePath = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SourceFilePath"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(SourceFilePath_DEPRECATED, UAssetImportData), 0x0000000820000000);
#endif // WITH_EDITORONLY_DATA
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("EditorFramework/AssetImportData.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/EditorFramework/AssetImportData.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("todo: Make this class better suited to multiple import paths - maybe have FAssetImportInfo use a map rather than array?"));
				MetaData->SetValue(NewProp_SourceData, TEXT("Category"), TEXT("ImportSettings"));
				MetaData->SetValue(NewProp_SourceData, TEXT("ModuleRelativePath"), TEXT("Classes/EditorFramework/AssetImportData.h"));
				MetaData->SetValue(NewProp_SourceData, TEXT("ToolTip"), TEXT("Source file data describing the files that were used to import this asset."));
				MetaData->SetValue(NewProp_SourceFileTimestamp, TEXT("ModuleRelativePath"), TEXT("Classes/EditorFramework/AssetImportData.h"));
				MetaData->SetValue(NewProp_SourceFileTimestamp, TEXT("ToolTip"), TEXT("Date/Time-stamp of the file from the last import"));
				MetaData->SetValue(NewProp_SourceFilePath, TEXT("ModuleRelativePath"), TEXT("Classes/EditorFramework/AssetImportData.h"));
				MetaData->SetValue(NewProp_SourceFilePath, TEXT("ToolTip"), TEXT("Path to the resource used to construct this static mesh. Relative to the object's package, BaseDir() or absolute"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UAssetImportData(Z_Construct_UClass_UAssetImportData, TEXT("UAssetImportData"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UAssetImportData);
	UClass* Z_Construct_UClass_UAssetUserData_NoRegister()
	{
		return UAssetUserData::StaticClass();
	}
	UClass* Z_Construct_UClass_UAssetUserData()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UAssetUserData::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20300080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/AssetUserData.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/AssetUserData.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Object that can be subclassed to store custom data on Unreal asset objects."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UAssetUserData(Z_Construct_UClass_UAssetUserData, TEXT("UAssetUserData"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UAssetUserData);
	UScriptStruct* Z_Construct_UScriptStruct_FLaunchOnTestSettings()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FLaunchOnTestSettings_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("LaunchOnTestSettings"), sizeof(FLaunchOnTestSettings), Get_Z_Construct_UScriptStruct_FLaunchOnTestSettings_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LaunchOnTestSettings"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FLaunchOnTestSettings>, EStructFlags(0x00000001));
			UProperty* NewProp_DeviceID = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DeviceID"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(DeviceID, FLaunchOnTestSettings), 0x0000000000004001);
			UProperty* NewProp_LaunchOnTestmap = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LaunchOnTestmap"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LaunchOnTestmap, FLaunchOnTestSettings), 0x0000000000004001, Z_Construct_UScriptStruct_FFilePath());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Holds settings for the editor Launch On With Map Iterations test."));
			MetaData->SetValue(NewProp_DeviceID, TEXT("Category"), TEXT("Automation"));
			MetaData->SetValue(NewProp_DeviceID, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
			MetaData->SetValue(NewProp_DeviceID, TEXT("ToolTip"), TEXT("This is the device to be used for launch on. Example: WindowsNoEditor, Android, IOS, Linux"));
			MetaData->SetValue(NewProp_LaunchOnTestmap, TEXT("Category"), TEXT("Automation"));
			MetaData->SetValue(NewProp_LaunchOnTestmap, TEXT("FilePathFilter"), TEXT("umap"));
			MetaData->SetValue(NewProp_LaunchOnTestmap, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
			MetaData->SetValue(NewProp_LaunchOnTestmap, TEXT("ToolTip"), TEXT("Map to be used for the Launch On test *"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FLaunchOnTestSettings_CRC() { return 3148434743U; }
	UScriptStruct* Z_Construct_UScriptStruct_FEditorMapPerformanceTestDefinition()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FEditorMapPerformanceTestDefinition_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("EditorMapPerformanceTestDefinition"), sizeof(FEditorMapPerformanceTestDefinition), Get_Z_Construct_UScriptStruct_FEditorMapPerformanceTestDefinition_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EditorMapPerformanceTestDefinition"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FEditorMapPerformanceTestDefinition>, EStructFlags(0x00000001));
			UProperty* NewProp_TestTimer = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TestTimer"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(TestTimer, FEditorMapPerformanceTestDefinition), 0x0000000000004001);
			UProperty* NewProp_PerformanceTestmap = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PerformanceTestmap"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PerformanceTestmap, FEditorMapPerformanceTestDefinition), 0x0000000000004001, Z_Construct_UScriptStruct_FFilePath());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Holds settings for the asset import / export automation test"));
			MetaData->SetValue(NewProp_TestTimer, TEXT("Category"), TEXT("Automation"));
			MetaData->SetValue(NewProp_TestTimer, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
			MetaData->SetValue(NewProp_TestTimer, TEXT("ToolTip"), TEXT("This is the length of time in seconds that this test will run for before stopping."));
			MetaData->SetValue(NewProp_PerformanceTestmap, TEXT("Category"), TEXT("Automation"));
			MetaData->SetValue(NewProp_PerformanceTestmap, TEXT("FilePathFilter"), TEXT("umap"));
			MetaData->SetValue(NewProp_PerformanceTestmap, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
			MetaData->SetValue(NewProp_PerformanceTestmap, TEXT("ToolTip"), TEXT("Map to be used for the Performance Capture *"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FEditorMapPerformanceTestDefinition_CRC() { return 2258130968U; }
	UScriptStruct* Z_Construct_UScriptStruct_FBuildPromotionTestSettings()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FBuildPromotionTestSettings_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("BuildPromotionTestSettings"), sizeof(FBuildPromotionTestSettings), Get_Z_Construct_UScriptStruct_FBuildPromotionTestSettings_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BuildPromotionTestSettings"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FBuildPromotionTestSettings>, EStructFlags(0x00000001));
			UProperty* NewProp_SourceControlMaterial = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SourceControlMaterial"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SourceControlMaterial, FBuildPromotionTestSettings), 0x0000000000000001, Z_Construct_UScriptStruct_FFilePath());
			UProperty* NewProp_NewProjectSettings = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("NewProjectSettings"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(NewProjectSettings, FBuildPromotionTestSettings), 0x0000000000000001, Z_Construct_UScriptStruct_FBuildPromotionNewProjectSettings());
			UProperty* NewProp_BlueprintSettings = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BlueprintSettings"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(BlueprintSettings, FBuildPromotionTestSettings), 0x0000000000000001, Z_Construct_UScriptStruct_FBuildPromotionBlueprintSettings());
			UProperty* NewProp_OpenAssets = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("OpenAssets"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(OpenAssets, FBuildPromotionTestSettings), 0x0000000000000001, Z_Construct_UScriptStruct_FBuildPromotionOpenAssetSettings());
			UProperty* NewProp_ImportWorkflow = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ImportWorkflow"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ImportWorkflow, FBuildPromotionTestSettings), 0x0000000000000001, Z_Construct_UScriptStruct_FBuildPromotionImportWorkflowSettings());
			UProperty* NewProp_DefaultStaticMeshAsset = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DefaultStaticMeshAsset"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DefaultStaticMeshAsset, FBuildPromotionTestSettings), 0x0000000000000001, Z_Construct_UScriptStruct_FFilePath());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Holds settings for the editor build promotion test"));
			MetaData->SetValue(NewProp_SourceControlMaterial, TEXT("Category"), TEXT("Automation"));
			MetaData->SetValue(NewProp_SourceControlMaterial, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
			MetaData->SetValue(NewProp_SourceControlMaterial, TEXT("ToolTip"), TEXT("Material to modify for the content browser step *"));
			MetaData->SetValue(NewProp_NewProjectSettings, TEXT("Category"), TEXT("Automation"));
			MetaData->SetValue(NewProp_NewProjectSettings, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
			MetaData->SetValue(NewProp_NewProjectSettings, TEXT("ToolTip"), TEXT("New project settings *"));
			MetaData->SetValue(NewProp_BlueprintSettings, TEXT("Category"), TEXT("Automation"));
			MetaData->SetValue(NewProp_BlueprintSettings, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
			MetaData->SetValue(NewProp_BlueprintSettings, TEXT("ToolTip"), TEXT("Blueprint settings *"));
			MetaData->SetValue(NewProp_OpenAssets, TEXT("Category"), TEXT("Automation"));
			MetaData->SetValue(NewProp_OpenAssets, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
			MetaData->SetValue(NewProp_OpenAssets, TEXT("ToolTip"), TEXT("Open assets settings *"));
			MetaData->SetValue(NewProp_ImportWorkflow, TEXT("Category"), TEXT("Automation"));
			MetaData->SetValue(NewProp_ImportWorkflow, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
			MetaData->SetValue(NewProp_ImportWorkflow, TEXT("ToolTip"), TEXT("Import workflow settings *"));
			MetaData->SetValue(NewProp_DefaultStaticMeshAsset, TEXT("Category"), TEXT("Automation"));
			MetaData->SetValue(NewProp_DefaultStaticMeshAsset, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
			MetaData->SetValue(NewProp_DefaultStaticMeshAsset, TEXT("ToolTip"), TEXT("Default static mesh asset to apply materials to *"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FBuildPromotionTestSettings_CRC() { return 1210655442U; }
	UScriptStruct* Z_Construct_UScriptStruct_FParticleEditorPromotionSettings()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FParticleEditorPromotionSettings_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("ParticleEditorPromotionSettings"), sizeof(FParticleEditorPromotionSettings), Get_Z_Construct_UScriptStruct_FParticleEditorPromotionSettings_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ParticleEditorPromotionSettings"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FParticleEditorPromotionSettings>, EStructFlags(0x00000001));
			UProperty* NewProp_DefaultParticleAsset = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DefaultParticleAsset"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DefaultParticleAsset, FParticleEditorPromotionSettings), 0x0000000000000001, Z_Construct_UScriptStruct_FFilePath());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Holds settings for the particle editor build promotion tests"));
			MetaData->SetValue(NewProp_DefaultParticleAsset, TEXT("Category"), TEXT("Automation"));
			MetaData->SetValue(NewProp_DefaultParticleAsset, TEXT("FilePathFilter"), TEXT("uasset"));
			MetaData->SetValue(NewProp_DefaultParticleAsset, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
			MetaData->SetValue(NewProp_DefaultParticleAsset, TEXT("ToolTip"), TEXT("Default particle asset to use for tests"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FParticleEditorPromotionSettings_CRC() { return 2969063367U; }
	UScriptStruct* Z_Construct_UScriptStruct_FMaterialEditorPromotionSettings()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FMaterialEditorPromotionSettings_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("MaterialEditorPromotionSettings"), sizeof(FMaterialEditorPromotionSettings), Get_Z_Construct_UScriptStruct_FMaterialEditorPromotionSettings_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MaterialEditorPromotionSettings"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FMaterialEditorPromotionSettings>, EStructFlags(0x00000001));
			UProperty* NewProp_DefaultNormalTexture = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DefaultNormalTexture"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DefaultNormalTexture, FMaterialEditorPromotionSettings), 0x0000000000000001, Z_Construct_UScriptStruct_FFilePath());
			UProperty* NewProp_DefaultDiffuseTexture = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DefaultDiffuseTexture"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DefaultDiffuseTexture, FMaterialEditorPromotionSettings), 0x0000000000000001, Z_Construct_UScriptStruct_FFilePath());
			UProperty* NewProp_DefaultMaterialAsset = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DefaultMaterialAsset"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DefaultMaterialAsset, FMaterialEditorPromotionSettings), 0x0000000000000001, Z_Construct_UScriptStruct_FFilePath());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Holds settings for the material editor build promotion tests"));
			MetaData->SetValue(NewProp_DefaultNormalTexture, TEXT("Category"), TEXT("Automation"));
			MetaData->SetValue(NewProp_DefaultNormalTexture, TEXT("FilePathFilter"), TEXT("uasset"));
			MetaData->SetValue(NewProp_DefaultNormalTexture, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
			MetaData->SetValue(NewProp_DefaultNormalTexture, TEXT("ToolTip"), TEXT("Default material asset to apply to static meshes *"));
			MetaData->SetValue(NewProp_DefaultDiffuseTexture, TEXT("Category"), TEXT("Automation"));
			MetaData->SetValue(NewProp_DefaultDiffuseTexture, TEXT("FilePathFilter"), TEXT("uasset"));
			MetaData->SetValue(NewProp_DefaultDiffuseTexture, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
			MetaData->SetValue(NewProp_DefaultDiffuseTexture, TEXT("ToolTip"), TEXT("Default material asset to apply to static meshes *"));
			MetaData->SetValue(NewProp_DefaultMaterialAsset, TEXT("Category"), TEXT("Automation"));
			MetaData->SetValue(NewProp_DefaultMaterialAsset, TEXT("FilePathFilter"), TEXT("uasset"));
			MetaData->SetValue(NewProp_DefaultMaterialAsset, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
			MetaData->SetValue(NewProp_DefaultMaterialAsset, TEXT("ToolTip"), TEXT("Default material asset to apply to static meshes *"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FMaterialEditorPromotionSettings_CRC() { return 2756752120U; }
	UScriptStruct* Z_Construct_UScriptStruct_FBuildPromotionNewProjectSettings()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FBuildPromotionNewProjectSettings_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("BuildPromotionNewProjectSettings"), sizeof(FBuildPromotionNewProjectSettings), Get_Z_Construct_UScriptStruct_FBuildPromotionNewProjectSettings_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BuildPromotionNewProjectSettings"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FBuildPromotionNewProjectSettings>, EStructFlags(0x00000001));
			UProperty* NewProp_NewProjectNameOverride = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("NewProjectNameOverride"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(NewProjectNameOverride, FBuildPromotionNewProjectSettings), 0x0000000000000001);
			UProperty* NewProp_NewProjectFolderOverride = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("NewProjectFolderOverride"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(NewProjectFolderOverride, FBuildPromotionNewProjectSettings), 0x0000000000000001, Z_Construct_UScriptStruct_FDirectoryPath());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Holds settings for the new project stage of the build promotion test"));
			MetaData->SetValue(NewProp_NewProjectNameOverride, TEXT("Category"), TEXT("Automation"));
			MetaData->SetValue(NewProp_NewProjectNameOverride, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
			MetaData->SetValue(NewProp_NewProjectNameOverride, TEXT("ToolTip"), TEXT("The name of the project *"));
			MetaData->SetValue(NewProp_NewProjectFolderOverride, TEXT("Category"), TEXT("Automation"));
			MetaData->SetValue(NewProp_NewProjectFolderOverride, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
			MetaData->SetValue(NewProp_NewProjectFolderOverride, TEXT("ToolTip"), TEXT("The path for the new project"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FBuildPromotionNewProjectSettings_CRC() { return 3787407549U; }
	UScriptStruct* Z_Construct_UScriptStruct_FBuildPromotionBlueprintSettings()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FBuildPromotionBlueprintSettings_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("BuildPromotionBlueprintSettings"), sizeof(FBuildPromotionBlueprintSettings), Get_Z_Construct_UScriptStruct_FBuildPromotionBlueprintSettings_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BuildPromotionBlueprintSettings"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FBuildPromotionBlueprintSettings>, EStructFlags(0x00000001));
			UProperty* NewProp_SecondMeshPath = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SecondMeshPath"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SecondMeshPath, FBuildPromotionBlueprintSettings), 0x0000000000000001, Z_Construct_UScriptStruct_FFilePath());
			UProperty* NewProp_FirstMeshPath = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("FirstMeshPath"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(FirstMeshPath, FBuildPromotionBlueprintSettings), 0x0000000000000001, Z_Construct_UScriptStruct_FFilePath());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Holds settings for the blueprint stage of the build promotion test"));
			MetaData->SetValue(NewProp_SecondMeshPath, TEXT("Category"), TEXT("Automation"));
			MetaData->SetValue(NewProp_SecondMeshPath, TEXT("FilePathFilter"), TEXT("uasset"));
			MetaData->SetValue(NewProp_SecondMeshPath, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
			MetaData->SetValue(NewProp_SecondMeshPath, TEXT("ToolTip"), TEXT("The mesh to set on the blueprint after the delay *"));
			MetaData->SetValue(NewProp_FirstMeshPath, TEXT("Category"), TEXT("Automation"));
			MetaData->SetValue(NewProp_FirstMeshPath, TEXT("FilePathFilter"), TEXT("uasset"));
			MetaData->SetValue(NewProp_FirstMeshPath, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
			MetaData->SetValue(NewProp_FirstMeshPath, TEXT("ToolTip"), TEXT("The starting mesh for the blueprint *"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FBuildPromotionBlueprintSettings_CRC() { return 3796211458U; }
	UScriptStruct* Z_Construct_UScriptStruct_FBuildPromotionOpenAssetSettings()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FBuildPromotionOpenAssetSettings_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("BuildPromotionOpenAssetSettings"), sizeof(FBuildPromotionOpenAssetSettings), Get_Z_Construct_UScriptStruct_FBuildPromotionOpenAssetSettings_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BuildPromotionOpenAssetSettings"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FBuildPromotionOpenAssetSettings>, EStructFlags(0x00000001));
			UProperty* NewProp_TextureAsset = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TextureAsset"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TextureAsset, FBuildPromotionOpenAssetSettings), 0x0000000000004001, Z_Construct_UScriptStruct_FFilePath());
			UProperty* NewProp_StaticMeshAsset = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("StaticMeshAsset"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(StaticMeshAsset, FBuildPromotionOpenAssetSettings), 0x0000000000004001, Z_Construct_UScriptStruct_FFilePath());
			UProperty* NewProp_SkeletalMeshAsset = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SkeletalMeshAsset"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SkeletalMeshAsset, FBuildPromotionOpenAssetSettings), 0x0000000000004001, Z_Construct_UScriptStruct_FFilePath());
			UProperty* NewProp_ParticleSystemAsset = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ParticleSystemAsset"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ParticleSystemAsset, FBuildPromotionOpenAssetSettings), 0x0000000000004001, Z_Construct_UScriptStruct_FFilePath());
			UProperty* NewProp_MaterialAsset = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MaterialAsset"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MaterialAsset, FBuildPromotionOpenAssetSettings), 0x0000000000004001, Z_Construct_UScriptStruct_FFilePath());
			UProperty* NewProp_BlueprintAsset = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BlueprintAsset"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(BlueprintAsset, FBuildPromotionOpenAssetSettings), 0x0000000000004001, Z_Construct_UScriptStruct_FFilePath());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Holds settings for the open assets stage of the build promotion test"));
			MetaData->SetValue(NewProp_TextureAsset, TEXT("Category"), TEXT("Automation"));
			MetaData->SetValue(NewProp_TextureAsset, TEXT("FilePathFilter"), TEXT("uasset"));
			MetaData->SetValue(NewProp_TextureAsset, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
			MetaData->SetValue(NewProp_TextureAsset, TEXT("ToolTip"), TEXT("The texture asset to open"));
			MetaData->SetValue(NewProp_StaticMeshAsset, TEXT("Category"), TEXT("Automation"));
			MetaData->SetValue(NewProp_StaticMeshAsset, TEXT("FilePathFilter"), TEXT("uasset"));
			MetaData->SetValue(NewProp_StaticMeshAsset, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
			MetaData->SetValue(NewProp_StaticMeshAsset, TEXT("ToolTip"), TEXT("The static mesh asset to open"));
			MetaData->SetValue(NewProp_SkeletalMeshAsset, TEXT("Category"), TEXT("Automation"));
			MetaData->SetValue(NewProp_SkeletalMeshAsset, TEXT("FilePathFilter"), TEXT("uasset"));
			MetaData->SetValue(NewProp_SkeletalMeshAsset, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
			MetaData->SetValue(NewProp_SkeletalMeshAsset, TEXT("ToolTip"), TEXT("The skeletal mesh asset to open"));
			MetaData->SetValue(NewProp_ParticleSystemAsset, TEXT("Category"), TEXT("Automation"));
			MetaData->SetValue(NewProp_ParticleSystemAsset, TEXT("FilePathFilter"), TEXT("uasset"));
			MetaData->SetValue(NewProp_ParticleSystemAsset, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
			MetaData->SetValue(NewProp_ParticleSystemAsset, TEXT("ToolTip"), TEXT("The particle system asset to open"));
			MetaData->SetValue(NewProp_MaterialAsset, TEXT("Category"), TEXT("Automation"));
			MetaData->SetValue(NewProp_MaterialAsset, TEXT("FilePathFilter"), TEXT("uasset"));
			MetaData->SetValue(NewProp_MaterialAsset, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
			MetaData->SetValue(NewProp_MaterialAsset, TEXT("ToolTip"), TEXT("The material asset to open"));
			MetaData->SetValue(NewProp_BlueprintAsset, TEXT("Category"), TEXT("Automation"));
			MetaData->SetValue(NewProp_BlueprintAsset, TEXT("FilePathFilter"), TEXT("uasset"));
			MetaData->SetValue(NewProp_BlueprintAsset, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
			MetaData->SetValue(NewProp_BlueprintAsset, TEXT("ToolTip"), TEXT("The blueprint asset to open"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FBuildPromotionOpenAssetSettings_CRC() { return 3026910624U; }
	UScriptStruct* Z_Construct_UScriptStruct_FBuildPromotionImportWorkflowSettings()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FBuildPromotionImportWorkflowSettings_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("BuildPromotionImportWorkflowSettings"), sizeof(FBuildPromotionImportWorkflowSettings), Get_Z_Construct_UScriptStruct_FBuildPromotionImportWorkflowSettings_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BuildPromotionImportWorkflowSettings"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FBuildPromotionImportWorkflowSettings>, EStructFlags(0x00000001));
			UProperty* NewProp_OtherAssetsToImport = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("OtherAssetsToImport"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(OtherAssetsToImport, FBuildPromotionImportWorkflowSettings), 0x0000000000004001);
			UProperty* NewProp_OtherAssetsToImport_Inner = new(EC_InternalUseOnlyConstructor, NewProp_OtherAssetsToImport, TEXT("OtherAssetsToImport"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000004000, Z_Construct_UScriptStruct_FEditorImportWorkflowDefinition());
			UProperty* NewProp_SurroundSound = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SurroundSound"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SurroundSound, FBuildPromotionImportWorkflowSettings), 0x0000000000004001, Z_Construct_UScriptStruct_FEditorImportWorkflowDefinition());
			UProperty* NewProp_Sound = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Sound"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Sound, FBuildPromotionImportWorkflowSettings), 0x0000000000004001, Z_Construct_UScriptStruct_FEditorImportWorkflowDefinition());
			UProperty* NewProp_Animation = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Animation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Animation, FBuildPromotionImportWorkflowSettings), 0x0000000000004001, Z_Construct_UScriptStruct_FEditorImportWorkflowDefinition());
			UProperty* NewProp_SkeletalMesh = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SkeletalMesh"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SkeletalMesh, FBuildPromotionImportWorkflowSettings), 0x0000000000004001, Z_Construct_UScriptStruct_FEditorImportWorkflowDefinition());
			UProperty* NewProp_MorphMesh = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MorphMesh"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MorphMesh, FBuildPromotionImportWorkflowSettings), 0x0000000000004001, Z_Construct_UScriptStruct_FEditorImportWorkflowDefinition());
			UProperty* NewProp_BlendShapeMesh = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BlendShapeMesh"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(BlendShapeMesh, FBuildPromotionImportWorkflowSettings), 0x0000000000004001, Z_Construct_UScriptStruct_FEditorImportWorkflowDefinition());
			UProperty* NewProp_ReimportStaticMesh = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ReimportStaticMesh"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReimportStaticMesh, FBuildPromotionImportWorkflowSettings), 0x0000000000004001, Z_Construct_UScriptStruct_FEditorImportWorkflowDefinition());
			UProperty* NewProp_StaticMesh = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("StaticMesh"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(StaticMesh, FBuildPromotionImportWorkflowSettings), 0x0000000000004001, Z_Construct_UScriptStruct_FEditorImportWorkflowDefinition());
			UProperty* NewProp_Normal = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Normal"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Normal, FBuildPromotionImportWorkflowSettings), 0x0000000000004001, Z_Construct_UScriptStruct_FEditorImportWorkflowDefinition());
			UProperty* NewProp_Diffuse = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Diffuse"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Diffuse, FBuildPromotionImportWorkflowSettings), 0x0000000000004001, Z_Construct_UScriptStruct_FEditorImportWorkflowDefinition());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Holds settings for the import workflow stage of the build promotion test"));
			MetaData->SetValue(NewProp_OtherAssetsToImport, TEXT("Category"), TEXT("Automation"));
			MetaData->SetValue(NewProp_OtherAssetsToImport, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
			MetaData->SetValue(NewProp_OtherAssetsToImport, TEXT("ToolTip"), TEXT("Import settings for any other assets you may want to import"));
			MetaData->SetValue(NewProp_SurroundSound, TEXT("Category"), TEXT("Automation"));
			MetaData->SetValue(NewProp_SurroundSound, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
			MetaData->SetValue(NewProp_SurroundSound, TEXT("ToolTip"), TEXT("Import settings for the surround sound (Select any of the channels.  It will auto import the rest)"));
			MetaData->SetValue(NewProp_Sound, TEXT("Category"), TEXT("Automation"));
			MetaData->SetValue(NewProp_Sound, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
			MetaData->SetValue(NewProp_Sound, TEXT("ToolTip"), TEXT("Import settings for the sound"));
			MetaData->SetValue(NewProp_Animation, TEXT("Category"), TEXT("Automation"));
			MetaData->SetValue(NewProp_Animation, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
			MetaData->SetValue(NewProp_Animation, TEXT("ToolTip"), TEXT("Import settings for the animation asset.  (Will automatically use the skeleton of the skeletal mesh above)"));
			MetaData->SetValue(NewProp_SkeletalMesh, TEXT("Category"), TEXT("Automation"));
			MetaData->SetValue(NewProp_SkeletalMesh, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
			MetaData->SetValue(NewProp_SkeletalMesh, TEXT("ToolTip"), TEXT("Import settings for the skeletal mesh"));
			MetaData->SetValue(NewProp_MorphMesh, TEXT("Category"), TEXT("Automation"));
			MetaData->SetValue(NewProp_MorphMesh, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
			MetaData->SetValue(NewProp_MorphMesh, TEXT("ToolTip"), TEXT("Import settings for the morph mesh"));
			MetaData->SetValue(NewProp_BlendShapeMesh, TEXT("Category"), TEXT("Automation"));
			MetaData->SetValue(NewProp_BlendShapeMesh, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
			MetaData->SetValue(NewProp_BlendShapeMesh, TEXT("ToolTip"), TEXT("Import settings for the blend shape"));
			MetaData->SetValue(NewProp_ReimportStaticMesh, TEXT("Category"), TEXT("Automation"));
			MetaData->SetValue(NewProp_ReimportStaticMesh, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
			MetaData->SetValue(NewProp_ReimportStaticMesh, TEXT("ToolTip"), TEXT("Import settings for the static mesh to re-import"));
			MetaData->SetValue(NewProp_StaticMesh, TEXT("Category"), TEXT("Automation"));
			MetaData->SetValue(NewProp_StaticMesh, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
			MetaData->SetValue(NewProp_StaticMesh, TEXT("ToolTip"), TEXT("Import settings for the static mesh"));
			MetaData->SetValue(NewProp_Normal, TEXT("Category"), TEXT("Automation"));
			MetaData->SetValue(NewProp_Normal, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
			MetaData->SetValue(NewProp_Normal, TEXT("ToolTip"), TEXT("Import settings for the Normalmap texture"));
			MetaData->SetValue(NewProp_Diffuse, TEXT("Category"), TEXT("Automation"));
			MetaData->SetValue(NewProp_Diffuse, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
			MetaData->SetValue(NewProp_Diffuse, TEXT("ToolTip"), TEXT("Import settings for the Diffuse texture"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FBuildPromotionImportWorkflowSettings_CRC() { return 841234198U; }
	UScriptStruct* Z_Construct_UScriptStruct_FEditorImportWorkflowDefinition()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FEditorImportWorkflowDefinition_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("EditorImportWorkflowDefinition"), sizeof(FEditorImportWorkflowDefinition), Get_Z_Construct_UScriptStruct_FEditorImportWorkflowDefinition_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EditorImportWorkflowDefinition"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FEditorImportWorkflowDefinition>, EStructFlags(0x00000001));
			UProperty* NewProp_FactorySettings = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("FactorySettings"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(FactorySettings, FEditorImportWorkflowDefinition), 0x0000000000004001);
			UProperty* NewProp_FactorySettings_Inner = new(EC_InternalUseOnlyConstructor, NewProp_FactorySettings, TEXT("FactorySettings"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000004000, Z_Construct_UScriptStruct_FImportFactorySettingValues());
			UProperty* NewProp_ImportFilePath = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ImportFilePath"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ImportFilePath, FEditorImportWorkflowDefinition), 0x0000000000004001, Z_Construct_UScriptStruct_FFilePath());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Holds settings for the asset import workflow test"));
			MetaData->SetValue(NewProp_FactorySettings, TEXT("Category"), TEXT("Automation"));
			MetaData->SetValue(NewProp_FactorySettings, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
			MetaData->SetValue(NewProp_FactorySettings, TEXT("ToolTip"), TEXT("Settings for the import factory"));
			MetaData->SetValue(NewProp_ImportFilePath, TEXT("Category"), TEXT("Automation"));
			MetaData->SetValue(NewProp_ImportFilePath, TEXT("FilePathFilter"), TEXT("*"));
			MetaData->SetValue(NewProp_ImportFilePath, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
			MetaData->SetValue(NewProp_ImportFilePath, TEXT("ToolTip"), TEXT("The file to import"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FEditorImportWorkflowDefinition_CRC() { return 1827363814U; }
	UScriptStruct* Z_Construct_UScriptStruct_FEditorImportExportTestDefinition()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FEditorImportExportTestDefinition_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("EditorImportExportTestDefinition"), sizeof(FEditorImportExportTestDefinition), Get_Z_Construct_UScriptStruct_FEditorImportExportTestDefinition_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EditorImportExportTestDefinition"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FEditorImportExportTestDefinition>, EStructFlags(0x00000001));
			UProperty* NewProp_FactorySettings = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("FactorySettings"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(FactorySettings, FEditorImportExportTestDefinition), 0x0000000000004001);
			UProperty* NewProp_FactorySettings_Inner = new(EC_InternalUseOnlyConstructor, NewProp_FactorySettings, TEXT("FactorySettings"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000004000, Z_Construct_UScriptStruct_FImportFactorySettingValues());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSkipExport, FEditorImportExportTestDefinition, bool);
			UProperty* NewProp_bSkipExport = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bSkipExport"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSkipExport, FEditorImportExportTestDefinition), 0x0000000000004001, CPP_BOOL_PROPERTY_BITMASK(bSkipExport, FEditorImportExportTestDefinition), sizeof(bool), true);
			UProperty* NewProp_ExportFileExtension = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ExportFileExtension"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ExportFileExtension, FEditorImportExportTestDefinition), 0x0000000000004001);
			UProperty* NewProp_ImportFilePath = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ImportFilePath"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ImportFilePath, FEditorImportExportTestDefinition), 0x0000000000004001, Z_Construct_UScriptStruct_FFilePath());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Holds settings for the asset import / export automation test"));
			MetaData->SetValue(NewProp_FactorySettings, TEXT("Category"), TEXT("Automation"));
			MetaData->SetValue(NewProp_FactorySettings, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
			MetaData->SetValue(NewProp_FactorySettings, TEXT("ToolTip"), TEXT("Settings for the import factory"));
			MetaData->SetValue(NewProp_bSkipExport, TEXT("Category"), TEXT("Automation"));
			MetaData->SetValue(NewProp_bSkipExport, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
			MetaData->SetValue(NewProp_bSkipExport, TEXT("ToolTip"), TEXT("If true, the export step will be skipped"));
			MetaData->SetValue(NewProp_ExportFileExtension, TEXT("Category"), TEXT("Automation"));
			MetaData->SetValue(NewProp_ExportFileExtension, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
			MetaData->SetValue(NewProp_ExportFileExtension, TEXT("ToolTip"), TEXT("The file extension to use when exporting this asset.  Used to find a supporting exporter"));
			MetaData->SetValue(NewProp_ImportFilePath, TEXT("Category"), TEXT("Automation"));
			MetaData->SetValue(NewProp_ImportFilePath, TEXT("FilePathFilter"), TEXT("*"));
			MetaData->SetValue(NewProp_ImportFilePath, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
			MetaData->SetValue(NewProp_ImportFilePath, TEXT("ToolTip"), TEXT("The file to import"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FEditorImportExportTestDefinition_CRC() { return 2354888823U; }
	UScriptStruct* Z_Construct_UScriptStruct_FImportFactorySettingValues()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FImportFactorySettingValues_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("ImportFactorySettingValues"), sizeof(FImportFactorySettingValues), Get_Z_Construct_UScriptStruct_FImportFactorySettingValues_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ImportFactorySettingValues"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FImportFactorySettingValues>, EStructFlags(0x00000001));
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Value"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Value, FImportFactorySettingValues), 0x0000000000004001);
			UProperty* NewProp_SettingName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SettingName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(SettingName, FImportFactorySettingValues), 0x0000000000004001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Holds UProperty names and values to customize factory settings"));
			MetaData->SetValue(NewProp_Value, TEXT("Category"), TEXT("Automation"));
			MetaData->SetValue(NewProp_Value, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
			MetaData->SetValue(NewProp_Value, TEXT("ToolTip"), TEXT("Value to import for the specified property."));
			MetaData->SetValue(NewProp_SettingName, TEXT("Category"), TEXT("Automation"));
			MetaData->SetValue(NewProp_SettingName, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
			MetaData->SetValue(NewProp_SettingName, TEXT("ToolTip"), TEXT("Name of the property to change.  Nested settings can be modified using \"Outer.Property"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FImportFactorySettingValues_CRC() { return 3152434396U; }
	UScriptStruct* Z_Construct_UScriptStruct_FExternalToolDefinition()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FExternalToolDefinition_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("ExternalToolDefinition"), sizeof(FExternalToolDefinition), Get_Z_Construct_UScriptStruct_FExternalToolDefinition_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ExternalToolDefinition"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FExternalToolDefinition>, EStructFlags(0x00000001));
			UProperty* NewProp_ScriptDirectory = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ScriptDirectory"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ScriptDirectory, FExternalToolDefinition), 0x0000000000004001, Z_Construct_UScriptStruct_FDirectoryPath());
			UProperty* NewProp_ScriptExtension = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ScriptExtension"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ScriptExtension, FExternalToolDefinition), 0x0000000000004001);
			UProperty* NewProp_WorkingDirectory = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("WorkingDirectory"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(WorkingDirectory, FExternalToolDefinition), 0x0000000000004001, Z_Construct_UScriptStruct_FDirectoryPath());
			UProperty* NewProp_CommandLineOptions = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CommandLineOptions"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(CommandLineOptions, FExternalToolDefinition), 0x0000000000004001);
			UProperty* NewProp_ExecutablePath = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ExecutablePath"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ExecutablePath, FExternalToolDefinition), 0x0000000000004001, Z_Construct_UScriptStruct_FFilePath());
			UProperty* NewProp_ToolName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ToolName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ToolName, FExternalToolDefinition), 0x0000000000004001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Structure for defining an external tool"));
			MetaData->SetValue(NewProp_ScriptDirectory, TEXT("Category"), TEXT("ExternalTools"));
			MetaData->SetValue(NewProp_ScriptDirectory, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
			MetaData->SetValue(NewProp_ScriptDirectory, TEXT("RelativePath"), TEXT(""));
			MetaData->SetValue(NewProp_ScriptDirectory, TEXT("ToolTip"), TEXT("If the ScriptExtension is set, look here for the script files."));
			MetaData->SetValue(NewProp_ScriptExtension, TEXT("Category"), TEXT("ExternalTools"));
			MetaData->SetValue(NewProp_ScriptExtension, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
			MetaData->SetValue(NewProp_ScriptExtension, TEXT("ToolTip"), TEXT("If set, look for scripts with this extension."));
			MetaData->SetValue(NewProp_WorkingDirectory, TEXT("Category"), TEXT("ExternalTools"));
			MetaData->SetValue(NewProp_WorkingDirectory, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
			MetaData->SetValue(NewProp_WorkingDirectory, TEXT("RelativePath"), TEXT(""));
			MetaData->SetValue(NewProp_WorkingDirectory, TEXT("ToolTip"), TEXT("The working directory for the new process."));
			MetaData->SetValue(NewProp_CommandLineOptions, TEXT("Category"), TEXT("ExternalTools"));
			MetaData->SetValue(NewProp_CommandLineOptions, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
			MetaData->SetValue(NewProp_CommandLineOptions, TEXT("ToolTip"), TEXT("The command line options to pass to the executable."));
			MetaData->SetValue(NewProp_ExecutablePath, TEXT("Category"), TEXT("ExternalTools"));
			MetaData->SetValue(NewProp_ExecutablePath, TEXT("FilePathFilter"), TEXT("*"));
			MetaData->SetValue(NewProp_ExecutablePath, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
			MetaData->SetValue(NewProp_ExecutablePath, TEXT("ToolTip"), TEXT("The executable to run."));
			MetaData->SetValue(NewProp_ToolName, TEXT("Category"), TEXT("ExternalTools"));
			MetaData->SetValue(NewProp_ToolName, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
			MetaData->SetValue(NewProp_ToolName, TEXT("ToolTip"), TEXT("The name of the tool / test."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FExternalToolDefinition_CRC() { return 2966584268U; }
	UScriptStruct* Z_Construct_UScriptStruct_FOpenTestAsset()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FOpenTestAsset_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("OpenTestAsset"), sizeof(FOpenTestAsset), Get_Z_Construct_UScriptStruct_FOpenTestAsset_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OpenTestAsset"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FOpenTestAsset>, EStructFlags(0x00000001));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSkipTestWhenUnAttended, FOpenTestAsset, bool);
			UProperty* NewProp_bSkipTestWhenUnAttended = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bSkipTestWhenUnAttended"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSkipTestWhenUnAttended, FOpenTestAsset), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bSkipTestWhenUnAttended, FOpenTestAsset), sizeof(bool), true);
			UProperty* NewProp_AssetToOpen = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("AssetToOpen"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(AssetToOpen, FOpenTestAsset), 0x0000000000000001, Z_Construct_UScriptStruct_FFilePath());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Structure for asset opening test"));
			MetaData->SetValue(NewProp_bSkipTestWhenUnAttended, TEXT("Category"), TEXT("Automation"));
			MetaData->SetValue(NewProp_bSkipTestWhenUnAttended, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
			MetaData->SetValue(NewProp_bSkipTestWhenUnAttended, TEXT("ToolTip"), TEXT("Perform only when attend *"));
			MetaData->SetValue(NewProp_AssetToOpen, TEXT("Category"), TEXT("Automation"));
			MetaData->SetValue(NewProp_AssetToOpen, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
			MetaData->SetValue(NewProp_AssetToOpen, TEXT("ToolTip"), TEXT("Asset reference"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FOpenTestAsset_CRC() { return 1491501572U; }
	UClass* Z_Construct_UClass_UAutomationTestSettings_NoRegister()
	{
		return UAutomationTestSettings::StaticClass();
	}
	UClass* Z_Construct_UClass_UAutomationTestSettings()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UAutomationTestSettings::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100084;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_LaunchOnSettings = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LaunchOnSettings"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(LaunchOnSettings, UAutomationTestSettings), 0x0000000000004001);
				UProperty* NewProp_LaunchOnSettings_Inner = new(EC_InternalUseOnlyConstructor, NewProp_LaunchOnSettings, TEXT("LaunchOnSettings"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000004000, Z_Construct_UScriptStruct_FLaunchOnTestSettings());
				UProperty* NewProp_ImportExportTestDefinitions = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ImportExportTestDefinitions"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ImportExportTestDefinitions, UAutomationTestSettings), 0x0000000000004001);
				UProperty* NewProp_ImportExportTestDefinitions_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ImportExportTestDefinitions, TEXT("ImportExportTestDefinitions"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000004000, Z_Construct_UScriptStruct_FEditorImportExportTestDefinition());
				UProperty* NewProp_ExternalTools = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ExternalTools"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ExternalTools, UAutomationTestSettings), 0x0000000000004001);
				UProperty* NewProp_ExternalTools_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ExternalTools, TEXT("ExternalTools"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000004000, Z_Construct_UScriptStruct_FExternalToolDefinition());
				UProperty* NewProp_TestAssetsToOpen = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TestAssetsToOpen"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(TestAssetsToOpen, UAutomationTestSettings), 0x0000000000004001);
				UProperty* NewProp_TestAssetsToOpen_Inner = new(EC_InternalUseOnlyConstructor, NewProp_TestAssetsToOpen, TEXT("TestAssetsToOpen"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000004000, Z_Construct_UScriptStruct_FOpenTestAsset());
				UProperty* NewProp_TestLevelFolders = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TestLevelFolders"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(TestLevelFolders, UAutomationTestSettings), 0x0000000000004001);
				UProperty* NewProp_TestLevelFolders_Inner = new(EC_InternalUseOnlyConstructor, NewProp_TestLevelFolders, TEXT("TestLevelFolders"), RF_Public|RF_Transient|RF_Native) UStrProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000004000);
				UProperty* NewProp_EditorTestModules = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EditorTestModules"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(EditorTestModules, UAutomationTestSettings), 0x0000000000004001);
				UProperty* NewProp_EditorTestModules_Inner = new(EC_InternalUseOnlyConstructor, NewProp_EditorTestModules, TEXT("EditorTestModules"), RF_Public|RF_Transient|RF_Native) UStrProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000004000);
				UProperty* NewProp_EngineTestModules = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EngineTestModules"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(EngineTestModules, UAutomationTestSettings), 0x0000000000004001);
				UProperty* NewProp_EngineTestModules_Inner = new(EC_InternalUseOnlyConstructor, NewProp_EngineTestModules, TEXT("EngineTestModules"), RF_Public|RF_Transient|RF_Native) UStrProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000004000);
				UProperty* NewProp_ParticleEditorPromotionTest = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ParticleEditorPromotionTest"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ParticleEditorPromotionTest, UAutomationTestSettings), 0x0000000000004001, Z_Construct_UScriptStruct_FParticleEditorPromotionSettings());
				UProperty* NewProp_MaterialEditorPromotionTest = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaterialEditorPromotionTest"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MaterialEditorPromotionTest, UAutomationTestSettings), 0x0000000000004001, Z_Construct_UScriptStruct_FMaterialEditorPromotionSettings());
				UProperty* NewProp_BuildPromotionTest = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BuildPromotionTest"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(BuildPromotionTest, UAutomationTestSettings), 0x0000000000004001, Z_Construct_UScriptStruct_FBuildPromotionTestSettings());
				UProperty* NewProp_EditorPerformanceTestMaps = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EditorPerformanceTestMaps"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(EditorPerformanceTestMaps, UAutomationTestSettings), 0x0000000000004001);
				UProperty* NewProp_EditorPerformanceTestMaps_Inner = new(EC_InternalUseOnlyConstructor, NewProp_EditorPerformanceTestMaps, TEXT("EditorPerformanceTestMaps"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000004000, Z_Construct_UScriptStruct_FEditorMapPerformanceTestDefinition());
				UProperty* NewProp_AutomationTestmap = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AutomationTestmap"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(AutomationTestmap, UAutomationTestSettings), 0x0000000000004001, Z_Construct_UScriptStruct_FFilePath());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Tests/AutomationTestSettings.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Implements the Editor's user settings."));
				MetaData->SetValue(NewProp_LaunchOnSettings, TEXT("Category"), TEXT("Automation"));
				MetaData->SetValue(NewProp_LaunchOnSettings, TEXT("FilePathFilter"), TEXT("umap"));
				MetaData->SetValue(NewProp_LaunchOnSettings, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
				MetaData->SetValue(NewProp_LaunchOnSettings, TEXT("ToolTip"), TEXT("The map and device type to be used for the editor Launch On With Map Iterations test."));
				MetaData->SetValue(NewProp_ImportExportTestDefinitions, TEXT("Category"), TEXT("Automation"));
				MetaData->SetValue(NewProp_ImportExportTestDefinitions, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
				MetaData->SetValue(NewProp_ImportExportTestDefinitions, TEXT("ToolTip"), TEXT("Asset import / Export test settings"));
				MetaData->SetValue(NewProp_ExternalTools, TEXT("Category"), TEXT("ExternalTools"));
				MetaData->SetValue(NewProp_ExternalTools, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
				MetaData->SetValue(NewProp_ExternalTools, TEXT("ToolTip"), TEXT("External executables and scripts to run as part of automation."));
				MetaData->SetValue(NewProp_TestAssetsToOpen, TEXT("Category"), TEXT("Automation"));
				MetaData->SetValue(NewProp_TestAssetsToOpen, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
				MetaData->SetValue(NewProp_TestAssetsToOpen, TEXT("ToolTip"), TEXT("Asset to test for open in automation process"));
				MetaData->SetValue(NewProp_TestLevelFolders, TEXT("Category"), TEXT("MiscAutomationSetups"));
				MetaData->SetValue(NewProp_TestLevelFolders, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
				MetaData->SetValue(NewProp_TestLevelFolders, TEXT("ToolTip"), TEXT("Folders containing levels to exclude from automated tests"));
				MetaData->SetValue(NewProp_EditorTestModules, TEXT("Category"), TEXT("MiscAutomationSetups"));
				MetaData->SetValue(NewProp_EditorTestModules, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
				MetaData->SetValue(NewProp_EditorTestModules, TEXT("ToolTip"), TEXT("Modules to load that have editor tests"));
				MetaData->SetValue(NewProp_EngineTestModules, TEXT("Category"), TEXT("MiscAutomationSetups"));
				MetaData->SetValue(NewProp_EngineTestModules, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
				MetaData->SetValue(NewProp_EngineTestModules, TEXT("ToolTip"), TEXT("Modules to load that have engine tests"));
				MetaData->SetValue(NewProp_ParticleEditorPromotionTest, TEXT("Category"), TEXT("Automation"));
				MetaData->SetValue(NewProp_ParticleEditorPromotionTest, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
				MetaData->SetValue(NewProp_ParticleEditorPromotionTest, TEXT("ToolTip"), TEXT("Particle editor promotion test settings"));
				MetaData->SetValue(NewProp_MaterialEditorPromotionTest, TEXT("Category"), TEXT("Automation"));
				MetaData->SetValue(NewProp_MaterialEditorPromotionTest, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
				MetaData->SetValue(NewProp_MaterialEditorPromotionTest, TEXT("ToolTip"), TEXT("Material editor promotion test settings"));
				MetaData->SetValue(NewProp_BuildPromotionTest, TEXT("Category"), TEXT("Automation"));
				MetaData->SetValue(NewProp_BuildPromotionTest, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
				MetaData->SetValue(NewProp_BuildPromotionTest, TEXT("ToolTip"), TEXT("Editor build promotion test settings"));
				MetaData->SetValue(NewProp_EditorPerformanceTestMaps, TEXT("Category"), TEXT("Automation"));
				MetaData->SetValue(NewProp_EditorPerformanceTestMaps, TEXT("FilePathFilter"), TEXT("umap"));
				MetaData->SetValue(NewProp_EditorPerformanceTestMaps, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
				MetaData->SetValue(NewProp_EditorPerformanceTestMaps, TEXT("ToolTip"), TEXT("The map to be used for the editor performance capture tool."));
				MetaData->SetValue(NewProp_AutomationTestmap, TEXT("Category"), TEXT("Automation"));
				MetaData->SetValue(NewProp_AutomationTestmap, TEXT("FilePathFilter"), TEXT("umap"));
				MetaData->SetValue(NewProp_AutomationTestmap, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/AutomationTestSettings.h"));
				MetaData->SetValue(NewProp_AutomationTestmap, TEXT("ToolTip"), TEXT("The automation test map to be used for several of the automation tests."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UAutomationTestSettings(Z_Construct_UClass_UAutomationTestSettings, TEXT("UAutomationTestSettings"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UAutomationTestSettings);
	UScriptStruct* Z_Construct_UScriptStruct_FNavAvoidanceData()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FNavAvoidanceData_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("NavAvoidanceData"), sizeof(FNavAvoidanceData), Get_Z_Construct_UScriptStruct_FNavAvoidanceData_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NavAvoidanceData"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FNavAvoidanceData>, EStructFlags(0x00000001));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/AvoidanceManager.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FNavAvoidanceData_CRC() { return 4051279158U; }
	UFunction* Z_Construct_UFunction_UAvoidanceManager_GetAvoidanceVelocity()
	{
		struct AvoidanceManager_eventGetAvoidanceVelocity_Parms
		{
			FNavAvoidanceData AvoidanceData;
			float DeltaTime;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAvoidanceManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetAvoidanceVelocity"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C20401, 65535, sizeof(AvoidanceManager_eventGetAvoidanceVelocity_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, AvoidanceManager_eventGetAvoidanceVelocity_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_DeltaTime = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DeltaTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DeltaTime, AvoidanceManager_eventGetAvoidanceVelocity_Parms), 0x0000000000000080);
			UProperty* NewProp_AvoidanceData = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AvoidanceData"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(AvoidanceData, AvoidanceManager_eventGetAvoidanceVelocity_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FNavAvoidanceData());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/AvoidanceManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Only use if you want manual velocity planning. Will not ignore your own volume if you are registered."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAvoidanceManager_GetAvoidanceVelocityForComponent()
	{
		struct AvoidanceManager_eventGetAvoidanceVelocityForComponent_Parms
		{
			UMovementComponent* MovementComp;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAvoidanceManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetAvoidanceVelocityForComponent"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(AvoidanceManager_eventGetAvoidanceVelocityForComponent_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, AvoidanceManager_eventGetAvoidanceVelocityForComponent_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_MovementComp = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MovementComp"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(MovementComp, AvoidanceManager_eventGetAvoidanceVelocityForComponent_Parms), 0x0000000000080080, Z_Construct_UClass_UMovementComponent_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/AvoidanceManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Calculate avoidance velocity for component (avoids collisions with the supplied component)"));
			MetaData->SetValue(NewProp_MovementComp, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAvoidanceManager_GetAvoidanceVelocityIgnoringUID()
	{
		struct AvoidanceManager_eventGetAvoidanceVelocityIgnoringUID_Parms
		{
			FNavAvoidanceData AvoidanceData;
			float DeltaTime;
			int32 IgnoreThisUID;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAvoidanceManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetAvoidanceVelocityIgnoringUID"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C20401, 65535, sizeof(AvoidanceManager_eventGetAvoidanceVelocityIgnoringUID_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, AvoidanceManager_eventGetAvoidanceVelocityIgnoringUID_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_IgnoreThisUID = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IgnoreThisUID"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(IgnoreThisUID, AvoidanceManager_eventGetAvoidanceVelocityIgnoringUID_Parms), 0x0000000000000080);
			UProperty* NewProp_DeltaTime = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DeltaTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DeltaTime, AvoidanceManager_eventGetAvoidanceVelocityIgnoringUID_Parms), 0x0000000000000080);
			UProperty* NewProp_AvoidanceData = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AvoidanceData"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(AvoidanceData, AvoidanceManager_eventGetAvoidanceVelocityIgnoringUID_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FNavAvoidanceData());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/AvoidanceManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Only use if you want manual velocity planning. Provide your AvoidanceUID in order to avoid colliding with yourself."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAvoidanceManager_GetNewAvoidanceUID()
	{
		struct AvoidanceManager_eventGetNewAvoidanceUID_Parms
		{
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAvoidanceManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetNewAvoidanceUID"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(AvoidanceManager_eventGetNewAvoidanceUID_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, AvoidanceManager_eventGetNewAvoidanceUID_Parms), 0x0000000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/AvoidanceManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get appropriate UID for use when reporting to this function or requesting RVO assistance."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAvoidanceManager_GetObjectCount()
	{
		struct AvoidanceManager_eventGetObjectCount_Parms
		{
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAvoidanceManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetObjectCount"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(AvoidanceManager_eventGetObjectCount_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, AvoidanceManager_eventGetObjectCount_Parms), 0x0000000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/AvoidanceManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get the number of avoidance objects currently in the manager."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAvoidanceManager_RegisterMovementComponent()
	{
		struct AvoidanceManager_eventRegisterMovementComponent_Parms
		{
			UMovementComponent* MovementComp;
			float AvoidanceWeight;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAvoidanceManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RegisterMovementComponent"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(AvoidanceManager_eventRegisterMovementComponent_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, AvoidanceManager_eventRegisterMovementComponent_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, AvoidanceManager_eventRegisterMovementComponent_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, AvoidanceManager_eventRegisterMovementComponent_Parms), sizeof(bool), true);
			UProperty* NewProp_AvoidanceWeight = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AvoidanceWeight"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(AvoidanceWeight, AvoidanceManager_eventRegisterMovementComponent_Parms), 0x0000000000000080);
			UProperty* NewProp_MovementComp = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MovementComp"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(MovementComp, AvoidanceManager_eventRegisterMovementComponent_Parms), 0x0000000000080080, Z_Construct_UClass_UMovementComponent_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_AvoidanceWeight"), TEXT("0.500000"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/AvoidanceManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Register with the given avoidance manager.\n@param AvoidanceWeight      When avoiding each other, actors divert course in proportion to their relative weights. Range is 0.0 to 1.0. Special: at 1.0, actor will not divert course at all."));
			MetaData->SetValue(NewProp_MovementComp, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UAvoidanceManager_NoRegister()
	{
		return UAvoidanceManager::StaticClass();
	}
	UClass* Z_Construct_UClass_UAvoidanceManager()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UAvoidanceManager::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100084;

				OuterClass->LinkChild(Z_Construct_UFunction_UAvoidanceManager_GetAvoidanceVelocity());
				OuterClass->LinkChild(Z_Construct_UFunction_UAvoidanceManager_GetAvoidanceVelocityForComponent());
				OuterClass->LinkChild(Z_Construct_UFunction_UAvoidanceManager_GetAvoidanceVelocityIgnoringUID());
				OuterClass->LinkChild(Z_Construct_UFunction_UAvoidanceManager_GetNewAvoidanceUID());
				OuterClass->LinkChild(Z_Construct_UFunction_UAvoidanceManager_GetObjectCount());
				OuterClass->LinkChild(Z_Construct_UFunction_UAvoidanceManager_RegisterMovementComponent());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_TestHeightDifference = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TestHeightDifference"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(TestHeightDifference, UAvoidanceManager), 0x0000000000004001);
				UProperty* NewProp_ArtificialRadiusExpansion = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ArtificialRadiusExpansion"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ArtificialRadiusExpansion, UAvoidanceManager), 0x0000000000004001);
				UProperty* NewProp_DeltaTimeToPredict = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DeltaTimeToPredict"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DeltaTimeToPredict, UAvoidanceManager), 0x0000000000004001);
				UProperty* NewProp_LockTimeAfterClean = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LockTimeAfterClean"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(LockTimeAfterClean, UAvoidanceManager), 0x0000000000004001);
				UProperty* NewProp_LockTimeAfterAvoid = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LockTimeAfterAvoid"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(LockTimeAfterAvoid, UAvoidanceManager), 0x0000000000004001);
				UProperty* NewProp_DefaultTimeToLive = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultTimeToLive"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DefaultTimeToLive, UAvoidanceManager), 0x0000000000004001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAvoidanceManager_GetAvoidanceVelocity()); // 3765093808
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAvoidanceManager_GetAvoidanceVelocityForComponent()); // 2885158864
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAvoidanceManager_GetAvoidanceVelocityIgnoringUID()); // 2462320495
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAvoidanceManager_GetNewAvoidanceUID()); // 2071859912
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAvoidanceManager_GetObjectCount()); // 299475619
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAvoidanceManager_RegisterMovementComponent()); // 4231843333
				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("AI/Navigation/AvoidanceManager.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/AvoidanceManager.h"));
				MetaData->SetValue(NewProp_TestHeightDifference, TEXT("Category"), TEXT("Avoidance"));
				MetaData->SetValue(NewProp_TestHeightDifference, TEXT("ClampMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_TestHeightDifference, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/AvoidanceManager.h"));
				MetaData->SetValue(NewProp_TestHeightDifference, TEXT("ToolTip"), TEXT("Test against obstacles within given height difference from moving agent"));
				MetaData->SetValue(NewProp_ArtificialRadiusExpansion, TEXT("Category"), TEXT("Avoidance"));
				MetaData->SetValue(NewProp_ArtificialRadiusExpansion, TEXT("ClampMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_ArtificialRadiusExpansion, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/AvoidanceManager.h"));
				MetaData->SetValue(NewProp_ArtificialRadiusExpansion, TEXT("ToolTip"), TEXT("Multiply the radius of all STORED avoidance objects by this value to allow a little extra room for avoidance maneuvers."));
				MetaData->SetValue(NewProp_DeltaTimeToPredict, TEXT("Category"), TEXT("Avoidance"));
				MetaData->SetValue(NewProp_DeltaTimeToPredict, TEXT("ClampMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_DeltaTimeToPredict, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/AvoidanceManager.h"));
				MetaData->SetValue(NewProp_DeltaTimeToPredict, TEXT("ToolTip"), TEXT("This is how far forward in time (seconds) we extend our velocity cones and thus our prediction"));
				MetaData->SetValue(NewProp_LockTimeAfterClean, TEXT("Category"), TEXT("Avoidance"));
				MetaData->SetValue(NewProp_LockTimeAfterClean, TEXT("ClampMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_LockTimeAfterClean, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/AvoidanceManager.h"));
				MetaData->SetValue(NewProp_LockTimeAfterClean, TEXT("ToolTip"), TEXT("How long to stay on course (barring collision) after making an unobstructed move (should be > 0.0, but can be less than a full frame)"));
				MetaData->SetValue(NewProp_LockTimeAfterAvoid, TEXT("Category"), TEXT("Avoidance"));
				MetaData->SetValue(NewProp_LockTimeAfterAvoid, TEXT("ClampMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_LockTimeAfterAvoid, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/AvoidanceManager.h"));
				MetaData->SetValue(NewProp_LockTimeAfterAvoid, TEXT("ToolTip"), TEXT("How long to stay on course (barring collision) after making an avoidance move"));
				MetaData->SetValue(NewProp_DefaultTimeToLive, TEXT("Category"), TEXT("Avoidance"));
				MetaData->SetValue(NewProp_DefaultTimeToLive, TEXT("ClampMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_DefaultTimeToLive, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/AvoidanceManager.h"));
				MetaData->SetValue(NewProp_DefaultTimeToLive, TEXT("ToolTip"), TEXT("How long an avoidance UID must not be updated before the system will put it back in the pool. Actual delay is up to 150% of this value."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UAvoidanceManager(Z_Construct_UClass_UAvoidanceManager, TEXT("UAvoidanceManager"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UAvoidanceManager);
	UFunction* Z_Construct_UFunction_UBlueprintAsyncActionBase_Activate()
	{
		UObject* Outer=Z_Construct_UClass_UBlueprintAsyncActionBase();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Activate"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020400, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/BlueprintAsyncActionBase.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Called to trigger the action once the delegates have been bound"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UBlueprintAsyncActionBase_NoRegister()
	{
		return UBlueprintAsyncActionBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UBlueprintAsyncActionBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UBlueprintAsyncActionBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_UBlueprintAsyncActionBase_Activate());

				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UBlueprintAsyncActionBase_Activate()); // 2957688914
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Kismet/BlueprintAsyncActionBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/BlueprintAsyncActionBase.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBlueprintAsyncActionBase(Z_Construct_UClass_UBlueprintAsyncActionBase, TEXT("UBlueprintAsyncActionBase"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBlueprintAsyncActionBase);
	UScriptStruct* Z_Construct_UScriptStruct_FAnimParentNodeAssetOverride()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimParentNodeAssetOverride_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("AnimParentNodeAssetOverride"), sizeof(FAnimParentNodeAssetOverride), Get_Z_Construct_UScriptStruct_FAnimParentNodeAssetOverride_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimParentNodeAssetOverride"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FAnimParentNodeAssetOverride>, EStructFlags(0x00000001));
			UProperty* NewProp_ParentNodeGuid = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ParentNodeGuid"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ParentNodeGuid, FAnimParentNodeAssetOverride), 0x0000000000000000, Z_Construct_UScriptStruct_FGuid());
			UProperty* NewProp_NewAsset = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("NewAsset"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(NewAsset, FAnimParentNodeAssetOverride), 0x0000000000000000, Z_Construct_UClass_UAnimationAsset_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimBlueprint.h"));
			MetaData->SetValue(NewProp_ParentNodeGuid, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimBlueprint.h"));
			MetaData->SetValue(NewProp_NewAsset, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimBlueprint.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimParentNodeAssetOverride_CRC() { return 3682204672U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimGroupInfo()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimGroupInfo_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("AnimGroupInfo"), sizeof(FAnimGroupInfo), Get_Z_Construct_UScriptStruct_FAnimGroupInfo_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimGroupInfo"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FAnimGroupInfo>, EStructFlags(0x00000001));
			UProperty* NewProp_Color = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Color"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Color, FAnimGroupInfo), 0x0000000000000000, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_Name = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Name"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(Name, FAnimGroupInfo), 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimBlueprint.h"));
			MetaData->SetValue(NewProp_Color, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimBlueprint.h"));
			MetaData->SetValue(NewProp_Name, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimBlueprint.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimGroupInfo_CRC() { return 220313915U; }
	UClass* Z_Construct_UClass_UAnimBlueprint_NoRegister()
	{
		return UAnimBlueprint::StaticClass();
	}
	UClass* Z_Construct_UClass_UAnimBlueprint()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBlueprint();
			Z_Construct_UPackage_Engine();
			OuterClass = UAnimBlueprint::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900084;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_ParentAssetOverrides = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ParentAssetOverrides"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ParentAssetOverrides, UAnimBlueprint), 0x0000000800000000);
				UProperty* NewProp_ParentAssetOverrides_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ParentAssetOverrides, TEXT("ParentAssetOverrides"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000800000000, Z_Construct_UScriptStruct_FAnimParentNodeAssetOverride());
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_Groups = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Groups"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Groups, UAnimBlueprint), 0x0000000000000000);
				UProperty* NewProp_Groups_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Groups, TEXT("Groups"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FAnimGroupInfo());
				UProperty* NewProp_TargetSkeleton = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TargetSkeleton"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(TargetSkeleton, UAnimBlueprint), 0x0000010000000000, Z_Construct_UClass_USkeleton_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Animation/AnimBlueprint.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimBlueprint.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("An Anim Blueprint is essentially a specialized Blueprint whose graphs control the animation of a Skeletal Mesh.\nIt can perform blending of animations, directly control the bones of the skeleton, and output a final pose\nfor a Skeletal Mesh each frame."));
				MetaData->SetValue(NewProp_ParentAssetOverrides, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimBlueprint.h"));
				MetaData->SetValue(NewProp_ParentAssetOverrides, TEXT("ToolTip"), TEXT("Array of overrides to asset containing nodes in the parent that have been overridden"));
				MetaData->SetValue(NewProp_Groups, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimBlueprint.h"));
				MetaData->SetValue(NewProp_Groups, TEXT("ToolTip"), TEXT("List of animation sync groups"));
				MetaData->SetValue(NewProp_TargetSkeleton, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimBlueprint.h"));
				MetaData->SetValue(NewProp_TargetSkeleton, TEXT("ToolTip"), TEXT("The kind of skeleton that animation graphs compiled from the blueprint will animate"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UAnimBlueprint(Z_Construct_UClass_UAnimBlueprint, TEXT("UAnimBlueprint"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UAnimBlueprint);
	UClass* Z_Construct_UClass_ULevelScriptBlueprint_NoRegister()
	{
		return ULevelScriptBlueprint::StaticClass();
	}
	UClass* Z_Construct_UClass_ULevelScriptBlueprint()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBlueprint();
			Z_Construct_UPackage_Engine();
			OuterClass = ULevelScriptBlueprint::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880084;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_FriendlyName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FriendlyName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(FriendlyName, ULevelScriptBlueprint), 0x0000000800002000);
#endif // WITH_EDITORONLY_DATA
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/LevelScriptBlueprint.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/LevelScriptBlueprint.h"));
				MetaData->SetValue(OuterClass, TEXT("NotBlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("A level blueprint is a specialized type of blueprint. It is used to house\nglobal, level-wide logic. In a level blueprint, you can operate on specific\nlevel-actor instances through blueprint's node-based interface. UE3 users\nshould be familiar with this concept, as it is very similar to Kismet.\n\n@see https://docs.unrealengine.com/latest/INT/Engine/Blueprints/UserGuide/Types/LevelBlueprint/index.html\n@see https://docs.unrealengine.com/latest/INT/Engine/Blueprints/index.html\n@see UBlueprint\n@see ALevelScriptActor"));
				MetaData->SetValue(NewProp_FriendlyName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/LevelScriptBlueprint.h"));
				MetaData->SetValue(NewProp_FriendlyName, TEXT("ToolTip"), TEXT("The friendly name to use for UI"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ULevelScriptBlueprint(Z_Construct_UClass_ULevelScriptBlueprint, TEXT("ULevelScriptBlueprint"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(ULevelScriptBlueprint);
	UScriptStruct* Z_Construct_UScriptStruct_FDataTableCategoryHandle()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FDataTableCategoryHandle_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("DataTableCategoryHandle"), sizeof(FDataTableCategoryHandle), Get_Z_Construct_UScriptStruct_FDataTableCategoryHandle_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DataTableCategoryHandle"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FDataTableCategoryHandle>, EStructFlags(0x00000201));
			UProperty* NewProp_RowContents = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RowContents"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(RowContents, FDataTableCategoryHandle), 0x0000000000000005);
			UProperty* NewProp_ColumnName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ColumnName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(ColumnName, FDataTableCategoryHandle), 0x0000000000000005);
			UProperty* NewProp_DataTable = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DataTable"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(DataTable, FDataTableCategoryHandle), 0x0000000000000005, Z_Construct_UClass_UDataTable_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DataTable.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Handle to a particular row in a table"));
			MetaData->SetValue(NewProp_RowContents, TEXT("Category"), TEXT("DataTableCategoryHandle"));
			MetaData->SetValue(NewProp_RowContents, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DataTable.h"));
			MetaData->SetValue(NewProp_RowContents, TEXT("ToolTip"), TEXT("Contents of rows in the table that we want"));
			MetaData->SetValue(NewProp_ColumnName, TEXT("Category"), TEXT("DataTableCategoryHandle"));
			MetaData->SetValue(NewProp_ColumnName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DataTable.h"));
			MetaData->SetValue(NewProp_ColumnName, TEXT("ToolTip"), TEXT("Name of column in the table that we want"));
			MetaData->SetValue(NewProp_DataTable, TEXT("Category"), TEXT("DataTableCategoryHandle"));
			MetaData->SetValue(NewProp_DataTable, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DataTable.h"));
			MetaData->SetValue(NewProp_DataTable, TEXT("ToolTip"), TEXT("Pointer to table we want a row from"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FDataTableCategoryHandle_CRC() { return 648137779U; }
	UScriptStruct* Z_Construct_UScriptStruct_FDataTableRowHandle()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FDataTableRowHandle_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("DataTableRowHandle"), sizeof(FDataTableRowHandle), Get_Z_Construct_UScriptStruct_FDataTableRowHandle_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DataTableRowHandle"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FDataTableRowHandle>, EStructFlags(0x00000201));
			UProperty* NewProp_RowName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RowName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(RowName, FDataTableRowHandle), 0x0000000000000005);
			UProperty* NewProp_DataTable = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DataTable"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(DataTable, FDataTableRowHandle), 0x0000000000000005, Z_Construct_UClass_UDataTable_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DataTable.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Handle to a particular row in a table"));
			MetaData->SetValue(NewProp_RowName, TEXT("Category"), TEXT("DataTableRowHandle"));
			MetaData->SetValue(NewProp_RowName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DataTable.h"));
			MetaData->SetValue(NewProp_RowName, TEXT("ToolTip"), TEXT("Name of row in the table that we want"));
			MetaData->SetValue(NewProp_DataTable, TEXT("Category"), TEXT("DataTableRowHandle"));
			MetaData->SetValue(NewProp_DataTable, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DataTable.h"));
			MetaData->SetValue(NewProp_DataTable, TEXT("ToolTip"), TEXT("Pointer to table we want a row from"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FDataTableRowHandle_CRC() { return 1460648521U; }
	UScriptStruct* Z_Construct_UScriptStruct_FTableRowBase()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FTableRowBase_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("TableRowBase"), sizeof(FTableRowBase), Get_Z_Construct_UScriptStruct_FTableRowBase_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TableRowBase"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FTableRowBase>, EStructFlags(0x00000001));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DataTable.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Base class for all table row structs to inherit from."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FTableRowBase_CRC() { return 2578601915U; }
	UClass* Z_Construct_UClass_UDataTable_NoRegister()
	{
		return UDataTable::StaticClass();
	}
	UClass* Z_Construct_UClass_UDataTable()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UDataTable::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_ImportPath = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ImportPath"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ImportPath_DEPRECATED, UDataTable), 0x0000000820000000);
				UProperty* NewProp_AssetImportData = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AssetImportData"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(AssetImportData, UDataTable), 0x00020008000a0009, Z_Construct_UClass_UAssetImportData_NoRegister());
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_RowStruct = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RowStruct"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(RowStruct, UDataTable), 0x0000000000000000, UScriptStruct::StaticClass());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/DataTable.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DataTable.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Imported spreadsheet table."));
				MetaData->SetValue(NewProp_ImportPath, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DataTable.h"));
				MetaData->SetValue(NewProp_ImportPath, TEXT("ToolTip"), TEXT("The filename imported to create this object. Relative to this object's package, BaseDir() or absolute"));
				MetaData->SetValue(NewProp_AssetImportData, TEXT("Category"), TEXT("ImportSettings"));
				MetaData->SetValue(NewProp_AssetImportData, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_AssetImportData, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DataTable.h"));
				MetaData->SetValue(NewProp_RowStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DataTable.h"));
				MetaData->SetValue(NewProp_RowStruct, TEXT("ToolTip"), TEXT("Structure to use for each row of the table, must inherit from FTableRowBase"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UDataTable(Z_Construct_UClass_UDataTable, TEXT("UDataTable"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UDataTable);
	UEnum* Z_Construct_UEnum_Engine_EEvaluateCurveTableResult()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EEvaluateCurveTableResult_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EEvaluateCurveTableResult"), 0, Get_Z_Construct_UEnum_Engine_EEvaluateCurveTableResult_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EEvaluateCurveTableResult"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EEvaluateCurveTableResult::RowFound")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EEvaluateCurveTableResult::RowNotFound")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EEvaluateCurveTableResult::EEvaluateCurveTableResult_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/DataTableFunctionLibrary.h"));
			MetaData->SetValue(ReturnEnum, TEXT("RowFound.ToolTip"), TEXT("Found the row successfully."));
			MetaData->SetValue(ReturnEnum, TEXT("RowNotFound.ToolTip"), TEXT("Failed to find the row."));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Enum used to indicate success or failure of EvaluateCurveTableRow."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EEvaluateCurveTableResult_CRC() { return 2380846931U; }
	UFunction* Z_Construct_UFunction_UDataTableFunctionLibrary_EvaluateCurveTableRow()
	{
		struct DataTableFunctionLibrary_eventEvaluateCurveTableRow_Parms
		{
			UCurveTable* CurveTable;
			FName RowName;
			float InXY;
			TEnumAsByte<EEvaluateCurveTableResult::Type> OutResult;
			float OutXY;
		};
		UObject* Outer=Z_Construct_UClass_UDataTableFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EvaluateCurveTableRow"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(DataTableFunctionLibrary_eventEvaluateCurveTableRow_Parms));
			UProperty* NewProp_OutXY = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutXY"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(OutXY, DataTableFunctionLibrary_eventEvaluateCurveTableRow_Parms), 0x0000000000000180);
			UProperty* NewProp_OutResult = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutResult"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(OutResult, DataTableFunctionLibrary_eventEvaluateCurveTableRow_Parms), 0x0000000000000180, Z_Construct_UEnum_Engine_EEvaluateCurveTableResult());
			UProperty* NewProp_InXY = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InXY"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InXY, DataTableFunctionLibrary_eventEvaluateCurveTableRow_Parms), 0x0000000000000080);
			UProperty* NewProp_RowName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("RowName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(RowName, DataTableFunctionLibrary_eventEvaluateCurveTableRow_Parms), 0x0000000000000080);
			UProperty* NewProp_CurveTable = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CurveTable"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(CurveTable, DataTableFunctionLibrary_eventEvaluateCurveTableRow_Parms), 0x0000000000000080, Z_Construct_UClass_UCurveTable_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("DataTable"));
			MetaData->SetValue(ReturnFunction, TEXT("DataTablePin"), TEXT("CurveTable"));
			MetaData->SetValue(ReturnFunction, TEXT("ExpandEnumAsExecs"), TEXT("OutResult"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/DataTableFunctionLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UDataTableFunctionLibrary_GetDataTableRowFromName()
	{
		struct DataTableFunctionLibrary_eventGetDataTableRowFromName_Parms
		{
			UDataTable* Table;
			FName RowName;
			FTableRowBase OutRow;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UDataTableFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetDataTableRowFromName"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(DataTableFunctionLibrary_eventGetDataTableRowFromName_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, DataTableFunctionLibrary_eventGetDataTableRowFromName_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, DataTableFunctionLibrary_eventGetDataTableRowFromName_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, DataTableFunctionLibrary_eventGetDataTableRowFromName_Parms), sizeof(bool), true);
			UProperty* NewProp_OutRow = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutRow"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(OutRow, DataTableFunctionLibrary_eventGetDataTableRowFromName_Parms), 0x0000000000000180, Z_Construct_UScriptStruct_FTableRowBase());
			UProperty* NewProp_RowName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("RowName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(RowName, DataTableFunctionLibrary_eventGetDataTableRowFromName_Parms), 0x0000000000000080);
			UProperty* NewProp_Table = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Table"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Table, DataTableFunctionLibrary_eventGetDataTableRowFromName_Parms), 0x0000000000000080, Z_Construct_UClass_UDataTable_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("DataTable"));
			MetaData->SetValue(ReturnFunction, TEXT("CustomStructureParam"), TEXT("OutRow"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/DataTableFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get a Row from a DataTable given a RowName"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UDataTableFunctionLibrary_GetDataTableRowNames()
	{
		struct DataTableFunctionLibrary_eventGetDataTableRowNames_Parms
		{
			UDataTable* Table;
			TArray<FName> OutRowNames;
		};
		UObject* Outer=Z_Construct_UClass_UDataTableFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetDataTableRowNames"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(DataTableFunctionLibrary_eventGetDataTableRowNames_Parms));
			UProperty* NewProp_OutRowNames = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutRowNames"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(OutRowNames, DataTableFunctionLibrary_eventGetDataTableRowNames_Parms), 0x0000000000000180);
			UProperty* NewProp_OutRowNames_Inner = new(EC_InternalUseOnlyConstructor, NewProp_OutRowNames, TEXT("OutRowNames"), RF_Public|RF_Transient|RF_Native) UNameProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_Table = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Table"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Table, DataTableFunctionLibrary_eventGetDataTableRowNames_Parms), 0x0000000000000080, Z_Construct_UClass_UDataTable_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("DataTable"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/DataTableFunctionLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UDataTableFunctionLibrary_NoRegister()
	{
		return UDataTableFunctionLibrary::StaticClass();
	}
	UClass* Z_Construct_UClass_UDataTableFunctionLibrary()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBlueprintFunctionLibrary();
			Z_Construct_UPackage_Engine();
			OuterClass = UDataTableFunctionLibrary::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_UDataTableFunctionLibrary_EvaluateCurveTableRow());
				OuterClass->LinkChild(Z_Construct_UFunction_UDataTableFunctionLibrary_GetDataTableRowFromName());
				OuterClass->LinkChild(Z_Construct_UFunction_UDataTableFunctionLibrary_GetDataTableRowNames());

				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UDataTableFunctionLibrary_EvaluateCurveTableRow()); // 3818840735
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UDataTableFunctionLibrary_GetDataTableRowFromName()); // 2368850185
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UDataTableFunctionLibrary_GetDataTableRowNames()); // 3636391046
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Kismet/DataTableFunctionLibrary.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/DataTableFunctionLibrary.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UDataTableFunctionLibrary(Z_Construct_UClass_UDataTableFunctionLibrary, TEXT("UDataTableFunctionLibrary"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UDataTableFunctionLibrary);
	UClass* Z_Construct_UClass_UDebugDrawService_NoRegister()
	{
		return UDebugDrawService::StaticClass();
	}
	UClass* Z_Construct_UClass_UDebugDrawService()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBlueprintFunctionLibrary();
			Z_Construct_UPackage_Engine();
			OuterClass = UDebugDrawService::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Debug/DebugDrawService.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Debug/DebugDrawService.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UDebugDrawService(Z_Construct_UClass_UDebugDrawService, TEXT("UDebugDrawService"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UDebugDrawService);
	UEnum* Z_Construct_UEnum_Engine_EGrammaticalNumber()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EGrammaticalNumber_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EGrammaticalNumber"), 0, Get_Z_Construct_UEnum_Engine_EGrammaticalNumber_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EGrammaticalNumber"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGrammaticalNumber::Singular")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGrammaticalNumber::Plural")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGrammaticalNumber::EGrammaticalNumber_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/DialogueTypes.h"));
			MetaData->SetValue(ReturnEnum, TEXT("Plural.DisplayName"), TEXT("Plural"));
			MetaData->SetValue(ReturnEnum, TEXT("Singular.DisplayName"), TEXT("Singular"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EGrammaticalNumber_CRC() { return 1859183211U; }
	UEnum* Z_Construct_UEnum_Engine_EGrammaticalGender()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EGrammaticalGender_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EGrammaticalGender"), 0, Get_Z_Construct_UEnum_Engine_EGrammaticalGender_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EGrammaticalGender"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGrammaticalGender::Neuter")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGrammaticalGender::Masculine")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGrammaticalGender::Feminine")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGrammaticalGender::Mixed")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGrammaticalGender::EGrammaticalGender_MAX")), 4));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("Feminine.DisplayName"), TEXT("Feminine"));
			MetaData->SetValue(ReturnEnum, TEXT("Masculine.DisplayName"), TEXT("Masculine"));
			MetaData->SetValue(ReturnEnum, TEXT("Mixed.DisplayName"), TEXT("Mixed"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/DialogueTypes.h"));
			MetaData->SetValue(ReturnEnum, TEXT("Neuter.DisplayName"), TEXT("Neuter"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EGrammaticalGender_CRC() { return 1119013690U; }
	UScriptStruct* Z_Construct_UScriptStruct_FDialogueWaveParameter()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FDialogueWaveParameter_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("DialogueWaveParameter"), sizeof(FDialogueWaveParameter), Get_Z_Construct_UScriptStruct_FDialogueWaveParameter_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DialogueWaveParameter"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FDialogueWaveParameter>, EStructFlags(0x00000001));
			UProperty* NewProp_Context = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Context"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Context, FDialogueWaveParameter), 0x0000000000000001, Z_Construct_UScriptStruct_FDialogueContext());
			UProperty* NewProp_DialogueWave = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DialogueWave"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(DialogueWave, FDialogueWaveParameter), 0x0000000000000001, Z_Construct_UClass_UDialogueWave_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/DialogueTypes.h"));
			MetaData->SetValue(NewProp_Context, TEXT("Category"), TEXT("DialogueWaveParameter"));
			MetaData->SetValue(NewProp_Context, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/DialogueTypes.h"));
			MetaData->SetValue(NewProp_Context, TEXT("ToolTip"), TEXT("The context to use for the dialogue wave."));
			MetaData->SetValue(NewProp_DialogueWave, TEXT("Category"), TEXT("DialogueWaveParameter"));
			MetaData->SetValue(NewProp_DialogueWave, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/DialogueTypes.h"));
			MetaData->SetValue(NewProp_DialogueWave, TEXT("ToolTip"), TEXT("The dialogue wave to play."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FDialogueWaveParameter_CRC() { return 523635074U; }
	UScriptStruct* Z_Construct_UScriptStruct_FDialogueContext()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FDialogueContext_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("DialogueContext"), sizeof(FDialogueContext), Get_Z_Construct_UScriptStruct_FDialogueContext_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DialogueContext"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FDialogueContext>, EStructFlags(0x00000201));
			UProperty* NewProp_Targets = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Targets"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Targets, FDialogueContext), 0x0000000000000001);
			UProperty* NewProp_Targets_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Targets, TEXT("Targets"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UDialogueVoice_NoRegister());
			UProperty* NewProp_Speaker = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Speaker"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Speaker, FDialogueContext), 0x0000000000000001, Z_Construct_UClass_UDialogueVoice_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/DialogueTypes.h"));
			MetaData->SetValue(NewProp_Targets, TEXT("Category"), TEXT("DialogueContext"));
			MetaData->SetValue(NewProp_Targets, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/DialogueTypes.h"));
			MetaData->SetValue(NewProp_Targets, TEXT("ToolTip"), TEXT("The people being spoken to."));
			MetaData->SetValue(NewProp_Speaker, TEXT("Category"), TEXT("DialogueContext"));
			MetaData->SetValue(NewProp_Speaker, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/DialogueTypes.h"));
			MetaData->SetValue(NewProp_Speaker, TEXT("ToolTip"), TEXT("The person speaking the dialogue."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FDialogueContext_CRC() { return 2282943442U; }
	UClass* Z_Construct_UClass_UDialogueTypes_NoRegister()
	{
		return UDialogueTypes::StaticClass();
	}
	UClass* Z_Construct_UClass_UDialogueTypes()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UDialogueTypes::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Sound/DialogueTypes.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/DialogueTypes.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UDialogueTypes(Z_Construct_UClass_UDialogueTypes, TEXT("UDialogueTypes"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UDialogueTypes);
	UEnum* Z_Construct_UEnum_Engine_ESuggestProjVelocityTraceOption()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_ESuggestProjVelocityTraceOption_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ESuggestProjVelocityTraceOption"), 0, Get_Z_Construct_UEnum_Engine_ESuggestProjVelocityTraceOption_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ESuggestProjVelocityTraceOption"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESuggestProjVelocityTraceOption::DoNotTrace")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESuggestProjVelocityTraceOption::TraceFullPath")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESuggestProjVelocityTraceOption::OnlyTraceWhileAsceding")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESuggestProjVelocityTraceOption::ESuggestProjVelocityTraceOption_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_ESuggestProjVelocityTraceOption_CRC() { return 2295344237U; }
	UFunction* Z_Construct_UFunction_UGameplayStatics_ActivateReverbEffect()
	{
		struct GameplayStatics_eventActivateReverbEffect_Parms
		{
			UObject* WorldContextObject;
			UReverbEffect* ReverbEffect;
			FName TagName;
			float Priority;
			float Volume;
			float FadeTime;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ActivateReverbEffect"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(GameplayStatics_eventActivateReverbEffect_Parms));
			UProperty* NewProp_FadeTime = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FadeTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(FadeTime, GameplayStatics_eventActivateReverbEffect_Parms), 0x0000040000000080);
			UProperty* NewProp_Volume = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Volume"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Volume, GameplayStatics_eventActivateReverbEffect_Parms), 0x0000040000000080);
			UProperty* NewProp_Priority = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Priority"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Priority, GameplayStatics_eventActivateReverbEffect_Parms), 0x0000040000000080);
			UProperty* NewProp_TagName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TagName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(TagName, GameplayStatics_eventActivateReverbEffect_Parms), 0x0000040000000080);
			UProperty* NewProp_ReverbEffect = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReverbEffect"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReverbEffect, GameplayStatics_eventActivateReverbEffect_Parms), 0x0000000000000080, Z_Construct_UClass_UReverbEffect_NoRegister());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, GameplayStatics_eventActivateReverbEffect_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AdvancedDisplay"), TEXT("2"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Audio"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_FadeTime"), TEXT("2.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Priority"), TEXT("0.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Volume"), TEXT("0.500000"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Activates a Reverb Effect without the need for a volume\n@param ReverbEffect Reverb Effect to use\n@param TagName Tag to associate with Reverb Effect\n@param Priority Priority of the Reverb Effect\n@param Volume Volume level of Reverb Effect\n@param FadeTime Time before Reverb Effect is fully active"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_ApplyDamage()
	{
		struct GameplayStatics_eventApplyDamage_Parms
		{
			AActor* DamagedActor;
			float BaseDamage;
			AController* EventInstigator;
			AActor* DamageCauser;
			TSubclassOf<UDamageType>  DamageTypeClass;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ApplyDamage"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022405, 65535, sizeof(GameplayStatics_eventApplyDamage_Parms));
			UProperty* NewProp_DamageTypeClass = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DamageTypeClass"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(DamageTypeClass, GameplayStatics_eventApplyDamage_Parms), 0x0004000000000080, Z_Construct_UClass_UDamageType_NoRegister());
			UProperty* NewProp_DamageCauser = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DamageCauser"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(DamageCauser, GameplayStatics_eventApplyDamage_Parms), 0x0000000000000080, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_EventInstigator = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("EventInstigator"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(EventInstigator, GameplayStatics_eventApplyDamage_Parms), 0x0000000000000080, Z_Construct_UClass_AController_NoRegister());
			UProperty* NewProp_BaseDamage = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("BaseDamage"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(BaseDamage, GameplayStatics_eventApplyDamage_Parms), 0x0000000000000080);
			UProperty* NewProp_DamagedActor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DamagedActor"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(DamagedActor, GameplayStatics_eventApplyDamage_Parms), 0x0000000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Game|Damage"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Hurts the specified actor with generic damage.\n@param DamagedActor - Actor that will be damaged.\n@param BaseDamage - The base damage to apply.\n@param EventInstigator - Controller that was responsible for causing this damage (e.g. player who shot the weapon)\n@param DamageCauser - Actor that actually caused the damage (e.g. the grenade that exploded)\n@param DamageTypeClass - Class that describes the damage that was done."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_ApplyPointDamage()
	{
		struct GameplayStatics_eventApplyPointDamage_Parms
		{
			AActor* DamagedActor;
			float BaseDamage;
			FVector HitFromDirection;
			FHitResult HitInfo;
			AController* EventInstigator;
			AActor* DamageCauser;
			TSubclassOf<UDamageType>  DamageTypeClass;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ApplyPointDamage"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C22405, 65535, sizeof(GameplayStatics_eventApplyPointDamage_Parms));
			UProperty* NewProp_DamageTypeClass = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DamageTypeClass"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(DamageTypeClass, GameplayStatics_eventApplyPointDamage_Parms), 0x0004000000000080, Z_Construct_UClass_UDamageType_NoRegister());
			UProperty* NewProp_DamageCauser = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DamageCauser"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(DamageCauser, GameplayStatics_eventApplyPointDamage_Parms), 0x0000000000000080, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_EventInstigator = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("EventInstigator"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(EventInstigator, GameplayStatics_eventApplyPointDamage_Parms), 0x0000000000000080, Z_Construct_UClass_AController_NoRegister());
			UProperty* NewProp_HitInfo = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("HitInfo"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(HitInfo, GameplayStatics_eventApplyPointDamage_Parms), 0x0000008008000182, Z_Construct_UScriptStruct_FHitResult());
			UProperty* NewProp_HitFromDirection = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("HitFromDirection"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(HitFromDirection, GameplayStatics_eventApplyPointDamage_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_BaseDamage = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("BaseDamage"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(BaseDamage, GameplayStatics_eventApplyPointDamage_Parms), 0x0000000000000080);
			UProperty* NewProp_DamagedActor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DamagedActor"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(DamagedActor, GameplayStatics_eventApplyPointDamage_Parms), 0x0000000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Game|Damage"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Hurts the specified actor with the specified impact.\n@param DamagedActor - Actor that will be damaged.\n@param BaseDamage - The base damage to apply.\n@param HitFromDirection - Direction the hit came FROM\n@param HitInfo - Collision or trace result that describes the hit\n@param EventInstigator - Controller that was responsible for causing this damage (e.g. player who shot the weapon)\n@param DamageCauser - Actor that actually caused the damage (e.g. the grenade that exploded)\n@param DamageTypeClass - Class that describes the damage that was done."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_ApplyRadialDamage()
	{
		struct GameplayStatics_eventApplyRadialDamage_Parms
		{
			UObject* WorldContextObject;
			float BaseDamage;
			FVector Origin;
			float DamageRadius;
			TSubclassOf<UDamageType>  DamageTypeClass;
			TArray<AActor*> IgnoreActors;
			AActor* DamageCauser;
			AController* InstigatedByController;
			bool bDoFullDamage;
			TEnumAsByte<ECollisionChannel> DamagePreventionChannel;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ApplyRadialDamage"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C22405, 65535, sizeof(GameplayStatics_eventApplyRadialDamage_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, GameplayStatics_eventApplyRadialDamage_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, GameplayStatics_eventApplyRadialDamage_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, GameplayStatics_eventApplyRadialDamage_Parms), sizeof(bool), true);
			UProperty* NewProp_DamagePreventionChannel = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DamagePreventionChannel"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(DamagePreventionChannel, GameplayStatics_eventApplyRadialDamage_Parms), 0x0000000000000080, Z_Construct_UEnum_Engine_ECollisionChannel());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDoFullDamage, GameplayStatics_eventApplyRadialDamage_Parms, bool);
			UProperty* NewProp_bDoFullDamage = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bDoFullDamage"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDoFullDamage, GameplayStatics_eventApplyRadialDamage_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bDoFullDamage, GameplayStatics_eventApplyRadialDamage_Parms), sizeof(bool), true);
			UProperty* NewProp_InstigatedByController = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InstigatedByController"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(InstigatedByController, GameplayStatics_eventApplyRadialDamage_Parms), 0x0000000000000080, Z_Construct_UClass_AController_NoRegister());
			UProperty* NewProp_DamageCauser = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DamageCauser"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(DamageCauser, GameplayStatics_eventApplyRadialDamage_Parms), 0x0000000000000080, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_IgnoreActors = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IgnoreActors"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(IgnoreActors, GameplayStatics_eventApplyRadialDamage_Parms), 0x0000000008000182);
			UProperty* NewProp_IgnoreActors_Inner = new(EC_InternalUseOnlyConstructor, NewProp_IgnoreActors, TEXT("IgnoreActors"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_DamageTypeClass = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DamageTypeClass"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(DamageTypeClass, GameplayStatics_eventApplyRadialDamage_Parms), 0x0004000000000080, Z_Construct_UClass_UDamageType_NoRegister());
			UProperty* NewProp_DamageRadius = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DamageRadius"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DamageRadius, GameplayStatics_eventApplyRadialDamage_Parms), 0x0000000000000080);
			UProperty* NewProp_Origin = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Origin"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Origin, GameplayStatics_eventApplyRadialDamage_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_BaseDamage = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("BaseDamage"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(BaseDamage, GameplayStatics_eventApplyRadialDamage_Parms), 0x0000000000000080);
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, GameplayStatics_eventApplyRadialDamage_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AutoCreateRefTerm"), TEXT("IgnoreActors"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Game|Damage"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bDoFullDamage"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_DamagePreventionChannel"), TEXT("ECC_Visibility"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Hurt locally authoritative actors within the radius. Will only hit components that block the Visibility channel.\n@param BaseDamage - The base damage to apply, i.e. the damage at the origin.\n@param Origin - Epicenter of the damage area.\n@param DamageRadius - Radius of the damage area, from Origin\n@param DamageTypeClass - Class that describes the damage that was done.\n@param DamageCauser - Actor that actually caused the damage (e.g. the grenade that exploded).  This actor will not be damaged and it will not block damage.\n@param InstigatedByController - Controller that was responsible for causing this damage (e.g. player who threw the grenade)\n@param bFullDamage - if true, damage not scaled based on distance from Origin\n@param DamagePreventionChannel - Damage will not be applied to victim if there is something between the origin and the victim which blocks traces on this channel\n@return true if damage was applied to at least one actor."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_ApplyRadialDamageWithFalloff()
	{
		struct GameplayStatics_eventApplyRadialDamageWithFalloff_Parms
		{
			UObject* WorldContextObject;
			float BaseDamage;
			float MinimumDamage;
			FVector Origin;
			float DamageInnerRadius;
			float DamageOuterRadius;
			float DamageFalloff;
			TSubclassOf<UDamageType>  DamageTypeClass;
			TArray<AActor*> IgnoreActors;
			AActor* DamageCauser;
			AController* InstigatedByController;
			TEnumAsByte<ECollisionChannel> DamagePreventionChannel;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ApplyRadialDamageWithFalloff"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C22405, 65535, sizeof(GameplayStatics_eventApplyRadialDamageWithFalloff_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, GameplayStatics_eventApplyRadialDamageWithFalloff_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, GameplayStatics_eventApplyRadialDamageWithFalloff_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, GameplayStatics_eventApplyRadialDamageWithFalloff_Parms), sizeof(bool), true);
			UProperty* NewProp_DamagePreventionChannel = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DamagePreventionChannel"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(DamagePreventionChannel, GameplayStatics_eventApplyRadialDamageWithFalloff_Parms), 0x0000000000000080, Z_Construct_UEnum_Engine_ECollisionChannel());
			UProperty* NewProp_InstigatedByController = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InstigatedByController"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(InstigatedByController, GameplayStatics_eventApplyRadialDamageWithFalloff_Parms), 0x0000000000000080, Z_Construct_UClass_AController_NoRegister());
			UProperty* NewProp_DamageCauser = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DamageCauser"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(DamageCauser, GameplayStatics_eventApplyRadialDamageWithFalloff_Parms), 0x0000000000000080, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_IgnoreActors = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IgnoreActors"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(IgnoreActors, GameplayStatics_eventApplyRadialDamageWithFalloff_Parms), 0x0000000008000182);
			UProperty* NewProp_IgnoreActors_Inner = new(EC_InternalUseOnlyConstructor, NewProp_IgnoreActors, TEXT("IgnoreActors"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_DamageTypeClass = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DamageTypeClass"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(DamageTypeClass, GameplayStatics_eventApplyRadialDamageWithFalloff_Parms), 0x0004000000000080, Z_Construct_UClass_UDamageType_NoRegister());
			UProperty* NewProp_DamageFalloff = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DamageFalloff"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DamageFalloff, GameplayStatics_eventApplyRadialDamageWithFalloff_Parms), 0x0000000000000080);
			UProperty* NewProp_DamageOuterRadius = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DamageOuterRadius"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DamageOuterRadius, GameplayStatics_eventApplyRadialDamageWithFalloff_Parms), 0x0000000000000080);
			UProperty* NewProp_DamageInnerRadius = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DamageInnerRadius"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DamageInnerRadius, GameplayStatics_eventApplyRadialDamageWithFalloff_Parms), 0x0000000000000080);
			UProperty* NewProp_Origin = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Origin"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Origin, GameplayStatics_eventApplyRadialDamageWithFalloff_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_MinimumDamage = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MinimumDamage"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MinimumDamage, GameplayStatics_eventApplyRadialDamageWithFalloff_Parms), 0x0000000000000080);
			UProperty* NewProp_BaseDamage = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("BaseDamage"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(BaseDamage, GameplayStatics_eventApplyRadialDamageWithFalloff_Parms), 0x0000000000000080);
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, GameplayStatics_eventApplyRadialDamageWithFalloff_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AutoCreateRefTerm"), TEXT("IgnoreActors"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Game|Damage"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_DamagePreventionChannel"), TEXT("ECC_Visibility"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Hurt locally authoritative actors within the radius. Will only hit components that block the Visibility channel.\n@param BaseDamage - The base damage to apply, i.e. the damage at the origin.\n@param Origin - Epicenter of the damage area.\n@param DamageInnerRadius - Radius of the full damage area, from Origin\n@param DamageOuterRadius - Radius of the minimum damage area, from Origin\n@param DamageFalloff - Falloff exponent of damage from DamageInnerRadius to DamageOuterRadius\n@param DamageTypeClass - Class that describes the damage that was done.\n@param DamageCauser - Actor that actually caused the damage (e.g. the grenade that exploded)\n@param InstigatedByController - Controller that was responsible for causing this damage (e.g. player who threw the grenade)\n@param bFullDamage - if true, damage not scaled based on distance from Origin\n@param DamagePreventionChannel - Damage will not be applied to victim if there is something between the origin and the victim which blocks traces on this channel\n@return true if damage was applied to at least one actor."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_AreAnyListenersWithinRange()
	{
		struct GameplayStatics_eventAreAnyListenersWithinRange_Parms
		{
			UObject* WorldContextObject;
			FVector Location;
			float MaximumRange;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AreAnyListenersWithinRange"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04822401, 65535, sizeof(GameplayStatics_eventAreAnyListenersWithinRange_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, GameplayStatics_eventAreAnyListenersWithinRange_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, GameplayStatics_eventAreAnyListenersWithinRange_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, GameplayStatics_eventAreAnyListenersWithinRange_Parms), sizeof(bool), true);
			UProperty* NewProp_MaximumRange = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MaximumRange"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MaximumRange, GameplayStatics_eventAreAnyListenersWithinRange_Parms), 0x0000000000000080);
			UProperty* NewProp_Location = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Location"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Location, GameplayStatics_eventAreAnyListenersWithinRange_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, GameplayStatics_eventAreAnyListenersWithinRange_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Audio"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Determines if any audio listeners are within range of the specified location\n@param Location              The location to potentially play a sound at\n@param MaximumRange  The maximum distance away from Location that a listener can be\n@note This will always return false if there is no audio device, or the audio device is disabled."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_BeginDeferredActorSpawnFromClass()
	{
		struct GameplayStatics_eventBeginDeferredActorSpawnFromClass_Parms
		{
			UObject* WorldContextObject;
			TSubclassOf<AActor>  ActorClass;
			FTransform SpawnTransform;
			TEnumAsByte<ESpawnActorCollisionHandlingMethod> CollisionHandlingOverride;
			AActor* Owner;
			AActor* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BeginDeferredActorSpawnFromClass"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(GameplayStatics_eventBeginDeferredActorSpawnFromClass_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, GameplayStatics_eventBeginDeferredActorSpawnFromClass_Parms), 0x0000000000000580, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_Owner = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Owner"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Owner, GameplayStatics_eventBeginDeferredActorSpawnFromClass_Parms), 0x0000000000000080, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_CollisionHandlingOverride = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CollisionHandlingOverride"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(CollisionHandlingOverride, GameplayStatics_eventBeginDeferredActorSpawnFromClass_Parms), 0x0000000000000080, Z_Construct_UEnum_Engine_ESpawnActorCollisionHandlingMethod());
			UProperty* NewProp_SpawnTransform = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SpawnTransform"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SpawnTransform, GameplayStatics_eventBeginDeferredActorSpawnFromClass_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FTransform());
			UProperty* NewProp_ActorClass = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActorClass"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(ActorClass, GameplayStatics_eventBeginDeferredActorSpawnFromClass_Parms), 0x0004000000000080, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, GameplayStatics_eventBeginDeferredActorSpawnFromClass_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Spawning"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_CollisionHandlingOverride"), TEXT("Undefined"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Spawns an instance of an actor class, but does not automatically run its construction script."));
			MetaData->SetValue(ReturnFunction, TEXT("UnsafeDuringActorConstruction"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_BeginSpawningActorFromBlueprint()
	{
		struct GameplayStatics_eventBeginSpawningActorFromBlueprint_Parms
		{
			UObject* WorldContextObject;
			const UBlueprint* Blueprint;
			FTransform SpawnTransform;
			bool bNoCollisionFail;
			AActor* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BeginSpawningActorFromBlueprint"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(GameplayStatics_eventBeginSpawningActorFromBlueprint_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, GameplayStatics_eventBeginSpawningActorFromBlueprint_Parms), 0x0000000000000580, Z_Construct_UClass_AActor_NoRegister());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bNoCollisionFail, GameplayStatics_eventBeginSpawningActorFromBlueprint_Parms, bool);
			UProperty* NewProp_bNoCollisionFail = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bNoCollisionFail"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bNoCollisionFail, GameplayStatics_eventBeginSpawningActorFromBlueprint_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bNoCollisionFail, GameplayStatics_eventBeginSpawningActorFromBlueprint_Parms), sizeof(bool), true);
			UProperty* NewProp_SpawnTransform = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SpawnTransform"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SpawnTransform, GameplayStatics_eventBeginSpawningActorFromBlueprint_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FTransform());
			UProperty* NewProp_Blueprint = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Blueprint"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Blueprint, GameplayStatics_eventBeginSpawningActorFromBlueprint_Parms), 0x0000000000000082, Z_Construct_UClass_UBlueprint_NoRegister());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, GameplayStatics_eventBeginSpawningActorFromBlueprint_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Spawning"));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecatedFunction"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecationMessage"), TEXT("Use BeginSpawningActorFromClass"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Spawns an instance of a blueprint, but does not automatically run its construction script."));
			MetaData->SetValue(ReturnFunction, TEXT("UnsafeDuringActorConstruction"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_BeginSpawningActorFromClass()
	{
		struct GameplayStatics_eventBeginSpawningActorFromClass_Parms
		{
			UObject* WorldContextObject;
			TSubclassOf<AActor>  ActorClass;
			FTransform SpawnTransform;
			bool bNoCollisionFail;
			AActor* Owner;
			AActor* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BeginSpawningActorFromClass"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(GameplayStatics_eventBeginSpawningActorFromClass_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, GameplayStatics_eventBeginSpawningActorFromClass_Parms), 0x0000000000000580, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_Owner = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Owner"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Owner, GameplayStatics_eventBeginSpawningActorFromClass_Parms), 0x0000000000000080, Z_Construct_UClass_AActor_NoRegister());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bNoCollisionFail, GameplayStatics_eventBeginSpawningActorFromClass_Parms, bool);
			UProperty* NewProp_bNoCollisionFail = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bNoCollisionFail"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bNoCollisionFail, GameplayStatics_eventBeginSpawningActorFromClass_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bNoCollisionFail, GameplayStatics_eventBeginSpawningActorFromClass_Parms), sizeof(bool), true);
			UProperty* NewProp_SpawnTransform = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SpawnTransform"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SpawnTransform, GameplayStatics_eventBeginSpawningActorFromClass_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FTransform());
			UProperty* NewProp_ActorClass = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActorClass"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(ActorClass, GameplayStatics_eventBeginSpawningActorFromClass_Parms), 0x0004000000000080, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, GameplayStatics_eventBeginSpawningActorFromClass_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Spawning"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bNoCollisionFail"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("UnsafeDuringActorConstruction"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_BlueprintSuggestProjectileVelocity()
	{
		struct GameplayStatics_eventBlueprintSuggestProjectileVelocity_Parms
		{
			UObject* WorldContextObject;
			FVector TossVelocity;
			FVector StartLocation;
			FVector EndLocation;
			float LaunchSpeed;
			float OverrideGravityZ;
			TEnumAsByte<ESuggestProjVelocityTraceOption::Type> TraceOption;
			float CollisionRadius;
			bool bFavorHighArc;
			bool bDrawDebug;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BlueprintSuggestProjectileVelocity"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(GameplayStatics_eventBlueprintSuggestProjectileVelocity_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, GameplayStatics_eventBlueprintSuggestProjectileVelocity_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, GameplayStatics_eventBlueprintSuggestProjectileVelocity_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, GameplayStatics_eventBlueprintSuggestProjectileVelocity_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDrawDebug, GameplayStatics_eventBlueprintSuggestProjectileVelocity_Parms, bool);
			UProperty* NewProp_bDrawDebug = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bDrawDebug"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDrawDebug, GameplayStatics_eventBlueprintSuggestProjectileVelocity_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bDrawDebug, GameplayStatics_eventBlueprintSuggestProjectileVelocity_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bFavorHighArc, GameplayStatics_eventBlueprintSuggestProjectileVelocity_Parms, bool);
			UProperty* NewProp_bFavorHighArc = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bFavorHighArc"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bFavorHighArc, GameplayStatics_eventBlueprintSuggestProjectileVelocity_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bFavorHighArc, GameplayStatics_eventBlueprintSuggestProjectileVelocity_Parms), sizeof(bool), true);
			UProperty* NewProp_CollisionRadius = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CollisionRadius"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(CollisionRadius, GameplayStatics_eventBlueprintSuggestProjectileVelocity_Parms), 0x0000000000000080);
			UProperty* NewProp_TraceOption = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TraceOption"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(TraceOption, GameplayStatics_eventBlueprintSuggestProjectileVelocity_Parms), 0x0000000000000080, Z_Construct_UEnum_Engine_ESuggestProjVelocityTraceOption());
			UProperty* NewProp_OverrideGravityZ = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OverrideGravityZ"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(OverrideGravityZ, GameplayStatics_eventBlueprintSuggestProjectileVelocity_Parms), 0x0000000000000080);
			UProperty* NewProp_LaunchSpeed = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LaunchSpeed"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(LaunchSpeed, GameplayStatics_eventBlueprintSuggestProjectileVelocity_Parms), 0x0000000000000080);
			UProperty* NewProp_EndLocation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("EndLocation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(EndLocation, GameplayStatics_eventBlueprintSuggestProjectileVelocity_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_StartLocation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("StartLocation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(StartLocation, GameplayStatics_eventBlueprintSuggestProjectileVelocity_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_TossVelocity = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TossVelocity"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TossVelocity, GameplayStatics_eventBlueprintSuggestProjectileVelocity_Parms), 0x0000000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, GameplayStatics_eventBlueprintSuggestProjectileVelocity_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Game|Components|ProjectileMovement"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("SuggestProjectileVelocity"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Calculates an launch velocity for a projectile to hit a specified point.\n@param TossVelocity          (output) Result launch velocity.\n@param StartLocation         Intended launch location\n@param EndLocation           Desired landing location\n@param LaunchSpeed           Desired launch speed\n@param OverrideGravityZ      Optional gravity override.  0 means \"do not override\".\n@param TraceOption           Controls whether or not to validate a clear path by tracing along the calculated arc\n@param CollisionRadius       Radius of the projectile (assumed spherical), used when tracing\n@param bFavorHighArc         If true and there are 2 valid solutions, will return the higher arc.  If false, will favor the lower arc.\n@param bDrawDebug            When true, a debug arc is drawn (red for an invalid arc, green for a valid arc)\n@return                                      Returns false if there is no valid solution or the valid solutions are blocked.  Returns true otherwise."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_BreakHitResult()
	{
		struct GameplayStatics_eventBreakHitResult_Parms
		{
			FHitResult Hit;
			bool bBlockingHit;
			bool bInitialOverlap;
			float Time;
			FVector Location;
			FVector ImpactPoint;
			FVector Normal;
			FVector ImpactNormal;
			UPhysicalMaterial* PhysMat;
			AActor* HitActor;
			UPrimitiveComponent* HitComponent;
			FName HitBoneName;
			int32 HitItem;
			FVector TraceStart;
			FVector TraceEnd;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BreakHitResult"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(GameplayStatics_eventBreakHitResult_Parms));
			UProperty* NewProp_TraceEnd = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TraceEnd"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TraceEnd, GameplayStatics_eventBreakHitResult_Parms), 0x0000000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_TraceStart = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TraceStart"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TraceStart, GameplayStatics_eventBreakHitResult_Parms), 0x0000000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_HitItem = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("HitItem"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(HitItem, GameplayStatics_eventBreakHitResult_Parms), 0x0000000000000180);
			UProperty* NewProp_HitBoneName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("HitBoneName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(HitBoneName, GameplayStatics_eventBreakHitResult_Parms), 0x0000000000000180);
			UProperty* NewProp_HitComponent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("HitComponent"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(HitComponent, GameplayStatics_eventBreakHitResult_Parms), 0x0000000000080180, Z_Construct_UClass_UPrimitiveComponent_NoRegister());
			UProperty* NewProp_HitActor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("HitActor"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(HitActor, GameplayStatics_eventBreakHitResult_Parms), 0x0000000000000180, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_PhysMat = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PhysMat"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(PhysMat, GameplayStatics_eventBreakHitResult_Parms), 0x0000000000000180, Z_Construct_UClass_UPhysicalMaterial_NoRegister());
			UProperty* NewProp_ImpactNormal = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ImpactNormal"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ImpactNormal, GameplayStatics_eventBreakHitResult_Parms), 0x0000000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Normal = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Normal"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Normal, GameplayStatics_eventBreakHitResult_Parms), 0x0000000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_ImpactPoint = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ImpactPoint"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ImpactPoint, GameplayStatics_eventBreakHitResult_Parms), 0x0000000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Location = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Location"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Location, GameplayStatics_eventBreakHitResult_Parms), 0x0000000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Time = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Time"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Time, GameplayStatics_eventBreakHitResult_Parms), 0x0000000000000180);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bInitialOverlap, GameplayStatics_eventBreakHitResult_Parms, bool);
			UProperty* NewProp_bInitialOverlap = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bInitialOverlap"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bInitialOverlap, GameplayStatics_eventBreakHitResult_Parms), 0x0000000000000180, CPP_BOOL_PROPERTY_BITMASK(bInitialOverlap, GameplayStatics_eventBreakHitResult_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bBlockingHit, GameplayStatics_eventBreakHitResult_Parms, bool);
			UProperty* NewProp_bBlockingHit = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bBlockingHit"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bBlockingHit, GameplayStatics_eventBreakHitResult_Parms), 0x0000000000000180, CPP_BOOL_PROPERTY_BITMASK(bBlockingHit, GameplayStatics_eventBreakHitResult_Parms), sizeof(bool), true);
			UProperty* NewProp_Hit = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Hit"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Hit, GameplayStatics_eventBreakHitResult_Parms), 0x0000008008000182, Z_Construct_UScriptStruct_FHitResult());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Collision"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("NativeBreakFunc"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Extracts data from a HitResult.\n@param Hit                   The source HitResult.\n@param bBlockingHit  True if there was a blocking hit, false otherwise.\n@param bInitialOverlap True if the hit started in an initial overlap. In this case some other values should be interpreted differently. Time will be 0, ImpactPoint will equal Location, and normals will be equal and indicate a depenetration vector.\n@param Time                  'Time' of impact along trace direction ranging from [0.0 to 1.0) if there is a hit, indicating time between start and end. Equals 1.0 if there is no hit.\n@param Location              Location of the hit in world space. If this was a swept shape test, this is the location where we can place the shape in the world where it will not penetrate.\n@param Normal                Normal of the hit in world space, for the object that was swept (e.g. for a sphere trace this points towards the sphere's center). Equal to ImpactNormal for line tests.\n@param ImpactPoint   Location of the actual contact point of the trace shape with the surface of the hit object. Equal to Location in the case of an initial overlap.\n@param ImpactNormal  Normal of the hit in world space, for the object that was hit by the sweep.\n@param PhysMat               Physical material that was hit. Must set bReturnPhysicalMaterial to true in the query params for this to be returned.\n@param HitActor              Actor hit by the trace.\n@param HitComponent  PrimitiveComponent hit by the trace.\n@param HitBoneName   Name of the bone hit (valid only if we hit a skeletal mesh).\n@param HitItem               Primitive-specific data recording which item in the primitive was hit"));
			MetaData->SetValue(NewProp_HitComponent, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_CancelAsyncLoading()
	{
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CancelAsyncLoading"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Game"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Cancels all currently queued streaming packages"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_ClearSoundMixModifiers()
	{
		struct GameplayStatics_eventClearSoundMixModifiers_Parms
		{
			UObject* WorldContextObject;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ClearSoundMixModifiers"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(GameplayStatics_eventClearSoundMixModifiers_Parms));
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, GameplayStatics_eventClearSoundMixModifiers_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Audio"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Clear all sound mix modifiers from the audio system *"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_CreatePlayer()
	{
		struct GameplayStatics_eventCreatePlayer_Parms
		{
			UObject* WorldContextObject;
			int32 ControllerId;
			bool bSpawnPawn;
			APlayerController* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CreatePlayer"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(GameplayStatics_eventCreatePlayer_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, GameplayStatics_eventCreatePlayer_Parms), 0x0000000000000580, Z_Construct_UClass_APlayerController_NoRegister());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSpawnPawn, GameplayStatics_eventCreatePlayer_Parms, bool);
			UProperty* NewProp_bSpawnPawn = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bSpawnPawn"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSpawnPawn, GameplayStatics_eventCreatePlayer_Parms), 0x0000040000000080, CPP_BOOL_PROPERTY_BITMASK(bSpawnPawn, GameplayStatics_eventCreatePlayer_Parms), sizeof(bool), true);
			UProperty* NewProp_ControllerId = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ControllerId"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ControllerId, GameplayStatics_eventCreatePlayer_Parms), 0x0000000000000080);
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, GameplayStatics_eventCreatePlayer_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AdvancedDisplay"), TEXT("2"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Game"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bSpawnPawn"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_ControllerId"), TEXT("-1"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Create a new player for this game.\n@param ControllerId         The ID of the controller that the should control the newly created player.  A value of -1 specifies to use the next available ID\n@param bSpawnPawn           Whether a pawn should be spawned immediately. If false a pawn will not be created until transition to the next map."));
			MetaData->SetValue(ReturnFunction, TEXT("UnsafeDuringActorConstruction"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_CreateSaveGameObject()
	{
		struct GameplayStatics_eventCreateSaveGameObject_Parms
		{
			TSubclassOf<USaveGame>  SaveGameClass;
			USaveGame* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CreateSaveGameObject"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(GameplayStatics_eventCreateSaveGameObject_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, GameplayStatics_eventCreateSaveGameObject_Parms), 0x0000000000000580, Z_Construct_UClass_USaveGame_NoRegister());
			UProperty* NewProp_SaveGameClass = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SaveGameClass"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(SaveGameClass, GameplayStatics_eventCreateSaveGameObject_Parms), 0x0004000000000080, Z_Construct_UClass_USaveGame_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Game"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Create a new, empty SaveGame object to set data on and then pass to SaveGameToSlot.\n@param  SaveGameClass   Class of SaveGame to create\n@return                                 New SaveGame object to write data to"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_CreateSaveGameObjectFromBlueprint()
	{
		struct GameplayStatics_eventCreateSaveGameObjectFromBlueprint_Parms
		{
			UBlueprint* SaveGameBlueprint;
			USaveGame* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CreateSaveGameObjectFromBlueprint"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(GameplayStatics_eventCreateSaveGameObjectFromBlueprint_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, GameplayStatics_eventCreateSaveGameObjectFromBlueprint_Parms), 0x0000000000000580, Z_Construct_UClass_USaveGame_NoRegister());
			UProperty* NewProp_SaveGameBlueprint = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SaveGameBlueprint"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(SaveGameBlueprint, GameplayStatics_eventCreateSaveGameObjectFromBlueprint_Parms), 0x0000000000000080, Z_Construct_UClass_UBlueprint_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Game"));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecatedFunction"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecationMessage"), TEXT("Use GameplayStatics.CreateSaveGameObject instead."));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Create a new, empty SaveGame object to set data on and then pass to SaveGameToSlot.\n@param  SaveGameBlueprint       Blueprint of SaveGame to create\n@return                                         New SaveGame object to write data to"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_DeactivateReverbEffect()
	{
		struct GameplayStatics_eventDeactivateReverbEffect_Parms
		{
			UObject* WorldContextObject;
			FName TagName;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DeactivateReverbEffect"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(GameplayStatics_eventDeactivateReverbEffect_Parms));
			UProperty* NewProp_TagName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TagName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(TagName, GameplayStatics_eventDeactivateReverbEffect_Parms), 0x0000000000000080);
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, GameplayStatics_eventDeactivateReverbEffect_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Audio"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Deactivates a Reverb Effect not applied by a volume\n\n@param TagName Tag associated with Reverb Effect to remove"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_DeleteGameInSlot()
	{
		struct GameplayStatics_eventDeleteGameInSlot_Parms
		{
			FString SlotName;
			int32 UserIndex;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DeleteGameInSlot"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(GameplayStatics_eventDeleteGameInSlot_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, GameplayStatics_eventDeleteGameInSlot_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, GameplayStatics_eventDeleteGameInSlot_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, GameplayStatics_eventDeleteGameInSlot_Parms), sizeof(bool), true);
			UProperty* NewProp_UserIndex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UserIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(UserIndex, GameplayStatics_eventDeleteGameInSlot_Parms), 0x0000000000000082);
			UProperty* NewProp_SlotName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SlotName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(SlotName, GameplayStatics_eventDeleteGameInSlot_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Game"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Delete a save game in a particular slot.\n     @param SlotName                 Name of save game slot to save to.\n @param UserIndex            For some platforms, master user index to identify the user doing the saving.\n @return True if a file was actually able to be deleted. use DoesSaveGameExist to distinguish between delete failures and failure due to file not existing."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_DeprojectScreenToWorld()
	{
		struct GameplayStatics_eventDeprojectScreenToWorld_Parms
		{
			APlayerController* Player;
			FVector2D ScreenPosition;
			FVector WorldPosition;
			FVector WorldDirection;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DeprojectScreenToWorld"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(GameplayStatics_eventDeprojectScreenToWorld_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, GameplayStatics_eventDeprojectScreenToWorld_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, GameplayStatics_eventDeprojectScreenToWorld_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, GameplayStatics_eventDeprojectScreenToWorld_Parms), sizeof(bool), true);
			UProperty* NewProp_WorldDirection = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldDirection"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(WorldDirection, GameplayStatics_eventDeprojectScreenToWorld_Parms), 0x0000000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_WorldPosition = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldPosition"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(WorldPosition, GameplayStatics_eventDeprojectScreenToWorld_Parms), 0x0000000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_ScreenPosition = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ScreenPosition"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ScreenPosition, GameplayStatics_eventDeprojectScreenToWorld_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_Player = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Player"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Player, GameplayStatics_eventDeprojectScreenToWorld_Parms), 0x0000000000000080, Z_Construct_UClass_APlayerController_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("unproject"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Transforms the given 2D screen space coordinate into a 3D world-space point and direction\n@param Player                        Deproject using this player's view.\n@param ScreenPosition        2D screen space to deproject\n@param WorldPosition         (out) Corresponding 3D position in world space\n@param WorldDirection        (out) World space direction vector away from the camera at the given 2d poiunt"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_DoesSaveGameExist()
	{
		struct GameplayStatics_eventDoesSaveGameExist_Parms
		{
			FString SlotName;
			int32 UserIndex;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DoesSaveGameExist"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(GameplayStatics_eventDoesSaveGameExist_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, GameplayStatics_eventDoesSaveGameExist_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, GameplayStatics_eventDoesSaveGameExist_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, GameplayStatics_eventDoesSaveGameExist_Parms), sizeof(bool), true);
			UProperty* NewProp_UserIndex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UserIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(UserIndex, GameplayStatics_eventDoesSaveGameExist_Parms), 0x0000000000000082);
			UProperty* NewProp_SlotName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SlotName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(SlotName, GameplayStatics_eventDoesSaveGameExist_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Game"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("See if a save game exists with the specified name.\n@param SlotName                 Name of save game slot.\n@param UserIndex            For some platforms, master user index to identify the user doing the saving."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_EnableLiveStreaming()
	{
		struct GameplayStatics_eventEnableLiveStreaming_Parms
		{
			bool Enable;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EnableLiveStreaming"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(GameplayStatics_eventEnableLiveStreaming_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(Enable, GameplayStatics_eventEnableLiveStreaming_Parms, bool);
			UProperty* NewProp_Enable = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Enable"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Enable, GameplayStatics_eventEnableLiveStreaming_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(Enable, GameplayStatics_eventEnableLiveStreaming_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Game"));
			MetaData->SetValue(ReturnFunction, TEXT("Enable"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Toggle live DVR streaming.\n@param Enable                        If true enable streaming, otherwise disable."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_FinishSpawningActor()
	{
		struct GameplayStatics_eventFinishSpawningActor_Parms
		{
			AActor* Actor;
			FTransform SpawnTransform;
			AActor* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FinishSpawningActor"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(GameplayStatics_eventFinishSpawningActor_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, GameplayStatics_eventFinishSpawningActor_Parms), 0x0000000000000580, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_SpawnTransform = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SpawnTransform"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SpawnTransform, GameplayStatics_eventFinishSpawningActor_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FTransform());
			UProperty* NewProp_Actor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Actor"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Actor, GameplayStatics_eventFinishSpawningActor_Parms), 0x0000000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Spawning"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("'Finish' spawning an actor.  This will run the construction script."));
			MetaData->SetValue(ReturnFunction, TEXT("UnsafeDuringActorConstruction"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_FlushLevelStreaming()
	{
		struct GameplayStatics_eventFlushLevelStreaming_Parms
		{
			UObject* WorldContextObject;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FlushLevelStreaming"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(GameplayStatics_eventFlushLevelStreaming_Parms));
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, GameplayStatics_eventFlushLevelStreaming_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Game"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Flushes level streaming in blocking fashion and returns when all sub-levels are loaded / visible / hidden"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_GetAccurateRealTime()
	{
		struct GameplayStatics_eventGetAccurateRealTime_Parms
		{
			UObject* WorldContextObject;
			int32 Seconds;
			float PartialSeconds;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetAccurateRealTime"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(GameplayStatics_eventGetAccurateRealTime_Parms));
			UProperty* NewProp_PartialSeconds = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PartialSeconds"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(PartialSeconds, GameplayStatics_eventGetAccurateRealTime_Parms), 0x0000000000000180);
			UProperty* NewProp_Seconds = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Seconds"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Seconds, GameplayStatics_eventGetAccurateRealTime_Parms), 0x0000000000000180);
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, GameplayStatics_eventGetAccurateRealTime_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Time"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_GetActorArrayAverageLocation()
	{
		struct GameplayStatics_eventGetActorArrayAverageLocation_Parms
		{
			TArray<AActor*> Actors;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetActorArrayAverageLocation"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(GameplayStatics_eventGetActorArrayAverageLocation_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, GameplayStatics_eventGetActorArrayAverageLocation_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Actors = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Actors"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Actors, GameplayStatics_eventGetActorArrayAverageLocation_Parms), 0x0000000008000182);
			UProperty* NewProp_Actors_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Actors, TEXT("Actors"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Transformation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Find the average location (centroid) of an array of Actors"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_GetActorArrayBounds()
	{
		struct GameplayStatics_eventGetActorArrayBounds_Parms
		{
			TArray<AActor*> Actors;
			bool bOnlyCollidingComponents;
			FVector Center;
			FVector BoxExtent;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetActorArrayBounds"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(GameplayStatics_eventGetActorArrayBounds_Parms));
			UProperty* NewProp_BoxExtent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("BoxExtent"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(BoxExtent, GameplayStatics_eventGetActorArrayBounds_Parms), 0x0000000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Center = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Center"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Center, GameplayStatics_eventGetActorArrayBounds_Parms), 0x0000000000000180, Z_Construct_UScriptStruct_FVector());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOnlyCollidingComponents, GameplayStatics_eventGetActorArrayBounds_Parms, bool);
			UProperty* NewProp_bOnlyCollidingComponents = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bOnlyCollidingComponents"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOnlyCollidingComponents, GameplayStatics_eventGetActorArrayBounds_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bOnlyCollidingComponents, GameplayStatics_eventGetActorArrayBounds_Parms), sizeof(bool), true);
			UProperty* NewProp_Actors = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Actors"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Actors, GameplayStatics_eventGetActorArrayBounds_Parms), 0x0000000008000182);
			UProperty* NewProp_Actors_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Actors, TEXT("Actors"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Collision"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Bind the bounds of an array of Actors"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_GetAllActorsOfClass()
	{
		struct GameplayStatics_eventGetAllActorsOfClass_Parms
		{
			UObject* WorldContextObject;
			TSubclassOf<AActor>  ActorClass;
			TArray<AActor*> OutActors;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetAllActorsOfClass"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(GameplayStatics_eventGetAllActorsOfClass_Parms));
			UProperty* NewProp_OutActors = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutActors"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(OutActors, GameplayStatics_eventGetAllActorsOfClass_Parms), 0x0000000000000180);
			UProperty* NewProp_OutActors_Inner = new(EC_InternalUseOnlyConstructor, NewProp_OutActors, TEXT("OutActors"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_ActorClass = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActorClass"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(ActorClass, GameplayStatics_eventGetAllActorsOfClass_Parms), 0x0004000000000080, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, GameplayStatics_eventGetAllActorsOfClass_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities"));
			MetaData->SetValue(ReturnFunction, TEXT("DeterminesOutputType"), TEXT("ActorClass"));
			MetaData->SetValue(ReturnFunction, TEXT("DynamicOutputParam"), TEXT("OutActors"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Find all Actors in the world of the specified class.\nThis is a slow operation, use with caution e.g. do not use every frame.\n@param  ActorClass      Class of Actor to find. Must be specified or result array will be empty.\n@param  OutActors       Output array of Actors of the specified class."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_GetAllActorsWithInterface()
	{
		struct GameplayStatics_eventGetAllActorsWithInterface_Parms
		{
			UObject* WorldContextObject;
			TSubclassOf<UInterface>  Interface;
			TArray<AActor*> OutActors;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetAllActorsWithInterface"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(GameplayStatics_eventGetAllActorsWithInterface_Parms));
			UProperty* NewProp_OutActors = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutActors"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(OutActors, GameplayStatics_eventGetAllActorsWithInterface_Parms), 0x0000000000000180);
			UProperty* NewProp_OutActors_Inner = new(EC_InternalUseOnlyConstructor, NewProp_OutActors, TEXT("OutActors"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_Interface = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Interface"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(Interface, GameplayStatics_eventGetAllActorsWithInterface_Parms), 0x0004000000000080, UInterface::StaticClass());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, GameplayStatics_eventGetAllActorsWithInterface_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities"));
			MetaData->SetValue(ReturnFunction, TEXT("DeterminesOutputType"), TEXT("Interface"));
			MetaData->SetValue(ReturnFunction, TEXT("DynamicOutputParam"), TEXT("OutActors"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Find all Actors in the world with the specified interface.\nThis is a slow operation, use with caution e.g. do not use every frame.\n@param  Interface       Interface to find. Must be specified or result array will be empty.\n@param  OutActors       Output array of Actors of the specified class."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_GetAudioTimeSeconds()
	{
		struct GameplayStatics_eventGetAudioTimeSeconds_Parms
		{
			UObject* WorldContextObject;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetAudioTimeSeconds"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(GameplayStatics_eventGetAudioTimeSeconds_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, GameplayStatics_eventGetAudioTimeSeconds_Parms), 0x0000000000000580);
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, GameplayStatics_eventGetAudioTimeSeconds_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Time"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns time in seconds since world was brought up for play, IS stopped when game pauses, NOT dilated/clamped."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_GetCurrentLevelName()
	{
		struct GameplayStatics_eventGetCurrentLevelName_Parms
		{
			UObject* WorldContextObject;
			bool bRemovePrefixString;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetCurrentLevelName"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(GameplayStatics_eventGetCurrentLevelName_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, GameplayStatics_eventGetCurrentLevelName_Parms), 0x0000000000000580);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bRemovePrefixString, GameplayStatics_eventGetCurrentLevelName_Parms, bool);
			UProperty* NewProp_bRemovePrefixString = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bRemovePrefixString"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bRemovePrefixString, GameplayStatics_eventGetCurrentLevelName_Parms), 0x0000040000000080, CPP_BOOL_PROPERTY_BITMASK(bRemovePrefixString, GameplayStatics_eventGetCurrentLevelName_Parms), sizeof(bool), true);
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, GameplayStatics_eventGetCurrentLevelName_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AdvancedDisplay"), TEXT("1"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Game"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bRemovePrefixString"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get the name of the currently-open level.\n\n@param bRemovePrefixString    remove any streaming- or editor- added prefixes from the level name."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_GetGameInstance()
	{
		struct GameplayStatics_eventGetGameInstance_Parms
		{
			UObject* WorldContextObject;
			UGameInstance* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetGameInstance"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(GameplayStatics_eventGetGameInstance_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, GameplayStatics_eventGetGameInstance_Parms), 0x0000000000000580, Z_Construct_UClass_UGameInstance_NoRegister());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, GameplayStatics_eventGetGameInstance_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Game"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the game instance object"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_GetGameMode()
	{
		struct GameplayStatics_eventGetGameMode_Parms
		{
			UObject* WorldContextObject;
			AGameMode* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetGameMode"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(GameplayStatics_eventGetGameMode_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, GameplayStatics_eventGetGameMode_Parms), 0x0000000000000580, Z_Construct_UClass_AGameMode_NoRegister());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, GameplayStatics_eventGetGameMode_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Game"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the current GameMode or NULL if the GameMode can't be retrieved"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_GetGameState()
	{
		struct GameplayStatics_eventGetGameState_Parms
		{
			UObject* WorldContextObject;
			AGameState* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetGameState"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(GameplayStatics_eventGetGameState_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, GameplayStatics_eventGetGameState_Parms), 0x0000000000000580, Z_Construct_UClass_AGameState_NoRegister());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, GameplayStatics_eventGetGameState_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Game"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_GetGlobalTimeDilation()
	{
		struct GameplayStatics_eventGetGlobalTimeDilation_Parms
		{
			UObject* WorldContextObject;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetGlobalTimeDilation"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(GameplayStatics_eventGetGlobalTimeDilation_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, GameplayStatics_eventGetGlobalTimeDilation_Parms), 0x0000000000000580);
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, GameplayStatics_eventGetGlobalTimeDilation_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Time"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the global time dilation\n@param       TimeDilation    value to set the global time dilation to"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_GetIntOption()
	{
		struct GameplayStatics_eventGetIntOption_Parms
		{
			FString Options;
			FString Key;
			int32 DefaultValue;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetIntOption"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(GameplayStatics_eventGetIntOption_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, GameplayStatics_eventGetIntOption_Parms), 0x0000000000000580);
			UProperty* NewProp_DefaultValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DefaultValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(DefaultValue, GameplayStatics_eventGetIntOption_Parms), 0x0000000000000080);
			UProperty* NewProp_Key = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Key"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Key, GameplayStatics_eventGetIntOption_Parms), 0x0000000000000080);
			UProperty* NewProp_Options = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Options"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Options, GameplayStatics_eventGetIntOption_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Game Options"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Find an option in the options string and return it as an integer.\n@param Options               The string containing the options.\n@param Key                   The key to find the value of in Options.\n@return                              The value associated with Key as an integer if Key found in Options string, otherwise DefaultValue."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_GetKeyValue()
	{
		struct GameplayStatics_eventGetKeyValue_Parms
		{
			FString Pair;
			FString Key;
			FString Value;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetKeyValue"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(GameplayStatics_eventGetKeyValue_Parms));
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Value, GameplayStatics_eventGetKeyValue_Parms), 0x0000000000000180);
			UProperty* NewProp_Key = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Key"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Key, GameplayStatics_eventGetKeyValue_Parms), 0x0000000000000180);
			UProperty* NewProp_Pair = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Pair"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Pair, GameplayStatics_eventGetKeyValue_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Game Options"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Break up a key=value pair into its key and value.\n@param Pair                  The string containing a pair to split apart.\n@param Key                   (out) Key portion of Pair. If no = in string will be the same as Pair.\n@param Value                 (out) Value portion of Pair. If no = in string will be empty."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_GetObjectClass()
	{
		struct GameplayStatics_eventGetObjectClass_Parms
		{
			const UObject* Object;
			UClass* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetObjectClass"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(GameplayStatics_eventGetObjectClass_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(ReturnValue, GameplayStatics_eventGetObjectClass_Parms), 0x0000000000000580, Z_Construct_UClass_UObject_NoRegister());
			UProperty* NewProp_Object = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Object"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Object, GameplayStatics_eventGetObjectClass_Parms), 0x0000000000000082, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities"));
			MetaData->SetValue(ReturnFunction, TEXT("DeterminesOutputType"), TEXT("Object"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("GetClass"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_GetPlatformName()
	{
		struct GameplayStatics_eventGetPlatformName_Parms
		{
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetPlatformName"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(GameplayStatics_eventGetPlatformName_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, GameplayStatics_eventGetPlatformName_Parms), 0x0000000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Game"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the string name of the current platform, to perform different behavior based on platform.\n(Platform names include Windows, Mac, IOS, Android, PS4, XboxOne, HTML5, Linux)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_GetPlayerCameraManager()
	{
		struct GameplayStatics_eventGetPlayerCameraManager_Parms
		{
			UObject* WorldContextObject;
			int32 PlayerIndex;
			APlayerCameraManager* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetPlayerCameraManager"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(GameplayStatics_eventGetPlayerCameraManager_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, GameplayStatics_eventGetPlayerCameraManager_Parms), 0x0000000000000580, Z_Construct_UClass_APlayerCameraManager_NoRegister());
			UProperty* NewProp_PlayerIndex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PlayerIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(PlayerIndex, GameplayStatics_eventGetPlayerCameraManager_Parms), 0x0000000000000080);
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, GameplayStatics_eventGetPlayerCameraManager_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Game"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the player's camera manager for the specified player index"));
			MetaData->SetValue(ReturnFunction, TEXT("UnsafeDuringActorConstruction"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_GetPlayerCharacter()
	{
		struct GameplayStatics_eventGetPlayerCharacter_Parms
		{
			UObject* WorldContextObject;
			int32 PlayerIndex;
			ACharacter* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetPlayerCharacter"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(GameplayStatics_eventGetPlayerCharacter_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, GameplayStatics_eventGetPlayerCharacter_Parms), 0x0000000000000580, Z_Construct_UClass_ACharacter_NoRegister());
			UProperty* NewProp_PlayerIndex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PlayerIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(PlayerIndex, GameplayStatics_eventGetPlayerCharacter_Parms), 0x0000000000000080);
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, GameplayStatics_eventGetPlayerCharacter_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Game"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the player character (NULL if the player pawn doesn't exist OR is not a character) at the specified player index"));
			MetaData->SetValue(ReturnFunction, TEXT("UnsafeDuringActorConstruction"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_GetPlayerController()
	{
		struct GameplayStatics_eventGetPlayerController_Parms
		{
			UObject* WorldContextObject;
			int32 PlayerIndex;
			APlayerController* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetPlayerController"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(GameplayStatics_eventGetPlayerController_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, GameplayStatics_eventGetPlayerController_Parms), 0x0000000000000580, Z_Construct_UClass_APlayerController_NoRegister());
			UProperty* NewProp_PlayerIndex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PlayerIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(PlayerIndex, GameplayStatics_eventGetPlayerController_Parms), 0x0000000000000080);
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, GameplayStatics_eventGetPlayerController_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Game"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the player controller at the specified player index"));
			MetaData->SetValue(ReturnFunction, TEXT("UnsafeDuringActorConstruction"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_GetPlayerPawn()
	{
		struct GameplayStatics_eventGetPlayerPawn_Parms
		{
			UObject* WorldContextObject;
			int32 PlayerIndex;
			APawn* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetPlayerPawn"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(GameplayStatics_eventGetPlayerPawn_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, GameplayStatics_eventGetPlayerPawn_Parms), 0x0000000000000580, Z_Construct_UClass_APawn_NoRegister());
			UProperty* NewProp_PlayerIndex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PlayerIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(PlayerIndex, GameplayStatics_eventGetPlayerPawn_Parms), 0x0000000000000080);
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, GameplayStatics_eventGetPlayerPawn_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Game"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the player pawn at the specified player index"));
			MetaData->SetValue(ReturnFunction, TEXT("UnsafeDuringActorConstruction"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_GetRealTimeSeconds()
	{
		struct GameplayStatics_eventGetRealTimeSeconds_Parms
		{
			UObject* WorldContextObject;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetRealTimeSeconds"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(GameplayStatics_eventGetRealTimeSeconds_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, GameplayStatics_eventGetRealTimeSeconds_Parms), 0x0000000000000580);
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, GameplayStatics_eventGetRealTimeSeconds_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Time"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns time in seconds since world was brought up for play, does NOT stop when game pauses, NOT dilated/clamped"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_GetStreamingLevel()
	{
		struct GameplayStatics_eventGetStreamingLevel_Parms
		{
			UObject* WorldContextObject;
			FName PackageName;
			ULevelStreaming* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetStreamingLevel"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(GameplayStatics_eventGetStreamingLevel_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, GameplayStatics_eventGetStreamingLevel_Parms), 0x0000000000000580, Z_Construct_UClass_ULevelStreaming_NoRegister());
			UProperty* NewProp_PackageName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PackageName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(PackageName, GameplayStatics_eventGetStreamingLevel_Parms), 0x0000000000000080);
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, GameplayStatics_eventGetStreamingLevel_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Game"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns level streaming object with specified level package name"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_GetSurfaceType()
	{
		struct GameplayStatics_eventGetSurfaceType_Parms
		{
			FHitResult Hit;
			TEnumAsByte<EPhysicalSurface> ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetSurfaceType"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(GameplayStatics_eventGetSurfaceType_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(ReturnValue, GameplayStatics_eventGetSurfaceType_Parms), 0x0000000000000580, Z_Construct_UEnum_Engine_EPhysicalSurface());
			UProperty* NewProp_Hit = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Hit"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Hit, GameplayStatics_eventGetSurfaceType_Parms), 0x0000008008000182, Z_Construct_UScriptStruct_FHitResult());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Collision"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the EPhysicalSurface type of the given Hit.\nTo edit surface type for your project, use ProjectSettings/Physics/PhysicalSurface section"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_GetWorldDeltaSeconds()
	{
		struct GameplayStatics_eventGetWorldDeltaSeconds_Parms
		{
			UObject* WorldContextObject;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetWorldDeltaSeconds"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(GameplayStatics_eventGetWorldDeltaSeconds_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, GameplayStatics_eventGetWorldDeltaSeconds_Parms), 0x0000000000000580);
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, GameplayStatics_eventGetWorldDeltaSeconds_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Time"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the frame delta time in seconds adjusted by e.g. time dilation."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_GetWorldOriginLocation()
	{
		struct FIntVector
		{
			int32 X;
			int32 Y;
			int32 Z;
		};

		struct GameplayStatics_eventGetWorldOriginLocation_Parms
		{
			UObject* WorldContextObject;
			FIntVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetWorldOriginLocation"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(GameplayStatics_eventGetWorldOriginLocation_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, GameplayStatics_eventGetWorldOriginLocation_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FIntVector());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, GameplayStatics_eventGetWorldOriginLocation_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Game"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns world origin current location"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_GrassOverlappingSphereCount()
	{
		struct GameplayStatics_eventGrassOverlappingSphereCount_Parms
		{
			UObject* WorldContextObject;
			const UStaticMesh* StaticMesh;
			FVector CenterPosition;
			float Radius;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GrassOverlappingSphereCount"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04822401, 65535, sizeof(GameplayStatics_eventGrassOverlappingSphereCount_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, GameplayStatics_eventGrassOverlappingSphereCount_Parms), 0x0000000000000580);
			UProperty* NewProp_Radius = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Radius"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Radius, GameplayStatics_eventGrassOverlappingSphereCount_Parms), 0x0000000000000080);
			UProperty* NewProp_CenterPosition = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CenterPosition"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(CenterPosition, GameplayStatics_eventGrassOverlappingSphereCount_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_StaticMesh = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("StaticMesh"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(StaticMesh, GameplayStatics_eventGrassOverlappingSphereCount_Parms), 0x0000000000000082, Z_Construct_UClass_UStaticMesh_NoRegister());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, GameplayStatics_eventGrassOverlappingSphereCount_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Foliage"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Counts how many grass foliage instances overlap a given sphere.\n\n@param        Mesh                    The static mesh we are interested in counting\n@param        CenterPosition  The center position of the sphere\n@param        Radius                  The radius of the sphere.\n\n@return number of foliage instances with their mesh set to Mesh that overlap the sphere"));
			MetaData->SetValue(ReturnFunction, TEXT("UnsafeDuringActorConstruction"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_HasOption()
	{
		struct GameplayStatics_eventHasOption_Parms
		{
			FString Options;
			FString InKey;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("HasOption"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(GameplayStatics_eventHasOption_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, GameplayStatics_eventHasOption_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, GameplayStatics_eventHasOption_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, GameplayStatics_eventHasOption_Parms), sizeof(bool), true);
			UProperty* NewProp_InKey = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InKey"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(InKey, GameplayStatics_eventHasOption_Parms), 0x0000000000000080);
			UProperty* NewProp_Options = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Options"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Options, GameplayStatics_eventHasOption_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Game Options"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns whether a key exists in an options string.\n@param Options               The string containing the options.\n@param Key                   The key to determine if it exists in Options.\n@return                              Whether Key was found in Options."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_IsGamePaused()
	{
		struct GameplayStatics_eventIsGamePaused_Parms
		{
			UObject* WorldContextObject;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsGamePaused"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(GameplayStatics_eventIsGamePaused_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, GameplayStatics_eventIsGamePaused_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, GameplayStatics_eventIsGamePaused_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, GameplayStatics_eventIsGamePaused_Parms), sizeof(bool), true);
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, GameplayStatics_eventIsGamePaused_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Game"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the game's paused state\n@return      Whether the game is currently paused or not"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_LoadGameFromSlot()
	{
		struct GameplayStatics_eventLoadGameFromSlot_Parms
		{
			FString SlotName;
			int32 UserIndex;
			USaveGame* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LoadGameFromSlot"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(GameplayStatics_eventLoadGameFromSlot_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, GameplayStatics_eventLoadGameFromSlot_Parms), 0x0000000000000580, Z_Construct_UClass_USaveGame_NoRegister());
			UProperty* NewProp_UserIndex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UserIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(UserIndex, GameplayStatics_eventLoadGameFromSlot_Parms), 0x0000000000000082);
			UProperty* NewProp_SlotName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SlotName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(SlotName, GameplayStatics_eventLoadGameFromSlot_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Game"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Save the contents of the SaveGameObject to a slot.\n@param SlotName                 Name of save game slot to save to.\n@param UserIndex            For some platforms, master user index to identify the user doing the saving.\n@return SaveGameObject  Object containing loaded game state (NULL if load fails)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_LoadStreamLevel()
	{
		struct GameplayStatics_eventLoadStreamLevel_Parms
		{
			UObject* WorldContextObject;
			FName LevelName;
			bool bMakeVisibleAfterLoad;
			bool bShouldBlockOnLoad;
			FLatentActionInfo LatentInfo;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LoadStreamLevel"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(GameplayStatics_eventLoadStreamLevel_Parms));
			UProperty* NewProp_LatentInfo = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LatentInfo"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LatentInfo, GameplayStatics_eventLoadStreamLevel_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FLatentActionInfo());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bShouldBlockOnLoad, GameplayStatics_eventLoadStreamLevel_Parms, bool);
			UProperty* NewProp_bShouldBlockOnLoad = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bShouldBlockOnLoad"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bShouldBlockOnLoad, GameplayStatics_eventLoadStreamLevel_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bShouldBlockOnLoad, GameplayStatics_eventLoadStreamLevel_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bMakeVisibleAfterLoad, GameplayStatics_eventLoadStreamLevel_Parms, bool);
			UProperty* NewProp_bMakeVisibleAfterLoad = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bMakeVisibleAfterLoad"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bMakeVisibleAfterLoad, GameplayStatics_eventLoadStreamLevel_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bMakeVisibleAfterLoad, GameplayStatics_eventLoadStreamLevel_Parms), sizeof(bool), true);
			UProperty* NewProp_LevelName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LevelName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(LevelName, GameplayStatics_eventLoadStreamLevel_Parms), 0x0000000000000080);
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, GameplayStatics_eventLoadStreamLevel_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Game"));
			MetaData->SetValue(ReturnFunction, TEXT("Latent"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("LatentInfo"), TEXT("LatentInfo"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Stream the level with the LevelName ; Calling again before it finishes has no effect"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_OpenLevel()
	{
		struct GameplayStatics_eventOpenLevel_Parms
		{
			UObject* WorldContextObject;
			FName LevelName;
			bool bAbsolute;
			FString Options;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OpenLevel"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(GameplayStatics_eventOpenLevel_Parms));
			UProperty* NewProp_Options = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Options"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Options, GameplayStatics_eventOpenLevel_Parms), 0x0000040000000080);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAbsolute, GameplayStatics_eventOpenLevel_Parms, bool);
			UProperty* NewProp_bAbsolute = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bAbsolute"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAbsolute, GameplayStatics_eventOpenLevel_Parms), 0x0000040000000080, CPP_BOOL_PROPERTY_BITMASK(bAbsolute, GameplayStatics_eventOpenLevel_Parms), sizeof(bool), true);
			UProperty* NewProp_LevelName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LevelName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(LevelName, GameplayStatics_eventOpenLevel_Parms), 0x0000000000000080);
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, GameplayStatics_eventOpenLevel_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AdvancedDisplay"), TEXT("2"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Game"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bAbsolute"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Travel to another level\n\n@param       LevelName                       the level to open\n@param       bAbsolute                       if true options are reset, if false options are carried over from current level\n@param       Options                         a string of options to use for the travel URL"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_ParseOption()
	{
		struct GameplayStatics_eventParseOption_Parms
		{
			FString Options;
			FString Key;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ParseOption"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(GameplayStatics_eventParseOption_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, GameplayStatics_eventParseOption_Parms), 0x0000000000000580);
			UProperty* NewProp_Key = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Key"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Key, GameplayStatics_eventParseOption_Parms), 0x0000000000000080);
			UProperty* NewProp_Options = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Options"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Options, GameplayStatics_eventParseOption_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Game Options"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Find an option in the options string and return it.\n@param Options               The string containing the options.\n@param Key                   The key to find the value of in Options.\n@return                              The value associated with Key if Key found in Options string."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_PlayDialogue2D()
	{
		struct GameplayStatics_eventPlayDialogue2D_Parms
		{
			UObject* WorldContextObject;
			UDialogueWave* Dialogue;
			FDialogueContext Context;
			float VolumeMultiplier;
			float PitchMultiplier;
			float StartTime;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PlayDialogue2D"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04422409, 65535, sizeof(GameplayStatics_eventPlayDialogue2D_Parms));
			UProperty* NewProp_StartTime = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("StartTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(StartTime, GameplayStatics_eventPlayDialogue2D_Parms), 0x0000040000000080);
			UProperty* NewProp_PitchMultiplier = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PitchMultiplier"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(PitchMultiplier, GameplayStatics_eventPlayDialogue2D_Parms), 0x0000040000000080);
			UProperty* NewProp_VolumeMultiplier = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VolumeMultiplier"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(VolumeMultiplier, GameplayStatics_eventPlayDialogue2D_Parms), 0x0000040000000080);
			UProperty* NewProp_Context = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Context"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Context, GameplayStatics_eventPlayDialogue2D_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FDialogueContext());
			UProperty* NewProp_Dialogue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Dialogue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Dialogue, GameplayStatics_eventPlayDialogue2D_Parms), 0x0000000000000080, Z_Construct_UClass_UDialogueWave_NoRegister());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, GameplayStatics_eventPlayDialogue2D_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AdvancedDisplay"), TEXT("3"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Audio"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_PitchMultiplier"), TEXT("1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_StartTime"), TEXT("0.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_VolumeMultiplier"), TEXT("1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Plays a dialogue directly with no attenuation, perfect for UI.\n\n\x25cf Fire and Forget.\n\x25cf Not Replicated.\n@param Dialogue - dialogue to play\n@param Context - context the dialogue is to play in\n@param VolumeMultiplier - Multiplied with the volume to make the sound louder or softer.\n@param PitchMultiplier - Multiplies the pitch.\n@param StartTime - How far in to the dialogue to begin playback at"));
			MetaData->SetValue(ReturnFunction, TEXT("UnsafeDuringActorConstruction"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_PlayDialogueAtLocation()
	{
		struct GameplayStatics_eventPlayDialogueAtLocation_Parms
		{
			UObject* WorldContextObject;
			UDialogueWave* Dialogue;
			FDialogueContext Context;
			FVector Location;
			FRotator Rotation;
			float VolumeMultiplier;
			float PitchMultiplier;
			float StartTime;
			USoundAttenuation* AttenuationSettings;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PlayDialogueAtLocation"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(GameplayStatics_eventPlayDialogueAtLocation_Parms));
			UProperty* NewProp_AttenuationSettings = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AttenuationSettings"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(AttenuationSettings, GameplayStatics_eventPlayDialogueAtLocation_Parms), 0x0000040000000080, Z_Construct_UClass_USoundAttenuation_NoRegister());
			UProperty* NewProp_StartTime = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("StartTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(StartTime, GameplayStatics_eventPlayDialogueAtLocation_Parms), 0x0000040000000080);
			UProperty* NewProp_PitchMultiplier = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PitchMultiplier"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(PitchMultiplier, GameplayStatics_eventPlayDialogueAtLocation_Parms), 0x0000040000000080);
			UProperty* NewProp_VolumeMultiplier = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VolumeMultiplier"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(VolumeMultiplier, GameplayStatics_eventPlayDialogueAtLocation_Parms), 0x0000040000000080);
			UProperty* NewProp_Rotation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Rotation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Rotation, GameplayStatics_eventPlayDialogueAtLocation_Parms), 0x0000040000000080, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_Location = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Location"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Location, GameplayStatics_eventPlayDialogueAtLocation_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Context = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Context"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Context, GameplayStatics_eventPlayDialogueAtLocation_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FDialogueContext());
			UProperty* NewProp_Dialogue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Dialogue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Dialogue, GameplayStatics_eventPlayDialogueAtLocation_Parms), 0x0000000000000080, Z_Construct_UClass_UDialogueWave_NoRegister());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, GameplayStatics_eventPlayDialogueAtLocation_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AdvancedDisplay"), TEXT("4"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Audio"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_PitchMultiplier"), TEXT("1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_StartTime"), TEXT("0.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_VolumeMultiplier"), TEXT("1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Plays a dialogue at the given location. This is a fire and forget sound and does not travel with any actor. Replication is also not handled at this point.\n@param Dialogue - dialogue to play\n@param Context - context the dialogue is to play in\n@param Location - World position to play dialogue at\n@param Rotation - World rotation to play dialogue at\n@param VolumeMultiplier - Volume multiplier\n@param PitchMultiplier - Pitch multiplier\n@param StartTime - How far in to the dialogue to begin playback at\n@param AttenuationSettings - Override attenuation settings package to play sound with"));
			MetaData->SetValue(ReturnFunction, TEXT("UnsafeDuringActorConstruction"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_PlaySound2D()
	{
		struct GameplayStatics_eventPlaySound2D_Parms
		{
			UObject* WorldContextObject;
			USoundBase* Sound;
			float VolumeMultiplier;
			float PitchMultiplier;
			float StartTime;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PlaySound2D"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022409, 65535, sizeof(GameplayStatics_eventPlaySound2D_Parms));
			UProperty* NewProp_StartTime = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("StartTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(StartTime, GameplayStatics_eventPlaySound2D_Parms), 0x0000040000000080);
			UProperty* NewProp_PitchMultiplier = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PitchMultiplier"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(PitchMultiplier, GameplayStatics_eventPlaySound2D_Parms), 0x0000040000000080);
			UProperty* NewProp_VolumeMultiplier = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VolumeMultiplier"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(VolumeMultiplier, GameplayStatics_eventPlaySound2D_Parms), 0x0000040000000080);
			UProperty* NewProp_Sound = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Sound"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Sound, GameplayStatics_eventPlaySound2D_Parms), 0x0000000000000080, Z_Construct_UClass_USoundBase_NoRegister());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, GameplayStatics_eventPlaySound2D_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AdvancedDisplay"), TEXT("2"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Audio"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_PitchMultiplier"), TEXT("1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_StartTime"), TEXT("0.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_VolumeMultiplier"), TEXT("1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Plays a sound directly with no attenuation, perfect for UI sounds.\n\n\x25cf Fire and Forget.\n\x25cf Not Replicated.\n@param Sound - Sound to play.\n@param VolumeMultiplier - Multiplied with the volume to make the sound louder or softer.\n@param PitchMultiplier - Multiplies the pitch.\n@param StartTime - How far in to the sound to begin playback at"));
			MetaData->SetValue(ReturnFunction, TEXT("UnsafeDuringActorConstruction"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_PlaySoundAtLocation()
	{
		struct GameplayStatics_eventPlaySoundAtLocation_Parms
		{
			UObject* WorldContextObject;
			USoundBase* Sound;
			FVector Location;
			FRotator Rotation;
			float VolumeMultiplier;
			float PitchMultiplier;
			float StartTime;
			USoundAttenuation* AttenuationSettings;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PlaySoundAtLocation"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04822401, 65535, sizeof(GameplayStatics_eventPlaySoundAtLocation_Parms));
			UProperty* NewProp_AttenuationSettings = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AttenuationSettings"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(AttenuationSettings, GameplayStatics_eventPlaySoundAtLocation_Parms), 0x0000040000000080, Z_Construct_UClass_USoundAttenuation_NoRegister());
			UProperty* NewProp_StartTime = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("StartTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(StartTime, GameplayStatics_eventPlaySoundAtLocation_Parms), 0x0000040000000080);
			UProperty* NewProp_PitchMultiplier = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PitchMultiplier"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(PitchMultiplier, GameplayStatics_eventPlaySoundAtLocation_Parms), 0x0000040000000080);
			UProperty* NewProp_VolumeMultiplier = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VolumeMultiplier"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(VolumeMultiplier, GameplayStatics_eventPlaySoundAtLocation_Parms), 0x0000040000000080);
			UProperty* NewProp_Rotation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Rotation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Rotation, GameplayStatics_eventPlaySoundAtLocation_Parms), 0x0000040000000080, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_Location = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Location"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Location, GameplayStatics_eventPlaySoundAtLocation_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Sound = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Sound"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Sound, GameplayStatics_eventPlaySoundAtLocation_Parms), 0x0000000000000080, Z_Construct_UClass_USoundBase_NoRegister());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, GameplayStatics_eventPlaySoundAtLocation_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AdvancedDisplay"), TEXT("3"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Audio"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_PitchMultiplier"), TEXT("1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_StartTime"), TEXT("0.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_VolumeMultiplier"), TEXT("1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Plays a sound at the given location. This is a fire and forget sound and does not travel with any actor. Replication is also not handled at this point.\n@param Sound - sound to play\n@param Location - World position to play sound at\n@param Rotation - World rotation to play sound at\n@param VolumeMultiplier - Volume multiplier\n@param PitchMultiplier - PitchMultiplier\n@param StartTime - How far in to the sound to begin playback at\n@param AttenuationSettings - Override attenuation settings package to play sound with"));
			MetaData->SetValue(ReturnFunction, TEXT("UnsafeDuringActorConstruction"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_PlayWorldCameraShake()
	{
		struct GameplayStatics_eventPlayWorldCameraShake_Parms
		{
			UObject* WorldContextObject;
			TSubclassOf<UCameraShake>  Shake;
			FVector Epicenter;
			float InnerRadius;
			float OuterRadius;
			float Falloff;
			bool bOrientShakeTowardsEpicenter;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PlayWorldCameraShake"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04822401, 65535, sizeof(GameplayStatics_eventPlayWorldCameraShake_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOrientShakeTowardsEpicenter, GameplayStatics_eventPlayWorldCameraShake_Parms, bool);
			UProperty* NewProp_bOrientShakeTowardsEpicenter = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bOrientShakeTowardsEpicenter"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOrientShakeTowardsEpicenter, GameplayStatics_eventPlayWorldCameraShake_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bOrientShakeTowardsEpicenter, GameplayStatics_eventPlayWorldCameraShake_Parms), sizeof(bool), true);
			UProperty* NewProp_Falloff = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Falloff"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Falloff, GameplayStatics_eventPlayWorldCameraShake_Parms), 0x0000000000000080);
			UProperty* NewProp_OuterRadius = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OuterRadius"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(OuterRadius, GameplayStatics_eventPlayWorldCameraShake_Parms), 0x0000000000000080);
			UProperty* NewProp_InnerRadius = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InnerRadius"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InnerRadius, GameplayStatics_eventPlayWorldCameraShake_Parms), 0x0000000000000080);
			UProperty* NewProp_Epicenter = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Epicenter"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Epicenter, GameplayStatics_eventPlayWorldCameraShake_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Shake = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Shake"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(Shake, GameplayStatics_eventPlayWorldCameraShake_Parms), 0x0004000000000080, Z_Construct_UClass_UCameraShake_NoRegister());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, GameplayStatics_eventPlayWorldCameraShake_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Game|Feedback"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bOrientShakeTowardsEpicenter"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Falloff"), TEXT("1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Plays an in-world camera shake that affects all nearby local players, with distance-based attenuation. Does not replicate.\n@param WorldContextObject - Object that we can obtain a world context from\n@param Shake - Camera shake asset to use\n@param Epicenter - location to place the effect in world space\n@param InnerRadius - Cameras inside this radius are ignored\n@param OuterRadius - Cameras outside of InnerRadius and inside this are effected\n@param Falloff - Affects falloff of effect as it nears OuterRadius\n@param bOrientShakeTowardsEpicenter - Changes the rotation of shake to point towards epicenter instead of forward"));
			MetaData->SetValue(ReturnFunction, TEXT("UnsafeDuringActorConstruction"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_PopSoundMixModifier()
	{
		struct GameplayStatics_eventPopSoundMixModifier_Parms
		{
			UObject* WorldContextObject;
			USoundMix* InSoundMixModifier;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PopSoundMixModifier"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(GameplayStatics_eventPopSoundMixModifier_Parms));
			UProperty* NewProp_InSoundMixModifier = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InSoundMixModifier"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(InSoundMixModifier, GameplayStatics_eventPopSoundMixModifier_Parms), 0x0000000000000080, Z_Construct_UClass_USoundMix_NoRegister());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, GameplayStatics_eventPopSoundMixModifier_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Audio"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Pop a sound mix modifier from the audio system *"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_ProjectWorldToScreen()
	{
		struct GameplayStatics_eventProjectWorldToScreen_Parms
		{
			APlayerController* Player;
			FVector WorldPosition;
			FVector2D ScreenPosition;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ProjectWorldToScreen"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(GameplayStatics_eventProjectWorldToScreen_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, GameplayStatics_eventProjectWorldToScreen_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, GameplayStatics_eventProjectWorldToScreen_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, GameplayStatics_eventProjectWorldToScreen_Parms), sizeof(bool), true);
			UProperty* NewProp_ScreenPosition = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ScreenPosition"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ScreenPosition, GameplayStatics_eventProjectWorldToScreen_Parms), 0x0000000000000180, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_WorldPosition = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldPosition"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(WorldPosition, GameplayStatics_eventProjectWorldToScreen_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Player = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Player"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Player, GameplayStatics_eventProjectWorldToScreen_Parms), 0x0000000000000080, Z_Construct_UClass_APlayerController_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Transforms the given 3D world-space point into a its 2D screen space coordinate.\n@param Player                        Project using this player's view.\n@param WorldPosition         World position to project.\n@param ScreenPosition        (out) Corresponding 2D position in screen space"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_PushSoundMixModifier()
	{
		struct GameplayStatics_eventPushSoundMixModifier_Parms
		{
			UObject* WorldContextObject;
			USoundMix* InSoundMixModifier;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PushSoundMixModifier"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(GameplayStatics_eventPushSoundMixModifier_Parms));
			UProperty* NewProp_InSoundMixModifier = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InSoundMixModifier"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(InSoundMixModifier, GameplayStatics_eventPushSoundMixModifier_Parms), 0x0000000000000080, Z_Construct_UClass_USoundMix_NoRegister());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, GameplayStatics_eventPushSoundMixModifier_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Audio"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Push a sound mix modifier onto the audio system *"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_RemovePlayer()
	{
		struct GameplayStatics_eventRemovePlayer_Parms
		{
			APlayerController* Player;
			bool bDestroyPawn;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RemovePlayer"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(GameplayStatics_eventRemovePlayer_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDestroyPawn, GameplayStatics_eventRemovePlayer_Parms, bool);
			UProperty* NewProp_bDestroyPawn = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bDestroyPawn"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDestroyPawn, GameplayStatics_eventRemovePlayer_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bDestroyPawn, GameplayStatics_eventRemovePlayer_Parms), sizeof(bool), true);
			UProperty* NewProp_Player = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Player"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Player, GameplayStatics_eventRemovePlayer_Parms), 0x0000000000000080, Z_Construct_UClass_APlayerController_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Game"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Removes a player from this game.\n@param Player                       The player controller of the player to be removed\n@param bDestroyPawn         Whether the controlled pawn should be deleted as well"));
			MetaData->SetValue(ReturnFunction, TEXT("UnsafeDuringActorConstruction"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_SaveGameToSlot()
	{
		struct GameplayStatics_eventSaveGameToSlot_Parms
		{
			USaveGame* SaveGameObject;
			FString SlotName;
			int32 UserIndex;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SaveGameToSlot"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(GameplayStatics_eventSaveGameToSlot_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, GameplayStatics_eventSaveGameToSlot_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, GameplayStatics_eventSaveGameToSlot_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, GameplayStatics_eventSaveGameToSlot_Parms), sizeof(bool), true);
			UProperty* NewProp_UserIndex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UserIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(UserIndex, GameplayStatics_eventSaveGameToSlot_Parms), 0x0000000000000082);
			UProperty* NewProp_SlotName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SlotName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(SlotName, GameplayStatics_eventSaveGameToSlot_Parms), 0x0000000000000080);
			UProperty* NewProp_SaveGameObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SaveGameObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(SaveGameObject, GameplayStatics_eventSaveGameToSlot_Parms), 0x0000000000000080, Z_Construct_UClass_USaveGame_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Game"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Save the contents of the SaveGameObject to a slot.\n@param SaveGameObject   Object that contains data about the save game that we want to write out\n@param SlotName                 Name of save game slot to save to.\n@param UserIndex            For some platforms, master user index to identify the user doing the saving.\n@return                                 Whether we successfully saved this information"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_SetBaseSoundMix()
	{
		struct GameplayStatics_eventSetBaseSoundMix_Parms
		{
			UObject* WorldContextObject;
			USoundMix* InSoundMix;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetBaseSoundMix"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(GameplayStatics_eventSetBaseSoundMix_Parms));
			UProperty* NewProp_InSoundMix = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InSoundMix"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(InSoundMix, GameplayStatics_eventSetBaseSoundMix_Parms), 0x0000000000000080, Z_Construct_UClass_USoundMix_NoRegister());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, GameplayStatics_eventSetBaseSoundMix_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Audio"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set the sound mix of the audio system for special EQing *"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_SetGamePaused()
	{
		struct GameplayStatics_eventSetGamePaused_Parms
		{
			UObject* WorldContextObject;
			bool bPaused;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetGamePaused"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(GameplayStatics_eventSetGamePaused_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, GameplayStatics_eventSetGamePaused_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, GameplayStatics_eventSetGamePaused_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, GameplayStatics_eventSetGamePaused_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bPaused, GameplayStatics_eventSetGamePaused_Parms, bool);
			UProperty* NewProp_bPaused = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bPaused"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bPaused, GameplayStatics_eventSetGamePaused_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bPaused, GameplayStatics_eventSetGamePaused_Parms), sizeof(bool), true);
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, GameplayStatics_eventSetGamePaused_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Game"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the game's paused state\n@param       bPaused         Whether the game should be paused or not\n@return      Whether the game was successfully paused/unpaused"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_SetGlobalTimeDilation()
	{
		struct GameplayStatics_eventSetGlobalTimeDilation_Parms
		{
			UObject* WorldContextObject;
			float TimeDilation;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetGlobalTimeDilation"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(GameplayStatics_eventSetGlobalTimeDilation_Parms));
			UProperty* NewProp_TimeDilation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TimeDilation"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(TimeDilation, GameplayStatics_eventSetGlobalTimeDilation_Parms), 0x0000000000000080);
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, GameplayStatics_eventSetGlobalTimeDilation_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Time"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the global time dilation\n@param       TimeDilation    value to set the global time dilation to"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_SetWorldOriginLocation()
	{
		struct FIntVector
		{
			int32 X;
			int32 Y;
			int32 Z;
		};

		struct GameplayStatics_eventSetWorldOriginLocation_Parms
		{
			UObject* WorldContextObject;
			FIntVector NewLocation;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetWorldOriginLocation"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(GameplayStatics_eventSetWorldOriginLocation_Parms));
			UProperty* NewProp_NewLocation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewLocation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(NewLocation, GameplayStatics_eventSetWorldOriginLocation_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FIntVector());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, GameplayStatics_eventSetWorldOriginLocation_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Game"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Requests a new location for a world origin"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_SpawnDecalAtLocation()
	{
		struct GameplayStatics_eventSpawnDecalAtLocation_Parms
		{
			UObject* WorldContextObject;
			UMaterialInterface* DecalMaterial;
			FVector DecalSize;
			FVector Location;
			FRotator Rotation;
			float LifeSpan;
			UDecalComponent* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SpawnDecalAtLocation"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04822401, 65535, sizeof(GameplayStatics_eventSpawnDecalAtLocation_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, GameplayStatics_eventSpawnDecalAtLocation_Parms), 0x0000000000080588, Z_Construct_UClass_UDecalComponent_NoRegister());
			UProperty* NewProp_LifeSpan = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LifeSpan"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(LifeSpan, GameplayStatics_eventSpawnDecalAtLocation_Parms), 0x0000000000000080);
			UProperty* NewProp_Rotation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Rotation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Rotation, GameplayStatics_eventSpawnDecalAtLocation_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_Location = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Location"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Location, GameplayStatics_eventSpawnDecalAtLocation_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_DecalSize = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DecalSize"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DecalSize, GameplayStatics_eventSpawnDecalAtLocation_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_DecalMaterial = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DecalMaterial"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(DecalMaterial, GameplayStatics_eventSpawnDecalAtLocation_Parms), 0x0000000000000080, Z_Construct_UClass_UMaterialInterface_NoRegister());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, GameplayStatics_eventSpawnDecalAtLocation_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Rendering|Components|Decal"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_LifeSpan"), TEXT("0.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Rotation"), TEXT("-90.000000,0.000000,0.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Spawns a decal at the given location and rotation, fire and forget. Does not replicate.\n@param DecalMaterial - decal's material\n@param DecalSize - size of decal\n@param Location - location to place the decal in world space\n@param Rotation - rotation to place the decal in world space\n@param LifeSpan - destroy decal component after time runs out (0 = infinite)"));
			MetaData->SetValue(ReturnFunction, TEXT("UnsafeDuringActorConstruction"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
			MetaData->SetValue(NewProp_ReturnValue, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_SpawnDecalAttached()
	{
		struct GameplayStatics_eventSpawnDecalAttached_Parms
		{
			UMaterialInterface* DecalMaterial;
			FVector DecalSize;
			USceneComponent* AttachToComponent;
			FName AttachPointName;
			FVector Location;
			FRotator Rotation;
			TEnumAsByte<EAttachLocation::Type> LocationType;
			float LifeSpan;
			UDecalComponent* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SpawnDecalAttached"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04822401, 65535, sizeof(GameplayStatics_eventSpawnDecalAttached_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, GameplayStatics_eventSpawnDecalAttached_Parms), 0x0000000000080588, Z_Construct_UClass_UDecalComponent_NoRegister());
			UProperty* NewProp_LifeSpan = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LifeSpan"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(LifeSpan, GameplayStatics_eventSpawnDecalAttached_Parms), 0x0000000000000080);
			UProperty* NewProp_LocationType = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LocationType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(LocationType, GameplayStatics_eventSpawnDecalAttached_Parms), 0x0000000000000080, Z_Construct_UEnum_Engine_EAttachLocation());
			UProperty* NewProp_Rotation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Rotation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Rotation, GameplayStatics_eventSpawnDecalAttached_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_Location = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Location"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Location, GameplayStatics_eventSpawnDecalAttached_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_AttachPointName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AttachPointName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(AttachPointName, GameplayStatics_eventSpawnDecalAttached_Parms), 0x0000000000000080);
			UProperty* NewProp_AttachToComponent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AttachToComponent"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(AttachToComponent, GameplayStatics_eventSpawnDecalAttached_Parms), 0x0000000000080080, Z_Construct_UClass_USceneComponent_NoRegister());
			UProperty* NewProp_DecalSize = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DecalSize"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DecalSize, GameplayStatics_eventSpawnDecalAttached_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_DecalMaterial = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DecalMaterial"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(DecalMaterial, GameplayStatics_eventSpawnDecalAttached_Parms), 0x0000000000000080, Z_Construct_UClass_UMaterialInterface_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Rendering|Components|Decal"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_AttachPointName"), TEXT("None"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_LifeSpan"), TEXT("0.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_LocationType"), TEXT("KeepRelativeOffset"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Spawns a decal attached to and following the specified component. Does not replicate.\n@param DecalMaterial - decal's material\n@param DecalSize - size of decal\n@param AttachComponent - Component to attach to.\n@param AttachPointName - Optional named point within the AttachComponent to spawn the emitter at\n@param Location - Depending on the value of Location Type this is either a relative offset from the attach component/point or an absolute world position that will be translated to a relative offset\n@param Rotation - Depending on the value of LocationType this is either a relative offset from the attach component/point or an absolute world rotation that will be translated to a realative offset\n@param LocationType - Specifies whether Location is a relative offset or an absolute world position\n@param LifeSpan - destroy decal component after time runs out (0 = infinite)"));
			MetaData->SetValue(ReturnFunction, TEXT("UnsafeDuringActorConstruction"), TEXT("true"));
			MetaData->SetValue(NewProp_ReturnValue, TEXT("EditInline"), TEXT("true"));
			MetaData->SetValue(NewProp_AttachToComponent, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_SpawnDialogue2D()
	{
		struct GameplayStatics_eventSpawnDialogue2D_Parms
		{
			UObject* WorldContextObject;
			UDialogueWave* Dialogue;
			FDialogueContext Context;
			float VolumeMultiplier;
			float PitchMultiplier;
			float StartTime;
			UAudioComponent* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SpawnDialogue2D"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04422409, 65535, sizeof(GameplayStatics_eventSpawnDialogue2D_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, GameplayStatics_eventSpawnDialogue2D_Parms), 0x0000000000080588, Z_Construct_UClass_UAudioComponent_NoRegister());
			UProperty* NewProp_StartTime = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("StartTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(StartTime, GameplayStatics_eventSpawnDialogue2D_Parms), 0x0000040000000080);
			UProperty* NewProp_PitchMultiplier = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PitchMultiplier"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(PitchMultiplier, GameplayStatics_eventSpawnDialogue2D_Parms), 0x0000040000000080);
			UProperty* NewProp_VolumeMultiplier = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VolumeMultiplier"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(VolumeMultiplier, GameplayStatics_eventSpawnDialogue2D_Parms), 0x0000040000000080);
			UProperty* NewProp_Context = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Context"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Context, GameplayStatics_eventSpawnDialogue2D_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FDialogueContext());
			UProperty* NewProp_Dialogue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Dialogue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Dialogue, GameplayStatics_eventSpawnDialogue2D_Parms), 0x0000000000000080, Z_Construct_UClass_UDialogueWave_NoRegister());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, GameplayStatics_eventSpawnDialogue2D_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AdvancedDisplay"), TEXT("3"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Audio"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_PitchMultiplier"), TEXT("1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_StartTime"), TEXT("0.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_VolumeMultiplier"), TEXT("1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("play"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Spawns a dialogue with no attenuation, perfect for UI.\n\n\x25cf Not Replicated.\n@param Dialogue - dialogue to play\n@param Context - context the dialogue is to play in\n@param VolumeMultiplier - Multiplied with the volume to make the sound louder or softer.\n@param PitchMultiplier - Multiplies the pitch.\n@param StartTime - How far in to the dialogue to begin playback at\n@return An audio component to manipulate the spawned sound"));
			MetaData->SetValue(ReturnFunction, TEXT("UnsafeDuringActorConstruction"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
			MetaData->SetValue(NewProp_ReturnValue, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_SpawnDialogueAtLocation()
	{
		struct GameplayStatics_eventSpawnDialogueAtLocation_Parms
		{
			UObject* WorldContextObject;
			UDialogueWave* Dialogue;
			FDialogueContext Context;
			FVector Location;
			FRotator Rotation;
			float VolumeMultiplier;
			float PitchMultiplier;
			float StartTime;
			USoundAttenuation* AttenuationSettings;
			UAudioComponent* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SpawnDialogueAtLocation"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(GameplayStatics_eventSpawnDialogueAtLocation_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, GameplayStatics_eventSpawnDialogueAtLocation_Parms), 0x0000000000080588, Z_Construct_UClass_UAudioComponent_NoRegister());
			UProperty* NewProp_AttenuationSettings = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AttenuationSettings"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(AttenuationSettings, GameplayStatics_eventSpawnDialogueAtLocation_Parms), 0x0000040000000080, Z_Construct_UClass_USoundAttenuation_NoRegister());
			UProperty* NewProp_StartTime = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("StartTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(StartTime, GameplayStatics_eventSpawnDialogueAtLocation_Parms), 0x0000040000000080);
			UProperty* NewProp_PitchMultiplier = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PitchMultiplier"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(PitchMultiplier, GameplayStatics_eventSpawnDialogueAtLocation_Parms), 0x0000040000000080);
			UProperty* NewProp_VolumeMultiplier = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VolumeMultiplier"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(VolumeMultiplier, GameplayStatics_eventSpawnDialogueAtLocation_Parms), 0x0000040000000080);
			UProperty* NewProp_Rotation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Rotation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Rotation, GameplayStatics_eventSpawnDialogueAtLocation_Parms), 0x0000040000000080, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_Location = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Location"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Location, GameplayStatics_eventSpawnDialogueAtLocation_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Context = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Context"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Context, GameplayStatics_eventSpawnDialogueAtLocation_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FDialogueContext());
			UProperty* NewProp_Dialogue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Dialogue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Dialogue, GameplayStatics_eventSpawnDialogueAtLocation_Parms), 0x0000000000000080, Z_Construct_UClass_UDialogueWave_NoRegister());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, GameplayStatics_eventSpawnDialogueAtLocation_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AdvancedDisplay"), TEXT("4"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Audio"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_PitchMultiplier"), TEXT("1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_StartTime"), TEXT("0.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_VolumeMultiplier"), TEXT("1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("play"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Plays a dialogue at the given location. This is a fire and forget sound and does not travel with any actor. Replication is also not handled at this point.\n@param Dialogue - dialogue to play\n@param Context - context the dialogue is to play in\n@param Location - World position to play dialogue at\n@param Rotation - World rotation to play dialogue at\n@param VolumeMultiplier - Volume multiplier\n@param PitchMultiplier - PitchMultiplier\n@param StartTime - How far in to the dialogue to begin playback at\n@param AttenuationSettings - Override attenuation settings package to play sound with\n@return Audio Component to manipulate the playing dialogue with"));
			MetaData->SetValue(ReturnFunction, TEXT("UnsafeDuringActorConstruction"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
			MetaData->SetValue(NewProp_ReturnValue, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_SpawnDialogueAttached()
	{
		struct GameplayStatics_eventSpawnDialogueAttached_Parms
		{
			UDialogueWave* Dialogue;
			FDialogueContext Context;
			USceneComponent* AttachToComponent;
			FName AttachPointName;
			FVector Location;
			FRotator Rotation;
			TEnumAsByte<EAttachLocation::Type> LocationType;
			bool bStopWhenAttachedToDestroyed;
			float VolumeMultiplier;
			float PitchMultiplier;
			float StartTime;
			USoundAttenuation* AttenuationSettings;
			UAudioComponent* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SpawnDialogueAttached"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(GameplayStatics_eventSpawnDialogueAttached_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, GameplayStatics_eventSpawnDialogueAttached_Parms), 0x0000000000080588, Z_Construct_UClass_UAudioComponent_NoRegister());
			UProperty* NewProp_AttenuationSettings = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AttenuationSettings"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(AttenuationSettings, GameplayStatics_eventSpawnDialogueAttached_Parms), 0x0000040000000080, Z_Construct_UClass_USoundAttenuation_NoRegister());
			UProperty* NewProp_StartTime = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("StartTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(StartTime, GameplayStatics_eventSpawnDialogueAttached_Parms), 0x0000040000000080);
			UProperty* NewProp_PitchMultiplier = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PitchMultiplier"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(PitchMultiplier, GameplayStatics_eventSpawnDialogueAttached_Parms), 0x0000040000000080);
			UProperty* NewProp_VolumeMultiplier = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VolumeMultiplier"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(VolumeMultiplier, GameplayStatics_eventSpawnDialogueAttached_Parms), 0x0000040000000080);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bStopWhenAttachedToDestroyed, GameplayStatics_eventSpawnDialogueAttached_Parms, bool);
			UProperty* NewProp_bStopWhenAttachedToDestroyed = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bStopWhenAttachedToDestroyed"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bStopWhenAttachedToDestroyed, GameplayStatics_eventSpawnDialogueAttached_Parms), 0x0000040000000080, CPP_BOOL_PROPERTY_BITMASK(bStopWhenAttachedToDestroyed, GameplayStatics_eventSpawnDialogueAttached_Parms), sizeof(bool), true);
			UProperty* NewProp_LocationType = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LocationType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(LocationType, GameplayStatics_eventSpawnDialogueAttached_Parms), 0x0000040000000080, Z_Construct_UEnum_Engine_EAttachLocation());
			UProperty* NewProp_Rotation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Rotation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Rotation, GameplayStatics_eventSpawnDialogueAttached_Parms), 0x0000040000000080, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_Location = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Location"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Location, GameplayStatics_eventSpawnDialogueAttached_Parms), 0x0000040000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_AttachPointName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AttachPointName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(AttachPointName, GameplayStatics_eventSpawnDialogueAttached_Parms), 0x0000040000000080);
			UProperty* NewProp_AttachToComponent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AttachToComponent"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(AttachToComponent, GameplayStatics_eventSpawnDialogueAttached_Parms), 0x0000040000080080, Z_Construct_UClass_USceneComponent_NoRegister());
			UProperty* NewProp_Context = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Context"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Context, GameplayStatics_eventSpawnDialogueAttached_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FDialogueContext());
			UProperty* NewProp_Dialogue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Dialogue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Dialogue, GameplayStatics_eventSpawnDialogueAttached_Parms), 0x0000000000000080, Z_Construct_UClass_UDialogueWave_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AdvancedDisplay"), TEXT("2"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Audio"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_AttachPointName"), TEXT("None"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bStopWhenAttachedToDestroyed"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_LocationType"), TEXT("KeepRelativeOffset"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_PitchMultiplier"), TEXT("1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_StartTime"), TEXT("0.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_VolumeMultiplier"), TEXT("1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("play"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Plays a dialogue attached to and following the specified component. This is a fire and forget sound. Replication is also not handled at this point.\n@param Dialogue - dialogue to play\n@param Context - context the dialogue is to play in\n@param AttachComponent - Component to attach to.\n@param AttachPointName - Optional named point within the AttachComponent to play the sound at\n@param Location - Depending on the value of Location Type this is either a relative offset from the attach component/point or an absolute world position that will be translated to a relative offset\n@param Rotation - Depending on the value of Location Type this is either a relative offset from the attach component/point or an absolute world rotation that will be translated to a relative offset\n@param LocationType - Specifies whether Location is a relative offset or an absolute world position\n@param bStopWhenAttachedToDestroyed - Specifies whether the sound should stop playing when the owner of the attach to component is destroyed.\n@param VolumeMultiplier - Volume multiplier\n@param PitchMultiplier - PitchMultiplier\n@param StartTime - How far in to the dialogue to begin playback at\n@param AttenuationSettings - Override attenuation settings package to play sound with\n@return Audio Component to manipulate the playing dialogue with"));
			MetaData->SetValue(ReturnFunction, TEXT("UnsafeDuringActorConstruction"), TEXT("true"));
			MetaData->SetValue(NewProp_ReturnValue, TEXT("EditInline"), TEXT("true"));
			MetaData->SetValue(NewProp_AttachToComponent, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_SpawnEmitterAtLocation()
	{
		struct GameplayStatics_eventSpawnEmitterAtLocation_Parms
		{
			UObject* WorldContextObject;
			UParticleSystem* EmitterTemplate;
			FVector Location;
			FRotator Rotation;
			bool bAutoDestroy;
			UParticleSystemComponent* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SpawnEmitterAtLocation"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04822401, 65535, sizeof(GameplayStatics_eventSpawnEmitterAtLocation_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, GameplayStatics_eventSpawnEmitterAtLocation_Parms), 0x0000000000080588, Z_Construct_UClass_UParticleSystemComponent_NoRegister());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAutoDestroy, GameplayStatics_eventSpawnEmitterAtLocation_Parms, bool);
			UProperty* NewProp_bAutoDestroy = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bAutoDestroy"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAutoDestroy, GameplayStatics_eventSpawnEmitterAtLocation_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bAutoDestroy, GameplayStatics_eventSpawnEmitterAtLocation_Parms), sizeof(bool), true);
			UProperty* NewProp_Rotation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Rotation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Rotation, GameplayStatics_eventSpawnEmitterAtLocation_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_Location = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Location"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Location, GameplayStatics_eventSpawnEmitterAtLocation_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_EmitterTemplate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("EmitterTemplate"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(EmitterTemplate, GameplayStatics_eventSpawnEmitterAtLocation_Parms), 0x0000000000000080, Z_Construct_UClass_UParticleSystem_NoRegister());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, GameplayStatics_eventSpawnEmitterAtLocation_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Effects|Components|ParticleSystem"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bAutoDestroy"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("particle system"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Plays the specified effect at the given location and rotation, fire and forget. The system will go away when the effect is complete. Does not replicate.\n@param WorldContextObject - Object that we can obtain a world context from\n@param EmitterTemplate - particle system to create\n@param Location - location to place the effect in world space\n@param Rotation - rotation to place the effect in world space\n@param bAutoDestroy - Whether the component will automatically be destroyed when the particle system completes playing or whether it can be reactivated"));
			MetaData->SetValue(ReturnFunction, TEXT("UnsafeDuringActorConstruction"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
			MetaData->SetValue(NewProp_ReturnValue, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_SpawnEmitterAttached()
	{
		struct GameplayStatics_eventSpawnEmitterAttached_Parms
		{
			UParticleSystem* EmitterTemplate;
			USceneComponent* AttachToComponent;
			FName AttachPointName;
			FVector Location;
			FRotator Rotation;
			TEnumAsByte<EAttachLocation::Type> LocationType;
			bool bAutoDestroy;
			UParticleSystemComponent* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SpawnEmitterAttached"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04822401, 65535, sizeof(GameplayStatics_eventSpawnEmitterAttached_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, GameplayStatics_eventSpawnEmitterAttached_Parms), 0x0000000000080588, Z_Construct_UClass_UParticleSystemComponent_NoRegister());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAutoDestroy, GameplayStatics_eventSpawnEmitterAttached_Parms, bool);
			UProperty* NewProp_bAutoDestroy = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bAutoDestroy"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAutoDestroy, GameplayStatics_eventSpawnEmitterAttached_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bAutoDestroy, GameplayStatics_eventSpawnEmitterAttached_Parms), sizeof(bool), true);
			UProperty* NewProp_LocationType = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LocationType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(LocationType, GameplayStatics_eventSpawnEmitterAttached_Parms), 0x0000000000000080, Z_Construct_UEnum_Engine_EAttachLocation());
			UProperty* NewProp_Rotation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Rotation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Rotation, GameplayStatics_eventSpawnEmitterAttached_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_Location = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Location"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Location, GameplayStatics_eventSpawnEmitterAttached_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_AttachPointName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AttachPointName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(AttachPointName, GameplayStatics_eventSpawnEmitterAttached_Parms), 0x0000000000000080);
			UProperty* NewProp_AttachToComponent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AttachToComponent"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(AttachToComponent, GameplayStatics_eventSpawnEmitterAttached_Parms), 0x0000000000080080, Z_Construct_UClass_USceneComponent_NoRegister());
			UProperty* NewProp_EmitterTemplate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("EmitterTemplate"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(EmitterTemplate, GameplayStatics_eventSpawnEmitterAttached_Parms), 0x0000000000000080, Z_Construct_UClass_UParticleSystem_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Effects|Components|ParticleSystem"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_AttachPointName"), TEXT("None"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bAutoDestroy"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_LocationType"), TEXT("KeepRelativeOffset"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("particle system"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Plays the specified effect attached to and following the specified component. The system will go away when the effect is complete. Does not replicate.\n@param EmitterTemplate - particle system to create\n@param AttachComponent - Component to attach to.\n@param AttachPointName - Optional named point within the AttachComponent to spawn the emitter at\n@param Location - Depending on the value of Location Type this is either a relative offset from the attach component/point or an absolute world position that will be translated to a relative offset\n@param Rotation - Depending on the value of LocationType this is either a relative offset from the attach component/point or an absolute world rotation that will be translated to a realative offset\n@param LocationType - Specifies whether Location is a relative offset or an absolute world position\n@param bAutoDestroy - Whether the component will automatically be destroyed when the particle system completes playing or whether it can be reactivated"));
			MetaData->SetValue(ReturnFunction, TEXT("UnsafeDuringActorConstruction"), TEXT("true"));
			MetaData->SetValue(NewProp_ReturnValue, TEXT("EditInline"), TEXT("true"));
			MetaData->SetValue(NewProp_AttachToComponent, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_SpawnObject()
	{
		struct GameplayStatics_eventSpawnObject_Parms
		{
			TSubclassOf<UObject>  ObjectClass;
			UObject* Outer;
			UObject* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SpawnObject"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(GameplayStatics_eventSpawnObject_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, GameplayStatics_eventSpawnObject_Parms), 0x0000000000000580, Z_Construct_UClass_UObject_NoRegister());
			UProperty* NewProp_Outer = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Outer"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Outer, GameplayStatics_eventSpawnObject_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			UProperty* NewProp_ObjectClass = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ObjectClass"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(ObjectClass, GameplayStatics_eventSpawnObject_Parms), 0x0004000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Spawning"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("--- Create Object"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_SpawnSound2D()
	{
		struct GameplayStatics_eventSpawnSound2D_Parms
		{
			UObject* WorldContextObject;
			USoundBase* Sound;
			float VolumeMultiplier;
			float PitchMultiplier;
			float StartTime;
			UAudioComponent* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SpawnSound2D"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022409, 65535, sizeof(GameplayStatics_eventSpawnSound2D_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, GameplayStatics_eventSpawnSound2D_Parms), 0x0000000000080588, Z_Construct_UClass_UAudioComponent_NoRegister());
			UProperty* NewProp_StartTime = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("StartTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(StartTime, GameplayStatics_eventSpawnSound2D_Parms), 0x0000040000000080);
			UProperty* NewProp_PitchMultiplier = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PitchMultiplier"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(PitchMultiplier, GameplayStatics_eventSpawnSound2D_Parms), 0x0000040000000080);
			UProperty* NewProp_VolumeMultiplier = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VolumeMultiplier"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(VolumeMultiplier, GameplayStatics_eventSpawnSound2D_Parms), 0x0000040000000080);
			UProperty* NewProp_Sound = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Sound"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Sound, GameplayStatics_eventSpawnSound2D_Parms), 0x0000000000000080, Z_Construct_UClass_USoundBase_NoRegister());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, GameplayStatics_eventSpawnSound2D_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AdvancedDisplay"), TEXT("2"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Audio"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_PitchMultiplier"), TEXT("1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_StartTime"), TEXT("0.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_VolumeMultiplier"), TEXT("1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("play"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Spawns a sound with no attenuation, perfect for UI sounds.\n\n\x25cf Not Replicated.\n@param Sound - Sound to play.\n@param VolumeMultiplier - Multiplied with the volume to make the sound louder or softer.\n@param PitchMultiplier - Multiplies the pitch.\n@param StartTime - How far in to the sound to begin playback at\n@return An audio component to manipulate the spawned sound"));
			MetaData->SetValue(ReturnFunction, TEXT("UnsafeDuringActorConstruction"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
			MetaData->SetValue(NewProp_ReturnValue, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_SpawnSoundAtLocation()
	{
		struct GameplayStatics_eventSpawnSoundAtLocation_Parms
		{
			UObject* WorldContextObject;
			USoundBase* Sound;
			FVector Location;
			FRotator Rotation;
			float VolumeMultiplier;
			float PitchMultiplier;
			float StartTime;
			USoundAttenuation* AttenuationSettings;
			UAudioComponent* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SpawnSoundAtLocation"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04822401, 65535, sizeof(GameplayStatics_eventSpawnSoundAtLocation_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, GameplayStatics_eventSpawnSoundAtLocation_Parms), 0x0000000000080588, Z_Construct_UClass_UAudioComponent_NoRegister());
			UProperty* NewProp_AttenuationSettings = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AttenuationSettings"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(AttenuationSettings, GameplayStatics_eventSpawnSoundAtLocation_Parms), 0x0000040000000080, Z_Construct_UClass_USoundAttenuation_NoRegister());
			UProperty* NewProp_StartTime = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("StartTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(StartTime, GameplayStatics_eventSpawnSoundAtLocation_Parms), 0x0000040000000080);
			UProperty* NewProp_PitchMultiplier = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PitchMultiplier"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(PitchMultiplier, GameplayStatics_eventSpawnSoundAtLocation_Parms), 0x0000040000000080);
			UProperty* NewProp_VolumeMultiplier = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VolumeMultiplier"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(VolumeMultiplier, GameplayStatics_eventSpawnSoundAtLocation_Parms), 0x0000040000000080);
			UProperty* NewProp_Rotation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Rotation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Rotation, GameplayStatics_eventSpawnSoundAtLocation_Parms), 0x0000040000000080, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_Location = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Location"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Location, GameplayStatics_eventSpawnSoundAtLocation_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Sound = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Sound"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Sound, GameplayStatics_eventSpawnSoundAtLocation_Parms), 0x0000000000000080, Z_Construct_UClass_USoundBase_NoRegister());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, GameplayStatics_eventSpawnSoundAtLocation_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AdvancedDisplay"), TEXT("3"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Audio"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_PitchMultiplier"), TEXT("1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_StartTime"), TEXT("0.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_VolumeMultiplier"), TEXT("1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("play"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Spawns a sound at the given location. This does not travel with any actor. Replication is also not handled at this point.\n@param Sound - sound to play\n@param Location - World position to play sound at\n@param Rotation - World rotation to play sound at\n@param VolumeMultiplier - Volume multiplier\n@param PitchMultiplier - PitchMultiplier\n@param StartTime - How far in to the sound to begin playback at\n@param AttenuationSettings - Override attenuation settings package to play sound with\n@return An audio component to manipulate the spawned sound"));
			MetaData->SetValue(ReturnFunction, TEXT("UnsafeDuringActorConstruction"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
			MetaData->SetValue(NewProp_ReturnValue, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_SpawnSoundAttached()
	{
		struct GameplayStatics_eventSpawnSoundAttached_Parms
		{
			USoundBase* Sound;
			USceneComponent* AttachToComponent;
			FName AttachPointName;
			FVector Location;
			FRotator Rotation;
			TEnumAsByte<EAttachLocation::Type> LocationType;
			bool bStopWhenAttachedToDestroyed;
			float VolumeMultiplier;
			float PitchMultiplier;
			float StartTime;
			USoundAttenuation* AttenuationSettings;
			UAudioComponent* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SpawnSoundAttached"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04822401, 65535, sizeof(GameplayStatics_eventSpawnSoundAttached_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, GameplayStatics_eventSpawnSoundAttached_Parms), 0x0000000000080588, Z_Construct_UClass_UAudioComponent_NoRegister());
			UProperty* NewProp_AttenuationSettings = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AttenuationSettings"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(AttenuationSettings, GameplayStatics_eventSpawnSoundAttached_Parms), 0x0000040000000080, Z_Construct_UClass_USoundAttenuation_NoRegister());
			UProperty* NewProp_StartTime = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("StartTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(StartTime, GameplayStatics_eventSpawnSoundAttached_Parms), 0x0000040000000080);
			UProperty* NewProp_PitchMultiplier = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PitchMultiplier"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(PitchMultiplier, GameplayStatics_eventSpawnSoundAttached_Parms), 0x0000040000000080);
			UProperty* NewProp_VolumeMultiplier = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VolumeMultiplier"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(VolumeMultiplier, GameplayStatics_eventSpawnSoundAttached_Parms), 0x0000040000000080);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bStopWhenAttachedToDestroyed, GameplayStatics_eventSpawnSoundAttached_Parms, bool);
			UProperty* NewProp_bStopWhenAttachedToDestroyed = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bStopWhenAttachedToDestroyed"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bStopWhenAttachedToDestroyed, GameplayStatics_eventSpawnSoundAttached_Parms), 0x0000040000000080, CPP_BOOL_PROPERTY_BITMASK(bStopWhenAttachedToDestroyed, GameplayStatics_eventSpawnSoundAttached_Parms), sizeof(bool), true);
			UProperty* NewProp_LocationType = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LocationType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(LocationType, GameplayStatics_eventSpawnSoundAttached_Parms), 0x0000040000000080, Z_Construct_UEnum_Engine_EAttachLocation());
			UProperty* NewProp_Rotation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Rotation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Rotation, GameplayStatics_eventSpawnSoundAttached_Parms), 0x0000040000000080, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_Location = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Location"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Location, GameplayStatics_eventSpawnSoundAttached_Parms), 0x0000040000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_AttachPointName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AttachPointName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(AttachPointName, GameplayStatics_eventSpawnSoundAttached_Parms), 0x0000040000000080);
			UProperty* NewProp_AttachToComponent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AttachToComponent"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(AttachToComponent, GameplayStatics_eventSpawnSoundAttached_Parms), 0x0000000000080080, Z_Construct_UClass_USceneComponent_NoRegister());
			UProperty* NewProp_Sound = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Sound"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Sound, GameplayStatics_eventSpawnSoundAttached_Parms), 0x0000000000000080, Z_Construct_UClass_USoundBase_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AdvancedDisplay"), TEXT("2"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Audio"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_AttachPointName"), TEXT("None"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bStopWhenAttachedToDestroyed"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_LocationType"), TEXT("KeepRelativeOffset"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_PitchMultiplier"), TEXT("1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_StartTime"), TEXT("0.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_VolumeMultiplier"), TEXT("1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("play"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Plays a sound attached to and following the specified component. This is a fire and forget sound. Replication is also not handled at this point.\n@param Sound - sound to play\n@param AttachComponent - Component to attach to.\n@param AttachPointName - Optional named point within the AttachComponent to play the sound at\n@param Location - Depending on the value of Location Type this is either a relative offset from the attach component/point or an absolute world position that will be translated to a relative offset\n@param Rotation - Depending on the value of Location Type this is either a relative offset from the attach component/point or an absolute world rotation that will be translated to a relative offset\n@param LocationType - Specifies whether Location is a relative offset or an absolute world position\n@param bStopWhenAttachedToDestroyed - Specifies whether the sound should stop playing when the owner of the attach to component is destroyed.\n@param VolumeMultiplier - Volume multiplier\n@param PitchMultiplier - PitchMultiplier\n@param StartTime - How far in to the sound to begin playback at\n@param AttenuationSettings - Override attenuation settings package to play sound with\n@return An audio component to manipulate the spawned sound"));
			MetaData->SetValue(ReturnFunction, TEXT("UnsafeDuringActorConstruction"), TEXT("true"));
			MetaData->SetValue(NewProp_ReturnValue, TEXT("EditInline"), TEXT("true"));
			MetaData->SetValue(NewProp_AttachToComponent, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayStatics_UnloadStreamLevel()
	{
		struct GameplayStatics_eventUnloadStreamLevel_Parms
		{
			UObject* WorldContextObject;
			FName LevelName;
			FLatentActionInfo LatentInfo;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("UnloadStreamLevel"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(GameplayStatics_eventUnloadStreamLevel_Parms));
			UProperty* NewProp_LatentInfo = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LatentInfo"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LatentInfo, GameplayStatics_eventUnloadStreamLevel_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FLatentActionInfo());
			UProperty* NewProp_LevelName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LevelName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(LevelName, GameplayStatics_eventUnloadStreamLevel_Parms), 0x0000000000000080);
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, GameplayStatics_eventUnloadStreamLevel_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Game"));
			MetaData->SetValue(ReturnFunction, TEXT("Latent"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("LatentInfo"), TEXT("LatentInfo"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Unload a streamed in level"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UGameplayStatics_NoRegister()
	{
		return UGameplayStatics::StaticClass();
	}
	UClass* Z_Construct_UClass_UGameplayStatics()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBlueprintFunctionLibrary();
			Z_Construct_UPackage_Engine();
			OuterClass = UGameplayStatics::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_ActivateReverbEffect());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_ApplyDamage());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_ApplyPointDamage());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_ApplyRadialDamage());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_ApplyRadialDamageWithFalloff());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_AreAnyListenersWithinRange());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_BeginDeferredActorSpawnFromClass());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_BeginSpawningActorFromBlueprint());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_BeginSpawningActorFromClass());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_BlueprintSuggestProjectileVelocity());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_BreakHitResult());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_CancelAsyncLoading());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_ClearSoundMixModifiers());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_CreatePlayer());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_CreateSaveGameObject());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_CreateSaveGameObjectFromBlueprint());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_DeactivateReverbEffect());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_DeleteGameInSlot());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_DeprojectScreenToWorld());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_DoesSaveGameExist());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_EnableLiveStreaming());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_FinishSpawningActor());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_FlushLevelStreaming());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_GetAccurateRealTime());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_GetActorArrayAverageLocation());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_GetActorArrayBounds());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_GetAllActorsOfClass());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_GetAllActorsWithInterface());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_GetAudioTimeSeconds());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_GetCurrentLevelName());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_GetGameInstance());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_GetGameMode());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_GetGameState());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_GetGlobalTimeDilation());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_GetIntOption());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_GetKeyValue());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_GetObjectClass());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_GetPlatformName());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_GetPlayerCameraManager());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_GetPlayerCharacter());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_GetPlayerController());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_GetPlayerPawn());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_GetRealTimeSeconds());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_GetStreamingLevel());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_GetSurfaceType());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_GetWorldDeltaSeconds());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_GetWorldOriginLocation());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_GrassOverlappingSphereCount());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_HasOption());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_IsGamePaused());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_LoadGameFromSlot());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_LoadStreamLevel());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_OpenLevel());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_ParseOption());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_PlayDialogue2D());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_PlayDialogueAtLocation());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_PlaySound2D());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_PlaySoundAtLocation());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_PlayWorldCameraShake());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_PopSoundMixModifier());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_ProjectWorldToScreen());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_PushSoundMixModifier());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_RemovePlayer());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_SaveGameToSlot());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_SetBaseSoundMix());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_SetGamePaused());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_SetGlobalTimeDilation());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_SetWorldOriginLocation());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_SpawnDecalAtLocation());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_SpawnDecalAttached());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_SpawnDialogue2D());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_SpawnDialogueAtLocation());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_SpawnDialogueAttached());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_SpawnEmitterAtLocation());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_SpawnEmitterAttached());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_SpawnObject());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_SpawnSound2D());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_SpawnSoundAtLocation());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_SpawnSoundAttached());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayStatics_UnloadStreamLevel());

				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_ActivateReverbEffect()); // 3978119737
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_ApplyDamage()); // 1808949458
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_ApplyPointDamage()); // 2194951310
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_ApplyRadialDamage()); // 2065737030
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_ApplyRadialDamageWithFalloff()); // 3268002591
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_AreAnyListenersWithinRange()); // 3555106846
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_BeginDeferredActorSpawnFromClass()); // 434666226
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_BeginSpawningActorFromBlueprint()); // 3034064351
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_BeginSpawningActorFromClass()); // 966812770
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_BlueprintSuggestProjectileVelocity()); // 1203731299
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_BreakHitResult()); // 2452608314
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_CancelAsyncLoading()); // 1830686381
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_ClearSoundMixModifiers()); // 3821850323
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_CreatePlayer()); // 729133888
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_CreateSaveGameObject()); // 1641069825
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_CreateSaveGameObjectFromBlueprint()); // 99621943
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_DeactivateReverbEffect()); // 1621043272
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_DeleteGameInSlot()); // 2394354991
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_DeprojectScreenToWorld()); // 1081170570
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_DoesSaveGameExist()); // 1982030602
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_EnableLiveStreaming()); // 685883731
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_FinishSpawningActor()); // 1349869154
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_FlushLevelStreaming()); // 3060453479
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_GetAccurateRealTime()); // 1201736014
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_GetActorArrayAverageLocation()); // 3008028723
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_GetActorArrayBounds()); // 959998413
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_GetAllActorsOfClass()); // 1526634451
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_GetAllActorsWithInterface()); // 3871771691
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_GetAudioTimeSeconds()); // 2731194378
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_GetCurrentLevelName()); // 2594487668
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_GetGameInstance()); // 1437358754
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_GetGameMode()); // 1234797075
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_GetGameState()); // 896475833
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_GetGlobalTimeDilation()); // 833271189
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_GetIntOption()); // 2735892082
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_GetKeyValue()); // 3392086363
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_GetObjectClass()); // 2369973171
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_GetPlatformName()); // 3480075602
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_GetPlayerCameraManager()); // 2829825009
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_GetPlayerCharacter()); // 1195555205
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_GetPlayerController()); // 3050388484
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_GetPlayerPawn()); // 3407336699
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_GetRealTimeSeconds()); // 802811257
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_GetStreamingLevel()); // 282300857
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_GetSurfaceType()); // 3595758371
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_GetWorldDeltaSeconds()); // 3588282443
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_GetWorldOriginLocation()); // 1816914029
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_GrassOverlappingSphereCount()); // 306920534
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_HasOption()); // 2602444637
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_IsGamePaused()); // 579806084
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_LoadGameFromSlot()); // 1498729756
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_LoadStreamLevel()); // 4146294328
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_OpenLevel()); // 2353281602
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_ParseOption()); // 3417168006
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_PlayDialogue2D()); // 1231268482
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_PlayDialogueAtLocation()); // 738450128
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_PlaySound2D()); // 3848786575
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_PlaySoundAtLocation()); // 2771629538
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_PlayWorldCameraShake()); // 1153438595
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_PopSoundMixModifier()); // 3281564000
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_ProjectWorldToScreen()); // 1916112382
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_PushSoundMixModifier()); // 2318789264
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_RemovePlayer()); // 683600803
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_SaveGameToSlot()); // 3639087355
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_SetBaseSoundMix()); // 716152844
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_SetGamePaused()); // 3219248873
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_SetGlobalTimeDilation()); // 1236853433
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_SetWorldOriginLocation()); // 4211464460
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_SpawnDecalAtLocation()); // 1220059285
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_SpawnDecalAttached()); // 1220574151
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_SpawnDialogue2D()); // 2918934600
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_SpawnDialogueAtLocation()); // 2733967817
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_SpawnDialogueAttached()); // 2505179534
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_SpawnEmitterAtLocation()); // 29318582
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_SpawnEmitterAttached()); // 1889995117
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_SpawnObject()); // 3674254896
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_SpawnSound2D()); // 4010974748
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_SpawnSoundAtLocation()); // 1394067288
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_SpawnSoundAttached()); // 2110683269
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayStatics_UnloadStreamLevel()); // 1819721803
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Kismet/GameplayStatics.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/GameplayStatics.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UGameplayStatics(Z_Construct_UClass_UGameplayStatics, TEXT("UGameplayStatics"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UGameplayStatics);
	UEnum* Z_Construct_UEnum_Engine_EOrientPositionSelector()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EOrientPositionSelector_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EOrientPositionSelector"), 0, Get_Z_Construct_UEnum_Engine_EOrientPositionSelector_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EOrientPositionSelector"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EOrientPositionSelector::Orientation")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EOrientPositionSelector::Position")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EOrientPositionSelector::OrientationAndPosition")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EOrientPositionSelector::EOrientPositionSelector_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/HeadMountedDisplayFunctionLibrary.h"));
			MetaData->SetValue(ReturnEnum, TEXT("Orientation.DisplayName"), TEXT("Orientation"));
			MetaData->SetValue(ReturnEnum, TEXT("OrientationAndPosition.DisplayName"), TEXT("Orientation and Position"));
			MetaData->SetValue(ReturnEnum, TEXT("Position.DisplayName"), TEXT("Position"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EOrientPositionSelector_CRC() { return 814580504U; }
	UFunction* Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_EnableHMD()
	{
		struct HeadMountedDisplayFunctionLibrary_eventEnableHMD_Parms
		{
			bool bEnable;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UHeadMountedDisplayFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EnableHMD"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(HeadMountedDisplayFunctionLibrary_eventEnableHMD_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, HeadMountedDisplayFunctionLibrary_eventEnableHMD_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, HeadMountedDisplayFunctionLibrary_eventEnableHMD_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, HeadMountedDisplayFunctionLibrary_eventEnableHMD_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnable, HeadMountedDisplayFunctionLibrary_eventEnableHMD_Parms, bool);
			UProperty* NewProp_bEnable = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bEnable"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnable, HeadMountedDisplayFunctionLibrary_eventEnableHMD_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bEnable, HeadMountedDisplayFunctionLibrary_eventEnableHMD_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Input|HeadMountedDisplay"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/HeadMountedDisplayFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Switches to/from using HMD and stereo rendering.\n\n@param bEnable                       (in) 'true' to enable HMD / stereo; 'false' otherwise\n@return (Boolean)            True, if the request was successful."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_EnableLowPersistenceMode()
	{
		struct HeadMountedDisplayFunctionLibrary_eventEnableLowPersistenceMode_Parms
		{
			bool bEnable;
		};
		UObject* Outer=Z_Construct_UClass_UHeadMountedDisplayFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EnableLowPersistenceMode"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(HeadMountedDisplayFunctionLibrary_eventEnableLowPersistenceMode_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnable, HeadMountedDisplayFunctionLibrary_eventEnableLowPersistenceMode_Parms, bool);
			UProperty* NewProp_bEnable = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bEnable"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnable, HeadMountedDisplayFunctionLibrary_eventEnableLowPersistenceMode_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bEnable, HeadMountedDisplayFunctionLibrary_eventEnableLowPersistenceMode_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Input|HeadMountedDisplay"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/HeadMountedDisplayFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Switches between low and full persistence modes.\n\n@param bEnable                       (in) 'true' to enable low persistence mode; 'false' otherwise"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_GetOrientationAndPosition()
	{
		struct HeadMountedDisplayFunctionLibrary_eventGetOrientationAndPosition_Parms
		{
			FRotator DeviceRotation;
			FVector DevicePosition;
		};
		UObject* Outer=Z_Construct_UClass_UHeadMountedDisplayFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetOrientationAndPosition"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(HeadMountedDisplayFunctionLibrary_eventGetOrientationAndPosition_Parms));
			UProperty* NewProp_DevicePosition = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DevicePosition"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DevicePosition, HeadMountedDisplayFunctionLibrary_eventGetOrientationAndPosition_Parms), 0x0000000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_DeviceRotation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DeviceRotation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DeviceRotation, HeadMountedDisplayFunctionLibrary_eventGetOrientationAndPosition_Parms), 0x0000000000000180, Z_Construct_UScriptStruct_FRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Input|HeadMountedDisplay"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/HeadMountedDisplayFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Grabs the current orientation and position for the HMD.  If positional tracking is not available, DevicePosition will be a zero vector\n\n@param DeviceRotation        (out) The device's current rotation\n@param DevicePosition        (out) The device's current position, in its own tracking space"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_GetPositionalTrackingCameraParameters()
	{
		struct HeadMountedDisplayFunctionLibrary_eventGetPositionalTrackingCameraParameters_Parms
		{
			FVector CameraOrigin;
			FRotator CameraRotation;
			float HFOV;
			float VFOV;
			float CameraDistance;
			float NearPlane;
			float FarPlane;
		};
		UObject* Outer=Z_Construct_UClass_UHeadMountedDisplayFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetPositionalTrackingCameraParameters"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(HeadMountedDisplayFunctionLibrary_eventGetPositionalTrackingCameraParameters_Parms));
			UProperty* NewProp_FarPlane = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FarPlane"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(FarPlane, HeadMountedDisplayFunctionLibrary_eventGetPositionalTrackingCameraParameters_Parms), 0x0000000000000180);
			UProperty* NewProp_NearPlane = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NearPlane"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(NearPlane, HeadMountedDisplayFunctionLibrary_eventGetPositionalTrackingCameraParameters_Parms), 0x0000000000000180);
			UProperty* NewProp_CameraDistance = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CameraDistance"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(CameraDistance, HeadMountedDisplayFunctionLibrary_eventGetPositionalTrackingCameraParameters_Parms), 0x0000000000000180);
			UProperty* NewProp_VFOV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VFOV"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(VFOV, HeadMountedDisplayFunctionLibrary_eventGetPositionalTrackingCameraParameters_Parms), 0x0000000000000180);
			UProperty* NewProp_HFOV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("HFOV"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(HFOV, HeadMountedDisplayFunctionLibrary_eventGetPositionalTrackingCameraParameters_Parms), 0x0000000000000180);
			UProperty* NewProp_CameraRotation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CameraRotation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(CameraRotation, HeadMountedDisplayFunctionLibrary_eventGetPositionalTrackingCameraParameters_Parms), 0x0000000000000180, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_CameraOrigin = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CameraOrigin"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(CameraOrigin, HeadMountedDisplayFunctionLibrary_eventGetPositionalTrackingCameraParameters_Parms), 0x0000000000000180, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Input|HeadMountedDisplay"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/HeadMountedDisplayFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("If the HMD has a positional tracking camera, this will return the game-world location of the camera, as well as the parameters for the bounding region of tracking.\nThis allows an in-game representation of the legal positional tracking range.  All values will be zeroed if the camera is not available or the HMD does not support it.\n\n@param CameraOrigin          (out) Origin, in world-space, of the tracking camera\n@param CameraRotation        (out) Rotation, in world-space, of the tracking camera\n@param HFOV                          (out) Field-of-view, horizontal, in degrees, of the valid tracking zone of the camera\n@param VFOV                          (out) Field-of-view, vertical, in degrees, of the valid tracking zone of the camera\n@param CameraDistance        (out) Nominal distance to camera, in world-space\n@param NearPlane                     (out) Near plane distance of the tracking volume, in world-space\n@param FarPlane                      (out) Far plane distance of the tracking volume, in world-space"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_GetScreenPercentage()
	{
		struct HeadMountedDisplayFunctionLibrary_eventGetScreenPercentage_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UHeadMountedDisplayFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetScreenPercentage"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(HeadMountedDisplayFunctionLibrary_eventGetScreenPercentage_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, HeadMountedDisplayFunctionLibrary_eventGetScreenPercentage_Parms), 0x0000000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Input|HeadMountedDisplay"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/HeadMountedDisplayFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns screen percentage to be used in VR mode.\n\n@return (float)      The screen percentage to be used in VR mode."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_GetWorldToMetersScale()
	{
		struct HeadMountedDisplayFunctionLibrary_eventGetWorldToMetersScale_Parms
		{
			UObject* WorldContext;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UHeadMountedDisplayFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetWorldToMetersScale"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(HeadMountedDisplayFunctionLibrary_eventGetWorldToMetersScale_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, HeadMountedDisplayFunctionLibrary_eventGetWorldToMetersScale_Parms), 0x0000000000000580);
			UProperty* NewProp_WorldContext = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContext"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContext, HeadMountedDisplayFunctionLibrary_eventGetWorldToMetersScale_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Input|HeadMountedDisplay"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/HeadMountedDisplayFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the World to Meters scale, which corresponds to the scale of the world as perceived by the player\n\n@return       How many Unreal units correspond to one meter in the real world"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContext"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_HasValidTrackingPosition()
	{
		struct HeadMountedDisplayFunctionLibrary_eventHasValidTrackingPosition_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UHeadMountedDisplayFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("HasValidTrackingPosition"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(HeadMountedDisplayFunctionLibrary_eventHasValidTrackingPosition_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, HeadMountedDisplayFunctionLibrary_eventHasValidTrackingPosition_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, HeadMountedDisplayFunctionLibrary_eventHasValidTrackingPosition_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, HeadMountedDisplayFunctionLibrary_eventHasValidTrackingPosition_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Input|HeadMountedDisplay"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/HeadMountedDisplayFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("If the HMD supports positional tracking, whether or not we are currently being tracked"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_IsHeadMountedDisplayEnabled()
	{
		struct HeadMountedDisplayFunctionLibrary_eventIsHeadMountedDisplayEnabled_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UHeadMountedDisplayFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsHeadMountedDisplayEnabled"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(HeadMountedDisplayFunctionLibrary_eventIsHeadMountedDisplayEnabled_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, HeadMountedDisplayFunctionLibrary_eventIsHeadMountedDisplayEnabled_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, HeadMountedDisplayFunctionLibrary_eventIsHeadMountedDisplayEnabled_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, HeadMountedDisplayFunctionLibrary_eventIsHeadMountedDisplayEnabled_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Input|HeadMountedDisplay"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/HeadMountedDisplayFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns whether or not we are currently using the head mounted display.\n\n@return (Boolean)  status of HMD"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_IsInLowPersistenceMode()
	{
		struct HeadMountedDisplayFunctionLibrary_eventIsInLowPersistenceMode_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UHeadMountedDisplayFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsInLowPersistenceMode"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(HeadMountedDisplayFunctionLibrary_eventIsInLowPersistenceMode_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, HeadMountedDisplayFunctionLibrary_eventIsInLowPersistenceMode_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, HeadMountedDisplayFunctionLibrary_eventIsInLowPersistenceMode_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, HeadMountedDisplayFunctionLibrary_eventIsInLowPersistenceMode_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Input|HeadMountedDisplay"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/HeadMountedDisplayFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true, if HMD is in low persistence mode. 'false' otherwise."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_ResetOrientationAndPosition()
	{
		struct HeadMountedDisplayFunctionLibrary_eventResetOrientationAndPosition_Parms
		{
			float Yaw;
			TEnumAsByte<EOrientPositionSelector::Type> Options;
		};
		UObject* Outer=Z_Construct_UClass_UHeadMountedDisplayFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ResetOrientationAndPosition"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(HeadMountedDisplayFunctionLibrary_eventResetOrientationAndPosition_Parms));
			UProperty* NewProp_Options = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Options"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(Options, HeadMountedDisplayFunctionLibrary_eventResetOrientationAndPosition_Parms), 0x0000000000000080, Z_Construct_UEnum_Engine_EOrientPositionSelector());
			UProperty* NewProp_Yaw = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Yaw"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Yaw, HeadMountedDisplayFunctionLibrary_eventResetOrientationAndPosition_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Input|HeadMountedDisplay"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Options"), TEXT("OrientationAndPosition"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Yaw"), TEXT("0.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/HeadMountedDisplayFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Resets orientation by setting roll and pitch to 0, assuming that current yaw is forward direction and assuming\ncurrent position as a 'zero-point' (for positional tracking).\n\n@param Yaw                           (in) the desired yaw to be set after orientation reset.\n@param Options                       (in) specifies either position, orientation or both should be reset."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_SetClippingPlanes()
	{
		struct HeadMountedDisplayFunctionLibrary_eventSetClippingPlanes_Parms
		{
			float Near;
			float Far;
		};
		UObject* Outer=Z_Construct_UClass_UHeadMountedDisplayFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetClippingPlanes"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(HeadMountedDisplayFunctionLibrary_eventSetClippingPlanes_Parms));
			UProperty* NewProp_Far = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Far"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Far, HeadMountedDisplayFunctionLibrary_eventSetClippingPlanes_Parms), 0x0000000000000080);
			UProperty* NewProp_Near = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Near"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Near, HeadMountedDisplayFunctionLibrary_eventSetClippingPlanes_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Input|HeadMountedDisplay"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/HeadMountedDisplayFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets near and far clipping planes (NCP and FCP) for stereo rendering. Similar to 'stereo ncp= fcp' console command, but NCP and FCP set by this\ncall won't be saved in .ini file.\n\n@param Near                          (in) Near clipping plane, in centimeters\n@param Far                           (in) Far clipping plane, in centimeters"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_SetWorldToMetersScale()
	{
		struct HeadMountedDisplayFunctionLibrary_eventSetWorldToMetersScale_Parms
		{
			UObject* WorldContext;
			float NewScale;
		};
		UObject* Outer=Z_Construct_UClass_UHeadMountedDisplayFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetWorldToMetersScale"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(HeadMountedDisplayFunctionLibrary_eventSetWorldToMetersScale_Parms));
			UProperty* NewProp_NewScale = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewScale"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(NewScale, HeadMountedDisplayFunctionLibrary_eventSetWorldToMetersScale_Parms), 0x0000000000000080);
			UProperty* NewProp_WorldContext = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContext"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContext, HeadMountedDisplayFunctionLibrary_eventSetWorldToMetersScale_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Input|HeadMountedDisplay"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_NewScale"), TEXT("100.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/HeadMountedDisplayFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the World to Meters scale, which changes the scale of the world as perceived by the player\n\n@param NewScale       Specifies how many Unreal units correspond to one meter in the real world"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContext"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UHeadMountedDisplayFunctionLibrary_NoRegister()
	{
		return UHeadMountedDisplayFunctionLibrary::StaticClass();
	}
	UClass* Z_Construct_UClass_UHeadMountedDisplayFunctionLibrary()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBlueprintFunctionLibrary();
			Z_Construct_UPackage_Engine();
			OuterClass = UHeadMountedDisplayFunctionLibrary::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_EnableHMD());
				OuterClass->LinkChild(Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_EnableLowPersistenceMode());
				OuterClass->LinkChild(Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_GetOrientationAndPosition());
				OuterClass->LinkChild(Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_GetPositionalTrackingCameraParameters());
				OuterClass->LinkChild(Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_GetScreenPercentage());
				OuterClass->LinkChild(Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_GetWorldToMetersScale());
				OuterClass->LinkChild(Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_HasValidTrackingPosition());
				OuterClass->LinkChild(Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_IsHeadMountedDisplayEnabled());
				OuterClass->LinkChild(Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_IsInLowPersistenceMode());
				OuterClass->LinkChild(Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_ResetOrientationAndPosition());
				OuterClass->LinkChild(Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_SetClippingPlanes());
				OuterClass->LinkChild(Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_SetWorldToMetersScale());

				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_EnableHMD()); // 321880326
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_EnableLowPersistenceMode()); // 1128886913
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_GetOrientationAndPosition()); // 1810572352
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_GetPositionalTrackingCameraParameters()); // 399452581
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_GetScreenPercentage()); // 1857452664
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_GetWorldToMetersScale()); // 1099090793
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_HasValidTrackingPosition()); // 1732113526
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_IsHeadMountedDisplayEnabled()); // 10776311
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_IsInLowPersistenceMode()); // 1313354764
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_ResetOrientationAndPosition()); // 513581783
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_SetClippingPlanes()); // 2612981710
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_SetWorldToMetersScale()); // 3905292057
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Kismet/HeadMountedDisplayFunctionLibrary.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/HeadMountedDisplayFunctionLibrary.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UHeadMountedDisplayFunctionLibrary(Z_Construct_UClass_UHeadMountedDisplayFunctionLibrary, TEXT("UHeadMountedDisplayFunctionLibrary"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UHeadMountedDisplayFunctionLibrary);
	UFunction* Z_Construct_UFunction_UKismetArrayLibrary_Array_Add()
	{
		struct KismetArrayLibrary_eventArray_Add_Parms
		{
			TArray<int32> TargetArray;
			int32 NewItem;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetArrayLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Array_Add"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(KismetArrayLibrary_eventArray_Add_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, KismetArrayLibrary_eventArray_Add_Parms), 0x0000000000000580);
			UProperty* NewProp_NewItem = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewItem"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(NewItem, KismetArrayLibrary_eventArray_Add_Parms), 0x0000000008000182);
			UProperty* NewProp_TargetArray = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TargetArray"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(TargetArray, KismetArrayLibrary_eventArray_Add_Parms), 0x0000000008000182);
			UProperty* NewProp_TargetArray_Inner = new(EC_InternalUseOnlyConstructor, NewProp_TargetArray, TEXT("TargetArray"), RF_Public|RF_Transient|RF_Native) UIntProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ArrayParm"), TEXT("TargetArray"));
			MetaData->SetValue(ReturnFunction, TEXT("ArrayTypeDependentParams"), TEXT("NewItem"));
			MetaData->SetValue(ReturnFunction, TEXT("AutoCreateRefTerm"), TEXT("NewItem"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Array"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("ADD"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Add"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetArrayLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Add item to array\n\n@param        TargetArray             The array to add item to\n@param        NewItem                 The item to add to the array\n@return       The index of the newly added item"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetArrayLibrary_Array_AddUnique()
	{
		struct KismetArrayLibrary_eventArray_AddUnique_Parms
		{
			TArray<int32> TargetArray;
			int32 NewItem;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetArrayLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Array_AddUnique"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(KismetArrayLibrary_eventArray_AddUnique_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, KismetArrayLibrary_eventArray_AddUnique_Parms), 0x0000000000000580);
			UProperty* NewProp_NewItem = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewItem"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(NewItem, KismetArrayLibrary_eventArray_AddUnique_Parms), 0x0000000008000182);
			UProperty* NewProp_TargetArray = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TargetArray"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(TargetArray, KismetArrayLibrary_eventArray_AddUnique_Parms), 0x0000000008000182);
			UProperty* NewProp_TargetArray_Inner = new(EC_InternalUseOnlyConstructor, NewProp_TargetArray, TEXT("TargetArray"), RF_Public|RF_Transient|RF_Native) UIntProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ArrayParm"), TEXT("TargetArray"));
			MetaData->SetValue(ReturnFunction, TEXT("ArrayTypeDependentParams"), TEXT("NewItem"));
			MetaData->SetValue(ReturnFunction, TEXT("AutoCreateRefTerm"), TEXT("NewItem"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Array"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("ADDUNIQUE"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Add Unique"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetArrayLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Add item to array (unique)\n\n@param         TargetArray             The array to add item to\n@param         NewItem                 The item to add to the array\n@return        The index of the newly added item, or INDEX_NONE if the item is already present in the array"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetArrayLibrary_Array_Append()
	{
		struct KismetArrayLibrary_eventArray_Append_Parms
		{
			TArray<int32> TargetArray;
			TArray<int32> SourceArray;
		};
		UObject* Outer=Z_Construct_UClass_UKismetArrayLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Array_Append"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(KismetArrayLibrary_eventArray_Append_Parms));
			UProperty* NewProp_SourceArray = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SourceArray"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(SourceArray, KismetArrayLibrary_eventArray_Append_Parms), 0x0000000008000182);
			UProperty* NewProp_SourceArray_Inner = new(EC_InternalUseOnlyConstructor, NewProp_SourceArray, TEXT("SourceArray"), RF_Public|RF_Transient|RF_Native) UIntProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_TargetArray = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TargetArray"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(TargetArray, KismetArrayLibrary_eventArray_Append_Parms), 0x0000000008000182);
			UProperty* NewProp_TargetArray_Inner = new(EC_InternalUseOnlyConstructor, NewProp_TargetArray, TEXT("TargetArray"), RF_Public|RF_Transient|RF_Native) UIntProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ArrayParm"), TEXT("TargetArray,SourceArray"));
			MetaData->SetValue(ReturnFunction, TEXT("ArrayTypeDependentParams"), TEXT("SourceArray"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Array"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("APPEND"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Append Array"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetArrayLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Append an array to another array\n\n@param        TargetArray             The array to add the source array to\n@param        SourceArray             The array to add to the target array"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetArrayLibrary_Array_Clear()
	{
		struct KismetArrayLibrary_eventArray_Clear_Parms
		{
			TArray<int32> TargetArray;
		};
		UObject* Outer=Z_Construct_UClass_UKismetArrayLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Array_Clear"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(KismetArrayLibrary_eventArray_Clear_Parms));
			UProperty* NewProp_TargetArray = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TargetArray"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(TargetArray, KismetArrayLibrary_eventArray_Clear_Parms), 0x0000000008000182);
			UProperty* NewProp_TargetArray_Inner = new(EC_InternalUseOnlyConstructor, NewProp_TargetArray, TEXT("TargetArray"), RF_Public|RF_Transient|RF_Native) UIntProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ArrayParm"), TEXT("TargetArray"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Array"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("CLEAR"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Clear"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetArrayLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("*Clear an array, removes all content\n*\n*@param        TargetArray             The array to clear"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetArrayLibrary_Array_Contains()
	{
		struct KismetArrayLibrary_eventArray_Contains_Parms
		{
			TArray<int32> TargetArray;
			int32 ItemToFind;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetArrayLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Array_Contains"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(KismetArrayLibrary_eventArray_Contains_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetArrayLibrary_eventArray_Contains_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetArrayLibrary_eventArray_Contains_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetArrayLibrary_eventArray_Contains_Parms), sizeof(bool), true);
			UProperty* NewProp_ItemToFind = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ItemToFind"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ItemToFind, KismetArrayLibrary_eventArray_Contains_Parms), 0x0000000008000182);
			UProperty* NewProp_TargetArray = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TargetArray"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(TargetArray, KismetArrayLibrary_eventArray_Contains_Parms), 0x0000000008000182);
			UProperty* NewProp_TargetArray_Inner = new(EC_InternalUseOnlyConstructor, NewProp_TargetArray, TEXT("TargetArray"), RF_Public|RF_Transient|RF_Native) UIntProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ArrayParm"), TEXT("TargetArray"));
			MetaData->SetValue(ReturnFunction, TEXT("ArrayTypeDependentParams"), TEXT("ItemToFind"));
			MetaData->SetValue(ReturnFunction, TEXT("AutoCreateRefTerm"), TEXT("ItemToFind"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Array"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("CONTAINS"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Contains Item"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetArrayLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("*Returns true if the array contains the given item\n*\n*@param        TargetArray             The array to search for the item\n*@param        ItemToFind              The item to look for\n*@return       True if the item was found within the array"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetArrayLibrary_Array_Find()
	{
		struct KismetArrayLibrary_eventArray_Find_Parms
		{
			TArray<int32> TargetArray;
			int32 ItemToFind;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetArrayLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Array_Find"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(KismetArrayLibrary_eventArray_Find_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, KismetArrayLibrary_eventArray_Find_Parms), 0x0000000000000580);
			UProperty* NewProp_ItemToFind = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ItemToFind"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ItemToFind, KismetArrayLibrary_eventArray_Find_Parms), 0x0000000008000182);
			UProperty* NewProp_TargetArray = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TargetArray"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(TargetArray, KismetArrayLibrary_eventArray_Find_Parms), 0x0000000008000182);
			UProperty* NewProp_TargetArray_Inner = new(EC_InternalUseOnlyConstructor, NewProp_TargetArray, TEXT("TargetArray"), RF_Public|RF_Transient|RF_Native) UIntProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ArrayParm"), TEXT("TargetArray"));
			MetaData->SetValue(ReturnFunction, TEXT("ArrayTypeDependentParams"), TEXT("ItemToFind"));
			MetaData->SetValue(ReturnFunction, TEXT("AutoCreateRefTerm"), TEXT("ItemToFind"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Array"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("FIND"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Find Item"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetArrayLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("*Finds the index of the first instance of the item within the array\n*\n*@param        TargetArray             The array to search for the item\n*@param        ItemToFind              The item to look for\n*@return       The index the item was found at, or -1 if not found"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetArrayLibrary_Array_Get()
	{
		struct KismetArrayLibrary_eventArray_Get_Parms
		{
			TArray<int32> TargetArray;
			int32 Index;
			int32 Item;
		};
		UObject* Outer=Z_Construct_UClass_UKismetArrayLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Array_Get"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(KismetArrayLibrary_eventArray_Get_Parms));
			UProperty* NewProp_Item = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Item"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Item, KismetArrayLibrary_eventArray_Get_Parms), 0x0000000000000180);
			UProperty* NewProp_Index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Index"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Index, KismetArrayLibrary_eventArray_Get_Parms), 0x0000000000000080);
			UProperty* NewProp_TargetArray = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TargetArray"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(TargetArray, KismetArrayLibrary_eventArray_Get_Parms), 0x0000000008000182);
			UProperty* NewProp_TargetArray_Inner = new(EC_InternalUseOnlyConstructor, NewProp_TargetArray, TEXT("TargetArray"), RF_Public|RF_Transient|RF_Native) UIntProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ArrayParm"), TEXT("TargetArray"));
			MetaData->SetValue(ReturnFunction, TEXT("ArrayTypeDependentParams"), TEXT("Item"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Array"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("GET"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Get"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetArrayLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("*Given an array and an index, returns the item found at that index\n*\n*@param        TargetArray             The array to get an item from\n*@param        Index                   The index in the array to get an item from\n*@return       The item stored at the index"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetArrayLibrary_Array_Insert()
	{
		struct KismetArrayLibrary_eventArray_Insert_Parms
		{
			TArray<int32> TargetArray;
			int32 NewItem;
			int32 Index;
		};
		UObject* Outer=Z_Construct_UClass_UKismetArrayLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Array_Insert"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(KismetArrayLibrary_eventArray_Insert_Parms));
			UProperty* NewProp_Index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Index"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Index, KismetArrayLibrary_eventArray_Insert_Parms), 0x0000000000000080);
			UProperty* NewProp_NewItem = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewItem"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(NewItem, KismetArrayLibrary_eventArray_Insert_Parms), 0x0000000008000182);
			UProperty* NewProp_TargetArray = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TargetArray"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(TargetArray, KismetArrayLibrary_eventArray_Insert_Parms), 0x0000000008000182);
			UProperty* NewProp_TargetArray_Inner = new(EC_InternalUseOnlyConstructor, NewProp_TargetArray, TEXT("TargetArray"), RF_Public|RF_Transient|RF_Native) UIntProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ArrayParm"), TEXT("TargetArray"));
			MetaData->SetValue(ReturnFunction, TEXT("ArrayTypeDependentParams"), TEXT("NewItem"));
			MetaData->SetValue(ReturnFunction, TEXT("AutoCreateRefTerm"), TEXT("NewItem"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Array"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("INSERT"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Insert"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetArrayLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("*Insert item at the given index into the array.\n*\n*@param        TargetArray             The array to insert into\n*@param        NewItem                 The item to insert into the array\n*@param        Index                   The index at which to insert the item into the array"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetArrayLibrary_Array_LastIndex()
	{
		struct KismetArrayLibrary_eventArray_LastIndex_Parms
		{
			TArray<int32> TargetArray;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetArrayLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Array_LastIndex"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(KismetArrayLibrary_eventArray_LastIndex_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, KismetArrayLibrary_eventArray_LastIndex_Parms), 0x0000000000000580);
			UProperty* NewProp_TargetArray = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TargetArray"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(TargetArray, KismetArrayLibrary_eventArray_LastIndex_Parms), 0x0000000008000182);
			UProperty* NewProp_TargetArray_Inner = new(EC_InternalUseOnlyConstructor, NewProp_TargetArray, TEXT("TargetArray"), RF_Public|RF_Transient|RF_Native) UIntProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ArrayParm"), TEXT("TargetArray"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Array"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("LAST INDEX"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Last Index"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetArrayLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("*Get the last valid index into an array\n*\n*@param        TargetArray             The array to perform the operation on\n*@return       The last valid index of the array"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetArrayLibrary_Array_Length()
	{
		struct KismetArrayLibrary_eventArray_Length_Parms
		{
			TArray<int32> TargetArray;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetArrayLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Array_Length"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(KismetArrayLibrary_eventArray_Length_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, KismetArrayLibrary_eventArray_Length_Parms), 0x0000000000000580);
			UProperty* NewProp_TargetArray = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TargetArray"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(TargetArray, KismetArrayLibrary_eventArray_Length_Parms), 0x0000000008000182);
			UProperty* NewProp_TargetArray_Inner = new(EC_InternalUseOnlyConstructor, NewProp_TargetArray, TEXT("TargetArray"), RF_Public|RF_Transient|RF_Native) UIntProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ArrayParm"), TEXT("TargetArray"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Array"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("LENGTH"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Length"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("num size count"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetArrayLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("*Get the number of items in an array\n*\n*@param        TargetArray             The array to get the length of\n*@return       The length of the array"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetArrayLibrary_Array_Remove()
	{
		struct KismetArrayLibrary_eventArray_Remove_Parms
		{
			TArray<int32> TargetArray;
			int32 IndexToRemove;
		};
		UObject* Outer=Z_Construct_UClass_UKismetArrayLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Array_Remove"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(KismetArrayLibrary_eventArray_Remove_Parms));
			UProperty* NewProp_IndexToRemove = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IndexToRemove"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(IndexToRemove, KismetArrayLibrary_eventArray_Remove_Parms), 0x0000000000000080);
			UProperty* NewProp_TargetArray = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TargetArray"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(TargetArray, KismetArrayLibrary_eventArray_Remove_Parms), 0x0000000008000182);
			UProperty* NewProp_TargetArray_Inner = new(EC_InternalUseOnlyConstructor, NewProp_TargetArray, TEXT("TargetArray"), RF_Public|RF_Transient|RF_Native) UIntProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ArrayParm"), TEXT("TargetArray"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Array"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("REMOVE INDEX"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Remove Index"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetArrayLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("*Remove item at the given index from the array.\n*\n*@param        TargetArray             The array to remove from\n*@param        IndexToRemove   The index into the array to remove from"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetArrayLibrary_Array_RemoveItem()
	{
		struct KismetArrayLibrary_eventArray_RemoveItem_Parms
		{
			TArray<int32> TargetArray;
			int32 Item;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetArrayLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Array_RemoveItem"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(KismetArrayLibrary_eventArray_RemoveItem_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetArrayLibrary_eventArray_RemoveItem_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetArrayLibrary_eventArray_RemoveItem_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetArrayLibrary_eventArray_RemoveItem_Parms), sizeof(bool), true);
			UProperty* NewProp_Item = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Item"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Item, KismetArrayLibrary_eventArray_RemoveItem_Parms), 0x0000000008000182);
			UProperty* NewProp_TargetArray = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TargetArray"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(TargetArray, KismetArrayLibrary_eventArray_RemoveItem_Parms), 0x0000000008000182);
			UProperty* NewProp_TargetArray_Inner = new(EC_InternalUseOnlyConstructor, NewProp_TargetArray, TEXT("TargetArray"), RF_Public|RF_Transient|RF_Native) UIntProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ArrayParm"), TEXT("TargetArray"));
			MetaData->SetValue(ReturnFunction, TEXT("ArrayTypeDependentParams"), TEXT("Item"));
			MetaData->SetValue(ReturnFunction, TEXT("AutoCreateRefTerm"), TEXT("Item"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Array"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("REMOVE"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Remove Item"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetArrayLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("*Remove all instances of item from array.\n*\n*@param        TargetArray             The array to remove from\n*@param        Item                    The item to remove from the array\n*@return       True if one or more items were removed"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetArrayLibrary_Array_Resize()
	{
		struct KismetArrayLibrary_eventArray_Resize_Parms
		{
			TArray<int32> TargetArray;
			int32 Size;
		};
		UObject* Outer=Z_Construct_UClass_UKismetArrayLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Array_Resize"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(KismetArrayLibrary_eventArray_Resize_Parms));
			UProperty* NewProp_Size = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Size"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Size, KismetArrayLibrary_eventArray_Resize_Parms), 0x0000000000000080);
			UProperty* NewProp_TargetArray = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TargetArray"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(TargetArray, KismetArrayLibrary_eventArray_Resize_Parms), 0x0000000008000182);
			UProperty* NewProp_TargetArray_Inner = new(EC_InternalUseOnlyConstructor, NewProp_TargetArray, TEXT("TargetArray"), RF_Public|RF_Transient|RF_Native) UIntProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ArrayParm"), TEXT("TargetArray"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Array"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("RESIZE"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Resize"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetArrayLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("*Resize Array to specified size.\n*\n*@param        TargetArray             The array to resize\n*@param        Size                    The new size of the array"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetArrayLibrary_Array_Set()
	{
		struct KismetArrayLibrary_eventArray_Set_Parms
		{
			TArray<int32> TargetArray;
			int32 Index;
			int32 Item;
			bool bSizeToFit;
		};
		UObject* Outer=Z_Construct_UClass_UKismetArrayLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Array_Set"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(KismetArrayLibrary_eventArray_Set_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSizeToFit, KismetArrayLibrary_eventArray_Set_Parms, bool);
			UProperty* NewProp_bSizeToFit = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bSizeToFit"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSizeToFit, KismetArrayLibrary_eventArray_Set_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bSizeToFit, KismetArrayLibrary_eventArray_Set_Parms), sizeof(bool), true);
			UProperty* NewProp_Item = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Item"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Item, KismetArrayLibrary_eventArray_Set_Parms), 0x0000000008000182);
			UProperty* NewProp_Index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Index"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Index, KismetArrayLibrary_eventArray_Set_Parms), 0x0000000000000080);
			UProperty* NewProp_TargetArray = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TargetArray"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(TargetArray, KismetArrayLibrary_eventArray_Set_Parms), 0x0000000008000182);
			UProperty* NewProp_TargetArray_Inner = new(EC_InternalUseOnlyConstructor, NewProp_TargetArray, TEXT("TargetArray"), RF_Public|RF_Transient|RF_Native) UIntProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ArrayParm"), TEXT("TargetArray"));
			MetaData->SetValue(ReturnFunction, TEXT("ArrayTypeDependentParams"), TEXT("Item"));
			MetaData->SetValue(ReturnFunction, TEXT("AutoCreateRefTerm"), TEXT("Item"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Array"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Set Array Elem"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetArrayLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("*Given an array and an index, assigns the item to that array element\n*\n*@param        TargetArray             The array to perform the operation on\n*@param        Index                   The index to assign the item to\n*@param        Item                    The item to assign to the index of the array\n*@param        bSizeToFit              If true, the array will expand if Index is greater than the current size of the array"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetArrayLibrary_Array_Shuffle()
	{
		struct KismetArrayLibrary_eventArray_Shuffle_Parms
		{
			TArray<int32> TargetArray;
		};
		UObject* Outer=Z_Construct_UClass_UKismetArrayLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Array_Shuffle"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(KismetArrayLibrary_eventArray_Shuffle_Parms));
			UProperty* NewProp_TargetArray = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TargetArray"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(TargetArray, KismetArrayLibrary_eventArray_Shuffle_Parms), 0x0000000008000182);
			UProperty* NewProp_TargetArray_Inner = new(EC_InternalUseOnlyConstructor, NewProp_TargetArray, TEXT("TargetArray"), RF_Public|RF_Transient|RF_Native) UIntProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ArrayParm"), TEXT("TargetArray"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Array"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("SHUFFLE"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Shuffle"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetArrayLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Shuffle (randomize) the elements of an array\n\n@param        TargetArray             The array to shuffle"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetArrayLibrary_FilterArray()
	{
		struct KismetArrayLibrary_eventFilterArray_Parms
		{
			TArray<AActor*> TargetArray;
			TSubclassOf<AActor>  FilterClass;
			TArray<AActor*> FilteredArray;
		};
		UObject* Outer=Z_Construct_UClass_UKismetArrayLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FilterArray"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(KismetArrayLibrary_eventFilterArray_Parms));
			UProperty* NewProp_FilteredArray = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FilteredArray"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(FilteredArray, KismetArrayLibrary_eventFilterArray_Parms), 0x0000000000000180);
			UProperty* NewProp_FilteredArray_Inner = new(EC_InternalUseOnlyConstructor, NewProp_FilteredArray, TEXT("FilteredArray"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_FilterClass = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FilterClass"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(FilterClass, KismetArrayLibrary_eventFilterArray_Parms), 0x0004000000000080, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_TargetArray = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TargetArray"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(TargetArray, KismetArrayLibrary_eventFilterArray_Parms), 0x0000000008000182);
			UProperty* NewProp_TargetArray_Inner = new(EC_InternalUseOnlyConstructor, NewProp_TargetArray, TEXT("TargetArray"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Array"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Filter Array"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetArrayLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("*Filter an array based on a Class derived from Actor.\n*\n*@param        TargetArray             The array to filter from\n*@param        FilterClass             The Actor sub-class type that acts as the filter, only objects derived from it will be returned.\n*@return       An array containing only those objects which are derived from the class specified."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetArrayLibrary_SetArrayPropertyByName()
	{
		struct KismetArrayLibrary_eventSetArrayPropertyByName_Parms
		{
			UObject* Object;
			FName PropertyName;
			TArray<int32> Value;
		};
		UObject* Outer=Z_Construct_UClass_UKismetArrayLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetArrayPropertyByName"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(KismetArrayLibrary_eventSetArrayPropertyByName_Parms));
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Value, KismetArrayLibrary_eventSetArrayPropertyByName_Parms), 0x0000000008000182);
			UProperty* NewProp_Value_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Value, TEXT("Value"), RF_Public|RF_Transient|RF_Native) UIntProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_PropertyName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PropertyName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(PropertyName, KismetArrayLibrary_eventSetArrayPropertyByName_Parms), 0x0000000000000080);
			UProperty* NewProp_Object = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Object"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Object, KismetArrayLibrary_eventSetArrayPropertyByName_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ArrayParm"), TEXT("Value"));
			MetaData->SetValue(ReturnFunction, TEXT("ArrayTypeDependentParams"), TEXT("Value"));
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetArrayLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Not exposed to users. Supports setting an array property on an object by name."));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UKismetArrayLibrary_NoRegister()
	{
		return UKismetArrayLibrary::StaticClass();
	}
	UClass* Z_Construct_UClass_UKismetArrayLibrary()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBlueprintFunctionLibrary();
			Z_Construct_UPackage_Engine();
			OuterClass = UKismetArrayLibrary::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_UKismetArrayLibrary_Array_Add());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetArrayLibrary_Array_AddUnique());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetArrayLibrary_Array_Append());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetArrayLibrary_Array_Clear());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetArrayLibrary_Array_Contains());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetArrayLibrary_Array_Find());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetArrayLibrary_Array_Get());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetArrayLibrary_Array_Insert());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetArrayLibrary_Array_LastIndex());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetArrayLibrary_Array_Length());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetArrayLibrary_Array_Remove());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetArrayLibrary_Array_RemoveItem());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetArrayLibrary_Array_Resize());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetArrayLibrary_Array_Set());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetArrayLibrary_Array_Shuffle());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetArrayLibrary_FilterArray());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetArrayLibrary_SetArrayPropertyByName());

				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetArrayLibrary_Array_Add()); // 3159159688
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetArrayLibrary_Array_AddUnique()); // 3307653073
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetArrayLibrary_Array_Append()); // 300926022
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetArrayLibrary_Array_Clear()); // 807788554
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetArrayLibrary_Array_Contains()); // 2772513068
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetArrayLibrary_Array_Find()); // 2440358701
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetArrayLibrary_Array_Get()); // 2771778998
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetArrayLibrary_Array_Insert()); // 3249623654
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetArrayLibrary_Array_LastIndex()); // 2768749001
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetArrayLibrary_Array_Length()); // 3107472255
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetArrayLibrary_Array_Remove()); // 3803880986
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetArrayLibrary_Array_RemoveItem()); // 3278599898
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetArrayLibrary_Array_Resize()); // 1040262275
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetArrayLibrary_Array_Set()); // 2550848405
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetArrayLibrary_Array_Shuffle()); // 2153167441
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetArrayLibrary_FilterArray()); // 1025031070
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetArrayLibrary_SetArrayPropertyByName()); // 1641217459
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Kismet/KismetArrayLibrary.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetArrayLibrary.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UKismetArrayLibrary(Z_Construct_UClass_UKismetArrayLibrary, TEXT("UKismetArrayLibrary"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UKismetArrayLibrary);
	UFunction* Z_Construct_UFunction_UKismetGuidLibrary_Conv_GuidToString()
	{
		struct KismetGuidLibrary_eventConv_GuidToString_Parms
		{
			FGuid InGuid;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetGuidLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Conv_GuidToString"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(KismetGuidLibrary_eventConv_GuidToString_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, KismetGuidLibrary_eventConv_GuidToString_Parms), 0x0000000000000580);
			UProperty* NewProp_InGuid = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InGuid"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InGuid, KismetGuidLibrary_eventConv_GuidToString_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FGuid());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Guid"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("->"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("ToString (Guid)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetGuidLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Converts a GUID value to a string, in the form 'A-B-C-D'"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetGuidLibrary_EqualEqual_GuidGuid()
	{
		struct KismetGuidLibrary_eventEqualEqual_GuidGuid_Parms
		{
			FGuid A;
			FGuid B;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetGuidLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EqualEqual_GuidGuid"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(KismetGuidLibrary_eventEqualEqual_GuidGuid_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetGuidLibrary_eventEqualEqual_GuidGuid_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetGuidLibrary_eventEqualEqual_GuidGuid_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetGuidLibrary_eventEqualEqual_GuidGuid_Parms), sizeof(bool), true);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(B, KismetGuidLibrary_eventEqualEqual_GuidGuid_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FGuid());
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetGuidLibrary_eventEqualEqual_GuidGuid_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FGuid());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Guid"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("=="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Equal (Guid)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetGuidLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if the values are equal (A == B)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetGuidLibrary_Invalidate_Guid()
	{
		struct KismetGuidLibrary_eventInvalidate_Guid_Parms
		{
			FGuid InGuid;
		};
		UObject* Outer=Z_Construct_UClass_UKismetGuidLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Invalidate_Guid"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(KismetGuidLibrary_eventInvalidate_Guid_Parms));
			UProperty* NewProp_InGuid = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InGuid"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InGuid, KismetGuidLibrary_eventInvalidate_Guid_Parms), 0x0000000008000180, Z_Construct_UScriptStruct_FGuid());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Guid"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Invalidate_Guid (Guid)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetGuidLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Invalidates the given GUID"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetGuidLibrary_IsValid_Guid()
	{
		struct KismetGuidLibrary_eventIsValid_Guid_Parms
		{
			FGuid InGuid;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetGuidLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsValid_Guid"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(KismetGuidLibrary_eventIsValid_Guid_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetGuidLibrary_eventIsValid_Guid_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetGuidLibrary_eventIsValid_Guid_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetGuidLibrary_eventIsValid_Guid_Parms), sizeof(bool), true);
			UProperty* NewProp_InGuid = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InGuid"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InGuid, KismetGuidLibrary_eventIsValid_Guid_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FGuid());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Guid"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("isValid?"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("IsValid (Guid)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetGuidLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Checks whether the given GUID is valid"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetGuidLibrary_NewGuid()
	{
		struct KismetGuidLibrary_eventNewGuid_Parms
		{
			FGuid ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetGuidLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NewGuid"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetGuidLibrary_eventNewGuid_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetGuidLibrary_eventNewGuid_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FGuid());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Guid"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetGuidLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns a new unique GUID"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetGuidLibrary_NotEqual_GuidGuid()
	{
		struct KismetGuidLibrary_eventNotEqual_GuidGuid_Parms
		{
			FGuid A;
			FGuid B;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetGuidLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NotEqual_GuidGuid"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(KismetGuidLibrary_eventNotEqual_GuidGuid_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetGuidLibrary_eventNotEqual_GuidGuid_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetGuidLibrary_eventNotEqual_GuidGuid_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetGuidLibrary_eventNotEqual_GuidGuid_Parms), sizeof(bool), true);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(B, KismetGuidLibrary_eventNotEqual_GuidGuid_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FGuid());
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetGuidLibrary_eventNotEqual_GuidGuid_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FGuid());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Guid"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("!="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("NotEqual (Guid)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetGuidLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if the values are not equal (A != B)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetGuidLibrary_Parse_StringToGuid()
	{
		struct KismetGuidLibrary_eventParse_StringToGuid_Parms
		{
			FString GuidString;
			FGuid OutGuid;
			bool Success;
		};
		UObject* Outer=Z_Construct_UClass_UKismetGuidLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Parse_StringToGuid"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(KismetGuidLibrary_eventParse_StringToGuid_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(Success, KismetGuidLibrary_eventParse_StringToGuid_Parms, bool);
			UProperty* NewProp_Success = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Success"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Success, KismetGuidLibrary_eventParse_StringToGuid_Parms), 0x0000000000000180, CPP_BOOL_PROPERTY_BITMASK(Success, KismetGuidLibrary_eventParse_StringToGuid_Parms), sizeof(bool), true);
			UProperty* NewProp_OutGuid = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutGuid"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(OutGuid, KismetGuidLibrary_eventParse_StringToGuid_Parms), 0x0000000000000180, Z_Construct_UScriptStruct_FGuid());
			UProperty* NewProp_GuidString = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("GuidString"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(GuidString, KismetGuidLibrary_eventParse_StringToGuid_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Guid"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Parse String to Guid"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetGuidLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Converts a String of format EGuidFormats to a Guid. Returns Guid OutGuid, Returns bool Success"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UKismetGuidLibrary_NoRegister()
	{
		return UKismetGuidLibrary::StaticClass();
	}
	UClass* Z_Construct_UClass_UKismetGuidLibrary()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBlueprintFunctionLibrary();
			Z_Construct_UPackage_Engine();
			OuterClass = UKismetGuidLibrary::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_UKismetGuidLibrary_Conv_GuidToString());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetGuidLibrary_EqualEqual_GuidGuid());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetGuidLibrary_Invalidate_Guid());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetGuidLibrary_IsValid_Guid());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetGuidLibrary_NewGuid());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetGuidLibrary_NotEqual_GuidGuid());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetGuidLibrary_Parse_StringToGuid());

				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetGuidLibrary_Conv_GuidToString()); // 640610248
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetGuidLibrary_EqualEqual_GuidGuid()); // 1189722376
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetGuidLibrary_Invalidate_Guid()); // 3220718356
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetGuidLibrary_IsValid_Guid()); // 2991051515
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetGuidLibrary_NewGuid()); // 3318715530
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetGuidLibrary_NotEqual_GuidGuid()); // 1795890274
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetGuidLibrary_Parse_StringToGuid()); // 214469222
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Kismet/KismetGuidLibrary.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetGuidLibrary.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UKismetGuidLibrary(Z_Construct_UClass_UKismetGuidLibrary, TEXT("UKismetGuidLibrary"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UKismetGuidLibrary);
	UFunction* Z_Construct_UFunction_UKismetInputLibrary_CalibrateTilt()
	{
		UObject* Outer=Z_Construct_UClass_UKismetInputLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CalibrateTilt"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Input"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetInputLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Calibrate the tilt for the input device"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetInputLibrary_ControllerEvent_GetAnalogValue()
	{
		struct KismetInputLibrary_eventControllerEvent_GetAnalogValue_Parms
		{
			FControllerEvent Input;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetInputLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ControllerEvent_GetAnalogValue"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(KismetInputLibrary_eventControllerEvent_GetAnalogValue_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetInputLibrary_eventControllerEvent_GetAnalogValue_Parms), 0x0000000000000580);
			UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Input"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Input, KismetInputLibrary_eventControllerEvent_GetAnalogValue_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FControllerEvent());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|ControllerEvent"));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecatedFunction"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecationMessage"), TEXT("Use GetAnalogValue() for AnalogInputEvent instead"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetInputLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@return Analog value between 0 and 1.  1 being fully pressed, 0 being not pressed at all"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetInputLibrary_ControllerEvent_GetEffectingButton()
	{
		struct KismetInputLibrary_eventControllerEvent_GetEffectingButton_Parms
		{
			FControllerEvent Input;
			FKey ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetInputLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ControllerEvent_GetEffectingButton"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(KismetInputLibrary_eventControllerEvent_GetEffectingButton_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetInputLibrary_eventControllerEvent_GetEffectingButton_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FKey());
			UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Input"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Input, KismetInputLibrary_eventControllerEvent_GetEffectingButton_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FControllerEvent());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|ControllerEvent"));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecatedFunction"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecationMessage"), TEXT("Use GetKey() for KeyEvent instead"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("GetEffectingButton"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetInputLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@return The controller button that caused this event"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetInputLibrary_ControllerEvent_GetUserIndex()
	{
		struct KismetInputLibrary_eventControllerEvent_GetUserIndex_Parms
		{
			FControllerEvent Input;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetInputLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ControllerEvent_GetUserIndex"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(KismetInputLibrary_eventControllerEvent_GetUserIndex_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, KismetInputLibrary_eventControllerEvent_GetUserIndex_Parms), 0x0000000000000580);
			UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Input"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Input, KismetInputLibrary_eventControllerEvent_GetUserIndex_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FControllerEvent());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|ControllerEvent"));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecatedFunction"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecationMessage"), TEXT("Use GetUserIndex() for KeyEvent instead"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetInputLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@return The index of the user that caused the event"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetInputLibrary_EqualEqual_KeyKey()
	{
		struct KismetInputLibrary_eventEqualEqual_KeyKey_Parms
		{
			FKey A;
			FKey B;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetInputLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EqualEqual_KeyKey"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetInputLibrary_eventEqualEqual_KeyKey_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetInputLibrary_eventEqualEqual_KeyKey_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetInputLibrary_eventEqualEqual_KeyKey_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetInputLibrary_eventEqualEqual_KeyKey_Parms), sizeof(bool), true);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(B, KismetInputLibrary_eventEqualEqual_KeyKey_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FKey());
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetInputLibrary_eventEqualEqual_KeyKey_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FKey());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Key"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("=="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Equal (Key)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetInputLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Test if the input key are equal (A == B)\n@param A - The key to compare against\n@param B - The key to compare\n@returns True if the key are equal, false otherwise"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetInputLibrary_GetAnalogValue()
	{
		struct KismetInputLibrary_eventGetAnalogValue_Parms
		{
			FAnalogInputEvent Input;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetInputLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetAnalogValue"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(KismetInputLibrary_eventGetAnalogValue_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetInputLibrary_eventGetAnalogValue_Parms), 0x0000000000000580);
			UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Input"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Input, KismetInputLibrary_eventGetAnalogValue_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FAnalogInputEvent());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|FAnalogInputEvent"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetInputLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetInputLibrary_GetKey()
	{
		struct KismetInputLibrary_eventGetKey_Parms
		{
			FKeyEvent Input;
			FKey ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetInputLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetKey"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(KismetInputLibrary_eventGetKey_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetInputLibrary_eventGetKey_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FKey());
			UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Input"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Input, KismetInputLibrary_eventGetKey_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FKeyEvent());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|KeyEvent"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetInputLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the key for this event.\n\n@return  Key name"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetInputLibrary_GetUserIndex()
	{
		struct KismetInputLibrary_eventGetUserIndex_Parms
		{
			FKeyEvent Input;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetInputLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetUserIndex"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(KismetInputLibrary_eventGetUserIndex_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, KismetInputLibrary_eventGetUserIndex_Parms), 0x0000000000000580);
			UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Input"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Input, KismetInputLibrary_eventGetUserIndex_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FKeyEvent());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|KeyEvent"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetInputLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsAltDown()
	{
		struct KismetInputLibrary_eventInputEvent_IsAltDown_Parms
		{
			FInputEvent Input;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetInputLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("InputEvent_IsAltDown"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(KismetInputLibrary_eventInputEvent_IsAltDown_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetInputLibrary_eventInputEvent_IsAltDown_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetInputLibrary_eventInputEvent_IsAltDown_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetInputLibrary_eventInputEvent_IsAltDown_Parms), sizeof(bool), true);
			UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Input"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Input, KismetInputLibrary_eventInputEvent_IsAltDown_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FInputEvent());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|InputEvent"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("IsAltDown"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetInputLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if either alt key was down when this event occurred\n\n@return  True if alt is pressed"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsCommandDown()
	{
		struct KismetInputLibrary_eventInputEvent_IsCommandDown_Parms
		{
			FInputEvent Input;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetInputLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("InputEvent_IsCommandDown"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(KismetInputLibrary_eventInputEvent_IsCommandDown_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetInputLibrary_eventInputEvent_IsCommandDown_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetInputLibrary_eventInputEvent_IsCommandDown_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetInputLibrary_eventInputEvent_IsCommandDown_Parms), sizeof(bool), true);
			UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Input"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Input, KismetInputLibrary_eventInputEvent_IsCommandDown_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FInputEvent());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|InputEvent"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("IsCommandDown"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetInputLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if either command key was down when this event occurred\n\n@return  True if command is pressed"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsControlDown()
	{
		struct KismetInputLibrary_eventInputEvent_IsControlDown_Parms
		{
			FInputEvent Input;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetInputLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("InputEvent_IsControlDown"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(KismetInputLibrary_eventInputEvent_IsControlDown_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetInputLibrary_eventInputEvent_IsControlDown_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetInputLibrary_eventInputEvent_IsControlDown_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetInputLibrary_eventInputEvent_IsControlDown_Parms), sizeof(bool), true);
			UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Input"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Input, KismetInputLibrary_eventInputEvent_IsControlDown_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FInputEvent());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|InputEvent"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("IsControlDown"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetInputLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if either control key was down when this event occurred\n\n@return  True if control is pressed"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsLeftAltDown()
	{
		struct KismetInputLibrary_eventInputEvent_IsLeftAltDown_Parms
		{
			FInputEvent Input;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetInputLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("InputEvent_IsLeftAltDown"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(KismetInputLibrary_eventInputEvent_IsLeftAltDown_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetInputLibrary_eventInputEvent_IsLeftAltDown_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetInputLibrary_eventInputEvent_IsLeftAltDown_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetInputLibrary_eventInputEvent_IsLeftAltDown_Parms), sizeof(bool), true);
			UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Input"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Input, KismetInputLibrary_eventInputEvent_IsLeftAltDown_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FInputEvent());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|InputEvent"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("IsLeftAltDown"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetInputLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if left alt key was down when this event occurred\n\n@return  True if left alt is pressed"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsLeftCommandDown()
	{
		struct KismetInputLibrary_eventInputEvent_IsLeftCommandDown_Parms
		{
			FInputEvent Input;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetInputLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("InputEvent_IsLeftCommandDown"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(KismetInputLibrary_eventInputEvent_IsLeftCommandDown_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetInputLibrary_eventInputEvent_IsLeftCommandDown_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetInputLibrary_eventInputEvent_IsLeftCommandDown_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetInputLibrary_eventInputEvent_IsLeftCommandDown_Parms), sizeof(bool), true);
			UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Input"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Input, KismetInputLibrary_eventInputEvent_IsLeftCommandDown_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FInputEvent());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|InputEvent"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("IsLeftCommandDown"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetInputLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if left command key was down when this event occurred\n\n@return  True if left command is pressed"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsLeftControlDown()
	{
		struct KismetInputLibrary_eventInputEvent_IsLeftControlDown_Parms
		{
			FInputEvent Input;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetInputLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("InputEvent_IsLeftControlDown"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(KismetInputLibrary_eventInputEvent_IsLeftControlDown_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetInputLibrary_eventInputEvent_IsLeftControlDown_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetInputLibrary_eventInputEvent_IsLeftControlDown_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetInputLibrary_eventInputEvent_IsLeftControlDown_Parms), sizeof(bool), true);
			UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Input"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Input, KismetInputLibrary_eventInputEvent_IsLeftControlDown_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FInputEvent());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|InputEvent"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("IsLeftControlDown"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetInputLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if left control key was down when this event occurred\n\n@return  True if left control is pressed"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsLeftShiftDown()
	{
		struct KismetInputLibrary_eventInputEvent_IsLeftShiftDown_Parms
		{
			FInputEvent Input;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetInputLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("InputEvent_IsLeftShiftDown"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(KismetInputLibrary_eventInputEvent_IsLeftShiftDown_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetInputLibrary_eventInputEvent_IsLeftShiftDown_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetInputLibrary_eventInputEvent_IsLeftShiftDown_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetInputLibrary_eventInputEvent_IsLeftShiftDown_Parms), sizeof(bool), true);
			UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Input"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Input, KismetInputLibrary_eventInputEvent_IsLeftShiftDown_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FInputEvent());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|InputEvent"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("IsLeftShiftDown"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetInputLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if left shift key was down when this event occurred\n\n@return True if left shift is pressed."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsRepeat()
	{
		struct KismetInputLibrary_eventInputEvent_IsRepeat_Parms
		{
			FInputEvent Input;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetInputLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("InputEvent_IsRepeat"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(KismetInputLibrary_eventInputEvent_IsRepeat_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetInputLibrary_eventInputEvent_IsRepeat_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetInputLibrary_eventInputEvent_IsRepeat_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetInputLibrary_eventInputEvent_IsRepeat_Parms), sizeof(bool), true);
			UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Input"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Input, KismetInputLibrary_eventInputEvent_IsRepeat_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FInputEvent());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|InputEvent"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("IsRepeat"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetInputLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns whether or not this character is an auto-repeated keystroke\n\n@return  True if this character is a repeat"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsRightAltDown()
	{
		struct KismetInputLibrary_eventInputEvent_IsRightAltDown_Parms
		{
			FInputEvent Input;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetInputLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("InputEvent_IsRightAltDown"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(KismetInputLibrary_eventInputEvent_IsRightAltDown_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetInputLibrary_eventInputEvent_IsRightAltDown_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetInputLibrary_eventInputEvent_IsRightAltDown_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetInputLibrary_eventInputEvent_IsRightAltDown_Parms), sizeof(bool), true);
			UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Input"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Input, KismetInputLibrary_eventInputEvent_IsRightAltDown_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FInputEvent());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|InputEvent"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("IsRightAltDown"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetInputLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if right alt key was down when this event occurred\n\n@return  True if right alt is pressed"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsRightCommandDown()
	{
		struct KismetInputLibrary_eventInputEvent_IsRightCommandDown_Parms
		{
			FInputEvent Input;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetInputLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("InputEvent_IsRightCommandDown"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(KismetInputLibrary_eventInputEvent_IsRightCommandDown_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetInputLibrary_eventInputEvent_IsRightCommandDown_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetInputLibrary_eventInputEvent_IsRightCommandDown_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetInputLibrary_eventInputEvent_IsRightCommandDown_Parms), sizeof(bool), true);
			UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Input"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Input, KismetInputLibrary_eventInputEvent_IsRightCommandDown_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FInputEvent());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|InputEvent"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("IsRightCommandDown"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetInputLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if right command key was down when this event occurred\n\n@return  True if right command is pressed"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsRightControlDown()
	{
		struct KismetInputLibrary_eventInputEvent_IsRightControlDown_Parms
		{
			FInputEvent Input;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetInputLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("InputEvent_IsRightControlDown"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(KismetInputLibrary_eventInputEvent_IsRightControlDown_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetInputLibrary_eventInputEvent_IsRightControlDown_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetInputLibrary_eventInputEvent_IsRightControlDown_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetInputLibrary_eventInputEvent_IsRightControlDown_Parms), sizeof(bool), true);
			UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Input"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Input, KismetInputLibrary_eventInputEvent_IsRightControlDown_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FInputEvent());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|InputEvent"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("IsRightControlDown"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetInputLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if left control key was down when this event occurred\n\n@return  True if left control is pressed"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsRightShiftDown()
	{
		struct KismetInputLibrary_eventInputEvent_IsRightShiftDown_Parms
		{
			FInputEvent Input;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetInputLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("InputEvent_IsRightShiftDown"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(KismetInputLibrary_eventInputEvent_IsRightShiftDown_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetInputLibrary_eventInputEvent_IsRightShiftDown_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetInputLibrary_eventInputEvent_IsRightShiftDown_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetInputLibrary_eventInputEvent_IsRightShiftDown_Parms), sizeof(bool), true);
			UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Input"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Input, KismetInputLibrary_eventInputEvent_IsRightShiftDown_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FInputEvent());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|InputEvent"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("IsRightShiftDown"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetInputLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if right shift key was down when this event occurred\n\n@return True if right shift is pressed."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsShiftDown()
	{
		struct KismetInputLibrary_eventInputEvent_IsShiftDown_Parms
		{
			FInputEvent Input;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetInputLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("InputEvent_IsShiftDown"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(KismetInputLibrary_eventInputEvent_IsShiftDown_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetInputLibrary_eventInputEvent_IsShiftDown_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetInputLibrary_eventInputEvent_IsShiftDown_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetInputLibrary_eventInputEvent_IsShiftDown_Parms), sizeof(bool), true);
			UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Input"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Input, KismetInputLibrary_eventInputEvent_IsShiftDown_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FInputEvent());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|InputEvent"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("IsShiftDown"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetInputLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if either shift key was down when this event occurred\n\n@return  True if shift is pressed"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetInputLibrary_Key_GetDisplayName()
	{
		struct KismetInputLibrary_eventKey_GetDisplayName_Parms
		{
			FKey Key;
			FText ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetInputLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Key_GetDisplayName"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(KismetInputLibrary_eventKey_GetDisplayName_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(ReturnValue, KismetInputLibrary_eventKey_GetDisplayName_Parms), 0x0000000000000580);
			UProperty* NewProp_Key = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Key"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Key, KismetInputLibrary_eventKey_GetDisplayName_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FKey());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Key"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetInputLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@returns The display name of the key."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetInputLibrary_Key_IsFloatAxis()
	{
		struct KismetInputLibrary_eventKey_IsFloatAxis_Parms
		{
			FKey Key;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetInputLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Key_IsFloatAxis"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(KismetInputLibrary_eventKey_IsFloatAxis_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetInputLibrary_eventKey_IsFloatAxis_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetInputLibrary_eventKey_IsFloatAxis_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetInputLibrary_eventKey_IsFloatAxis_Parms), sizeof(bool), true);
			UProperty* NewProp_Key = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Key"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Key, KismetInputLibrary_eventKey_IsFloatAxis_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FKey());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Key"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetInputLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@returns True if the key is a float axis"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetInputLibrary_Key_IsGamepadKey()
	{
		struct KismetInputLibrary_eventKey_IsGamepadKey_Parms
		{
			FKey Key;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetInputLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Key_IsGamepadKey"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(KismetInputLibrary_eventKey_IsGamepadKey_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetInputLibrary_eventKey_IsGamepadKey_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetInputLibrary_eventKey_IsGamepadKey_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetInputLibrary_eventKey_IsGamepadKey_Parms), sizeof(bool), true);
			UProperty* NewProp_Key = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Key"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Key, KismetInputLibrary_eventKey_IsGamepadKey_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FKey());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Key"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetInputLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@returns True if the key is a gamepad button"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetInputLibrary_Key_IsKeyboardKey()
	{
		struct KismetInputLibrary_eventKey_IsKeyboardKey_Parms
		{
			FKey Key;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetInputLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Key_IsKeyboardKey"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(KismetInputLibrary_eventKey_IsKeyboardKey_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetInputLibrary_eventKey_IsKeyboardKey_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetInputLibrary_eventKey_IsKeyboardKey_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetInputLibrary_eventKey_IsKeyboardKey_Parms), sizeof(bool), true);
			UProperty* NewProp_Key = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Key"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Key, KismetInputLibrary_eventKey_IsKeyboardKey_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FKey());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Key"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetInputLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@returns True if the key is a keyboard button"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetInputLibrary_Key_IsModifierKey()
	{
		struct KismetInputLibrary_eventKey_IsModifierKey_Parms
		{
			FKey Key;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetInputLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Key_IsModifierKey"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(KismetInputLibrary_eventKey_IsModifierKey_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetInputLibrary_eventKey_IsModifierKey_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetInputLibrary_eventKey_IsModifierKey_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetInputLibrary_eventKey_IsModifierKey_Parms), sizeof(bool), true);
			UProperty* NewProp_Key = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Key"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Key, KismetInputLibrary_eventKey_IsModifierKey_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FKey());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Key"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetInputLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@returns True if the key is a modifier key: Ctrl, Command, Alt, Shift"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetInputLibrary_Key_IsMouseButton()
	{
		struct KismetInputLibrary_eventKey_IsMouseButton_Parms
		{
			FKey Key;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetInputLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Key_IsMouseButton"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(KismetInputLibrary_eventKey_IsMouseButton_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetInputLibrary_eventKey_IsMouseButton_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetInputLibrary_eventKey_IsMouseButton_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetInputLibrary_eventKey_IsMouseButton_Parms), sizeof(bool), true);
			UProperty* NewProp_Key = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Key"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Key, KismetInputLibrary_eventKey_IsMouseButton_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FKey());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Key"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetInputLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@returns True if the key is a mouse button"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetInputLibrary_Key_IsVectorAxis()
	{
		struct KismetInputLibrary_eventKey_IsVectorAxis_Parms
		{
			FKey Key;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetInputLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Key_IsVectorAxis"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(KismetInputLibrary_eventKey_IsVectorAxis_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetInputLibrary_eventKey_IsVectorAxis_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetInputLibrary_eventKey_IsVectorAxis_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetInputLibrary_eventKey_IsVectorAxis_Parms), sizeof(bool), true);
			UProperty* NewProp_Key = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Key"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Key, KismetInputLibrary_eventKey_IsVectorAxis_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FKey());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Key"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetInputLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@returns True if the key is a vector axis"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetInputLibrary_PointerEvent_GetCursorDelta()
	{
		struct KismetInputLibrary_eventPointerEvent_GetCursorDelta_Parms
		{
			FPointerEvent Input;
			FVector2D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetInputLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PointerEvent_GetCursorDelta"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(KismetInputLibrary_eventPointerEvent_GetCursorDelta_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetInputLibrary_eventPointerEvent_GetCursorDelta_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Input"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Input, KismetInputLibrary_eventPointerEvent_GetCursorDelta_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FPointerEvent());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|PointerEvent"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("GetCursorDelta"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetInputLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@return the distance the mouse traveled since the last event was handled."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetInputLibrary_PointerEvent_GetEffectingButton()
	{
		struct KismetInputLibrary_eventPointerEvent_GetEffectingButton_Parms
		{
			FPointerEvent Input;
			FKey ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetInputLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PointerEvent_GetEffectingButton"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(KismetInputLibrary_eventPointerEvent_GetEffectingButton_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetInputLibrary_eventPointerEvent_GetEffectingButton_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FKey());
			UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Input"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Input, KismetInputLibrary_eventPointerEvent_GetEffectingButton_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FPointerEvent());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|PointerEvent"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("GetEffectingButton"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetInputLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Mouse button that caused this event to be raised (possibly EB_None)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetInputLibrary_PointerEvent_GetGestureDelta()
	{
		struct KismetInputLibrary_eventPointerEvent_GetGestureDelta_Parms
		{
			FPointerEvent Input;
			FVector2D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetInputLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PointerEvent_GetGestureDelta"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(KismetInputLibrary_eventPointerEvent_GetGestureDelta_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetInputLibrary_eventPointerEvent_GetGestureDelta_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Input"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Input, KismetInputLibrary_eventPointerEvent_GetGestureDelta_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FPointerEvent());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|PointerEvent"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("GetGestureDelta"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetInputLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@return The change in gesture value since the last gesture event of the same type."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetInputLibrary_PointerEvent_GetLastScreenSpacePosition()
	{
		struct KismetInputLibrary_eventPointerEvent_GetLastScreenSpacePosition_Parms
		{
			FPointerEvent Input;
			FVector2D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetInputLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PointerEvent_GetLastScreenSpacePosition"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(KismetInputLibrary_eventPointerEvent_GetLastScreenSpacePosition_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetInputLibrary_eventPointerEvent_GetLastScreenSpacePosition_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Input"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Input, KismetInputLibrary_eventPointerEvent_GetLastScreenSpacePosition_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FPointerEvent());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|PointerEvent"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("GetLastScreenSpacePosition"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetInputLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@return The position of the cursor in screen space last time we handled an input event"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetInputLibrary_PointerEvent_GetPointerIndex()
	{
		struct KismetInputLibrary_eventPointerEvent_GetPointerIndex_Parms
		{
			FPointerEvent Input;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetInputLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PointerEvent_GetPointerIndex"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(KismetInputLibrary_eventPointerEvent_GetPointerIndex_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, KismetInputLibrary_eventPointerEvent_GetPointerIndex_Parms), 0x0000000000000580);
			UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Input"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Input, KismetInputLibrary_eventPointerEvent_GetPointerIndex_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FPointerEvent());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|PointerEvent"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("GetPointerIndex"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetInputLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@return The unique identifier of the pointer (e.g., finger index)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetInputLibrary_PointerEvent_GetScreenSpacePosition()
	{
		struct KismetInputLibrary_eventPointerEvent_GetScreenSpacePosition_Parms
		{
			FPointerEvent Input;
			FVector2D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetInputLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PointerEvent_GetScreenSpacePosition"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(KismetInputLibrary_eventPointerEvent_GetScreenSpacePosition_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetInputLibrary_eventPointerEvent_GetScreenSpacePosition_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Input"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Input, KismetInputLibrary_eventPointerEvent_GetScreenSpacePosition_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FPointerEvent());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|PointerEvent"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("GetScreenSpacePosition"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetInputLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@return The position of the cursor in screen space"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetInputLibrary_PointerEvent_GetTouchpadIndex()
	{
		struct KismetInputLibrary_eventPointerEvent_GetTouchpadIndex_Parms
		{
			FPointerEvent Input;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetInputLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PointerEvent_GetTouchpadIndex"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(KismetInputLibrary_eventPointerEvent_GetTouchpadIndex_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, KismetInputLibrary_eventPointerEvent_GetTouchpadIndex_Parms), 0x0000000000000580);
			UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Input"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Input, KismetInputLibrary_eventPointerEvent_GetTouchpadIndex_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FPointerEvent());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|PointerEvent"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("GetTouchpadIndex"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetInputLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@return The index of the touch pad that generated this event (for platforms with multiple touch pads per user)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetInputLibrary_PointerEvent_GetUserIndex()
	{
		struct KismetInputLibrary_eventPointerEvent_GetUserIndex_Parms
		{
			FPointerEvent Input;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetInputLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PointerEvent_GetUserIndex"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(KismetInputLibrary_eventPointerEvent_GetUserIndex_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, KismetInputLibrary_eventPointerEvent_GetUserIndex_Parms), 0x0000000000000580);
			UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Input"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Input, KismetInputLibrary_eventPointerEvent_GetUserIndex_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FPointerEvent());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|PointerEvent"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("GetUserIndex"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetInputLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@return The index of the user that caused the event"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetInputLibrary_PointerEvent_GetWheelDelta()
	{
		struct KismetInputLibrary_eventPointerEvent_GetWheelDelta_Parms
		{
			FPointerEvent Input;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetInputLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PointerEvent_GetWheelDelta"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(KismetInputLibrary_eventPointerEvent_GetWheelDelta_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetInputLibrary_eventPointerEvent_GetWheelDelta_Parms), 0x0000000000000580);
			UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Input"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Input, KismetInputLibrary_eventPointerEvent_GetWheelDelta_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FPointerEvent());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|PointerEvent"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("GetWheelDelta"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetInputLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("How much did the mouse wheel turn since the last mouse event"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetInputLibrary_PointerEvent_IsMouseButtonDown()
	{
		struct KismetInputLibrary_eventPointerEvent_IsMouseButtonDown_Parms
		{
			FPointerEvent Input;
			FKey MouseButton;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetInputLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PointerEvent_IsMouseButtonDown"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(KismetInputLibrary_eventPointerEvent_IsMouseButtonDown_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetInputLibrary_eventPointerEvent_IsMouseButtonDown_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetInputLibrary_eventPointerEvent_IsMouseButtonDown_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetInputLibrary_eventPointerEvent_IsMouseButtonDown_Parms), sizeof(bool), true);
			UProperty* NewProp_MouseButton = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MouseButton"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MouseButton, KismetInputLibrary_eventPointerEvent_IsMouseButtonDown_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FKey());
			UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Input"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Input, KismetInputLibrary_eventPointerEvent_IsMouseButtonDown_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FPointerEvent());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|PointerEvent"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("IsMouseButtonDown"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetInputLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Mouse buttons that are currently pressed"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetInputLibrary_PointerEvent_IsTouchEvent()
	{
		struct KismetInputLibrary_eventPointerEvent_IsTouchEvent_Parms
		{
			FPointerEvent Input;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetInputLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PointerEvent_IsTouchEvent"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(KismetInputLibrary_eventPointerEvent_IsTouchEvent_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetInputLibrary_eventPointerEvent_IsTouchEvent_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetInputLibrary_eventPointerEvent_IsTouchEvent_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetInputLibrary_eventPointerEvent_IsTouchEvent_Parms), sizeof(bool), true);
			UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Input"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Input, KismetInputLibrary_eventPointerEvent_IsTouchEvent_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FPointerEvent());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|PointerEvent"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("IsTouchEvent"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetInputLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@return Is this event a result from a touch (as opposed to a mouse)"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UKismetInputLibrary_NoRegister()
	{
		return UKismetInputLibrary::StaticClass();
	}
	UClass* Z_Construct_UClass_UKismetInputLibrary()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBlueprintFunctionLibrary();
			Z_Construct_UPackage_Engine();
			OuterClass = UKismetInputLibrary::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_UKismetInputLibrary_CalibrateTilt());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetInputLibrary_ControllerEvent_GetAnalogValue());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetInputLibrary_ControllerEvent_GetEffectingButton());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetInputLibrary_ControllerEvent_GetUserIndex());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetInputLibrary_EqualEqual_KeyKey());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetInputLibrary_GetAnalogValue());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetInputLibrary_GetKey());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetInputLibrary_GetUserIndex());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsAltDown());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsCommandDown());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsControlDown());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsLeftAltDown());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsLeftCommandDown());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsLeftControlDown());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsLeftShiftDown());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsRepeat());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsRightAltDown());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsRightCommandDown());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsRightControlDown());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsRightShiftDown());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsShiftDown());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetInputLibrary_Key_GetDisplayName());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetInputLibrary_Key_IsFloatAxis());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetInputLibrary_Key_IsGamepadKey());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetInputLibrary_Key_IsKeyboardKey());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetInputLibrary_Key_IsModifierKey());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetInputLibrary_Key_IsMouseButton());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetInputLibrary_Key_IsVectorAxis());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetInputLibrary_PointerEvent_GetCursorDelta());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetInputLibrary_PointerEvent_GetEffectingButton());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetInputLibrary_PointerEvent_GetGestureDelta());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetInputLibrary_PointerEvent_GetLastScreenSpacePosition());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetInputLibrary_PointerEvent_GetPointerIndex());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetInputLibrary_PointerEvent_GetScreenSpacePosition());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetInputLibrary_PointerEvent_GetTouchpadIndex());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetInputLibrary_PointerEvent_GetUserIndex());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetInputLibrary_PointerEvent_GetWheelDelta());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetInputLibrary_PointerEvent_IsMouseButtonDown());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetInputLibrary_PointerEvent_IsTouchEvent());

				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetInputLibrary_CalibrateTilt()); // 3036298462
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetInputLibrary_ControllerEvent_GetAnalogValue()); // 3636332856
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetInputLibrary_ControllerEvent_GetEffectingButton()); // 2705058593
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetInputLibrary_ControllerEvent_GetUserIndex()); // 1894896198
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetInputLibrary_EqualEqual_KeyKey()); // 372432652
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetInputLibrary_GetAnalogValue()); // 974775348
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetInputLibrary_GetKey()); // 617881977
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetInputLibrary_GetUserIndex()); // 1859756849
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsAltDown()); // 2909813236
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsCommandDown()); // 1054876778
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsControlDown()); // 2775504827
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsLeftAltDown()); // 2753680308
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsLeftCommandDown()); // 2855170019
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsLeftControlDown()); // 216887557
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsLeftShiftDown()); // 4022695955
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsRepeat()); // 3725518407
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsRightAltDown()); // 3630330815
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsRightCommandDown()); // 2690607916
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsRightControlDown()); // 507419212
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsRightShiftDown()); // 4213870515
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsShiftDown()); // 3633384153
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetInputLibrary_Key_GetDisplayName()); // 1148490274
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetInputLibrary_Key_IsFloatAxis()); // 241497621
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetInputLibrary_Key_IsGamepadKey()); // 3278337210
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetInputLibrary_Key_IsKeyboardKey()); // 2915538148
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetInputLibrary_Key_IsModifierKey()); // 3861053578
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetInputLibrary_Key_IsMouseButton()); // 2890960300
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetInputLibrary_Key_IsVectorAxis()); // 2707002251
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetInputLibrary_PointerEvent_GetCursorDelta()); // 1480239960
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetInputLibrary_PointerEvent_GetEffectingButton()); // 720210492
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetInputLibrary_PointerEvent_GetGestureDelta()); // 2675789172
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetInputLibrary_PointerEvent_GetLastScreenSpacePosition()); // 1216288071
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetInputLibrary_PointerEvent_GetPointerIndex()); // 1276103197
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetInputLibrary_PointerEvent_GetScreenSpacePosition()); // 1905097326
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetInputLibrary_PointerEvent_GetTouchpadIndex()); // 4141898302
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetInputLibrary_PointerEvent_GetUserIndex()); // 1042123182
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetInputLibrary_PointerEvent_GetWheelDelta()); // 2222494916
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetInputLibrary_PointerEvent_IsMouseButtonDown()); // 1980203534
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetInputLibrary_PointerEvent_IsTouchEvent()); // 2124913824
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Kismet/KismetInputLibrary.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetInputLibrary.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UKismetInputLibrary(Z_Construct_UClass_UKismetInputLibrary, TEXT("UKismetInputLibrary"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UKismetInputLibrary);
	UFunction* Z_Construct_UFunction_UKismetMaterialLibrary_CreateDynamicMaterialInstance()
	{
		struct KismetMaterialLibrary_eventCreateDynamicMaterialInstance_Parms
		{
			UObject* WorldContextObject;
			UMaterialInterface* Parent;
			UMaterialInstanceDynamic* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMaterialLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CreateDynamicMaterialInstance"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022403, 65535, sizeof(KismetMaterialLibrary_eventCreateDynamicMaterialInstance_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMaterialLibrary_eventCreateDynamicMaterialInstance_Parms), 0x0000000000000580, Z_Construct_UClass_UMaterialInstanceDynamic_NoRegister());
			UProperty* NewProp_Parent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Parent"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Parent, KismetMaterialLibrary_eventCreateDynamicMaterialInstance_Parms), 0x0000000000000080, Z_Construct_UClass_UMaterialInterface_NoRegister());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetMaterialLibrary_eventCreateDynamicMaterialInstance_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Rendering|Material"));
			MetaData->SetValue(ReturnFunction, TEXT("MaterialParameterCollectionFunction"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMaterialLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Creates a Dynamic Material Instance which you can modify during gameplay."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMaterialLibrary_GetScalarParameterValue()
	{
		struct KismetMaterialLibrary_eventGetScalarParameterValue_Parms
		{
			UObject* WorldContextObject;
			UMaterialParameterCollection* Collection;
			FName ParameterName;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMaterialLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetScalarParameterValue"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022403, 65535, sizeof(KismetMaterialLibrary_eventGetScalarParameterValue_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMaterialLibrary_eventGetScalarParameterValue_Parms), 0x0000000000000580);
			UProperty* NewProp_ParameterName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ParameterName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(ParameterName, KismetMaterialLibrary_eventGetScalarParameterValue_Parms), 0x0000000000000080);
			UProperty* NewProp_Collection = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Collection"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Collection, KismetMaterialLibrary_eventGetScalarParameterValue_Parms), 0x0000000000000080, Z_Construct_UClass_UMaterialParameterCollection_NoRegister());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetMaterialLibrary_eventGetScalarParameterValue_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Rendering|Material"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("GetFloatParameterValue"));
			MetaData->SetValue(ReturnFunction, TEXT("MaterialParameterCollectionFunction"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMaterialLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets a scalar parameter value from the material collection instance. Logs if ParameterName is invalid."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMaterialLibrary_GetVectorParameterValue()
	{
		struct KismetMaterialLibrary_eventGetVectorParameterValue_Parms
		{
			UObject* WorldContextObject;
			UMaterialParameterCollection* Collection;
			FName ParameterName;
			FLinearColor ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMaterialLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetVectorParameterValue"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04822403, 65535, sizeof(KismetMaterialLibrary_eventGetVectorParameterValue_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMaterialLibrary_eventGetVectorParameterValue_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_ParameterName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ParameterName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(ParameterName, KismetMaterialLibrary_eventGetVectorParameterValue_Parms), 0x0000000000000080);
			UProperty* NewProp_Collection = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Collection"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Collection, KismetMaterialLibrary_eventGetVectorParameterValue_Parms), 0x0000000000000080, Z_Construct_UClass_UMaterialParameterCollection_NoRegister());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetMaterialLibrary_eventGetVectorParameterValue_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Rendering|Material"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("GetColorParameterValue"));
			MetaData->SetValue(ReturnFunction, TEXT("MaterialParameterCollectionFunction"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMaterialLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets a vector parameter value from the material collection instance. Logs if ParameterName is invalid."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMaterialLibrary_SetScalarParameterValue()
	{
		struct KismetMaterialLibrary_eventSetScalarParameterValue_Parms
		{
			UObject* WorldContextObject;
			UMaterialParameterCollection* Collection;
			FName ParameterName;
			float ParameterValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMaterialLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetScalarParameterValue"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022403, 65535, sizeof(KismetMaterialLibrary_eventSetScalarParameterValue_Parms));
			UProperty* NewProp_ParameterValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ParameterValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ParameterValue, KismetMaterialLibrary_eventSetScalarParameterValue_Parms), 0x0000000000000080);
			UProperty* NewProp_ParameterName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ParameterName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(ParameterName, KismetMaterialLibrary_eventSetScalarParameterValue_Parms), 0x0000000000000080);
			UProperty* NewProp_Collection = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Collection"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Collection, KismetMaterialLibrary_eventSetScalarParameterValue_Parms), 0x0000000000000080, Z_Construct_UClass_UMaterialParameterCollection_NoRegister());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetMaterialLibrary_eventSetScalarParameterValue_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Rendering|Material"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("SetFloatParameterValue"));
			MetaData->SetValue(ReturnFunction, TEXT("MaterialParameterCollectionFunction"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMaterialLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets a scalar parameter value on the material collection instance. Logs if ParameterName is invalid."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMaterialLibrary_SetVectorParameterValue()
	{
		struct KismetMaterialLibrary_eventSetVectorParameterValue_Parms
		{
			UObject* WorldContextObject;
			UMaterialParameterCollection* Collection;
			FName ParameterName;
			FLinearColor ParameterValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMaterialLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetVectorParameterValue"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C22403, 65535, sizeof(KismetMaterialLibrary_eventSetVectorParameterValue_Parms));
			UProperty* NewProp_ParameterValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ParameterValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ParameterValue, KismetMaterialLibrary_eventSetVectorParameterValue_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_ParameterName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ParameterName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(ParameterName, KismetMaterialLibrary_eventSetVectorParameterValue_Parms), 0x0000000000000080);
			UProperty* NewProp_Collection = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Collection"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Collection, KismetMaterialLibrary_eventSetVectorParameterValue_Parms), 0x0000000000000080, Z_Construct_UClass_UMaterialParameterCollection_NoRegister());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetMaterialLibrary_eventSetVectorParameterValue_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Rendering|Material"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("SetColorParameterValue"));
			MetaData->SetValue(ReturnFunction, TEXT("MaterialParameterCollectionFunction"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMaterialLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets a vector parameter value on the material collection instance. Logs if ParameterName is invalid."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UKismetMaterialLibrary_NoRegister()
	{
		return UKismetMaterialLibrary::StaticClass();
	}
	UClass* Z_Construct_UClass_UKismetMaterialLibrary()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBlueprintFunctionLibrary();
			Z_Construct_UPackage_Engine();
			OuterClass = UKismetMaterialLibrary::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;

				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMaterialLibrary_CreateDynamicMaterialInstance());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMaterialLibrary_GetScalarParameterValue());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMaterialLibrary_GetVectorParameterValue());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMaterialLibrary_SetScalarParameterValue());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMaterialLibrary_SetVectorParameterValue());

				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMaterialLibrary_CreateDynamicMaterialInstance()); // 1312552010
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMaterialLibrary_GetScalarParameterValue()); // 4029800525
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMaterialLibrary_GetVectorParameterValue()); // 1272359468
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMaterialLibrary_SetScalarParameterValue()); // 2217830494
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMaterialLibrary_SetVectorParameterValue()); // 1823154305
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Kismet/KismetMaterialLibrary.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMaterialLibrary.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UKismetMaterialLibrary(Z_Construct_UClass_UKismetMaterialLibrary, TEXT("UKismetMaterialLibrary"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UKismetMaterialLibrary);
	UEnum* Z_Construct_UEnum_Engine_EEasingFunc()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EEasingFunc_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EEasingFunc"), 0, Get_Z_Construct_UEnum_Engine_EEasingFunc_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EEasingFunc"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EEasingFunc::Linear")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EEasingFunc::Step")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EEasingFunc::SinusoidalIn")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EEasingFunc::SinusoidalOut")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EEasingFunc::SinusoidalInOut")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EEasingFunc::EaseIn")), 5));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EEasingFunc::EaseOut")), 6));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EEasingFunc::EaseInOut")), 7));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EEasingFunc::ExpoIn")), 8));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EEasingFunc::ExpoOut")), 9));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EEasingFunc::ExpoInOut")), 10));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EEasingFunc::CircularIn")), 11));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EEasingFunc::CircularOut")), 12));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EEasingFunc::CircularInOut")), 13));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EEasingFunc::EEasingFunc_MAX")), 14));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("CircularIn.ToolTip"), TEXT("Easing is based on a half circle."));
			MetaData->SetValue(ReturnEnum, TEXT("CircularInOut.ToolTip"), TEXT("Easing is based on two half circles."));
			MetaData->SetValue(ReturnEnum, TEXT("CircularOut.ToolTip"), TEXT("Easing is based on an inverted half circle."));
			MetaData->SetValue(ReturnEnum, TEXT("EaseIn.ToolTip"), TEXT("Immediately accelerates, but smoothly decelerates into the target.  Ease amount controlled by BlendExp."));
			MetaData->SetValue(ReturnEnum, TEXT("EaseInOut.ToolTip"), TEXT("Smoothly accelerates and decelerates.  Ease amount controlled by BlendExp."));
			MetaData->SetValue(ReturnEnum, TEXT("EaseOut.ToolTip"), TEXT("Smoothly accelerates, but does not decelerate into the target.  Ease amount controlled by BlendExp."));
			MetaData->SetValue(ReturnEnum, TEXT("ExpoIn.ToolTip"), TEXT("Easing in using an exponential"));
			MetaData->SetValue(ReturnEnum, TEXT("ExpoInOut.ToolTip"), TEXT("Easing in/out using an exponential method"));
			MetaData->SetValue(ReturnEnum, TEXT("ExpoOut.ToolTip"), TEXT("Easing out using an exponential"));
			MetaData->SetValue(ReturnEnum, TEXT("Linear.ToolTip"), TEXT("Simple linear interpolation."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnEnum, TEXT("SinusoidalIn.ToolTip"), TEXT("Sinusoidal in interpolation."));
			MetaData->SetValue(ReturnEnum, TEXT("SinusoidalInOut.ToolTip"), TEXT("Sinusoidal in/out interpolation."));
			MetaData->SetValue(ReturnEnum, TEXT("SinusoidalOut.ToolTip"), TEXT("Sinusoidal out interpolation."));
			MetaData->SetValue(ReturnEnum, TEXT("Step.ToolTip"), TEXT("Simple step interpolation."));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Provides different easing functions that can be used in blueprints"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EEasingFunc_CRC() { return 4243973384U; }
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Abs()
	{
		struct KismetMathLibrary_eventAbs_Parms
		{
			float A;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Abs"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventAbs_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventAbs_Parms), 0x0000000000000580);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventAbs_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Float"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("ABS"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Absolute (float)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the absolute (positive) value of A"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Abs_Int()
	{
		struct KismetMathLibrary_eventAbs_Int_Parms
		{
			int32 A;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Abs_Int"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventAbs_Int_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventAbs_Int_Parms), 0x0000000000000580);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventAbs_Int_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Integer"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("ABS"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Absolute (int)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the absolute (positive) value of A"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Acos()
	{
		struct KismetMathLibrary_eventAcos_Parms
		{
			float A;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Acos"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventAcos_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventAcos_Parms), 0x0000000000000580);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventAcos_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Trig"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("ACOS"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Acos (Radians)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the inverse cosine (arccos) of A (result is in Radians)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Add_ByteByte()
	{
		struct KismetMathLibrary_eventAdd_ByteByte_Parms
		{
			uint8 A;
			uint8 B;
			uint8 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Add_ByteByte"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventAdd_ByteByte_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventAdd_ByteByte_Parms), 0x0000000000000580);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventAdd_ByteByte_Parms), 0x0000000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventAdd_ByteByte_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Byte"));
			MetaData->SetValue(ReturnFunction, TEXT("CommutativeAssociativeBinaryOperator"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("+"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_B"), TEXT("1"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Byte + Byte"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("+ add plus"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Addition (A + B)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Add_DateTimeTimespan()
	{
		struct KismetMathLibrary_eventAdd_DateTimeTimespan_Parms
		{
			FDateTime A;
			FTimespan B;
			FDateTime ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Add_DateTimeTimespan"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventAdd_DateTimeTimespan_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventAdd_DateTimeTimespan_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FDateTime());
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventAdd_DateTimeTimespan_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FTimespan());
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventAdd_DateTimeTimespan_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FDateTime());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|DateTime"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("+"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("DateTime + Timespan"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("+ add plus"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Addition (A + B)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Add_FloatFloat()
	{
		struct KismetMathLibrary_eventAdd_FloatFloat_Parms
		{
			float A;
			float B;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Add_FloatFloat"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventAdd_FloatFloat_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventAdd_FloatFloat_Parms), 0x0000000000000580);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventAdd_FloatFloat_Parms), 0x0000000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventAdd_FloatFloat_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Float"));
			MetaData->SetValue(ReturnFunction, TEXT("CommutativeAssociativeBinaryOperator"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("+"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_B"), TEXT("1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("float + float"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("+ add plus"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Addition (A + B)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Add_IntInt()
	{
		struct KismetMathLibrary_eventAdd_IntInt_Parms
		{
			int32 A;
			int32 B;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Add_IntInt"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventAdd_IntInt_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventAdd_IntInt_Parms), 0x0000000000000580);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventAdd_IntInt_Parms), 0x0000000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventAdd_IntInt_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Integer"));
			MetaData->SetValue(ReturnFunction, TEXT("CommutativeAssociativeBinaryOperator"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("+"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_B"), TEXT("1"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("integer + integer"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("+ add plus"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Addition (A + B)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Add_TimespanTimespan()
	{
		struct KismetMathLibrary_eventAdd_TimespanTimespan_Parms
		{
			FTimespan A;
			FTimespan B;
			FTimespan ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Add_TimespanTimespan"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventAdd_TimespanTimespan_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventAdd_TimespanTimespan_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FTimespan());
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventAdd_TimespanTimespan_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FTimespan());
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventAdd_TimespanTimespan_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FTimespan());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Timespan"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("+"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Timespan + Timespan"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("+ add plus"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Addition (A + B)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Add_Vector2DFloat()
	{
		struct KismetMathLibrary_eventAdd_Vector2DFloat_Parms
		{
			FVector2D A;
			float B;
			FVector2D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Add_Vector2DFloat"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventAdd_Vector2DFloat_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventAdd_Vector2DFloat_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventAdd_Vector2DFloat_Parms), 0x0000000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventAdd_Vector2DFloat_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Vector2D"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("+"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("vector2d + float"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("+ add plus"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns Vector A added by B"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Add_Vector2DVector2D()
	{
		struct KismetMathLibrary_eventAdd_Vector2DVector2D_Parms
		{
			FVector2D A;
			FVector2D B;
			FVector2D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Add_Vector2DVector2D"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventAdd_Vector2DVector2D_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventAdd_Vector2DVector2D_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventAdd_Vector2DVector2D_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventAdd_Vector2DVector2D_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Vector2D"));
			MetaData->SetValue(ReturnFunction, TEXT("CommutativeAssociativeBinaryOperator"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("+"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("vector2d + vector2d"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("+ add plus"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns addition of Vector A and Vector B (A + B)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Add_VectorFloat()
	{
		struct KismetMathLibrary_eventAdd_VectorFloat_Parms
		{
			FVector A;
			float B;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Add_VectorFloat"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventAdd_VectorFloat_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventAdd_VectorFloat_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventAdd_VectorFloat_Parms), 0x0000000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventAdd_VectorFloat_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Vector"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("+"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("vector + float"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("+ add plus"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Adds a float to each component of a vector"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Add_VectorInt()
	{
		struct KismetMathLibrary_eventAdd_VectorInt_Parms
		{
			FVector A;
			int32 B;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Add_VectorInt"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventAdd_VectorInt_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventAdd_VectorInt_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventAdd_VectorInt_Parms), 0x0000000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventAdd_VectorInt_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Vector"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("+"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("vector + int"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("+ add plus"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Adds an integer to each component of a vector"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Add_VectorVector()
	{
		struct KismetMathLibrary_eventAdd_VectorVector_Parms
		{
			FVector A;
			FVector B;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Add_VectorVector"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventAdd_VectorVector_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventAdd_VectorVector_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventAdd_VectorVector_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventAdd_VectorVector_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Vector"));
			MetaData->SetValue(ReturnFunction, TEXT("CommutativeAssociativeBinaryOperator"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("+"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("vector + vector"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("+ add plus"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Vector addition"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_And_IntInt()
	{
		struct KismetMathLibrary_eventAnd_IntInt_Parms
		{
			int32 A;
			int32 B;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("And_IntInt"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventAnd_IntInt_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventAnd_IntInt_Parms), 0x0000000000000580);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventAnd_IntInt_Parms), 0x0000000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventAnd_IntInt_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Integer"));
			MetaData->SetValue(ReturnFunction, TEXT("CommutativeAssociativeBinaryOperator"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("&"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Bitwise AND"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("& and"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Bitwise AND (A & B)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Asin()
	{
		struct KismetMathLibrary_eventAsin_Parms
		{
			float A;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Asin"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventAsin_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventAsin_Parms), 0x0000000000000580);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventAsin_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Trig"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("ASIN"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Asin (Radians)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("sine"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the inverse sine (arcsin) of A (result is in Radians)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Atan()
	{
		struct KismetMathLibrary_eventAtan_Parms
		{
			float A;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Atan"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventAtan_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventAtan_Parms), 0x0000000000000580);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventAtan_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Trig"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Atan (Radians)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the inverse tan (atan) (result is in Radians)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Atan2()
	{
		struct KismetMathLibrary_eventAtan2_Parms
		{
			float A;
			float B;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Atan2"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventAtan2_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventAtan2_Parms), 0x0000000000000580);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventAtan2_Parms), 0x0000000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventAtan2_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Trig"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Atan2 (Radians)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the inverse tan (atan2) of A/B (result is in Radians)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_BooleanAND()
	{
		struct KismetMathLibrary_eventBooleanAND_Parms
		{
			bool A;
			bool B;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BooleanAND"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventBooleanAND_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetMathLibrary_eventBooleanAND_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetMathLibrary_eventBooleanAND_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetMathLibrary_eventBooleanAND_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(B, KismetMathLibrary_eventBooleanAND_Parms, bool);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(B, KismetMathLibrary_eventBooleanAND_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(B, KismetMathLibrary_eventBooleanAND_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(A, KismetMathLibrary_eventBooleanAND_Parms, bool);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(A, KismetMathLibrary_eventBooleanAND_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(A, KismetMathLibrary_eventBooleanAND_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Boolean"));
			MetaData->SetValue(ReturnFunction, TEXT("CommutativeAssociativeBinaryOperator"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("AND"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("AND Boolean"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("& and"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the logical AND of two values (A AND B)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_BooleanNAND()
	{
		struct KismetMathLibrary_eventBooleanNAND_Parms
		{
			bool A;
			bool B;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BooleanNAND"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventBooleanNAND_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetMathLibrary_eventBooleanNAND_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetMathLibrary_eventBooleanNAND_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetMathLibrary_eventBooleanNAND_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(B, KismetMathLibrary_eventBooleanNAND_Parms, bool);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(B, KismetMathLibrary_eventBooleanNAND_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(B, KismetMathLibrary_eventBooleanNAND_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(A, KismetMathLibrary_eventBooleanNAND_Parms, bool);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(A, KismetMathLibrary_eventBooleanNAND_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(A, KismetMathLibrary_eventBooleanNAND_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Boolean"));
			MetaData->SetValue(ReturnFunction, TEXT("CommutativeAssociativeBinaryOperator"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("NAND"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("NAND Boolean"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("!& nand"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the logical NAND of two values (A AND B)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_BooleanNOR()
	{
		struct KismetMathLibrary_eventBooleanNOR_Parms
		{
			bool A;
			bool B;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BooleanNOR"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventBooleanNOR_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetMathLibrary_eventBooleanNOR_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetMathLibrary_eventBooleanNOR_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetMathLibrary_eventBooleanNOR_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(B, KismetMathLibrary_eventBooleanNOR_Parms, bool);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(B, KismetMathLibrary_eventBooleanNOR_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(B, KismetMathLibrary_eventBooleanNOR_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(A, KismetMathLibrary_eventBooleanNOR_Parms, bool);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(A, KismetMathLibrary_eventBooleanNOR_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(A, KismetMathLibrary_eventBooleanNOR_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Boolean"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("NOR"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("NOR Boolean"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("!^ nor"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the logical Not OR of two values (A NOR B)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_BooleanOR()
	{
		struct KismetMathLibrary_eventBooleanOR_Parms
		{
			bool A;
			bool B;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BooleanOR"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventBooleanOR_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetMathLibrary_eventBooleanOR_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetMathLibrary_eventBooleanOR_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetMathLibrary_eventBooleanOR_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(B, KismetMathLibrary_eventBooleanOR_Parms, bool);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(B, KismetMathLibrary_eventBooleanOR_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(B, KismetMathLibrary_eventBooleanOR_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(A, KismetMathLibrary_eventBooleanOR_Parms, bool);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(A, KismetMathLibrary_eventBooleanOR_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(A, KismetMathLibrary_eventBooleanOR_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Boolean"));
			MetaData->SetValue(ReturnFunction, TEXT("CommutativeAssociativeBinaryOperator"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("OR"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("OR Boolean"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("| or"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the logical OR of two values (A OR B)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_BooleanXOR()
	{
		struct KismetMathLibrary_eventBooleanXOR_Parms
		{
			bool A;
			bool B;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BooleanXOR"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventBooleanXOR_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetMathLibrary_eventBooleanXOR_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetMathLibrary_eventBooleanXOR_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetMathLibrary_eventBooleanXOR_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(B, KismetMathLibrary_eventBooleanXOR_Parms, bool);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(B, KismetMathLibrary_eventBooleanXOR_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(B, KismetMathLibrary_eventBooleanXOR_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(A, KismetMathLibrary_eventBooleanXOR_Parms, bool);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(A, KismetMathLibrary_eventBooleanXOR_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(A, KismetMathLibrary_eventBooleanXOR_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Boolean"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("XOR"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("XOR Boolean"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("^ xor"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the logical eXclusive OR of two values (A XOR B)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_BreakColor()
	{
		struct KismetMathLibrary_eventBreakColor_Parms
		{
			FLinearColor InColor;
			float R;
			float G;
			float B;
			float A;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BreakColor"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(KismetMathLibrary_eventBreakColor_Parms));
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventBreakColor_Parms), 0x0000000000000180);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventBreakColor_Parms), 0x0000000000000180);
			UProperty* NewProp_G = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("G"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(G, KismetMathLibrary_eventBreakColor_Parms), 0x0000000000000180);
			UProperty* NewProp_R = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("R"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(R, KismetMathLibrary_eventBreakColor_Parms), 0x0000000000000180);
			UProperty* NewProp_InColor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InColor, KismetMathLibrary_eventBreakColor_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FLinearColor());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Color"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Breaks apart a color into individual RGB components (as well as alpha)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_BreakDateTime()
	{
		struct KismetMathLibrary_eventBreakDateTime_Parms
		{
			FDateTime InDateTime;
			int32 Year;
			int32 Month;
			int32 Day;
			int32 Hour;
			int32 Minute;
			int32 Second;
			int32 Millisecond;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BreakDateTime"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(KismetMathLibrary_eventBreakDateTime_Parms));
			UProperty* NewProp_Millisecond = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Millisecond"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Millisecond, KismetMathLibrary_eventBreakDateTime_Parms), 0x0000000000000180);
			UProperty* NewProp_Second = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Second"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Second, KismetMathLibrary_eventBreakDateTime_Parms), 0x0000000000000180);
			UProperty* NewProp_Minute = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Minute"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Minute, KismetMathLibrary_eventBreakDateTime_Parms), 0x0000000000000180);
			UProperty* NewProp_Hour = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Hour"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Hour, KismetMathLibrary_eventBreakDateTime_Parms), 0x0000000000000180);
			UProperty* NewProp_Day = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Day"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Day, KismetMathLibrary_eventBreakDateTime_Parms), 0x0000000000000180);
			UProperty* NewProp_Month = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Month"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Month, KismetMathLibrary_eventBreakDateTime_Parms), 0x0000000000000180);
			UProperty* NewProp_Year = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Year"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Year, KismetMathLibrary_eventBreakDateTime_Parms), 0x0000000000000180);
			UProperty* NewProp_InDateTime = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InDateTime"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InDateTime, KismetMathLibrary_eventBreakDateTime_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FDateTime());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|DateTime"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("NativeBreakFunc"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Breaks a DateTime into its components"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_BreakRandomStream()
	{
		struct KismetMathLibrary_eventBreakRandomStream_Parms
		{
			FRandomStream InRandomStream;
			int32 InitialSeed;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BreakRandomStream"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(KismetMathLibrary_eventBreakRandomStream_Parms));
			UProperty* NewProp_InitialSeed = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InitialSeed"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(InitialSeed, KismetMathLibrary_eventBreakRandomStream_Parms), 0x0000000000000180);
			UProperty* NewProp_InRandomStream = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InRandomStream"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InRandomStream, KismetMathLibrary_eventBreakRandomStream_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FRandomStream());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Random"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("NativeBreakFunc"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Breaks apart a random number generator"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_BreakRotator()
	{
		struct KismetMathLibrary_eventBreakRotator_Parms
		{
			FRotator InRot;
			float Roll;
			float Pitch;
			float Yaw;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BreakRotator"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(KismetMathLibrary_eventBreakRotator_Parms));
			UProperty* NewProp_Yaw = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Yaw"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Yaw, KismetMathLibrary_eventBreakRotator_Parms), 0x0000000000000180);
			UProperty* NewProp_Pitch = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Pitch"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Pitch, KismetMathLibrary_eventBreakRotator_Parms), 0x0000000000000180);
			UProperty* NewProp_Roll = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Roll"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Roll, KismetMathLibrary_eventBreakRotator_Parms), 0x0000000000000180);
			UProperty* NewProp_InRot = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InRot"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InRot, KismetMathLibrary_eventBreakRotator_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Rotator"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("rotation rotate rotator breakrotator"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("NativeBreakFunc"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Breaks apart a rotator into {Roll, Pitch, Yaw} angles in degrees"));
			MetaData->SetValue(NewProp_Yaw, TEXT("DisplayName"), TEXT("Z (Yaw)"));
			MetaData->SetValue(NewProp_Pitch, TEXT("DisplayName"), TEXT("Y (Pitch)"));
			MetaData->SetValue(NewProp_Roll, TEXT("DisplayName"), TEXT("X (Roll)"));
			MetaData->SetValue(NewProp_InRot, TEXT("DisplayName"), TEXT("Rotation"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_BreakRotIntoAxes()
	{
		struct KismetMathLibrary_eventBreakRotIntoAxes_Parms
		{
			FRotator InRot;
			FVector X;
			FVector Y;
			FVector Z;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BreakRotIntoAxes"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(KismetMathLibrary_eventBreakRotIntoAxes_Parms));
			UProperty* NewProp_Z = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Z"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Z, KismetMathLibrary_eventBreakRotIntoAxes_Parms), 0x0000000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Y = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Y"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Y, KismetMathLibrary_eventBreakRotIntoAxes_Parms), 0x0000000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_X = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("X"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(X, KismetMathLibrary_eventBreakRotIntoAxes_Parms), 0x0000000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_InRot = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InRot"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InRot, KismetMathLibrary_eventBreakRotIntoAxes_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Rotator"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("rotation rotate rotator breakrotator"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Breaks apart a rotator into its component axes"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_BreakTimespan()
	{
		struct KismetMathLibrary_eventBreakTimespan_Parms
		{
			FTimespan InTimespan;
			int32 Days;
			int32 Hours;
			int32 Minutes;
			int32 Seconds;
			int32 Milliseconds;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BreakTimespan"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(KismetMathLibrary_eventBreakTimespan_Parms));
			UProperty* NewProp_Milliseconds = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Milliseconds"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Milliseconds, KismetMathLibrary_eventBreakTimespan_Parms), 0x0000000000000180);
			UProperty* NewProp_Seconds = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Seconds"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Seconds, KismetMathLibrary_eventBreakTimespan_Parms), 0x0000000000000180);
			UProperty* NewProp_Minutes = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Minutes"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Minutes, KismetMathLibrary_eventBreakTimespan_Parms), 0x0000000000000180);
			UProperty* NewProp_Hours = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Hours"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Hours, KismetMathLibrary_eventBreakTimespan_Parms), 0x0000000000000180);
			UProperty* NewProp_Days = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Days"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Days, KismetMathLibrary_eventBreakTimespan_Parms), 0x0000000000000180);
			UProperty* NewProp_InTimespan = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InTimespan"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InTimespan, KismetMathLibrary_eventBreakTimespan_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FTimespan());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Timespan"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("NativeBreakFunc"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Breaks a Timespan into its components"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_BreakTransform()
	{
		struct KismetMathLibrary_eventBreakTransform_Parms
		{
			FTransform InTransform;
			FVector Location;
			FRotator Rotation;
			FVector Scale;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BreakTransform"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(KismetMathLibrary_eventBreakTransform_Parms));
			UProperty* NewProp_Scale = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Scale"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Scale, KismetMathLibrary_eventBreakTransform_Parms), 0x0000000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Rotation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Rotation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Rotation, KismetMathLibrary_eventBreakTransform_Parms), 0x0000000000000180, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_Location = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Location"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Location, KismetMathLibrary_eventBreakTransform_Parms), 0x0000000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_InTransform = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InTransform"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InTransform, KismetMathLibrary_eventBreakTransform_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FTransform());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Transform"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("NativeBreakFunc"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Breaks apart a transform into location, rotation and scale"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_BreakVector()
	{
		struct KismetMathLibrary_eventBreakVector_Parms
		{
			FVector InVec;
			float X;
			float Y;
			float Z;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BreakVector"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(KismetMathLibrary_eventBreakVector_Parms));
			UProperty* NewProp_Z = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Z"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Z, KismetMathLibrary_eventBreakVector_Parms), 0x0000000000000180);
			UProperty* NewProp_Y = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Y"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Y, KismetMathLibrary_eventBreakVector_Parms), 0x0000000000000180);
			UProperty* NewProp_X = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("X"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(X, KismetMathLibrary_eventBreakVector_Parms), 0x0000000000000180);
			UProperty* NewProp_InVec = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InVec"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InVec, KismetMathLibrary_eventBreakVector_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Vector"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("NativeBreakFunc"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Breaks a vector apart into X, Y, Z"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_BreakVector2D()
	{
		struct KismetMathLibrary_eventBreakVector2D_Parms
		{
			FVector2D InVec;
			float X;
			float Y;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BreakVector2D"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(KismetMathLibrary_eventBreakVector2D_Parms));
			UProperty* NewProp_Y = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Y"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Y, KismetMathLibrary_eventBreakVector2D_Parms), 0x0000000000000180);
			UProperty* NewProp_X = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("X"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(X, KismetMathLibrary_eventBreakVector2D_Parms), 0x0000000000000180);
			UProperty* NewProp_InVec = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InVec"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InVec, KismetMathLibrary_eventBreakVector2D_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Vector2D"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("NativeBreakFunc"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Breaks a 2D vector apart into X, Y."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_CInterpTo()
	{
		struct KismetMathLibrary_eventCInterpTo_Parms
		{
			FLinearColor Current;
			FLinearColor Target;
			float DeltaTime;
			float InterpSpeed;
			FLinearColor ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CInterpTo"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventCInterpTo_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventCInterpTo_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_InterpSpeed = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InterpSpeed"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InterpSpeed, KismetMathLibrary_eventCInterpTo_Parms), 0x0000000000000080);
			UProperty* NewProp_DeltaTime = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DeltaTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DeltaTime, KismetMathLibrary_eventCInterpTo_Parms), 0x0000000000000080);
			UProperty* NewProp_Target = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Target"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Target, KismetMathLibrary_eventCInterpTo_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_Current = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Current"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Current, KismetMathLibrary_eventCInterpTo_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FLinearColor());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Interpolation"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("color"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Interpolates towards a varying target color smoothly.\n\n@param               Current                 Current Color\n@param               Target                  Target Color\n@param               DeltaTime               Time since last tick\n@param               InterpSpeed             Interpolation speed\n@return              New interpolated Color"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Clamp()
	{
		struct KismetMathLibrary_eventClamp_Parms
		{
			int32 Value;
			int32 Min;
			int32 Max;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Clamp"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventClamp_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventClamp_Parms), 0x0000000000000580);
			UProperty* NewProp_Max = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Max"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Max, KismetMathLibrary_eventClamp_Parms), 0x0000000000000080);
			UProperty* NewProp_Min = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Min"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Min, KismetMathLibrary_eventClamp_Parms), 0x0000000000000080);
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Value, KismetMathLibrary_eventClamp_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Integer"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Clamp (int)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns Value clamped to be between A and B (inclusive)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_ClampAngle()
	{
		struct KismetMathLibrary_eventClampAngle_Parms
		{
			float AngleDegrees;
			float MinAngleDegrees;
			float MaxAngleDegrees;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ClampAngle"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventClampAngle_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventClampAngle_Parms), 0x0000000000000580);
			UProperty* NewProp_MaxAngleDegrees = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MaxAngleDegrees"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MaxAngleDegrees, KismetMathLibrary_eventClampAngle_Parms), 0x0000000000000080);
			UProperty* NewProp_MinAngleDegrees = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MinAngleDegrees"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MinAngleDegrees, KismetMathLibrary_eventClampAngle_Parms), 0x0000000000000080);
			UProperty* NewProp_AngleDegrees = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AngleDegrees"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(AngleDegrees, KismetMathLibrary_eventClampAngle_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Float"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Clamp Angle"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Clamps an arbitrary angle to be between the given angles.  Will clamp to nearest boundary.\n\n@param MinAngleDegrees       \"from\" angle that defines the beginning of the range of valid angles (sweeping clockwise)\n@param MaxAngleDegrees       \"to\" angle that defines the end of the range of valid angles\n@return Returns clamped angle in the range -180..180."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_ClampAxis()
	{
		struct KismetMathLibrary_eventClampAxis_Parms
		{
			float Angle;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ClampAxis"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventClampAxis_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventClampAxis_Parms), 0x0000000000000580);
			UProperty* NewProp_Angle = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Angle"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Angle, KismetMathLibrary_eventClampAxis_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Rotator"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Clamps an angle to the range of [0, 360].\n\n@param Angle The angle to clamp.\n@return The clamped angle."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_ClampVectorSize()
	{
		struct KismetMathLibrary_eventClampVectorSize_Parms
		{
			FVector A;
			float Min;
			float Max;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ClampVectorSize"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventClampVectorSize_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventClampVectorSize_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Max = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Max"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Max, KismetMathLibrary_eventClampVectorSize_Parms), 0x0000000000000080);
			UProperty* NewProp_Min = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Min"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Min, KismetMathLibrary_eventClampVectorSize_Parms), 0x0000000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventClampVectorSize_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Vector"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Clamp the vector size between a min and max length"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_ClassIsChildOf()
	{
		struct KismetMathLibrary_eventClassIsChildOf_Parms
		{
			TSubclassOf<UObject>  TestClass;
			TSubclassOf<UObject>  ParentClass;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ClassIsChildOf"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventClassIsChildOf_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetMathLibrary_eventClassIsChildOf_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetMathLibrary_eventClassIsChildOf_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetMathLibrary_eventClassIsChildOf_Parms), sizeof(bool), true);
			UProperty* NewProp_ParentClass = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ParentClass"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(ParentClass, KismetMathLibrary_eventClassIsChildOf_Parms), 0x0004000000000080, Z_Construct_UClass_UObject_NoRegister());
			UProperty* NewProp_TestClass = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TestClass"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(TestClass, KismetMathLibrary_eventClassIsChildOf_Parms), 0x0004000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Determine if a class is a child of another class.\n\n@return      true if TestClass == ParentClass, or if TestClass is a child of ParentClass; false otherwise, or if either\n                     the value for either parameter is 'None'."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_ComposeRotators()
	{
		struct KismetMathLibrary_eventComposeRotators_Parms
		{
			FRotator A;
			FRotator B;
			FRotator ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ComposeRotators"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventComposeRotators_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventComposeRotators_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventComposeRotators_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventComposeRotators_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Rotator"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("CombineRotators"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("rotate rotation add"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Combine 2 rotations to give you the resulting rotation"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_ComposeTransforms()
	{
		struct KismetMathLibrary_eventComposeTransforms_Parms
		{
			FTransform A;
			FTransform B;
			FTransform ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ComposeTransforms"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(KismetMathLibrary_eventComposeTransforms_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventComposeTransforms_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FTransform());
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventComposeTransforms_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FTransform());
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventComposeTransforms_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FTransform());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Transform"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("multiply *"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Compose two transforms in order: A * B.\n\nOrder matters when composing transforms:\nA * B will yield a transform that logically first applies A then B to any subsequent transformation.\n\nExample: LocalToWorld = ComposeTransforms(DeltaRotation, LocalToWorld) will change rotation in local space by DeltaRotation.\nExample: LocalToWorld = ComposeTransforms(LocalToWorld, DeltaRotation) will change rotation in world space by DeltaRotation.\n\n@return New transform: A * B"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_BoolToByte()
	{
		struct KismetMathLibrary_eventConv_BoolToByte_Parms
		{
			bool InBool;
			uint8 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Conv_BoolToByte"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventConv_BoolToByte_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventConv_BoolToByte_Parms), 0x0000000000000580);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(InBool, KismetMathLibrary_eventConv_BoolToByte_Parms, bool);
			UProperty* NewProp_InBool = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InBool"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(InBool, KismetMathLibrary_eventConv_BoolToByte_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(InBool, KismetMathLibrary_eventConv_BoolToByte_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintAutocast"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Conversions"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("->"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("ToByte (bool)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("cast convert"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Converts a bool to a byte"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_BoolToFloat()
	{
		struct KismetMathLibrary_eventConv_BoolToFloat_Parms
		{
			bool InBool;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Conv_BoolToFloat"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventConv_BoolToFloat_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventConv_BoolToFloat_Parms), 0x0000000000000580);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(InBool, KismetMathLibrary_eventConv_BoolToFloat_Parms, bool);
			UProperty* NewProp_InBool = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InBool"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(InBool, KismetMathLibrary_eventConv_BoolToFloat_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(InBool, KismetMathLibrary_eventConv_BoolToFloat_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintAutocast"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Conversions"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("->"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("ToFloat (bool)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("cast convert"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Converts a bool to a float (0.0f or 1.0f)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_BoolToInt()
	{
		struct KismetMathLibrary_eventConv_BoolToInt_Parms
		{
			bool InBool;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Conv_BoolToInt"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventConv_BoolToInt_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventConv_BoolToInt_Parms), 0x0000000000000580);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(InBool, KismetMathLibrary_eventConv_BoolToInt_Parms, bool);
			UProperty* NewProp_InBool = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InBool"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(InBool, KismetMathLibrary_eventConv_BoolToInt_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(InBool, KismetMathLibrary_eventConv_BoolToInt_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintAutocast"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Conversions"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("->"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("ToInt (bool)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("cast convert"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Converts a bool to an int"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_ByteToFloat()
	{
		struct KismetMathLibrary_eventConv_ByteToFloat_Parms
		{
			uint8 InByte;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Conv_ByteToFloat"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventConv_ByteToFloat_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventConv_ByteToFloat_Parms), 0x0000000000000580);
			UProperty* NewProp_InByte = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InByte"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(InByte, KismetMathLibrary_eventConv_ByteToFloat_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintAutocast"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Conversions"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("->"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("ToFloat (byte)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("cast convert"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Converts a byte to a float"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_ByteToInt()
	{
		struct KismetMathLibrary_eventConv_ByteToInt_Parms
		{
			uint8 InByte;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Conv_ByteToInt"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventConv_ByteToInt_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventConv_ByteToInt_Parms), 0x0000000000000580);
			UProperty* NewProp_InByte = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InByte"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(InByte, KismetMathLibrary_eventConv_ByteToInt_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintAutocast"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Conversions"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("->"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("ToInt (byte)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("cast convert"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Converts a byte to an integer"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_ColorToLinearColor()
	{
		struct KismetMathLibrary_eventConv_ColorToLinearColor_Parms
		{
			FColor InColor;
			FLinearColor ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Conv_ColorToLinearColor"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventConv_ColorToLinearColor_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventConv_ColorToLinearColor_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_InColor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InColor, KismetMathLibrary_eventConv_ColorToLinearColor_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FColor());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintAutocast"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Conversions"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("->"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("ToLinearColor (color)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("cast convert"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Converts a color to LinearColor"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_FloatToLinearColor()
	{
		struct KismetMathLibrary_eventConv_FloatToLinearColor_Parms
		{
			float InFloat;
			FLinearColor ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Conv_FloatToLinearColor"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventConv_FloatToLinearColor_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventConv_FloatToLinearColor_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_InFloat = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InFloat"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InFloat, KismetMathLibrary_eventConv_FloatToLinearColor_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintAutocast"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Conversions"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("->"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("ToLinearColor (float)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("cast convert"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Convert a float into a LinearColor, where each element is that float"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_FloatToVector()
	{
		struct KismetMathLibrary_eventConv_FloatToVector_Parms
		{
			float InFloat;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Conv_FloatToVector"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventConv_FloatToVector_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventConv_FloatToVector_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_InFloat = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InFloat"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InFloat, KismetMathLibrary_eventConv_FloatToVector_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintAutocast"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Conversions"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("->"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("ToVector (float)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("cast convert"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Convert a float into a vector, where each element is that float"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_IntToBool()
	{
		struct KismetMathLibrary_eventConv_IntToBool_Parms
		{
			int32 InInt;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Conv_IntToBool"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventConv_IntToBool_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetMathLibrary_eventConv_IntToBool_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetMathLibrary_eventConv_IntToBool_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetMathLibrary_eventConv_IntToBool_Parms), sizeof(bool), true);
			UProperty* NewProp_InInt = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InInt"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(InInt, KismetMathLibrary_eventConv_IntToBool_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintAutocast"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Conversions"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("->"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("ToBool (int)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("cast convert"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Converts a int to a bool"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_IntToByte()
	{
		struct KismetMathLibrary_eventConv_IntToByte_Parms
		{
			int32 InInt;
			uint8 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Conv_IntToByte"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventConv_IntToByte_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventConv_IntToByte_Parms), 0x0000000000000580);
			UProperty* NewProp_InInt = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InInt"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(InInt, KismetMathLibrary_eventConv_IntToByte_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintAutocast"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Conversions"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("->"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("ToByte (int)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("cast convert"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Converts an integer to a byte (if the integer is too large, returns the low 8 bits)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_IntToFloat()
	{
		struct KismetMathLibrary_eventConv_IntToFloat_Parms
		{
			int32 InInt;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Conv_IntToFloat"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventConv_IntToFloat_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventConv_IntToFloat_Parms), 0x0000000000000580);
			UProperty* NewProp_InInt = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InInt"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(InInt, KismetMathLibrary_eventConv_IntToFloat_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintAutocast"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Conversions"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("->"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("ToFloat (int)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("cast convert"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Converts an integer to a float"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_LinearColorToColor()
	{
		struct KismetMathLibrary_eventConv_LinearColorToColor_Parms
		{
			FLinearColor InLinearColor;
			FColor ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Conv_LinearColorToColor"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventConv_LinearColorToColor_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventConv_LinearColorToColor_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FColor());
			UProperty* NewProp_InLinearColor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InLinearColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InLinearColor, KismetMathLibrary_eventConv_LinearColorToColor_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FLinearColor());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintAutocast"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Conversions"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("->"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("ToColor (linear color)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("cast convert"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Converts a LinearColor to a color"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_LinearColorToVector()
	{
		struct KismetMathLibrary_eventConv_LinearColorToVector_Parms
		{
			FLinearColor InLinearColor;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Conv_LinearColorToVector"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventConv_LinearColorToVector_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventConv_LinearColorToVector_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_InLinearColor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InLinearColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InLinearColor, KismetMathLibrary_eventConv_LinearColorToVector_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FLinearColor());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintAutocast"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Conversions"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("->"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("ToVector (linear color)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("cast convert"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Converts a LinearColor to a vector"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_RotatorToVector()
	{
		struct KismetMathLibrary_eventConv_RotatorToVector_Parms
		{
			FRotator InRot;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Conv_RotatorToVector"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventConv_RotatorToVector_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventConv_RotatorToVector_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_InRot = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InRot"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InRot, KismetMathLibrary_eventConv_RotatorToVector_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintAutocast"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Rotator"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("GetRotationXVector"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("rotation rotate cast convert"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get the X direction vector after this rotation"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_Vector2DToVector()
	{
		struct KismetMathLibrary_eventConv_Vector2DToVector_Parms
		{
			FVector2D InVector2D;
			float Z;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Conv_Vector2DToVector"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventConv_Vector2DToVector_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventConv_Vector2DToVector_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Z = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Z"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Z, KismetMathLibrary_eventConv_Vector2DToVector_Parms), 0x0000000000000080);
			UProperty* NewProp_InVector2D = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InVector2D"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InVector2D, KismetMathLibrary_eventConv_Vector2DToVector_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintAutocast"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Conversions"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("->"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Z"), TEXT("0.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("ToVector (Vector2D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("cast convert"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Convert a Vector2D to a Vector"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_VectorToLinearColor()
	{
		struct KismetMathLibrary_eventConv_VectorToLinearColor_Parms
		{
			FVector InVec;
			FLinearColor ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Conv_VectorToLinearColor"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventConv_VectorToLinearColor_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventConv_VectorToLinearColor_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_InVec = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InVec"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InVec, KismetMathLibrary_eventConv_VectorToLinearColor_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintAutocast"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Conversions"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("->"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("ToLinearColor (vector)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("cast convert"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Converts a vector to LinearColor"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_VectorToRotator()
	{
		struct KismetMathLibrary_eventConv_VectorToRotator_Parms
		{
			FVector InVec;
			FRotator ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Conv_VectorToRotator"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventConv_VectorToRotator_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventConv_VectorToRotator_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_InVec = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InVec"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InVec, KismetMathLibrary_eventConv_VectorToRotator_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintAutocast"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Rotator"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("RotationFromXVector"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("rotation rotate cast convert"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Create a rotator which orients X along the supplied direction vector"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_VectorToTransform()
	{
		struct KismetMathLibrary_eventConv_VectorToTransform_Parms
		{
			FVector InLocation;
			FTransform ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Conv_VectorToTransform"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventConv_VectorToTransform_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventConv_VectorToTransform_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FTransform());
			UProperty* NewProp_InLocation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InLocation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InLocation, KismetMathLibrary_eventConv_VectorToTransform_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintAutocast"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Conversions"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("->"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("ToTransform (vector)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("cast convert"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Convert a vector to a transform. Uses vector as location"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_VectorToVector2D()
	{
		struct KismetMathLibrary_eventConv_VectorToVector2D_Parms
		{
			FVector InVector;
			FVector2D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Conv_VectorToVector2D"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventConv_VectorToVector2D_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventConv_VectorToVector2D_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_InVector = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InVector"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InVector, KismetMathLibrary_eventConv_VectorToVector2D_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintAutocast"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Conversions"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("->"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("ToVector2D (Vector)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("cast convert"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Convert a Vector to a Vector2D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_ConvertTransformToRelative()
	{
		struct KismetMathLibrary_eventConvertTransformToRelative_Parms
		{
			FTransform Transform;
			FTransform ParentTransform;
			FTransform ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ConvertTransformToRelative"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(KismetMathLibrary_eventConvertTransformToRelative_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventConvertTransformToRelative_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FTransform());
			UProperty* NewProp_ParentTransform = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ParentTransform"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ParentTransform, KismetMathLibrary_eventConvertTransformToRelative_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FTransform());
			UProperty* NewProp_Transform = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Transform"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Transform, KismetMathLibrary_eventConvertTransformToRelative_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FTransform());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Transform"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("cast convert"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the given transform, converted to be relative to the given ParentTransform.\n\nExample: AToB = ConvertTransformToRelative(AToWorld, BToWorld) to compute A relative to B.\n\n@param               Transform               The transform you wish to convert\n@param               ParentTransform The transform the conversion is relative to (in the same space as Transform)\n@return              The new relative transform"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Cos()
	{
		struct KismetMathLibrary_eventCos_Parms
		{
			float A;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Cos"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventCos_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventCos_Parms), 0x0000000000000580);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventCos_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Trig"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("COS"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Cos (Radians)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the cosine of A (expects Radians)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_CreateVectorFromYawPitch()
	{
		struct KismetMathLibrary_eventCreateVectorFromYawPitch_Parms
		{
			float Yaw;
			float Pitch;
			float Length;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CreateVectorFromYawPitch"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventCreateVectorFromYawPitch_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventCreateVectorFromYawPitch_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Length = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Length"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Length, KismetMathLibrary_eventCreateVectorFromYawPitch_Parms), 0x0000000000000080);
			UProperty* NewProp_Pitch = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Pitch"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Pitch, KismetMathLibrary_eventCreateVectorFromYawPitch_Parms), 0x0000000000000080);
			UProperty* NewProp_Yaw = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Yaw"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Yaw, KismetMathLibrary_eventCreateVectorFromYawPitch_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Vector"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Length"), TEXT("1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("rotation rotate"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Creates a directional vector from rotation values {Pitch, Yaw} supplied in degrees with specified Length"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Cross_VectorVector()
	{
		struct KismetMathLibrary_eventCross_VectorVector_Parms
		{
			FVector A;
			FVector B;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Cross_VectorVector"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventCross_VectorVector_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventCross_VectorVector_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventCross_VectorVector_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventCross_VectorVector_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Vector"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("x"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Cross Product"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the cross product of two 3d vectors"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_CrossProduct2D()
	{
		struct KismetMathLibrary_eventCrossProduct2D_Parms
		{
			FVector2D A;
			FVector2D B;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CrossProduct2D"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventCrossProduct2D_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventCrossProduct2D_Parms), 0x0000000000000580);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventCrossProduct2D_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventCrossProduct2D_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Vector"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("x"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Cross Product (2D)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the cross product of two 2d vectors"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_DateTimeFromIsoString()
	{
		struct KismetMathLibrary_eventDateTimeFromIsoString_Parms
		{
			FString IsoString;
			FDateTime Result;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DateTimeFromIsoString"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(KismetMathLibrary_eventDateTimeFromIsoString_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetMathLibrary_eventDateTimeFromIsoString_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetMathLibrary_eventDateTimeFromIsoString_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetMathLibrary_eventDateTimeFromIsoString_Parms), sizeof(bool), true);
			UProperty* NewProp_Result = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Result"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Result, KismetMathLibrary_eventDateTimeFromIsoString_Parms), 0x0000000000000180, Z_Construct_UScriptStruct_FDateTime());
			UProperty* NewProp_IsoString = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IsoString"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(IsoString, KismetMathLibrary_eventDateTimeFromIsoString_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|DateTime"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Converts a date string in ISO-8601 format to a DateTime object"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_DateTimeFromString()
	{
		struct KismetMathLibrary_eventDateTimeFromString_Parms
		{
			FString DateTimeString;
			FDateTime Result;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DateTimeFromString"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(KismetMathLibrary_eventDateTimeFromString_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetMathLibrary_eventDateTimeFromString_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetMathLibrary_eventDateTimeFromString_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetMathLibrary_eventDateTimeFromString_Parms), sizeof(bool), true);
			UProperty* NewProp_Result = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Result"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Result, KismetMathLibrary_eventDateTimeFromString_Parms), 0x0000000000000180, Z_Construct_UScriptStruct_FDateTime());
			UProperty* NewProp_DateTimeString = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DateTimeString"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(DateTimeString, KismetMathLibrary_eventDateTimeFromString_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|DateTime"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Converts a date string to a DateTime object"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_DateTimeMaxValue()
	{
		struct KismetMathLibrary_eventDateTimeMaxValue_Parms
		{
			FDateTime ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DateTimeMaxValue"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventDateTimeMaxValue_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventDateTimeMaxValue_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FDateTime());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|DateTime"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("MaxValue"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the maximum date and time value"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_DateTimeMinValue()
	{
		struct KismetMathLibrary_eventDateTimeMinValue_Parms
		{
			FDateTime ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DateTimeMinValue"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventDateTimeMinValue_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventDateTimeMinValue_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FDateTime());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|DateTime"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("MinValue"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the minimum date and time value"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_DaysInMonth()
	{
		struct KismetMathLibrary_eventDaysInMonth_Parms
		{
			int32 Year;
			int32 Month;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DaysInMonth"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventDaysInMonth_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventDaysInMonth_Parms), 0x0000000000000580);
			UProperty* NewProp_Month = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Month"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Month, KismetMathLibrary_eventDaysInMonth_Parms), 0x0000000000000080);
			UProperty* NewProp_Year = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Year"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Year, KismetMathLibrary_eventDaysInMonth_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|DateTime"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("DaysInMonth"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the number of days in the given year and month"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_DaysInYear()
	{
		struct KismetMathLibrary_eventDaysInYear_Parms
		{
			int32 Year;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DaysInYear"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventDaysInYear_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventDaysInYear_Parms), 0x0000000000000580);
			UProperty* NewProp_Year = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Year"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Year, KismetMathLibrary_eventDaysInYear_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|DateTime"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("DaysInYear"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the number of days in the given year"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_DegAcos()
	{
		struct KismetMathLibrary_eventDegAcos_Parms
		{
			float A;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DegAcos"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventDegAcos_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventDegAcos_Parms), 0x0000000000000580);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventDegAcos_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Trig"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("ACOSd"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Acos (Degrees)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the inverse cos (arccos) of A (result is in Degrees)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_DegAsin()
	{
		struct KismetMathLibrary_eventDegAsin_Parms
		{
			float A;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DegAsin"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventDegAsin_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventDegAsin_Parms), 0x0000000000000580);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventDegAsin_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Trig"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("ASINd"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Asin (Degrees)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the inverse sin (arcsin) of A (result is in Degrees)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_DegAtan()
	{
		struct KismetMathLibrary_eventDegAtan_Parms
		{
			float A;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DegAtan"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventDegAtan_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventDegAtan_Parms), 0x0000000000000580);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventDegAtan_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Trig"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Atan (Degrees)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the inverse tan (atan) (result is in Degrees)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_DegAtan2()
	{
		struct KismetMathLibrary_eventDegAtan2_Parms
		{
			float A;
			float B;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DegAtan2"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventDegAtan2_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventDegAtan2_Parms), 0x0000000000000580);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventDegAtan2_Parms), 0x0000000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventDegAtan2_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Trig"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Atan2 (Degrees)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the inverse tan (atan2) of A/B (result is in Degrees)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_DegCos()
	{
		struct KismetMathLibrary_eventDegCos_Parms
		{
			float A;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DegCos"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventDegCos_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventDegCos_Parms), 0x0000000000000580);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventDegCos_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Trig"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("COSd"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Cos (Degrees)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the cos of A (expects Degrees)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_DegreesToRadians()
	{
		struct KismetMathLibrary_eventDegreesToRadians_Parms
		{
			float A;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DegreesToRadians"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventDegreesToRadians_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventDegreesToRadians_Parms), 0x0000000000000580);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventDegreesToRadians_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Trig"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("D2R"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Degrees To Radians"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns radians value based on the input degrees"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_DegSin()
	{
		struct KismetMathLibrary_eventDegSin_Parms
		{
			float A;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DegSin"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventDegSin_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventDegSin_Parms), 0x0000000000000580);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventDegSin_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Trig"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("SINd"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Sin (Degrees)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the sin of A (expects Degrees)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_DegTan()
	{
		struct KismetMathLibrary_eventDegTan_Parms
		{
			float A;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DegTan"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventDegTan_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventDegTan_Parms), 0x0000000000000580);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventDegTan_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Trig"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("TANd"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Tan (Degrees)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the tan of A (expects Degrees)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Divide_ByteByte()
	{
		struct KismetMathLibrary_eventDivide_ByteByte_Parms
		{
			uint8 A;
			uint8 B;
			uint8 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Divide_ByteByte"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventDivide_ByteByte_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventDivide_ByteByte_Parms), 0x0000000000000580);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventDivide_ByteByte_Parms), 0x0000000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventDivide_ByteByte_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Byte"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("/"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_B"), TEXT("1"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Byte / Byte"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("/ divide division"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Division (A / B)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Divide_FloatFloat()
	{
		struct KismetMathLibrary_eventDivide_FloatFloat_Parms
		{
			float A;
			float B;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Divide_FloatFloat"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventDivide_FloatFloat_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventDivide_FloatFloat_Parms), 0x0000000000000580);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventDivide_FloatFloat_Parms), 0x0000000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventDivide_FloatFloat_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Float"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("/"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_B"), TEXT("1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("float / float"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("/ divide division"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Division (A / B)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Divide_IntInt()
	{
		struct KismetMathLibrary_eventDivide_IntInt_Parms
		{
			int32 A;
			int32 B;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Divide_IntInt"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventDivide_IntInt_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventDivide_IntInt_Parms), 0x0000000000000580);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventDivide_IntInt_Parms), 0x0000000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventDivide_IntInt_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Integer"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("/"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_B"), TEXT("1"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("integer / integer"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("/ divide division"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Division (A / B)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Divide_Vector2DFloat()
	{
		struct KismetMathLibrary_eventDivide_Vector2DFloat_Parms
		{
			FVector2D A;
			float B;
			FVector2D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Divide_Vector2DFloat"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventDivide_Vector2DFloat_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventDivide_Vector2DFloat_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventDivide_Vector2DFloat_Parms), 0x0000000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventDivide_Vector2DFloat_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Vector2D"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("/"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_B"), TEXT("1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("vector2d / float"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("/ divide division"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns Vector A divided by B"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Divide_VectorFloat()
	{
		struct KismetMathLibrary_eventDivide_VectorFloat_Parms
		{
			FVector A;
			float B;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Divide_VectorFloat"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventDivide_VectorFloat_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventDivide_VectorFloat_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventDivide_VectorFloat_Parms), 0x0000000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventDivide_VectorFloat_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Vector"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("/"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_B"), TEXT("1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("vector / float"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("/ divide division"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Vector divide by a float"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Divide_VectorInt()
	{
		struct KismetMathLibrary_eventDivide_VectorInt_Parms
		{
			FVector A;
			int32 B;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Divide_VectorInt"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventDivide_VectorInt_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventDivide_VectorInt_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventDivide_VectorInt_Parms), 0x0000000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventDivide_VectorInt_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Vector"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("/"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_B"), TEXT("1"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("vector / int"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("/ divide division"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Vector divide by an integer"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Divide_VectorVector()
	{
		struct KismetMathLibrary_eventDivide_VectorVector_Parms
		{
			FVector A;
			FVector B;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Divide_VectorVector"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventDivide_VectorVector_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventDivide_VectorVector_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventDivide_VectorVector_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventDivide_VectorVector_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Vector"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("/"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_B"), TEXT("1.000000,1.000000,1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("vector / vector"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("/ divide division"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Vector divide by vector"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Dot_VectorVector()
	{
		struct KismetMathLibrary_eventDot_VectorVector_Parms
		{
			FVector A;
			FVector B;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Dot_VectorVector"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventDot_VectorVector_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventDot_VectorVector_Parms), 0x0000000000000580);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventDot_VectorVector_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventDot_VectorVector_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Vector"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("."));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Dot Product"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the dot product of two 3d vectors"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_DotProduct2D()
	{
		struct KismetMathLibrary_eventDotProduct2D_Parms
		{
			FVector2D A;
			FVector2D B;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DotProduct2D"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventDotProduct2D_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventDotProduct2D_Parms), 0x0000000000000580);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventDotProduct2D_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventDotProduct2D_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Vector"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("."));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Dot Product (2D)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the dot product of two 2d vectors"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Ease()
	{
		struct KismetMathLibrary_eventEase_Parms
		{
			float A;
			float B;
			float Alpha;
			TEnumAsByte<EEasingFunc::Type> EasingFunc;
			float BlendExp;
			int32 Steps;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Ease"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventEase_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventEase_Parms), 0x0000000000000580);
			UProperty* NewProp_Steps = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Steps"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Steps, KismetMathLibrary_eventEase_Parms), 0x0000000000000080);
			UProperty* NewProp_BlendExp = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("BlendExp"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(BlendExp, KismetMathLibrary_eventEase_Parms), 0x0000000000000080);
			UProperty* NewProp_EasingFunc = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("EasingFunc"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(EasingFunc, KismetMathLibrary_eventEase_Parms), 0x0000000000000080, Z_Construct_UEnum_Engine_EEasingFunc());
			UProperty* NewProp_Alpha = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Alpha"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Alpha, KismetMathLibrary_eventEase_Parms), 0x0000000000000080);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventEase_Parms), 0x0000000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventEase_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Interpolation"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_BlendExp"), TEXT("2.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Steps"), TEXT("2"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Ease"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Easeing  between A and B using a specified easing function"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_BoolBool()
	{
		struct KismetMathLibrary_eventEqualEqual_BoolBool_Parms
		{
			bool A;
			bool B;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EqualEqual_BoolBool"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventEqualEqual_BoolBool_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetMathLibrary_eventEqualEqual_BoolBool_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetMathLibrary_eventEqualEqual_BoolBool_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetMathLibrary_eventEqualEqual_BoolBool_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(B, KismetMathLibrary_eventEqualEqual_BoolBool_Parms, bool);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(B, KismetMathLibrary_eventEqualEqual_BoolBool_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(B, KismetMathLibrary_eventEqualEqual_BoolBool_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(A, KismetMathLibrary_eventEqualEqual_BoolBool_Parms, bool);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(A, KismetMathLibrary_eventEqualEqual_BoolBool_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(A, KismetMathLibrary_eventEqualEqual_BoolBool_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Boolean"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("=="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Equal Boolean"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("== equal"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if the values are equal (A == B)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_ByteByte()
	{
		struct KismetMathLibrary_eventEqualEqual_ByteByte_Parms
		{
			uint8 A;
			uint8 B;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EqualEqual_ByteByte"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventEqualEqual_ByteByte_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetMathLibrary_eventEqualEqual_ByteByte_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetMathLibrary_eventEqualEqual_ByteByte_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetMathLibrary_eventEqualEqual_ByteByte_Parms), sizeof(bool), true);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventEqualEqual_ByteByte_Parms), 0x0000000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventEqualEqual_ByteByte_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Byte"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("=="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Equal (Byte)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("== equal"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if A is equal to B (A == B)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_ClassClass()
	{
		struct KismetMathLibrary_eventEqualEqual_ClassClass_Parms
		{
			UClass* A;
			UClass* B;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EqualEqual_ClassClass"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventEqualEqual_ClassClass_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetMathLibrary_eventEqualEqual_ClassClass_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetMathLibrary_eventEqualEqual_ClassClass_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetMathLibrary_eventEqualEqual_ClassClass_Parms), sizeof(bool), true);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventEqualEqual_ClassClass_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventEqualEqual_ClassClass_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("=="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Equal (Class)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("== equal"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if A and B are equal (A == B)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_DateTimeDateTime()
	{
		struct KismetMathLibrary_eventEqualEqual_DateTimeDateTime_Parms
		{
			FDateTime A;
			FDateTime B;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EqualEqual_DateTimeDateTime"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventEqualEqual_DateTimeDateTime_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetMathLibrary_eventEqualEqual_DateTimeDateTime_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetMathLibrary_eventEqualEqual_DateTimeDateTime_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetMathLibrary_eventEqualEqual_DateTimeDateTime_Parms), sizeof(bool), true);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventEqualEqual_DateTimeDateTime_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FDateTime());
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventEqualEqual_DateTimeDateTime_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FDateTime());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|DateTime"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("=="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Equal (DateTime)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("== equal"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if the values are equal (A == B)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_FloatFloat()
	{
		struct KismetMathLibrary_eventEqualEqual_FloatFloat_Parms
		{
			float A;
			float B;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EqualEqual_FloatFloat"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventEqualEqual_FloatFloat_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetMathLibrary_eventEqualEqual_FloatFloat_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetMathLibrary_eventEqualEqual_FloatFloat_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetMathLibrary_eventEqualEqual_FloatFloat_Parms), sizeof(bool), true);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventEqualEqual_FloatFloat_Parms), 0x0000000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventEqualEqual_FloatFloat_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Float"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("=="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Equal (float)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("== equal"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if A is exactly equal to B (A == B)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_IntInt()
	{
		struct KismetMathLibrary_eventEqualEqual_IntInt_Parms
		{
			int32 A;
			int32 B;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EqualEqual_IntInt"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventEqualEqual_IntInt_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetMathLibrary_eventEqualEqual_IntInt_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetMathLibrary_eventEqualEqual_IntInt_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetMathLibrary_eventEqualEqual_IntInt_Parms), sizeof(bool), true);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventEqualEqual_IntInt_Parms), 0x0000000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventEqualEqual_IntInt_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Integer"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("=="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Equal (integer)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("== equal"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if A is equal to B (A == B)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_NameName()
	{
		struct KismetMathLibrary_eventEqualEqual_NameName_Parms
		{
			FName A;
			FName B;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EqualEqual_NameName"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventEqualEqual_NameName_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetMathLibrary_eventEqualEqual_NameName_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetMathLibrary_eventEqualEqual_NameName_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetMathLibrary_eventEqualEqual_NameName_Parms), sizeof(bool), true);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventEqualEqual_NameName_Parms), 0x0000000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventEqualEqual_NameName_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Name"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("=="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Equal (Name)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("== equal"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if A and B are equal (A == B)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_ObjectObject()
	{
		struct KismetMathLibrary_eventEqualEqual_ObjectObject_Parms
		{
			UObject* A;
			UObject* B;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EqualEqual_ObjectObject"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventEqualEqual_ObjectObject_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetMathLibrary_eventEqualEqual_ObjectObject_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetMathLibrary_eventEqualEqual_ObjectObject_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetMathLibrary_eventEqualEqual_ObjectObject_Parms), sizeof(bool), true);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventEqualEqual_ObjectObject_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventEqualEqual_ObjectObject_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("=="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Equal (Object)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("== equal"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if A and B are equal (A == B)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_RotatorRotator()
	{
		struct KismetMathLibrary_eventEqualEqual_RotatorRotator_Parms
		{
			FRotator A;
			FRotator B;
			float ErrorTolerance;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EqualEqual_RotatorRotator"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventEqualEqual_RotatorRotator_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetMathLibrary_eventEqualEqual_RotatorRotator_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetMathLibrary_eventEqualEqual_RotatorRotator_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetMathLibrary_eventEqualEqual_RotatorRotator_Parms), sizeof(bool), true);
			UProperty* NewProp_ErrorTolerance = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ErrorTolerance"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ErrorTolerance, KismetMathLibrary_eventEqualEqual_RotatorRotator_Parms), 0x0000000000000080);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventEqualEqual_RotatorRotator_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventEqualEqual_RotatorRotator_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Rotator"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("=="));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_ErrorTolerance"), TEXT("0.000100"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Equal (Rotator)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("== equal"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if rotator A is equal to rotator B (A == B) within a specified error tolerance"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_TimespanTimespan()
	{
		struct KismetMathLibrary_eventEqualEqual_TimespanTimespan_Parms
		{
			FTimespan A;
			FTimespan B;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EqualEqual_TimespanTimespan"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventEqualEqual_TimespanTimespan_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetMathLibrary_eventEqualEqual_TimespanTimespan_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetMathLibrary_eventEqualEqual_TimespanTimespan_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetMathLibrary_eventEqualEqual_TimespanTimespan_Parms), sizeof(bool), true);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventEqualEqual_TimespanTimespan_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FTimespan());
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventEqualEqual_TimespanTimespan_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FTimespan());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Timespan"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("=="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Equal (Timespan)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("== equal"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if the values are equal (A == B)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_TransformTransform()
	{
		struct KismetMathLibrary_eventEqualEqual_TransformTransform_Parms
		{
			FTransform A;
			FTransform B;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EqualEqual_TransformTransform"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(KismetMathLibrary_eventEqualEqual_TransformTransform_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetMathLibrary_eventEqualEqual_TransformTransform_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetMathLibrary_eventEqualEqual_TransformTransform_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetMathLibrary_eventEqualEqual_TransformTransform_Parms), sizeof(bool), true);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventEqualEqual_TransformTransform_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FTransform());
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventEqualEqual_TransformTransform_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FTransform());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Transform"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("=="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Equal Transform"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("== equal"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if transform A is equal to transform B"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_VectorVector()
	{
		struct KismetMathLibrary_eventEqualEqual_VectorVector_Parms
		{
			FVector A;
			FVector B;
			float ErrorTolerance;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EqualEqual_VectorVector"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventEqualEqual_VectorVector_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetMathLibrary_eventEqualEqual_VectorVector_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetMathLibrary_eventEqualEqual_VectorVector_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetMathLibrary_eventEqualEqual_VectorVector_Parms), sizeof(bool), true);
			UProperty* NewProp_ErrorTolerance = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ErrorTolerance"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ErrorTolerance, KismetMathLibrary_eventEqualEqual_VectorVector_Parms), 0x0000000000000080);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventEqualEqual_VectorVector_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventEqualEqual_VectorVector_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Vector"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("=="));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_ErrorTolerance"), TEXT("0.000100"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Equal (vector)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("== equal"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if vector A is equal to vector B (A == B) within a specified error tolerance"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Exp()
	{
		struct KismetMathLibrary_eventExp_Parms
		{
			float A;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Exp"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventExp_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventExp_Parms), 0x0000000000000580);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventExp_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Float"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("e"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns exponential(e) to the power A (e^A)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_FCeil()
	{
		struct KismetMathLibrary_eventFCeil_Parms
		{
			float A;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FCeil"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventFCeil_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventFCeil_Parms), 0x0000000000000580);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventFCeil_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Float"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Rounds A to the smallest following integer"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_FClamp()
	{
		struct KismetMathLibrary_eventFClamp_Parms
		{
			float Value;
			float Min;
			float Max;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FClamp"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventFClamp_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventFClamp_Parms), 0x0000000000000580);
			UProperty* NewProp_Max = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Max"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Max, KismetMathLibrary_eventFClamp_Parms), 0x0000000000000080);
			UProperty* NewProp_Min = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Min"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Min, KismetMathLibrary_eventFClamp_Parms), 0x0000000000000080);
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Value, KismetMathLibrary_eventFClamp_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Float"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Clamp (float)"));
			MetaData->SetValue(ReturnFunction, TEXT("Max"), TEXT("1.0"));
			MetaData->SetValue(ReturnFunction, TEXT("Min"), TEXT("0.0"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns V clamped to be between A and B (inclusive)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_FFloor()
	{
		struct KismetMathLibrary_eventFFloor_Parms
		{
			float A;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FFloor"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventFFloor_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventFFloor_Parms), 0x0000000000000580);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventFFloor_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Float"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Floor"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Rounds A to the largest previous integer"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_FindLookAtRotation()
	{
		struct KismetMathLibrary_eventFindLookAtRotation_Parms
		{
			FVector Start;
			FVector Target;
			FRotator ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FindLookAtRotation"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(KismetMathLibrary_eventFindLookAtRotation_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventFindLookAtRotation_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_Target = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Target"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Target, KismetMathLibrary_eventFindLookAtRotation_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Start = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Start"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Start, KismetMathLibrary_eventFindLookAtRotation_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Rotator"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("rotation rotate"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Find a rotation for an object at Start location to point at Target location."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_FInterpEaseInOut()
	{
		struct KismetMathLibrary_eventFInterpEaseInOut_Parms
		{
			float A;
			float B;
			float Alpha;
			float Exponent;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FInterpEaseInOut"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventFInterpEaseInOut_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventFInterpEaseInOut_Parms), 0x0000000000000580);
			UProperty* NewProp_Exponent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Exponent"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Exponent, KismetMathLibrary_eventFInterpEaseInOut_Parms), 0x0000000000000080);
			UProperty* NewProp_Alpha = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Alpha"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Alpha, KismetMathLibrary_eventFInterpEaseInOut_Parms), 0x0000000000000080);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventFInterpEaseInOut_Parms), 0x0000000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventFInterpEaseInOut_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Float"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Interpolate between A and B, applying an ease in/out function.  Exp controls the degree of the curve."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_FInterpTo()
	{
		struct KismetMathLibrary_eventFInterpTo_Parms
		{
			float Current;
			float Target;
			float DeltaTime;
			float InterpSpeed;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FInterpTo"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventFInterpTo_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventFInterpTo_Parms), 0x0000000000000580);
			UProperty* NewProp_InterpSpeed = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InterpSpeed"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InterpSpeed, KismetMathLibrary_eventFInterpTo_Parms), 0x0000000000000080);
			UProperty* NewProp_DeltaTime = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DeltaTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DeltaTime, KismetMathLibrary_eventFInterpTo_Parms), 0x0000000000000080);
			UProperty* NewProp_Target = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Target"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Target, KismetMathLibrary_eventFInterpTo_Parms), 0x0000000000000080);
			UProperty* NewProp_Current = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Current"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Current, KismetMathLibrary_eventFInterpTo_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Interpolation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Tries to reach Target based on distance from Current position, giving a nice smooth feeling when tracking a position.\n\n@param               Current                 Actual position\n@param               Target                  Target position\n@param               DeltaTime               Time since last tick\n@param               InterpSpeed             Interpolation speed\n@return              New interpolated position"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_FInterpTo_Constant()
	{
		struct KismetMathLibrary_eventFInterpTo_Constant_Parms
		{
			float Current;
			float Target;
			float DeltaTime;
			float InterpSpeed;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FInterpTo_Constant"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventFInterpTo_Constant_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventFInterpTo_Constant_Parms), 0x0000000000000580);
			UProperty* NewProp_InterpSpeed = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InterpSpeed"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InterpSpeed, KismetMathLibrary_eventFInterpTo_Constant_Parms), 0x0000000000000080);
			UProperty* NewProp_DeltaTime = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DeltaTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DeltaTime, KismetMathLibrary_eventFInterpTo_Constant_Parms), 0x0000000000000080);
			UProperty* NewProp_Target = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Target"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Target, KismetMathLibrary_eventFInterpTo_Constant_Parms), 0x0000000000000080);
			UProperty* NewProp_Current = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Current"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Current, KismetMathLibrary_eventFInterpTo_Constant_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Interpolation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Tries to reach Target at a constant rate.\n\n@param               Current                 Actual position\n@param               Target                  Target position\n@param               DeltaTime               Time since last tick\n@param               InterpSpeed             Interpolation speed\n@return              New interpolated position"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_FixedTurn()
	{
		struct KismetMathLibrary_eventFixedTurn_Parms
		{
			float InCurrent;
			float InDesired;
			float InDeltaRate;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FixedTurn"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventFixedTurn_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventFixedTurn_Parms), 0x0000000000000580);
			UProperty* NewProp_InDeltaRate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InDeltaRate"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InDeltaRate, KismetMathLibrary_eventFixedTurn_Parms), 0x0000000000000080);
			UProperty* NewProp_InDesired = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InDesired"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InDesired, KismetMathLibrary_eventFixedTurn_Parms), 0x0000000000000080);
			UProperty* NewProp_InCurrent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InCurrent"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InCurrent, KismetMathLibrary_eventFixedTurn_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Float"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns a new rotation component value\n\n@param InCurrent is the current rotation value\n@param InDesired is the desired rotation value\n@param  is the rotation amount to apply\n\n@return a new rotation component value clamped in the range (-360,360)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_FMax()
	{
		struct KismetMathLibrary_eventFMax_Parms
		{
			float A;
			float B;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FMax"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventFMax_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventFMax_Parms), 0x0000000000000580);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventFMax_Parms), 0x0000000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventFMax_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Float"));
			MetaData->SetValue(ReturnFunction, TEXT("CommutativeAssociativeBinaryOperator"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("MAX"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Max (float)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the maximum value of A and B"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_FMin()
	{
		struct KismetMathLibrary_eventFMin_Parms
		{
			float A;
			float B;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FMin"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventFMin_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventFMin_Parms), 0x0000000000000580);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventFMin_Parms), 0x0000000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventFMin_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Float"));
			MetaData->SetValue(ReturnFunction, TEXT("CommutativeAssociativeBinaryOperator"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("MIN"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Min (float)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the minimum value of A and B"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_FMod()
	{
		struct KismetMathLibrary_eventFMod_Parms
		{
			float Dividend;
			float Divisor;
			float Remainder;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FMod"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(KismetMathLibrary_eventFMod_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventFMod_Parms), 0x0000000000000580);
			UProperty* NewProp_Remainder = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Remainder"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Remainder, KismetMathLibrary_eventFMod_Parms), 0x0000000000000180);
			UProperty* NewProp_Divisor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Divisor"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Divisor, KismetMathLibrary_eventFMod_Parms), 0x0000000000000080);
			UProperty* NewProp_Dividend = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Dividend"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Dividend, KismetMathLibrary_eventFMod_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Float"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Division (whole and remainder)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the number of times Divisor will go into Dividend (i.e., Dividend divided by Divisor), as well as the remainder"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Fraction()
	{
		struct KismetMathLibrary_eventFraction_Parms
		{
			float A;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Fraction"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventFraction_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventFraction_Parms), 0x0000000000000580);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventFraction_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Float"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the fractional part of a float."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_FromDays()
	{
		struct KismetMathLibrary_eventFromDays_Parms
		{
			float Days;
			FTimespan ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FromDays"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventFromDays_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventFromDays_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FTimespan());
			UProperty* NewProp_Days = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Days"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Days, KismetMathLibrary_eventFromDays_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Timespan"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("FromDays"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns a time span that represents the specified number of days"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_FromHours()
	{
		struct KismetMathLibrary_eventFromHours_Parms
		{
			float Hours;
			FTimespan ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FromHours"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventFromHours_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventFromHours_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FTimespan());
			UProperty* NewProp_Hours = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Hours"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Hours, KismetMathLibrary_eventFromHours_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Timespan"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("FromHours"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns a time span that represents the specified number of hours"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_FromMilliseconds()
	{
		struct KismetMathLibrary_eventFromMilliseconds_Parms
		{
			float Milliseconds;
			FTimespan ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FromMilliseconds"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventFromMilliseconds_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventFromMilliseconds_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FTimespan());
			UProperty* NewProp_Milliseconds = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Milliseconds"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Milliseconds, KismetMathLibrary_eventFromMilliseconds_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Timespan"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("FromMilliseconds"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns a time span that represents the specified number of milliseconds"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_FromMinutes()
	{
		struct KismetMathLibrary_eventFromMinutes_Parms
		{
			float Minutes;
			FTimespan ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FromMinutes"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventFromMinutes_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventFromMinutes_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FTimespan());
			UProperty* NewProp_Minutes = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Minutes"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Minutes, KismetMathLibrary_eventFromMinutes_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Timespan"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("FromMinutes"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns a time span that represents the specified number of minutes"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_FromSeconds()
	{
		struct KismetMathLibrary_eventFromSeconds_Parms
		{
			float Seconds;
			FTimespan ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FromSeconds"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventFromSeconds_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventFromSeconds_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FTimespan());
			UProperty* NewProp_Seconds = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Seconds"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Seconds, KismetMathLibrary_eventFromSeconds_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Timespan"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("FromSeconds"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns a time span that represents the specified number of seconds"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_FTrunc()
	{
		struct KismetMathLibrary_eventFTrunc_Parms
		{
			float A;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FTrunc"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventFTrunc_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventFTrunc_Parms), 0x0000000000000580);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventFTrunc_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintAutocast"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Float"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Truncate"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Rounds A to an integer with truncation towards zero.  (e.g. -1.7 truncated to -1, 2.8 truncated to 2)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetAxes()
	{
		struct KismetMathLibrary_eventGetAxes_Parms
		{
			FRotator A;
			FVector X;
			FVector Y;
			FVector Z;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetAxes"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(KismetMathLibrary_eventGetAxes_Parms));
			UProperty* NewProp_Z = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Z"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Z, KismetMathLibrary_eventGetAxes_Parms), 0x0000000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Y = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Y"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Y, KismetMathLibrary_eventGetAxes_Parms), 0x0000000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_X = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("X"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(X, KismetMathLibrary_eventGetAxes_Parms), 0x0000000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventGetAxes_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Rotator"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("rotate rotation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get the reference frame direction vectors (axes) described by this rotation"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetDate()
	{
		struct KismetMathLibrary_eventGetDate_Parms
		{
			FDateTime A;
			FDateTime ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetDate"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventGetDate_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventGetDate_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FDateTime());
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventGetDate_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FDateTime());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|DateTime"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("GetDate"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the date component of A"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetDay()
	{
		struct KismetMathLibrary_eventGetDay_Parms
		{
			FDateTime A;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetDay"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventGetDay_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventGetDay_Parms), 0x0000000000000580);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventGetDay_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FDateTime());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|DateTime"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("GetDay"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the day component of A (1 to 31)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetDayOfYear()
	{
		struct KismetMathLibrary_eventGetDayOfYear_Parms
		{
			FDateTime A;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetDayOfYear"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventGetDayOfYear_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventGetDayOfYear_Parms), 0x0000000000000580);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventGetDayOfYear_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FDateTime());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|DateTime"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("GetDayOfYear"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the day of year of A"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetDays()
	{
		struct KismetMathLibrary_eventGetDays_Parms
		{
			FTimespan A;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetDays"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventGetDays_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventGetDays_Parms), 0x0000000000000580);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventGetDays_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FTimespan());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Timespan"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("GetDays"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the days component of A"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetDirectionVector()
	{
		struct KismetMathLibrary_eventGetDirectionVector_Parms
		{
			FVector From;
			FVector To;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetDirectionVector"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventGetDirectionVector_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventGetDirectionVector_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_To = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("To"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(To, KismetMathLibrary_eventGetDirectionVector_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_From = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("From"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(From, KismetMathLibrary_eventGetDirectionVector_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Vector"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Find the unit direction vector from one position to another."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetDuration()
	{
		struct KismetMathLibrary_eventGetDuration_Parms
		{
			FTimespan A;
			FTimespan ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetDuration"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventGetDuration_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventGetDuration_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FTimespan());
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventGetDuration_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FTimespan());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Timespan"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("GetDuration"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the absolute value of A"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetForwardVector()
	{
		struct KismetMathLibrary_eventGetForwardVector_Parms
		{
			FRotator InRot;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetForwardVector"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventGetForwardVector_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventGetForwardVector_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_InRot = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InRot"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InRot, KismetMathLibrary_eventGetForwardVector_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Vector"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("rotation rotate"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Rotate the world forward vector by the given rotation"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetHour()
	{
		struct KismetMathLibrary_eventGetHour_Parms
		{
			FDateTime A;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetHour"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventGetHour_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventGetHour_Parms), 0x0000000000000580);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventGetHour_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FDateTime());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|DateTime"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("GetHour"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the hour component of A (24h format)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetHour12()
	{
		struct KismetMathLibrary_eventGetHour12_Parms
		{
			FDateTime A;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetHour12"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventGetHour12_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventGetHour12_Parms), 0x0000000000000580);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventGetHour12_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FDateTime());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|DateTime"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("GetHour12"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the hour component of A (12h format)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetHours()
	{
		struct KismetMathLibrary_eventGetHours_Parms
		{
			FTimespan A;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetHours"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventGetHours_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventGetHours_Parms), 0x0000000000000580);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventGetHours_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FTimespan());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Timespan"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("GetHours"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the hours component of A"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetMaxElement()
	{
		struct KismetMathLibrary_eventGetMaxElement_Parms
		{
			FVector A;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetMaxElement"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventGetMaxElement_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventGetMaxElement_Parms), 0x0000000000000580);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventGetMaxElement_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Vector"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Find the maximum element (X, Y or Z) of a vector"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetMillisecond()
	{
		struct KismetMathLibrary_eventGetMillisecond_Parms
		{
			FDateTime A;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetMillisecond"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventGetMillisecond_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventGetMillisecond_Parms), 0x0000000000000580);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventGetMillisecond_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FDateTime());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|DateTime"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("GetMillisecond"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the millisecond component of A"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetMilliseconds()
	{
		struct KismetMathLibrary_eventGetMilliseconds_Parms
		{
			FTimespan A;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetMilliseconds"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventGetMilliseconds_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventGetMilliseconds_Parms), 0x0000000000000580);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventGetMilliseconds_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FTimespan());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Timespan"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("GetMilliseconds"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the milliseconds component of A"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetMinElement()
	{
		struct KismetMathLibrary_eventGetMinElement_Parms
		{
			FVector A;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetMinElement"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventGetMinElement_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventGetMinElement_Parms), 0x0000000000000580);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventGetMinElement_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Vector"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Find the minimum element (X, Y or Z) of a vector"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetMinute()
	{
		struct KismetMathLibrary_eventGetMinute_Parms
		{
			FDateTime A;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetMinute"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventGetMinute_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventGetMinute_Parms), 0x0000000000000580);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventGetMinute_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FDateTime());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|DateTime"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("GetMinute"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the minute component of A"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetMinutes()
	{
		struct KismetMathLibrary_eventGetMinutes_Parms
		{
			FTimespan A;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetMinutes"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventGetMinutes_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventGetMinutes_Parms), 0x0000000000000580);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventGetMinutes_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FTimespan());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Timespan"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("GetMinutes"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the minutes component of A"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetMonth()
	{
		struct KismetMathLibrary_eventGetMonth_Parms
		{
			FDateTime A;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetMonth"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventGetMonth_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventGetMonth_Parms), 0x0000000000000580);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventGetMonth_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FDateTime());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|DateTime"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("GetMonth"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the month component of A"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetPI()
	{
		struct KismetMathLibrary_eventGetPI_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetPI"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventGetPI_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventGetPI_Parms), 0x0000000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Trig"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("PI"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Get PI"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the value of PI"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetRightVector()
	{
		struct KismetMathLibrary_eventGetRightVector_Parms
		{
			FRotator InRot;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetRightVector"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventGetRightVector_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventGetRightVector_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_InRot = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InRot"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InRot, KismetMathLibrary_eventGetRightVector_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Vector"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("rotation rotate"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Rotate the world right vector by the given rotation"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetSecond()
	{
		struct KismetMathLibrary_eventGetSecond_Parms
		{
			FDateTime A;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetSecond"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventGetSecond_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventGetSecond_Parms), 0x0000000000000580);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventGetSecond_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FDateTime());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|DateTime"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("GetSecond"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the second component of A"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetSeconds()
	{
		struct KismetMathLibrary_eventGetSeconds_Parms
		{
			FTimespan A;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetSeconds"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventGetSeconds_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventGetSeconds_Parms), 0x0000000000000580);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventGetSeconds_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FTimespan());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Timespan"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("GetSeconds"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the seconds component of A"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetTimeOfDay()
	{
		struct KismetMathLibrary_eventGetTimeOfDay_Parms
		{
			FDateTime A;
			FTimespan ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetTimeOfDay"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventGetTimeOfDay_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventGetTimeOfDay_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FTimespan());
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventGetTimeOfDay_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FDateTime());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|DateTime"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("GetTimeOfDay"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the time elapsed since midnight of A"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetTotalDays()
	{
		struct KismetMathLibrary_eventGetTotalDays_Parms
		{
			FTimespan A;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetTotalDays"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventGetTotalDays_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventGetTotalDays_Parms), 0x0000000000000580);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventGetTotalDays_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FTimespan());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Timespan"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("GetTotalDays"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the total number of days in A"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetTotalHours()
	{
		struct KismetMathLibrary_eventGetTotalHours_Parms
		{
			FTimespan A;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetTotalHours"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventGetTotalHours_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventGetTotalHours_Parms), 0x0000000000000580);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventGetTotalHours_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FTimespan());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Timespan"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("GetTotalHours"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the total number of hours in A"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetTotalMilliseconds()
	{
		struct KismetMathLibrary_eventGetTotalMilliseconds_Parms
		{
			FTimespan A;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetTotalMilliseconds"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventGetTotalMilliseconds_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventGetTotalMilliseconds_Parms), 0x0000000000000580);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventGetTotalMilliseconds_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FTimespan());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Timespan"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("GetTotalMilliseconds"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the total number of milliseconds in A"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetTotalMinutes()
	{
		struct KismetMathLibrary_eventGetTotalMinutes_Parms
		{
			FTimespan A;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetTotalMinutes"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventGetTotalMinutes_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventGetTotalMinutes_Parms), 0x0000000000000580);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventGetTotalMinutes_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FTimespan());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Timespan"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("GetTotalMinutes"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the total number of minutes in A"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetTotalSeconds()
	{
		struct KismetMathLibrary_eventGetTotalSeconds_Parms
		{
			FTimespan A;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetTotalSeconds"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventGetTotalSeconds_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventGetTotalSeconds_Parms), 0x0000000000000580);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventGetTotalSeconds_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FTimespan());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Timespan"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("GetTotalSeconds"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the total number of seconds in A"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetUpVector()
	{
		struct KismetMathLibrary_eventGetUpVector_Parms
		{
			FRotator InRot;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetUpVector"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventGetUpVector_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventGetUpVector_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_InRot = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InRot"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InRot, KismetMathLibrary_eventGetUpVector_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Vector"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("rotation rotate"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Rotate the world up vector by the given rotation"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetVectorArrayAverage()
	{
		struct KismetMathLibrary_eventGetVectorArrayAverage_Parms
		{
			TArray<FVector> Vectors;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetVectorArrayAverage"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(KismetMathLibrary_eventGetVectorArrayAverage_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventGetVectorArrayAverage_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Vectors = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Vectors"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Vectors, KismetMathLibrary_eventGetVectorArrayAverage_Parms), 0x0000000008000182);
			UProperty* NewProp_Vectors_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Vectors, TEXT("Vectors"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Vector"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Find the average of an array of vectors"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetYawPitchFromVector()
	{
		struct KismetMathLibrary_eventGetYawPitchFromVector_Parms
		{
			FVector InVec;
			float Yaw;
			float Pitch;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetYawPitchFromVector"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(KismetMathLibrary_eventGetYawPitchFromVector_Parms));
			UProperty* NewProp_Pitch = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Pitch"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Pitch, KismetMathLibrary_eventGetYawPitchFromVector_Parms), 0x0000000000000180);
			UProperty* NewProp_Yaw = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Yaw"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Yaw, KismetMathLibrary_eventGetYawPitchFromVector_Parms), 0x0000000000000180);
			UProperty* NewProp_InVec = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InVec"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InVec, KismetMathLibrary_eventGetYawPitchFromVector_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Vector2D"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("NativeBreakFunc"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Breaks a vector apart into Yaw, Pitch rotation values given in degrees. (non-clamped)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetYear()
	{
		struct KismetMathLibrary_eventGetYear_Parms
		{
			FDateTime A;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetYear"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventGetYear_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventGetYear_Parms), 0x0000000000000580);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventGetYear_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FDateTime());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|DateTime"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("GetYear"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the year component of A"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Greater_ByteByte()
	{
		struct KismetMathLibrary_eventGreater_ByteByte_Parms
		{
			uint8 A;
			uint8 B;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Greater_ByteByte"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventGreater_ByteByte_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetMathLibrary_eventGreater_ByteByte_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetMathLibrary_eventGreater_ByteByte_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetMathLibrary_eventGreater_ByteByte_Parms), sizeof(bool), true);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventGreater_ByteByte_Parms), 0x0000000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventGreater_ByteByte_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Byte"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(">"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Byte > Byte"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("> greater"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if A is greater than B (A > B)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Greater_DateTimeDateTime()
	{
		struct KismetMathLibrary_eventGreater_DateTimeDateTime_Parms
		{
			FDateTime A;
			FDateTime B;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Greater_DateTimeDateTime"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventGreater_DateTimeDateTime_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetMathLibrary_eventGreater_DateTimeDateTime_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetMathLibrary_eventGreater_DateTimeDateTime_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetMathLibrary_eventGreater_DateTimeDateTime_Parms), sizeof(bool), true);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventGreater_DateTimeDateTime_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FDateTime());
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventGreater_DateTimeDateTime_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FDateTime());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|DateTime"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(">"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("DateTime > DateTime"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("> greater"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if A is Greater than B (A > B)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Greater_FloatFloat()
	{
		struct KismetMathLibrary_eventGreater_FloatFloat_Parms
		{
			float A;
			float B;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Greater_FloatFloat"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventGreater_FloatFloat_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetMathLibrary_eventGreater_FloatFloat_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetMathLibrary_eventGreater_FloatFloat_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetMathLibrary_eventGreater_FloatFloat_Parms), sizeof(bool), true);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventGreater_FloatFloat_Parms), 0x0000000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventGreater_FloatFloat_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Float"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(">"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("float > float"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("> greater"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if A is Greater than B (A > B)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Greater_IntInt()
	{
		struct KismetMathLibrary_eventGreater_IntInt_Parms
		{
			int32 A;
			int32 B;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Greater_IntInt"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventGreater_IntInt_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetMathLibrary_eventGreater_IntInt_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetMathLibrary_eventGreater_IntInt_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetMathLibrary_eventGreater_IntInt_Parms), sizeof(bool), true);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventGreater_IntInt_Parms), 0x0000000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventGreater_IntInt_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Integer"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(">"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("integer > integer"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("> greater"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if A is greater than B (A > B)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Greater_TimespanTimespan()
	{
		struct KismetMathLibrary_eventGreater_TimespanTimespan_Parms
		{
			FTimespan A;
			FTimespan B;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Greater_TimespanTimespan"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventGreater_TimespanTimespan_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetMathLibrary_eventGreater_TimespanTimespan_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetMathLibrary_eventGreater_TimespanTimespan_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetMathLibrary_eventGreater_TimespanTimespan_Parms), sizeof(bool), true);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventGreater_TimespanTimespan_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FTimespan());
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventGreater_TimespanTimespan_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FTimespan());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Timespan"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(">"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Timespan > Timespan"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("> greater"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if A is Greater than B (A > B)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_GreaterEqual_ByteByte()
	{
		struct KismetMathLibrary_eventGreaterEqual_ByteByte_Parms
		{
			uint8 A;
			uint8 B;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GreaterEqual_ByteByte"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventGreaterEqual_ByteByte_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetMathLibrary_eventGreaterEqual_ByteByte_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetMathLibrary_eventGreaterEqual_ByteByte_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetMathLibrary_eventGreaterEqual_ByteByte_Parms), sizeof(bool), true);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventGreaterEqual_ByteByte_Parms), 0x0000000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventGreaterEqual_ByteByte_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Byte"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(">="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Byte >= Byte"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT(">= greater"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if A is greater than or equal to B (A >= B)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_GreaterEqual_DateTimeDateTime()
	{
		struct KismetMathLibrary_eventGreaterEqual_DateTimeDateTime_Parms
		{
			FDateTime A;
			FDateTime B;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GreaterEqual_DateTimeDateTime"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventGreaterEqual_DateTimeDateTime_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetMathLibrary_eventGreaterEqual_DateTimeDateTime_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetMathLibrary_eventGreaterEqual_DateTimeDateTime_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetMathLibrary_eventGreaterEqual_DateTimeDateTime_Parms), sizeof(bool), true);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventGreaterEqual_DateTimeDateTime_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FDateTime());
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventGreaterEqual_DateTimeDateTime_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FDateTime());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|DateTime"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(">="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("DateTime >= DateTime"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT(">= greater"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if A is Greater than B (A >= B)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_GreaterEqual_FloatFloat()
	{
		struct KismetMathLibrary_eventGreaterEqual_FloatFloat_Parms
		{
			float A;
			float B;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GreaterEqual_FloatFloat"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventGreaterEqual_FloatFloat_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetMathLibrary_eventGreaterEqual_FloatFloat_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetMathLibrary_eventGreaterEqual_FloatFloat_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetMathLibrary_eventGreaterEqual_FloatFloat_Parms), sizeof(bool), true);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventGreaterEqual_FloatFloat_Parms), 0x0000000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventGreaterEqual_FloatFloat_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Float"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(">="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("float >= float"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT(">= greater"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if A is Greater than or equal to B (A >= B)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_GreaterEqual_IntInt()
	{
		struct KismetMathLibrary_eventGreaterEqual_IntInt_Parms
		{
			int32 A;
			int32 B;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GreaterEqual_IntInt"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventGreaterEqual_IntInt_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetMathLibrary_eventGreaterEqual_IntInt_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetMathLibrary_eventGreaterEqual_IntInt_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetMathLibrary_eventGreaterEqual_IntInt_Parms), sizeof(bool), true);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventGreaterEqual_IntInt_Parms), 0x0000000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventGreaterEqual_IntInt_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Integer"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(">="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("integer >= integer"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT(">= greater"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if A is greater than or equal to B (A >= B)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_GreaterEqual_TimespanTimespan()
	{
		struct KismetMathLibrary_eventGreaterEqual_TimespanTimespan_Parms
		{
			FTimespan A;
			FTimespan B;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GreaterEqual_TimespanTimespan"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventGreaterEqual_TimespanTimespan_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetMathLibrary_eventGreaterEqual_TimespanTimespan_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetMathLibrary_eventGreaterEqual_TimespanTimespan_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetMathLibrary_eventGreaterEqual_TimespanTimespan_Parms), sizeof(bool), true);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventGreaterEqual_TimespanTimespan_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FTimespan());
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventGreaterEqual_TimespanTimespan_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FTimespan());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Timespan"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(">="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Timespan >= Timespan"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT(">= greater"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if A is Greater than B (A >= B)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_GreaterGreater_VectorRotator()
	{
		struct KismetMathLibrary_eventGreaterGreater_VectorRotator_Parms
		{
			FVector A;
			FRotator B;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GreaterGreater_VectorRotator"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventGreaterGreater_VectorRotator_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventGreaterGreater_VectorRotator_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventGreaterGreater_VectorRotator_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventGreaterGreater_VectorRotator_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Vector"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("RotateVector"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns result of vector A rotated by Rotator B"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_GridSnap_Float()
	{
		struct KismetMathLibrary_eventGridSnap_Float_Parms
		{
			float Location;
			float GridSize;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GridSnap_Float"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventGridSnap_Float_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventGridSnap_Float_Parms), 0x0000000000000580);
			UProperty* NewProp_GridSize = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("GridSize"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(GridSize, KismetMathLibrary_eventGridSnap_Float_Parms), 0x0000000000000080);
			UProperty* NewProp_Location = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Location"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Location, KismetMathLibrary_eventGridSnap_Float_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Float"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Snap to grid (float)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Snaps a value to the nearest grid multiple. E.g.,\n            Location = 5.1, GridSize = 10.0 : return value = 10.0\nIf GridSize is 0 Location is returned\nif GridSize is very small precision issues may occur."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_HSVToRGB()
	{
		struct KismetMathLibrary_eventHSVToRGB_Parms
		{
			float H;
			float S;
			float V;
			float A;
			FLinearColor ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("HSVToRGB"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventHSVToRGB_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventHSVToRGB_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventHSVToRGB_Parms), 0x0000000000000080);
			UProperty* NewProp_V = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("V"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(V, KismetMathLibrary_eventHSVToRGB_Parms), 0x0000000000000080);
			UProperty* NewProp_S = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("S"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(S, KismetMathLibrary_eventHSVToRGB_Parms), 0x0000000000000080);
			UProperty* NewProp_H = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("H"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(H, KismetMathLibrary_eventHSVToRGB_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Color"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_A"), TEXT("1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("HSV to RGB"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Make a color from individual color components (HSV space)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_HSVToRGB_Vector()
	{
		struct KismetMathLibrary_eventHSVToRGB_Vector_Parms
		{
			FLinearColor HSV;
			FLinearColor RGB;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("HSVToRGB_Vector"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(KismetMathLibrary_eventHSVToRGB_Vector_Parms));
			UProperty* NewProp_RGB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("RGB"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(RGB, KismetMathLibrary_eventHSVToRGB_Vector_Parms), 0x0000000000000180, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_HSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("HSV"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(HSV, KismetMathLibrary_eventHSVToRGB_Vector_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FLinearColor());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Color"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("HSV to RGB (vector)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("cast convert"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Converts a HSV linear color (where H is in R, S is in G, and V is in B) to RGB"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Hypotenuse()
	{
		struct KismetMathLibrary_eventHypotenuse_Parms
		{
			float Width;
			float Height;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Hypotenuse"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventHypotenuse_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventHypotenuse_Parms), 0x0000000000000580);
			UProperty* NewProp_Height = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Height"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Height, KismetMathLibrary_eventHypotenuse_Parms), 0x0000000000000080);
			UProperty* NewProp_Width = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Width"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Width, KismetMathLibrary_eventHypotenuse_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Float"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("pythagorean theorem"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the hypotenuse of a right-angled triangle given the width and height."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_InRange_FloatFloat()
	{
		struct KismetMathLibrary_eventInRange_FloatFloat_Parms
		{
			float Value;
			float Min;
			float Max;
			bool InclusiveMin;
			bool InclusiveMax;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("InRange_FloatFloat"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventInRange_FloatFloat_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetMathLibrary_eventInRange_FloatFloat_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetMathLibrary_eventInRange_FloatFloat_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetMathLibrary_eventInRange_FloatFloat_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(InclusiveMax, KismetMathLibrary_eventInRange_FloatFloat_Parms, bool);
			UProperty* NewProp_InclusiveMax = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InclusiveMax"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(InclusiveMax, KismetMathLibrary_eventInRange_FloatFloat_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(InclusiveMax, KismetMathLibrary_eventInRange_FloatFloat_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(InclusiveMin, KismetMathLibrary_eventInRange_FloatFloat_Parms, bool);
			UProperty* NewProp_InclusiveMin = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InclusiveMin"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(InclusiveMin, KismetMathLibrary_eventInRange_FloatFloat_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(InclusiveMin, KismetMathLibrary_eventInRange_FloatFloat_Parms), sizeof(bool), true);
			UProperty* NewProp_Max = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Max"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Max, KismetMathLibrary_eventInRange_FloatFloat_Parms), 0x0000000000000080);
			UProperty* NewProp_Min = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Min"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Min, KismetMathLibrary_eventInRange_FloatFloat_Parms), 0x0000000000000080);
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Value, KismetMathLibrary_eventInRange_FloatFloat_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Float"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_InclusiveMax"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_InclusiveMin"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("InRange (float)"));
			MetaData->SetValue(ReturnFunction, TEXT("Max"), TEXT("1.0"));
			MetaData->SetValue(ReturnFunction, TEXT("Min"), TEXT("0.0"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns V clamped to be between A and B (inclusive)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_InverseLerp()
	{
		struct KismetMathLibrary_eventInverseLerp_Parms
		{
			float A;
			float B;
			float Value;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("InverseLerp"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventInverseLerp_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventInverseLerp_Parms), 0x0000000000000580);
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Value, KismetMathLibrary_eventInverseLerp_Parms), 0x0000000000000080);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventInverseLerp_Parms), 0x0000000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventInverseLerp_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Float"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("percentage normalize range"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the percentage of the range B-A that corresponds to Value. E.g.,\n      A = 0, B = 8, Value = 3 : return value = 3/8, indicating Value is 3/8 from A to B\n      A = 8, B = 0, Value = 3 : return value = 5/8, indicating Value is 5/8 from A to B\nNamed InverseLerp because Lerp( A, B, InverseLerp(A, B, Value) ) == Value\n@param A The \"from\" value this float could be, usually but not necessarily a minimum. Returned as 0.\n@param B The \"to\" value this float could be, usually but not necessarily a maximum. Returned as 1.\n@param Value A value intended to be normalized relative to B-A\n@return A normalized value considering A and B."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_InverseTransformDirection()
	{
		struct KismetMathLibrary_eventInverseTransformDirection_Parms
		{
			FTransform T;
			FVector Direction;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("InverseTransformDirection"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(KismetMathLibrary_eventInverseTransformDirection_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventInverseTransformDirection_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Direction = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Direction"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Direction, KismetMathLibrary_eventInverseTransformDirection_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_T = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("T"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(T, KismetMathLibrary_eventInverseTransformDirection_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FTransform());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Transform"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Transform a direction vector by the inverse of the supplied transform - will not change its length.\nFor example, if T was an object's transform, would transform a direction from world space to local space."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_InverseTransformLocation()
	{
		struct KismetMathLibrary_eventInverseTransformLocation_Parms
		{
			FTransform T;
			FVector Location;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("InverseTransformLocation"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(KismetMathLibrary_eventInverseTransformLocation_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventInverseTransformLocation_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Location = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Location"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Location, KismetMathLibrary_eventInverseTransformLocation_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_T = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("T"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(T, KismetMathLibrary_eventInverseTransformLocation_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FTransform());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Transform"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("location"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Transform a position by the inverse of the supplied transform.\nFor example, if T was an object's transform, would transform a position from world space to local space."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_InvertTransform()
	{
		struct KismetMathLibrary_eventInvertTransform_Parms
		{
			FTransform T;
			FTransform ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("InvertTransform"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(KismetMathLibrary_eventInvertTransform_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventInvertTransform_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FTransform());
			UProperty* NewProp_T = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("T"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(T, KismetMathLibrary_eventInvertTransform_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FTransform());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Transform"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("inverse"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the inverse of the given transform T.\n\nExample: Given a LocalToWorld transform, WorldToLocal will be returned.\n\n@param       T       The transform you wish to invert\n@return      The inverse of T."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_IsAfternoon()
	{
		struct KismetMathLibrary_eventIsAfternoon_Parms
		{
			FDateTime A;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsAfternoon"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventIsAfternoon_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetMathLibrary_eventIsAfternoon_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetMathLibrary_eventIsAfternoon_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetMathLibrary_eventIsAfternoon_Parms), sizeof(bool), true);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventIsAfternoon_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FDateTime());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|DateTime"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("IsAfternoon"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns whether A's time is in the afternoon"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_IsLeapYear()
	{
		struct KismetMathLibrary_eventIsLeapYear_Parms
		{
			int32 Year;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsLeapYear"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventIsLeapYear_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetMathLibrary_eventIsLeapYear_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetMathLibrary_eventIsLeapYear_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetMathLibrary_eventIsLeapYear_Parms), sizeof(bool), true);
			UProperty* NewProp_Year = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Year"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Year, KismetMathLibrary_eventIsLeapYear_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|DateTime"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("IsLeapYear"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns whether given year is a leap year"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_IsMorning()
	{
		struct KismetMathLibrary_eventIsMorning_Parms
		{
			FDateTime A;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsMorning"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventIsMorning_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetMathLibrary_eventIsMorning_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetMathLibrary_eventIsMorning_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetMathLibrary_eventIsMorning_Parms), sizeof(bool), true);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventIsMorning_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FDateTime());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|DateTime"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("IsMorning"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns whether A's time is in the morning"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Lerp()
	{
		struct KismetMathLibrary_eventLerp_Parms
		{
			float A;
			float B;
			float Alpha;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Lerp"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventLerp_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventLerp_Parms), 0x0000000000000580);
			UProperty* NewProp_Alpha = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Alpha"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Alpha, KismetMathLibrary_eventLerp_Parms), 0x0000000000000080);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventLerp_Parms), 0x0000000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventLerp_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Float"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Linearly interpolates between A and B based on Alpha (100% of A when Alpha=0 and 100% of B when Alpha=1)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Less_ByteByte()
	{
		struct KismetMathLibrary_eventLess_ByteByte_Parms
		{
			uint8 A;
			uint8 B;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Less_ByteByte"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventLess_ByteByte_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetMathLibrary_eventLess_ByteByte_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetMathLibrary_eventLess_ByteByte_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetMathLibrary_eventLess_ByteByte_Parms), sizeof(bool), true);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventLess_ByteByte_Parms), 0x0000000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventLess_ByteByte_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Byte"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("<"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Byte < Byte"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("< less"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if A is less than B (A < B)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Less_DateTimeDateTime()
	{
		struct KismetMathLibrary_eventLess_DateTimeDateTime_Parms
		{
			FDateTime A;
			FDateTime B;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Less_DateTimeDateTime"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventLess_DateTimeDateTime_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetMathLibrary_eventLess_DateTimeDateTime_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetMathLibrary_eventLess_DateTimeDateTime_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetMathLibrary_eventLess_DateTimeDateTime_Parms), sizeof(bool), true);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventLess_DateTimeDateTime_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FDateTime());
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventLess_DateTimeDateTime_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FDateTime());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|DateTime"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("<"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("DateTime < DateTime"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("< less"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if A is Greater than B (A < B)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Less_FloatFloat()
	{
		struct KismetMathLibrary_eventLess_FloatFloat_Parms
		{
			float A;
			float B;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Less_FloatFloat"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventLess_FloatFloat_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetMathLibrary_eventLess_FloatFloat_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetMathLibrary_eventLess_FloatFloat_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetMathLibrary_eventLess_FloatFloat_Parms), sizeof(bool), true);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventLess_FloatFloat_Parms), 0x0000000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventLess_FloatFloat_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Float"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("<"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("float < float"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("< less"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if A is Less than B (A < B)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Less_IntInt()
	{
		struct KismetMathLibrary_eventLess_IntInt_Parms
		{
			int32 A;
			int32 B;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Less_IntInt"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventLess_IntInt_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetMathLibrary_eventLess_IntInt_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetMathLibrary_eventLess_IntInt_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetMathLibrary_eventLess_IntInt_Parms), sizeof(bool), true);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventLess_IntInt_Parms), 0x0000000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventLess_IntInt_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Integer"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("<"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("integer < integer"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("< less"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if A is less than B (A < B)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Less_TimespanTimespan()
	{
		struct KismetMathLibrary_eventLess_TimespanTimespan_Parms
		{
			FTimespan A;
			FTimespan B;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Less_TimespanTimespan"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventLess_TimespanTimespan_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetMathLibrary_eventLess_TimespanTimespan_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetMathLibrary_eventLess_TimespanTimespan_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetMathLibrary_eventLess_TimespanTimespan_Parms), sizeof(bool), true);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventLess_TimespanTimespan_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FTimespan());
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventLess_TimespanTimespan_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FTimespan());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Timespan"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("<"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Timespan < Timespan"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("< less"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if A is Greater than B (A < B)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_LessEqual_ByteByte()
	{
		struct KismetMathLibrary_eventLessEqual_ByteByte_Parms
		{
			uint8 A;
			uint8 B;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LessEqual_ByteByte"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventLessEqual_ByteByte_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetMathLibrary_eventLessEqual_ByteByte_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetMathLibrary_eventLessEqual_ByteByte_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetMathLibrary_eventLessEqual_ByteByte_Parms), sizeof(bool), true);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventLessEqual_ByteByte_Parms), 0x0000000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventLessEqual_ByteByte_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Byte"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("<="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Byte <= Byte"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("<= less"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if A is less than or equal to B (A <= B)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_LessEqual_DateTimeDateTime()
	{
		struct KismetMathLibrary_eventLessEqual_DateTimeDateTime_Parms
		{
			FDateTime A;
			FDateTime B;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LessEqual_DateTimeDateTime"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventLessEqual_DateTimeDateTime_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetMathLibrary_eventLessEqual_DateTimeDateTime_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetMathLibrary_eventLessEqual_DateTimeDateTime_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetMathLibrary_eventLessEqual_DateTimeDateTime_Parms), sizeof(bool), true);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventLessEqual_DateTimeDateTime_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FDateTime());
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventLessEqual_DateTimeDateTime_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FDateTime());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|DateTime"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("<="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("DateTime <= DateTime"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("<= less"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if A is Greater than B (A <= B)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_LessEqual_FloatFloat()
	{
		struct KismetMathLibrary_eventLessEqual_FloatFloat_Parms
		{
			float A;
			float B;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LessEqual_FloatFloat"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventLessEqual_FloatFloat_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetMathLibrary_eventLessEqual_FloatFloat_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetMathLibrary_eventLessEqual_FloatFloat_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetMathLibrary_eventLessEqual_FloatFloat_Parms), sizeof(bool), true);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventLessEqual_FloatFloat_Parms), 0x0000000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventLessEqual_FloatFloat_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Float"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("<="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("float <= float"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("<= less"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if A is Less than or equal to B (A <= B)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_LessEqual_IntInt()
	{
		struct KismetMathLibrary_eventLessEqual_IntInt_Parms
		{
			int32 A;
			int32 B;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LessEqual_IntInt"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventLessEqual_IntInt_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetMathLibrary_eventLessEqual_IntInt_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetMathLibrary_eventLessEqual_IntInt_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetMathLibrary_eventLessEqual_IntInt_Parms), sizeof(bool), true);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventLessEqual_IntInt_Parms), 0x0000000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventLessEqual_IntInt_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Integer"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("<="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("integer <= integer"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("<= less"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if A is less than or equal to B (A <= B)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_LessEqual_TimespanTimespan()
	{
		struct KismetMathLibrary_eventLessEqual_TimespanTimespan_Parms
		{
			FTimespan A;
			FTimespan B;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LessEqual_TimespanTimespan"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventLessEqual_TimespanTimespan_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetMathLibrary_eventLessEqual_TimespanTimespan_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetMathLibrary_eventLessEqual_TimespanTimespan_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetMathLibrary_eventLessEqual_TimespanTimespan_Parms), sizeof(bool), true);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventLessEqual_TimespanTimespan_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FTimespan());
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventLessEqual_TimespanTimespan_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FTimespan());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Timespan"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("<="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Timespan <= Timespan"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("<= less"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if A is Greater than B (A <= B)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_LessLess_VectorRotator()
	{
		struct KismetMathLibrary_eventLessLess_VectorRotator_Parms
		{
			FVector A;
			FRotator B;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LessLess_VectorRotator"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventLessLess_VectorRotator_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventLessLess_VectorRotator_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventLessLess_VectorRotator_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventLessLess_VectorRotator_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Vector"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("UnrotateVector"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns result of vector A rotated by the inverse of Rotator B"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_LinearColorLerp()
	{
		struct KismetMathLibrary_eventLinearColorLerp_Parms
		{
			FLinearColor A;
			FLinearColor B;
			float Alpha;
			FLinearColor ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LinearColorLerp"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventLinearColorLerp_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventLinearColorLerp_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_Alpha = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Alpha"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Alpha, KismetMathLibrary_eventLinearColorLerp_Parms), 0x0000000000000080);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventLinearColorLerp_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventLinearColorLerp_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FLinearColor());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Color"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Lerp (LinearColor)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Linearly interpolates between A and B based on Alpha (100% of A when Alpha=0 and 100% of B when Alpha=1)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_LinearColorLerpUsingHSV()
	{
		struct KismetMathLibrary_eventLinearColorLerpUsingHSV_Parms
		{
			FLinearColor A;
			FLinearColor B;
			float Alpha;
			FLinearColor ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LinearColorLerpUsingHSV"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventLinearColorLerpUsingHSV_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventLinearColorLerpUsingHSV_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_Alpha = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Alpha"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Alpha, KismetMathLibrary_eventLinearColorLerpUsingHSV_Parms), 0x0000000000000080);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventLinearColorLerpUsingHSV_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventLinearColorLerpUsingHSV_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FLinearColor());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Color"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Lerp Using HSV (LinearColor)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Linearly interpolates between two colors by the specified Alpha amount (100% of A when Alpha=0 and 100% of B when Alpha=1).  The interpolation is performed in HSV color space taking the shortest path to the new color's hue.  This can give better results than a normal lerp, but is much more expensive.  The incoming colors are in RGB space, and the output color will be RGB.  The alpha value will also be interpolated.\n\n@param       A               The color and alpha to interpolate from as linear RGBA\n@param       B               The color and alpha to interpolate to as linear RGBA\n@param       Alpha   Scalar interpolation amount (usually between 0.0 and 1.0 inclusive)\n\n@return      The interpolated color in linear RGB space along with the interpolated alpha value"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_LinePlaneIntersection()
	{
		struct KismetMathLibrary_eventLinePlaneIntersection_Parms
		{
			FVector LineStart;
			FVector LineEnd;
			FPlane APlane;
			float T;
			FVector Intersection;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LinePlaneIntersection"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(KismetMathLibrary_eventLinePlaneIntersection_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetMathLibrary_eventLinePlaneIntersection_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetMathLibrary_eventLinePlaneIntersection_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetMathLibrary_eventLinePlaneIntersection_Parms), sizeof(bool), true);
			UProperty* NewProp_Intersection = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Intersection"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Intersection, KismetMathLibrary_eventLinePlaneIntersection_Parms), 0x0000000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_T = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("T"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(T, KismetMathLibrary_eventLinePlaneIntersection_Parms), 0x0000000000000180);
			UProperty* NewProp_APlane = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("APlane"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(APlane, KismetMathLibrary_eventLinePlaneIntersection_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FPlane());
			UProperty* NewProp_LineEnd = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LineEnd"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LineEnd, KismetMathLibrary_eventLinePlaneIntersection_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_LineStart = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LineStart"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LineStart, KismetMathLibrary_eventLinePlaneIntersection_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Intersection"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Computes the intersection point between a line and a plane.\n@param               T - The t of the intersection between the line and the plane\n@param               Intersection - The point of intersection between the line and the plane\n@return              True if the intersection test was successful."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_LinePlaneIntersection_OriginNormal()
	{
		struct KismetMathLibrary_eventLinePlaneIntersection_OriginNormal_Parms
		{
			FVector LineStart;
			FVector LineEnd;
			FVector PlaneOrigin;
			FVector PlaneNormal;
			float T;
			FVector Intersection;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LinePlaneIntersection_OriginNormal"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(KismetMathLibrary_eventLinePlaneIntersection_OriginNormal_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetMathLibrary_eventLinePlaneIntersection_OriginNormal_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetMathLibrary_eventLinePlaneIntersection_OriginNormal_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetMathLibrary_eventLinePlaneIntersection_OriginNormal_Parms), sizeof(bool), true);
			UProperty* NewProp_Intersection = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Intersection"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Intersection, KismetMathLibrary_eventLinePlaneIntersection_OriginNormal_Parms), 0x0000000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_T = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("T"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(T, KismetMathLibrary_eventLinePlaneIntersection_OriginNormal_Parms), 0x0000000000000180);
			UProperty* NewProp_PlaneNormal = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PlaneNormal"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PlaneNormal, KismetMathLibrary_eventLinePlaneIntersection_OriginNormal_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_PlaneOrigin = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PlaneOrigin"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PlaneOrigin, KismetMathLibrary_eventLinePlaneIntersection_OriginNormal_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_LineEnd = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LineEnd"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LineEnd, KismetMathLibrary_eventLinePlaneIntersection_OriginNormal_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_LineStart = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LineStart"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LineStart, KismetMathLibrary_eventLinePlaneIntersection_OriginNormal_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Intersection"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Line Plane Intersection (Origin & Normal)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Computes the intersection point between a line and a plane.\n@param               T - The t of the intersection between the line and the plane\n@param               Intersection - The point of intersection between the line and the plane\n@return              True if the intersection test was successful."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Loge()
	{
		struct KismetMathLibrary_eventLoge_Parms
		{
			float A;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Loge"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventLoge_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventLoge_Parms), 0x0000000000000580);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventLoge_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Float"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns natural log of A (if e^R == A, returns R)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeColor()
	{
		struct KismetMathLibrary_eventMakeColor_Parms
		{
			float R;
			float G;
			float B;
			float A;
			FLinearColor ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MakeColor"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventMakeColor_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventMakeColor_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventMakeColor_Parms), 0x0000000000000080);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventMakeColor_Parms), 0x0000000000000080);
			UProperty* NewProp_G = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("G"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(G, KismetMathLibrary_eventMakeColor_Parms), 0x0000000000000080);
			UProperty* NewProp_R = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("R"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(R, KismetMathLibrary_eventMakeColor_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Color"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_A"), TEXT("1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("construct build"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Make a color from individual color components (RGB space)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeDateTime()
	{
		struct KismetMathLibrary_eventMakeDateTime_Parms
		{
			int32 Year;
			int32 Month;
			int32 Day;
			int32 Hour;
			int32 Minute;
			int32 Second;
			int32 Millisecond;
			FDateTime ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MakeDateTime"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventMakeDateTime_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventMakeDateTime_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FDateTime());
			UProperty* NewProp_Millisecond = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Millisecond"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Millisecond, KismetMathLibrary_eventMakeDateTime_Parms), 0x0000040000000080);
			UProperty* NewProp_Second = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Second"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Second, KismetMathLibrary_eventMakeDateTime_Parms), 0x0000040000000080);
			UProperty* NewProp_Minute = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Minute"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Minute, KismetMathLibrary_eventMakeDateTime_Parms), 0x0000040000000080);
			UProperty* NewProp_Hour = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Hour"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Hour, KismetMathLibrary_eventMakeDateTime_Parms), 0x0000040000000080);
			UProperty* NewProp_Day = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Day"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Day, KismetMathLibrary_eventMakeDateTime_Parms), 0x0000000000000080);
			UProperty* NewProp_Month = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Month"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Month, KismetMathLibrary_eventMakeDateTime_Parms), 0x0000000000000080);
			UProperty* NewProp_Year = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Year"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Year, KismetMathLibrary_eventMakeDateTime_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AdvancedDisplay"), TEXT("3"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|DateTime"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Hour"), TEXT("0"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Millisecond"), TEXT("0"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Minute"), TEXT("0"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Second"), TEXT("0"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("NativeMakeFunc"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Makes a DateTime struct"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakePulsatingValue()
	{
		struct KismetMathLibrary_eventMakePulsatingValue_Parms
		{
			float InCurrentTime;
			float InPulsesPerSecond;
			float InPhase;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MakePulsatingValue"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventMakePulsatingValue_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventMakePulsatingValue_Parms), 0x0000000000000580);
			UProperty* NewProp_InPhase = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InPhase"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InPhase, KismetMathLibrary_eventMakePulsatingValue_Parms), 0x0000000000000080);
			UProperty* NewProp_InPulsesPerSecond = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InPulsesPerSecond"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InPulsesPerSecond, KismetMathLibrary_eventMakePulsatingValue_Parms), 0x0000000000000080);
			UProperty* NewProp_InCurrentTime = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InCurrentTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InCurrentTime, KismetMathLibrary_eventMakePulsatingValue_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Float"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_InPhase"), TEXT("0.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_InPulsesPerSecond"), TEXT("1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Simple function to create a pulsating scalar value\n\n@param  InCurrentTime  Current absolute time\n@param  InPulsesPerSecond  How many full pulses per second?\n@param  InPhase  Optional phase amount, between 0.0 and 1.0 (to synchronize pulses)\n\n@return  Pulsating value (0.0-1.0)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeRandomStream()
	{
		struct KismetMathLibrary_eventMakeRandomStream_Parms
		{
			int32 InitialSeed;
			FRandomStream ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MakeRandomStream"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventMakeRandomStream_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventMakeRandomStream_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FRandomStream());
			UProperty* NewProp_InitialSeed = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InitialSeed"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(InitialSeed, KismetMathLibrary_eventMakeRandomStream_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Random"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("construct build"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("NativeMakeFunc"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Makes a SRand-based random number generator"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeRotationFromAxes()
	{
		struct KismetMathLibrary_eventMakeRotationFromAxes_Parms
		{
			FVector Forward;
			FVector Right;
			FVector Up;
			FRotator ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MakeRotationFromAxes"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventMakeRotationFromAxes_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventMakeRotationFromAxes_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_Up = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Up"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Up, KismetMathLibrary_eventMakeRotationFromAxes_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Right = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Right"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Right, KismetMathLibrary_eventMakeRotationFromAxes_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Forward = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Forward"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Forward, KismetMathLibrary_eventMakeRotationFromAxes_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Rotator"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("construct build rotation rotate"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Build a reference frame from three axes"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeRotator()
	{
		struct KismetMathLibrary_eventMakeRotator_Parms
		{
			float Roll;
			float Pitch;
			float Yaw;
			FRotator ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MakeRotator"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventMakeRotator_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventMakeRotator_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_Yaw = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Yaw"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Yaw, KismetMathLibrary_eventMakeRotator_Parms), 0x0000000000000080);
			UProperty* NewProp_Pitch = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Pitch"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Pitch, KismetMathLibrary_eventMakeRotator_Parms), 0x0000000000000080);
			UProperty* NewProp_Roll = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Roll"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Roll, KismetMathLibrary_eventMakeRotator_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Rotator"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("construct build rotation rotate rotator makerotator"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("NativeMakeFunc"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Makes a rotator {Roll, Pitch, Yaw} from rotation values supplied in degrees"));
			MetaData->SetValue(NewProp_Yaw, TEXT("DisplayName"), TEXT("Z (Yaw)"));
			MetaData->SetValue(NewProp_Pitch, TEXT("DisplayName"), TEXT("Y (Pitch)"));
			MetaData->SetValue(NewProp_Roll, TEXT("DisplayName"), TEXT("X (Roll)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeRotFromX()
	{
		struct KismetMathLibrary_eventMakeRotFromX_Parms
		{
			FVector X;
			FRotator ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MakeRotFromX"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(KismetMathLibrary_eventMakeRotFromX_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventMakeRotFromX_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_X = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("X"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(X, KismetMathLibrary_eventMakeRotFromX_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Rotator"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("construct build rotation rotate rotator makerotator"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Builds a rotator given only a XAxis. Y and Z are unspecified but will be orthonormal. XAxis need not be normalized."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeRotFromXY()
	{
		struct KismetMathLibrary_eventMakeRotFromXY_Parms
		{
			FVector X;
			FVector Y;
			FRotator ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MakeRotFromXY"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(KismetMathLibrary_eventMakeRotFromXY_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventMakeRotFromXY_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_Y = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Y"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Y, KismetMathLibrary_eventMakeRotFromXY_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_X = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("X"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(X, KismetMathLibrary_eventMakeRotFromXY_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Rotator"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("construct build rotation rotate rotator makerotator"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Builds a matrix with given X and Y axes. X will remain fixed, Y may be changed minimally to enforce orthogonality. Z will be computed. Inputs need not be normalized."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeRotFromXZ()
	{
		struct KismetMathLibrary_eventMakeRotFromXZ_Parms
		{
			FVector X;
			FVector Z;
			FRotator ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MakeRotFromXZ"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(KismetMathLibrary_eventMakeRotFromXZ_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventMakeRotFromXZ_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_Z = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Z"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Z, KismetMathLibrary_eventMakeRotFromXZ_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_X = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("X"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(X, KismetMathLibrary_eventMakeRotFromXZ_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Rotator"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("construct build rotation rotate rotator makerotator"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Builds a matrix with given X and Z axes. X will remain fixed, Z may be changed minimally to enforce orthogonality. Y will be computed. Inputs need not be normalized."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeRotFromY()
	{
		struct KismetMathLibrary_eventMakeRotFromY_Parms
		{
			FVector Y;
			FRotator ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MakeRotFromY"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(KismetMathLibrary_eventMakeRotFromY_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventMakeRotFromY_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_Y = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Y"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Y, KismetMathLibrary_eventMakeRotFromY_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Rotator"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("construct build rotation rotate rotator makerotator"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Builds a rotation matrix given only a YAxis. X and Z are unspecified but will be orthonormal. YAxis need not be normalized."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeRotFromYX()
	{
		struct KismetMathLibrary_eventMakeRotFromYX_Parms
		{
			FVector Y;
			FVector X;
			FRotator ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MakeRotFromYX"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(KismetMathLibrary_eventMakeRotFromYX_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventMakeRotFromYX_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_X = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("X"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(X, KismetMathLibrary_eventMakeRotFromYX_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Y = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Y"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Y, KismetMathLibrary_eventMakeRotFromYX_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Rotator"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("construct build rotation rotate rotator makerotator"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Builds a matrix with given Y and X axes. Y will remain fixed, X may be changed minimally to enforce orthogonality. Z will be computed. Inputs need not be normalized."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeRotFromYZ()
	{
		struct KismetMathLibrary_eventMakeRotFromYZ_Parms
		{
			FVector Y;
			FVector Z;
			FRotator ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MakeRotFromYZ"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(KismetMathLibrary_eventMakeRotFromYZ_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventMakeRotFromYZ_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_Z = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Z"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Z, KismetMathLibrary_eventMakeRotFromYZ_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Y = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Y"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Y, KismetMathLibrary_eventMakeRotFromYZ_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Rotator"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("construct build rotation rotate rotator makerotator"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Builds a matrix with given Y and Z axes. Y will remain fixed, Z may be changed minimally to enforce orthogonality. X will be computed. Inputs need not be normalized."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeRotFromZ()
	{
		struct KismetMathLibrary_eventMakeRotFromZ_Parms
		{
			FVector Z;
			FRotator ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MakeRotFromZ"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(KismetMathLibrary_eventMakeRotFromZ_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventMakeRotFromZ_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_Z = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Z"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Z, KismetMathLibrary_eventMakeRotFromZ_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Rotator"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("construct build rotation rotate rotator makerotator"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Builds a rotation matrix given only a ZAxis. X and Y are unspecified but will be orthonormal. ZAxis need not be normalized."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeRotFromZX()
	{
		struct KismetMathLibrary_eventMakeRotFromZX_Parms
		{
			FVector Z;
			FVector X;
			FRotator ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MakeRotFromZX"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(KismetMathLibrary_eventMakeRotFromZX_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventMakeRotFromZX_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_X = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("X"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(X, KismetMathLibrary_eventMakeRotFromZX_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Z = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Z"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Z, KismetMathLibrary_eventMakeRotFromZX_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Rotator"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("construct build rotation rotate rotator makerotator"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Builds a matrix with given Z and X axes. Z will remain fixed, X may be changed minimally to enforce orthogonality. Y will be computed. Inputs need not be normalized."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeRotFromZY()
	{
		struct KismetMathLibrary_eventMakeRotFromZY_Parms
		{
			FVector Z;
			FVector Y;
			FRotator ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MakeRotFromZY"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(KismetMathLibrary_eventMakeRotFromZY_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventMakeRotFromZY_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_Y = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Y"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Y, KismetMathLibrary_eventMakeRotFromZY_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Z = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Z"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Z, KismetMathLibrary_eventMakeRotFromZY_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Rotator"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("construct build rotation rotate rotator makerotator"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Builds a matrix with given Z and Y axes. Z will remain fixed, Y may be changed minimally to enforce orthogonality. X will be computed. Inputs need not be normalized."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeTimespan()
	{
		struct KismetMathLibrary_eventMakeTimespan_Parms
		{
			int32 Days;
			int32 Hours;
			int32 Minutes;
			int32 Seconds;
			int32 Milliseconds;
			FTimespan ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MakeTimespan"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventMakeTimespan_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventMakeTimespan_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FTimespan());
			UProperty* NewProp_Milliseconds = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Milliseconds"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Milliseconds, KismetMathLibrary_eventMakeTimespan_Parms), 0x0000000000000080);
			UProperty* NewProp_Seconds = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Seconds"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Seconds, KismetMathLibrary_eventMakeTimespan_Parms), 0x0000000000000080);
			UProperty* NewProp_Minutes = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Minutes"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Minutes, KismetMathLibrary_eventMakeTimespan_Parms), 0x0000000000000080);
			UProperty* NewProp_Hours = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Hours"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Hours, KismetMathLibrary_eventMakeTimespan_Parms), 0x0000000000000080);
			UProperty* NewProp_Days = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Days"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Days, KismetMathLibrary_eventMakeTimespan_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Timespan"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("NativeMakeFunc"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Makes a Timespan struct"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeTransform()
	{
		struct KismetMathLibrary_eventMakeTransform_Parms
		{
			FVector Location;
			FRotator Rotation;
			FVector Scale;
			FTransform ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MakeTransform"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventMakeTransform_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventMakeTransform_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FTransform());
			UProperty* NewProp_Scale = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Scale"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Scale, KismetMathLibrary_eventMakeTransform_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Rotation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Rotation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Rotation, KismetMathLibrary_eventMakeTransform_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_Location = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Location"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Location, KismetMathLibrary_eventMakeTransform_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Transform"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("construct build"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("NativeMakeFunc"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("Scale"), TEXT("1,1,1"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Make a transform from location, rotation and scale"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeVector()
	{
		struct KismetMathLibrary_eventMakeVector_Parms
		{
			float X;
			float Y;
			float Z;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MakeVector"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventMakeVector_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventMakeVector_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Z = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Z"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Z, KismetMathLibrary_eventMakeVector_Parms), 0x0000000000000080);
			UProperty* NewProp_Y = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Y"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Y, KismetMathLibrary_eventMakeVector_Parms), 0x0000000000000080);
			UProperty* NewProp_X = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("X"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(X, KismetMathLibrary_eventMakeVector_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Vector"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("construct build"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("NativeMakeFunc"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Makes a vector {X, Y, Z}"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeVector2D()
	{
		struct KismetMathLibrary_eventMakeVector2D_Parms
		{
			float X;
			float Y;
			FVector2D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MakeVector2D"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventMakeVector2D_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventMakeVector2D_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_Y = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Y"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Y, KismetMathLibrary_eventMakeVector2D_Parms), 0x0000000000000080);
			UProperty* NewProp_X = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("X"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(X, KismetMathLibrary_eventMakeVector2D_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Vector2D"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("construct build"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("NativeMakeFunc"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Makes a 2d vector {X, Y}"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_MapRangeClamped()
	{
		struct KismetMathLibrary_eventMapRangeClamped_Parms
		{
			float Value;
			float InRangeA;
			float InRangeB;
			float OutRangeA;
			float OutRangeB;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MapRangeClamped"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventMapRangeClamped_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventMapRangeClamped_Parms), 0x0000000000000580);
			UProperty* NewProp_OutRangeB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutRangeB"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(OutRangeB, KismetMathLibrary_eventMapRangeClamped_Parms), 0x0000000000000080);
			UProperty* NewProp_OutRangeA = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutRangeA"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(OutRangeA, KismetMathLibrary_eventMapRangeClamped_Parms), 0x0000000000000080);
			UProperty* NewProp_InRangeB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InRangeB"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InRangeB, KismetMathLibrary_eventMapRangeClamped_Parms), 0x0000000000000080);
			UProperty* NewProp_InRangeA = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InRangeA"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InRangeA, KismetMathLibrary_eventMapRangeClamped_Parms), 0x0000000000000080);
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Value, KismetMathLibrary_eventMapRangeClamped_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Float"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("get mapped value"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns Value mapped from one range into another where the Value is clamped to the Input Range.  (e.g. 0.5 normalized from the range 0->1 to 0->50 would result in 25)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_MapRangeUnclamped()
	{
		struct KismetMathLibrary_eventMapRangeUnclamped_Parms
		{
			float Value;
			float InRangeA;
			float InRangeB;
			float OutRangeA;
			float OutRangeB;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MapRangeUnclamped"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventMapRangeUnclamped_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventMapRangeUnclamped_Parms), 0x0000000000000580);
			UProperty* NewProp_OutRangeB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutRangeB"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(OutRangeB, KismetMathLibrary_eventMapRangeUnclamped_Parms), 0x0000000000000080);
			UProperty* NewProp_OutRangeA = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutRangeA"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(OutRangeA, KismetMathLibrary_eventMapRangeUnclamped_Parms), 0x0000000000000080);
			UProperty* NewProp_InRangeB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InRangeB"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InRangeB, KismetMathLibrary_eventMapRangeUnclamped_Parms), 0x0000000000000080);
			UProperty* NewProp_InRangeA = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InRangeA"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InRangeA, KismetMathLibrary_eventMapRangeUnclamped_Parms), 0x0000000000000080);
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Value, KismetMathLibrary_eventMapRangeUnclamped_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Float"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("get mapped value"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns Value mapped from one range into another.  (e.g. 20 normalized from the range 10->50 to 20->40 would result in 25)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Max()
	{
		struct KismetMathLibrary_eventMax_Parms
		{
			int32 A;
			int32 B;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Max"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventMax_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventMax_Parms), 0x0000000000000580);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventMax_Parms), 0x0000000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventMax_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Integer"));
			MetaData->SetValue(ReturnFunction, TEXT("CommutativeAssociativeBinaryOperator"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("MAX"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Max (int)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the maximum value of A and B"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_MaxOfByteArray()
	{
		struct KismetMathLibrary_eventMaxOfByteArray_Parms
		{
			TArray<uint8> ByteArray;
			int32 IndexOfMaxValue;
			uint8 MaxValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MaxOfByteArray"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(KismetMathLibrary_eventMaxOfByteArray_Parms));
			UProperty* NewProp_MaxValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MaxValue"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(MaxValue, KismetMathLibrary_eventMaxOfByteArray_Parms), 0x0000000000000180);
			UProperty* NewProp_IndexOfMaxValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IndexOfMaxValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(IndexOfMaxValue, KismetMathLibrary_eventMaxOfByteArray_Parms), 0x0000000000000180);
			UProperty* NewProp_ByteArray = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ByteArray"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ByteArray, KismetMathLibrary_eventMaxOfByteArray_Parms), 0x0000000008000182);
			UProperty* NewProp_ByteArray_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ByteArray, TEXT("ByteArray"), RF_Public|RF_Transient|RF_Native) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Byte"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns max of all array entries and the index at which it was found. Returns value of 0 and index of -1 if the supplied array is empty."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_MaxOfFloatArray()
	{
		struct KismetMathLibrary_eventMaxOfFloatArray_Parms
		{
			TArray<float> FloatArray;
			int32 IndexOfMaxValue;
			float MaxValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MaxOfFloatArray"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(KismetMathLibrary_eventMaxOfFloatArray_Parms));
			UProperty* NewProp_MaxValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MaxValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MaxValue, KismetMathLibrary_eventMaxOfFloatArray_Parms), 0x0000000000000180);
			UProperty* NewProp_IndexOfMaxValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IndexOfMaxValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(IndexOfMaxValue, KismetMathLibrary_eventMaxOfFloatArray_Parms), 0x0000000000000180);
			UProperty* NewProp_FloatArray = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FloatArray"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(FloatArray, KismetMathLibrary_eventMaxOfFloatArray_Parms), 0x0000000008000182);
			UProperty* NewProp_FloatArray_Inner = new(EC_InternalUseOnlyConstructor, NewProp_FloatArray, TEXT("FloatArray"), RF_Public|RF_Transient|RF_Native) UFloatProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Float"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns max of all array entries and the index at which it was found. Returns value of 0 and index of -1 if the supplied array is empty."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_MaxOfIntArray()
	{
		struct KismetMathLibrary_eventMaxOfIntArray_Parms
		{
			TArray<int32> IntArray;
			int32 IndexOfMaxValue;
			int32 MaxValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MaxOfIntArray"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(KismetMathLibrary_eventMaxOfIntArray_Parms));
			UProperty* NewProp_MaxValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MaxValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MaxValue, KismetMathLibrary_eventMaxOfIntArray_Parms), 0x0000000000000180);
			UProperty* NewProp_IndexOfMaxValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IndexOfMaxValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(IndexOfMaxValue, KismetMathLibrary_eventMaxOfIntArray_Parms), 0x0000000000000180);
			UProperty* NewProp_IntArray = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IntArray"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(IntArray, KismetMathLibrary_eventMaxOfIntArray_Parms), 0x0000000008000182);
			UProperty* NewProp_IntArray_Inner = new(EC_InternalUseOnlyConstructor, NewProp_IntArray, TEXT("IntArray"), RF_Public|RF_Transient|RF_Native) UIntProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Integer"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns max of all array entries and the index at which it was found. Returns value of 0 and index of -1 if the supplied array is empty."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Min()
	{
		struct KismetMathLibrary_eventMin_Parms
		{
			int32 A;
			int32 B;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Min"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventMin_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventMin_Parms), 0x0000000000000580);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventMin_Parms), 0x0000000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventMin_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Integer"));
			MetaData->SetValue(ReturnFunction, TEXT("CommutativeAssociativeBinaryOperator"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("MIN"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Min (int)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the minimum value of A and B"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_MinimumAreaRectangle()
	{
		struct KismetMathLibrary_eventMinimumAreaRectangle_Parms
		{
			UObject* WorldContextObject;
			TArray<FVector> InVerts;
			FVector SampleSurfaceNormal;
			FVector OutRectCenter;
			FRotator OutRectRotation;
			float OutSideLengthX;
			float OutSideLengthY;
			bool bDebugDraw;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MinimumAreaRectangle"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C22405, 65535, sizeof(KismetMathLibrary_eventMinimumAreaRectangle_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDebugDraw, KismetMathLibrary_eventMinimumAreaRectangle_Parms, bool);
			UProperty* NewProp_bDebugDraw = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bDebugDraw"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDebugDraw, KismetMathLibrary_eventMinimumAreaRectangle_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bDebugDraw, KismetMathLibrary_eventMinimumAreaRectangle_Parms), sizeof(bool), true);
			UProperty* NewProp_OutSideLengthY = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutSideLengthY"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(OutSideLengthY, KismetMathLibrary_eventMinimumAreaRectangle_Parms), 0x0000000000000180);
			UProperty* NewProp_OutSideLengthX = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutSideLengthX"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(OutSideLengthX, KismetMathLibrary_eventMinimumAreaRectangle_Parms), 0x0000000000000180);
			UProperty* NewProp_OutRectRotation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutRectRotation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(OutRectRotation, KismetMathLibrary_eventMinimumAreaRectangle_Parms), 0x0000000000000180, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_OutRectCenter = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutRectCenter"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(OutRectCenter, KismetMathLibrary_eventMinimumAreaRectangle_Parms), 0x0000000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_SampleSurfaceNormal = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SampleSurfaceNormal"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SampleSurfaceNormal, KismetMathLibrary_eventMinimumAreaRectangle_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_InVerts = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InVerts"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(InVerts, KismetMathLibrary_eventMinimumAreaRectangle_Parms), 0x0000000008000182);
			UProperty* NewProp_InVerts_Inner = new(EC_InternalUseOnlyConstructor, NewProp_InVerts, TEXT("InVerts"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetMathLibrary_eventMinimumAreaRectangle_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Geometry"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bDebugDraw"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Finds the minimum area rectangle that encloses all of the points in InVerts\nUses algorithm found in http://www.geometrictools.com/Documentation/MinimumAreaRectangle.pdf\n\n@param               InVerts - Points to enclose in the rectangle\n@outparam    OutRectCenter - Center of the enclosing rectangle\n@outparam    OutRectSideA - Vector oriented and sized to represent one edge of the enclosing rectangle, orthogonal to OutRectSideB\n@outparam    OutRectSideB - Vector oriented and sized to represent one edge of the enclosing rectangle, orthogonal to OutRectSideA"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_MinOfByteArray()
	{
		struct KismetMathLibrary_eventMinOfByteArray_Parms
		{
			TArray<uint8> ByteArray;
			int32 IndexOfMinValue;
			uint8 MinValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MinOfByteArray"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(KismetMathLibrary_eventMinOfByteArray_Parms));
			UProperty* NewProp_MinValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MinValue"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(MinValue, KismetMathLibrary_eventMinOfByteArray_Parms), 0x0000000000000180);
			UProperty* NewProp_IndexOfMinValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IndexOfMinValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(IndexOfMinValue, KismetMathLibrary_eventMinOfByteArray_Parms), 0x0000000000000180);
			UProperty* NewProp_ByteArray = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ByteArray"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ByteArray, KismetMathLibrary_eventMinOfByteArray_Parms), 0x0000000008000182);
			UProperty* NewProp_ByteArray_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ByteArray, TEXT("ByteArray"), RF_Public|RF_Transient|RF_Native) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Byte"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns min of all array entries and the index at which it was found. Returns value of 0 and index of -1 if the supplied array is empty."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_MinOfFloatArray()
	{
		struct KismetMathLibrary_eventMinOfFloatArray_Parms
		{
			TArray<float> FloatArray;
			int32 IndexOfMinValue;
			float MinValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MinOfFloatArray"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(KismetMathLibrary_eventMinOfFloatArray_Parms));
			UProperty* NewProp_MinValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MinValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MinValue, KismetMathLibrary_eventMinOfFloatArray_Parms), 0x0000000000000180);
			UProperty* NewProp_IndexOfMinValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IndexOfMinValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(IndexOfMinValue, KismetMathLibrary_eventMinOfFloatArray_Parms), 0x0000000000000180);
			UProperty* NewProp_FloatArray = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FloatArray"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(FloatArray, KismetMathLibrary_eventMinOfFloatArray_Parms), 0x0000000008000182);
			UProperty* NewProp_FloatArray_Inner = new(EC_InternalUseOnlyConstructor, NewProp_FloatArray, TEXT("FloatArray"), RF_Public|RF_Transient|RF_Native) UFloatProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Float"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns min of all array entries and the index at which it was found. Returns value of 0 and index of -1 if the supplied array is empty."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_MinOfIntArray()
	{
		struct KismetMathLibrary_eventMinOfIntArray_Parms
		{
			TArray<int32> IntArray;
			int32 IndexOfMinValue;
			int32 MinValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MinOfIntArray"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(KismetMathLibrary_eventMinOfIntArray_Parms));
			UProperty* NewProp_MinValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MinValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MinValue, KismetMathLibrary_eventMinOfIntArray_Parms), 0x0000000000000180);
			UProperty* NewProp_IndexOfMinValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IndexOfMinValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(IndexOfMinValue, KismetMathLibrary_eventMinOfIntArray_Parms), 0x0000000000000180);
			UProperty* NewProp_IntArray = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IntArray"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(IntArray, KismetMathLibrary_eventMinOfIntArray_Parms), 0x0000000008000182);
			UProperty* NewProp_IntArray_Inner = new(EC_InternalUseOnlyConstructor, NewProp_IntArray, TEXT("IntArray"), RF_Public|RF_Transient|RF_Native) UIntProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Integer"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns min of all array entries and the index at which it was found. Returns value of 0 and index of -1 if the supplied array is empty."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_MirrorVectorByNormal()
	{
		struct KismetMathLibrary_eventMirrorVectorByNormal_Parms
		{
			FVector InVect;
			FVector InNormal;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MirrorVectorByNormal"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventMirrorVectorByNormal_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventMirrorVectorByNormal_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_InNormal = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InNormal"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InNormal, KismetMathLibrary_eventMirrorVectorByNormal_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_InVect = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InVect"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InVect, KismetMathLibrary_eventMirrorVectorByNormal_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Vector"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Mirrors a vector by a normal"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Multiply_ByteByte()
	{
		struct KismetMathLibrary_eventMultiply_ByteByte_Parms
		{
			uint8 A;
			uint8 B;
			uint8 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Multiply_ByteByte"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventMultiply_ByteByte_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventMultiply_ByteByte_Parms), 0x0000000000000580);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventMultiply_ByteByte_Parms), 0x0000000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventMultiply_ByteByte_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Byte"));
			MetaData->SetValue(ReturnFunction, TEXT("CommutativeAssociativeBinaryOperator"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("*"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Byte * Byte"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("* multiply"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Multiplication (A * B)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Multiply_FloatFloat()
	{
		struct KismetMathLibrary_eventMultiply_FloatFloat_Parms
		{
			float A;
			float B;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Multiply_FloatFloat"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventMultiply_FloatFloat_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventMultiply_FloatFloat_Parms), 0x0000000000000580);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventMultiply_FloatFloat_Parms), 0x0000000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventMultiply_FloatFloat_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Float"));
			MetaData->SetValue(ReturnFunction, TEXT("CommutativeAssociativeBinaryOperator"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("*"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("float * float"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("* multiply"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Multiplication (A * B)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Multiply_IntFloat()
	{
		struct KismetMathLibrary_eventMultiply_IntFloat_Parms
		{
			int32 A;
			float B;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Multiply_IntFloat"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventMultiply_IntFloat_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventMultiply_IntFloat_Parms), 0x0000000000000580);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventMultiply_IntFloat_Parms), 0x0000000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventMultiply_IntFloat_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Float"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("*"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("int * float"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("* multiply"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Multiplication (A * B)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Multiply_IntInt()
	{
		struct KismetMathLibrary_eventMultiply_IntInt_Parms
		{
			int32 A;
			int32 B;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Multiply_IntInt"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventMultiply_IntInt_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventMultiply_IntInt_Parms), 0x0000000000000580);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventMultiply_IntInt_Parms), 0x0000000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventMultiply_IntInt_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Integer"));
			MetaData->SetValue(ReturnFunction, TEXT("CommutativeAssociativeBinaryOperator"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("*"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("integer * integer"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("* multiply"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Multiplication (A * B)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Multiply_LinearColorFloat()
	{
		struct KismetMathLibrary_eventMultiply_LinearColorFloat_Parms
		{
			FLinearColor A;
			float B;
			FLinearColor ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Multiply_LinearColorFloat"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventMultiply_LinearColorFloat_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventMultiply_LinearColorFloat_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventMultiply_LinearColorFloat_Parms), 0x0000000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventMultiply_LinearColorFloat_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FLinearColor());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Color"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("*"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("LinearColor * Float"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("* multiply"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Element-wise multiplication of a linear color by a float (F*R, F*G, F*B, F*A)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Multiply_LinearColorLinearColor()
	{
		struct KismetMathLibrary_eventMultiply_LinearColorLinearColor_Parms
		{
			FLinearColor A;
			FLinearColor B;
			FLinearColor ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Multiply_LinearColorLinearColor"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventMultiply_LinearColorLinearColor_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventMultiply_LinearColorLinearColor_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventMultiply_LinearColorLinearColor_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventMultiply_LinearColorLinearColor_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FLinearColor());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Color"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("*"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("LinearColor * (LinearColor)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Element-wise multiplication of two linear colors (R*R, G*G, B*B, A*A)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Multiply_RotatorFloat()
	{
		struct KismetMathLibrary_eventMultiply_RotatorFloat_Parms
		{
			FRotator A;
			float B;
			FRotator ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Multiply_RotatorFloat"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventMultiply_RotatorFloat_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventMultiply_RotatorFloat_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventMultiply_RotatorFloat_Parms), 0x0000000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventMultiply_RotatorFloat_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Rotator"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("*"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("ScaleRotator"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("* multiply rotate rotation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns rotator representing rotator A scaled by B"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Multiply_RotatorInt()
	{
		struct KismetMathLibrary_eventMultiply_RotatorInt_Parms
		{
			FRotator A;
			int32 B;
			FRotator ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Multiply_RotatorInt"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventMultiply_RotatorInt_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventMultiply_RotatorInt_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventMultiply_RotatorInt_Parms), 0x0000000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventMultiply_RotatorInt_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Rotator"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("*"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("ScaleRotator (int)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("* multiply rotate rotation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns rotator representing rotator A scaled by B"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Multiply_TimespanFloat()
	{
		struct KismetMathLibrary_eventMultiply_TimespanFloat_Parms
		{
			FTimespan A;
			float Scalar;
			FTimespan ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Multiply_TimespanFloat"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventMultiply_TimespanFloat_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventMultiply_TimespanFloat_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FTimespan());
			UProperty* NewProp_Scalar = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Scalar"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Scalar, KismetMathLibrary_eventMultiply_TimespanFloat_Parms), 0x0000000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventMultiply_TimespanFloat_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FTimespan());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Timespan"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("*"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Timespan * float"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("* multiply"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Scalar multiplication (A * s)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Multiply_Vector2DFloat()
	{
		struct KismetMathLibrary_eventMultiply_Vector2DFloat_Parms
		{
			FVector2D A;
			float B;
			FVector2D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Multiply_Vector2DFloat"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventMultiply_Vector2DFloat_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventMultiply_Vector2DFloat_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventMultiply_Vector2DFloat_Parms), 0x0000000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventMultiply_Vector2DFloat_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Vector2D"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("*"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("vector2d * float"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("* multiply"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns Vector A scaled by B"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Multiply_VectorFloat()
	{
		struct KismetMathLibrary_eventMultiply_VectorFloat_Parms
		{
			FVector A;
			float B;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Multiply_VectorFloat"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventMultiply_VectorFloat_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventMultiply_VectorFloat_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventMultiply_VectorFloat_Parms), 0x0000000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventMultiply_VectorFloat_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Vector"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("*"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("vector * float"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("* multiply"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Scales Vector A by B"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Multiply_VectorInt()
	{
		struct KismetMathLibrary_eventMultiply_VectorInt_Parms
		{
			FVector A;
			int32 B;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Multiply_VectorInt"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventMultiply_VectorInt_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventMultiply_VectorInt_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventMultiply_VectorInt_Parms), 0x0000000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventMultiply_VectorInt_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Vector"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("*"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("vector * int"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("* multiply"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Scales Vector A by B"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Multiply_VectorVector()
	{
		struct KismetMathLibrary_eventMultiply_VectorVector_Parms
		{
			FVector A;
			FVector B;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Multiply_VectorVector"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventMultiply_VectorVector_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventMultiply_VectorVector_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventMultiply_VectorVector_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventMultiply_VectorVector_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Vector"));
			MetaData->SetValue(ReturnFunction, TEXT("CommutativeAssociativeBinaryOperator"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("*"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("vector * vector"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("* multiply"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Element-wise Vector multiplication (Result = {A.x*B.x, A.y*B.y, A.z*B.z})"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_MultiplyByPi()
	{
		struct KismetMathLibrary_eventMultiplyByPi_Parms
		{
			float Value;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MultiplyByPi"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventMultiplyByPi_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventMultiplyByPi_Parms), 0x0000000000000580);
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Value, KismetMathLibrary_eventMultiplyByPi_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Float"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("* multiply"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Multiplies the input value by pi."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_MultiplyMultiply_FloatFloat()
	{
		struct KismetMathLibrary_eventMultiplyMultiply_FloatFloat_Parms
		{
			float Base;
			float Exp;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MultiplyMultiply_FloatFloat"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventMultiplyMultiply_FloatFloat_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventMultiplyMultiply_FloatFloat_Parms), 0x0000000000000580);
			UProperty* NewProp_Exp = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Exp"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Exp, KismetMathLibrary_eventMultiplyMultiply_FloatFloat_Parms), 0x0000000000000080);
			UProperty* NewProp_Base = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Base"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Base, KismetMathLibrary_eventMultiplyMultiply_FloatFloat_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Float"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Power"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Power (Base to the Exp-th power)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_NearlyEqual_FloatFloat()
	{
		struct KismetMathLibrary_eventNearlyEqual_FloatFloat_Parms
		{
			float A;
			float B;
			float ErrorTolerance;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NearlyEqual_FloatFloat"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventNearlyEqual_FloatFloat_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetMathLibrary_eventNearlyEqual_FloatFloat_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetMathLibrary_eventNearlyEqual_FloatFloat_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetMathLibrary_eventNearlyEqual_FloatFloat_Parms), sizeof(bool), true);
			UProperty* NewProp_ErrorTolerance = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ErrorTolerance"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ErrorTolerance, KismetMathLibrary_eventNearlyEqual_FloatFloat_Parms), 0x0000000000000080);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventNearlyEqual_FloatFloat_Parms), 0x0000000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventNearlyEqual_FloatFloat_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Float"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_ErrorTolerance"), TEXT("0.000001"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Nearly Equal (float)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("== equal"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if A is nearly equal to B (|A - B| < ErrorTolerance)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_NearlyEqual_TransformTransform()
	{
		struct KismetMathLibrary_eventNearlyEqual_TransformTransform_Parms
		{
			FTransform A;
			FTransform B;
			float LocationTolerance;
			float RotationTolerance;
			float Scale3DTolerance;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NearlyEqual_TransformTransform"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(KismetMathLibrary_eventNearlyEqual_TransformTransform_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetMathLibrary_eventNearlyEqual_TransformTransform_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetMathLibrary_eventNearlyEqual_TransformTransform_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetMathLibrary_eventNearlyEqual_TransformTransform_Parms), sizeof(bool), true);
			UProperty* NewProp_Scale3DTolerance = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Scale3DTolerance"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Scale3DTolerance, KismetMathLibrary_eventNearlyEqual_TransformTransform_Parms), 0x0000000000000080);
			UProperty* NewProp_RotationTolerance = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("RotationTolerance"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(RotationTolerance, KismetMathLibrary_eventNearlyEqual_TransformTransform_Parms), 0x0000000000000080);
			UProperty* NewProp_LocationTolerance = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LocationTolerance"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(LocationTolerance, KismetMathLibrary_eventNearlyEqual_TransformTransform_Parms), 0x0000000000000080);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventNearlyEqual_TransformTransform_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FTransform());
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventNearlyEqual_TransformTransform_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FTransform());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Transform"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_LocationTolerance"), TEXT("0.000100"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_RotationTolerance"), TEXT("0.000100"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Scale3DTolerance"), TEXT("0.000100"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Nearly Equal (transform)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("== equal"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if transform A is nearly equal to B\n@param LocationTolerance        How close position of transforms need to be to be considered equal\n@param RotationTolerance        How close rotations of transforms need to be to be considered equal\n@param Scale3DTolerance         How close scale of transforms need to be to be considered equal"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_NegateRotator()
	{
		struct KismetMathLibrary_eventNegateRotator_Parms
		{
			FRotator A;
			FRotator ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NegateRotator"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventNegateRotator_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventNegateRotator_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventNegateRotator_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Rotator"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("InvertRotator"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("rotate rotation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Negate a rotator"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_NegateVector()
	{
		struct KismetMathLibrary_eventNegateVector_Parms
		{
			FVector A;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NegateVector"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventNegateVector_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventNegateVector_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventNegateVector_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Vector"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Negate a vector."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Normal()
	{
		struct KismetMathLibrary_eventNormal_Parms
		{
			FVector A;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Normal"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventNormal_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventNormal_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventNormal_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Vector"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Normalize"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns a unit normal version of the FVector A"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Normal2D()
	{
		struct KismetMathLibrary_eventNormal2D_Parms
		{
			FVector2D A;
			FVector2D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Normal2D"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventNormal2D_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventNormal2D_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventNormal2D_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Vector2D"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Normalize2D"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns a unit normal version of the vector2d A"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_NormalizeAxis()
	{
		struct KismetMathLibrary_eventNormalizeAxis_Parms
		{
			float Angle;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NormalizeAxis"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventNormalizeAxis_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventNormalizeAxis_Parms), 0x0000000000000580);
			UProperty* NewProp_Angle = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Angle"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Angle, KismetMathLibrary_eventNormalizeAxis_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Rotator"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Clamps an angle to the range of [-180, 180].\n\n@param Angle The Angle to clamp.\n@return The clamped angle."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_NormalizedDeltaRotator()
	{
		struct KismetMathLibrary_eventNormalizedDeltaRotator_Parms
		{
			FRotator A;
			FRotator B;
			FRotator ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NormalizedDeltaRotator"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventNormalizedDeltaRotator_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventNormalizedDeltaRotator_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventNormalizedDeltaRotator_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventNormalizedDeltaRotator_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Rotator"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Delta (Rotator)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Normalized A-B"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_NormalizeToRange()
	{
		struct KismetMathLibrary_eventNormalizeToRange_Parms
		{
			float Value;
			float RangeMin;
			float RangeMax;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NormalizeToRange"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventNormalizeToRange_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventNormalizeToRange_Parms), 0x0000000000000580);
			UProperty* NewProp_RangeMax = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("RangeMax"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(RangeMax, KismetMathLibrary_eventNormalizeToRange_Parms), 0x0000000000000080);
			UProperty* NewProp_RangeMin = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("RangeMin"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(RangeMin, KismetMathLibrary_eventNormalizeToRange_Parms), 0x0000000000000080);
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Value, KismetMathLibrary_eventNormalizeToRange_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Float"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns Value normalized to the given range.  (e.g. 20 normalized to the range 10->50 would result in 0.25)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Not_PreBool()
	{
		struct KismetMathLibrary_eventNot_PreBool_Parms
		{
			bool A;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Not_PreBool"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventNot_PreBool_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetMathLibrary_eventNot_PreBool_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetMathLibrary_eventNot_PreBool_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetMathLibrary_eventNot_PreBool_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(A, KismetMathLibrary_eventNot_PreBool_Parms, bool);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(A, KismetMathLibrary_eventNot_PreBool_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(A, KismetMathLibrary_eventNot_PreBool_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Boolean"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("NOT"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("NOT Boolean"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("! not"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the logical complement of the Boolean value (NOT A)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_NotEqual_BoolBool()
	{
		struct KismetMathLibrary_eventNotEqual_BoolBool_Parms
		{
			bool A;
			bool B;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NotEqual_BoolBool"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventNotEqual_BoolBool_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetMathLibrary_eventNotEqual_BoolBool_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetMathLibrary_eventNotEqual_BoolBool_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetMathLibrary_eventNotEqual_BoolBool_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(B, KismetMathLibrary_eventNotEqual_BoolBool_Parms, bool);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(B, KismetMathLibrary_eventNotEqual_BoolBool_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(B, KismetMathLibrary_eventNotEqual_BoolBool_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(A, KismetMathLibrary_eventNotEqual_BoolBool_Parms, bool);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(A, KismetMathLibrary_eventNotEqual_BoolBool_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(A, KismetMathLibrary_eventNotEqual_BoolBool_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Boolean"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("!="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("NotEqual Boolean"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("!= not equal"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if the values are not equal (A != B)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_NotEqual_ByteByte()
	{
		struct KismetMathLibrary_eventNotEqual_ByteByte_Parms
		{
			uint8 A;
			uint8 B;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NotEqual_ByteByte"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventNotEqual_ByteByte_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetMathLibrary_eventNotEqual_ByteByte_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetMathLibrary_eventNotEqual_ByteByte_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetMathLibrary_eventNotEqual_ByteByte_Parms), sizeof(bool), true);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventNotEqual_ByteByte_Parms), 0x0000000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventNotEqual_ByteByte_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Byte"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("!="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("NotEqual (Byte)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("!= not equal"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if A is not equal to B (A != B)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_NotEqual_ClassClass()
	{
		struct KismetMathLibrary_eventNotEqual_ClassClass_Parms
		{
			UClass* A;
			UClass* B;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NotEqual_ClassClass"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventNotEqual_ClassClass_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetMathLibrary_eventNotEqual_ClassClass_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetMathLibrary_eventNotEqual_ClassClass_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetMathLibrary_eventNotEqual_ClassClass_Parms), sizeof(bool), true);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventNotEqual_ClassClass_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventNotEqual_ClassClass_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("!="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("NotEqual (Class)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("!= not equal"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if A and B are not equal (A != B)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_NotEqual_DateTimeDateTime()
	{
		struct KismetMathLibrary_eventNotEqual_DateTimeDateTime_Parms
		{
			FDateTime A;
			FDateTime B;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NotEqual_DateTimeDateTime"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventNotEqual_DateTimeDateTime_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetMathLibrary_eventNotEqual_DateTimeDateTime_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetMathLibrary_eventNotEqual_DateTimeDateTime_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetMathLibrary_eventNotEqual_DateTimeDateTime_Parms), sizeof(bool), true);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventNotEqual_DateTimeDateTime_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FDateTime());
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventNotEqual_DateTimeDateTime_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FDateTime());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|DateTime"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("!="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("NotEqual (DateTime)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("!= not equal"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if the values are not equal (A != B)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_NotEqual_FloatFloat()
	{
		struct KismetMathLibrary_eventNotEqual_FloatFloat_Parms
		{
			float A;
			float B;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NotEqual_FloatFloat"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventNotEqual_FloatFloat_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetMathLibrary_eventNotEqual_FloatFloat_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetMathLibrary_eventNotEqual_FloatFloat_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetMathLibrary_eventNotEqual_FloatFloat_Parms), sizeof(bool), true);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventNotEqual_FloatFloat_Parms), 0x0000000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventNotEqual_FloatFloat_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Float"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("!="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("NotEqual (float)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("!= not equal"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if A does not equal B (A != B)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_NotEqual_IntInt()
	{
		struct KismetMathLibrary_eventNotEqual_IntInt_Parms
		{
			int32 A;
			int32 B;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NotEqual_IntInt"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventNotEqual_IntInt_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetMathLibrary_eventNotEqual_IntInt_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetMathLibrary_eventNotEqual_IntInt_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetMathLibrary_eventNotEqual_IntInt_Parms), sizeof(bool), true);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventNotEqual_IntInt_Parms), 0x0000000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventNotEqual_IntInt_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Integer"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("!="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("NotEqual (integer)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("!= not equal"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if A is not equal to B (A != B)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_NotEqual_NameName()
	{
		struct KismetMathLibrary_eventNotEqual_NameName_Parms
		{
			FName A;
			FName B;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NotEqual_NameName"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventNotEqual_NameName_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetMathLibrary_eventNotEqual_NameName_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetMathLibrary_eventNotEqual_NameName_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetMathLibrary_eventNotEqual_NameName_Parms), sizeof(bool), true);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventNotEqual_NameName_Parms), 0x0000000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventNotEqual_NameName_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Name"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("!="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("NotEqual (Name)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("!= not equal"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if A and B are not equal (A != B)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_NotEqual_ObjectObject()
	{
		struct KismetMathLibrary_eventNotEqual_ObjectObject_Parms
		{
			UObject* A;
			UObject* B;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NotEqual_ObjectObject"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventNotEqual_ObjectObject_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetMathLibrary_eventNotEqual_ObjectObject_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetMathLibrary_eventNotEqual_ObjectObject_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetMathLibrary_eventNotEqual_ObjectObject_Parms), sizeof(bool), true);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventNotEqual_ObjectObject_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventNotEqual_ObjectObject_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("!="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("NotEqual (Object)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("!= not equal"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if A and B are not equal (A != B)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_NotEqual_RotatorRotator()
	{
		struct KismetMathLibrary_eventNotEqual_RotatorRotator_Parms
		{
			FRotator A;
			FRotator B;
			float ErrorTolerance;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NotEqual_RotatorRotator"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventNotEqual_RotatorRotator_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetMathLibrary_eventNotEqual_RotatorRotator_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetMathLibrary_eventNotEqual_RotatorRotator_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetMathLibrary_eventNotEqual_RotatorRotator_Parms), sizeof(bool), true);
			UProperty* NewProp_ErrorTolerance = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ErrorTolerance"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ErrorTolerance, KismetMathLibrary_eventNotEqual_RotatorRotator_Parms), 0x0000000000000080);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventNotEqual_RotatorRotator_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventNotEqual_RotatorRotator_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Rotator"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("!="));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_ErrorTolerance"), TEXT("0.000100"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Not Equal (Rotator)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("!= not equal"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if rotator A is not equal to rotator B (A != B) within a specified error tolerance"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_NotEqual_TimespanTimespan()
	{
		struct KismetMathLibrary_eventNotEqual_TimespanTimespan_Parms
		{
			FTimespan A;
			FTimespan B;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NotEqual_TimespanTimespan"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventNotEqual_TimespanTimespan_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetMathLibrary_eventNotEqual_TimespanTimespan_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetMathLibrary_eventNotEqual_TimespanTimespan_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetMathLibrary_eventNotEqual_TimespanTimespan_Parms), sizeof(bool), true);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventNotEqual_TimespanTimespan_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FTimespan());
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventNotEqual_TimespanTimespan_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FTimespan());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Timespan"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("!="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("NotEqual (Timespan)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("!= not equal"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if the values are not equal (A != B)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_NotEqual_VectorVector()
	{
		struct KismetMathLibrary_eventNotEqual_VectorVector_Parms
		{
			FVector A;
			FVector B;
			float ErrorTolerance;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NotEqual_VectorVector"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventNotEqual_VectorVector_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetMathLibrary_eventNotEqual_VectorVector_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetMathLibrary_eventNotEqual_VectorVector_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetMathLibrary_eventNotEqual_VectorVector_Parms), sizeof(bool), true);
			UProperty* NewProp_ErrorTolerance = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ErrorTolerance"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ErrorTolerance, KismetMathLibrary_eventNotEqual_VectorVector_Parms), 0x0000000000000080);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventNotEqual_VectorVector_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventNotEqual_VectorVector_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Vector"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("!="));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_ErrorTolerance"), TEXT("0.000100"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Not Equal (vector)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("!= not equal"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if vector A is not equal to vector B (A != B) within a specified error tolerance"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Now()
	{
		struct KismetMathLibrary_eventNow_Parms
		{
			FDateTime ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Now"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventNow_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventNow_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FDateTime());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|DateTime"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Now"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the local date and time on this computer"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Or_IntInt()
	{
		struct KismetMathLibrary_eventOr_IntInt_Parms
		{
			int32 A;
			int32 B;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Or_IntInt"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventOr_IntInt_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventOr_IntInt_Parms), 0x0000000000000580);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventOr_IntInt_Parms), 0x0000000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventOr_IntInt_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Integer"));
			MetaData->SetValue(ReturnFunction, TEXT("CommutativeAssociativeBinaryOperator"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("|"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Bitwise OR"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("| or"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Bitwise OR (A | B)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Percent_ByteByte()
	{
		struct KismetMathLibrary_eventPercent_ByteByte_Parms
		{
			uint8 A;
			uint8 B;
			uint8 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Percent_ByteByte"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventPercent_ByteByte_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventPercent_ByteByte_Parms), 0x0000000000000580);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventPercent_ByteByte_Parms), 0x0000000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventPercent_ByteByte_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Byte"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("%"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_B"), TEXT("1"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("% (Byte)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("% modulus"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Modulo (A % B)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Percent_FloatFloat()
	{
		struct KismetMathLibrary_eventPercent_FloatFloat_Parms
		{
			float A;
			float B;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Percent_FloatFloat"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventPercent_FloatFloat_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventPercent_FloatFloat_Parms), 0x0000000000000580);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventPercent_FloatFloat_Parms), 0x0000000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventPercent_FloatFloat_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Float"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("%"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_B"), TEXT("1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("% (float)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("% modulus"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Modulo (A % B)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Percent_IntInt()
	{
		struct KismetMathLibrary_eventPercent_IntInt_Parms
		{
			int32 A;
			int32 B;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Percent_IntInt"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventPercent_IntInt_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventPercent_IntInt_Parms), 0x0000000000000580);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventPercent_IntInt_Parms), 0x0000000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventPercent_IntInt_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Integer"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("%"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_B"), TEXT("1"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("% (integer)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("% modulus"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Modulo (A % B)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_PointsAreCoplanar()
	{
		struct KismetMathLibrary_eventPointsAreCoplanar_Parms
		{
			TArray<FVector> Points;
			float Tolerance;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PointsAreCoplanar"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(KismetMathLibrary_eventPointsAreCoplanar_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetMathLibrary_eventPointsAreCoplanar_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetMathLibrary_eventPointsAreCoplanar_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetMathLibrary_eventPointsAreCoplanar_Parms), sizeof(bool), true);
			UProperty* NewProp_Tolerance = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Tolerance"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Tolerance, KismetMathLibrary_eventPointsAreCoplanar_Parms), 0x0000000000000080);
			UProperty* NewProp_Points = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Points"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Points, KismetMathLibrary_eventPointsAreCoplanar_Parms), 0x0000000008000182);
			UProperty* NewProp_Points_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Points, TEXT("Points"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Geometry"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Tolerance"), TEXT("0.100000"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Determines whether a given set of points are coplanar, with a tolerance. Any three points or less are always coplanar.\n\n@param Points - The set of points to determine coplanarity for.\n@param Tolerance - Larger numbers means more variance is allowed.\n\n@return Whether the points are relatively coplanar, based on the tolerance"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_ProjectPointOnToPlane()
	{
		struct KismetMathLibrary_eventProjectPointOnToPlane_Parms
		{
			FVector Point;
			FVector PlaneBase;
			FVector PlaneNormal;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ProjectPointOnToPlane"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventProjectPointOnToPlane_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventProjectPointOnToPlane_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_PlaneNormal = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PlaneNormal"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PlaneNormal, KismetMathLibrary_eventProjectPointOnToPlane_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_PlaneBase = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PlaneBase"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PlaneBase, KismetMathLibrary_eventProjectPointOnToPlane_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Point = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Point"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Point, KismetMathLibrary_eventProjectPointOnToPlane_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Vector"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("ProjectOnTo"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Projects a point onto a plane defined by a point on the plane and a plane normal.\n\n@param  Point Point to project onto the plane.\n@param  PlaneBase A point on the plane.\n@param  PlaneNormal Normal of the plane.\n@return Point projected onto the plane."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_ProjectVectorOnToPlane()
	{
		struct KismetMathLibrary_eventProjectVectorOnToPlane_Parms
		{
			FVector V;
			FVector PlaneNormal;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ProjectVectorOnToPlane"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventProjectVectorOnToPlane_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventProjectVectorOnToPlane_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_PlaneNormal = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PlaneNormal"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PlaneNormal, KismetMathLibrary_eventProjectVectorOnToPlane_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_V = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("V"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(V, KismetMathLibrary_eventProjectVectorOnToPlane_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Vector"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("ProjectOnTo"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Projects a vector onto a plane defined by a normalized vector (PlaneNormal).\n\n@param  V Vector to project onto the plane.\n@param  PlaneNormal Normal of the plane.\n@return Vector projected onto the plane."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_ProjectVectorOnToVector()
	{
		struct KismetMathLibrary_eventProjectVectorOnToVector_Parms
		{
			FVector V;
			FVector Target;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ProjectVectorOnToVector"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventProjectVectorOnToVector_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventProjectVectorOnToVector_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Target = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Target"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Target, KismetMathLibrary_eventProjectVectorOnToVector_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_V = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("V"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(V, KismetMathLibrary_eventProjectVectorOnToVector_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Vector"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("ProjectOnTo"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Projects one vector (V) onto another (Target) and returns the projected vector.\nIf Target is nearly zero in length, returns the zero vector.\n\n@param  V Vector to project.\n@param  Target Vector on which we are projecting.\n@return V projected on to Target."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_RadiansToDegrees()
	{
		struct KismetMathLibrary_eventRadiansToDegrees_Parms
		{
			float A;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RadiansToDegrees"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventRadiansToDegrees_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventRadiansToDegrees_Parms), 0x0000000000000580);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventRadiansToDegrees_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Trig"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("R2D"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Radians To Degrees"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns degrees value based on the input radians"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomBool()
	{
		struct KismetMathLibrary_eventRandomBool_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RandomBool"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventRandomBool_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetMathLibrary_eventRandomBool_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetMathLibrary_eventRandomBool_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetMathLibrary_eventRandomBool_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Random"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns a uniformly distributed random bool"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomBoolFromStream()
	{
		struct KismetMathLibrary_eventRandomBoolFromStream_Parms
		{
			FRandomStream Stream;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RandomBoolFromStream"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(KismetMathLibrary_eventRandomBoolFromStream_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetMathLibrary_eventRandomBoolFromStream_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetMathLibrary_eventRandomBoolFromStream_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetMathLibrary_eventRandomBoolFromStream_Parms), sizeof(bool), true);
			UProperty* NewProp_Stream = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Stream"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Stream, KismetMathLibrary_eventRandomBoolFromStream_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FRandomStream());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Random"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns a random bool"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomFloat()
	{
		struct KismetMathLibrary_eventRandomFloat_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RandomFloat"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventRandomFloat_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventRandomFloat_Parms), 0x0000000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Random"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns a random float between 0 and 1"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomFloatFromStream()
	{
		struct KismetMathLibrary_eventRandomFloatFromStream_Parms
		{
			FRandomStream Stream;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RandomFloatFromStream"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(KismetMathLibrary_eventRandomFloatFromStream_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventRandomFloatFromStream_Parms), 0x0000000000000580);
			UProperty* NewProp_Stream = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Stream"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Stream, KismetMathLibrary_eventRandomFloatFromStream_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FRandomStream());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Random"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns a random float between 0 and 1"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomFloatInRange()
	{
		struct KismetMathLibrary_eventRandomFloatInRange_Parms
		{
			float Min;
			float Max;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RandomFloatInRange"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventRandomFloatInRange_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventRandomFloatInRange_Parms), 0x0000000000000580);
			UProperty* NewProp_Max = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Max"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Max, KismetMathLibrary_eventRandomFloatInRange_Parms), 0x0000000000000080);
			UProperty* NewProp_Min = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Min"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Min, KismetMathLibrary_eventRandomFloatInRange_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Random"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Generate a random number between Min and Max"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomFloatInRangeFromStream()
	{
		struct KismetMathLibrary_eventRandomFloatInRangeFromStream_Parms
		{
			float Min;
			float Max;
			FRandomStream Stream;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RandomFloatInRangeFromStream"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(KismetMathLibrary_eventRandomFloatInRangeFromStream_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventRandomFloatInRangeFromStream_Parms), 0x0000000000000580);
			UProperty* NewProp_Stream = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Stream"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Stream, KismetMathLibrary_eventRandomFloatInRangeFromStream_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FRandomStream());
			UProperty* NewProp_Max = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Max"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Max, KismetMathLibrary_eventRandomFloatInRangeFromStream_Parms), 0x0000000000000080);
			UProperty* NewProp_Min = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Min"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Min, KismetMathLibrary_eventRandomFloatInRangeFromStream_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Random"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Generate a random number between Min and Max"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomInteger()
	{
		struct KismetMathLibrary_eventRandomInteger_Parms
		{
			int32 Max;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RandomInteger"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventRandomInteger_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventRandomInteger_Parms), 0x0000000000000580);
			UProperty* NewProp_Max = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Max"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Max, KismetMathLibrary_eventRandomInteger_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Random"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns a uniformly distributed random number between 0 and Max - 1"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomIntegerFromStream()
	{
		struct KismetMathLibrary_eventRandomIntegerFromStream_Parms
		{
			int32 Max;
			FRandomStream Stream;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RandomIntegerFromStream"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(KismetMathLibrary_eventRandomIntegerFromStream_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventRandomIntegerFromStream_Parms), 0x0000000000000580);
			UProperty* NewProp_Stream = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Stream"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Stream, KismetMathLibrary_eventRandomIntegerFromStream_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FRandomStream());
			UProperty* NewProp_Max = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Max"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Max, KismetMathLibrary_eventRandomIntegerFromStream_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Random"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns a uniformly distributed random number between 0 and Max - 1"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomIntegerInRange()
	{
		struct KismetMathLibrary_eventRandomIntegerInRange_Parms
		{
			int32 Min;
			int32 Max;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RandomIntegerInRange"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventRandomIntegerInRange_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventRandomIntegerInRange_Parms), 0x0000000000000580);
			UProperty* NewProp_Max = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Max"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Max, KismetMathLibrary_eventRandomIntegerInRange_Parms), 0x0000000000000080);
			UProperty* NewProp_Min = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Min"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Min, KismetMathLibrary_eventRandomIntegerInRange_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Random"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Return a random integer between Min and Max (>= Min and <= Max)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomIntegerInRangeFromStream()
	{
		struct KismetMathLibrary_eventRandomIntegerInRangeFromStream_Parms
		{
			int32 Min;
			int32 Max;
			FRandomStream Stream;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RandomIntegerInRangeFromStream"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(KismetMathLibrary_eventRandomIntegerInRangeFromStream_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventRandomIntegerInRangeFromStream_Parms), 0x0000000000000580);
			UProperty* NewProp_Stream = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Stream"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Stream, KismetMathLibrary_eventRandomIntegerInRangeFromStream_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FRandomStream());
			UProperty* NewProp_Max = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Max"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Max, KismetMathLibrary_eventRandomIntegerInRangeFromStream_Parms), 0x0000000000000080);
			UProperty* NewProp_Min = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Min"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Min, KismetMathLibrary_eventRandomIntegerInRangeFromStream_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Random"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Return a random integer between Min and Max (>= Min and <= Max)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomPointInBoundingBox()
	{
		struct KismetMathLibrary_eventRandomPointInBoundingBox_Parms
		{
			FVector Origin;
			FVector BoxExtent;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RandomPointInBoundingBox"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(KismetMathLibrary_eventRandomPointInBoundingBox_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventRandomPointInBoundingBox_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_BoxExtent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("BoxExtent"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(BoxExtent, KismetMathLibrary_eventRandomPointInBoundingBox_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Origin = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Origin"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Origin, KismetMathLibrary_eventRandomPointInBoundingBox_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Random"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns a random point within the specified bounding box"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomRotator()
	{
		struct KismetMathLibrary_eventRandomRotator_Parms
		{
			bool bRoll;
			FRotator ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RandomRotator"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventRandomRotator_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventRandomRotator_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FRotator());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bRoll, KismetMathLibrary_eventRandomRotator_Parms, bool);
			UProperty* NewProp_bRoll = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bRoll"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bRoll, KismetMathLibrary_eventRandomRotator_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bRoll, KismetMathLibrary_eventRandomRotator_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Random"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bRoll"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("rotate rotation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Generates a random rotation, with optional random roll."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomRotatorFromStream()
	{
		struct KismetMathLibrary_eventRandomRotatorFromStream_Parms
		{
			bool bRoll;
			FRandomStream Stream;
			FRotator ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RandomRotatorFromStream"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(KismetMathLibrary_eventRandomRotatorFromStream_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventRandomRotatorFromStream_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_Stream = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Stream"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Stream, KismetMathLibrary_eventRandomRotatorFromStream_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FRandomStream());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bRoll, KismetMathLibrary_eventRandomRotatorFromStream_Parms, bool);
			UProperty* NewProp_bRoll = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bRoll"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bRoll, KismetMathLibrary_eventRandomRotatorFromStream_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bRoll, KismetMathLibrary_eventRandomRotatorFromStream_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Random"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Create a random rotation"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomUnitVector()
	{
		struct KismetMathLibrary_eventRandomUnitVector_Parms
		{
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RandomUnitVector"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventRandomUnitVector_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventRandomUnitVector_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Random"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns a random vector with length of 1"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomUnitVectorFromStream()
	{
		struct KismetMathLibrary_eventRandomUnitVectorFromStream_Parms
		{
			FRandomStream Stream;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RandomUnitVectorFromStream"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(KismetMathLibrary_eventRandomUnitVectorFromStream_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventRandomUnitVectorFromStream_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Stream = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Stream"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Stream, KismetMathLibrary_eventRandomUnitVectorFromStream_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FRandomStream());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Random"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns a random vector with length of 1.0"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomUnitVectorInCone()
	{
		struct KismetMathLibrary_eventRandomUnitVectorInCone_Parms
		{
			FVector ConeDir;
			float ConeHalfAngle;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RandomUnitVectorInCone"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventRandomUnitVectorInCone_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventRandomUnitVectorInCone_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_ConeHalfAngle = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ConeHalfAngle"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ConeHalfAngle, KismetMathLibrary_eventRandomUnitVectorInCone_Parms), 0x0000000000000080);
			UProperty* NewProp_ConeDir = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ConeDir"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ConeDir, KismetMathLibrary_eventRandomUnitVectorInCone_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Random"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns a random vector with length of 1, within the specified cone, with uniform random distribution.\n@param ConeDir       The base \"center\" direction of the cone.\n@param ConeHalfAngle         The half-angle of the cone (from ConeDir to edge), in radians."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomUnitVectorInConeWithYawAndPitch()
	{
		struct KismetMathLibrary_eventRandomUnitVectorInConeWithYawAndPitch_Parms
		{
			FVector ConeDir;
			float MaxYawInDegrees;
			float MaxPitchInDegrees;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RandomUnitVectorInConeWithYawAndPitch"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventRandomUnitVectorInConeWithYawAndPitch_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventRandomUnitVectorInConeWithYawAndPitch_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_MaxPitchInDegrees = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MaxPitchInDegrees"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MaxPitchInDegrees, KismetMathLibrary_eventRandomUnitVectorInConeWithYawAndPitch_Parms), 0x0000000000000080);
			UProperty* NewProp_MaxYawInDegrees = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MaxYawInDegrees"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MaxYawInDegrees, KismetMathLibrary_eventRandomUnitVectorInConeWithYawAndPitch_Parms), 0x0000000000000080);
			UProperty* NewProp_ConeDir = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ConeDir"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ConeDir, KismetMathLibrary_eventRandomUnitVectorInConeWithYawAndPitch_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Random"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("RandomVector"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("RandomUnitVectorWithYawAndPitch\n\n@param MaxYaw - The Yaw-angle of the cone (from ConeDir to horizontal-edge), in degrees.\n@param MaxPitch - The Pitch-angle of the cone (from ConeDir to vertical-edge), in degrees."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_REase()
	{
		struct KismetMathLibrary_eventREase_Parms
		{
			FRotator A;
			FRotator B;
			float Alpha;
			bool bShortestPath;
			TEnumAsByte<EEasingFunc::Type> EasingFunc;
			float BlendExp;
			int32 Steps;
			FRotator ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("REase"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventREase_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventREase_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_Steps = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Steps"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Steps, KismetMathLibrary_eventREase_Parms), 0x0000000000000080);
			UProperty* NewProp_BlendExp = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("BlendExp"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(BlendExp, KismetMathLibrary_eventREase_Parms), 0x0000000000000080);
			UProperty* NewProp_EasingFunc = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("EasingFunc"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(EasingFunc, KismetMathLibrary_eventREase_Parms), 0x0000000000000080, Z_Construct_UEnum_Engine_EEasingFunc());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bShortestPath, KismetMathLibrary_eventREase_Parms, bool);
			UProperty* NewProp_bShortestPath = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bShortestPath"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bShortestPath, KismetMathLibrary_eventREase_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bShortestPath, KismetMathLibrary_eventREase_Parms), sizeof(bool), true);
			UProperty* NewProp_Alpha = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Alpha"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Alpha, KismetMathLibrary_eventREase_Parms), 0x0000000000000080);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventREase_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventREase_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Interpolation"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_BlendExp"), TEXT("2.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Steps"), TEXT("2"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Ease (Rotator)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Easeing  between A and B using a specified easing function"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_ResetRandomStream()
	{
		struct KismetMathLibrary_eventResetRandomStream_Parms
		{
			FRandomStream Stream;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ResetRandomStream"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(KismetMathLibrary_eventResetRandomStream_Parms));
			UProperty* NewProp_Stream = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Stream"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Stream, KismetMathLibrary_eventResetRandomStream_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FRandomStream());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Random"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Reset a random stream"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_RGBToHSV()
	{
		struct KismetMathLibrary_eventRGBToHSV_Parms
		{
			FLinearColor InColor;
			float H;
			float S;
			float V;
			float A;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RGBToHSV"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(KismetMathLibrary_eventRGBToHSV_Parms));
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventRGBToHSV_Parms), 0x0000000000000180);
			UProperty* NewProp_V = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("V"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(V, KismetMathLibrary_eventRGBToHSV_Parms), 0x0000000000000180);
			UProperty* NewProp_S = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("S"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(S, KismetMathLibrary_eventRGBToHSV_Parms), 0x0000000000000180);
			UProperty* NewProp_H = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("H"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(H, KismetMathLibrary_eventRGBToHSV_Parms), 0x0000000000000180);
			UProperty* NewProp_InColor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InColor, KismetMathLibrary_eventRGBToHSV_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FLinearColor());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Color"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("RGB to HSV"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Breaks apart a color into individual HSV components (as well as alpha)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_RGBToHSV_Vector()
	{
		struct KismetMathLibrary_eventRGBToHSV_Vector_Parms
		{
			FLinearColor RGB;
			FLinearColor HSV;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RGBToHSV_Vector"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(KismetMathLibrary_eventRGBToHSV_Vector_Parms));
			UProperty* NewProp_HSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("HSV"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(HSV, KismetMathLibrary_eventRGBToHSV_Vector_Parms), 0x0000000000000180, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_RGB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("RGB"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(RGB, KismetMathLibrary_eventRGBToHSV_Vector_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FLinearColor());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Color"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("RGB to HSV (vector)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("cast convert"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Converts a RGB linear color to HSV (where H is in R, S is in G, and V is in B)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_RInterpTo()
	{
		struct KismetMathLibrary_eventRInterpTo_Parms
		{
			FRotator Current;
			FRotator Target;
			float DeltaTime;
			float InterpSpeed;
			FRotator ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RInterpTo"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventRInterpTo_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventRInterpTo_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_InterpSpeed = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InterpSpeed"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InterpSpeed, KismetMathLibrary_eventRInterpTo_Parms), 0x0000000000000080);
			UProperty* NewProp_DeltaTime = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DeltaTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DeltaTime, KismetMathLibrary_eventRInterpTo_Parms), 0x0000000000000080);
			UProperty* NewProp_Target = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Target"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Target, KismetMathLibrary_eventRInterpTo_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_Current = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Current"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Current, KismetMathLibrary_eventRInterpTo_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Interpolation"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("rotation rotate"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Tries to reach Target based on distance from Current position, giving a nice smooth feeling when tracking a position.\n\n@param               Current                 Actual rotation\n@param               Target                  Target rotation\n@param               DeltaTime               Time since last tick\n@param               InterpSpeed             Interpolation speed\n@return              New interpolated position"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_RInterpTo_Constant()
	{
		struct KismetMathLibrary_eventRInterpTo_Constant_Parms
		{
			FRotator Current;
			FRotator Target;
			float DeltaTime;
			float InterpSpeed;
			FRotator ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RInterpTo_Constant"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventRInterpTo_Constant_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventRInterpTo_Constant_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_InterpSpeed = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InterpSpeed"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InterpSpeed, KismetMathLibrary_eventRInterpTo_Constant_Parms), 0x0000000000000080);
			UProperty* NewProp_DeltaTime = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DeltaTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DeltaTime, KismetMathLibrary_eventRInterpTo_Constant_Parms), 0x0000000000000080);
			UProperty* NewProp_Target = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Target"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Target, KismetMathLibrary_eventRInterpTo_Constant_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_Current = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Current"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Current, KismetMathLibrary_eventRInterpTo_Constant_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Interpolation"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("rotation rotate"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Tries to reach Target at a constant rate.\n\n@param               Current                 Actual rotation\n@param               Target                  Target rotation\n@param               DeltaTime               Time since last tick\n@param               InterpSpeed             Interpolation speed\n@return              New interpolated position"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_RLerp()
	{
		struct KismetMathLibrary_eventRLerp_Parms
		{
			FRotator A;
			FRotator B;
			float Alpha;
			bool bShortestPath;
			FRotator ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RLerp"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventRLerp_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventRLerp_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FRotator());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bShortestPath, KismetMathLibrary_eventRLerp_Parms, bool);
			UProperty* NewProp_bShortestPath = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bShortestPath"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bShortestPath, KismetMathLibrary_eventRLerp_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bShortestPath, KismetMathLibrary_eventRLerp_Parms), sizeof(bool), true);
			UProperty* NewProp_Alpha = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Alpha"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Alpha, KismetMathLibrary_eventRLerp_Parms), 0x0000000000000080);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventRLerp_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventRLerp_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Rotator"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Lerp (Rotator)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Linearly interpolates between A and B based on Alpha (100% of A when Alpha=0 and 100% of B when Alpha=1)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_RotateAngleAxis()
	{
		struct KismetMathLibrary_eventRotateAngleAxis_Parms
		{
			FVector InVect;
			float AngleDeg;
			FVector Axis;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RotateAngleAxis"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventRotateAngleAxis_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventRotateAngleAxis_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Axis = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Axis"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Axis, KismetMathLibrary_eventRotateAngleAxis_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_AngleDeg = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AngleDeg"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(AngleDeg, KismetMathLibrary_eventRotateAngleAxis_Parms), 0x0000000000000080);
			UProperty* NewProp_InVect = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InVect"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InVect, KismetMathLibrary_eventRotateAngleAxis_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Vector"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("RotateVectorAroundAxis"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns result of vector A rotated by AngleDeg around Axis"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_RotatorFromAxisAndAngle()
	{
		struct KismetMathLibrary_eventRotatorFromAxisAndAngle_Parms
		{
			FVector Axis;
			float Angle;
			FRotator ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RotatorFromAxisAndAngle"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventRotatorFromAxisAndAngle_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventRotatorFromAxisAndAngle_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_Angle = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Angle"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Angle, KismetMathLibrary_eventRotatorFromAxisAndAngle_Parms), 0x0000000000000080);
			UProperty* NewProp_Axis = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Axis"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Axis, KismetMathLibrary_eventRotatorFromAxisAndAngle_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Rotator"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("make construct build rotate rotation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Create a rotation from an axis and and angle (in degrees)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Round()
	{
		struct KismetMathLibrary_eventRound_Parms
		{
			float A;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Round"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventRound_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventRound_Parms), 0x0000000000000580);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventRound_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Float"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Rounds A to the nearest integer"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_SeedRandomStream()
	{
		struct KismetMathLibrary_eventSeedRandomStream_Parms
		{
			FRandomStream Stream;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SeedRandomStream"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(KismetMathLibrary_eventSeedRandomStream_Parms));
			UProperty* NewProp_Stream = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Stream"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Stream, KismetMathLibrary_eventSeedRandomStream_Parms), 0x0000000008000180, Z_Construct_UScriptStruct_FRandomStream());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Random"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Create a new random seed for a random stream"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_SelectClass()
	{
		struct KismetMathLibrary_eventSelectClass_Parms
		{
			UClass* A;
			UClass* B;
			bool bSelectA;
			UClass* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SelectClass"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventSelectClass_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventSelectClass_Parms), 0x0000000000000580, Z_Construct_UClass_UObject_NoRegister());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSelectA, KismetMathLibrary_eventSelectClass_Parms, bool);
			UProperty* NewProp_bSelectA = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bSelectA"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSelectA, KismetMathLibrary_eventSelectClass_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bSelectA, KismetMathLibrary_eventSelectClass_Parms), sizeof(bool), true);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventSelectClass_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventSelectClass_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("If bPickA is true, A is returned, otherwise B is"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_SelectColor()
	{
		struct KismetMathLibrary_eventSelectColor_Parms
		{
			FLinearColor A;
			FLinearColor B;
			bool bPickA;
			FLinearColor ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SelectColor"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventSelectColor_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventSelectColor_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FLinearColor());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bPickA, KismetMathLibrary_eventSelectColor_Parms, bool);
			UProperty* NewProp_bPickA = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bPickA"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bPickA, KismetMathLibrary_eventSelectColor_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bPickA, KismetMathLibrary_eventSelectColor_Parms), sizeof(bool), true);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventSelectColor_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventSelectColor_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FLinearColor());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Color"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("If bPickA is true, A is returned, otherwise B is"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_SelectFloat()
	{
		struct KismetMathLibrary_eventSelectFloat_Parms
		{
			float A;
			float B;
			bool bPickA;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SelectFloat"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventSelectFloat_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventSelectFloat_Parms), 0x0000000000000580);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bPickA, KismetMathLibrary_eventSelectFloat_Parms, bool);
			UProperty* NewProp_bPickA = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bPickA"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bPickA, KismetMathLibrary_eventSelectFloat_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bPickA, KismetMathLibrary_eventSelectFloat_Parms), sizeof(bool), true);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventSelectFloat_Parms), 0x0000000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventSelectFloat_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Float"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("If bPickA is true, A is returned, otherwise B is"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_SelectInt()
	{
		struct KismetMathLibrary_eventSelectInt_Parms
		{
			int32 A;
			int32 B;
			bool bPickA;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SelectInt"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventSelectInt_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventSelectInt_Parms), 0x0000000000000580);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bPickA, KismetMathLibrary_eventSelectInt_Parms, bool);
			UProperty* NewProp_bPickA = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bPickA"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bPickA, KismetMathLibrary_eventSelectInt_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bPickA, KismetMathLibrary_eventSelectInt_Parms), sizeof(bool), true);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventSelectInt_Parms), 0x0000000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventSelectInt_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Integer"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("If bPickA is true, A is returned, otherwise B is"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_SelectObject()
	{
		struct KismetMathLibrary_eventSelectObject_Parms
		{
			UObject* A;
			UObject* B;
			bool bSelectA;
			UObject* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SelectObject"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventSelectObject_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventSelectObject_Parms), 0x0000000000000580, Z_Construct_UClass_UObject_NoRegister());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSelectA, KismetMathLibrary_eventSelectObject_Parms, bool);
			UProperty* NewProp_bSelectA = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bSelectA"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSelectA, KismetMathLibrary_eventSelectObject_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bSelectA, KismetMathLibrary_eventSelectObject_Parms), sizeof(bool), true);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventSelectObject_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventSelectObject_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("If bPickA is true, A is returned, otherwise B is"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_SelectRotator()
	{
		struct KismetMathLibrary_eventSelectRotator_Parms
		{
			FRotator A;
			FRotator B;
			bool bPickA;
			FRotator ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SelectRotator"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventSelectRotator_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventSelectRotator_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FRotator());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bPickA, KismetMathLibrary_eventSelectRotator_Parms, bool);
			UProperty* NewProp_bPickA = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bPickA"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bPickA, KismetMathLibrary_eventSelectRotator_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bPickA, KismetMathLibrary_eventSelectRotator_Parms), sizeof(bool), true);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventSelectRotator_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventSelectRotator_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Rotator"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("rotation rotate"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("If bPickA is true, A is returned, otherwise B is"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_SelectString()
	{
		struct KismetMathLibrary_eventSelectString_Parms
		{
			FString A;
			FString B;
			bool bPickA;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SelectString"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventSelectString_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventSelectString_Parms), 0x0000000000000580);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bPickA, KismetMathLibrary_eventSelectString_Parms, bool);
			UProperty* NewProp_bPickA = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bPickA"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bPickA, KismetMathLibrary_eventSelectString_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bPickA, KismetMathLibrary_eventSelectString_Parms), sizeof(bool), true);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventSelectString_Parms), 0x0000000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventSelectString_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|String"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("If bPickA is true, A is returned, otherwise B is"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_SelectTransform()
	{
		struct KismetMathLibrary_eventSelectTransform_Parms
		{
			FTransform A;
			FTransform B;
			bool bPickA;
			FTransform ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SelectTransform"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(KismetMathLibrary_eventSelectTransform_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventSelectTransform_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FTransform());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bPickA, KismetMathLibrary_eventSelectTransform_Parms, bool);
			UProperty* NewProp_bPickA = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bPickA"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bPickA, KismetMathLibrary_eventSelectTransform_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bPickA, KismetMathLibrary_eventSelectTransform_Parms), sizeof(bool), true);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventSelectTransform_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FTransform());
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventSelectTransform_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FTransform());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Transform"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("If bPickA is true, A is returned, otherwise B is"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_SelectVector()
	{
		struct KismetMathLibrary_eventSelectVector_Parms
		{
			FVector A;
			FVector B;
			bool bPickA;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SelectVector"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventSelectVector_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventSelectVector_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bPickA, KismetMathLibrary_eventSelectVector_Parms, bool);
			UProperty* NewProp_bPickA = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bPickA"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bPickA, KismetMathLibrary_eventSelectVector_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bPickA, KismetMathLibrary_eventSelectVector_Parms), sizeof(bool), true);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventSelectVector_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventSelectVector_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Vector"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("If bPickA is true, A is returned, otherwise B is"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_SetRandomStreamSeed()
	{
		struct KismetMathLibrary_eventSetRandomStreamSeed_Parms
		{
			FRandomStream Stream;
			int32 NewSeed;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetRandomStreamSeed"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(KismetMathLibrary_eventSetRandomStreamSeed_Parms));
			UProperty* NewProp_NewSeed = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewSeed"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(NewSeed, KismetMathLibrary_eventSetRandomStreamSeed_Parms), 0x0000000000000080);
			UProperty* NewProp_Stream = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Stream"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Stream, KismetMathLibrary_eventSetRandomStreamSeed_Parms), 0x0000000008000180, Z_Construct_UScriptStruct_FRandomStream());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Random"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set the seed of a random stream to a specific number"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_SignOfFloat()
	{
		struct KismetMathLibrary_eventSignOfFloat_Parms
		{
			float A;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SignOfFloat"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventSignOfFloat_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventSignOfFloat_Parms), 0x0000000000000580);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventSignOfFloat_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Float"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Sign (float)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sign (float, returns -1 if A < 0, 0 if A is zero, and +1 if A > 0)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_SignOfInteger()
	{
		struct KismetMathLibrary_eventSignOfInteger_Parms
		{
			int32 A;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SignOfInteger"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventSignOfInteger_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventSignOfInteger_Parms), 0x0000000000000580);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventSignOfInteger_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Integer"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Sign (int)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sign (integer, returns -1 if A < 0, 0 if A is zero, and +1 if A > 0)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Sin()
	{
		struct KismetMathLibrary_eventSin_Parms
		{
			float A;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Sin"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventSin_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventSin_Parms), 0x0000000000000580);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventSin_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Trig"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("SIN"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Sin (Radians)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("sine"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the sine of A (expects Radians)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Sqrt()
	{
		struct KismetMathLibrary_eventSqrt_Parms
		{
			float A;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Sqrt"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventSqrt_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventSqrt_Parms), 0x0000000000000580);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventSqrt_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Float"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("SQRT"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("square root"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns square root of A"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Square()
	{
		struct KismetMathLibrary_eventSquare_Parms
		{
			float A;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Square"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventSquare_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventSquare_Parms), 0x0000000000000580);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventSquare_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Float"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("^2"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns square of A (A*A)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Subtract_ByteByte()
	{
		struct KismetMathLibrary_eventSubtract_ByteByte_Parms
		{
			uint8 A;
			uint8 B;
			uint8 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Subtract_ByteByte"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventSubtract_ByteByte_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventSubtract_ByteByte_Parms), 0x0000000000000580);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventSubtract_ByteByte_Parms), 0x0000000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventSubtract_ByteByte_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Byte"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("-"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_B"), TEXT("1"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Byte - Byte"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("- subtract minus"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Subtraction (A - B)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Subtract_DateTimeDateTime()
	{
		struct KismetMathLibrary_eventSubtract_DateTimeDateTime_Parms
		{
			FDateTime A;
			FDateTime B;
			FTimespan ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Subtract_DateTimeDateTime"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventSubtract_DateTimeDateTime_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventSubtract_DateTimeDateTime_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FTimespan());
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventSubtract_DateTimeDateTime_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FDateTime());
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventSubtract_DateTimeDateTime_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FDateTime());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|DateTime"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("-"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("DateTime - DateTime"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("- subtract minus"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Subtraction (A - B)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Subtract_DateTimeTimespan()
	{
		struct KismetMathLibrary_eventSubtract_DateTimeTimespan_Parms
		{
			FDateTime A;
			FTimespan B;
			FDateTime ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Subtract_DateTimeTimespan"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventSubtract_DateTimeTimespan_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventSubtract_DateTimeTimespan_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FDateTime());
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventSubtract_DateTimeTimespan_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FTimespan());
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventSubtract_DateTimeTimespan_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FDateTime());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|DateTime"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("-"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("DateTime - Timespan"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("- subtract minus"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Subtraction (A - B)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Subtract_FloatFloat()
	{
		struct KismetMathLibrary_eventSubtract_FloatFloat_Parms
		{
			float A;
			float B;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Subtract_FloatFloat"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventSubtract_FloatFloat_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventSubtract_FloatFloat_Parms), 0x0000000000000580);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventSubtract_FloatFloat_Parms), 0x0000000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventSubtract_FloatFloat_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Float"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("-"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_B"), TEXT("1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("float - float"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("- subtract minus"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Subtraction (A - B)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Subtract_IntInt()
	{
		struct KismetMathLibrary_eventSubtract_IntInt_Parms
		{
			int32 A;
			int32 B;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Subtract_IntInt"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventSubtract_IntInt_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventSubtract_IntInt_Parms), 0x0000000000000580);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventSubtract_IntInt_Parms), 0x0000000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventSubtract_IntInt_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Integer"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("-"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_B"), TEXT("1"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("integer - integer"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("- subtract minus"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Subtraction (A - B)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Subtract_TimespanTimespan()
	{
		struct KismetMathLibrary_eventSubtract_TimespanTimespan_Parms
		{
			FTimespan A;
			FTimespan B;
			FTimespan ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Subtract_TimespanTimespan"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventSubtract_TimespanTimespan_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventSubtract_TimespanTimespan_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FTimespan());
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventSubtract_TimespanTimespan_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FTimespan());
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventSubtract_TimespanTimespan_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FTimespan());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Timespan"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("-"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Timespan - Timespan"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("- subtract minus"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Subtraction (A - B)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Subtract_Vector2DFloat()
	{
		struct KismetMathLibrary_eventSubtract_Vector2DFloat_Parms
		{
			FVector2D A;
			float B;
			FVector2D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Subtract_Vector2DFloat"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventSubtract_Vector2DFloat_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventSubtract_Vector2DFloat_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventSubtract_Vector2DFloat_Parms), 0x0000000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventSubtract_Vector2DFloat_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Vector2D"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("-"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("vector2d - float"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("- subtract minus"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns Vector A subtracted by B"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Subtract_Vector2DVector2D()
	{
		struct KismetMathLibrary_eventSubtract_Vector2DVector2D_Parms
		{
			FVector2D A;
			FVector2D B;
			FVector2D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Subtract_Vector2DVector2D"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventSubtract_Vector2DVector2D_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventSubtract_Vector2DVector2D_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventSubtract_Vector2DVector2D_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventSubtract_Vector2DVector2D_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Vector2D"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("-"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("vector2d - vector2d"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("- subtract minus"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns subtraction of Vector B from Vector A (A - B)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Subtract_VectorFloat()
	{
		struct KismetMathLibrary_eventSubtract_VectorFloat_Parms
		{
			FVector A;
			float B;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Subtract_VectorFloat"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventSubtract_VectorFloat_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventSubtract_VectorFloat_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventSubtract_VectorFloat_Parms), 0x0000000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventSubtract_VectorFloat_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Vector"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("-"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("vector - float"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("- subtract minus"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Subtracts a float from each component of a vector"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Subtract_VectorInt()
	{
		struct KismetMathLibrary_eventSubtract_VectorInt_Parms
		{
			FVector A;
			int32 B;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Subtract_VectorInt"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventSubtract_VectorInt_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventSubtract_VectorInt_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventSubtract_VectorInt_Parms), 0x0000000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventSubtract_VectorInt_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Vector"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("-"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("vector - int"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("- subtract minus"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Subtracts an integer from each component of a vector"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Subtract_VectorVector()
	{
		struct KismetMathLibrary_eventSubtract_VectorVector_Parms
		{
			FVector A;
			FVector B;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Subtract_VectorVector"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventSubtract_VectorVector_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventSubtract_VectorVector_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventSubtract_VectorVector_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventSubtract_VectorVector_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Vector"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("-"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("vector - vector"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("- subtract minus"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Vector subtraction"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Tan()
	{
		struct KismetMathLibrary_eventTan_Parms
		{
			float A;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Tan"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventTan_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventTan_Parms), 0x0000000000000580);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventTan_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Trig"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("TAN"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Tan (Radians)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the tan of A (expects Radians)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_TEase()
	{
		struct KismetMathLibrary_eventTEase_Parms
		{
			FTransform A;
			FTransform B;
			float Alpha;
			TEnumAsByte<EEasingFunc::Type> EasingFunc;
			float BlendExp;
			int32 Steps;
			FTransform ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TEase"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(KismetMathLibrary_eventTEase_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventTEase_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FTransform());
			UProperty* NewProp_Steps = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Steps"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Steps, KismetMathLibrary_eventTEase_Parms), 0x0000000000000080);
			UProperty* NewProp_BlendExp = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("BlendExp"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(BlendExp, KismetMathLibrary_eventTEase_Parms), 0x0000000000000080);
			UProperty* NewProp_EasingFunc = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("EasingFunc"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(EasingFunc, KismetMathLibrary_eventTEase_Parms), 0x0000000000000080, Z_Construct_UEnum_Engine_EEasingFunc());
			UProperty* NewProp_Alpha = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Alpha"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Alpha, KismetMathLibrary_eventTEase_Parms), 0x0000000000000080);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventTEase_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FTransform());
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventTEase_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FTransform());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Interpolation"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_BlendExp"), TEXT("2.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Steps"), TEXT("2"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Ease (Transform)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Ease between A and B using a specified easing function."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_TimespanFromString()
	{
		struct KismetMathLibrary_eventTimespanFromString_Parms
		{
			FString TimespanString;
			FTimespan Result;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TimespanFromString"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(KismetMathLibrary_eventTimespanFromString_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetMathLibrary_eventTimespanFromString_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetMathLibrary_eventTimespanFromString_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetMathLibrary_eventTimespanFromString_Parms), sizeof(bool), true);
			UProperty* NewProp_Result = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Result"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Result, KismetMathLibrary_eventTimespanFromString_Parms), 0x0000000000000180, Z_Construct_UScriptStruct_FTimespan());
			UProperty* NewProp_TimespanString = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TimespanString"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(TimespanString, KismetMathLibrary_eventTimespanFromString_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Timespan"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Converts a time span string to a Timespan object"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_TimespanMaxValue()
	{
		struct KismetMathLibrary_eventTimespanMaxValue_Parms
		{
			FTimespan ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TimespanMaxValue"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventTimespanMaxValue_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventTimespanMaxValue_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FTimespan());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Timespan"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("MaxValue"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the maximum time span value"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_TimespanMinValue()
	{
		struct KismetMathLibrary_eventTimespanMinValue_Parms
		{
			FTimespan ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TimespanMinValue"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventTimespanMinValue_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventTimespanMinValue_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FTimespan());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Timespan"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("MinValue"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the minimum time span value"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_TimespanRatio()
	{
		struct KismetMathLibrary_eventTimespanRatio_Parms
		{
			FTimespan A;
			FTimespan B;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TimespanRatio"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventTimespanRatio_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventTimespanRatio_Parms), 0x0000000000000580);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventTimespanRatio_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FTimespan());
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventTimespanRatio_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FTimespan());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Timespan"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("TimespanRatio"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the ratio between two time spans (A / B), handles zero values"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_TimespanZeroValue()
	{
		struct KismetMathLibrary_eventTimespanZeroValue_Parms
		{
			FTimespan ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TimespanZeroValue"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventTimespanZeroValue_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventTimespanZeroValue_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FTimespan());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Timespan"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("ZeroValue"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns a zero time span value"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_TInterpTo()
	{
		struct KismetMathLibrary_eventTInterpTo_Parms
		{
			FTransform Current;
			FTransform Target;
			float DeltaTime;
			float InterpSpeed;
			FTransform ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TInterpTo"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(KismetMathLibrary_eventTInterpTo_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventTInterpTo_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FTransform());
			UProperty* NewProp_InterpSpeed = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InterpSpeed"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InterpSpeed, KismetMathLibrary_eventTInterpTo_Parms), 0x0000000000000080);
			UProperty* NewProp_DeltaTime = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DeltaTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DeltaTime, KismetMathLibrary_eventTInterpTo_Parms), 0x0000000000000080);
			UProperty* NewProp_Target = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Target"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Target, KismetMathLibrary_eventTInterpTo_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FTransform());
			UProperty* NewProp_Current = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Current"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Current, KismetMathLibrary_eventTInterpTo_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FTransform());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Interpolation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Tries to reach a target transform."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_TLerp()
	{
		struct KismetMathLibrary_eventTLerp_Parms
		{
			FTransform A;
			FTransform B;
			float Alpha;
			FTransform ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TLerp"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(KismetMathLibrary_eventTLerp_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventTLerp_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FTransform());
			UProperty* NewProp_Alpha = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Alpha"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Alpha, KismetMathLibrary_eventTLerp_Parms), 0x0000000000000080);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventTLerp_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FTransform());
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventTLerp_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FTransform());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Transform"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Lerp (Transform)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Linearly interpolates between A and B based on Alpha (100% of A when Alpha=0 and 100% of B when Alpha=1)."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Today()
	{
		struct KismetMathLibrary_eventToday_Parms
		{
			FDateTime ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Today"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventToday_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventToday_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FDateTime());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|DateTime"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Today"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the local date on this computer"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_TransformDirection()
	{
		struct KismetMathLibrary_eventTransformDirection_Parms
		{
			FTransform T;
			FVector Direction;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TransformDirection"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(KismetMathLibrary_eventTransformDirection_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventTransformDirection_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Direction = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Direction"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Direction, KismetMathLibrary_eventTransformDirection_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_T = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("T"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(T, KismetMathLibrary_eventTransformDirection_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FTransform());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Transform"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Transform a direction vector by the supplied transform - will not change its length.\nFor example, if T was an object's transform, would transform a direction from local space to world space."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_TransformLocation()
	{
		struct KismetMathLibrary_eventTransformLocation_Parms
		{
			FTransform T;
			FVector Location;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TransformLocation"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(KismetMathLibrary_eventTransformLocation_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventTransformLocation_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Location = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Location"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Location, KismetMathLibrary_eventTransformLocation_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_T = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("T"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(T, KismetMathLibrary_eventTransformLocation_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FTransform());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Transform"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("location"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Transform a position by the supplied transform.\nFor example, if T was an object's transform, would transform a position from local space to world space."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_UtcNow()
	{
		struct KismetMathLibrary_eventUtcNow_Parms
		{
			FDateTime ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("UtcNow"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventUtcNow_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventUtcNow_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FDateTime());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|DateTime"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("UtcNow"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the UTC date and time on this computer"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_VEase()
	{
		struct KismetMathLibrary_eventVEase_Parms
		{
			FVector A;
			FVector B;
			float Alpha;
			TEnumAsByte<EEasingFunc::Type> EasingFunc;
			float BlendExp;
			int32 Steps;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VEase"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventVEase_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventVEase_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Steps = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Steps"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Steps, KismetMathLibrary_eventVEase_Parms), 0x0000000000000080);
			UProperty* NewProp_BlendExp = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("BlendExp"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(BlendExp, KismetMathLibrary_eventVEase_Parms), 0x0000000000000080);
			UProperty* NewProp_EasingFunc = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("EasingFunc"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(EasingFunc, KismetMathLibrary_eventVEase_Parms), 0x0000000000000080, Z_Construct_UEnum_Engine_EEasingFunc());
			UProperty* NewProp_Alpha = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Alpha"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Alpha, KismetMathLibrary_eventVEase_Parms), 0x0000000000000080);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventVEase_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventVEase_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Interpolation"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_BlendExp"), TEXT("2.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Steps"), TEXT("2"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Ease (vector)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Easeing  between A and B using a specified easing function"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Vector2DInterpTo()
	{
		struct KismetMathLibrary_eventVector2DInterpTo_Parms
		{
			FVector2D Current;
			FVector2D Target;
			float DeltaTime;
			float InterpSpeed;
			FVector2D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Vector2DInterpTo"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventVector2DInterpTo_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventVector2DInterpTo_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_InterpSpeed = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InterpSpeed"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InterpSpeed, KismetMathLibrary_eventVector2DInterpTo_Parms), 0x0000000000000080);
			UProperty* NewProp_DeltaTime = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DeltaTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DeltaTime, KismetMathLibrary_eventVector2DInterpTo_Parms), 0x0000000000000080);
			UProperty* NewProp_Target = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Target"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Target, KismetMathLibrary_eventVector2DInterpTo_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_Current = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Current"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Current, KismetMathLibrary_eventVector2DInterpTo_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Interpolation"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("position"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Tries to reach Target based on distance from Current position, giving a nice smooth feeling when tracking a position.\n\n@param               Current                 Actual position\n@param               Target                  Target position\n@param               DeltaTime               Time since last tick\n@param               InterpSpeed             Interpolation speed\n@return              New interpolated position"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Vector2DInterpTo_Constant()
	{
		struct KismetMathLibrary_eventVector2DInterpTo_Constant_Parms
		{
			FVector2D Current;
			FVector2D Target;
			float DeltaTime;
			float InterpSpeed;
			FVector2D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Vector2DInterpTo_Constant"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventVector2DInterpTo_Constant_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventVector2DInterpTo_Constant_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_InterpSpeed = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InterpSpeed"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InterpSpeed, KismetMathLibrary_eventVector2DInterpTo_Constant_Parms), 0x0000000000000080);
			UProperty* NewProp_DeltaTime = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DeltaTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DeltaTime, KismetMathLibrary_eventVector2DInterpTo_Constant_Parms), 0x0000000000000080);
			UProperty* NewProp_Target = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Target"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Target, KismetMathLibrary_eventVector2DInterpTo_Constant_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_Current = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Current"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Current, KismetMathLibrary_eventVector2DInterpTo_Constant_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Interpolation"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("position"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Tries to reach Target at a constant rate.\n\n@param               Current                 Actual position\n@param               Target                  Target position\n@param               DeltaTime               Time since last tick\n@param               InterpSpeed             Interpolation speed\n@return              New interpolated position"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_VInterpTo()
	{
		struct KismetMathLibrary_eventVInterpTo_Parms
		{
			FVector Current;
			FVector Target;
			float DeltaTime;
			float InterpSpeed;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VInterpTo"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventVInterpTo_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventVInterpTo_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_InterpSpeed = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InterpSpeed"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InterpSpeed, KismetMathLibrary_eventVInterpTo_Parms), 0x0000000000000080);
			UProperty* NewProp_DeltaTime = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DeltaTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DeltaTime, KismetMathLibrary_eventVInterpTo_Parms), 0x0000000000000080);
			UProperty* NewProp_Target = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Target"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Target, KismetMathLibrary_eventVInterpTo_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Current = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Current"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Current, KismetMathLibrary_eventVInterpTo_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Interpolation"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("position"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Tries to reach Target based on distance from Current position, giving a nice smooth feeling when tracking a position.\n\n@param               Current                 Actual position\n@param               Target                  Target position\n@param               DeltaTime               Time since last tick\n@param               InterpSpeed             Interpolation speed\n@return              New interpolated position"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_VInterpTo_Constant()
	{
		struct KismetMathLibrary_eventVInterpTo_Constant_Parms
		{
			FVector Current;
			FVector Target;
			float DeltaTime;
			float InterpSpeed;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VInterpTo_Constant"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventVInterpTo_Constant_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventVInterpTo_Constant_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_InterpSpeed = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InterpSpeed"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InterpSpeed, KismetMathLibrary_eventVInterpTo_Constant_Parms), 0x0000000000000080);
			UProperty* NewProp_DeltaTime = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DeltaTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DeltaTime, KismetMathLibrary_eventVInterpTo_Constant_Parms), 0x0000000000000080);
			UProperty* NewProp_Target = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Target"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Target, KismetMathLibrary_eventVInterpTo_Constant_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Current = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Current"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Current, KismetMathLibrary_eventVInterpTo_Constant_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Interpolation"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("position"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Tries to reach Target at a constant rate.\n\n@param               Current                 Actual position\n@param               Target                  Target position\n@param               DeltaTime               Time since last tick\n@param               InterpSpeed             Interpolation speed\n@return              New interpolated position"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_VLerp()
	{
		struct KismetMathLibrary_eventVLerp_Parms
		{
			FVector A;
			FVector B;
			float Alpha;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VLerp"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventVLerp_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventVLerp_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Alpha = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Alpha"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Alpha, KismetMathLibrary_eventVLerp_Parms), 0x0000000000000080);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventVLerp_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventVLerp_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Vector"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Lerp (vector)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Linearly interpolates between A and B based on Alpha (100% of A when Alpha=0 and 100% of B when Alpha=1)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_VSize()
	{
		struct KismetMathLibrary_eventVSize_Parms
		{
			FVector A;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VSize"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventVSize_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventVSize_Parms), 0x0000000000000580);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventVSize_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Vector"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("VectorLength"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("magnitude"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the length of the FVector"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_VSize2D()
	{
		struct KismetMathLibrary_eventVSize2D_Parms
		{
			FVector2D A;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VSize2D"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventVSize2D_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventVSize2D_Parms), 0x0000000000000580);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventVSize2D_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Vector2D"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Vector2dLength"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("magnitude"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the length of a 2d FVector."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_VSize2DSquared()
	{
		struct KismetMathLibrary_eventVSize2DSquared_Parms
		{
			FVector2D A;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VSize2DSquared"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventVSize2DSquared_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventVSize2DSquared_Parms), 0x0000000000000580);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventVSize2DSquared_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Vector2D"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Vector2dLengthSquared"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("magnitude"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the squared length of a 2d FVector."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_VSizeSquared()
	{
		struct KismetMathLibrary_eventVSizeSquared_Parms
		{
			FVector A;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VSizeSquared"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetMathLibrary_eventVSizeSquared_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventVSizeSquared_Parms), 0x0000000000000580);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventVSizeSquared_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Vector"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("VectorLengthSquared"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("magnitude"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the squared length of the FVector"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetMathLibrary_Xor_IntInt()
	{
		struct KismetMathLibrary_eventXor_IntInt_Parms
		{
			int32 A;
			int32 B;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Xor_IntInt"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetMathLibrary_eventXor_IntInt_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, KismetMathLibrary_eventXor_IntInt_Parms), 0x0000000000000580);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(B, KismetMathLibrary_eventXor_IntInt_Parms), 0x0000000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(A, KismetMathLibrary_eventXor_IntInt_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Integer"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("^"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Bitwise XOR"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("^ xor"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Bitwise XOR (A ^ B)"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UKismetMathLibrary_NoRegister()
	{
		return UKismetMathLibrary::StaticClass();
	}
	UClass* Z_Construct_UClass_UKismetMathLibrary()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBlueprintFunctionLibrary();
			Z_Construct_UPackage_Engine();
			OuterClass = UKismetMathLibrary::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Abs());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Abs_Int());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Acos());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Add_ByteByte());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Add_DateTimeTimespan());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Add_FloatFloat());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Add_IntInt());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Add_TimespanTimespan());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Add_Vector2DFloat());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Add_Vector2DVector2D());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Add_VectorFloat());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Add_VectorInt());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Add_VectorVector());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_And_IntInt());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Asin());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Atan());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Atan2());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_BooleanAND());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_BooleanNAND());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_BooleanNOR());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_BooleanOR());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_BooleanXOR());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_BreakColor());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_BreakDateTime());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_BreakRandomStream());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_BreakRotator());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_BreakRotIntoAxes());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_BreakTimespan());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_BreakTransform());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_BreakVector());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_BreakVector2D());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_CInterpTo());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Clamp());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_ClampAngle());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_ClampAxis());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_ClampVectorSize());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_ClassIsChildOf());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_ComposeRotators());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_ComposeTransforms());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Conv_BoolToByte());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Conv_BoolToFloat());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Conv_BoolToInt());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Conv_ByteToFloat());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Conv_ByteToInt());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Conv_ColorToLinearColor());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Conv_FloatToLinearColor());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Conv_FloatToVector());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Conv_IntToBool());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Conv_IntToByte());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Conv_IntToFloat());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Conv_LinearColorToColor());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Conv_LinearColorToVector());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Conv_RotatorToVector());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Conv_Vector2DToVector());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Conv_VectorToLinearColor());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Conv_VectorToRotator());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Conv_VectorToTransform());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Conv_VectorToVector2D());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_ConvertTransformToRelative());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Cos());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_CreateVectorFromYawPitch());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Cross_VectorVector());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_CrossProduct2D());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_DateTimeFromIsoString());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_DateTimeFromString());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_DateTimeMaxValue());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_DateTimeMinValue());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_DaysInMonth());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_DaysInYear());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_DegAcos());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_DegAsin());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_DegAtan());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_DegAtan2());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_DegCos());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_DegreesToRadians());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_DegSin());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_DegTan());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Divide_ByteByte());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Divide_FloatFloat());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Divide_IntInt());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Divide_Vector2DFloat());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Divide_VectorFloat());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Divide_VectorInt());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Divide_VectorVector());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Dot_VectorVector());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_DotProduct2D());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Ease());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_BoolBool());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_ByteByte());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_ClassClass());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_DateTimeDateTime());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_FloatFloat());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_IntInt());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_NameName());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_ObjectObject());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_RotatorRotator());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_TimespanTimespan());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_TransformTransform());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_VectorVector());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Exp());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_FCeil());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_FClamp());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_FFloor());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_FindLookAtRotation());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_FInterpEaseInOut());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_FInterpTo());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_FInterpTo_Constant());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_FixedTurn());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_FMax());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_FMin());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_FMod());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Fraction());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_FromDays());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_FromHours());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_FromMilliseconds());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_FromMinutes());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_FromSeconds());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_FTrunc());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_GetAxes());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_GetDate());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_GetDay());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_GetDayOfYear());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_GetDays());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_GetDirectionVector());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_GetDuration());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_GetForwardVector());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_GetHour());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_GetHour12());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_GetHours());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_GetMaxElement());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_GetMillisecond());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_GetMilliseconds());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_GetMinElement());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_GetMinute());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_GetMinutes());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_GetMonth());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_GetPI());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_GetRightVector());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_GetSecond());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_GetSeconds());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_GetTimeOfDay());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_GetTotalDays());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_GetTotalHours());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_GetTotalMilliseconds());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_GetTotalMinutes());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_GetTotalSeconds());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_GetUpVector());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_GetVectorArrayAverage());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_GetYawPitchFromVector());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_GetYear());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Greater_ByteByte());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Greater_DateTimeDateTime());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Greater_FloatFloat());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Greater_IntInt());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Greater_TimespanTimespan());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_GreaterEqual_ByteByte());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_GreaterEqual_DateTimeDateTime());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_GreaterEqual_FloatFloat());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_GreaterEqual_IntInt());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_GreaterEqual_TimespanTimespan());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_GreaterGreater_VectorRotator());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_GridSnap_Float());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_HSVToRGB());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_HSVToRGB_Vector());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Hypotenuse());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_InRange_FloatFloat());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_InverseLerp());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_InverseTransformDirection());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_InverseTransformLocation());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_InvertTransform());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_IsAfternoon());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_IsLeapYear());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_IsMorning());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Lerp());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Less_ByteByte());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Less_DateTimeDateTime());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Less_FloatFloat());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Less_IntInt());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Less_TimespanTimespan());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_LessEqual_ByteByte());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_LessEqual_DateTimeDateTime());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_LessEqual_FloatFloat());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_LessEqual_IntInt());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_LessEqual_TimespanTimespan());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_LessLess_VectorRotator());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_LinearColorLerp());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_LinearColorLerpUsingHSV());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_LinePlaneIntersection());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_LinePlaneIntersection_OriginNormal());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Loge());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_MakeColor());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_MakeDateTime());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_MakePulsatingValue());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_MakeRandomStream());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_MakeRotationFromAxes());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_MakeRotator());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_MakeRotFromX());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_MakeRotFromXY());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_MakeRotFromXZ());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_MakeRotFromY());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_MakeRotFromYX());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_MakeRotFromYZ());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_MakeRotFromZ());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_MakeRotFromZX());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_MakeRotFromZY());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_MakeTimespan());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_MakeTransform());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_MakeVector());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_MakeVector2D());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_MapRangeClamped());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_MapRangeUnclamped());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Max());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_MaxOfByteArray());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_MaxOfFloatArray());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_MaxOfIntArray());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Min());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_MinimumAreaRectangle());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_MinOfByteArray());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_MinOfFloatArray());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_MinOfIntArray());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_MirrorVectorByNormal());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Multiply_ByteByte());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Multiply_FloatFloat());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Multiply_IntFloat());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Multiply_IntInt());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Multiply_LinearColorFloat());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Multiply_LinearColorLinearColor());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Multiply_RotatorFloat());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Multiply_RotatorInt());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Multiply_TimespanFloat());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Multiply_Vector2DFloat());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Multiply_VectorFloat());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Multiply_VectorInt());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Multiply_VectorVector());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_MultiplyByPi());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_MultiplyMultiply_FloatFloat());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_NearlyEqual_FloatFloat());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_NearlyEqual_TransformTransform());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_NegateRotator());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_NegateVector());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Normal());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Normal2D());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_NormalizeAxis());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_NormalizedDeltaRotator());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_NormalizeToRange());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Not_PreBool());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_NotEqual_BoolBool());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_NotEqual_ByteByte());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_NotEqual_ClassClass());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_NotEqual_DateTimeDateTime());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_NotEqual_FloatFloat());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_NotEqual_IntInt());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_NotEqual_NameName());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_NotEqual_ObjectObject());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_NotEqual_RotatorRotator());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_NotEqual_TimespanTimespan());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_NotEqual_VectorVector());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Now());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Or_IntInt());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Percent_ByteByte());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Percent_FloatFloat());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Percent_IntInt());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_PointsAreCoplanar());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_ProjectPointOnToPlane());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_ProjectVectorOnToPlane());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_ProjectVectorOnToVector());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_RadiansToDegrees());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_RandomBool());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_RandomBoolFromStream());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_RandomFloat());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_RandomFloatFromStream());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_RandomFloatInRange());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_RandomFloatInRangeFromStream());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_RandomInteger());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_RandomIntegerFromStream());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_RandomIntegerInRange());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_RandomIntegerInRangeFromStream());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_RandomPointInBoundingBox());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_RandomRotator());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_RandomRotatorFromStream());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_RandomUnitVector());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_RandomUnitVectorFromStream());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_RandomUnitVectorInCone());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_RandomUnitVectorInConeWithYawAndPitch());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_REase());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_ResetRandomStream());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_RGBToHSV());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_RGBToHSV_Vector());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_RInterpTo());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_RInterpTo_Constant());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_RLerp());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_RotateAngleAxis());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_RotatorFromAxisAndAngle());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Round());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_SeedRandomStream());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_SelectClass());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_SelectColor());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_SelectFloat());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_SelectInt());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_SelectObject());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_SelectRotator());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_SelectString());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_SelectTransform());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_SelectVector());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_SetRandomStreamSeed());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_SignOfFloat());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_SignOfInteger());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Sin());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Sqrt());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Square());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Subtract_ByteByte());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Subtract_DateTimeDateTime());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Subtract_DateTimeTimespan());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Subtract_FloatFloat());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Subtract_IntInt());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Subtract_TimespanTimespan());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Subtract_Vector2DFloat());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Subtract_Vector2DVector2D());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Subtract_VectorFloat());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Subtract_VectorInt());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Subtract_VectorVector());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Tan());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_TEase());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_TimespanFromString());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_TimespanMaxValue());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_TimespanMinValue());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_TimespanRatio());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_TimespanZeroValue());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_TInterpTo());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_TLerp());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Today());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_TransformDirection());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_TransformLocation());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_UtcNow());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_VEase());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Vector2DInterpTo());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Vector2DInterpTo_Constant());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_VInterpTo());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_VInterpTo_Constant());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_VLerp());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_VSize());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_VSize2D());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_VSize2DSquared());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_VSizeSquared());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetMathLibrary_Xor_IntInt());

				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Abs()); // 308025731
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Abs_Int()); // 245271064
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Acos()); // 1720775143
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Add_ByteByte()); // 1124283137
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Add_DateTimeTimespan()); // 1672960595
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Add_FloatFloat()); // 2661758863
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Add_IntInt()); // 1923108231
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Add_TimespanTimespan()); // 2135680359
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Add_Vector2DFloat()); // 3018728889
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Add_Vector2DVector2D()); // 2020803306
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Add_VectorFloat()); // 4179200052
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Add_VectorInt()); // 1397161194
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Add_VectorVector()); // 2467650314
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_And_IntInt()); // 2888510436
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Asin()); // 100525512
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Atan()); // 2649356965
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Atan2()); // 1492889994
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_BooleanAND()); // 2338138866
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_BooleanNAND()); // 4105742824
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_BooleanNOR()); // 940242566
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_BooleanOR()); // 2160719398
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_BooleanXOR()); // 67439719
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_BreakColor()); // 3925347474
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_BreakDateTime()); // 3645199532
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_BreakRandomStream()); // 3403779003
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_BreakRotator()); // 1475077954
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_BreakRotIntoAxes()); // 1778741358
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_BreakTimespan()); // 3019151489
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_BreakTransform()); // 2823349884
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_BreakVector()); // 3851705821
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_BreakVector2D()); // 457623338
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_CInterpTo()); // 993976029
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Clamp()); // 3306267101
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_ClampAngle()); // 2484304792
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_ClampAxis()); // 247185069
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_ClampVectorSize()); // 1796343982
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_ClassIsChildOf()); // 3585088458
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_ComposeRotators()); // 3696634375
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_ComposeTransforms()); // 2681152132
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Conv_BoolToByte()); // 3928991251
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Conv_BoolToFloat()); // 1086149570
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Conv_BoolToInt()); // 1874555172
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Conv_ByteToFloat()); // 2503066322
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Conv_ByteToInt()); // 3799352161
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Conv_ColorToLinearColor()); // 943057449
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Conv_FloatToLinearColor()); // 2676472663
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Conv_FloatToVector()); // 3643715824
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Conv_IntToBool()); // 1094928533
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Conv_IntToByte()); // 2285723617
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Conv_IntToFloat()); // 27059881
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Conv_LinearColorToColor()); // 4215766131
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Conv_LinearColorToVector()); // 2778146602
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Conv_RotatorToVector()); // 3729882825
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Conv_Vector2DToVector()); // 4228336955
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Conv_VectorToLinearColor()); // 3411225569
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Conv_VectorToRotator()); // 1826584893
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Conv_VectorToTransform()); // 1872937702
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Conv_VectorToVector2D()); // 1354762597
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_ConvertTransformToRelative()); // 2716063295
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Cos()); // 2557235839
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_CreateVectorFromYawPitch()); // 33554247
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Cross_VectorVector()); // 50367184
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_CrossProduct2D()); // 282339126
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_DateTimeFromIsoString()); // 952603230
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_DateTimeFromString()); // 3170261679
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_DateTimeMaxValue()); // 2516555827
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_DateTimeMinValue()); // 1118074091
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_DaysInMonth()); // 2845164557
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_DaysInYear()); // 322525612
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_DegAcos()); // 580341374
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_DegAsin()); // 2110713705
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_DegAtan()); // 2748064093
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_DegAtan2()); // 3939205118
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_DegCos()); // 1874126525
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_DegreesToRadians()); // 3234047466
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_DegSin()); // 2855990445
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_DegTan()); // 2985894025
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Divide_ByteByte()); // 4056091823
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Divide_FloatFloat()); // 3663091318
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Divide_IntInt()); // 3067646426
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Divide_Vector2DFloat()); // 1718620301
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Divide_VectorFloat()); // 314694397
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Divide_VectorInt()); // 3008586647
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Divide_VectorVector()); // 4080180436
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Dot_VectorVector()); // 3557365715
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_DotProduct2D()); // 2990045027
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Ease()); // 320329837
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_BoolBool()); // 2278099439
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_ByteByte()); // 2306861383
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_ClassClass()); // 76896850
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_DateTimeDateTime()); // 1162721284
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_FloatFloat()); // 3188485990
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_IntInt()); // 3587153657
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_NameName()); // 3872029240
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_ObjectObject()); // 4189386183
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_RotatorRotator()); // 460038507
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_TimespanTimespan()); // 821481603
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_TransformTransform()); // 2695599393
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_VectorVector()); // 3441205948
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Exp()); // 2827546397
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_FCeil()); // 1501046014
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_FClamp()); // 2734769177
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_FFloor()); // 2324436244
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_FindLookAtRotation()); // 2163565013
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_FInterpEaseInOut()); // 1942683600
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_FInterpTo()); // 3998263264
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_FInterpTo_Constant()); // 3371037820
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_FixedTurn()); // 1968767568
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_FMax()); // 1465361899
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_FMin()); // 1961884376
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_FMod()); // 3636159306
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Fraction()); // 610346252
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_FromDays()); // 575681857
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_FromHours()); // 2426722728
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_FromMilliseconds()); // 1084533148
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_FromMinutes()); // 2765013177
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_FromSeconds()); // 903363962
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_FTrunc()); // 2701169777
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_GetAxes()); // 439948137
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_GetDate()); // 546431114
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_GetDay()); // 364060861
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_GetDayOfYear()); // 3002704960
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_GetDays()); // 1594943874
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_GetDirectionVector()); // 3869324074
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_GetDuration()); // 3137446403
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_GetForwardVector()); // 3195435613
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_GetHour()); // 3638580908
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_GetHour12()); // 2636598573
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_GetHours()); // 4206377784
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_GetMaxElement()); // 2782186040
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_GetMillisecond()); // 2481007391
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_GetMilliseconds()); // 220099645
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_GetMinElement()); // 379495867
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_GetMinute()); // 2130604321
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_GetMinutes()); // 3253633855
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_GetMonth()); // 3094836230
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_GetPI()); // 1463781858
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_GetRightVector()); // 2974435056
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_GetSecond()); // 31820310
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_GetSeconds()); // 908752723
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_GetTimeOfDay()); // 1847962897
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_GetTotalDays()); // 1130026980
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_GetTotalHours()); // 2952755838
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_GetTotalMilliseconds()); // 3571688628
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_GetTotalMinutes()); // 2849521217
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_GetTotalSeconds()); // 2247768400
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_GetUpVector()); // 2085922072
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_GetVectorArrayAverage()); // 2559109305
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_GetYawPitchFromVector()); // 2500431488
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_GetYear()); // 2962919900
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Greater_ByteByte()); // 2869482574
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Greater_DateTimeDateTime()); // 2089824008
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Greater_FloatFloat()); // 3907487083
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Greater_IntInt()); // 568228059
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Greater_TimespanTimespan()); // 1020134020
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_GreaterEqual_ByteByte()); // 1213890044
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_GreaterEqual_DateTimeDateTime()); // 4273029734
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_GreaterEqual_FloatFloat()); // 3370905964
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_GreaterEqual_IntInt()); // 394676689
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_GreaterEqual_TimespanTimespan()); // 499673149
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_GreaterGreater_VectorRotator()); // 3100509004
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_GridSnap_Float()); // 441728431
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_HSVToRGB()); // 803116196
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_HSVToRGB_Vector()); // 1047114342
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Hypotenuse()); // 2847421803
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_InRange_FloatFloat()); // 3159245526
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_InverseLerp()); // 4246658280
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_InverseTransformDirection()); // 499727307
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_InverseTransformLocation()); // 4287067991
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_InvertTransform()); // 1693549841
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_IsAfternoon()); // 814232278
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_IsLeapYear()); // 1683237545
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_IsMorning()); // 324912027
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Lerp()); // 163448901
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Less_ByteByte()); // 2579356836
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Less_DateTimeDateTime()); // 4254549584
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Less_FloatFloat()); // 1589047690
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Less_IntInt()); // 4178229201
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Less_TimespanTimespan()); // 2614433758
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_LessEqual_ByteByte()); // 3009497971
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_LessEqual_DateTimeDateTime()); // 2750392046
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_LessEqual_FloatFloat()); // 1427626783
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_LessEqual_IntInt()); // 4130826474
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_LessEqual_TimespanTimespan()); // 877114497
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_LessLess_VectorRotator()); // 406081963
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_LinearColorLerp()); // 876276042
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_LinearColorLerpUsingHSV()); // 2971153467
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_LinePlaneIntersection()); // 2534595141
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_LinePlaneIntersection_OriginNormal()); // 1265055239
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Loge()); // 1776681519
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_MakeColor()); // 3678594199
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_MakeDateTime()); // 1153085696
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_MakePulsatingValue()); // 3151128437
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_MakeRandomStream()); // 4162638014
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_MakeRotationFromAxes()); // 3391513466
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_MakeRotator()); // 2340734450
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_MakeRotFromX()); // 2445478736
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_MakeRotFromXY()); // 3868009229
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_MakeRotFromXZ()); // 4122003382
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_MakeRotFromY()); // 4205958448
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_MakeRotFromYX()); // 124420481
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_MakeRotFromYZ()); // 448543059
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_MakeRotFromZ()); // 572949458
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_MakeRotFromZX()); // 851353369
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_MakeRotFromZY()); // 1012253552
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_MakeTimespan()); // 2435657004
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_MakeTransform()); // 914471345
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_MakeVector()); // 3867149220
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_MakeVector2D()); // 3897882761
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_MapRangeClamped()); // 3296900480
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_MapRangeUnclamped()); // 902354848
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Max()); // 1655673595
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_MaxOfByteArray()); // 3269006834
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_MaxOfFloatArray()); // 3315092400
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_MaxOfIntArray()); // 416518425
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Min()); // 2750627124
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_MinimumAreaRectangle()); // 2754507142
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_MinOfByteArray()); // 3960206174
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_MinOfFloatArray()); // 3589703432
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_MinOfIntArray()); // 961189713
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_MirrorVectorByNormal()); // 3768722794
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Multiply_ByteByte()); // 3193368016
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Multiply_FloatFloat()); // 2311557830
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Multiply_IntFloat()); // 2892118758
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Multiply_IntInt()); // 3694526496
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Multiply_LinearColorFloat()); // 535932979
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Multiply_LinearColorLinearColor()); // 1147045698
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Multiply_RotatorFloat()); // 3077391090
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Multiply_RotatorInt()); // 2216871907
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Multiply_TimespanFloat()); // 2260722943
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Multiply_Vector2DFloat()); // 4243758200
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Multiply_VectorFloat()); // 1005247567
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Multiply_VectorInt()); // 3229252493
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Multiply_VectorVector()); // 304655814
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_MultiplyByPi()); // 2371663029
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_MultiplyMultiply_FloatFloat()); // 1453723973
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_NearlyEqual_FloatFloat()); // 4191789853
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_NearlyEqual_TransformTransform()); // 4056120384
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_NegateRotator()); // 1218039157
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_NegateVector()); // 1170704498
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Normal()); // 2693070080
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Normal2D()); // 879794746
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_NormalizeAxis()); // 3281588355
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_NormalizedDeltaRotator()); // 3985602039
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_NormalizeToRange()); // 1234975920
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Not_PreBool()); // 449189299
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_NotEqual_BoolBool()); // 4057319544
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_NotEqual_ByteByte()); // 931863170
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_NotEqual_ClassClass()); // 3275183907
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_NotEqual_DateTimeDateTime()); // 3587545857
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_NotEqual_FloatFloat()); // 3519317273
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_NotEqual_IntInt()); // 431843031
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_NotEqual_NameName()); // 3741111513
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_NotEqual_ObjectObject()); // 3547781293
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_NotEqual_RotatorRotator()); // 708354518
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_NotEqual_TimespanTimespan()); // 4208992180
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_NotEqual_VectorVector()); // 2119564453
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Now()); // 1164680679
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Or_IntInt()); // 310361999
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Percent_ByteByte()); // 1176967770
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Percent_FloatFloat()); // 688894855
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Percent_IntInt()); // 3625913417
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_PointsAreCoplanar()); // 3161393502
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_ProjectPointOnToPlane()); // 4086892587
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_ProjectVectorOnToPlane()); // 3345207579
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_ProjectVectorOnToVector()); // 325391073
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_RadiansToDegrees()); // 4262297640
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_RandomBool()); // 905914721
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_RandomBoolFromStream()); // 195990582
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_RandomFloat()); // 4028898813
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_RandomFloatFromStream()); // 336334245
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_RandomFloatInRange()); // 1956040210
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_RandomFloatInRangeFromStream()); // 3955235826
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_RandomInteger()); // 4054203436
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_RandomIntegerFromStream()); // 4248745893
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_RandomIntegerInRange()); // 4248124734
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_RandomIntegerInRangeFromStream()); // 3908404816
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_RandomPointInBoundingBox()); // 1303783289
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_RandomRotator()); // 2199944644
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_RandomRotatorFromStream()); // 2289191361
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_RandomUnitVector()); // 482524545
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_RandomUnitVectorFromStream()); // 2814246974
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_RandomUnitVectorInCone()); // 3084831358
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_RandomUnitVectorInConeWithYawAndPitch()); // 942527828
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_REase()); // 1530520026
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_ResetRandomStream()); // 3936926598
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_RGBToHSV()); // 2497572760
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_RGBToHSV_Vector()); // 138532408
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_RInterpTo()); // 137533354
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_RInterpTo_Constant()); // 3681099600
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_RLerp()); // 4272131016
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_RotateAngleAxis()); // 51334089
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_RotatorFromAxisAndAngle()); // 3288862207
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Round()); // 3989462324
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_SeedRandomStream()); // 1215383840
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_SelectClass()); // 2744036992
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_SelectColor()); // 4257144974
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_SelectFloat()); // 211768669
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_SelectInt()); // 1741551137
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_SelectObject()); // 1503125029
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_SelectRotator()); // 1522691297
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_SelectString()); // 1421435487
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_SelectTransform()); // 753992619
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_SelectVector()); // 3326340737
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_SetRandomStreamSeed()); // 948662683
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_SignOfFloat()); // 715130431
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_SignOfInteger()); // 1738401283
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Sin()); // 206051349
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Sqrt()); // 2720384456
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Square()); // 3174875341
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Subtract_ByteByte()); // 825669463
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Subtract_DateTimeDateTime()); // 1900990784
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Subtract_DateTimeTimespan()); // 2378210011
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Subtract_FloatFloat()); // 172593229
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Subtract_IntInt()); // 1195493227
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Subtract_TimespanTimespan()); // 3367680537
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Subtract_Vector2DFloat()); // 1386161795
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Subtract_Vector2DVector2D()); // 1532923002
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Subtract_VectorFloat()); // 2978211710
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Subtract_VectorInt()); // 3353031449
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Subtract_VectorVector()); // 3002557988
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Tan()); // 3613101641
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_TEase()); // 3216918794
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_TimespanFromString()); // 2349220865
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_TimespanMaxValue()); // 4226092897
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_TimespanMinValue()); // 3048699730
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_TimespanRatio()); // 3232042408
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_TimespanZeroValue()); // 1927254007
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_TInterpTo()); // 959982023
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_TLerp()); // 4004704466
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Today()); // 801056751
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_TransformDirection()); // 4125959951
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_TransformLocation()); // 2690011940
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_UtcNow()); // 4140306876
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_VEase()); // 1932742157
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Vector2DInterpTo()); // 442864773
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Vector2DInterpTo_Constant()); // 2780562698
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_VInterpTo()); // 1294655391
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_VInterpTo_Constant()); // 1868498404
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_VLerp()); // 665241799
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_VSize()); // 2285346439
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_VSize2D()); // 3013798200
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_VSize2DSquared()); // 3218085920
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_VSizeSquared()); // 55926655
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetMathLibrary_Xor_IntInt()); // 1300442874
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Kismet/KismetMathLibrary.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetMathLibrary.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UKismetMathLibrary(Z_Construct_UClass_UKismetMathLibrary, TEXT("UKismetMathLibrary"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UKismetMathLibrary);
	UFunction* Z_Construct_UFunction_UKismetNodeHelperLibrary_BitIsMarked()
	{
		struct KismetNodeHelperLibrary_eventBitIsMarked_Parms
		{
			int32 Data;
			int32 Index;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetNodeHelperLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BitIsMarked"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(KismetNodeHelperLibrary_eventBitIsMarked_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetNodeHelperLibrary_eventBitIsMarked_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetNodeHelperLibrary_eventBitIsMarked_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetNodeHelperLibrary_eventBitIsMarked_Parms), sizeof(bool), true);
			UProperty* NewProp_Index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Index"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Index, KismetNodeHelperLibrary_eventBitIsMarked_Parms), 0x0000000000000080);
			UProperty* NewProp_Data = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Data"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Data, KismetNodeHelperLibrary_eventBitIsMarked_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("TRUE"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetNodeHelperLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns whether the bit at index \"Index\" is set or not in the data\n\n@param Data - The integer containing the bits that are being tested against\n@param Index - The bit index into the Data that we are inquiring\n@return  - Whether the bit at index \"Index\" is set or not"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetNodeHelperLibrary_ClearAllBits()
	{
		struct KismetNodeHelperLibrary_eventClearAllBits_Parms
		{
			int32 Data;
		};
		UObject* Outer=Z_Construct_UClass_UKismetNodeHelperLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ClearAllBits"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(KismetNodeHelperLibrary_eventClearAllBits_Parms));
			UProperty* NewProp_Data = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Data"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Data, KismetNodeHelperLibrary_eventClearAllBits_Parms), 0x0000000000000180);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("TRUE"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetNodeHelperLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Clears all of the bit in the data\n\n@param Data - The integer containing the bits that are being cleared"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetNodeHelperLibrary_ClearBit()
	{
		struct KismetNodeHelperLibrary_eventClearBit_Parms
		{
			int32 Data;
			int32 Index;
		};
		UObject* Outer=Z_Construct_UClass_UKismetNodeHelperLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ClearBit"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(KismetNodeHelperLibrary_eventClearBit_Parms));
			UProperty* NewProp_Index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Index"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Index, KismetNodeHelperLibrary_eventClearBit_Parms), 0x0000000000000080);
			UProperty* NewProp_Data = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Data"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Data, KismetNodeHelperLibrary_eventClearBit_Parms), 0x0000000000000180);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("TRUE"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetNodeHelperLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Clears the bit at index \"Index\" in the data\n\n@param Data - The integer containing the bits that are being cleared\n@param Index - The bit index into the Data that we are clearing"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetNodeHelperLibrary_GetEnumeratorName()
	{
		struct KismetNodeHelperLibrary_eventGetEnumeratorName_Parms
		{
			const UEnum* Enum;
			uint8 EnumeratorValue;
			FName ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetNodeHelperLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetEnumeratorName"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetNodeHelperLibrary_eventGetEnumeratorName_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(ReturnValue, KismetNodeHelperLibrary_eventGetEnumeratorName_Parms), 0x0000000000000580);
			UProperty* NewProp_EnumeratorValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("EnumeratorValue"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(EnumeratorValue, KismetNodeHelperLibrary_eventGetEnumeratorName_Parms), 0x0000000000000080);
			UProperty* NewProp_Enum = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Enum"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Enum, KismetNodeHelperLibrary_eventGetEnumeratorName_Parms), 0x0000000000000082, UEnum::StaticClass());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("TRUE"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetNodeHelperLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets enumerator name.\n\n@param Enum - Enumeration\n@param EnumeratorValue - Value of searched enumeration\n@return - name of the searched enumerator, or NAME_None"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetNodeHelperLibrary_GetEnumeratorUserFriendlyName()
	{
		struct KismetNodeHelperLibrary_eventGetEnumeratorUserFriendlyName_Parms
		{
			const UEnum* Enum;
			uint8 EnumeratorValue;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetNodeHelperLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetEnumeratorUserFriendlyName"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetNodeHelperLibrary_eventGetEnumeratorUserFriendlyName_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, KismetNodeHelperLibrary_eventGetEnumeratorUserFriendlyName_Parms), 0x0000000000000580);
			UProperty* NewProp_EnumeratorValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("EnumeratorValue"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(EnumeratorValue, KismetNodeHelperLibrary_eventGetEnumeratorUserFriendlyName_Parms), 0x0000000000000080);
			UProperty* NewProp_Enum = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Enum"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Enum, KismetNodeHelperLibrary_eventGetEnumeratorUserFriendlyName_Parms), 0x0000000000000082, UEnum::StaticClass());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("TRUE"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetNodeHelperLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets enumerator name as FString. Use DeisplayName when possible.\n\n@param Enum - Enumeration\n@param EnumeratorValue - Value of searched enumeration\n@return - name of the searched enumerator, or NAME_None"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetNodeHelperLibrary_GetFirstUnmarkedBit()
	{
		struct KismetNodeHelperLibrary_eventGetFirstUnmarkedBit_Parms
		{
			int32 Data;
			int32 StartIdx;
			int32 NumBits;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetNodeHelperLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetFirstUnmarkedBit"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(KismetNodeHelperLibrary_eventGetFirstUnmarkedBit_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, KismetNodeHelperLibrary_eventGetFirstUnmarkedBit_Parms), 0x0000000000000580);
			UProperty* NewProp_NumBits = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NumBits"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(NumBits, KismetNodeHelperLibrary_eventGetFirstUnmarkedBit_Parms), 0x0000000000000080);
			UProperty* NewProp_StartIdx = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("StartIdx"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(StartIdx, KismetNodeHelperLibrary_eventGetFirstUnmarkedBit_Parms), 0x0000000000000080);
			UProperty* NewProp_Data = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Data"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Data, KismetNodeHelperLibrary_eventGetFirstUnmarkedBit_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("TRUE"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetNodeHelperLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the first index not already marked starting from a specific index and returns the bit index selected\n\n@param Data - The integer containing the bits that are being set\n@param StartIdx - The index to start looking for an available index from\n@param NumBits - The logical number of bits we want to track\n@return - The index that was selected (returns INDEX_NONE if there was no unmarked bits to choose from)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetNodeHelperLibrary_GetRandomUnmarkedBit()
	{
		struct KismetNodeHelperLibrary_eventGetRandomUnmarkedBit_Parms
		{
			int32 Data;
			int32 StartIdx;
			int32 NumBits;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetNodeHelperLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetRandomUnmarkedBit"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(KismetNodeHelperLibrary_eventGetRandomUnmarkedBit_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, KismetNodeHelperLibrary_eventGetRandomUnmarkedBit_Parms), 0x0000000000000580);
			UProperty* NewProp_NumBits = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NumBits"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(NumBits, KismetNodeHelperLibrary_eventGetRandomUnmarkedBit_Parms), 0x0000000000000080);
			UProperty* NewProp_StartIdx = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("StartIdx"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(StartIdx, KismetNodeHelperLibrary_eventGetRandomUnmarkedBit_Parms), 0x0000000000000080);
			UProperty* NewProp_Data = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Data"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Data, KismetNodeHelperLibrary_eventGetRandomUnmarkedBit_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("TRUE"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetNodeHelperLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets a random not already marked bit and returns the bit index selected\n\n@param Data - The integer containing the bits that are being set\n@param NumBits - The logical number of bits we want to track\n@return - The index that was selected (returns INDEX_NONE if there was no unmarked bits to choose from)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetNodeHelperLibrary_GetUnmarkedBit()
	{
		struct KismetNodeHelperLibrary_eventGetUnmarkedBit_Parms
		{
			int32 Data;
			int32 StartIdx;
			int32 NumBits;
			bool bRandom;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetNodeHelperLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetUnmarkedBit"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(KismetNodeHelperLibrary_eventGetUnmarkedBit_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, KismetNodeHelperLibrary_eventGetUnmarkedBit_Parms), 0x0000000000000580);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bRandom, KismetNodeHelperLibrary_eventGetUnmarkedBit_Parms, bool);
			UProperty* NewProp_bRandom = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bRandom"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bRandom, KismetNodeHelperLibrary_eventGetUnmarkedBit_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bRandom, KismetNodeHelperLibrary_eventGetUnmarkedBit_Parms), sizeof(bool), true);
			UProperty* NewProp_NumBits = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NumBits"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(NumBits, KismetNodeHelperLibrary_eventGetUnmarkedBit_Parms), 0x0000000000000080);
			UProperty* NewProp_StartIdx = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("StartIdx"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(StartIdx, KismetNodeHelperLibrary_eventGetUnmarkedBit_Parms), 0x0000000000000080);
			UProperty* NewProp_Data = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Data"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Data, KismetNodeHelperLibrary_eventGetUnmarkedBit_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("TRUE"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetNodeHelperLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets an already unmarked bit and returns the bit index selected\n\n@param Data - The integer containing the bits that are being set\n@param StartIdx - The index to start with when determining the selection'\n@param NumBits - The logical number of bits we want to track\n@param bRandom - Whether to select a random index or not\n@return - The index that was selected (returns INDEX_NONE if there was no unmarked bits to choose from)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetNodeHelperLibrary_GetValidIndex()
	{
		struct KismetNodeHelperLibrary_eventGetValidIndex_Parms
		{
			const UEnum* Enum;
			uint8 EnumeratorIndex;
			uint8 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetNodeHelperLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetValidIndex"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetNodeHelperLibrary_eventGetValidIndex_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(ReturnValue, KismetNodeHelperLibrary_eventGetValidIndex_Parms), 0x0000000000000580);
			UProperty* NewProp_EnumeratorIndex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("EnumeratorIndex"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(EnumeratorIndex, KismetNodeHelperLibrary_eventGetValidIndex_Parms), 0x0000000000000080);
			UProperty* NewProp_Enum = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Enum"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Enum, KismetNodeHelperLibrary_eventGetValidIndex_Parms), 0x0000000000000082, UEnum::StaticClass());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("TRUE"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetNodeHelperLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@param Enum - Enumeration\n@param EnumeratorIndex - Input index\n@return - if EnumeratorIndex is valid return EnumeratorIndex, otherwise return MAX value of Enum"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetNodeHelperLibrary_HasMarkedBit()
	{
		struct KismetNodeHelperLibrary_eventHasMarkedBit_Parms
		{
			int32 Data;
			int32 NumBits;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetNodeHelperLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("HasMarkedBit"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(KismetNodeHelperLibrary_eventHasMarkedBit_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetNodeHelperLibrary_eventHasMarkedBit_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetNodeHelperLibrary_eventHasMarkedBit_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetNodeHelperLibrary_eventHasMarkedBit_Parms), sizeof(bool), true);
			UProperty* NewProp_NumBits = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NumBits"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(NumBits, KismetNodeHelperLibrary_eventHasMarkedBit_Parms), 0x0000000000000080);
			UProperty* NewProp_Data = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Data"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Data, KismetNodeHelperLibrary_eventHasMarkedBit_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("TRUE"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetNodeHelperLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns whether there exists a marked bit in the data\n\n@param Data - The data being tested against\n@param NumBits - The logical number of bits we want to track\n@return - Whether there is a bit marked in the data"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetNodeHelperLibrary_HasUnmarkedBit()
	{
		struct KismetNodeHelperLibrary_eventHasUnmarkedBit_Parms
		{
			int32 Data;
			int32 NumBits;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetNodeHelperLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("HasUnmarkedBit"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(KismetNodeHelperLibrary_eventHasUnmarkedBit_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetNodeHelperLibrary_eventHasUnmarkedBit_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetNodeHelperLibrary_eventHasUnmarkedBit_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetNodeHelperLibrary_eventHasUnmarkedBit_Parms), sizeof(bool), true);
			UProperty* NewProp_NumBits = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NumBits"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(NumBits, KismetNodeHelperLibrary_eventHasUnmarkedBit_Parms), 0x0000000000000080);
			UProperty* NewProp_Data = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Data"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Data, KismetNodeHelperLibrary_eventHasUnmarkedBit_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("TRUE"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetNodeHelperLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns whether there exists an unmarked bit in the data\n\n@param Data - The data being tested against\n@param NumBits - The logical number of bits we want to track\n@return - Whether there is a bit not marked in the data"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetNodeHelperLibrary_MarkBit()
	{
		struct KismetNodeHelperLibrary_eventMarkBit_Parms
		{
			int32 Data;
			int32 Index;
		};
		UObject* Outer=Z_Construct_UClass_UKismetNodeHelperLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MarkBit"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(KismetNodeHelperLibrary_eventMarkBit_Parms));
			UProperty* NewProp_Index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Index"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Index, KismetNodeHelperLibrary_eventMarkBit_Parms), 0x0000000000000080);
			UProperty* NewProp_Data = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Data"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Data, KismetNodeHelperLibrary_eventMarkBit_Parms), 0x0000000000000180);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("TRUE"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetNodeHelperLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the bit at index \"Index\" in the data\n\n@param Data - The integer containing the bits that are being set\n@param Index - The bit index into the Data that we are setting"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UKismetNodeHelperLibrary_NoRegister()
	{
		return UKismetNodeHelperLibrary::StaticClass();
	}
	UClass* Z_Construct_UClass_UKismetNodeHelperLibrary()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBlueprintFunctionLibrary();
			Z_Construct_UPackage_Engine();
			OuterClass = UKismetNodeHelperLibrary::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_UKismetNodeHelperLibrary_BitIsMarked());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetNodeHelperLibrary_ClearAllBits());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetNodeHelperLibrary_ClearBit());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetNodeHelperLibrary_GetEnumeratorName());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetNodeHelperLibrary_GetEnumeratorUserFriendlyName());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetNodeHelperLibrary_GetFirstUnmarkedBit());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetNodeHelperLibrary_GetRandomUnmarkedBit());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetNodeHelperLibrary_GetUnmarkedBit());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetNodeHelperLibrary_GetValidIndex());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetNodeHelperLibrary_HasMarkedBit());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetNodeHelperLibrary_HasUnmarkedBit());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetNodeHelperLibrary_MarkBit());

				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetNodeHelperLibrary_BitIsMarked()); // 266899714
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetNodeHelperLibrary_ClearAllBits()); // 1146482494
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetNodeHelperLibrary_ClearBit()); // 353815513
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetNodeHelperLibrary_GetEnumeratorName()); // 3442008290
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetNodeHelperLibrary_GetEnumeratorUserFriendlyName()); // 2992305617
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetNodeHelperLibrary_GetFirstUnmarkedBit()); // 584332117
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetNodeHelperLibrary_GetRandomUnmarkedBit()); // 2659001873
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetNodeHelperLibrary_GetUnmarkedBit()); // 2855304569
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetNodeHelperLibrary_GetValidIndex()); // 970257264
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetNodeHelperLibrary_HasMarkedBit()); // 1612794137
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetNodeHelperLibrary_HasUnmarkedBit()); // 2635782444
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetNodeHelperLibrary_MarkBit()); // 1008439612
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Kismet/KismetNodeHelperLibrary.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetNodeHelperLibrary.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UKismetNodeHelperLibrary(Z_Construct_UClass_UKismetNodeHelperLibrary, TEXT("UKismetNodeHelperLibrary"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UKismetNodeHelperLibrary);
	UFunction* Z_Construct_UFunction_UKismetStringLibrary_BuildString_Bool()
	{
		struct KismetStringLibrary_eventBuildString_Bool_Parms
		{
			FString AppendTo;
			FString Prefix;
			bool InBool;
			FString Suffix;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetStringLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BuildString_Bool"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetStringLibrary_eventBuildString_Bool_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, KismetStringLibrary_eventBuildString_Bool_Parms), 0x0000000000000580);
			UProperty* NewProp_Suffix = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Suffix"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Suffix, KismetStringLibrary_eventBuildString_Bool_Parms), 0x0000000000000080);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(InBool, KismetStringLibrary_eventBuildString_Bool_Parms, bool);
			UProperty* NewProp_InBool = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InBool"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(InBool, KismetStringLibrary_eventBuildString_Bool_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(InBool, KismetStringLibrary_eventBuildString_Bool_Parms), sizeof(bool), true);
			UProperty* NewProp_Prefix = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Prefix"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Prefix, KismetStringLibrary_eventBuildString_Bool_Parms), 0x0000000000000080);
			UProperty* NewProp_AppendTo = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AppendTo"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(AppendTo, KismetStringLibrary_eventBuildString_Bool_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|String"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("BuildString (boolean)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetStringLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Converts a boolean->string, creating a new string in the form AppendTo+Prefix+InBool+Suffix\n@param AppendTo - An existing string to use as the start of the conversion string\n@param Prefix - A string to use as a prefix, after the AppendTo string\n@param InBool - The bool value to convert. Will add \"true\" or \"false\" to the conversion string\n@param Suffix - A suffix to append to the end of the conversion string\n@return A new string built from the passed parameters"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetStringLibrary_BuildString_Color()
	{
		struct KismetStringLibrary_eventBuildString_Color_Parms
		{
			FString AppendTo;
			FString Prefix;
			FLinearColor InColor;
			FString Suffix;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetStringLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BuildString_Color"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetStringLibrary_eventBuildString_Color_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, KismetStringLibrary_eventBuildString_Color_Parms), 0x0000000000000580);
			UProperty* NewProp_Suffix = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Suffix"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Suffix, KismetStringLibrary_eventBuildString_Color_Parms), 0x0000000000000080);
			UProperty* NewProp_InColor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InColor, KismetStringLibrary_eventBuildString_Color_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_Prefix = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Prefix"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Prefix, KismetStringLibrary_eventBuildString_Color_Parms), 0x0000000000000080);
			UProperty* NewProp_AppendTo = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AppendTo"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(AppendTo, KismetStringLibrary_eventBuildString_Color_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|String"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("BuildString (color)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetStringLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Converts a color->string, creating a new string in the form AppendTo+Prefix+InColor+Suffix\n@param AppendTo - An existing string to use as the start of the conversion string\n@param Prefix - A string to use as a prefix, after the AppendTo string\n@param InColor - The linear color value to convert. Uses the standard ToString conversion\n@param Suffix - A suffix to append to the end of the conversion string\n@return A new string built from the passed parameters"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetStringLibrary_BuildString_Float()
	{
		struct KismetStringLibrary_eventBuildString_Float_Parms
		{
			FString AppendTo;
			FString Prefix;
			float InFloat;
			FString Suffix;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetStringLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BuildString_Float"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetStringLibrary_eventBuildString_Float_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, KismetStringLibrary_eventBuildString_Float_Parms), 0x0000000000000580);
			UProperty* NewProp_Suffix = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Suffix"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Suffix, KismetStringLibrary_eventBuildString_Float_Parms), 0x0000000000000080);
			UProperty* NewProp_InFloat = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InFloat"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InFloat, KismetStringLibrary_eventBuildString_Float_Parms), 0x0000000000000080);
			UProperty* NewProp_Prefix = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Prefix"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Prefix, KismetStringLibrary_eventBuildString_Float_Parms), 0x0000000000000080);
			UProperty* NewProp_AppendTo = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AppendTo"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(AppendTo, KismetStringLibrary_eventBuildString_Float_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|String"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("BuildString (float)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetStringLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Converts a float->string, create a new string in the form AppendTo+Prefix+InFloat+Suffix\n@param AppendTo - An existing string to use as the start of the conversion string\n@param Prefix - A string to use as a prefix, after the AppendTo string\n@param InFloat - The float value to convert\n@param Suffix - A suffix to append to the end of the conversion string\n@return A new string built from the passed parameters"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetStringLibrary_BuildString_Int()
	{
		struct KismetStringLibrary_eventBuildString_Int_Parms
		{
			FString AppendTo;
			FString Prefix;
			int32 InInt;
			FString Suffix;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetStringLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BuildString_Int"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetStringLibrary_eventBuildString_Int_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, KismetStringLibrary_eventBuildString_Int_Parms), 0x0000000000000580);
			UProperty* NewProp_Suffix = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Suffix"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Suffix, KismetStringLibrary_eventBuildString_Int_Parms), 0x0000000000000080);
			UProperty* NewProp_InInt = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InInt"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(InInt, KismetStringLibrary_eventBuildString_Int_Parms), 0x0000000000000080);
			UProperty* NewProp_Prefix = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Prefix"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Prefix, KismetStringLibrary_eventBuildString_Int_Parms), 0x0000000000000080);
			UProperty* NewProp_AppendTo = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AppendTo"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(AppendTo, KismetStringLibrary_eventBuildString_Int_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|String"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("BuildString (int)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetStringLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Converts a int->string, creating a new string in the form AppendTo+Prefix+InInt+Suffix\n@param AppendTo - An existing string to use as the start of the conversion string\n@param Prefix - A string to use as a prefix, after the AppendTo string\n@param InInt - The int value to convert\n@param Suffix - A suffix to append to the end of the conversion string\n@return A new string built from the passed parameters"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetStringLibrary_BuildString_Name()
	{
		struct KismetStringLibrary_eventBuildString_Name_Parms
		{
			FString AppendTo;
			FString Prefix;
			FName InName;
			FString Suffix;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetStringLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BuildString_Name"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetStringLibrary_eventBuildString_Name_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, KismetStringLibrary_eventBuildString_Name_Parms), 0x0000000000000580);
			UProperty* NewProp_Suffix = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Suffix"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Suffix, KismetStringLibrary_eventBuildString_Name_Parms), 0x0000000000000080);
			UProperty* NewProp_InName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(InName, KismetStringLibrary_eventBuildString_Name_Parms), 0x0000000000000080);
			UProperty* NewProp_Prefix = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Prefix"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Prefix, KismetStringLibrary_eventBuildString_Name_Parms), 0x0000000000000080);
			UProperty* NewProp_AppendTo = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AppendTo"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(AppendTo, KismetStringLibrary_eventBuildString_Name_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|String"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("BuildString (name)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetStringLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Converts a color->string, creating a new string in the form AppendTo+Prefix+InName+Suffix\n@param AppendTo - An existing string to use as the start of the conversion string\n@param Prefix - A string to use as a prefix, after the AppendTo string\n@param InName - The name value to convert\n@param Suffix - A suffix to append to the end of the conversion string\n@return A new string built from the passed parameters"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetStringLibrary_BuildString_Object()
	{
		struct KismetStringLibrary_eventBuildString_Object_Parms
		{
			FString AppendTo;
			FString Prefix;
			UObject* InObj;
			FString Suffix;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetStringLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BuildString_Object"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetStringLibrary_eventBuildString_Object_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, KismetStringLibrary_eventBuildString_Object_Parms), 0x0000000000000580);
			UProperty* NewProp_Suffix = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Suffix"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Suffix, KismetStringLibrary_eventBuildString_Object_Parms), 0x0000000000000080);
			UProperty* NewProp_InObj = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InObj"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(InObj, KismetStringLibrary_eventBuildString_Object_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			UProperty* NewProp_Prefix = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Prefix"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Prefix, KismetStringLibrary_eventBuildString_Object_Parms), 0x0000000000000080);
			UProperty* NewProp_AppendTo = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AppendTo"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(AppendTo, KismetStringLibrary_eventBuildString_Object_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|String"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("BuildString (object)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetStringLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Converts a object->string, creating a new string in the form AppendTo+Prefix+object name+Suffix\n@param AppendTo - An existing string to use as the start of the conversion string\n@param Prefix - A string to use as a prefix, after the AppendTo string\n@param InObj - The object to convert. Will insert the name of the object into the conversion string\n@param Suffix - A suffix to append to the end of the conversion string\n@return A new string built from the passed parameters"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetStringLibrary_BuildString_Rotator()
	{
		struct KismetStringLibrary_eventBuildString_Rotator_Parms
		{
			FString AppendTo;
			FString Prefix;
			FRotator InRot;
			FString Suffix;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetStringLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BuildString_Rotator"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetStringLibrary_eventBuildString_Rotator_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, KismetStringLibrary_eventBuildString_Rotator_Parms), 0x0000000000000580);
			UProperty* NewProp_Suffix = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Suffix"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Suffix, KismetStringLibrary_eventBuildString_Rotator_Parms), 0x0000000000000080);
			UProperty* NewProp_InRot = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InRot"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InRot, KismetStringLibrary_eventBuildString_Rotator_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_Prefix = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Prefix"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Prefix, KismetStringLibrary_eventBuildString_Rotator_Parms), 0x0000000000000080);
			UProperty* NewProp_AppendTo = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AppendTo"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(AppendTo, KismetStringLibrary_eventBuildString_Rotator_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|String"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("BuildString (rotator)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetStringLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Converts a rotator->string, creating a new string in the form AppendTo+Prefix+InRot+Suffix\n@param AppendTo - An existing string to use as the start of the conversion string\n@param Prefix - A string to use as a prefix, after the AppendTo string\n@param InRot - The rotator value to convert. Uses the standard ToString conversion\n@param Suffix - A suffix to append to the end of the conversion string\n@return A new string built from the passed parameters"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetStringLibrary_BuildString_Vector()
	{
		struct KismetStringLibrary_eventBuildString_Vector_Parms
		{
			FString AppendTo;
			FString Prefix;
			FVector InVector;
			FString Suffix;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetStringLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BuildString_Vector"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetStringLibrary_eventBuildString_Vector_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, KismetStringLibrary_eventBuildString_Vector_Parms), 0x0000000000000580);
			UProperty* NewProp_Suffix = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Suffix"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Suffix, KismetStringLibrary_eventBuildString_Vector_Parms), 0x0000000000000080);
			UProperty* NewProp_InVector = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InVector"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InVector, KismetStringLibrary_eventBuildString_Vector_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Prefix = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Prefix"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Prefix, KismetStringLibrary_eventBuildString_Vector_Parms), 0x0000000000000080);
			UProperty* NewProp_AppendTo = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AppendTo"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(AppendTo, KismetStringLibrary_eventBuildString_Vector_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|String"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("BuildString (vector)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetStringLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Converts a vector->string, creating a new string in the form AppendTo+Prefix+InVector+Suffix\n@param AppendTo - An existing string to use as the start of the conversion string\n@param Prefix - A string to use as a prefix, after the AppendTo string\n@param InVector - The vector value to convert. Uses the standard FVector::ToString conversion\n@param Suffix - A suffix to append to the end of the conversion string\n@return A new string built from the passed parameters"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetStringLibrary_BuildString_Vector2d()
	{
		struct KismetStringLibrary_eventBuildString_Vector2d_Parms
		{
			FString AppendTo;
			FString Prefix;
			FVector2D InVector2d;
			FString Suffix;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetStringLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BuildString_Vector2d"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetStringLibrary_eventBuildString_Vector2d_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, KismetStringLibrary_eventBuildString_Vector2d_Parms), 0x0000000000000580);
			UProperty* NewProp_Suffix = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Suffix"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Suffix, KismetStringLibrary_eventBuildString_Vector2d_Parms), 0x0000000000000080);
			UProperty* NewProp_InVector2d = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InVector2d"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InVector2d, KismetStringLibrary_eventBuildString_Vector2d_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_Prefix = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Prefix"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Prefix, KismetStringLibrary_eventBuildString_Vector2d_Parms), 0x0000000000000080);
			UProperty* NewProp_AppendTo = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AppendTo"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(AppendTo, KismetStringLibrary_eventBuildString_Vector2d_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|String"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("BuildString (vector2d)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetStringLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Converts a vector2d->string, creating a new string in the form AppendTo+Prefix+InVector2d+Suffix\n@param AppendTo - An existing string to use as the start of the conversion string\n@param Prefix - A string to use as a prefix, after the AppendTo string\n@param InVector2d - The vector2d value to convert. Uses the standard FVector2D::ToString conversion\n@param Suffix - A suffix to append to the end of the conversion string\n@return A new string built from the passed parameters"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetStringLibrary_Concat_StrStr()
	{
		struct KismetStringLibrary_eventConcat_StrStr_Parms
		{
			FString A;
			FString B;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetStringLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Concat_StrStr"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetStringLibrary_eventConcat_StrStr_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, KismetStringLibrary_eventConcat_StrStr_Parms), 0x0000000000000580);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(B, KismetStringLibrary_eventConcat_StrStr_Parms), 0x0000000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(A, KismetStringLibrary_eventConcat_StrStr_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|String"));
			MetaData->SetValue(ReturnFunction, TEXT("CommutativeAssociativeBinaryOperator"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Append"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetStringLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Concatenates two strings together to make a new string\n@param A - The original string\n@param B - The string to append to A\n@returns A new string which is the concatenation of A+B"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetStringLibrary_Conv_BoolToString()
	{
		struct KismetStringLibrary_eventConv_BoolToString_Parms
		{
			bool InBool;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetStringLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Conv_BoolToString"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetStringLibrary_eventConv_BoolToString_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, KismetStringLibrary_eventConv_BoolToString_Parms), 0x0000000000000580);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(InBool, KismetStringLibrary_eventConv_BoolToString_Parms, bool);
			UProperty* NewProp_InBool = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InBool"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(InBool, KismetStringLibrary_eventConv_BoolToString_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(InBool, KismetStringLibrary_eventConv_BoolToString_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintAutocast"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|String"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("->"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("ToString (boolean)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetStringLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Converts a boolean value to a string, either 'true' or 'false'"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetStringLibrary_Conv_ByteToString()
	{
		struct KismetStringLibrary_eventConv_ByteToString_Parms
		{
			uint8 InByte;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetStringLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Conv_ByteToString"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetStringLibrary_eventConv_ByteToString_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, KismetStringLibrary_eventConv_ByteToString_Parms), 0x0000000000000580);
			UProperty* NewProp_InByte = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InByte"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(InByte, KismetStringLibrary_eventConv_ByteToString_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintAutocast"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|String"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("->"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("ToString (byte)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetStringLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Converts a byte value to a string"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetStringLibrary_Conv_ColorToString()
	{
		struct KismetStringLibrary_eventConv_ColorToString_Parms
		{
			FLinearColor InColor;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetStringLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Conv_ColorToString"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetStringLibrary_eventConv_ColorToString_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, KismetStringLibrary_eventConv_ColorToString_Parms), 0x0000000000000580);
			UProperty* NewProp_InColor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InColor, KismetStringLibrary_eventConv_ColorToString_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FLinearColor());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintAutocast"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|String"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("->"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("ToString (linear color)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetStringLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Converts a linear color value to a string, in the form '(R=,G=,B=,A=)'"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetStringLibrary_Conv_FloatToString()
	{
		struct KismetStringLibrary_eventConv_FloatToString_Parms
		{
			float InFloat;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetStringLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Conv_FloatToString"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetStringLibrary_eventConv_FloatToString_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, KismetStringLibrary_eventConv_FloatToString_Parms), 0x0000000000000580);
			UProperty* NewProp_InFloat = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InFloat"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InFloat, KismetStringLibrary_eventConv_FloatToString_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintAutocast"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|String"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("->"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("ToString (float)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetStringLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Converts a float value to a string"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetStringLibrary_Conv_IntToString()
	{
		struct KismetStringLibrary_eventConv_IntToString_Parms
		{
			int32 InInt;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetStringLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Conv_IntToString"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetStringLibrary_eventConv_IntToString_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, KismetStringLibrary_eventConv_IntToString_Parms), 0x0000000000000580);
			UProperty* NewProp_InInt = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InInt"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(InInt, KismetStringLibrary_eventConv_IntToString_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintAutocast"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|String"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("->"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("ToString (int)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetStringLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Converts an integer value to a string"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetStringLibrary_Conv_NameToString()
	{
		struct KismetStringLibrary_eventConv_NameToString_Parms
		{
			FName InName;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetStringLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Conv_NameToString"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetStringLibrary_eventConv_NameToString_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, KismetStringLibrary_eventConv_NameToString_Parms), 0x0000000000000580);
			UProperty* NewProp_InName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(InName, KismetStringLibrary_eventConv_NameToString_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintAutocast"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|String"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("->"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("ToString (name)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetStringLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Converts a name value to a string"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetStringLibrary_Conv_ObjectToString()
	{
		struct KismetStringLibrary_eventConv_ObjectToString_Parms
		{
			UObject* InObj;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetStringLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Conv_ObjectToString"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetStringLibrary_eventConv_ObjectToString_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, KismetStringLibrary_eventConv_ObjectToString_Parms), 0x0000000000000580);
			UProperty* NewProp_InObj = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InObj"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(InObj, KismetStringLibrary_eventConv_ObjectToString_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintAutocast"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|String"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("->"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("ToString (object)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetStringLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Converts a UObject value to a string by calling the object's GetName method"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetStringLibrary_Conv_RotatorToString()
	{
		struct KismetStringLibrary_eventConv_RotatorToString_Parms
		{
			FRotator InRot;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetStringLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Conv_RotatorToString"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetStringLibrary_eventConv_RotatorToString_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, KismetStringLibrary_eventConv_RotatorToString_Parms), 0x0000000000000580);
			UProperty* NewProp_InRot = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InRot"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InRot, KismetStringLibrary_eventConv_RotatorToString_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintAutocast"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|String"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("->"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("ToString (rotator)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetStringLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Converts a rotator value to a string, in the form 'P= Y= R='"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetStringLibrary_Conv_StringToFloat()
	{
		struct KismetStringLibrary_eventConv_StringToFloat_Parms
		{
			FString InString;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetStringLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Conv_StringToFloat"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetStringLibrary_eventConv_StringToFloat_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetStringLibrary_eventConv_StringToFloat_Parms), 0x0000000000000580);
			UProperty* NewProp_InString = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InString"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(InString, KismetStringLibrary_eventConv_StringToFloat_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintAutocast"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|String"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("->"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("String To Float"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetStringLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Converts a string to a float value"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetStringLibrary_Conv_StringToInt()
	{
		struct KismetStringLibrary_eventConv_StringToInt_Parms
		{
			FString InString;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetStringLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Conv_StringToInt"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetStringLibrary_eventConv_StringToInt_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, KismetStringLibrary_eventConv_StringToInt_Parms), 0x0000000000000580);
			UProperty* NewProp_InString = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InString"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(InString, KismetStringLibrary_eventConv_StringToInt_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintAutocast"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|String"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("->"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("String To Int"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetStringLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Converts a string to a int value"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetStringLibrary_Conv_StringToName()
	{
		struct KismetStringLibrary_eventConv_StringToName_Parms
		{
			FString InString;
			FName ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetStringLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Conv_StringToName"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetStringLibrary_eventConv_StringToName_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(ReturnValue, KismetStringLibrary_eventConv_StringToName_Parms), 0x0000000000000580);
			UProperty* NewProp_InString = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InString"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(InString, KismetStringLibrary_eventConv_StringToName_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintAutocast"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|String"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("->"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("String To Name"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetStringLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Converts a string to a name value"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetStringLibrary_Conv_TransformToString()
	{
		struct KismetStringLibrary_eventConv_TransformToString_Parms
		{
			FTransform InTrans;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetStringLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Conv_TransformToString"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(KismetStringLibrary_eventConv_TransformToString_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, KismetStringLibrary_eventConv_TransformToString_Parms), 0x0000000000000580);
			UProperty* NewProp_InTrans = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InTrans"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InTrans, KismetStringLibrary_eventConv_TransformToString_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FTransform());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintAutocast"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|String"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("->"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("ToString (transform)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetStringLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Converts a transform value to a string, in the form 'Translation: X= Y= Z= Rotation: P= Y= R= Scale: X= Y= Z='"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetStringLibrary_Conv_Vector2dToString()
	{
		struct KismetStringLibrary_eventConv_Vector2dToString_Parms
		{
			FVector2D InVec;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetStringLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Conv_Vector2dToString"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetStringLibrary_eventConv_Vector2dToString_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, KismetStringLibrary_eventConv_Vector2dToString_Parms), 0x0000000000000580);
			UProperty* NewProp_InVec = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InVec"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InVec, KismetStringLibrary_eventConv_Vector2dToString_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintAutocast"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|String"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("->"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("ToString (vector2d)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetStringLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Converts a vector2d value to a string, in the form 'X= Y='"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetStringLibrary_Conv_VectorToString()
	{
		struct KismetStringLibrary_eventConv_VectorToString_Parms
		{
			FVector InVec;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetStringLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Conv_VectorToString"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(KismetStringLibrary_eventConv_VectorToString_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, KismetStringLibrary_eventConv_VectorToString_Parms), 0x0000000000000580);
			UProperty* NewProp_InVec = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InVec"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InVec, KismetStringLibrary_eventConv_VectorToString_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintAutocast"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|String"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("->"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("ToString (Vector)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetStringLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Converts a vector value to a string, in the form 'X= Y= Z='"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetStringLibrary_CullArray()
	{
		struct KismetStringLibrary_eventCullArray_Parms
		{
			FString SourceString;
			TArray<FString> InArray;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetStringLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CullArray"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(KismetStringLibrary_eventCullArray_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, KismetStringLibrary_eventCullArray_Parms), 0x0000000000000580);
			UProperty* NewProp_InArray = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InArray"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(InArray, KismetStringLibrary_eventCullArray_Parms), 0x0000000000000180);
			UProperty* NewProp_InArray_Inner = new(EC_InternalUseOnlyConstructor, NewProp_InArray, TEXT("InArray"), RF_Public|RF_Transient|RF_Native) UStrProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_SourceString = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SourceString"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(SourceString, KismetStringLibrary_eventCullArray_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|String"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetStringLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Takes an array of strings and removes any zero length entries.\n\n@param       InArray The array to cull\n\n@return      The number of elements left in InArray"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetStringLibrary_EndsWith()
	{
		struct KismetStringLibrary_eventEndsWith_Parms
		{
			FString SourceString;
			FString InSuffix;
			TEnumAsByte<ESearchCase::Type> SearchCase;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetStringLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EndsWith"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetStringLibrary_eventEndsWith_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetStringLibrary_eventEndsWith_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetStringLibrary_eventEndsWith_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetStringLibrary_eventEndsWith_Parms), sizeof(bool), true);
			UProperty* NewProp_SearchCase = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SearchCase"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(SearchCase, KismetStringLibrary_eventEndsWith_Parms), 0x0000000000000080, Z_Construct_UEnum_CoreUObject_ESearchCase());
			UProperty* NewProp_InSuffix = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InSuffix"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(InSuffix, KismetStringLibrary_eventEndsWith_Parms), 0x0000000000000080);
			UProperty* NewProp_SourceString = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SourceString"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(SourceString, KismetStringLibrary_eventEndsWith_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|String"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_SearchCase"), TEXT("IgnoreCase"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetStringLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Test whether this string ends with given string.\n\n@param SearchCase            Indicates whether the search is case sensitive or not ( defaults to ESearchCase::IgnoreCase )\n@return true if this string ends with specified text, false otherwise"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetStringLibrary_EqualEqual_StriStri()
	{
		struct KismetStringLibrary_eventEqualEqual_StriStri_Parms
		{
			FString A;
			FString B;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetStringLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EqualEqual_StriStri"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetStringLibrary_eventEqualEqual_StriStri_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetStringLibrary_eventEqualEqual_StriStri_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetStringLibrary_eventEqualEqual_StriStri_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetStringLibrary_eventEqualEqual_StriStri_Parms), sizeof(bool), true);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(B, KismetStringLibrary_eventEqualEqual_StriStri_Parms), 0x0000000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(A, KismetStringLibrary_eventEqualEqual_StriStri_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|String"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("=="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Equal, Case Insensitive (string)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetStringLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Test if the input strings are equal (A == B), ignoring case\n@param A - The string to compare against\n@param B - The string to compare\n@returns True if the strings are equal, false otherwise"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetStringLibrary_EqualEqual_StrStr()
	{
		struct KismetStringLibrary_eventEqualEqual_StrStr_Parms
		{
			FString A;
			FString B;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetStringLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EqualEqual_StrStr"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetStringLibrary_eventEqualEqual_StrStr_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetStringLibrary_eventEqualEqual_StrStr_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetStringLibrary_eventEqualEqual_StrStr_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetStringLibrary_eventEqualEqual_StrStr_Parms), sizeof(bool), true);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(B, KismetStringLibrary_eventEqualEqual_StrStr_Parms), 0x0000000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(A, KismetStringLibrary_eventEqualEqual_StrStr_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|String"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("=="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Equal (string)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetStringLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Test if the input strings are equal (A == B)\n@param A - The string to compare against\n@param B - The string to compare\n@returns True if the strings are equal, false otherwise"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetStringLibrary_FindSubstring()
	{
		struct KismetStringLibrary_eventFindSubstring_Parms
		{
			FString SearchIn;
			FString Substring;
			bool bUseCase;
			bool bSearchFromEnd;
			int32 StartPosition;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetStringLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FindSubstring"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetStringLibrary_eventFindSubstring_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, KismetStringLibrary_eventFindSubstring_Parms), 0x0000000000000580);
			UProperty* NewProp_StartPosition = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("StartPosition"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(StartPosition, KismetStringLibrary_eventFindSubstring_Parms), 0x0000000000000080);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSearchFromEnd, KismetStringLibrary_eventFindSubstring_Parms, bool);
			UProperty* NewProp_bSearchFromEnd = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bSearchFromEnd"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSearchFromEnd, KismetStringLibrary_eventFindSubstring_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bSearchFromEnd, KismetStringLibrary_eventFindSubstring_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseCase, KismetStringLibrary_eventFindSubstring_Parms, bool);
			UProperty* NewProp_bUseCase = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bUseCase"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseCase, KismetStringLibrary_eventFindSubstring_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bUseCase, KismetStringLibrary_eventFindSubstring_Parms), sizeof(bool), true);
			UProperty* NewProp_Substring = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Substring"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Substring, KismetStringLibrary_eventFindSubstring_Parms), 0x0000000000000080);
			UProperty* NewProp_SearchIn = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SearchIn"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(SearchIn, KismetStringLibrary_eventFindSubstring_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|String"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bSearchFromEnd"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bUseCase"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_StartPosition"), TEXT("-1"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetStringLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Finds the starting index of a substring in the a specified string\n@param SearchIn The string to search within\n@param Substring The string to look for in the SearchIn string\n@param bUseCase Whether or not to be case-sensitive\n@param bSearchFromEnd Whether or not to start the search from the end of the string instead of the beginning\n@param StartPosition The position to start the search from\n@return The index (starting from 0 if bSearchFromEnd is false) of the first occurence of the substring"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetStringLibrary_GetCharacterArrayFromString()
	{
		struct KismetStringLibrary_eventGetCharacterArrayFromString_Parms
		{
			FString SourceString;
			TArray<FString> ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetStringLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetCharacterArrayFromString"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetStringLibrary_eventGetCharacterArrayFromString_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ReturnValue, KismetStringLibrary_eventGetCharacterArrayFromString_Parms), 0x0000000000000580);
			UProperty* NewProp_ReturnValue_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ReturnValue, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStrProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_SourceString = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SourceString"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(SourceString, KismetStringLibrary_eventGetCharacterArrayFromString_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|String"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetStringLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns an array that contains one entry for each character in SourceString\n@param        SourceString    The string to break apart into characters\n@return       An array containing one entry for each character in SourceString"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetStringLibrary_GetCharacterAsNumber()
	{
		struct KismetStringLibrary_eventGetCharacterAsNumber_Parms
		{
			FString SourceString;
			int32 Index;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetStringLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetCharacterAsNumber"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetStringLibrary_eventGetCharacterAsNumber_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, KismetStringLibrary_eventGetCharacterAsNumber_Parms), 0x0000000000000580);
			UProperty* NewProp_Index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Index"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Index, KismetStringLibrary_eventGetCharacterAsNumber_Parms), 0x0000000000000080);
			UProperty* NewProp_SourceString = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SourceString"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(SourceString, KismetStringLibrary_eventGetCharacterAsNumber_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|String"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Index"), TEXT("0"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetStringLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets a single character from the string (as an integer)\n@param SourceString - The string to convert\n@param Index - Location of the character whose value is required\n@return The integer value of the character or 0 if index is out of range"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetStringLibrary_GetSubstring()
	{
		struct KismetStringLibrary_eventGetSubstring_Parms
		{
			FString SourceString;
			int32 StartIndex;
			int32 Length;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetStringLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetSubstring"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetStringLibrary_eventGetSubstring_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, KismetStringLibrary_eventGetSubstring_Parms), 0x0000000000000580);
			UProperty* NewProp_Length = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Length"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Length, KismetStringLibrary_eventGetSubstring_Parms), 0x0000000000000080);
			UProperty* NewProp_StartIndex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("StartIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(StartIndex, KismetStringLibrary_eventGetSubstring_Parms), 0x0000000000000080);
			UProperty* NewProp_SourceString = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SourceString"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(SourceString, KismetStringLibrary_eventGetSubstring_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|String"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Length"), TEXT("1"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_StartIndex"), TEXT("0"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetStringLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns a substring from the string starting at the specified position\n@param SourceString - The string to get the substring from\n@param StartIndex - The location in SourceString to use as the start of the substring\n@param Length The length of the requested substring\n\n@return The requested substring"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetStringLibrary_IsNumeric()
	{
		struct KismetStringLibrary_eventIsNumeric_Parms
		{
			FString SourceString;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetStringLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsNumeric"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetStringLibrary_eventIsNumeric_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetStringLibrary_eventIsNumeric_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetStringLibrary_eventIsNumeric_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetStringLibrary_eventIsNumeric_Parms), sizeof(bool), true);
			UProperty* NewProp_SourceString = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SourceString"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(SourceString, KismetStringLibrary_eventIsNumeric_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|String"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetStringLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("* Checks if a string contains only numeric characters\n* @param       SourceString    The string to check\n* @return true if the string only contains numeric characters"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetStringLibrary_JoinStringArray()
	{
		struct KismetStringLibrary_eventJoinStringArray_Parms
		{
			TArray<FString> SourceArray;
			FString Separator;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetStringLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("JoinStringArray"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(KismetStringLibrary_eventJoinStringArray_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, KismetStringLibrary_eventJoinStringArray_Parms), 0x0000000000000580);
			UProperty* NewProp_Separator = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Separator"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Separator, KismetStringLibrary_eventJoinStringArray_Parms), 0x0000000000000080);
			UProperty* NewProp_SourceArray = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SourceArray"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(SourceArray, KismetStringLibrary_eventJoinStringArray_Parms), 0x0000000008000182);
			UProperty* NewProp_SourceArray_Inner = new(EC_InternalUseOnlyConstructor, NewProp_SourceArray, TEXT("SourceArray"), RF_Public|RF_Transient|RF_Native) UStrProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|String"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Separator"), TEXT(" "));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetStringLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Concatenates an array of strings into a single string.\n@param SourceArray - The array of strings to concatenate.\n@param Separator - The string used to separate each element.\n@return The final, joined, separated string."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetStringLibrary_Left()
	{
		struct KismetStringLibrary_eventLeft_Parms
		{
			FString SourceString;
			int32 Count;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetStringLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Left"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetStringLibrary_eventLeft_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, KismetStringLibrary_eventLeft_Parms), 0x0000000000000580);
			UProperty* NewProp_Count = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Count"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Count, KismetStringLibrary_eventLeft_Parms), 0x0000000000000080);
			UProperty* NewProp_SourceString = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SourceString"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(SourceString, KismetStringLibrary_eventLeft_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|String"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetStringLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@return the left most given number of characters"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetStringLibrary_LeftChop()
	{
		struct KismetStringLibrary_eventLeftChop_Parms
		{
			FString SourceString;
			int32 Count;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetStringLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LeftChop"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetStringLibrary_eventLeftChop_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, KismetStringLibrary_eventLeftChop_Parms), 0x0000000000000580);
			UProperty* NewProp_Count = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Count"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Count, KismetStringLibrary_eventLeftChop_Parms), 0x0000000000000080);
			UProperty* NewProp_SourceString = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SourceString"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(SourceString, KismetStringLibrary_eventLeftChop_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|String"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetStringLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@return the left most characters from the string chopping the given number of characters from the end"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetStringLibrary_LeftPad()
	{
		struct KismetStringLibrary_eventLeftPad_Parms
		{
			FString SourceString;
			int32 ChCount;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetStringLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LeftPad"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetStringLibrary_eventLeftPad_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, KismetStringLibrary_eventLeftPad_Parms), 0x0000000000000580);
			UProperty* NewProp_ChCount = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ChCount"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ChCount, KismetStringLibrary_eventLeftPad_Parms), 0x0000000000000080);
			UProperty* NewProp_SourceString = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SourceString"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(SourceString, KismetStringLibrary_eventLeftPad_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|String"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetStringLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("* Pad the left of this string for a specified number of characters\n* @param       SourceString    The string to pad\n* @param       ChCount                 Amount of padding required\n* @return      The padded string"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetStringLibrary_Len()
	{
		struct KismetStringLibrary_eventLen_Parms
		{
			FString S;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetStringLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Len"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetStringLibrary_eventLen_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, KismetStringLibrary_eventLen_Parms), 0x0000000000000580);
			UProperty* NewProp_S = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("S"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(S, KismetStringLibrary_eventLen_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|String"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("LEN"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("length"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetStringLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the number of characters in the string\n@param SourceString - The string to measure\n@return The number of chars in the string"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetStringLibrary_MatchesWildcard()
	{
		struct KismetStringLibrary_eventMatchesWildcard_Parms
		{
			FString SourceString;
			FString Wildcard;
			TEnumAsByte<ESearchCase::Type> SearchCase;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetStringLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MatchesWildcard"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetStringLibrary_eventMatchesWildcard_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetStringLibrary_eventMatchesWildcard_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetStringLibrary_eventMatchesWildcard_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetStringLibrary_eventMatchesWildcard_Parms), sizeof(bool), true);
			UProperty* NewProp_SearchCase = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SearchCase"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(SearchCase, KismetStringLibrary_eventMatchesWildcard_Parms), 0x0000000000000080, Z_Construct_UEnum_CoreUObject_ESearchCase());
			UProperty* NewProp_Wildcard = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Wildcard"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Wildcard, KismetStringLibrary_eventMatchesWildcard_Parms), 0x0000000000000080);
			UProperty* NewProp_SourceString = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SourceString"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(SourceString, KismetStringLibrary_eventMatchesWildcard_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|String"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_SearchCase"), TEXT("IgnoreCase"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetStringLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Searches this string for a given wild card\n\n@param Wildcard              *?-type wildcard\n@param SearchCase    Indicates whether the search is case sensitive or not ( defaults to ESearchCase::IgnoreCase )\n@return true if this string matches the *?-type wildcard given.\n@warning This is a simple, SLOW routine. Use with caution"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetStringLibrary_Mid()
	{
		struct KismetStringLibrary_eventMid_Parms
		{
			FString SourceString;
			int32 Start;
			int32 Count;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetStringLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Mid"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetStringLibrary_eventMid_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, KismetStringLibrary_eventMid_Parms), 0x0000000000000580);
			UProperty* NewProp_Count = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Count"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Count, KismetStringLibrary_eventMid_Parms), 0x0000000000000080);
			UProperty* NewProp_Start = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Start"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Start, KismetStringLibrary_eventMid_Parms), 0x0000000000000080);
			UProperty* NewProp_SourceString = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SourceString"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(SourceString, KismetStringLibrary_eventMid_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|String"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetStringLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@return the substring from Start position for Count characters."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetStringLibrary_NotEqual_StriStri()
	{
		struct KismetStringLibrary_eventNotEqual_StriStri_Parms
		{
			FString A;
			FString B;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetStringLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NotEqual_StriStri"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetStringLibrary_eventNotEqual_StriStri_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetStringLibrary_eventNotEqual_StriStri_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetStringLibrary_eventNotEqual_StriStri_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetStringLibrary_eventNotEqual_StriStri_Parms), sizeof(bool), true);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(B, KismetStringLibrary_eventNotEqual_StriStri_Parms), 0x0000000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(A, KismetStringLibrary_eventNotEqual_StriStri_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|String"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("!="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("NotEqual, case insenstive (string)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetStringLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Test if the input string are not equal (A != B), ignoring case differences\n@param A - The string to compare against\n@param B - The string to compare\n@return Returns true if the input strings are not equal, false if they are equal"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetStringLibrary_NotEqual_StrStr()
	{
		struct KismetStringLibrary_eventNotEqual_StrStr_Parms
		{
			FString A;
			FString B;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetStringLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NotEqual_StrStr"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetStringLibrary_eventNotEqual_StrStr_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetStringLibrary_eventNotEqual_StrStr_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetStringLibrary_eventNotEqual_StrStr_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetStringLibrary_eventNotEqual_StrStr_Parms), sizeof(bool), true);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(B, KismetStringLibrary_eventNotEqual_StrStr_Parms), 0x0000000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(A, KismetStringLibrary_eventNotEqual_StrStr_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|String"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("!="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("NotEqual (string)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetStringLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Test if the input string are not equal (A != B)\n@param A - The string to compare against\n@param B - The string to compare\n@return Returns true if the input strings are not equal, false if they are equal"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetStringLibrary_ParseIntoArray()
	{
		struct KismetStringLibrary_eventParseIntoArray_Parms
		{
			FString SourceString;
			FString Delimiter;
			bool CullEmptyStrings;
			TArray<FString> ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetStringLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ParseIntoArray"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetStringLibrary_eventParseIntoArray_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ReturnValue, KismetStringLibrary_eventParseIntoArray_Parms), 0x0000000000000580);
			UProperty* NewProp_ReturnValue_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ReturnValue, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStrProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(CullEmptyStrings, KismetStringLibrary_eventParseIntoArray_Parms, bool);
			UProperty* NewProp_CullEmptyStrings = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CullEmptyStrings"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(CullEmptyStrings, KismetStringLibrary_eventParseIntoArray_Parms), 0x0000000000000082, CPP_BOOL_PROPERTY_BITMASK(CullEmptyStrings, KismetStringLibrary_eventParseIntoArray_Parms), sizeof(bool), true);
			UProperty* NewProp_Delimiter = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Delimiter"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Delimiter, KismetStringLibrary_eventParseIntoArray_Parms), 0x0000000000000080);
			UProperty* NewProp_SourceString = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SourceString"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(SourceString, KismetStringLibrary_eventParseIntoArray_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|String"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_CullEmptyStrings"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Delimiter"), TEXT(" "));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetStringLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets an array of strings from a source string divided up by a separator and empty strings can optionally be culled.\n@param SourceString - The string to chop up\n@param Delimiter - The string to delimit on\n@param CullEmptyStrings = true - Cull (true) empty strings or add them to the array (false)\n@return The array of string that have been separated"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetStringLibrary_Replace()
	{
		struct KismetStringLibrary_eventReplace_Parms
		{
			FString SourceString;
			FString From;
			FString To;
			TEnumAsByte<ESearchCase::Type> SearchCase;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetStringLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Replace"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetStringLibrary_eventReplace_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, KismetStringLibrary_eventReplace_Parms), 0x0000000000000580);
			UProperty* NewProp_SearchCase = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SearchCase"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(SearchCase, KismetStringLibrary_eventReplace_Parms), 0x0000000000000080, Z_Construct_UEnum_CoreUObject_ESearchCase());
			UProperty* NewProp_To = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("To"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(To, KismetStringLibrary_eventReplace_Parms), 0x0000000000000080);
			UProperty* NewProp_From = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("From"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(From, KismetStringLibrary_eventReplace_Parms), 0x0000000000000080);
			UProperty* NewProp_SourceString = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SourceString"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(SourceString, KismetStringLibrary_eventReplace_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|String"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_SearchCase"), TEXT("IgnoreCase"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetStringLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Replace all occurrences of a substring in this string\n\n@param From substring to replace\n@param To substring to replace From with\n@param SearchCase    Indicates whether the search is case sensitive or not ( defaults to ESearchCase::IgnoreCase )\n@return a copy of this string with the replacement made"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetStringLibrary_ReplaceInline()
	{
		struct KismetStringLibrary_eventReplaceInline_Parms
		{
			FString SourceString;
			FString SearchText;
			FString ReplacementText;
			TEnumAsByte<ESearchCase::Type> SearchCase;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetStringLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ReplaceInline"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(KismetStringLibrary_eventReplaceInline_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, KismetStringLibrary_eventReplaceInline_Parms), 0x0000000000000580);
			UProperty* NewProp_SearchCase = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SearchCase"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(SearchCase, KismetStringLibrary_eventReplaceInline_Parms), 0x0000000000000080, Z_Construct_UEnum_CoreUObject_ESearchCase());
			UProperty* NewProp_ReplacementText = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReplacementText"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ReplacementText, KismetStringLibrary_eventReplaceInline_Parms), 0x0000000000000080);
			UProperty* NewProp_SearchText = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SearchText"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(SearchText, KismetStringLibrary_eventReplaceInline_Parms), 0x0000000000000080);
			UProperty* NewProp_SourceString = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SourceString"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(SourceString, KismetStringLibrary_eventReplaceInline_Parms), 0x0000000008000180);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|String"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_SearchCase"), TEXT("IgnoreCase"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetStringLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Replace all occurrences of SearchText with ReplacementText in this string.\n\n@param       SearchText      the text that should be removed from this string\n@param       ReplacementText         the text to insert in its place\n@param SearchCase    Indicates whether the search is case sensitive or not ( defaults to ESearchCase::IgnoreCase )\n\n@return      the number of occurrences of SearchText that were replaced."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetStringLibrary_Reverse()
	{
		struct KismetStringLibrary_eventReverse_Parms
		{
			FString SourceString;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetStringLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Reverse"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetStringLibrary_eventReverse_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, KismetStringLibrary_eventReverse_Parms), 0x0000000000000580);
			UProperty* NewProp_SourceString = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SourceString"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(SourceString, KismetStringLibrary_eventReverse_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|String"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetStringLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns a copy of this string, with the characters in reverse order"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetStringLibrary_Right()
	{
		struct KismetStringLibrary_eventRight_Parms
		{
			FString SourceString;
			int32 Count;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetStringLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Right"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetStringLibrary_eventRight_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, KismetStringLibrary_eventRight_Parms), 0x0000000000000580);
			UProperty* NewProp_Count = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Count"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Count, KismetStringLibrary_eventRight_Parms), 0x0000000000000080);
			UProperty* NewProp_SourceString = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SourceString"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(SourceString, KismetStringLibrary_eventRight_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|String"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetStringLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@return the string to the right of the specified location, counting back from the right (end of the word)."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetStringLibrary_RightChop()
	{
		struct KismetStringLibrary_eventRightChop_Parms
		{
			FString SourceString;
			int32 Count;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetStringLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RightChop"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetStringLibrary_eventRightChop_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, KismetStringLibrary_eventRightChop_Parms), 0x0000000000000580);
			UProperty* NewProp_Count = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Count"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Count, KismetStringLibrary_eventRightChop_Parms), 0x0000000000000080);
			UProperty* NewProp_SourceString = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SourceString"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(SourceString, KismetStringLibrary_eventRightChop_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|String"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetStringLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@return the string to the right of the specified location, counting forward from the left (from the beginning of the word)."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetStringLibrary_RightPad()
	{
		struct KismetStringLibrary_eventRightPad_Parms
		{
			FString SourceString;
			int32 ChCount;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetStringLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RightPad"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetStringLibrary_eventRightPad_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, KismetStringLibrary_eventRightPad_Parms), 0x0000000000000580);
			UProperty* NewProp_ChCount = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ChCount"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ChCount, KismetStringLibrary_eventRightPad_Parms), 0x0000000000000080);
			UProperty* NewProp_SourceString = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SourceString"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(SourceString, KismetStringLibrary_eventRightPad_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|String"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetStringLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("* Pad the right of this string for a specified number of characters\n* @param       SourceString    The string to pad\n* @param       ChCount                 Amount of padding required\n* @return      The padded string"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetStringLibrary_Split()
	{
		struct KismetStringLibrary_eventSplit_Parms
		{
			FString SourceString;
			FString InStr;
			FString LeftS;
			FString RightS;
			TEnumAsByte<ESearchCase::Type> SearchCase;
			TEnumAsByte<ESearchDir::Type> SearchDir;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetStringLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Split"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(KismetStringLibrary_eventSplit_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetStringLibrary_eventSplit_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetStringLibrary_eventSplit_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetStringLibrary_eventSplit_Parms), sizeof(bool), true);
			UProperty* NewProp_SearchDir = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SearchDir"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(SearchDir, KismetStringLibrary_eventSplit_Parms), 0x0000000000000080, Z_Construct_UEnum_CoreUObject_ESearchDir());
			UProperty* NewProp_SearchCase = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SearchCase"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(SearchCase, KismetStringLibrary_eventSplit_Parms), 0x0000000000000080, Z_Construct_UEnum_CoreUObject_ESearchCase());
			UProperty* NewProp_RightS = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("RightS"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(RightS, KismetStringLibrary_eventSplit_Parms), 0x0000000000000180);
			UProperty* NewProp_LeftS = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LeftS"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(LeftS, KismetStringLibrary_eventSplit_Parms), 0x0000000000000180);
			UProperty* NewProp_InStr = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InStr"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(InStr, KismetStringLibrary_eventSplit_Parms), 0x0000000000000080);
			UProperty* NewProp_SourceString = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SourceString"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(SourceString, KismetStringLibrary_eventSplit_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|String"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_SearchCase"), TEXT("IgnoreCase"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_SearchDir"), TEXT("FromStart"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetStringLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Splits this string at given string position case sensitive.\n\n@param InStr The string to search and split at\n@param LeftS out the string to the left of InStr, not updated if return is false\n@param RightS out the string to the right of InStr, not updated if return is false\n@param SearchCase             Indicates whether the search is case sensitive or not ( defaults to ESearchCase::IgnoreCase )\n@param SearchDir                      Indicates whether the search starts at the begining or at the end ( defaults to ESearchDir::FromStart )\n@return true if string is split, otherwise false"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetStringLibrary_StartsWith()
	{
		struct KismetStringLibrary_eventStartsWith_Parms
		{
			FString SourceString;
			FString InPrefix;
			TEnumAsByte<ESearchCase::Type> SearchCase;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetStringLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("StartsWith"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetStringLibrary_eventStartsWith_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetStringLibrary_eventStartsWith_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetStringLibrary_eventStartsWith_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetStringLibrary_eventStartsWith_Parms), sizeof(bool), true);
			UProperty* NewProp_SearchCase = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SearchCase"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(SearchCase, KismetStringLibrary_eventStartsWith_Parms), 0x0000000000000080, Z_Construct_UEnum_CoreUObject_ESearchCase());
			UProperty* NewProp_InPrefix = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InPrefix"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(InPrefix, KismetStringLibrary_eventStartsWith_Parms), 0x0000000000000080);
			UProperty* NewProp_SourceString = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SourceString"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(SourceString, KismetStringLibrary_eventStartsWith_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|String"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_SearchCase"), TEXT("IgnoreCase"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetStringLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Test whether this string starts with given string.\n\n@param SearchCase            Indicates whether the search is case sensitive or not ( defaults to ESearchCase::IgnoreCase )\n@return true if this string begins with specified text, false otherwise"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetStringLibrary_TimeSecondsToString()
	{
		struct KismetStringLibrary_eventTimeSecondsToString_Parms
		{
			float InSeconds;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetStringLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TimeSecondsToString"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetStringLibrary_eventTimeSecondsToString_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, KismetStringLibrary_eventTimeSecondsToString_Parms), 0x0000000000000580);
			UProperty* NewProp_InSeconds = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InSeconds"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InSeconds, KismetStringLibrary_eventTimeSecondsToString_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|String"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetStringLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Convert a number of seconds into minutes:seconds.milliseconds format string"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetStringLibrary_ToLower()
	{
		struct KismetStringLibrary_eventToLower_Parms
		{
			FString SourceString;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetStringLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ToLower"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetStringLibrary_eventToLower_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, KismetStringLibrary_eventToLower_Parms), 0x0000000000000580);
			UProperty* NewProp_SourceString = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SourceString"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(SourceString, KismetStringLibrary_eventToLower_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|String"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetStringLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns a string converted to Lower case\n@param        SourceString    The string to convert\n@return       The string in lower case"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetStringLibrary_ToUpper()
	{
		struct KismetStringLibrary_eventToUpper_Parms
		{
			FString SourceString;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetStringLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ToUpper"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetStringLibrary_eventToUpper_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, KismetStringLibrary_eventToUpper_Parms), 0x0000000000000580);
			UProperty* NewProp_SourceString = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SourceString"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(SourceString, KismetStringLibrary_eventToUpper_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|String"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetStringLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns a string converted to Upper case\n@param       SourceString    The string to convert\n@return      The string in upper case"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetStringLibrary_Trim()
	{
		struct KismetStringLibrary_eventTrim_Parms
		{
			FString SourceString;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetStringLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Trim"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetStringLibrary_eventTrim_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, KismetStringLibrary_eventTrim_Parms), 0x0000000000000580);
			UProperty* NewProp_SourceString = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SourceString"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(SourceString, KismetStringLibrary_eventTrim_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|String"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetStringLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Removes whitespace characters from the front of this string."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetStringLibrary_TrimTrailing()
	{
		struct KismetStringLibrary_eventTrimTrailing_Parms
		{
			FString SourceString;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetStringLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TrimTrailing"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetStringLibrary_eventTrimTrailing_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, KismetStringLibrary_eventTrimTrailing_Parms), 0x0000000000000580);
			UProperty* NewProp_SourceString = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SourceString"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(SourceString, KismetStringLibrary_eventTrimTrailing_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|String"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetStringLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Removes trailing whitespace characters"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UKismetStringLibrary_NoRegister()
	{
		return UKismetStringLibrary::StaticClass();
	}
	UClass* Z_Construct_UClass_UKismetStringLibrary()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBlueprintFunctionLibrary();
			Z_Construct_UPackage_Engine();
			OuterClass = UKismetStringLibrary::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_UKismetStringLibrary_BuildString_Bool());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetStringLibrary_BuildString_Color());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetStringLibrary_BuildString_Float());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetStringLibrary_BuildString_Int());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetStringLibrary_BuildString_Name());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetStringLibrary_BuildString_Object());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetStringLibrary_BuildString_Rotator());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetStringLibrary_BuildString_Vector());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetStringLibrary_BuildString_Vector2d());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetStringLibrary_Concat_StrStr());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetStringLibrary_Conv_BoolToString());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetStringLibrary_Conv_ByteToString());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetStringLibrary_Conv_ColorToString());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetStringLibrary_Conv_FloatToString());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetStringLibrary_Conv_IntToString());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetStringLibrary_Conv_NameToString());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetStringLibrary_Conv_ObjectToString());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetStringLibrary_Conv_RotatorToString());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetStringLibrary_Conv_StringToFloat());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetStringLibrary_Conv_StringToInt());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetStringLibrary_Conv_StringToName());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetStringLibrary_Conv_TransformToString());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetStringLibrary_Conv_Vector2dToString());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetStringLibrary_Conv_VectorToString());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetStringLibrary_CullArray());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetStringLibrary_EndsWith());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetStringLibrary_EqualEqual_StriStri());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetStringLibrary_EqualEqual_StrStr());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetStringLibrary_FindSubstring());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetStringLibrary_GetCharacterArrayFromString());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetStringLibrary_GetCharacterAsNumber());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetStringLibrary_GetSubstring());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetStringLibrary_IsNumeric());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetStringLibrary_JoinStringArray());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetStringLibrary_Left());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetStringLibrary_LeftChop());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetStringLibrary_LeftPad());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetStringLibrary_Len());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetStringLibrary_MatchesWildcard());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetStringLibrary_Mid());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetStringLibrary_NotEqual_StriStri());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetStringLibrary_NotEqual_StrStr());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetStringLibrary_ParseIntoArray());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetStringLibrary_Replace());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetStringLibrary_ReplaceInline());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetStringLibrary_Reverse());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetStringLibrary_Right());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetStringLibrary_RightChop());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetStringLibrary_RightPad());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetStringLibrary_Split());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetStringLibrary_StartsWith());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetStringLibrary_TimeSecondsToString());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetStringLibrary_ToLower());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetStringLibrary_ToUpper());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetStringLibrary_Trim());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetStringLibrary_TrimTrailing());

				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetStringLibrary_BuildString_Bool()); // 2837390274
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetStringLibrary_BuildString_Color()); // 4249163840
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetStringLibrary_BuildString_Float()); // 1068726242
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetStringLibrary_BuildString_Int()); // 127682850
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetStringLibrary_BuildString_Name()); // 3301148664
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetStringLibrary_BuildString_Object()); // 882242540
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetStringLibrary_BuildString_Rotator()); // 1463349152
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetStringLibrary_BuildString_Vector()); // 1183686722
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetStringLibrary_BuildString_Vector2d()); // 1269241800
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetStringLibrary_Concat_StrStr()); // 368155127
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetStringLibrary_Conv_BoolToString()); // 868789019
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetStringLibrary_Conv_ByteToString()); // 3842821206
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetStringLibrary_Conv_ColorToString()); // 3393350394
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetStringLibrary_Conv_FloatToString()); // 2396439997
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetStringLibrary_Conv_IntToString()); // 364731141
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetStringLibrary_Conv_NameToString()); // 3368242881
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetStringLibrary_Conv_ObjectToString()); // 1881557994
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetStringLibrary_Conv_RotatorToString()); // 2236886781
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetStringLibrary_Conv_StringToFloat()); // 1222570093
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetStringLibrary_Conv_StringToInt()); // 846445651
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetStringLibrary_Conv_StringToName()); // 675178985
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetStringLibrary_Conv_TransformToString()); // 1729473814
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetStringLibrary_Conv_Vector2dToString()); // 3089147479
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetStringLibrary_Conv_VectorToString()); // 2962259311
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetStringLibrary_CullArray()); // 1072569849
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetStringLibrary_EndsWith()); // 2116124086
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetStringLibrary_EqualEqual_StriStri()); // 1886475278
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetStringLibrary_EqualEqual_StrStr()); // 2082895324
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetStringLibrary_FindSubstring()); // 4172738444
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetStringLibrary_GetCharacterArrayFromString()); // 2026316973
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetStringLibrary_GetCharacterAsNumber()); // 2202281188
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetStringLibrary_GetSubstring()); // 58462285
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetStringLibrary_IsNumeric()); // 830882654
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetStringLibrary_JoinStringArray()); // 894356447
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetStringLibrary_Left()); // 1617610946
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetStringLibrary_LeftChop()); // 1540304142
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetStringLibrary_LeftPad()); // 2252084843
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetStringLibrary_Len()); // 3813379224
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetStringLibrary_MatchesWildcard()); // 3795369144
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetStringLibrary_Mid()); // 210944878
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetStringLibrary_NotEqual_StriStri()); // 3138404843
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetStringLibrary_NotEqual_StrStr()); // 2900255272
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetStringLibrary_ParseIntoArray()); // 4204828394
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetStringLibrary_Replace()); // 2193222720
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetStringLibrary_ReplaceInline()); // 1884787603
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetStringLibrary_Reverse()); // 2050261381
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetStringLibrary_Right()); // 566734268
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetStringLibrary_RightChop()); // 2642423473
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetStringLibrary_RightPad()); // 3133621596
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetStringLibrary_Split()); // 17170165
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetStringLibrary_StartsWith()); // 2134877412
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetStringLibrary_TimeSecondsToString()); // 3456841641
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetStringLibrary_ToLower()); // 562423255
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetStringLibrary_ToUpper()); // 1756908640
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetStringLibrary_Trim()); // 2014552757
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetStringLibrary_TrimTrailing()); // 1952147092
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Kismet/KismetStringLibrary.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetStringLibrary.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UKismetStringLibrary(Z_Construct_UClass_UKismetStringLibrary, TEXT("UKismetStringLibrary"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UKismetStringLibrary);
	UClass* Z_Construct_UClass_UDeveloperSettings_NoRegister()
	{
		return UDeveloperSettings::StaticClass();
	}
	UClass* Z_Construct_UClass_UDeveloperSettings()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UDeveloperSettings::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/DeveloperSettings.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DeveloperSettings.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("The base class of any auto discovered settings object."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UDeveloperSettings(Z_Construct_UClass_UDeveloperSettings, TEXT("UDeveloperSettings"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UDeveloperSettings);
	UScriptStruct* Z_Construct_UScriptStruct_FCustomProfile()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FCustomProfile_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("CustomProfile"), sizeof(FCustomProfile), Get_Z_Construct_UScriptStruct_FCustomProfile_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CustomProfile"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FCustomProfile>, EStructFlags(0x00000201));
			UProperty* NewProp_CustomResponses = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CustomResponses"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(CustomResponses, FCustomProfile), 0x0000000000000000);
			UProperty* NewProp_CustomResponses_Inner = new(EC_InternalUseOnlyConstructor, NewProp_CustomResponses, TEXT("CustomResponses"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FResponseChannel());
			UProperty* NewProp_Name = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Name"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(Name, FCustomProfile), 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/CollisionProfile.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Structure for custom profiles.\n\nif you'd like to just add custom channels, not changing anything else engine defined\nif you'd like to override all about profile, please use\n+Profiles=(Name=NameOfProfileYouLikeToOverwrite,....)"));
			MetaData->SetValue(NewProp_CustomResponses, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/CollisionProfile.h"));
			MetaData->SetValue(NewProp_CustomResponses, TEXT("ToolTip"), TEXT("Types of objects that this physics objects will collide with."));
			MetaData->SetValue(NewProp_Name, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/CollisionProfile.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FCustomProfile_CRC() { return 1920863202U; }
	UScriptStruct* Z_Construct_UScriptStruct_FCustomChannelSetup()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FCustomChannelSetup_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("CustomChannelSetup"), sizeof(FCustomChannelSetup), Get_Z_Construct_UScriptStruct_FCustomChannelSetup_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CustomChannelSetup"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FCustomChannelSetup>, EStructFlags(0x00000001));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bStaticObject, FCustomChannelSetup, bool);
			UProperty* NewProp_bStaticObject = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bStaticObject"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bStaticObject, FCustomChannelSetup), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bStaticObject, FCustomChannelSetup), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTraceType, FCustomChannelSetup, bool);
			UProperty* NewProp_bTraceType = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bTraceType"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTraceType, FCustomChannelSetup), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bTraceType, FCustomChannelSetup), sizeof(bool), true);
			UProperty* NewProp_DefaultResponse = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DefaultResponse"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(DefaultResponse, FCustomChannelSetup), 0x0000000000000000, Z_Construct_UEnum_Engine_ECollisionResponse());
			UProperty* NewProp_Name = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Name"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(Name, FCustomChannelSetup), 0x0000000000000000);
			UProperty* NewProp_Channel = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Channel"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(Channel, FCustomChannelSetup), 0x0000000000000000, Z_Construct_UEnum_Engine_ECollisionChannel());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/CollisionProfile.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Structure for custom channel setup information."));
			MetaData->SetValue(NewProp_bStaticObject, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/CollisionProfile.h"));
			MetaData->SetValue(NewProp_bStaticObject, TEXT("ToolTip"), TEXT("Specifies if this is static object. Otherwise it will be dynamic object. This is used for query all objects vs all static objects vs all dynamic objects *"));
			MetaData->SetValue(NewProp_bTraceType, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/CollisionProfile.h"));
			MetaData->SetValue(NewProp_bTraceType, TEXT("ToolTip"), TEXT("Sets meta data TraceType=\"1\" for the enum entry if true. Otherwise, this channel will be treated as object query channel, so you can query object types*"));
			MetaData->SetValue(NewProp_DefaultResponse, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/CollisionProfile.h"));
			MetaData->SetValue(NewProp_DefaultResponse, TEXT("ToolTip"), TEXT("Default Response for the channel"));
			MetaData->SetValue(NewProp_Name, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/CollisionProfile.h"));
			MetaData->SetValue(NewProp_Name, TEXT("ToolTip"), TEXT("Name of channel you'd like to show up *"));
			MetaData->SetValue(NewProp_Channel, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/CollisionProfile.h"));
			MetaData->SetValue(NewProp_Channel, TEXT("ToolTip"), TEXT("Which channel you'd like to customize *"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FCustomChannelSetup_CRC() { return 683501414U; }
	UScriptStruct* Z_Construct_UScriptStruct_FCollisionResponseTemplate()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FCollisionResponseTemplate_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("CollisionResponseTemplate"), sizeof(FCollisionResponseTemplate), Get_Z_Construct_UScriptStruct_FCollisionResponseTemplate_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CollisionResponseTemplate"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FCollisionResponseTemplate>, EStructFlags(0x00000201));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCanModify, FCollisionResponseTemplate, bool);
			UProperty* NewProp_bCanModify = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bCanModify"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCanModify, FCollisionResponseTemplate), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bCanModify, FCollisionResponseTemplate), sizeof(bool), true);
			UProperty* NewProp_HelpMessage = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("HelpMessage"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(HelpMessage, FCollisionResponseTemplate), 0x0000000000000000);
			UProperty* NewProp_CustomResponses = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CustomResponses"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(CustomResponses, FCollisionResponseTemplate), 0x0000000000000000);
			UProperty* NewProp_CustomResponses_Inner = new(EC_InternalUseOnlyConstructor, NewProp_CustomResponses, TEXT("CustomResponses"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FResponseChannel());
			UProperty* NewProp_ObjectTypeName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ObjectTypeName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(ObjectTypeName, FCollisionResponseTemplate), 0x0000000000000000);
			UProperty* NewProp_CollisionEnabled = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CollisionEnabled"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(CollisionEnabled, FCollisionResponseTemplate), 0x0000000000000000, Z_Construct_UEnum_Engine_ECollisionEnabled());
			UProperty* NewProp_Name = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Name"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(Name, FCollisionResponseTemplate), 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/CollisionProfile.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Structure for collision response templates."));
			MetaData->SetValue(NewProp_bCanModify, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/CollisionProfile.h"));
			MetaData->SetValue(NewProp_bCanModify, TEXT("ToolTip"), TEXT("Help message for collision profile *"));
			MetaData->SetValue(NewProp_HelpMessage, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/CollisionProfile.h"));
			MetaData->SetValue(NewProp_HelpMessage, TEXT("ToolTip"), TEXT("Help message for collision profile *"));
			MetaData->SetValue(NewProp_CustomResponses, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/CollisionProfile.h"));
			MetaData->SetValue(NewProp_CustomResponses, TEXT("ToolTip"), TEXT("Types of objects that this physics objects will collide with."));
			MetaData->SetValue(NewProp_ObjectTypeName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/CollisionProfile.h"));
			MetaData->SetValue(NewProp_CollisionEnabled, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/CollisionProfile.h"));
			MetaData->SetValue(NewProp_Name, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/CollisionProfile.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FCollisionResponseTemplate_CRC() { return 4055377219U; }
	UScriptStruct* Z_Construct_UScriptStruct_FCollisionProfileName()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FCollisionProfileName_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("CollisionProfileName"), sizeof(FCollisionProfileName), Get_Z_Construct_UScriptStruct_FCollisionProfileName_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CollisionProfileName"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FCollisionProfileName>, EStructFlags(0x00000001));
			UProperty* NewProp_Name = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Name"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(Name, FCollisionProfileName), 0x0000000000000001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/CollisionProfile.h"));
			MetaData->SetValue(NewProp_Name, TEXT("Category"), TEXT("Collision"));
			MetaData->SetValue(NewProp_Name, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/CollisionProfile.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FCollisionProfileName_CRC() { return 497831829U; }
	UClass* Z_Construct_UClass_UCollisionProfile_NoRegister()
	{
		return UCollisionProfile::StaticClass();
	}
	UClass* Z_Construct_UClass_UCollisionProfile()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UDeveloperSettings();
			Z_Construct_UPackage_Engine();
			OuterClass = UCollisionProfile::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080086;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_CollisionChannelRedirects = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CollisionChannelRedirects"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(CollisionChannelRedirects, UCollisionProfile), 0x0000000000044000);
				UProperty* NewProp_CollisionChannelRedirects_Inner = new(EC_InternalUseOnlyConstructor, NewProp_CollisionChannelRedirects, TEXT("CollisionChannelRedirects"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000004000, Z_Construct_UScriptStruct_FRedirector());
				UProperty* NewProp_ProfileRedirects = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ProfileRedirects"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ProfileRedirects, UCollisionProfile), 0x0000000000044000);
				UProperty* NewProp_ProfileRedirects_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ProfileRedirects, TEXT("ProfileRedirects"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000004000, Z_Construct_UScriptStruct_FRedirector());
				UProperty* NewProp_EditProfiles = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EditProfiles"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(EditProfiles, UCollisionProfile), 0x0000000000044000);
				UProperty* NewProp_EditProfiles_Inner = new(EC_InternalUseOnlyConstructor, NewProp_EditProfiles, TEXT("EditProfiles"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000004000, Z_Construct_UScriptStruct_FCustomProfile());
				UProperty* NewProp_DefaultChannelResponses = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultChannelResponses"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(DefaultChannelResponses, UCollisionProfile), 0x0000000000044000);
				UProperty* NewProp_DefaultChannelResponses_Inner = new(EC_InternalUseOnlyConstructor, NewProp_DefaultChannelResponses, TEXT("DefaultChannelResponses"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000004000, Z_Construct_UScriptStruct_FCustomChannelSetup());
				UProperty* NewProp_Profiles = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Profiles"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Profiles, UCollisionProfile), 0x0000000000044000);
				UProperty* NewProp_Profiles_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Profiles, TEXT("Profiles"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000004000, Z_Construct_UScriptStruct_FCollisionResponseTemplate());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Collision"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/CollisionProfile.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/CollisionProfile.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Set up and modify collision settings."));
				MetaData->SetValue(NewProp_CollisionChannelRedirects, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/CollisionProfile.h"));
				MetaData->SetValue(NewProp_ProfileRedirects, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/CollisionProfile.h"));
				MetaData->SetValue(NewProp_EditProfiles, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/CollisionProfile.h"));
				MetaData->SetValue(NewProp_DefaultChannelResponses, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/CollisionProfile.h"));
				MetaData->SetValue(NewProp_Profiles, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/CollisionProfile.h"));
				MetaData->SetValue(NewProp_Profiles, TEXT("ToolTip"), TEXT("This is hacky, but without this edit tag, we can't get valid property handle\nand we can't save them properly to config, so we need this tag."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UCollisionProfile(Z_Construct_UClass_UCollisionProfile, TEXT("UCollisionProfile"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UCollisionProfile);
	UFunction* Z_Construct_UDelegateFunction_UKismetSystemLibrary_OnAssetClassLoaded__DelegateSignature()
	{
		struct KismetSystemLibrary_eventOnAssetClassLoaded_Parms
		{
			TSubclassOf<UObject>  Loaded;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnAssetClassLoaded__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00120000, 65535, sizeof(KismetSystemLibrary_eventOnAssetClassLoaded_Parms));
			UProperty* NewProp_Loaded = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Loaded"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(Loaded, KismetSystemLibrary_eventOnAssetClassLoaded_Parms), 0x0004000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UDelegateFunction_UKismetSystemLibrary_OnAssetLoaded__DelegateSignature()
	{
		struct KismetSystemLibrary_eventOnAssetLoaded_Parms
		{
			UObject* Loaded;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnAssetLoaded__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00120000, 65535, sizeof(KismetSystemLibrary_eventOnAssetLoaded_Parms));
			UProperty* NewProp_Loaded = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Loaded"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Loaded, KismetSystemLibrary_eventOnAssetLoaded_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UEnum* Z_Construct_UEnum_Engine_EQuitPreference()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EQuitPreference_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EQuitPreference"), 0, Get_Z_Construct_UEnum_Engine_EQuitPreference_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EQuitPreference"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EQuitPreference::Quit")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EQuitPreference::Background")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EQuitPreference::EQuitPreference_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("Background.ToolTip"), TEXT("Move the application to the background."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnEnum, TEXT("Quit.ToolTip"), TEXT("Exit the game completely."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EQuitPreference_CRC() { return 1970467222U; }
	UEnum* Z_Construct_UEnum_Engine_EMoveComponentAction()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EMoveComponentAction_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EMoveComponentAction"), 0, Get_Z_Construct_UEnum_Engine_EMoveComponentAction_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EMoveComponentAction"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EMoveComponentAction::Move")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EMoveComponentAction::Stop")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EMoveComponentAction::Return")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EMoveComponentAction::EMoveComponentAction_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnEnum, TEXT("Move.ToolTip"), TEXT("Move to target over specified time."));
			MetaData->SetValue(ReturnEnum, TEXT("Return.ToolTip"), TEXT("If currently moving, return to where you started, over the time elapsed so far."));
			MetaData->SetValue(ReturnEnum, TEXT("Stop.ToolTip"), TEXT("If currently moving, stop."));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Enum used to indicate desired behavior for MoveComponentTo latent function."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EMoveComponentAction_CRC() { return 762787714U; }
	UEnum* Z_Construct_UEnum_Engine_EDrawDebugTrace()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EDrawDebugTrace_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EDrawDebugTrace"), 0, Get_Z_Construct_UEnum_Engine_EDrawDebugTrace_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EDrawDebugTrace"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDrawDebugTrace::None")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDrawDebugTrace::ForOneFrame")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDrawDebugTrace::ForDuration")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDrawDebugTrace::Persistent")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDrawDebugTrace::EDrawDebugTrace_MAX")), 4));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EDrawDebugTrace_CRC() { return 2003262513U; }
	UScriptStruct* Z_Construct_UScriptStruct_FGenericStruct()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FGenericStruct_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("GenericStruct"), sizeof(FGenericStruct), Get_Z_Construct_UScriptStruct_FGenericStruct_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GenericStruct"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FGenericStruct>, EStructFlags(0x00000001));
			UProperty* NewProp_Data = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Data"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Data, FGenericStruct), 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(NewProp_Data, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FGenericStruct_CRC() { return 630029167U; }
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_AddFloatHistorySample()
	{
		struct KismetSystemLibrary_eventAddFloatHistorySample_Parms
		{
			float Value;
			FDebugFloatHistory FloatHistory;
			FDebugFloatHistory ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AddFloatHistorySample"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(KismetSystemLibrary_eventAddFloatHistorySample_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetSystemLibrary_eventAddFloatHistorySample_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FDebugFloatHistory());
			UProperty* NewProp_FloatHistory = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FloatHistory"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(FloatHistory, KismetSystemLibrary_eventAddFloatHistorySample_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FDebugFloatHistory());
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Value, KismetSystemLibrary_eventAddFloatHistorySample_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Rendering|Debug"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_BoxOverlapActors_DEPRECATED()
	{
		struct KismetSystemLibrary_eventBoxOverlapActors_DEPRECATED_Parms
		{
			UObject* WorldContextObject;
			FVector BoxPos;
			FVector BoxExtent;
			TEnumAsByte<EOverlapFilterOption> Filter;
			UClass* ActorClassFilter;
			TArray<AActor*> ActorsToIgnore;
			TArray<AActor*> OutActors;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BoxOverlapActors_DEPRECATED"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(KismetSystemLibrary_eventBoxOverlapActors_DEPRECATED_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetSystemLibrary_eventBoxOverlapActors_DEPRECATED_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetSystemLibrary_eventBoxOverlapActors_DEPRECATED_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetSystemLibrary_eventBoxOverlapActors_DEPRECATED_Parms), sizeof(bool), true);
			UProperty* NewProp_OutActors = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutActors"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(OutActors, KismetSystemLibrary_eventBoxOverlapActors_DEPRECATED_Parms), 0x0000000000000180);
			UProperty* NewProp_OutActors_Inner = new(EC_InternalUseOnlyConstructor, NewProp_OutActors, TEXT("OutActors"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_ActorsToIgnore = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ActorsToIgnore, KismetSystemLibrary_eventBoxOverlapActors_DEPRECATED_Parms), 0x0000000008000182);
			UProperty* NewProp_ActorsToIgnore_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ActorsToIgnore, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_ActorClassFilter = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActorClassFilter"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(ActorClassFilter, KismetSystemLibrary_eventBoxOverlapActors_DEPRECATED_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			UProperty* NewProp_Filter = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Filter"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(Filter, KismetSystemLibrary_eventBoxOverlapActors_DEPRECATED_Parms), 0x0000000000000080, Z_Construct_UEnum_Engine_EOverlapFilterOption());
			UProperty* NewProp_BoxExtent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("BoxExtent"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(BoxExtent, KismetSystemLibrary_eventBoxOverlapActors_DEPRECATED_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_BoxPos = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("BoxPos"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(BoxPos, KismetSystemLibrary_eventBoxOverlapActors_DEPRECATED_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventBoxOverlapActors_DEPRECATED_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AutoCreateRefTerm"), TEXT("ActorsToIgnore"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Collision"));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecatedFunction"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecationMessage"), TEXT("Use new BoxOverlapActors"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_BoxOverlapActors_NEW()
	{
		struct KismetSystemLibrary_eventBoxOverlapActors_NEW_Parms
		{
			UObject* WorldContextObject;
			FVector BoxPos;
			FVector BoxExtent;
			TArray<TEnumAsByte<EObjectTypeQuery> > ObjectTypes;
			UClass* ActorClassFilter;
			TArray<AActor*> ActorsToIgnore;
			TArray<AActor*> OutActors;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BoxOverlapActors_NEW"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(KismetSystemLibrary_eventBoxOverlapActors_NEW_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetSystemLibrary_eventBoxOverlapActors_NEW_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetSystemLibrary_eventBoxOverlapActors_NEW_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetSystemLibrary_eventBoxOverlapActors_NEW_Parms), sizeof(bool), true);
			UProperty* NewProp_OutActors = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutActors"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(OutActors, KismetSystemLibrary_eventBoxOverlapActors_NEW_Parms), 0x0000000000000180);
			UProperty* NewProp_OutActors_Inner = new(EC_InternalUseOnlyConstructor, NewProp_OutActors, TEXT("OutActors"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_ActorsToIgnore = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ActorsToIgnore, KismetSystemLibrary_eventBoxOverlapActors_NEW_Parms), 0x0000000008000182);
			UProperty* NewProp_ActorsToIgnore_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ActorsToIgnore, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_ActorClassFilter = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActorClassFilter"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(ActorClassFilter, KismetSystemLibrary_eventBoxOverlapActors_NEW_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			UProperty* NewProp_ObjectTypes = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ObjectTypes"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ObjectTypes, KismetSystemLibrary_eventBoxOverlapActors_NEW_Parms), 0x0000000008000182);
			UProperty* NewProp_ObjectTypes_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ObjectTypes, TEXT("ObjectTypes"), RF_Public|RF_Transient|RF_Native) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UEnum_Engine_EObjectTypeQuery());
			UProperty* NewProp_BoxExtent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("BoxExtent"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(BoxExtent, KismetSystemLibrary_eventBoxOverlapActors_NEW_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_BoxPos = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("BoxPos"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(BoxPos, KismetSystemLibrary_eventBoxOverlapActors_NEW_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventBoxOverlapActors_NEW_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AutoCreateRefTerm"), TEXT("ActorsToIgnore"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Collision"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("BoxOverlapActors"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns an array of actors that overlap the given axis-aligned box.\n@param WorldContext  World context\n@param BoxPos                Center of box.\n@param BoxExtent             Extents of box.\n@param Filter                Option to restrict results to only static or only dynamic.  For efficiency.\n@param ClassFilter   If set, will only return results of this class or subclasses of it.\n@param ActorsToIgnore                Ignore these actors in the list\n@param OutActors             Returned array of actors. Unsorted.\n@return                              true if there was an overlap that passed the filters, false otherwise."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_BoxOverlapComponents_DEPRECATED()
	{
		struct KismetSystemLibrary_eventBoxOverlapComponents_DEPRECATED_Parms
		{
			UObject* WorldContextObject;
			FVector BoxPos;
			FVector Extent;
			TEnumAsByte<EOverlapFilterOption> Filter;
			UClass* ComponentClassFilter;
			TArray<AActor*> ActorsToIgnore;
			TArray<UPrimitiveComponent*> OutComponents;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BoxOverlapComponents_DEPRECATED"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(KismetSystemLibrary_eventBoxOverlapComponents_DEPRECATED_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetSystemLibrary_eventBoxOverlapComponents_DEPRECATED_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetSystemLibrary_eventBoxOverlapComponents_DEPRECATED_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetSystemLibrary_eventBoxOverlapComponents_DEPRECATED_Parms), sizeof(bool), true);
			UProperty* NewProp_OutComponents = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutComponents"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(OutComponents, KismetSystemLibrary_eventBoxOverlapComponents_DEPRECATED_Parms), 0x0000008000000180);
			UProperty* NewProp_OutComponents_Inner = new(EC_InternalUseOnlyConstructor, NewProp_OutComponents, TEXT("OutComponents"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000080000, Z_Construct_UClass_UPrimitiveComponent_NoRegister());
			UProperty* NewProp_ActorsToIgnore = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ActorsToIgnore, KismetSystemLibrary_eventBoxOverlapComponents_DEPRECATED_Parms), 0x0000000008000182);
			UProperty* NewProp_ActorsToIgnore_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ActorsToIgnore, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_ComponentClassFilter = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ComponentClassFilter"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(ComponentClassFilter, KismetSystemLibrary_eventBoxOverlapComponents_DEPRECATED_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			UProperty* NewProp_Filter = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Filter"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(Filter, KismetSystemLibrary_eventBoxOverlapComponents_DEPRECATED_Parms), 0x0000000000000080, Z_Construct_UEnum_Engine_EOverlapFilterOption());
			UProperty* NewProp_Extent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Extent"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Extent, KismetSystemLibrary_eventBoxOverlapComponents_DEPRECATED_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_BoxPos = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("BoxPos"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(BoxPos, KismetSystemLibrary_eventBoxOverlapComponents_DEPRECATED_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventBoxOverlapComponents_DEPRECATED_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AutoCreateRefTerm"), TEXT("ActorsToIgnore"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Collision"));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecatedFunction"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecationMessage"), TEXT("Use new BoxOverlapComponents"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
			MetaData->SetValue(NewProp_OutComponents, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_BoxOverlapComponents_NEW()
	{
		struct KismetSystemLibrary_eventBoxOverlapComponents_NEW_Parms
		{
			UObject* WorldContextObject;
			FVector BoxPos;
			FVector Extent;
			TArray<TEnumAsByte<EObjectTypeQuery> > ObjectTypes;
			UClass* ComponentClassFilter;
			TArray<AActor*> ActorsToIgnore;
			TArray<UPrimitiveComponent*> OutComponents;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BoxOverlapComponents_NEW"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(KismetSystemLibrary_eventBoxOverlapComponents_NEW_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetSystemLibrary_eventBoxOverlapComponents_NEW_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetSystemLibrary_eventBoxOverlapComponents_NEW_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetSystemLibrary_eventBoxOverlapComponents_NEW_Parms), sizeof(bool), true);
			UProperty* NewProp_OutComponents = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutComponents"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(OutComponents, KismetSystemLibrary_eventBoxOverlapComponents_NEW_Parms), 0x0000008000000180);
			UProperty* NewProp_OutComponents_Inner = new(EC_InternalUseOnlyConstructor, NewProp_OutComponents, TEXT("OutComponents"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000080000, Z_Construct_UClass_UPrimitiveComponent_NoRegister());
			UProperty* NewProp_ActorsToIgnore = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ActorsToIgnore, KismetSystemLibrary_eventBoxOverlapComponents_NEW_Parms), 0x0000000008000182);
			UProperty* NewProp_ActorsToIgnore_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ActorsToIgnore, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_ComponentClassFilter = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ComponentClassFilter"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(ComponentClassFilter, KismetSystemLibrary_eventBoxOverlapComponents_NEW_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			UProperty* NewProp_ObjectTypes = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ObjectTypes"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ObjectTypes, KismetSystemLibrary_eventBoxOverlapComponents_NEW_Parms), 0x0000000008000182);
			UProperty* NewProp_ObjectTypes_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ObjectTypes, TEXT("ObjectTypes"), RF_Public|RF_Transient|RF_Native) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UEnum_Engine_EObjectTypeQuery());
			UProperty* NewProp_Extent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Extent"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Extent, KismetSystemLibrary_eventBoxOverlapComponents_NEW_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_BoxPos = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("BoxPos"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(BoxPos, KismetSystemLibrary_eventBoxOverlapComponents_NEW_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventBoxOverlapComponents_NEW_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AutoCreateRefTerm"), TEXT("ActorsToIgnore"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Collision"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("BoxOverlapComponents"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns an array of components that overlap the given axis-aligned box.\n@param WorldContext  World context\n@param BoxPos                Center of box.\n@param BoxExtent             Extents of box.\n@param Filter                Option to restrict results to only static or only dynamic.  For efficiency.\n@param ClassFilter   If set, will only return results of this class or subclasses of it.\n@param ActorsToIgnore                Ignore these actors in the list\n@param OutActors             Returned array of actors. Unsorted.\n@return                              true if there was an overlap that passed the filters, false otherwise."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
			MetaData->SetValue(NewProp_OutComponents, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_BoxTraceMulti()
	{
		struct KismetSystemLibrary_eventBoxTraceMulti_Parms
		{
			UObject* WorldContextObject;
			FVector Start;
			FVector End;
			FVector HalfSize;
			FRotator Orientation;
			TEnumAsByte<ETraceTypeQuery> TraceChannel;
			bool bTraceComplex;
			TArray<AActor*> ActorsToIgnore;
			TEnumAsByte<EDrawDebugTrace::Type> DrawDebugType;
			TArray<FHitResult> OutHits;
			bool bIgnoreSelf;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BoxTraceMulti"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(KismetSystemLibrary_eventBoxTraceMulti_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetSystemLibrary_eventBoxTraceMulti_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetSystemLibrary_eventBoxTraceMulti_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetSystemLibrary_eventBoxTraceMulti_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIgnoreSelf, KismetSystemLibrary_eventBoxTraceMulti_Parms, bool);
			UProperty* NewProp_bIgnoreSelf = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bIgnoreSelf"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIgnoreSelf, KismetSystemLibrary_eventBoxTraceMulti_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bIgnoreSelf, KismetSystemLibrary_eventBoxTraceMulti_Parms), sizeof(bool), true);
			UProperty* NewProp_OutHits = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutHits"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(OutHits, KismetSystemLibrary_eventBoxTraceMulti_Parms), 0x0000008000000180);
			UProperty* NewProp_OutHits_Inner = new(EC_InternalUseOnlyConstructor, NewProp_OutHits, TEXT("OutHits"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000008000000000, Z_Construct_UScriptStruct_FHitResult());
			UProperty* NewProp_DrawDebugType = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DrawDebugType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(DrawDebugType, KismetSystemLibrary_eventBoxTraceMulti_Parms), 0x0000000000000080, Z_Construct_UEnum_Engine_EDrawDebugTrace());
			UProperty* NewProp_ActorsToIgnore = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ActorsToIgnore, KismetSystemLibrary_eventBoxTraceMulti_Parms), 0x0000000008000182);
			UProperty* NewProp_ActorsToIgnore_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ActorsToIgnore, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTraceComplex, KismetSystemLibrary_eventBoxTraceMulti_Parms, bool);
			UProperty* NewProp_bTraceComplex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTraceComplex"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTraceComplex, KismetSystemLibrary_eventBoxTraceMulti_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bTraceComplex, KismetSystemLibrary_eventBoxTraceMulti_Parms), sizeof(bool), true);
			UProperty* NewProp_TraceChannel = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TraceChannel"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(TraceChannel, KismetSystemLibrary_eventBoxTraceMulti_Parms), 0x0000000000000080, Z_Construct_UEnum_Engine_ETraceTypeQuery());
			UProperty* NewProp_Orientation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Orientation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Orientation, KismetSystemLibrary_eventBoxTraceMulti_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_HalfSize = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("HalfSize"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(HalfSize, KismetSystemLibrary_eventBoxTraceMulti_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_End = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("End"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(End, KismetSystemLibrary_eventBoxTraceMulti_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Start = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Start"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Start, KismetSystemLibrary_eventBoxTraceMulti_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventBoxTraceMulti_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AutoCreateRefTerm"), TEXT("ActorsToIgnore"));
			MetaData->SetValue(ReturnFunction, TEXT("bIgnoreSelf"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Collision"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("MultiBoxTraceByChannel"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("sweep"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sweeps a box along the given line and returns all hits encountered.\nThis trace finds the objects that RESPONDS to the given TraceChannel\n\n@param Start                  Start of line segment.\n@param End                    End of line segment.\n@param HalfSize           Distance from the center of box along each axis\n@param Orientation    Orientation of the box\n@param TraceChannel\n@param bTraceComplex  True to test against complex collision, false to test against simplified collision.\n@param OutHits                A list of hits, sorted along the trace from start to finish. The blocking hit will be the last hit, if there was one.\n@return                               True if there was a blocking hit, false otherwise."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_BoxTraceMultiForObjects()
	{
		struct KismetSystemLibrary_eventBoxTraceMultiForObjects_Parms
		{
			UObject* WorldContextObject;
			FVector Start;
			FVector End;
			FVector HalfSize;
			FRotator Orientation;
			TArray<TEnumAsByte<EObjectTypeQuery> > ObjectTypes;
			bool bTraceComplex;
			TArray<AActor*> ActorsToIgnore;
			TEnumAsByte<EDrawDebugTrace::Type> DrawDebugType;
			TArray<FHitResult> OutHits;
			bool bIgnoreSelf;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BoxTraceMultiForObjects"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(KismetSystemLibrary_eventBoxTraceMultiForObjects_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetSystemLibrary_eventBoxTraceMultiForObjects_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetSystemLibrary_eventBoxTraceMultiForObjects_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetSystemLibrary_eventBoxTraceMultiForObjects_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIgnoreSelf, KismetSystemLibrary_eventBoxTraceMultiForObjects_Parms, bool);
			UProperty* NewProp_bIgnoreSelf = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bIgnoreSelf"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIgnoreSelf, KismetSystemLibrary_eventBoxTraceMultiForObjects_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bIgnoreSelf, KismetSystemLibrary_eventBoxTraceMultiForObjects_Parms), sizeof(bool), true);
			UProperty* NewProp_OutHits = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutHits"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(OutHits, KismetSystemLibrary_eventBoxTraceMultiForObjects_Parms), 0x0000008000000180);
			UProperty* NewProp_OutHits_Inner = new(EC_InternalUseOnlyConstructor, NewProp_OutHits, TEXT("OutHits"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000008000000000, Z_Construct_UScriptStruct_FHitResult());
			UProperty* NewProp_DrawDebugType = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DrawDebugType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(DrawDebugType, KismetSystemLibrary_eventBoxTraceMultiForObjects_Parms), 0x0000000000000080, Z_Construct_UEnum_Engine_EDrawDebugTrace());
			UProperty* NewProp_ActorsToIgnore = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ActorsToIgnore, KismetSystemLibrary_eventBoxTraceMultiForObjects_Parms), 0x0000000008000182);
			UProperty* NewProp_ActorsToIgnore_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ActorsToIgnore, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTraceComplex, KismetSystemLibrary_eventBoxTraceMultiForObjects_Parms, bool);
			UProperty* NewProp_bTraceComplex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTraceComplex"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTraceComplex, KismetSystemLibrary_eventBoxTraceMultiForObjects_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bTraceComplex, KismetSystemLibrary_eventBoxTraceMultiForObjects_Parms), sizeof(bool), true);
			UProperty* NewProp_ObjectTypes = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ObjectTypes"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ObjectTypes, KismetSystemLibrary_eventBoxTraceMultiForObjects_Parms), 0x0000000008000182);
			UProperty* NewProp_ObjectTypes_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ObjectTypes, TEXT("ObjectTypes"), RF_Public|RF_Transient|RF_Native) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UEnum_Engine_EObjectTypeQuery());
			UProperty* NewProp_Orientation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Orientation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Orientation, KismetSystemLibrary_eventBoxTraceMultiForObjects_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_HalfSize = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("HalfSize"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(HalfSize, KismetSystemLibrary_eventBoxTraceMultiForObjects_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_End = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("End"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(End, KismetSystemLibrary_eventBoxTraceMultiForObjects_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Start = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Start"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Start, KismetSystemLibrary_eventBoxTraceMultiForObjects_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventBoxTraceMultiForObjects_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AutoCreateRefTerm"), TEXT("ActorsToIgnore"));
			MetaData->SetValue(ReturnFunction, TEXT("bIgnoreSelf"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Collision"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("MultiBoxTraceForObjects"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("sweep"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sweeps a box along the given line and returns all hits encountered.\nThis only finds objects that are of a type specified by ObjectTypes.\n\n@param Start                  Start of line segment.\n@param End                    End of line segment.\n@param Orientation\n@param HalfSize               Radius of the sphere to sweep\n@param ObjectTypes    Array of Object Types to trace\n@param bTraceComplex  True to test against complex collision, false to test against simplified collision.\n@param OutHits                A list of hits, sorted along the trace from start to finish.  The blocking hit will be the last hit, if there was one.\n@return                               True if there was a hit, false otherwise."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_BoxTraceSingle()
	{
		struct KismetSystemLibrary_eventBoxTraceSingle_Parms
		{
			UObject* WorldContextObject;
			FVector Start;
			FVector End;
			FVector HalfSize;
			FRotator Orientation;
			TEnumAsByte<ETraceTypeQuery> TraceChannel;
			bool bTraceComplex;
			TArray<AActor*> ActorsToIgnore;
			TEnumAsByte<EDrawDebugTrace::Type> DrawDebugType;
			FHitResult OutHit;
			bool bIgnoreSelf;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BoxTraceSingle"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(KismetSystemLibrary_eventBoxTraceSingle_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetSystemLibrary_eventBoxTraceSingle_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetSystemLibrary_eventBoxTraceSingle_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetSystemLibrary_eventBoxTraceSingle_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIgnoreSelf, KismetSystemLibrary_eventBoxTraceSingle_Parms, bool);
			UProperty* NewProp_bIgnoreSelf = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bIgnoreSelf"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIgnoreSelf, KismetSystemLibrary_eventBoxTraceSingle_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bIgnoreSelf, KismetSystemLibrary_eventBoxTraceSingle_Parms), sizeof(bool), true);
			UProperty* NewProp_OutHit = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutHit"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(OutHit, KismetSystemLibrary_eventBoxTraceSingle_Parms), 0x0000008000000180, Z_Construct_UScriptStruct_FHitResult());
			UProperty* NewProp_DrawDebugType = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DrawDebugType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(DrawDebugType, KismetSystemLibrary_eventBoxTraceSingle_Parms), 0x0000000000000080, Z_Construct_UEnum_Engine_EDrawDebugTrace());
			UProperty* NewProp_ActorsToIgnore = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ActorsToIgnore, KismetSystemLibrary_eventBoxTraceSingle_Parms), 0x0000000008000182);
			UProperty* NewProp_ActorsToIgnore_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ActorsToIgnore, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTraceComplex, KismetSystemLibrary_eventBoxTraceSingle_Parms, bool);
			UProperty* NewProp_bTraceComplex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTraceComplex"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTraceComplex, KismetSystemLibrary_eventBoxTraceSingle_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bTraceComplex, KismetSystemLibrary_eventBoxTraceSingle_Parms), sizeof(bool), true);
			UProperty* NewProp_TraceChannel = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TraceChannel"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(TraceChannel, KismetSystemLibrary_eventBoxTraceSingle_Parms), 0x0000000000000080, Z_Construct_UEnum_Engine_ETraceTypeQuery());
			UProperty* NewProp_Orientation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Orientation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Orientation, KismetSystemLibrary_eventBoxTraceSingle_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_HalfSize = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("HalfSize"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(HalfSize, KismetSystemLibrary_eventBoxTraceSingle_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_End = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("End"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(End, KismetSystemLibrary_eventBoxTraceSingle_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Start = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Start"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Start, KismetSystemLibrary_eventBoxTraceSingle_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventBoxTraceSingle_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AutoCreateRefTerm"), TEXT("ActorsToIgnore"));
			MetaData->SetValue(ReturnFunction, TEXT("bIgnoreSelf"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Collision"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("BoxTraceByChannel"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("sweep"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sweeps a box along the given line and returns the first blocking hit encountered.\nThis trace finds the objects that RESPONDS to the given TraceChannel\n\n@param Start                  Start of line segment.\n@param End                    End of line segment.\n@param HalfSize           Distance from the center of box along each axis\n@param Orientation    Orientation of the box\n@param TraceChannel\n@param bTraceComplex  True to test against complex collision, false to test against simplified collision.\n@param OutHit                 Properties of the trace hit.\n@return                               True if there was a hit, false otherwise."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_BoxTraceSingleForObjects()
	{
		struct KismetSystemLibrary_eventBoxTraceSingleForObjects_Parms
		{
			UObject* WorldContextObject;
			FVector Start;
			FVector End;
			FVector HalfSize;
			FRotator Orientation;
			TArray<TEnumAsByte<EObjectTypeQuery> > ObjectTypes;
			bool bTraceComplex;
			TArray<AActor*> ActorsToIgnore;
			TEnumAsByte<EDrawDebugTrace::Type> DrawDebugType;
			FHitResult OutHit;
			bool bIgnoreSelf;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BoxTraceSingleForObjects"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(KismetSystemLibrary_eventBoxTraceSingleForObjects_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetSystemLibrary_eventBoxTraceSingleForObjects_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetSystemLibrary_eventBoxTraceSingleForObjects_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetSystemLibrary_eventBoxTraceSingleForObjects_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIgnoreSelf, KismetSystemLibrary_eventBoxTraceSingleForObjects_Parms, bool);
			UProperty* NewProp_bIgnoreSelf = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bIgnoreSelf"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIgnoreSelf, KismetSystemLibrary_eventBoxTraceSingleForObjects_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bIgnoreSelf, KismetSystemLibrary_eventBoxTraceSingleForObjects_Parms), sizeof(bool), true);
			UProperty* NewProp_OutHit = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutHit"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(OutHit, KismetSystemLibrary_eventBoxTraceSingleForObjects_Parms), 0x0000008000000180, Z_Construct_UScriptStruct_FHitResult());
			UProperty* NewProp_DrawDebugType = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DrawDebugType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(DrawDebugType, KismetSystemLibrary_eventBoxTraceSingleForObjects_Parms), 0x0000000000000080, Z_Construct_UEnum_Engine_EDrawDebugTrace());
			UProperty* NewProp_ActorsToIgnore = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ActorsToIgnore, KismetSystemLibrary_eventBoxTraceSingleForObjects_Parms), 0x0000000008000182);
			UProperty* NewProp_ActorsToIgnore_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ActorsToIgnore, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTraceComplex, KismetSystemLibrary_eventBoxTraceSingleForObjects_Parms, bool);
			UProperty* NewProp_bTraceComplex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTraceComplex"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTraceComplex, KismetSystemLibrary_eventBoxTraceSingleForObjects_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bTraceComplex, KismetSystemLibrary_eventBoxTraceSingleForObjects_Parms), sizeof(bool), true);
			UProperty* NewProp_ObjectTypes = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ObjectTypes"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ObjectTypes, KismetSystemLibrary_eventBoxTraceSingleForObjects_Parms), 0x0000000008000182);
			UProperty* NewProp_ObjectTypes_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ObjectTypes, TEXT("ObjectTypes"), RF_Public|RF_Transient|RF_Native) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UEnum_Engine_EObjectTypeQuery());
			UProperty* NewProp_Orientation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Orientation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Orientation, KismetSystemLibrary_eventBoxTraceSingleForObjects_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_HalfSize = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("HalfSize"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(HalfSize, KismetSystemLibrary_eventBoxTraceSingleForObjects_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_End = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("End"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(End, KismetSystemLibrary_eventBoxTraceSingleForObjects_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Start = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Start"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Start, KismetSystemLibrary_eventBoxTraceSingleForObjects_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventBoxTraceSingleForObjects_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AutoCreateRefTerm"), TEXT("ActorsToIgnore"));
			MetaData->SetValue(ReturnFunction, TEXT("bIgnoreSelf"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Collision"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("BoxTraceForObjects"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("sweep"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sweeps a box along the given line and returns the first hit encountered.\nThis only finds objects that are of a type specified by ObjectTypes.\n\n@param Start                  Start of line segment.\n@param End                    End of line segment.\n@param Orientation\n@param HalfSize               Radius of the sphere to sweep\n@param ObjectTypes    Array of Object Types to trace\n@param bTraceComplex  True to test against complex collision, false to test against simplified collision.\n@param OutHit                 Properties of the trace hit.\n@return                               True if there was a hit, false otherwise."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_CapsuleOverlapActors_DEPRECATED()
	{
		struct KismetSystemLibrary_eventCapsuleOverlapActors_DEPRECATED_Parms
		{
			UObject* WorldContextObject;
			FVector CapsulePos;
			float Radius;
			float HalfHeight;
			TEnumAsByte<EOverlapFilterOption> Filter;
			UClass* ActorClassFilter;
			TArray<AActor*> ActorsToIgnore;
			TArray<AActor*> OutActors;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CapsuleOverlapActors_DEPRECATED"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(KismetSystemLibrary_eventCapsuleOverlapActors_DEPRECATED_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetSystemLibrary_eventCapsuleOverlapActors_DEPRECATED_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetSystemLibrary_eventCapsuleOverlapActors_DEPRECATED_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetSystemLibrary_eventCapsuleOverlapActors_DEPRECATED_Parms), sizeof(bool), true);
			UProperty* NewProp_OutActors = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutActors"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(OutActors, KismetSystemLibrary_eventCapsuleOverlapActors_DEPRECATED_Parms), 0x0000000000000180);
			UProperty* NewProp_OutActors_Inner = new(EC_InternalUseOnlyConstructor, NewProp_OutActors, TEXT("OutActors"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_ActorsToIgnore = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ActorsToIgnore, KismetSystemLibrary_eventCapsuleOverlapActors_DEPRECATED_Parms), 0x0000000008000182);
			UProperty* NewProp_ActorsToIgnore_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ActorsToIgnore, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_ActorClassFilter = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActorClassFilter"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(ActorClassFilter, KismetSystemLibrary_eventCapsuleOverlapActors_DEPRECATED_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			UProperty* NewProp_Filter = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Filter"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(Filter, KismetSystemLibrary_eventCapsuleOverlapActors_DEPRECATED_Parms), 0x0000000000000080, Z_Construct_UEnum_Engine_EOverlapFilterOption());
			UProperty* NewProp_HalfHeight = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("HalfHeight"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(HalfHeight, KismetSystemLibrary_eventCapsuleOverlapActors_DEPRECATED_Parms), 0x0000000000000080);
			UProperty* NewProp_Radius = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Radius"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Radius, KismetSystemLibrary_eventCapsuleOverlapActors_DEPRECATED_Parms), 0x0000000000000080);
			UProperty* NewProp_CapsulePos = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CapsulePos"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(CapsulePos, KismetSystemLibrary_eventCapsuleOverlapActors_DEPRECATED_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventCapsuleOverlapActors_DEPRECATED_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AutoCreateRefTerm"), TEXT("ActorsToIgnore"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Collision"));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecatedFunction"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecationMessage"), TEXT("Use new CapsuleOverlapActors"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_CapsuleOverlapActors_NEW()
	{
		struct KismetSystemLibrary_eventCapsuleOverlapActors_NEW_Parms
		{
			UObject* WorldContextObject;
			FVector CapsulePos;
			float Radius;
			float HalfHeight;
			TArray<TEnumAsByte<EObjectTypeQuery> > ObjectTypes;
			UClass* ActorClassFilter;
			TArray<AActor*> ActorsToIgnore;
			TArray<AActor*> OutActors;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CapsuleOverlapActors_NEW"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(KismetSystemLibrary_eventCapsuleOverlapActors_NEW_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetSystemLibrary_eventCapsuleOverlapActors_NEW_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetSystemLibrary_eventCapsuleOverlapActors_NEW_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetSystemLibrary_eventCapsuleOverlapActors_NEW_Parms), sizeof(bool), true);
			UProperty* NewProp_OutActors = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutActors"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(OutActors, KismetSystemLibrary_eventCapsuleOverlapActors_NEW_Parms), 0x0000000000000180);
			UProperty* NewProp_OutActors_Inner = new(EC_InternalUseOnlyConstructor, NewProp_OutActors, TEXT("OutActors"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_ActorsToIgnore = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ActorsToIgnore, KismetSystemLibrary_eventCapsuleOverlapActors_NEW_Parms), 0x0000000008000182);
			UProperty* NewProp_ActorsToIgnore_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ActorsToIgnore, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_ActorClassFilter = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActorClassFilter"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(ActorClassFilter, KismetSystemLibrary_eventCapsuleOverlapActors_NEW_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			UProperty* NewProp_ObjectTypes = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ObjectTypes"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ObjectTypes, KismetSystemLibrary_eventCapsuleOverlapActors_NEW_Parms), 0x0000000008000182);
			UProperty* NewProp_ObjectTypes_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ObjectTypes, TEXT("ObjectTypes"), RF_Public|RF_Transient|RF_Native) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UEnum_Engine_EObjectTypeQuery());
			UProperty* NewProp_HalfHeight = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("HalfHeight"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(HalfHeight, KismetSystemLibrary_eventCapsuleOverlapActors_NEW_Parms), 0x0000000000000080);
			UProperty* NewProp_Radius = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Radius"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Radius, KismetSystemLibrary_eventCapsuleOverlapActors_NEW_Parms), 0x0000000000000080);
			UProperty* NewProp_CapsulePos = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CapsulePos"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(CapsulePos, KismetSystemLibrary_eventCapsuleOverlapActors_NEW_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventCapsuleOverlapActors_NEW_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AutoCreateRefTerm"), TEXT("ActorsToIgnore"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Collision"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("CapsuleOverlapActors"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns an array of actors that overlap the given capsule.\n@param WorldContext  World context\n@param CapsulePos    Center of the capsule.\n@param Radius                Radius of capsule hemispheres and radius of center cylinder portion.\n@param HalfHeight    Half-height of the capsule (from center of capsule to tip of hemisphere.\n@param Filter                Option to restrict results to only static or only dynamic.  For efficiency.\n@param ClassFilter   If set, will only return results of this class or subclasses of it.\n@param ActorsToIgnore                Ignore these actors in the list\n@param OutActors             Returned array of actors. Unsorted.\n@return                              true if there was an overlap that passed the filters, false otherwise."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_CapsuleOverlapComponents_DEPRECATED()
	{
		struct KismetSystemLibrary_eventCapsuleOverlapComponents_DEPRECATED_Parms
		{
			UObject* WorldContextObject;
			FVector CapsulePos;
			float Radius;
			float HalfHeight;
			TEnumAsByte<EOverlapFilterOption> Filter;
			UClass* ComponentClassFilter;
			TArray<AActor*> ActorsToIgnore;
			TArray<UPrimitiveComponent*> OutComponents;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CapsuleOverlapComponents_DEPRECATED"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(KismetSystemLibrary_eventCapsuleOverlapComponents_DEPRECATED_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetSystemLibrary_eventCapsuleOverlapComponents_DEPRECATED_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetSystemLibrary_eventCapsuleOverlapComponents_DEPRECATED_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetSystemLibrary_eventCapsuleOverlapComponents_DEPRECATED_Parms), sizeof(bool), true);
			UProperty* NewProp_OutComponents = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutComponents"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(OutComponents, KismetSystemLibrary_eventCapsuleOverlapComponents_DEPRECATED_Parms), 0x0000008000000180);
			UProperty* NewProp_OutComponents_Inner = new(EC_InternalUseOnlyConstructor, NewProp_OutComponents, TEXT("OutComponents"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000080000, Z_Construct_UClass_UPrimitiveComponent_NoRegister());
			UProperty* NewProp_ActorsToIgnore = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ActorsToIgnore, KismetSystemLibrary_eventCapsuleOverlapComponents_DEPRECATED_Parms), 0x0000000008000182);
			UProperty* NewProp_ActorsToIgnore_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ActorsToIgnore, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_ComponentClassFilter = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ComponentClassFilter"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(ComponentClassFilter, KismetSystemLibrary_eventCapsuleOverlapComponents_DEPRECATED_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			UProperty* NewProp_Filter = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Filter"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(Filter, KismetSystemLibrary_eventCapsuleOverlapComponents_DEPRECATED_Parms), 0x0000000000000080, Z_Construct_UEnum_Engine_EOverlapFilterOption());
			UProperty* NewProp_HalfHeight = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("HalfHeight"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(HalfHeight, KismetSystemLibrary_eventCapsuleOverlapComponents_DEPRECATED_Parms), 0x0000000000000080);
			UProperty* NewProp_Radius = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Radius"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Radius, KismetSystemLibrary_eventCapsuleOverlapComponents_DEPRECATED_Parms), 0x0000000000000080);
			UProperty* NewProp_CapsulePos = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CapsulePos"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(CapsulePos, KismetSystemLibrary_eventCapsuleOverlapComponents_DEPRECATED_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventCapsuleOverlapComponents_DEPRECATED_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AutoCreateRefTerm"), TEXT("ActorsToIgnore"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Collision"));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecatedFunction"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecationMessage"), TEXT("Use new CapsuleOverlapComponents"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
			MetaData->SetValue(NewProp_OutComponents, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_CapsuleOverlapComponents_NEW()
	{
		struct KismetSystemLibrary_eventCapsuleOverlapComponents_NEW_Parms
		{
			UObject* WorldContextObject;
			FVector CapsulePos;
			float Radius;
			float HalfHeight;
			TArray<TEnumAsByte<EObjectTypeQuery> > ObjectTypes;
			UClass* ComponentClassFilter;
			TArray<AActor*> ActorsToIgnore;
			TArray<UPrimitiveComponent*> OutComponents;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CapsuleOverlapComponents_NEW"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(KismetSystemLibrary_eventCapsuleOverlapComponents_NEW_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetSystemLibrary_eventCapsuleOverlapComponents_NEW_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetSystemLibrary_eventCapsuleOverlapComponents_NEW_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetSystemLibrary_eventCapsuleOverlapComponents_NEW_Parms), sizeof(bool), true);
			UProperty* NewProp_OutComponents = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutComponents"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(OutComponents, KismetSystemLibrary_eventCapsuleOverlapComponents_NEW_Parms), 0x0000008000000180);
			UProperty* NewProp_OutComponents_Inner = new(EC_InternalUseOnlyConstructor, NewProp_OutComponents, TEXT("OutComponents"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000080000, Z_Construct_UClass_UPrimitiveComponent_NoRegister());
			UProperty* NewProp_ActorsToIgnore = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ActorsToIgnore, KismetSystemLibrary_eventCapsuleOverlapComponents_NEW_Parms), 0x0000000008000182);
			UProperty* NewProp_ActorsToIgnore_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ActorsToIgnore, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_ComponentClassFilter = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ComponentClassFilter"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(ComponentClassFilter, KismetSystemLibrary_eventCapsuleOverlapComponents_NEW_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			UProperty* NewProp_ObjectTypes = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ObjectTypes"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ObjectTypes, KismetSystemLibrary_eventCapsuleOverlapComponents_NEW_Parms), 0x0000000008000182);
			UProperty* NewProp_ObjectTypes_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ObjectTypes, TEXT("ObjectTypes"), RF_Public|RF_Transient|RF_Native) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UEnum_Engine_EObjectTypeQuery());
			UProperty* NewProp_HalfHeight = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("HalfHeight"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(HalfHeight, KismetSystemLibrary_eventCapsuleOverlapComponents_NEW_Parms), 0x0000000000000080);
			UProperty* NewProp_Radius = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Radius"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Radius, KismetSystemLibrary_eventCapsuleOverlapComponents_NEW_Parms), 0x0000000000000080);
			UProperty* NewProp_CapsulePos = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CapsulePos"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(CapsulePos, KismetSystemLibrary_eventCapsuleOverlapComponents_NEW_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventCapsuleOverlapComponents_NEW_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AutoCreateRefTerm"), TEXT("ActorsToIgnore"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Collision"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("CapsuleOverlapComponents"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns an array of components that overlap the given capsule.\n@param WorldContext  World context\n@param CapsulePos    Center of the capsule.\n@param Radius                Radius of capsule hemispheres and radius of center cylinder portion.\n@param HalfHeight    Half-height of the capsule (from center of capsule to tip of hemisphere.\n@param Filter                Option to restrict results to only static or only dynamic.  For efficiency.\n@param ClassFilter   If set, will only return results of this class or subclasses of it.\n@param ActorsToIgnore                Ignore these actors in the list\n@param OutActors             Returned array of actors. Unsorted.\n@return                              true if there was an overlap that passed the filters, false otherwise."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
			MetaData->SetValue(NewProp_OutComponents, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_CapsuleTraceMulti_DEPRECATED()
	{
		struct KismetSystemLibrary_eventCapsuleTraceMulti_DEPRECATED_Parms
		{
			UObject* WorldContextObject;
			FVector Start;
			FVector End;
			float Radius;
			float HalfHeight;
			TEnumAsByte<ECollisionChannel> TraceChannel;
			bool bTraceComplex;
			TArray<AActor*> ActorsToIgnore;
			TEnumAsByte<EDrawDebugTrace::Type> DrawDebugType;
			TArray<FHitResult> OutHits;
			bool bIgnoreSelf;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CapsuleTraceMulti_DEPRECATED"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(KismetSystemLibrary_eventCapsuleTraceMulti_DEPRECATED_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetSystemLibrary_eventCapsuleTraceMulti_DEPRECATED_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetSystemLibrary_eventCapsuleTraceMulti_DEPRECATED_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetSystemLibrary_eventCapsuleTraceMulti_DEPRECATED_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIgnoreSelf, KismetSystemLibrary_eventCapsuleTraceMulti_DEPRECATED_Parms, bool);
			UProperty* NewProp_bIgnoreSelf = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bIgnoreSelf"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIgnoreSelf, KismetSystemLibrary_eventCapsuleTraceMulti_DEPRECATED_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bIgnoreSelf, KismetSystemLibrary_eventCapsuleTraceMulti_DEPRECATED_Parms), sizeof(bool), true);
			UProperty* NewProp_OutHits = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutHits"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(OutHits, KismetSystemLibrary_eventCapsuleTraceMulti_DEPRECATED_Parms), 0x0000008000000180);
			UProperty* NewProp_OutHits_Inner = new(EC_InternalUseOnlyConstructor, NewProp_OutHits, TEXT("OutHits"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000008000000000, Z_Construct_UScriptStruct_FHitResult());
			UProperty* NewProp_DrawDebugType = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DrawDebugType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(DrawDebugType, KismetSystemLibrary_eventCapsuleTraceMulti_DEPRECATED_Parms), 0x0000000000000080, Z_Construct_UEnum_Engine_EDrawDebugTrace());
			UProperty* NewProp_ActorsToIgnore = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ActorsToIgnore, KismetSystemLibrary_eventCapsuleTraceMulti_DEPRECATED_Parms), 0x0000000008000182);
			UProperty* NewProp_ActorsToIgnore_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ActorsToIgnore, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTraceComplex, KismetSystemLibrary_eventCapsuleTraceMulti_DEPRECATED_Parms, bool);
			UProperty* NewProp_bTraceComplex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTraceComplex"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTraceComplex, KismetSystemLibrary_eventCapsuleTraceMulti_DEPRECATED_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bTraceComplex, KismetSystemLibrary_eventCapsuleTraceMulti_DEPRECATED_Parms), sizeof(bool), true);
			UProperty* NewProp_TraceChannel = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TraceChannel"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(TraceChannel, KismetSystemLibrary_eventCapsuleTraceMulti_DEPRECATED_Parms), 0x0000000000000080, Z_Construct_UEnum_Engine_ECollisionChannel());
			UProperty* NewProp_HalfHeight = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("HalfHeight"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(HalfHeight, KismetSystemLibrary_eventCapsuleTraceMulti_DEPRECATED_Parms), 0x0000000000000080);
			UProperty* NewProp_Radius = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Radius"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Radius, KismetSystemLibrary_eventCapsuleTraceMulti_DEPRECATED_Parms), 0x0000000000000080);
			UProperty* NewProp_End = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("End"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(End, KismetSystemLibrary_eventCapsuleTraceMulti_DEPRECATED_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Start = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Start"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Start, KismetSystemLibrary_eventCapsuleTraceMulti_DEPRECATED_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventCapsuleTraceMulti_DEPRECATED_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AutoCreateRefTerm"), TEXT("ActorsToIgnore"));
			MetaData->SetValue(ReturnFunction, TEXT("bIgnoreSelf"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Collision"));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecatedFunction"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecationMessage"), TEXT("Use new MultiCapsuleTraceByChannel"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("MultiCapsuleTraceByChannelDeprecated"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sweeps a capsule along the given line and returns all hits encountered up to and including the first blocking hit.\nThis trace finds the objects that RESPONDS to the given TraceChannel\n\n@param WorldContext  World context\n@param Start                 Start of line segment.\n@param End                   End of line segment.\n@param Radius                Radius of the capsule to sweep\n@param HalfHeight    Distance from center of capsule to tip of hemisphere endcap.\n@param TraceChannel\n@param bTraceComplex True to test against complex collision, false to test against simplified collision.\n@param OutHits               A list of hits, sorted along the trace from start to finish.  The blocking hit will be the last hit, if there was one.\n@return                              True if there was a hit, false otherwise."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_CapsuleTraceMulti_NEW()
	{
		struct KismetSystemLibrary_eventCapsuleTraceMulti_NEW_Parms
		{
			UObject* WorldContextObject;
			FVector Start;
			FVector End;
			float Radius;
			float HalfHeight;
			TEnumAsByte<ETraceTypeQuery> TraceChannel;
			bool bTraceComplex;
			TArray<AActor*> ActorsToIgnore;
			TEnumAsByte<EDrawDebugTrace::Type> DrawDebugType;
			TArray<FHitResult> OutHits;
			bool bIgnoreSelf;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CapsuleTraceMulti_NEW"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(KismetSystemLibrary_eventCapsuleTraceMulti_NEW_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetSystemLibrary_eventCapsuleTraceMulti_NEW_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetSystemLibrary_eventCapsuleTraceMulti_NEW_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetSystemLibrary_eventCapsuleTraceMulti_NEW_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIgnoreSelf, KismetSystemLibrary_eventCapsuleTraceMulti_NEW_Parms, bool);
			UProperty* NewProp_bIgnoreSelf = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bIgnoreSelf"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIgnoreSelf, KismetSystemLibrary_eventCapsuleTraceMulti_NEW_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bIgnoreSelf, KismetSystemLibrary_eventCapsuleTraceMulti_NEW_Parms), sizeof(bool), true);
			UProperty* NewProp_OutHits = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutHits"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(OutHits, KismetSystemLibrary_eventCapsuleTraceMulti_NEW_Parms), 0x0000008000000180);
			UProperty* NewProp_OutHits_Inner = new(EC_InternalUseOnlyConstructor, NewProp_OutHits, TEXT("OutHits"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000008000000000, Z_Construct_UScriptStruct_FHitResult());
			UProperty* NewProp_DrawDebugType = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DrawDebugType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(DrawDebugType, KismetSystemLibrary_eventCapsuleTraceMulti_NEW_Parms), 0x0000000000000080, Z_Construct_UEnum_Engine_EDrawDebugTrace());
			UProperty* NewProp_ActorsToIgnore = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ActorsToIgnore, KismetSystemLibrary_eventCapsuleTraceMulti_NEW_Parms), 0x0000000008000182);
			UProperty* NewProp_ActorsToIgnore_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ActorsToIgnore, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTraceComplex, KismetSystemLibrary_eventCapsuleTraceMulti_NEW_Parms, bool);
			UProperty* NewProp_bTraceComplex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTraceComplex"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTraceComplex, KismetSystemLibrary_eventCapsuleTraceMulti_NEW_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bTraceComplex, KismetSystemLibrary_eventCapsuleTraceMulti_NEW_Parms), sizeof(bool), true);
			UProperty* NewProp_TraceChannel = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TraceChannel"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(TraceChannel, KismetSystemLibrary_eventCapsuleTraceMulti_NEW_Parms), 0x0000000000000080, Z_Construct_UEnum_Engine_ETraceTypeQuery());
			UProperty* NewProp_HalfHeight = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("HalfHeight"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(HalfHeight, KismetSystemLibrary_eventCapsuleTraceMulti_NEW_Parms), 0x0000000000000080);
			UProperty* NewProp_Radius = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Radius"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Radius, KismetSystemLibrary_eventCapsuleTraceMulti_NEW_Parms), 0x0000000000000080);
			UProperty* NewProp_End = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("End"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(End, KismetSystemLibrary_eventCapsuleTraceMulti_NEW_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Start = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Start"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Start, KismetSystemLibrary_eventCapsuleTraceMulti_NEW_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventCapsuleTraceMulti_NEW_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AutoCreateRefTerm"), TEXT("ActorsToIgnore"));
			MetaData->SetValue(ReturnFunction, TEXT("bIgnoreSelf"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Collision"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("MultiCapsuleTraceByChannel"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("sweep"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sweeps a capsule along the given line and returns all hits encountered up to and including the first blocking hit.\nThis trace finds the objects that RESPOND to the given TraceChannel\n\n@param WorldContext  World context\n@param Start                 Start of line segment.\n@param End                   End of line segment.\n@param Radius                Radius of the capsule to sweep\n@param HalfHeight    Distance from center of capsule to tip of hemisphere endcap.\n@param TraceChannel\n@param bTraceComplex True to test against complex collision, false to test against simplified collision.\n@param OutHits               A list of hits, sorted along the trace from start to finish.  The blocking hit will be the last hit, if there was one.\n@return                              True if there was a blocking hit, false otherwise."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_CapsuleTraceMultiByObject_DEPRECATED()
	{
		struct KismetSystemLibrary_eventCapsuleTraceMultiByObject_DEPRECATED_Parms
		{
			UObject* WorldContextObject;
			FVector Start;
			FVector End;
			float Radius;
			float HalfHeight;
			TArray<TEnumAsByte<ECollisionChannel> > ObjectsToTrace;
			bool bTraceComplex;
			TArray<AActor*> ActorsToIgnore;
			TEnumAsByte<EDrawDebugTrace::Type> DrawDebugType;
			TArray<FHitResult> OutHits;
			bool bIgnoreSelf;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CapsuleTraceMultiByObject_DEPRECATED"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(KismetSystemLibrary_eventCapsuleTraceMultiByObject_DEPRECATED_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetSystemLibrary_eventCapsuleTraceMultiByObject_DEPRECATED_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetSystemLibrary_eventCapsuleTraceMultiByObject_DEPRECATED_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetSystemLibrary_eventCapsuleTraceMultiByObject_DEPRECATED_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIgnoreSelf, KismetSystemLibrary_eventCapsuleTraceMultiByObject_DEPRECATED_Parms, bool);
			UProperty* NewProp_bIgnoreSelf = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bIgnoreSelf"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIgnoreSelf, KismetSystemLibrary_eventCapsuleTraceMultiByObject_DEPRECATED_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bIgnoreSelf, KismetSystemLibrary_eventCapsuleTraceMultiByObject_DEPRECATED_Parms), sizeof(bool), true);
			UProperty* NewProp_OutHits = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutHits"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(OutHits, KismetSystemLibrary_eventCapsuleTraceMultiByObject_DEPRECATED_Parms), 0x0000008000000180);
			UProperty* NewProp_OutHits_Inner = new(EC_InternalUseOnlyConstructor, NewProp_OutHits, TEXT("OutHits"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000008000000000, Z_Construct_UScriptStruct_FHitResult());
			UProperty* NewProp_DrawDebugType = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DrawDebugType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(DrawDebugType, KismetSystemLibrary_eventCapsuleTraceMultiByObject_DEPRECATED_Parms), 0x0000000000000080, Z_Construct_UEnum_Engine_EDrawDebugTrace());
			UProperty* NewProp_ActorsToIgnore = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ActorsToIgnore, KismetSystemLibrary_eventCapsuleTraceMultiByObject_DEPRECATED_Parms), 0x0000000008000182);
			UProperty* NewProp_ActorsToIgnore_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ActorsToIgnore, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTraceComplex, KismetSystemLibrary_eventCapsuleTraceMultiByObject_DEPRECATED_Parms, bool);
			UProperty* NewProp_bTraceComplex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTraceComplex"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTraceComplex, KismetSystemLibrary_eventCapsuleTraceMultiByObject_DEPRECATED_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bTraceComplex, KismetSystemLibrary_eventCapsuleTraceMultiByObject_DEPRECATED_Parms), sizeof(bool), true);
			UProperty* NewProp_ObjectsToTrace = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ObjectsToTrace"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ObjectsToTrace, KismetSystemLibrary_eventCapsuleTraceMultiByObject_DEPRECATED_Parms), 0x0000000008000182);
			UProperty* NewProp_ObjectsToTrace_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ObjectsToTrace, TEXT("ObjectsToTrace"), RF_Public|RF_Transient|RF_Native) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UEnum_Engine_ECollisionChannel());
			UProperty* NewProp_HalfHeight = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("HalfHeight"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(HalfHeight, KismetSystemLibrary_eventCapsuleTraceMultiByObject_DEPRECATED_Parms), 0x0000000000000080);
			UProperty* NewProp_Radius = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Radius"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Radius, KismetSystemLibrary_eventCapsuleTraceMultiByObject_DEPRECATED_Parms), 0x0000000000000080);
			UProperty* NewProp_End = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("End"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(End, KismetSystemLibrary_eventCapsuleTraceMultiByObject_DEPRECATED_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Start = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Start"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Start, KismetSystemLibrary_eventCapsuleTraceMultiByObject_DEPRECATED_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventCapsuleTraceMultiByObject_DEPRECATED_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AutoCreateRefTerm"), TEXT("ActorsToIgnore"));
			MetaData->SetValue(ReturnFunction, TEXT("bIgnoreSelf"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Collision"));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecatedFunction"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecationMessage"), TEXT("Use new MultiCapsuleTraceForObjects"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("MultiCapsuleTraceByObjectDeprecated"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sweeps a capsule along the given line and returns all hits encountered.\nThis finds objects belonging to the channels specified in the ObjectsToTrace input.\n\n@param WorldContext  World context\n@param Start                 Start of line segment.\n@param End                   End of line segment.\n@param Radius                Radius of the capsule to sweep\n@param HalfHeight    Distance from center of capsule to tip of hemisphere endcap.\n@param ObjectsToTrace        Array of Object Types to trace\n@param bTraceComplex True to test against complex collision, false to test against simplified collision.\n@param OutHits               A list of hits, sorted along the trace from start to finish.  The blocking hit will be the last hit, if there was one.\n@return                              True if there was a hit, false otherwise."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_CapsuleTraceMultiForObjects()
	{
		struct KismetSystemLibrary_eventCapsuleTraceMultiForObjects_Parms
		{
			UObject* WorldContextObject;
			FVector Start;
			FVector End;
			float Radius;
			float HalfHeight;
			TArray<TEnumAsByte<EObjectTypeQuery> > ObjectTypes;
			bool bTraceComplex;
			TArray<AActor*> ActorsToIgnore;
			TEnumAsByte<EDrawDebugTrace::Type> DrawDebugType;
			TArray<FHitResult> OutHits;
			bool bIgnoreSelf;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CapsuleTraceMultiForObjects"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(KismetSystemLibrary_eventCapsuleTraceMultiForObjects_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetSystemLibrary_eventCapsuleTraceMultiForObjects_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetSystemLibrary_eventCapsuleTraceMultiForObjects_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetSystemLibrary_eventCapsuleTraceMultiForObjects_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIgnoreSelf, KismetSystemLibrary_eventCapsuleTraceMultiForObjects_Parms, bool);
			UProperty* NewProp_bIgnoreSelf = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bIgnoreSelf"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIgnoreSelf, KismetSystemLibrary_eventCapsuleTraceMultiForObjects_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bIgnoreSelf, KismetSystemLibrary_eventCapsuleTraceMultiForObjects_Parms), sizeof(bool), true);
			UProperty* NewProp_OutHits = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutHits"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(OutHits, KismetSystemLibrary_eventCapsuleTraceMultiForObjects_Parms), 0x0000008000000180);
			UProperty* NewProp_OutHits_Inner = new(EC_InternalUseOnlyConstructor, NewProp_OutHits, TEXT("OutHits"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000008000000000, Z_Construct_UScriptStruct_FHitResult());
			UProperty* NewProp_DrawDebugType = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DrawDebugType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(DrawDebugType, KismetSystemLibrary_eventCapsuleTraceMultiForObjects_Parms), 0x0000000000000080, Z_Construct_UEnum_Engine_EDrawDebugTrace());
			UProperty* NewProp_ActorsToIgnore = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ActorsToIgnore, KismetSystemLibrary_eventCapsuleTraceMultiForObjects_Parms), 0x0000000008000182);
			UProperty* NewProp_ActorsToIgnore_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ActorsToIgnore, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTraceComplex, KismetSystemLibrary_eventCapsuleTraceMultiForObjects_Parms, bool);
			UProperty* NewProp_bTraceComplex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTraceComplex"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTraceComplex, KismetSystemLibrary_eventCapsuleTraceMultiForObjects_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bTraceComplex, KismetSystemLibrary_eventCapsuleTraceMultiForObjects_Parms), sizeof(bool), true);
			UProperty* NewProp_ObjectTypes = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ObjectTypes"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ObjectTypes, KismetSystemLibrary_eventCapsuleTraceMultiForObjects_Parms), 0x0000000008000182);
			UProperty* NewProp_ObjectTypes_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ObjectTypes, TEXT("ObjectTypes"), RF_Public|RF_Transient|RF_Native) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UEnum_Engine_EObjectTypeQuery());
			UProperty* NewProp_HalfHeight = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("HalfHeight"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(HalfHeight, KismetSystemLibrary_eventCapsuleTraceMultiForObjects_Parms), 0x0000000000000080);
			UProperty* NewProp_Radius = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Radius"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Radius, KismetSystemLibrary_eventCapsuleTraceMultiForObjects_Parms), 0x0000000000000080);
			UProperty* NewProp_End = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("End"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(End, KismetSystemLibrary_eventCapsuleTraceMultiForObjects_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Start = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Start"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Start, KismetSystemLibrary_eventCapsuleTraceMultiForObjects_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventCapsuleTraceMultiForObjects_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AutoCreateRefTerm"), TEXT("ActorsToIgnore"));
			MetaData->SetValue(ReturnFunction, TEXT("bIgnoreSelf"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Collision"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("MultiCapsuleTraceForObjects"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("sweep"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sweeps a capsule along the given line and returns all hits encountered.\nThis only finds objects that are of a type specified by ObjectTypes.\n\n@param WorldContext  World context\n@param Start                 Start of line segment.\n@param End                   End of line segment.\n@param Radius                Radius of the capsule to sweep\n@param HalfHeight    Distance from center of capsule to tip of hemisphere endcap.\n@param ObjectTypes   Array of Object Types to trace\n@param bTraceComplex True to test against complex collision, false to test against simplified collision.\n@param OutHits               A list of hits, sorted along the trace from start to finish.  The blocking hit will be the last hit, if there was one.\n@return                              True if there was a hit, false otherwise."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_CapsuleTraceSingle_DEPRECATED()
	{
		struct KismetSystemLibrary_eventCapsuleTraceSingle_DEPRECATED_Parms
		{
			UObject* WorldContextObject;
			FVector Start;
			FVector End;
			float Radius;
			float HalfHeight;
			TEnumAsByte<ECollisionChannel> TraceChannel;
			bool bTraceComplex;
			TArray<AActor*> ActorsToIgnore;
			TEnumAsByte<EDrawDebugTrace::Type> DrawDebugType;
			FHitResult OutHit;
			bool bIgnoreSelf;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CapsuleTraceSingle_DEPRECATED"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(KismetSystemLibrary_eventCapsuleTraceSingle_DEPRECATED_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetSystemLibrary_eventCapsuleTraceSingle_DEPRECATED_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetSystemLibrary_eventCapsuleTraceSingle_DEPRECATED_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetSystemLibrary_eventCapsuleTraceSingle_DEPRECATED_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIgnoreSelf, KismetSystemLibrary_eventCapsuleTraceSingle_DEPRECATED_Parms, bool);
			UProperty* NewProp_bIgnoreSelf = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bIgnoreSelf"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIgnoreSelf, KismetSystemLibrary_eventCapsuleTraceSingle_DEPRECATED_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bIgnoreSelf, KismetSystemLibrary_eventCapsuleTraceSingle_DEPRECATED_Parms), sizeof(bool), true);
			UProperty* NewProp_OutHit = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutHit"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(OutHit, KismetSystemLibrary_eventCapsuleTraceSingle_DEPRECATED_Parms), 0x0000008000000180, Z_Construct_UScriptStruct_FHitResult());
			UProperty* NewProp_DrawDebugType = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DrawDebugType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(DrawDebugType, KismetSystemLibrary_eventCapsuleTraceSingle_DEPRECATED_Parms), 0x0000000000000080, Z_Construct_UEnum_Engine_EDrawDebugTrace());
			UProperty* NewProp_ActorsToIgnore = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ActorsToIgnore, KismetSystemLibrary_eventCapsuleTraceSingle_DEPRECATED_Parms), 0x0000000008000182);
			UProperty* NewProp_ActorsToIgnore_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ActorsToIgnore, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTraceComplex, KismetSystemLibrary_eventCapsuleTraceSingle_DEPRECATED_Parms, bool);
			UProperty* NewProp_bTraceComplex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTraceComplex"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTraceComplex, KismetSystemLibrary_eventCapsuleTraceSingle_DEPRECATED_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bTraceComplex, KismetSystemLibrary_eventCapsuleTraceSingle_DEPRECATED_Parms), sizeof(bool), true);
			UProperty* NewProp_TraceChannel = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TraceChannel"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(TraceChannel, KismetSystemLibrary_eventCapsuleTraceSingle_DEPRECATED_Parms), 0x0000000000000080, Z_Construct_UEnum_Engine_ECollisionChannel());
			UProperty* NewProp_HalfHeight = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("HalfHeight"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(HalfHeight, KismetSystemLibrary_eventCapsuleTraceSingle_DEPRECATED_Parms), 0x0000000000000080);
			UProperty* NewProp_Radius = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Radius"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Radius, KismetSystemLibrary_eventCapsuleTraceSingle_DEPRECATED_Parms), 0x0000000000000080);
			UProperty* NewProp_End = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("End"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(End, KismetSystemLibrary_eventCapsuleTraceSingle_DEPRECATED_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Start = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Start"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Start, KismetSystemLibrary_eventCapsuleTraceSingle_DEPRECATED_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventCapsuleTraceSingle_DEPRECATED_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AutoCreateRefTerm"), TEXT("ActorsToIgnore"));
			MetaData->SetValue(ReturnFunction, TEXT("bIgnoreSelf"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Collision"));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecatedFunction"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecationMessage"), TEXT("Use new SingleCapsuleTraceByChannel"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("SingleCapsuleTraceByChannelDeprecated"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sweeps a capsule along the given line and returns the first blocking hit encountered.\nThis trace finds the objects that RESPONDS to the given TraceChannel\n\n@param WorldContext  World context\n@param Start                 Start of line segment.\n@param End                   End of line segment.\n@param Radius                Radius of the capsule to sweep\n@param HalfHeight    Distance from center of capsule to tip of hemisphere endcap.\n@param TraceChannel\n@param bTraceComplex True to test against complex collision, false to test against simplified collision.\n@param OutHit                Properties of the trace hit.\n@return                              True if there was a hit, false otherwise."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_CapsuleTraceSingle_NEW()
	{
		struct KismetSystemLibrary_eventCapsuleTraceSingle_NEW_Parms
		{
			UObject* WorldContextObject;
			FVector Start;
			FVector End;
			float Radius;
			float HalfHeight;
			TEnumAsByte<ETraceTypeQuery> TraceChannel;
			bool bTraceComplex;
			TArray<AActor*> ActorsToIgnore;
			TEnumAsByte<EDrawDebugTrace::Type> DrawDebugType;
			FHitResult OutHit;
			bool bIgnoreSelf;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CapsuleTraceSingle_NEW"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(KismetSystemLibrary_eventCapsuleTraceSingle_NEW_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetSystemLibrary_eventCapsuleTraceSingle_NEW_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetSystemLibrary_eventCapsuleTraceSingle_NEW_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetSystemLibrary_eventCapsuleTraceSingle_NEW_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIgnoreSelf, KismetSystemLibrary_eventCapsuleTraceSingle_NEW_Parms, bool);
			UProperty* NewProp_bIgnoreSelf = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bIgnoreSelf"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIgnoreSelf, KismetSystemLibrary_eventCapsuleTraceSingle_NEW_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bIgnoreSelf, KismetSystemLibrary_eventCapsuleTraceSingle_NEW_Parms), sizeof(bool), true);
			UProperty* NewProp_OutHit = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutHit"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(OutHit, KismetSystemLibrary_eventCapsuleTraceSingle_NEW_Parms), 0x0000008000000180, Z_Construct_UScriptStruct_FHitResult());
			UProperty* NewProp_DrawDebugType = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DrawDebugType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(DrawDebugType, KismetSystemLibrary_eventCapsuleTraceSingle_NEW_Parms), 0x0000000000000080, Z_Construct_UEnum_Engine_EDrawDebugTrace());
			UProperty* NewProp_ActorsToIgnore = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ActorsToIgnore, KismetSystemLibrary_eventCapsuleTraceSingle_NEW_Parms), 0x0000000008000182);
			UProperty* NewProp_ActorsToIgnore_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ActorsToIgnore, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTraceComplex, KismetSystemLibrary_eventCapsuleTraceSingle_NEW_Parms, bool);
			UProperty* NewProp_bTraceComplex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTraceComplex"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTraceComplex, KismetSystemLibrary_eventCapsuleTraceSingle_NEW_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bTraceComplex, KismetSystemLibrary_eventCapsuleTraceSingle_NEW_Parms), sizeof(bool), true);
			UProperty* NewProp_TraceChannel = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TraceChannel"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(TraceChannel, KismetSystemLibrary_eventCapsuleTraceSingle_NEW_Parms), 0x0000000000000080, Z_Construct_UEnum_Engine_ETraceTypeQuery());
			UProperty* NewProp_HalfHeight = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("HalfHeight"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(HalfHeight, KismetSystemLibrary_eventCapsuleTraceSingle_NEW_Parms), 0x0000000000000080);
			UProperty* NewProp_Radius = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Radius"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Radius, KismetSystemLibrary_eventCapsuleTraceSingle_NEW_Parms), 0x0000000000000080);
			UProperty* NewProp_End = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("End"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(End, KismetSystemLibrary_eventCapsuleTraceSingle_NEW_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Start = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Start"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Start, KismetSystemLibrary_eventCapsuleTraceSingle_NEW_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventCapsuleTraceSingle_NEW_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AutoCreateRefTerm"), TEXT("ActorsToIgnore"));
			MetaData->SetValue(ReturnFunction, TEXT("bIgnoreSelf"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Collision"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("CapsuleTraceByChannel"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("sweep"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sweeps a capsule along the given line and returns the first blocking hit encountered.\nThis trace finds the objects that RESPOND to the given TraceChannel\n\n@param WorldContext  World context\n@param Start                 Start of line segment.\n@param End                   End of line segment.\n@param Radius                Radius of the capsule to sweep\n@param HalfHeight    Distance from center of capsule to tip of hemisphere endcap.\n@param TraceChannel\n@param bTraceComplex True to test against complex collision, false to test against simplified collision.\n@param OutHit                Properties of the trace hit.\n@return                              True if there was a hit, false otherwise."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_CapsuleTraceSingleByObject_DEPRECATED()
	{
		struct KismetSystemLibrary_eventCapsuleTraceSingleByObject_DEPRECATED_Parms
		{
			UObject* WorldContextObject;
			FVector Start;
			FVector End;
			float Radius;
			float HalfHeight;
			TArray<TEnumAsByte<ECollisionChannel> > ObjectsToTrace;
			bool bTraceComplex;
			TArray<AActor*> ActorsToIgnore;
			TEnumAsByte<EDrawDebugTrace::Type> DrawDebugType;
			FHitResult OutHit;
			bool bIgnoreSelf;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CapsuleTraceSingleByObject_DEPRECATED"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(KismetSystemLibrary_eventCapsuleTraceSingleByObject_DEPRECATED_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetSystemLibrary_eventCapsuleTraceSingleByObject_DEPRECATED_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetSystemLibrary_eventCapsuleTraceSingleByObject_DEPRECATED_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetSystemLibrary_eventCapsuleTraceSingleByObject_DEPRECATED_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIgnoreSelf, KismetSystemLibrary_eventCapsuleTraceSingleByObject_DEPRECATED_Parms, bool);
			UProperty* NewProp_bIgnoreSelf = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bIgnoreSelf"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIgnoreSelf, KismetSystemLibrary_eventCapsuleTraceSingleByObject_DEPRECATED_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bIgnoreSelf, KismetSystemLibrary_eventCapsuleTraceSingleByObject_DEPRECATED_Parms), sizeof(bool), true);
			UProperty* NewProp_OutHit = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutHit"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(OutHit, KismetSystemLibrary_eventCapsuleTraceSingleByObject_DEPRECATED_Parms), 0x0000008000000180, Z_Construct_UScriptStruct_FHitResult());
			UProperty* NewProp_DrawDebugType = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DrawDebugType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(DrawDebugType, KismetSystemLibrary_eventCapsuleTraceSingleByObject_DEPRECATED_Parms), 0x0000000000000080, Z_Construct_UEnum_Engine_EDrawDebugTrace());
			UProperty* NewProp_ActorsToIgnore = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ActorsToIgnore, KismetSystemLibrary_eventCapsuleTraceSingleByObject_DEPRECATED_Parms), 0x0000000008000182);
			UProperty* NewProp_ActorsToIgnore_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ActorsToIgnore, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTraceComplex, KismetSystemLibrary_eventCapsuleTraceSingleByObject_DEPRECATED_Parms, bool);
			UProperty* NewProp_bTraceComplex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTraceComplex"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTraceComplex, KismetSystemLibrary_eventCapsuleTraceSingleByObject_DEPRECATED_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bTraceComplex, KismetSystemLibrary_eventCapsuleTraceSingleByObject_DEPRECATED_Parms), sizeof(bool), true);
			UProperty* NewProp_ObjectsToTrace = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ObjectsToTrace"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ObjectsToTrace, KismetSystemLibrary_eventCapsuleTraceSingleByObject_DEPRECATED_Parms), 0x0000000008000182);
			UProperty* NewProp_ObjectsToTrace_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ObjectsToTrace, TEXT("ObjectsToTrace"), RF_Public|RF_Transient|RF_Native) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UEnum_Engine_ECollisionChannel());
			UProperty* NewProp_HalfHeight = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("HalfHeight"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(HalfHeight, KismetSystemLibrary_eventCapsuleTraceSingleByObject_DEPRECATED_Parms), 0x0000000000000080);
			UProperty* NewProp_Radius = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Radius"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Radius, KismetSystemLibrary_eventCapsuleTraceSingleByObject_DEPRECATED_Parms), 0x0000000000000080);
			UProperty* NewProp_End = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("End"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(End, KismetSystemLibrary_eventCapsuleTraceSingleByObject_DEPRECATED_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Start = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Start"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Start, KismetSystemLibrary_eventCapsuleTraceSingleByObject_DEPRECATED_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventCapsuleTraceSingleByObject_DEPRECATED_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AutoCreateRefTerm"), TEXT("ActorsToIgnore"));
			MetaData->SetValue(ReturnFunction, TEXT("bIgnoreSelf"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Collision"));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecatedFunction"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecationMessage"), TEXT("Use new SingleCapsuleTraceForObjects"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("SingleCapsuleTraceByObjectDeprecated"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sweeps a capsule along the given line and returns the first hit encountered.\nThis finds objects belonging to the channels specified in the ObjectsToTrace input.\n\n@param WorldContext  World context\n@param Start                 Start of line segment.\n@param End                   End of line segment.\n@param Radius                Radius of the capsule to sweep\n@param HalfHeight    Distance from center of capsule to tip of hemisphere endcap.\n@param ObjectsToTrace        Array of Object Types to trace\n@param bTraceComplex True to test against complex collision, false to test against simplified collision.\n@param OutHit                Properties of the trace hit.\n@return                              True if there was a hit, false otherwise."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_CapsuleTraceSingleForObjects()
	{
		struct KismetSystemLibrary_eventCapsuleTraceSingleForObjects_Parms
		{
			UObject* WorldContextObject;
			FVector Start;
			FVector End;
			float Radius;
			float HalfHeight;
			TArray<TEnumAsByte<EObjectTypeQuery> > ObjectTypes;
			bool bTraceComplex;
			TArray<AActor*> ActorsToIgnore;
			TEnumAsByte<EDrawDebugTrace::Type> DrawDebugType;
			FHitResult OutHit;
			bool bIgnoreSelf;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CapsuleTraceSingleForObjects"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(KismetSystemLibrary_eventCapsuleTraceSingleForObjects_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetSystemLibrary_eventCapsuleTraceSingleForObjects_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetSystemLibrary_eventCapsuleTraceSingleForObjects_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetSystemLibrary_eventCapsuleTraceSingleForObjects_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIgnoreSelf, KismetSystemLibrary_eventCapsuleTraceSingleForObjects_Parms, bool);
			UProperty* NewProp_bIgnoreSelf = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bIgnoreSelf"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIgnoreSelf, KismetSystemLibrary_eventCapsuleTraceSingleForObjects_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bIgnoreSelf, KismetSystemLibrary_eventCapsuleTraceSingleForObjects_Parms), sizeof(bool), true);
			UProperty* NewProp_OutHit = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutHit"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(OutHit, KismetSystemLibrary_eventCapsuleTraceSingleForObjects_Parms), 0x0000008000000180, Z_Construct_UScriptStruct_FHitResult());
			UProperty* NewProp_DrawDebugType = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DrawDebugType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(DrawDebugType, KismetSystemLibrary_eventCapsuleTraceSingleForObjects_Parms), 0x0000000000000080, Z_Construct_UEnum_Engine_EDrawDebugTrace());
			UProperty* NewProp_ActorsToIgnore = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ActorsToIgnore, KismetSystemLibrary_eventCapsuleTraceSingleForObjects_Parms), 0x0000000008000182);
			UProperty* NewProp_ActorsToIgnore_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ActorsToIgnore, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTraceComplex, KismetSystemLibrary_eventCapsuleTraceSingleForObjects_Parms, bool);
			UProperty* NewProp_bTraceComplex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTraceComplex"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTraceComplex, KismetSystemLibrary_eventCapsuleTraceSingleForObjects_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bTraceComplex, KismetSystemLibrary_eventCapsuleTraceSingleForObjects_Parms), sizeof(bool), true);
			UProperty* NewProp_ObjectTypes = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ObjectTypes"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ObjectTypes, KismetSystemLibrary_eventCapsuleTraceSingleForObjects_Parms), 0x0000000008000182);
			UProperty* NewProp_ObjectTypes_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ObjectTypes, TEXT("ObjectTypes"), RF_Public|RF_Transient|RF_Native) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UEnum_Engine_EObjectTypeQuery());
			UProperty* NewProp_HalfHeight = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("HalfHeight"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(HalfHeight, KismetSystemLibrary_eventCapsuleTraceSingleForObjects_Parms), 0x0000000000000080);
			UProperty* NewProp_Radius = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Radius"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Radius, KismetSystemLibrary_eventCapsuleTraceSingleForObjects_Parms), 0x0000000000000080);
			UProperty* NewProp_End = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("End"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(End, KismetSystemLibrary_eventCapsuleTraceSingleForObjects_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Start = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Start"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Start, KismetSystemLibrary_eventCapsuleTraceSingleForObjects_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventCapsuleTraceSingleForObjects_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AutoCreateRefTerm"), TEXT("ActorsToIgnore"));
			MetaData->SetValue(ReturnFunction, TEXT("bIgnoreSelf"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Collision"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("CapsuleTraceForObjects"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("sweep"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sweeps a capsule along the given line and returns the first hit encountered.\nThis only finds objects that are of a type specified by ObjectTypes.\n\n@param WorldContext  World context\n@param Start                 Start of line segment.\n@param End                   End of line segment.\n@param Radius                Radius of the capsule to sweep\n@param HalfHeight    Distance from center of capsule to tip of hemisphere endcap.\n@param ObjectTypes   Array of Object Types to trace\n@param bTraceComplex True to test against complex collision, false to test against simplified collision.\n@param OutHit                Properties of the trace hit.\n@return                              True if there was a hit, false otherwise."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_CollectGarbage()
	{
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CollectGarbage"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Platform"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Deletes all unreferenced objects, keeping only referenced objects (this command will be queued and happen at the end of the frame)\nNote: This can be a slow operation, and should only be performed where a hitch would be acceptable"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_ComponentOverlapActors_DEPRECATED()
	{
		struct KismetSystemLibrary_eventComponentOverlapActors_DEPRECATED_Parms
		{
			UPrimitiveComponent* Component;
			FTransform ComponentTransform;
			TEnumAsByte<EOverlapFilterOption> Filter;
			UClass* ActorClassFilter;
			TArray<AActor*> ActorsToIgnore;
			TArray<AActor*> OutActors;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ComponentOverlapActors_DEPRECATED"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(KismetSystemLibrary_eventComponentOverlapActors_DEPRECATED_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetSystemLibrary_eventComponentOverlapActors_DEPRECATED_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetSystemLibrary_eventComponentOverlapActors_DEPRECATED_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetSystemLibrary_eventComponentOverlapActors_DEPRECATED_Parms), sizeof(bool), true);
			UProperty* NewProp_OutActors = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutActors"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(OutActors, KismetSystemLibrary_eventComponentOverlapActors_DEPRECATED_Parms), 0x0000000000000180);
			UProperty* NewProp_OutActors_Inner = new(EC_InternalUseOnlyConstructor, NewProp_OutActors, TEXT("OutActors"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_ActorsToIgnore = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ActorsToIgnore, KismetSystemLibrary_eventComponentOverlapActors_DEPRECATED_Parms), 0x0000000008000182);
			UProperty* NewProp_ActorsToIgnore_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ActorsToIgnore, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_ActorClassFilter = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActorClassFilter"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(ActorClassFilter, KismetSystemLibrary_eventComponentOverlapActors_DEPRECATED_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			UProperty* NewProp_Filter = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Filter"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(Filter, KismetSystemLibrary_eventComponentOverlapActors_DEPRECATED_Parms), 0x0000000000000080, Z_Construct_UEnum_Engine_EOverlapFilterOption());
			UProperty* NewProp_ComponentTransform = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ComponentTransform"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ComponentTransform, KismetSystemLibrary_eventComponentOverlapActors_DEPRECATED_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FTransform());
			UProperty* NewProp_Component = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Component"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Component, KismetSystemLibrary_eventComponentOverlapActors_DEPRECATED_Parms), 0x0000000000080080, Z_Construct_UClass_UPrimitiveComponent_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AutoCreateRefTerm"), TEXT("ActorsToIgnore"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Collision"));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecatedFunction"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecationMessage"), TEXT("Use new ComponentOverlapActors"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(NewProp_Component, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_ComponentOverlapActors_NEW()
	{
		struct KismetSystemLibrary_eventComponentOverlapActors_NEW_Parms
		{
			UPrimitiveComponent* Component;
			FTransform ComponentTransform;
			TArray<TEnumAsByte<EObjectTypeQuery> > ObjectTypes;
			UClass* ActorClassFilter;
			TArray<AActor*> ActorsToIgnore;
			TArray<AActor*> OutActors;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ComponentOverlapActors_NEW"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(KismetSystemLibrary_eventComponentOverlapActors_NEW_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetSystemLibrary_eventComponentOverlapActors_NEW_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetSystemLibrary_eventComponentOverlapActors_NEW_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetSystemLibrary_eventComponentOverlapActors_NEW_Parms), sizeof(bool), true);
			UProperty* NewProp_OutActors = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutActors"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(OutActors, KismetSystemLibrary_eventComponentOverlapActors_NEW_Parms), 0x0000000000000180);
			UProperty* NewProp_OutActors_Inner = new(EC_InternalUseOnlyConstructor, NewProp_OutActors, TEXT("OutActors"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_ActorsToIgnore = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ActorsToIgnore, KismetSystemLibrary_eventComponentOverlapActors_NEW_Parms), 0x0000000008000182);
			UProperty* NewProp_ActorsToIgnore_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ActorsToIgnore, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_ActorClassFilter = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActorClassFilter"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(ActorClassFilter, KismetSystemLibrary_eventComponentOverlapActors_NEW_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			UProperty* NewProp_ObjectTypes = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ObjectTypes"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ObjectTypes, KismetSystemLibrary_eventComponentOverlapActors_NEW_Parms), 0x0000000008000182);
			UProperty* NewProp_ObjectTypes_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ObjectTypes, TEXT("ObjectTypes"), RF_Public|RF_Transient|RF_Native) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UEnum_Engine_EObjectTypeQuery());
			UProperty* NewProp_ComponentTransform = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ComponentTransform"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ComponentTransform, KismetSystemLibrary_eventComponentOverlapActors_NEW_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FTransform());
			UProperty* NewProp_Component = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Component"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Component, KismetSystemLibrary_eventComponentOverlapActors_NEW_Parms), 0x0000000000080080, Z_Construct_UClass_UPrimitiveComponent_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AutoCreateRefTerm"), TEXT("ActorsToIgnore"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Collision"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("ComponentOverlapActors"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns an array of actors that overlap the given component.\n@param Component                             Component to test with.\n@param ComponentTransform    Defines where to place the component for overlap testing.\n@param Filter                                Option to restrict results to only static or only dynamic.  For efficiency.\n@param ClassFilter                   If set, will only return results of this class or subclasses of it.\n@param ActorsToIgnore                Ignore these actors in the list\n@param OutActors                             Returned array of actors. Unsorted.\n@return                                              true if there was an overlap that passed the filters, false otherwise."));
			MetaData->SetValue(NewProp_Component, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_ComponentOverlapComponents_DEPRECATED()
	{
		struct KismetSystemLibrary_eventComponentOverlapComponents_DEPRECATED_Parms
		{
			UPrimitiveComponent* Component;
			FTransform ComponentTransform;
			TEnumAsByte<EOverlapFilterOption> Filter;
			UClass* ComponentClassFilter;
			TArray<AActor*> ActorsToIgnore;
			TArray<UPrimitiveComponent*> OutComponents;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ComponentOverlapComponents_DEPRECATED"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(KismetSystemLibrary_eventComponentOverlapComponents_DEPRECATED_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetSystemLibrary_eventComponentOverlapComponents_DEPRECATED_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetSystemLibrary_eventComponentOverlapComponents_DEPRECATED_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetSystemLibrary_eventComponentOverlapComponents_DEPRECATED_Parms), sizeof(bool), true);
			UProperty* NewProp_OutComponents = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutComponents"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(OutComponents, KismetSystemLibrary_eventComponentOverlapComponents_DEPRECATED_Parms), 0x0000008000000180);
			UProperty* NewProp_OutComponents_Inner = new(EC_InternalUseOnlyConstructor, NewProp_OutComponents, TEXT("OutComponents"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000080000, Z_Construct_UClass_UPrimitiveComponent_NoRegister());
			UProperty* NewProp_ActorsToIgnore = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ActorsToIgnore, KismetSystemLibrary_eventComponentOverlapComponents_DEPRECATED_Parms), 0x0000000008000182);
			UProperty* NewProp_ActorsToIgnore_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ActorsToIgnore, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_ComponentClassFilter = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ComponentClassFilter"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(ComponentClassFilter, KismetSystemLibrary_eventComponentOverlapComponents_DEPRECATED_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			UProperty* NewProp_Filter = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Filter"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(Filter, KismetSystemLibrary_eventComponentOverlapComponents_DEPRECATED_Parms), 0x0000000000000080, Z_Construct_UEnum_Engine_EOverlapFilterOption());
			UProperty* NewProp_ComponentTransform = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ComponentTransform"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ComponentTransform, KismetSystemLibrary_eventComponentOverlapComponents_DEPRECATED_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FTransform());
			UProperty* NewProp_Component = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Component"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Component, KismetSystemLibrary_eventComponentOverlapComponents_DEPRECATED_Parms), 0x0000000000080080, Z_Construct_UClass_UPrimitiveComponent_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AutoCreateRefTerm"), TEXT("ActorsToIgnore"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Collision"));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecatedFunction"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecationMessage"), TEXT("Use new ComponentOverlapComponents"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(NewProp_OutComponents, TEXT("EditInline"), TEXT("true"));
			MetaData->SetValue(NewProp_Component, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_ComponentOverlapComponents_NEW()
	{
		struct KismetSystemLibrary_eventComponentOverlapComponents_NEW_Parms
		{
			UPrimitiveComponent* Component;
			FTransform ComponentTransform;
			TArray<TEnumAsByte<EObjectTypeQuery> > ObjectTypes;
			UClass* ComponentClassFilter;
			TArray<AActor*> ActorsToIgnore;
			TArray<UPrimitiveComponent*> OutComponents;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ComponentOverlapComponents_NEW"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(KismetSystemLibrary_eventComponentOverlapComponents_NEW_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetSystemLibrary_eventComponentOverlapComponents_NEW_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetSystemLibrary_eventComponentOverlapComponents_NEW_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetSystemLibrary_eventComponentOverlapComponents_NEW_Parms), sizeof(bool), true);
			UProperty* NewProp_OutComponents = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutComponents"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(OutComponents, KismetSystemLibrary_eventComponentOverlapComponents_NEW_Parms), 0x0000008000000180);
			UProperty* NewProp_OutComponents_Inner = new(EC_InternalUseOnlyConstructor, NewProp_OutComponents, TEXT("OutComponents"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000080000, Z_Construct_UClass_UPrimitiveComponent_NoRegister());
			UProperty* NewProp_ActorsToIgnore = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ActorsToIgnore, KismetSystemLibrary_eventComponentOverlapComponents_NEW_Parms), 0x0000000008000182);
			UProperty* NewProp_ActorsToIgnore_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ActorsToIgnore, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_ComponentClassFilter = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ComponentClassFilter"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(ComponentClassFilter, KismetSystemLibrary_eventComponentOverlapComponents_NEW_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			UProperty* NewProp_ObjectTypes = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ObjectTypes"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ObjectTypes, KismetSystemLibrary_eventComponentOverlapComponents_NEW_Parms), 0x0000000008000182);
			UProperty* NewProp_ObjectTypes_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ObjectTypes, TEXT("ObjectTypes"), RF_Public|RF_Transient|RF_Native) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UEnum_Engine_EObjectTypeQuery());
			UProperty* NewProp_ComponentTransform = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ComponentTransform"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ComponentTransform, KismetSystemLibrary_eventComponentOverlapComponents_NEW_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FTransform());
			UProperty* NewProp_Component = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Component"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Component, KismetSystemLibrary_eventComponentOverlapComponents_NEW_Parms), 0x0000000000080080, Z_Construct_UClass_UPrimitiveComponent_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AutoCreateRefTerm"), TEXT("ActorsToIgnore"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Collision"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("ComponentOverlapComponents"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns an array of components that overlap the given component.\n@param Component                             Component to test with.\n@param ComponentTransform    Defines where to place the component for overlap testing.\n@param Filter                                Option to restrict results to only static or only dynamic.  For efficiency.\n@param ClassFilter                   If set, will only return results of this class or subclasses of it.\n@param ActorsToIgnore                Ignore these actors in the list\n@param OutActors                             Returned array of actors. Unsorted.\n@return                                              true if there was an overlap that passed the filters, false otherwise."));
			MetaData->SetValue(NewProp_OutComponents, TEXT("EditInline"), TEXT("true"));
			MetaData->SetValue(NewProp_Component, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_ControlScreensaver()
	{
		struct KismetSystemLibrary_eventControlScreensaver_Parms
		{
			bool bAllowScreenSaver;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ControlScreensaver"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(KismetSystemLibrary_eventControlScreensaver_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAllowScreenSaver, KismetSystemLibrary_eventControlScreensaver_Parms, bool);
			UProperty* NewProp_bAllowScreenSaver = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bAllowScreenSaver"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAllowScreenSaver, KismetSystemLibrary_eventControlScreensaver_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bAllowScreenSaver, KismetSystemLibrary_eventControlScreensaver_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Platform"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Allows or inhibits screensaver\n@param       bAllowScreenSaver               If false, don't allow screensaver if possible, otherwise allow default behavior"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_Conv_AssetClassToClass()
	{
		struct KismetSystemLibrary_eventConv_AssetClassToClass_Parms
		{
			TAssetSubclassOf<UObject>  AssetClass;
			TSubclassOf<UObject>  ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Conv_AssetClassToClass"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(KismetSystemLibrary_eventConv_AssetClassToClass_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(ReturnValue, KismetSystemLibrary_eventConv_AssetClassToClass_Parms), 0x0004000000000580, Z_Construct_UClass_UObject_NoRegister());
			UProperty* NewProp_AssetClass = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AssetClass"), RF_Public|RF_Transient|RF_Native) UAssetClassProperty(CPP_PROPERTY_BASE(AssetClass, KismetSystemLibrary_eventConv_AssetClassToClass_Parms), 0x0004000008000182, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_Conv_AssetToObject()
	{
		struct KismetSystemLibrary_eventConv_AssetToObject_Parms
		{
			TAssetPtr<UObject> Asset;
			UObject* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Conv_AssetToObject"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(KismetSystemLibrary_eventConv_AssetToObject_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, KismetSystemLibrary_eventConv_AssetToObject_Parms), 0x0000000000000580, Z_Construct_UClass_UObject_NoRegister());
			UProperty* NewProp_Asset = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Asset"), RF_Public|RF_Transient|RF_Native) UAssetObjectProperty(CPP_PROPERTY_BASE(Asset, KismetSystemLibrary_eventConv_AssetToObject_Parms), 0x0004000008000182, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_Conv_InterfaceToObject()
	{
		struct KismetSystemLibrary_eventConv_InterfaceToObject_Parms
		{
			TScriptInterface<IInterface> Interface;
			UObject* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Conv_InterfaceToObject"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(KismetSystemLibrary_eventConv_InterfaceToObject_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, KismetSystemLibrary_eventConv_InterfaceToObject_Parms), 0x0000000000000580, Z_Construct_UClass_UObject_NoRegister());
			UProperty* NewProp_Interface = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Interface"), RF_Public|RF_Transient|RF_Native) UInterfaceProperty(CPP_PROPERTY_BASE(Interface, KismetSystemLibrary_eventConv_InterfaceToObject_Parms), 0x0004000008000182, UInterface::StaticClass());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("->"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("ToObject (interface)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_CreateCopyForUndoBuffer()
	{
		struct KismetSystemLibrary_eventCreateCopyForUndoBuffer_Parms
		{
			UObject* ObjectToModify;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CreateCopyForUndoBuffer"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(KismetSystemLibrary_eventCreateCopyForUndoBuffer_Parms));
			UProperty* NewProp_ObjectToModify = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ObjectToModify"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ObjectToModify, KismetSystemLibrary_eventCreateCopyForUndoBuffer_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Development|Editor"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Mark as modified."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_Delay()
	{
		struct KismetSystemLibrary_eventDelay_Parms
		{
			UObject* WorldContextObject;
			float Duration;
			FLatentActionInfo LatentInfo;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Delay"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(KismetSystemLibrary_eventDelay_Parms));
			UProperty* NewProp_LatentInfo = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LatentInfo"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LatentInfo, KismetSystemLibrary_eventDelay_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FLatentActionInfo());
			UProperty* NewProp_Duration = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Duration"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Duration, KismetSystemLibrary_eventDelay_Parms), 0x0000000000000080);
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventDelay_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|FlowControl"));
			MetaData->SetValue(ReturnFunction, TEXT("Duration"), TEXT("0.2"));
			MetaData->SetValue(ReturnFunction, TEXT("Latent"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("LatentInfo"), TEXT("LatentInfo"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Perform a latent action with a delay (specified in seconds).  Calling again while it is counting down will be ignored.\n\n@param WorldContext  World context.\n@param Duration              length of delay (in seconds).\n@param LatentInfo    The latent action."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DoesImplementInterface()
	{
		struct KismetSystemLibrary_eventDoesImplementInterface_Parms
		{
			UObject* TestObject;
			TSubclassOf<UInterface>  Interface;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DoesImplementInterface"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetSystemLibrary_eventDoesImplementInterface_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetSystemLibrary_eventDoesImplementInterface_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetSystemLibrary_eventDoesImplementInterface_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetSystemLibrary_eventDoesImplementInterface_Parms), sizeof(bool), true);
			UProperty* NewProp_Interface = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Interface"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(Interface, KismetSystemLibrary_eventDoesImplementInterface_Parms), 0x0004000000000080, UInterface::StaticClass());
			UProperty* NewProp_TestObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TestObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(TestObject, KismetSystemLibrary_eventDoesImplementInterface_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugArrow()
	{
		struct KismetSystemLibrary_eventDrawDebugArrow_Parms
		{
			UObject* WorldContextObject;
			FVector LineStart;
			FVector LineEnd;
			float ArrowSize;
			FLinearColor LineColor;
			float Duration;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DrawDebugArrow"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04822401, 65535, sizeof(KismetSystemLibrary_eventDrawDebugArrow_Parms));
			UProperty* NewProp_Duration = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Duration"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Duration, KismetSystemLibrary_eventDrawDebugArrow_Parms), 0x0000000000000080);
			UProperty* NewProp_LineColor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LineColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LineColor, KismetSystemLibrary_eventDrawDebugArrow_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_ArrowSize = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ArrowSize"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ArrowSize, KismetSystemLibrary_eventDrawDebugArrow_Parms), 0x0000000000000080);
			UProperty* NewProp_LineEnd = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LineEnd"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LineEnd, KismetSystemLibrary_eventDrawDebugArrow_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_LineStart = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LineStart"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LineStart, KismetSystemLibrary_eventDrawDebugArrow_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventDrawDebugArrow_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Rendering|Debug"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Duration"), TEXT("0.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Draw directional arrow, pointing from LineStart to LineEnd."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugBox()
	{
		struct KismetSystemLibrary_eventDrawDebugBox_Parms
		{
			UObject* WorldContextObject;
			FVector Center;
			FVector Extent;
			FLinearColor LineColor;
			FRotator Rotation;
			float Duration;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DrawDebugBox"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04822401, 65535, sizeof(KismetSystemLibrary_eventDrawDebugBox_Parms));
			UProperty* NewProp_Duration = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Duration"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Duration, KismetSystemLibrary_eventDrawDebugBox_Parms), 0x0000000000000080);
			UProperty* NewProp_Rotation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Rotation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Rotation, KismetSystemLibrary_eventDrawDebugBox_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_LineColor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LineColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LineColor, KismetSystemLibrary_eventDrawDebugBox_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_Extent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Extent"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Extent, KismetSystemLibrary_eventDrawDebugBox_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Center = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Center"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Center, KismetSystemLibrary_eventDrawDebugBox_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventDrawDebugBox_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Rendering|Debug"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Duration"), TEXT("0.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Draw a debug box"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugCamera()
	{
		struct KismetSystemLibrary_eventDrawDebugCamera_Parms
		{
			const ACameraActor* CameraActor;
			FLinearColor CameraColor;
			float Duration;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DrawDebugCamera"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04822401, 65535, sizeof(KismetSystemLibrary_eventDrawDebugCamera_Parms));
			UProperty* NewProp_Duration = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Duration"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Duration, KismetSystemLibrary_eventDrawDebugCamera_Parms), 0x0000000000000080);
			UProperty* NewProp_CameraColor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CameraColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(CameraColor, KismetSystemLibrary_eventDrawDebugCamera_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_CameraActor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CameraActor"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(CameraActor, KismetSystemLibrary_eventDrawDebugCamera_Parms), 0x0000000000000082, Z_Construct_UClass_ACameraActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Rendering|Debug"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_CameraColor"), TEXT("(R=1.000000,G=1.000000,B=1.000000,A=1.000000)"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Duration"), TEXT("0.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Draw a debug camera shape."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugCapsule()
	{
		struct KismetSystemLibrary_eventDrawDebugCapsule_Parms
		{
			UObject* WorldContextObject;
			FVector Center;
			float HalfHeight;
			float Radius;
			FRotator Rotation;
			FLinearColor LineColor;
			float Duration;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DrawDebugCapsule"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04822401, 65535, sizeof(KismetSystemLibrary_eventDrawDebugCapsule_Parms));
			UProperty* NewProp_Duration = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Duration"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Duration, KismetSystemLibrary_eventDrawDebugCapsule_Parms), 0x0000000000000080);
			UProperty* NewProp_LineColor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LineColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LineColor, KismetSystemLibrary_eventDrawDebugCapsule_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_Rotation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Rotation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Rotation, KismetSystemLibrary_eventDrawDebugCapsule_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_Radius = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Radius"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Radius, KismetSystemLibrary_eventDrawDebugCapsule_Parms), 0x0000000000000080);
			UProperty* NewProp_HalfHeight = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("HalfHeight"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(HalfHeight, KismetSystemLibrary_eventDrawDebugCapsule_Parms), 0x0000000000000080);
			UProperty* NewProp_Center = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Center"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Center, KismetSystemLibrary_eventDrawDebugCapsule_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventDrawDebugCapsule_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Rendering|Debug"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Duration"), TEXT("0.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_LineColor"), TEXT("(R=1.000000,G=1.000000,B=1.000000,A=1.000000)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Draw a debug capsule"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugCircle()
	{
		struct KismetSystemLibrary_eventDrawDebugCircle_Parms
		{
			UObject* WorldContextObject;
			FVector Center;
			float Radius;
			int32 NumSegments;
			FLinearColor LineColor;
			float Duration;
			float Thickness;
			FVector YAxis;
			FVector ZAxis;
			bool bDrawAxis;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DrawDebugCircle"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04822401, 65535, sizeof(KismetSystemLibrary_eventDrawDebugCircle_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDrawAxis, KismetSystemLibrary_eventDrawDebugCircle_Parms, bool);
			UProperty* NewProp_bDrawAxis = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bDrawAxis"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDrawAxis, KismetSystemLibrary_eventDrawDebugCircle_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bDrawAxis, KismetSystemLibrary_eventDrawDebugCircle_Parms), sizeof(bool), true);
			UProperty* NewProp_ZAxis = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ZAxis"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ZAxis, KismetSystemLibrary_eventDrawDebugCircle_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_YAxis = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("YAxis"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(YAxis, KismetSystemLibrary_eventDrawDebugCircle_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Thickness = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Thickness"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Thickness, KismetSystemLibrary_eventDrawDebugCircle_Parms), 0x0000000000000080);
			UProperty* NewProp_Duration = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Duration"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Duration, KismetSystemLibrary_eventDrawDebugCircle_Parms), 0x0000000000000080);
			UProperty* NewProp_LineColor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LineColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LineColor, KismetSystemLibrary_eventDrawDebugCircle_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_NumSegments = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NumSegments"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(NumSegments, KismetSystemLibrary_eventDrawDebugCircle_Parms), 0x0000000000000080);
			UProperty* NewProp_Radius = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Radius"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Radius, KismetSystemLibrary_eventDrawDebugCircle_Parms), 0x0000000000000080);
			UProperty* NewProp_Center = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Center"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Center, KismetSystemLibrary_eventDrawDebugCircle_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventDrawDebugCircle_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Rendering|Debug"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bDrawAxis"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Duration"), TEXT("0.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_LineColor"), TEXT("(R=1.000000,G=1.000000,B=1.000000,A=1.000000)"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_NumSegments"), TEXT("12"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Thickness"), TEXT("0.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_YAxis"), TEXT("0.000000,1.000000,0.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_ZAxis"), TEXT("0.000000,0.000000,1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Draw a debug circle!"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugCone()
	{
		struct KismetSystemLibrary_eventDrawDebugCone_Parms
		{
			UObject* WorldContextObject;
			FVector Origin;
			FVector Direction;
			float Length;
			float AngleWidth;
			float AngleHeight;
			int32 NumSides;
			FLinearColor LineColor;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DrawDebugCone"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04822401, 65535, sizeof(KismetSystemLibrary_eventDrawDebugCone_Parms));
			UProperty* NewProp_LineColor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LineColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LineColor, KismetSystemLibrary_eventDrawDebugCone_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_NumSides = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NumSides"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(NumSides, KismetSystemLibrary_eventDrawDebugCone_Parms), 0x0000000000000080);
			UProperty* NewProp_AngleHeight = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AngleHeight"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(AngleHeight, KismetSystemLibrary_eventDrawDebugCone_Parms), 0x0000000000000080);
			UProperty* NewProp_AngleWidth = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AngleWidth"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(AngleWidth, KismetSystemLibrary_eventDrawDebugCone_Parms), 0x0000000000000080);
			UProperty* NewProp_Length = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Length"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Length, KismetSystemLibrary_eventDrawDebugCone_Parms), 0x0000000000000080);
			UProperty* NewProp_Direction = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Direction"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Direction, KismetSystemLibrary_eventDrawDebugCone_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Origin = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Origin"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Origin, KismetSystemLibrary_eventDrawDebugCone_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventDrawDebugCone_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Rendering|Debug"));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecatedFunction"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecationMessage"), TEXT("DrawDebugCone has been changed to use degrees for angles instead of radians. Place a new DrawDebugCone node and pass your angles as degrees."));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Draw a debug cone"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugConeInDegrees()
	{
		struct KismetSystemLibrary_eventDrawDebugConeInDegrees_Parms
		{
			UObject* WorldContextObject;
			FVector Origin;
			FVector Direction;
			float Length;
			float AngleWidth;
			float AngleHeight;
			int32 NumSides;
			FLinearColor LineColor;
			float Duration;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DrawDebugConeInDegrees"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04822401, 65535, sizeof(KismetSystemLibrary_eventDrawDebugConeInDegrees_Parms));
			UProperty* NewProp_Duration = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Duration"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Duration, KismetSystemLibrary_eventDrawDebugConeInDegrees_Parms), 0x0000000000000080);
			UProperty* NewProp_LineColor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LineColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LineColor, KismetSystemLibrary_eventDrawDebugConeInDegrees_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_NumSides = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NumSides"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(NumSides, KismetSystemLibrary_eventDrawDebugConeInDegrees_Parms), 0x0000000000000080);
			UProperty* NewProp_AngleHeight = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AngleHeight"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(AngleHeight, KismetSystemLibrary_eventDrawDebugConeInDegrees_Parms), 0x0000000000000080);
			UProperty* NewProp_AngleWidth = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AngleWidth"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(AngleWidth, KismetSystemLibrary_eventDrawDebugConeInDegrees_Parms), 0x0000000000000080);
			UProperty* NewProp_Length = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Length"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Length, KismetSystemLibrary_eventDrawDebugConeInDegrees_Parms), 0x0000000000000080);
			UProperty* NewProp_Direction = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Direction"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Direction, KismetSystemLibrary_eventDrawDebugConeInDegrees_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Origin = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Origin"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Origin, KismetSystemLibrary_eventDrawDebugConeInDegrees_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventDrawDebugConeInDegrees_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Rendering|Debug"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_AngleHeight"), TEXT("45.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_AngleWidth"), TEXT("45.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Duration"), TEXT("0.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Length"), TEXT("100.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_LineColor"), TEXT("(R=1.000000,G=1.000000,B=1.000000,A=1.000000)"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_NumSides"), TEXT("12"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("DrawDebugCone"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Draw a debug cone\nAngles are specified in degrees"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugCoordinateSystem()
	{
		struct KismetSystemLibrary_eventDrawDebugCoordinateSystem_Parms
		{
			UObject* WorldContextObject;
			FVector AxisLoc;
			FRotator AxisRot;
			float Scale;
			float Duration;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DrawDebugCoordinateSystem"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04822401, 65535, sizeof(KismetSystemLibrary_eventDrawDebugCoordinateSystem_Parms));
			UProperty* NewProp_Duration = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Duration"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Duration, KismetSystemLibrary_eventDrawDebugCoordinateSystem_Parms), 0x0000000000000080);
			UProperty* NewProp_Scale = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Scale"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Scale, KismetSystemLibrary_eventDrawDebugCoordinateSystem_Parms), 0x0000000000000080);
			UProperty* NewProp_AxisRot = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AxisRot"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(AxisRot, KismetSystemLibrary_eventDrawDebugCoordinateSystem_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_AxisLoc = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AxisLoc"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(AxisLoc, KismetSystemLibrary_eventDrawDebugCoordinateSystem_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventDrawDebugCoordinateSystem_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Rendering|Debug"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Duration"), TEXT("0.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Scale"), TEXT("1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Draw a debug coordinate system."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugCylinder()
	{
		struct KismetSystemLibrary_eventDrawDebugCylinder_Parms
		{
			UObject* WorldContextObject;
			FVector Start;
			FVector End;
			float Radius;
			int32 Segments;
			FLinearColor LineColor;
			float Duration;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DrawDebugCylinder"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04822401, 65535, sizeof(KismetSystemLibrary_eventDrawDebugCylinder_Parms));
			UProperty* NewProp_Duration = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Duration"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Duration, KismetSystemLibrary_eventDrawDebugCylinder_Parms), 0x0000000000000080);
			UProperty* NewProp_LineColor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LineColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LineColor, KismetSystemLibrary_eventDrawDebugCylinder_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_Segments = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Segments"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Segments, KismetSystemLibrary_eventDrawDebugCylinder_Parms), 0x0000000000000080);
			UProperty* NewProp_Radius = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Radius"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Radius, KismetSystemLibrary_eventDrawDebugCylinder_Parms), 0x0000000000000080);
			UProperty* NewProp_End = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("End"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(End, KismetSystemLibrary_eventDrawDebugCylinder_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Start = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Start"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Start, KismetSystemLibrary_eventDrawDebugCylinder_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventDrawDebugCylinder_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Rendering|Debug"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Duration"), TEXT("0.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_LineColor"), TEXT("(R=1.000000,G=1.000000,B=1.000000,A=1.000000)"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Radius"), TEXT("100.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Segments"), TEXT("12"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Draw a debug cylinder"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugFloatHistoryLocation()
	{
		struct KismetSystemLibrary_eventDrawDebugFloatHistoryLocation_Parms
		{
			UObject* WorldContextObject;
			FDebugFloatHistory FloatHistory;
			FVector DrawLocation;
			FVector2D DrawSize;
			FLinearColor DrawColor;
			float Duration;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DrawDebugFloatHistoryLocation"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(KismetSystemLibrary_eventDrawDebugFloatHistoryLocation_Parms));
			UProperty* NewProp_Duration = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Duration"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Duration, KismetSystemLibrary_eventDrawDebugFloatHistoryLocation_Parms), 0x0000000000000080);
			UProperty* NewProp_DrawColor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DrawColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DrawColor, KismetSystemLibrary_eventDrawDebugFloatHistoryLocation_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_DrawSize = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DrawSize"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DrawSize, KismetSystemLibrary_eventDrawDebugFloatHistoryLocation_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_DrawLocation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DrawLocation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DrawLocation, KismetSystemLibrary_eventDrawDebugFloatHistoryLocation_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_FloatHistory = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FloatHistory"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(FloatHistory, KismetSystemLibrary_eventDrawDebugFloatHistoryLocation_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FDebugFloatHistory());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventDrawDebugFloatHistoryLocation_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Rendering|Debug"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_DrawColor"), TEXT("(R=1.000000,G=1.000000,B=1.000000,A=1.000000)"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Duration"), TEXT("0.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Draws a 2D Histogram of size 'DrawSize' based FDebugFloatHistory struct, using DrawLocation for the location in the world, rotation will face camera of first player."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugFloatHistoryTransform()
	{
		struct KismetSystemLibrary_eventDrawDebugFloatHistoryTransform_Parms
		{
			UObject* WorldContextObject;
			FDebugFloatHistory FloatHistory;
			FTransform DrawTransform;
			FVector2D DrawSize;
			FLinearColor DrawColor;
			float Duration;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DrawDebugFloatHistoryTransform"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(KismetSystemLibrary_eventDrawDebugFloatHistoryTransform_Parms));
			UProperty* NewProp_Duration = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Duration"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Duration, KismetSystemLibrary_eventDrawDebugFloatHistoryTransform_Parms), 0x0000000000000080);
			UProperty* NewProp_DrawColor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DrawColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DrawColor, KismetSystemLibrary_eventDrawDebugFloatHistoryTransform_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_DrawSize = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DrawSize"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DrawSize, KismetSystemLibrary_eventDrawDebugFloatHistoryTransform_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_DrawTransform = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DrawTransform"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DrawTransform, KismetSystemLibrary_eventDrawDebugFloatHistoryTransform_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FTransform());
			UProperty* NewProp_FloatHistory = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FloatHistory"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(FloatHistory, KismetSystemLibrary_eventDrawDebugFloatHistoryTransform_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FDebugFloatHistory());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventDrawDebugFloatHistoryTransform_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Rendering|Debug"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_DrawColor"), TEXT("(R=1.000000,G=1.000000,B=1.000000,A=1.000000)"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Duration"), TEXT("0.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Draws a 2D Histogram of size 'DrawSize' based FDebugFloatHistory struct, using DrawTransform for the position in the world."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugFrustum()
	{
		struct KismetSystemLibrary_eventDrawDebugFrustum_Parms
		{
			UObject* WorldContextObject;
			FTransform FrustumTransform;
			FLinearColor FrustumColor;
			float Duration;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DrawDebugFrustum"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(KismetSystemLibrary_eventDrawDebugFrustum_Parms));
			UProperty* NewProp_Duration = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Duration"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Duration, KismetSystemLibrary_eventDrawDebugFrustum_Parms), 0x0000000000000080);
			UProperty* NewProp_FrustumColor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FrustumColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(FrustumColor, KismetSystemLibrary_eventDrawDebugFrustum_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_FrustumTransform = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FrustumTransform"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(FrustumTransform, KismetSystemLibrary_eventDrawDebugFrustum_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FTransform());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventDrawDebugFrustum_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Rendering|Debug"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Duration"), TEXT("0.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_FrustumColor"), TEXT("(R=1.000000,G=1.000000,B=1.000000,A=1.000000)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Draws a debug frustum."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugLine()
	{
		struct KismetSystemLibrary_eventDrawDebugLine_Parms
		{
			UObject* WorldContextObject;
			FVector LineStart;
			FVector LineEnd;
			FLinearColor LineColor;
			float Duration;
			float Thickness;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DrawDebugLine"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04822401, 65535, sizeof(KismetSystemLibrary_eventDrawDebugLine_Parms));
			UProperty* NewProp_Thickness = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Thickness"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Thickness, KismetSystemLibrary_eventDrawDebugLine_Parms), 0x0000000000000080);
			UProperty* NewProp_Duration = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Duration"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Duration, KismetSystemLibrary_eventDrawDebugLine_Parms), 0x0000000000000080);
			UProperty* NewProp_LineColor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LineColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LineColor, KismetSystemLibrary_eventDrawDebugLine_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_LineEnd = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LineEnd"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LineEnd, KismetSystemLibrary_eventDrawDebugLine_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_LineStart = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LineStart"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LineStart, KismetSystemLibrary_eventDrawDebugLine_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventDrawDebugLine_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Rendering|Debug"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Duration"), TEXT("0.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Thickness"), TEXT("0.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Draw a debug line"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugPlane()
	{
		struct KismetSystemLibrary_eventDrawDebugPlane_Parms
		{
			UObject* WorldContextObject;
			FPlane PlaneCoordinates;
			FVector Location;
			float Size;
			FLinearColor PlaneColor;
			float Duration;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DrawDebugPlane"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(KismetSystemLibrary_eventDrawDebugPlane_Parms));
			UProperty* NewProp_Duration = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Duration"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Duration, KismetSystemLibrary_eventDrawDebugPlane_Parms), 0x0000000000000080);
			UProperty* NewProp_PlaneColor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PlaneColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PlaneColor, KismetSystemLibrary_eventDrawDebugPlane_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_Size = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Size"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Size, KismetSystemLibrary_eventDrawDebugPlane_Parms), 0x0000000000000080);
			UProperty* NewProp_Location = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Location"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Location, KismetSystemLibrary_eventDrawDebugPlane_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_PlaneCoordinates = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PlaneCoordinates"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PlaneCoordinates, KismetSystemLibrary_eventDrawDebugPlane_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FPlane());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventDrawDebugPlane_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Rendering|Debug"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Duration"), TEXT("0.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_PlaneColor"), TEXT("(R=1.000000,G=1.000000,B=1.000000,A=1.000000)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Draws a debug plane."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugPoint()
	{
		struct KismetSystemLibrary_eventDrawDebugPoint_Parms
		{
			UObject* WorldContextObject;
			FVector Position;
			float Size;
			FLinearColor PointColor;
			float Duration;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DrawDebugPoint"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04822401, 65535, sizeof(KismetSystemLibrary_eventDrawDebugPoint_Parms));
			UProperty* NewProp_Duration = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Duration"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Duration, KismetSystemLibrary_eventDrawDebugPoint_Parms), 0x0000000000000080);
			UProperty* NewProp_PointColor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PointColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PointColor, KismetSystemLibrary_eventDrawDebugPoint_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_Size = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Size"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Size, KismetSystemLibrary_eventDrawDebugPoint_Parms), 0x0000000000000080);
			UProperty* NewProp_Position = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Position"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Position, KismetSystemLibrary_eventDrawDebugPoint_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventDrawDebugPoint_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Rendering|Debug"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Duration"), TEXT("0.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Draw a debug point"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugSphere()
	{
		struct KismetSystemLibrary_eventDrawDebugSphere_Parms
		{
			UObject* WorldContextObject;
			FVector Center;
			float Radius;
			int32 Segments;
			FLinearColor LineColor;
			float Duration;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DrawDebugSphere"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04822401, 65535, sizeof(KismetSystemLibrary_eventDrawDebugSphere_Parms));
			UProperty* NewProp_Duration = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Duration"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Duration, KismetSystemLibrary_eventDrawDebugSphere_Parms), 0x0000000000000080);
			UProperty* NewProp_LineColor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LineColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LineColor, KismetSystemLibrary_eventDrawDebugSphere_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_Segments = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Segments"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Segments, KismetSystemLibrary_eventDrawDebugSphere_Parms), 0x0000000000000080);
			UProperty* NewProp_Radius = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Radius"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Radius, KismetSystemLibrary_eventDrawDebugSphere_Parms), 0x0000000000000080);
			UProperty* NewProp_Center = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Center"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Center, KismetSystemLibrary_eventDrawDebugSphere_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventDrawDebugSphere_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Rendering|Debug"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Duration"), TEXT("0.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_LineColor"), TEXT("(R=1.000000,G=1.000000,B=1.000000,A=1.000000)"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Radius"), TEXT("100.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Segments"), TEXT("12"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Draw a debug sphere"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugString()
	{
		struct KismetSystemLibrary_eventDrawDebugString_Parms
		{
			UObject* WorldContextObject;
			FVector TextLocation;
			FString Text;
			AActor* TestBaseActor;
			FLinearColor TextColor;
			float Duration;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DrawDebugString"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04822401, 65535, sizeof(KismetSystemLibrary_eventDrawDebugString_Parms));
			UProperty* NewProp_Duration = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Duration"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Duration, KismetSystemLibrary_eventDrawDebugString_Parms), 0x0000000000000080);
			UProperty* NewProp_TextColor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TextColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TextColor, KismetSystemLibrary_eventDrawDebugString_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_TestBaseActor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TestBaseActor"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(TestBaseActor, KismetSystemLibrary_eventDrawDebugString_Parms), 0x0000000000000080, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_Text = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Text"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Text, KismetSystemLibrary_eventDrawDebugString_Parms), 0x0000000000000080);
			UProperty* NewProp_TextLocation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TextLocation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TextLocation, KismetSystemLibrary_eventDrawDebugString_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventDrawDebugString_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Rendering|Debug"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Duration"), TEXT("0.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_TextColor"), TEXT("(R=1.000000,G=1.000000,B=1.000000,A=1.000000)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Draw a debug string at a 3d world location."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_ExecuteConsoleCommand()
	{
		struct KismetSystemLibrary_eventExecuteConsoleCommand_Parms
		{
			UObject* WorldContextObject;
			FString Command;
			APlayerController* SpecificPlayer;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ExecuteConsoleCommand"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(KismetSystemLibrary_eventExecuteConsoleCommand_Parms));
			UProperty* NewProp_SpecificPlayer = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SpecificPlayer"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(SpecificPlayer, KismetSystemLibrary_eventExecuteConsoleCommand_Parms), 0x0000000000000080, Z_Construct_UClass_APlayerController_NoRegister());
			UProperty* NewProp_Command = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Command"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Command, KismetSystemLibrary_eventExecuteConsoleCommand_Parms), 0x0000000000000080);
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventExecuteConsoleCommand_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Development"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Executes a console command, optionally on a specific controller\n\n@param       Command                 Command to send to the console\n@param       SpecificPlayer  If specified, the console command will be routed through the specified player"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_FlushDebugStrings()
	{
		struct KismetSystemLibrary_eventFlushDebugStrings_Parms
		{
			UObject* WorldContextObject;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FlushDebugStrings"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(KismetSystemLibrary_eventFlushDebugStrings_Parms));
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventFlushDebugStrings_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Rendering|Debug"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Removes all debug strings.\n\n@param WorldContext  World context"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_FlushPersistentDebugLines()
	{
		struct KismetSystemLibrary_eventFlushPersistentDebugLines_Parms
		{
			UObject* WorldContextObject;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FlushPersistentDebugLines"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(KismetSystemLibrary_eventFlushPersistentDebugLines_Parms));
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventFlushPersistentDebugLines_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Rendering|Debug"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Flush all persistent debug lines and shapes.\n\n@param WorldContext  World context"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_ForceCloseAdBanner()
	{
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ForceCloseAdBanner"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Platform"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Forces closed any displayed ad. Can lead to loss of revenue\n(iOS and Android only)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetActorBounds()
	{
		struct KismetSystemLibrary_eventGetActorBounds_Parms
		{
			const AActor* Actor;
			FVector Origin;
			FVector BoxExtent;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetActorBounds"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(KismetSystemLibrary_eventGetActorBounds_Parms));
			UProperty* NewProp_BoxExtent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("BoxExtent"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(BoxExtent, KismetSystemLibrary_eventGetActorBounds_Parms), 0x0000000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Origin = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Origin"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Origin, KismetSystemLibrary_eventGetActorBounds_Parms), 0x0000000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Actor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Actor"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Actor, KismetSystemLibrary_eventGetActorBounds_Parms), 0x0000000000000082, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Collision"));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecatedFunction"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetActorListFromComponentList()
	{
		struct KismetSystemLibrary_eventGetActorListFromComponentList_Parms
		{
			TArray<UPrimitiveComponent*> ComponentList;
			UClass* ActorClassFilter;
			TArray<AActor*> OutActorList;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetActorListFromComponentList"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(KismetSystemLibrary_eventGetActorListFromComponentList_Parms));
			UProperty* NewProp_OutActorList = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutActorList"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(OutActorList, KismetSystemLibrary_eventGetActorListFromComponentList_Parms), 0x0000000000000180);
			UProperty* NewProp_OutActorList_Inner = new(EC_InternalUseOnlyConstructor, NewProp_OutActorList, TEXT("OutActorList"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_ActorClassFilter = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActorClassFilter"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(ActorClassFilter, KismetSystemLibrary_eventGetActorListFromComponentList_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			UProperty* NewProp_ComponentList = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ComponentList"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ComponentList, KismetSystemLibrary_eventGetActorListFromComponentList_Parms), 0x0000008008000182);
			UProperty* NewProp_ComponentList_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ComponentList, TEXT("ComponentList"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000080000, Z_Construct_UClass_UPrimitiveComponent_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns an array of unique actors represented by the given list of components.\n@param ComponentList         List of components.\n@param ClassFilter           If set, will only return results of this class or subclasses of it.\n@param OutActorList          Start of line segment."));
			MetaData->SetValue(NewProp_ComponentList, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetAdIDCount()
	{
		struct KismetSystemLibrary_eventGetAdIDCount_Parms
		{
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetAdIDCount"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetSystemLibrary_eventGetAdIDCount_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, KismetSystemLibrary_eventGetAdIDCount_Parms), 0x0000000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Platform"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Get Ad ID Count"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Retrieves the total number of Ad IDs that can be selected between"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetClassDisplayName()
	{
		struct KismetSystemLibrary_eventGetClassDisplayName_Parms
		{
			UClass* Class;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetClassDisplayName"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetSystemLibrary_eventGetClassDisplayName_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, KismetSystemLibrary_eventGetClassDisplayName_Parms), 0x0000000000000580);
			UProperty* NewProp_Class = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Class"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(Class, KismetSystemLibrary_eventGetClassDisplayName_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Get Display Name"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the display name of a class"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetComponentBounds()
	{
		struct KismetSystemLibrary_eventGetComponentBounds_Parms
		{
			const USceneComponent* Component;
			FVector Origin;
			FVector BoxExtent;
			float SphereRadius;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetComponentBounds"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(KismetSystemLibrary_eventGetComponentBounds_Parms));
			UProperty* NewProp_SphereRadius = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SphereRadius"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(SphereRadius, KismetSystemLibrary_eventGetComponentBounds_Parms), 0x0000000000000180);
			UProperty* NewProp_BoxExtent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("BoxExtent"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(BoxExtent, KismetSystemLibrary_eventGetComponentBounds_Parms), 0x0000000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Origin = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Origin"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Origin, KismetSystemLibrary_eventGetComponentBounds_Parms), 0x0000000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Component = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Component"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Component, KismetSystemLibrary_eventGetComponentBounds_Parms), 0x0000000000080082, Z_Construct_UClass_USceneComponent_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Collision"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get bounds"));
			MetaData->SetValue(NewProp_Component, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetDisplayName()
	{
		struct KismetSystemLibrary_eventGetDisplayName_Parms
		{
			const UObject* Object;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetDisplayName"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetSystemLibrary_eventGetDisplayName_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, KismetSystemLibrary_eventGetDisplayName_Parms), 0x0000000000000580);
			UProperty* NewProp_Object = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Object"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Object, KismetSystemLibrary_eventGetDisplayName_Parms), 0x0000000000000082, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the display name (or actor label), for displaying as a debugging aid.\nNote: In editor builds, this is the actor label.  In non-editor builds, this is the actual object name.  This function should not be used to uniquely identify actors!\nIt is not localized and should not be used for display to an end user of a game."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetEngineVersion()
	{
		struct KismetSystemLibrary_eventGetEngineVersion_Parms
		{
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetEngineVersion"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetSystemLibrary_eventGetEngineVersion_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, KismetSystemLibrary_eventGetEngineVersion_Parms), 0x0000000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Development"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Engine build number, for displaying to end users."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetGameName()
	{
		struct KismetSystemLibrary_eventGetGameName_Parms
		{
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetGameName"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetSystemLibrary_eventGetGameName_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, KismetSystemLibrary_eventGetGameName_Parms), 0x0000000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Game"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get the name of the current game"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetGameTimeInSeconds()
	{
		struct KismetSystemLibrary_eventGetGameTimeInSeconds_Parms
		{
			UObject* WorldContextObject;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetGameTimeInSeconds"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetSystemLibrary_eventGetGameTimeInSeconds_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetSystemLibrary_eventGetGameTimeInSeconds_Parms), 0x0000000000000580);
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventGetGameTimeInSeconds_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Time"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get the current game time, in seconds. This stops when the game is paused and is affected by slomo.\n\n@param WorldContextObject    World context"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetLocalCurrencyCode()
	{
		struct KismetSystemLibrary_eventGetLocalCurrencyCode_Parms
		{
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetLocalCurrencyCode"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(KismetSystemLibrary_eventGetLocalCurrencyCode_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, KismetSystemLibrary_eventGetLocalCurrencyCode_Parms), 0x0000000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Platform"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the currency code associated with the device's locale\n@return the currency code associated with the device's locale"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetLocalCurrencySymbol()
	{
		struct KismetSystemLibrary_eventGetLocalCurrencySymbol_Parms
		{
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetLocalCurrencySymbol"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(KismetSystemLibrary_eventGetLocalCurrencySymbol_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, KismetSystemLibrary_eventGetLocalCurrencySymbol_Parms), 0x0000000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Platform"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the currency symbol associated with the device's locale\n@return the currency symbol associated with the device's locale"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetObjectName()
	{
		struct KismetSystemLibrary_eventGetObjectName_Parms
		{
			const UObject* Object;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetObjectName"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetSystemLibrary_eventGetObjectName_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, KismetSystemLibrary_eventGetObjectName_Parms), 0x0000000000000580);
			UProperty* NewProp_Object = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Object"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Object, KismetSystemLibrary_eventGetObjectName_Parms), 0x0000000000000082, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the actual object name."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetPlatformUserName()
	{
		struct KismetSystemLibrary_eventGetPlatformUserName_Parms
		{
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetPlatformUserName"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetSystemLibrary_eventGetPlatformUserName_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, KismetSystemLibrary_eventGetPlatformUserName_Parms), 0x0000000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Platform"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get the current user name from the OS"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetPreferredLanguages()
	{
		struct KismetSystemLibrary_eventGetPreferredLanguages_Parms
		{
			TArray<FString> ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetPreferredLanguages"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(KismetSystemLibrary_eventGetPreferredLanguages_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ReturnValue, KismetSystemLibrary_eventGetPreferredLanguages_Parms), 0x0000000000000580);
			UProperty* NewProp_ReturnValue_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ReturnValue, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStrProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Platform"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns an array of the user's preferred languages in order of preference\n@return An array of language IDs ordered from most preferred to least"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetRenderingDetailMode()
	{
		struct KismetSystemLibrary_eventGetRenderingDetailMode_Parms
		{
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetRenderingDetailMode"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetSystemLibrary_eventGetRenderingDetailMode_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, KismetSystemLibrary_eventGetRenderingDetailMode_Parms), 0x0000000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Rendering"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get the clamped state of r.DetailMode, see console variable help (allows for scalability, cannot be used in construction scripts)\n0: low, show only object with DetailMode low or higher\n1: medium, show all object with DetailMode medium or higher\n2: high, show all objects"));
			MetaData->SetValue(ReturnFunction, TEXT("UnsafeDuringActorConstruction"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetRenderingMaterialQualityLevel()
	{
		struct KismetSystemLibrary_eventGetRenderingMaterialQualityLevel_Parms
		{
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetRenderingMaterialQualityLevel"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetSystemLibrary_eventGetRenderingMaterialQualityLevel_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, KismetSystemLibrary_eventGetRenderingMaterialQualityLevel_Parms), 0x0000000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Rendering|Material"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get the clamped state of r.MaterialQualityLevel, see console variable help (allows for scalability, cannot be used in construction scripts)\n0: low\n1: high\n2: medium"));
			MetaData->SetValue(ReturnFunction, TEXT("UnsafeDuringActorConstruction"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetSupportedFullscreenResolutions()
	{
		struct KismetSystemLibrary_eventGetSupportedFullscreenResolutions_Parms
		{
			TArray<FIntPoint> Resolutions;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetSupportedFullscreenResolutions"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(KismetSystemLibrary_eventGetSupportedFullscreenResolutions_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetSystemLibrary_eventGetSupportedFullscreenResolutions_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetSystemLibrary_eventGetSupportedFullscreenResolutions_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetSystemLibrary_eventGetSupportedFullscreenResolutions_Parms), sizeof(bool), true);
			UProperty* NewProp_Resolutions = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Resolutions"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Resolutions, KismetSystemLibrary_eventGetSupportedFullscreenResolutions_Parms), 0x0000000000000180);
			UProperty* NewProp_Resolutions_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Resolutions, TEXT("Resolutions"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FIntPoint());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Rendering"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the list of support fullscreen resolutions.\n@return true if successfully queried the device for available resolutions."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetUniqueDeviceId()
	{
		struct KismetSystemLibrary_eventGetUniqueDeviceId_Parms
		{
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetUniqueDeviceId"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetSystemLibrary_eventGetUniqueDeviceId_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, KismetSystemLibrary_eventGetUniqueDeviceId_Parms), 0x0000000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Platform"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the platform specific unique device id"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetVolumeButtonsHandledBySystem()
	{
		struct KismetSystemLibrary_eventGetVolumeButtonsHandledBySystem_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetVolumeButtonsHandledBySystem"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetSystemLibrary_eventGetVolumeButtonsHandledBySystem_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetSystemLibrary_eventGetVolumeButtonsHandledBySystem_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetSystemLibrary_eventGetVolumeButtonsHandledBySystem_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetSystemLibrary_eventGetVolumeButtonsHandledBySystem_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Platform"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if system default handling of volume up and volume down buttons enabled (Android only)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_HideAdBanner()
	{
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("HideAdBanner"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Platform"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Hides the ad banner (iAd on iOS, or AdMob on Android). Will force close the ad if it's open\n(iOS and Android only)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_IsControllerAssignedToGamepad()
	{
		struct KismetSystemLibrary_eventIsControllerAssignedToGamepad_Parms
		{
			int32 ControllerId;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsControllerAssignedToGamepad"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetSystemLibrary_eventIsControllerAssignedToGamepad_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetSystemLibrary_eventIsControllerAssignedToGamepad_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetSystemLibrary_eventIsControllerAssignedToGamepad_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetSystemLibrary_eventIsControllerAssignedToGamepad_Parms), sizeof(bool), true);
			UProperty* NewProp_ControllerId = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ControllerId"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ControllerId, KismetSystemLibrary_eventIsControllerAssignedToGamepad_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Platform"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if controller id assigned to a gamepad (Android only)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_IsDedicatedServer()
	{
		struct KismetSystemLibrary_eventIsDedicatedServer_Parms
		{
			UObject* WorldContextObject;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsDedicatedServer"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetSystemLibrary_eventIsDedicatedServer_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetSystemLibrary_eventIsDedicatedServer_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetSystemLibrary_eventIsDedicatedServer_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetSystemLibrary_eventIsDedicatedServer_Parms), sizeof(bool), true);
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventIsDedicatedServer_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Networking"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns whether this is running on a dedicated server"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_IsLoggedIn()
	{
		struct KismetSystemLibrary_eventIsLoggedIn_Parms
		{
			APlayerController* SpecificPlayer;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsLoggedIn"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetSystemLibrary_eventIsLoggedIn_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetSystemLibrary_eventIsLoggedIn_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetSystemLibrary_eventIsLoggedIn_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetSystemLibrary_eventIsLoggedIn_Parms), sizeof(bool), true);
			UProperty* NewProp_SpecificPlayer = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SpecificPlayer"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(SpecificPlayer, KismetSystemLibrary_eventIsLoggedIn_Parms), 0x0000000000000080, Z_Construct_UClass_APlayerController_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Online"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns whether the player is logged in to the currently active online subsystem.\n\n@param Player Specific player's login status to get. May not be supported on all platforms. If null, defaults to the player with ControllerId 0."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_IsPackagedForDistribution()
	{
		struct KismetSystemLibrary_eventIsPackagedForDistribution_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsPackagedForDistribution"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetSystemLibrary_eventIsPackagedForDistribution_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetSystemLibrary_eventIsPackagedForDistribution_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetSystemLibrary_eventIsPackagedForDistribution_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetSystemLibrary_eventIsPackagedForDistribution_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Development"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns whether this is a build that is packaged for distribution"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_IsServer()
	{
		struct KismetSystemLibrary_eventIsServer_Parms
		{
			UObject* WorldContextObject;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsServer"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetSystemLibrary_eventIsServer_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetSystemLibrary_eventIsServer_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetSystemLibrary_eventIsServer_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetSystemLibrary_eventIsServer_Parms), sizeof(bool), true);
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventIsServer_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Networking"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns whether the world this object is in is the host or not"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_IsValid()
	{
		struct KismetSystemLibrary_eventIsValid_Parms
		{
			const UObject* Object;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsValid"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetSystemLibrary_eventIsValid_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetSystemLibrary_eventIsValid_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetSystemLibrary_eventIsValid_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetSystemLibrary_eventIsValid_Parms), sizeof(bool), true);
			UProperty* NewProp_Object = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Object"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Object, KismetSystemLibrary_eventIsValid_Parms), 0x0000000000000082, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Return true if the object is usable : non-null and not pending kill"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_IsValidClass()
	{
		struct KismetSystemLibrary_eventIsValidClass_Parms
		{
			UClass* Class;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsValidClass"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetSystemLibrary_eventIsValidClass_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetSystemLibrary_eventIsValidClass_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetSystemLibrary_eventIsValidClass_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetSystemLibrary_eventIsValidClass_Parms), sizeof(bool), true);
			UProperty* NewProp_Class = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Class"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(Class, KismetSystemLibrary_eventIsValidClass_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Return true if the class is usable : non-null and not pending kill"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_ClearTimer()
	{
		struct KismetSystemLibrary_eventK2_ClearTimer_Parms
		{
			UObject* Object;
			FString FunctionName;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_ClearTimer"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(KismetSystemLibrary_eventK2_ClearTimer_Parms));
			UProperty* NewProp_FunctionName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FunctionName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(FunctionName, KismetSystemLibrary_eventK2_ClearTimer_Parms), 0x0000000000000080);
			UProperty* NewProp_Object = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Object"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Object, KismetSystemLibrary_eventK2_ClearTimer_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Time"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("Object"));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecatedFunction"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecationMessage"), TEXT("Use Clear Timer by Handle"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Clear Timer by Function Name"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Clears a set timer.\n@param Object                Object that implements the delegate function. Defaults to self (this blueprint)\n@param FunctionName  Delegate function name. Can be a K2 function or a Custom Event."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_ClearTimerDelegate()
	{
		struct KismetSystemLibrary_eventK2_ClearTimerDelegate_Parms
		{
			FScriptDelegate Delegate;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_ClearTimerDelegate"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(KismetSystemLibrary_eventK2_ClearTimerDelegate_Parms));
			UProperty* NewProp_Delegate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Delegate"), RF_Public|RF_Transient|RF_Native) UDelegateProperty(CPP_PROPERTY_BASE(Delegate, KismetSystemLibrary_eventK2_ClearTimerDelegate_Parms), 0x0000000000000080, Z_Construct_UDelegateFunction_Engine_TimerDynamicDelegate__DelegateSignature());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Time"));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecatedFunction"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecationMessage"), TEXT("Use Clear Timer by Handle"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Clear Timer by Event"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Clears a set timer.\n@param Event  Can be a K2 function or a Custom Event."));
			MetaData->SetValue(NewProp_Delegate, TEXT("DisplayName"), TEXT("Event"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_ClearTimerHandle()
	{
		struct KismetSystemLibrary_eventK2_ClearTimerHandle_Parms
		{
			UObject* WorldContextObject;
			FTimerHandle Handle;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_ClearTimerHandle"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(KismetSystemLibrary_eventK2_ClearTimerHandle_Parms));
			UProperty* NewProp_Handle = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Handle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Handle, KismetSystemLibrary_eventK2_ClearTimerHandle_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FTimerHandle());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventK2_ClearTimerHandle_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Time"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Clear Timer by Handle"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Clears a set timer.\n@param Handle                The handle of the timer to clear."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_GetTimerElapsedTime()
	{
		struct KismetSystemLibrary_eventK2_GetTimerElapsedTime_Parms
		{
			UObject* Object;
			FString FunctionName;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_GetTimerElapsedTime"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetSystemLibrary_eventK2_GetTimerElapsedTime_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetSystemLibrary_eventK2_GetTimerElapsedTime_Parms), 0x0000000000000580);
			UProperty* NewProp_FunctionName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FunctionName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(FunctionName, KismetSystemLibrary_eventK2_GetTimerElapsedTime_Parms), 0x0000000000000080);
			UProperty* NewProp_Object = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Object"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Object, KismetSystemLibrary_eventK2_GetTimerElapsedTime_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Time"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("Object"));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecatedFunction"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecationMessage"), TEXT("Use Get Timer Elapsed Time by Handle"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Get Timer Elapsed Time by Function Name"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns elapsed time for the given delegate (time since current countdown iteration began).\n@param Object                Object that implements the delegate function. Defaults to self (this blueprint)\n@param FunctionName  Delegate function name. Can be a K2 function or a Custom Event.\n@return                              How long has elapsed since the current iteration of the timer began."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_GetTimerElapsedTimeDelegate()
	{
		struct KismetSystemLibrary_eventK2_GetTimerElapsedTimeDelegate_Parms
		{
			FScriptDelegate Delegate;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_GetTimerElapsedTimeDelegate"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetSystemLibrary_eventK2_GetTimerElapsedTimeDelegate_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetSystemLibrary_eventK2_GetTimerElapsedTimeDelegate_Parms), 0x0000000000000580);
			UProperty* NewProp_Delegate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Delegate"), RF_Public|RF_Transient|RF_Native) UDelegateProperty(CPP_PROPERTY_BASE(Delegate, KismetSystemLibrary_eventK2_GetTimerElapsedTimeDelegate_Parms), 0x0000000000000080, Z_Construct_UDelegateFunction_Engine_TimerDynamicDelegate__DelegateSignature());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Time"));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecatedFunction"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecationMessage"), TEXT("Use Get Timer Elapsed Time by Handle"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Get Timer Elapsed Time by Event"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns elapsed time for the given delegate (time since current countdown iteration began).\n@param Event  Can be a K2 function or a Custom Event.\n@return                              How long has elapsed since the current iteration of the timer began."));
			MetaData->SetValue(NewProp_Delegate, TEXT("DisplayName"), TEXT("Event"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_GetTimerElapsedTimeHandle()
	{
		struct KismetSystemLibrary_eventK2_GetTimerElapsedTimeHandle_Parms
		{
			UObject* WorldContextObject;
			FTimerHandle Handle;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_GetTimerElapsedTimeHandle"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetSystemLibrary_eventK2_GetTimerElapsedTimeHandle_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetSystemLibrary_eventK2_GetTimerElapsedTimeHandle_Parms), 0x0000000000000580);
			UProperty* NewProp_Handle = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Handle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Handle, KismetSystemLibrary_eventK2_GetTimerElapsedTimeHandle_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FTimerHandle());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventK2_GetTimerElapsedTimeHandle_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Time"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Get Timer Elapsed Time by Handle"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns elapsed time for the given handle (time since current countdown iteration began).\n@param Handle                The handle of the timer to get the elapsed time of.\n@return                              How long has elapsed since the current iteration of the timer began."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_GetTimerRemainingTime()
	{
		struct KismetSystemLibrary_eventK2_GetTimerRemainingTime_Parms
		{
			UObject* Object;
			FString FunctionName;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_GetTimerRemainingTime"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetSystemLibrary_eventK2_GetTimerRemainingTime_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetSystemLibrary_eventK2_GetTimerRemainingTime_Parms), 0x0000000000000580);
			UProperty* NewProp_FunctionName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FunctionName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(FunctionName, KismetSystemLibrary_eventK2_GetTimerRemainingTime_Parms), 0x0000000000000080);
			UProperty* NewProp_Object = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Object"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Object, KismetSystemLibrary_eventK2_GetTimerRemainingTime_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Time"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("Object"));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecatedFunction"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecationMessage"), TEXT("Use Get Timer Remaining Time by Handle"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Get Timer Remaining Time by Function Name"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns time until the timer will next execute its delegate.\n@param Object                Object that implements the delegate function. Defaults to self (this blueprint)\n@param FunctionName  Delegate function name. Can be a K2 function or a Custom Event.\n@return                              How long is remaining in the current iteration of the timer."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_GetTimerRemainingTimeDelegate()
	{
		struct KismetSystemLibrary_eventK2_GetTimerRemainingTimeDelegate_Parms
		{
			FScriptDelegate Delegate;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_GetTimerRemainingTimeDelegate"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetSystemLibrary_eventK2_GetTimerRemainingTimeDelegate_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetSystemLibrary_eventK2_GetTimerRemainingTimeDelegate_Parms), 0x0000000000000580);
			UProperty* NewProp_Delegate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Delegate"), RF_Public|RF_Transient|RF_Native) UDelegateProperty(CPP_PROPERTY_BASE(Delegate, KismetSystemLibrary_eventK2_GetTimerRemainingTimeDelegate_Parms), 0x0000000000000080, Z_Construct_UDelegateFunction_Engine_TimerDynamicDelegate__DelegateSignature());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Time"));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecatedFunction"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecationMessage"), TEXT("Use Get Timer Remaining Time by Handle"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Get Timer Remaining Time by Event"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns time until the timer will next execute its delegate.\n@param Event  Can be a K2 function or a Custom Event.\n@return                              How long is remaining in the current iteration of the timer."));
			MetaData->SetValue(NewProp_Delegate, TEXT("DisplayName"), TEXT("Event"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_GetTimerRemainingTimeHandle()
	{
		struct KismetSystemLibrary_eventK2_GetTimerRemainingTimeHandle_Parms
		{
			UObject* WorldContextObject;
			FTimerHandle Handle;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_GetTimerRemainingTimeHandle"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetSystemLibrary_eventK2_GetTimerRemainingTimeHandle_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetSystemLibrary_eventK2_GetTimerRemainingTimeHandle_Parms), 0x0000000000000580);
			UProperty* NewProp_Handle = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Handle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Handle, KismetSystemLibrary_eventK2_GetTimerRemainingTimeHandle_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FTimerHandle());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventK2_GetTimerRemainingTimeHandle_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Time"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Get Timer Remaining Time by Handle"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns time until the timer will next execute its handle.\n@param Handle                The handle of the timer to time remaining of.\n@return                              How long is remaining in the current iteration of the timer."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_InvalidateTimerHandle()
	{
		struct KismetSystemLibrary_eventK2_InvalidateTimerHandle_Parms
		{
			FTimerHandle Handle;
			FTimerHandle ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_InvalidateTimerHandle"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(KismetSystemLibrary_eventK2_InvalidateTimerHandle_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetSystemLibrary_eventK2_InvalidateTimerHandle_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FTimerHandle());
			UProperty* NewProp_Handle = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Handle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Handle, KismetSystemLibrary_eventK2_InvalidateTimerHandle_Parms), 0x0000000008000180, Z_Construct_UScriptStruct_FTimerHandle());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Time"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Invalidate"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns whether the timer handle is valid. This does not indicate that there is an active timer that this handle references, but rather that it once referenced a valid timer.\n@param Handle                The handle of the timer to check validity of.\n@return                              Return the invalidated timer handle for convenience."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_IsTimerActive()
	{
		struct KismetSystemLibrary_eventK2_IsTimerActive_Parms
		{
			UObject* Object;
			FString FunctionName;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_IsTimerActive"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetSystemLibrary_eventK2_IsTimerActive_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetSystemLibrary_eventK2_IsTimerActive_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetSystemLibrary_eventK2_IsTimerActive_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetSystemLibrary_eventK2_IsTimerActive_Parms), sizeof(bool), true);
			UProperty* NewProp_FunctionName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FunctionName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(FunctionName, KismetSystemLibrary_eventK2_IsTimerActive_Parms), 0x0000000000000080);
			UProperty* NewProp_Object = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Object"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Object, KismetSystemLibrary_eventK2_IsTimerActive_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Time"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("Object"));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecatedFunction"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecationMessage"), TEXT("Use Is Timer Active by Handle"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Is Timer Active by Function Name"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if a timer exists and is active for the given delegate, false otherwise.\n@param Object                Object that implements the delegate function. Defaults to self (this blueprint)\n@param FunctionName  Delegate function name. Can be a K2 function or a Custom Event.\n@return                              True if the timer exists and is active."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_IsTimerActiveDelegate()
	{
		struct KismetSystemLibrary_eventK2_IsTimerActiveDelegate_Parms
		{
			FScriptDelegate Delegate;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_IsTimerActiveDelegate"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetSystemLibrary_eventK2_IsTimerActiveDelegate_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetSystemLibrary_eventK2_IsTimerActiveDelegate_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetSystemLibrary_eventK2_IsTimerActiveDelegate_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetSystemLibrary_eventK2_IsTimerActiveDelegate_Parms), sizeof(bool), true);
			UProperty* NewProp_Delegate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Delegate"), RF_Public|RF_Transient|RF_Native) UDelegateProperty(CPP_PROPERTY_BASE(Delegate, KismetSystemLibrary_eventK2_IsTimerActiveDelegate_Parms), 0x0000000000000080, Z_Construct_UDelegateFunction_Engine_TimerDynamicDelegate__DelegateSignature());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Time"));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecatedFunction"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecationMessage"), TEXT("Use Is Timer Active by Handle"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Is Timer Active by Event"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if a timer exists and is active for the given delegate, false otherwise.\n@param Event  Can be a K2 function or a Custom Event.\n@return                              True if the timer exists and is active."));
			MetaData->SetValue(NewProp_Delegate, TEXT("DisplayName"), TEXT("Event"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_IsTimerActiveHandle()
	{
		struct KismetSystemLibrary_eventK2_IsTimerActiveHandle_Parms
		{
			UObject* WorldContextObject;
			FTimerHandle Handle;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_IsTimerActiveHandle"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetSystemLibrary_eventK2_IsTimerActiveHandle_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetSystemLibrary_eventK2_IsTimerActiveHandle_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetSystemLibrary_eventK2_IsTimerActiveHandle_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetSystemLibrary_eventK2_IsTimerActiveHandle_Parms), sizeof(bool), true);
			UProperty* NewProp_Handle = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Handle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Handle, KismetSystemLibrary_eventK2_IsTimerActiveHandle_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FTimerHandle());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventK2_IsTimerActiveHandle_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Time"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Is Timer Active by Handle"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if a timer exists and is active for the given handle, false otherwise.\n@param Handle                The handle of the timer to check whether it is active.\n@return                              True if the timer exists and is active."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_IsTimerPaused()
	{
		struct KismetSystemLibrary_eventK2_IsTimerPaused_Parms
		{
			UObject* Object;
			FString FunctionName;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_IsTimerPaused"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetSystemLibrary_eventK2_IsTimerPaused_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetSystemLibrary_eventK2_IsTimerPaused_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetSystemLibrary_eventK2_IsTimerPaused_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetSystemLibrary_eventK2_IsTimerPaused_Parms), sizeof(bool), true);
			UProperty* NewProp_FunctionName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FunctionName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(FunctionName, KismetSystemLibrary_eventK2_IsTimerPaused_Parms), 0x0000000000000080);
			UProperty* NewProp_Object = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Object"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Object, KismetSystemLibrary_eventK2_IsTimerPaused_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Time"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("Object"));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecatedFunction"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecationMessage"), TEXT("Use Is Timer Paused by Handle"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Is Timer Paused by Function Name"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if a timer exists and is paused for the given delegate, false otherwise.\n@param Object         Object that implements the delegate function. Defaults to self (this blueprint)\n@param FunctionName   Delegate function name. Can be a K2 function or a Custom Event.\n@return                               True if the timer exists and is paused."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_IsTimerPausedDelegate()
	{
		struct KismetSystemLibrary_eventK2_IsTimerPausedDelegate_Parms
		{
			FScriptDelegate Delegate;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_IsTimerPausedDelegate"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetSystemLibrary_eventK2_IsTimerPausedDelegate_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetSystemLibrary_eventK2_IsTimerPausedDelegate_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetSystemLibrary_eventK2_IsTimerPausedDelegate_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetSystemLibrary_eventK2_IsTimerPausedDelegate_Parms), sizeof(bool), true);
			UProperty* NewProp_Delegate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Delegate"), RF_Public|RF_Transient|RF_Native) UDelegateProperty(CPP_PROPERTY_BASE(Delegate, KismetSystemLibrary_eventK2_IsTimerPausedDelegate_Parms), 0x0000000000000080, Z_Construct_UDelegateFunction_Engine_TimerDynamicDelegate__DelegateSignature());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Time"));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecatedFunction"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecationMessage"), TEXT("Use Is Timer Paused by Handle"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Is Timer Paused by Event"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if a timer exists and is paused for the given delegate, false otherwise.\n@param Event  Can be a K2 function or a Custom Event.\n@return                              True if the timer exists and is paused."));
			MetaData->SetValue(NewProp_Delegate, TEXT("DisplayName"), TEXT("Event"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_IsTimerPausedHandle()
	{
		struct KismetSystemLibrary_eventK2_IsTimerPausedHandle_Parms
		{
			UObject* WorldContextObject;
			FTimerHandle Handle;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_IsTimerPausedHandle"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetSystemLibrary_eventK2_IsTimerPausedHandle_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetSystemLibrary_eventK2_IsTimerPausedHandle_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetSystemLibrary_eventK2_IsTimerPausedHandle_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetSystemLibrary_eventK2_IsTimerPausedHandle_Parms), sizeof(bool), true);
			UProperty* NewProp_Handle = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Handle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Handle, KismetSystemLibrary_eventK2_IsTimerPausedHandle_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FTimerHandle());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventK2_IsTimerPausedHandle_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Time"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Is Timer Paused by Handle"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if a timer exists and is paused for the given handle, false otherwise.\n@param Handle                The handle of the timer to check whether it is paused.\n@return                              True if the timer exists and is paused."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_IsValidTimerHandle()
	{
		struct KismetSystemLibrary_eventK2_IsValidTimerHandle_Parms
		{
			FTimerHandle Handle;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_IsValidTimerHandle"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetSystemLibrary_eventK2_IsValidTimerHandle_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetSystemLibrary_eventK2_IsValidTimerHandle_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetSystemLibrary_eventK2_IsValidTimerHandle_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetSystemLibrary_eventK2_IsValidTimerHandle_Parms), sizeof(bool), true);
			UProperty* NewProp_Handle = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Handle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Handle, KismetSystemLibrary_eventK2_IsValidTimerHandle_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FTimerHandle());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Time"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Is Valid"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns whether the timer handle is valid. This does not indicate that there is an active timer that this handle references, but rather that it once referenced a valid timer.\n@param Handle                The handle of the timer to check validity of.\n@return                              Whether the timer handle is valid."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_PauseTimer()
	{
		struct KismetSystemLibrary_eventK2_PauseTimer_Parms
		{
			UObject* Object;
			FString FunctionName;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_PauseTimer"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(KismetSystemLibrary_eventK2_PauseTimer_Parms));
			UProperty* NewProp_FunctionName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FunctionName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(FunctionName, KismetSystemLibrary_eventK2_PauseTimer_Parms), 0x0000000000000080);
			UProperty* NewProp_Object = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Object"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Object, KismetSystemLibrary_eventK2_PauseTimer_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Time"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("Object"));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecatedFunction"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecationMessage"), TEXT("Use Pause Timer by Handle"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Pause Timer by Function Name"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Pauses a set timer at its current elapsed time.\n@param Object                Object that implements the delegate function. Defaults to self (this blueprint)\n@param FunctionName  Delegate function name. Can be a K2 function or a Custom Event."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_PauseTimerDelegate()
	{
		struct KismetSystemLibrary_eventK2_PauseTimerDelegate_Parms
		{
			FScriptDelegate Delegate;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_PauseTimerDelegate"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(KismetSystemLibrary_eventK2_PauseTimerDelegate_Parms));
			UProperty* NewProp_Delegate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Delegate"), RF_Public|RF_Transient|RF_Native) UDelegateProperty(CPP_PROPERTY_BASE(Delegate, KismetSystemLibrary_eventK2_PauseTimerDelegate_Parms), 0x0000000000000080, Z_Construct_UDelegateFunction_Engine_TimerDynamicDelegate__DelegateSignature());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Time"));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecatedFunction"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecationMessage"), TEXT("Use Pause Timer by Handle"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Pause Timer by Event"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Pauses a set timer at its current elapsed time.\n@param Event  Can be a K2 function or a Custom Event."));
			MetaData->SetValue(NewProp_Delegate, TEXT("DisplayName"), TEXT("Event"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_PauseTimerHandle()
	{
		struct KismetSystemLibrary_eventK2_PauseTimerHandle_Parms
		{
			UObject* WorldContextObject;
			FTimerHandle Handle;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_PauseTimerHandle"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(KismetSystemLibrary_eventK2_PauseTimerHandle_Parms));
			UProperty* NewProp_Handle = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Handle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Handle, KismetSystemLibrary_eventK2_PauseTimerHandle_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FTimerHandle());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventK2_PauseTimerHandle_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Time"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Pause Timer by Handle"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Pauses a set timer at its current elapsed time.\n@param Handle                The handle of the timer to pause."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_SetTimer()
	{
		struct KismetSystemLibrary_eventK2_SetTimer_Parms
		{
			UObject* Object;
			FString FunctionName;
			float Time;
			bool bLooping;
			FTimerHandle ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_SetTimer"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(KismetSystemLibrary_eventK2_SetTimer_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetSystemLibrary_eventK2_SetTimer_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FTimerHandle());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLooping, KismetSystemLibrary_eventK2_SetTimer_Parms, bool);
			UProperty* NewProp_bLooping = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bLooping"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLooping, KismetSystemLibrary_eventK2_SetTimer_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bLooping, KismetSystemLibrary_eventK2_SetTimer_Parms), sizeof(bool), true);
			UProperty* NewProp_Time = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Time"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Time, KismetSystemLibrary_eventK2_SetTimer_Parms), 0x0000000000000080);
			UProperty* NewProp_FunctionName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FunctionName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(FunctionName, KismetSystemLibrary_eventK2_SetTimer_Parms), 0x0000000000000080);
			UProperty* NewProp_Object = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Object"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Object, KismetSystemLibrary_eventK2_SetTimer_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Time"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("Object"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Set Timer by Function Name"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set a timer to execute delegate. Setting an existing timer will reset that timer with updated parameters.\n@param Object                Object that implements the delegate function. Defaults to self (this blueprint)\n@param FunctionName  Delegate function name. Can be a K2 function or a Custom Event.\n@param Time                  How long to wait before executing the delegate, in seconds. Setting a timer to <= 0 seconds will clear it if it is set.\n@param bLooping              true to keep executing the delegate every Time seconds, false to execute delegate only once.\n@return                              The timer handle to pass to other timer functions to manipulate this timer."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_SetTimerDelegate()
	{
		struct KismetSystemLibrary_eventK2_SetTimerDelegate_Parms
		{
			FScriptDelegate Delegate;
			float Time;
			bool bLooping;
			FTimerHandle ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_SetTimerDelegate"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(KismetSystemLibrary_eventK2_SetTimerDelegate_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, KismetSystemLibrary_eventK2_SetTimerDelegate_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FTimerHandle());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLooping, KismetSystemLibrary_eventK2_SetTimerDelegate_Parms, bool);
			UProperty* NewProp_bLooping = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bLooping"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLooping, KismetSystemLibrary_eventK2_SetTimerDelegate_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bLooping, KismetSystemLibrary_eventK2_SetTimerDelegate_Parms), sizeof(bool), true);
			UProperty* NewProp_Time = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Time"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Time, KismetSystemLibrary_eventK2_SetTimerDelegate_Parms), 0x0000000000000080);
			UProperty* NewProp_Delegate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Delegate"), RF_Public|RF_Transient|RF_Native) UDelegateProperty(CPP_PROPERTY_BASE(Delegate, KismetSystemLibrary_eventK2_SetTimerDelegate_Parms), 0x0000000000000080, Z_Construct_UDelegateFunction_Engine_TimerDynamicDelegate__DelegateSignature());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Time"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Set Timer by Event"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set a timer to execute delegate. Setting an existing timer will reset that timer with updated parameters.\n@param Event                 Event. Can be a K2 function or a Custom Event.\n@param Time                  How long to wait before executing the delegate, in seconds. Setting a timer to <= 0 seconds will clear it if it is set.\n@param bLooping              True to keep executing the delegate every Time seconds, false to execute delegate only once.\n@return                              The timer handle to pass to other timer functions to manipulate this timer."));
			MetaData->SetValue(NewProp_Delegate, TEXT("DisplayName"), TEXT("Event"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_TimerExists()
	{
		struct KismetSystemLibrary_eventK2_TimerExists_Parms
		{
			UObject* Object;
			FString FunctionName;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_TimerExists"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetSystemLibrary_eventK2_TimerExists_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetSystemLibrary_eventK2_TimerExists_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetSystemLibrary_eventK2_TimerExists_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetSystemLibrary_eventK2_TimerExists_Parms), sizeof(bool), true);
			UProperty* NewProp_FunctionName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FunctionName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(FunctionName, KismetSystemLibrary_eventK2_TimerExists_Parms), 0x0000000000000080);
			UProperty* NewProp_Object = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Object"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Object, KismetSystemLibrary_eventK2_TimerExists_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Time"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("Object"));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecatedFunction"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecationMessage"), TEXT("Use Timer Exists by Handle"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Does Timer Exist by Function Name"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true is a timer for the given delegate exists, false otherwise.\n@param Object         Object that implements the delegate function. Defaults to self (this blueprint)\n@param FunctionName   Delegate function name. Can be a K2 function or a Custom Event.\n@return                               True if the timer exists."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_TimerExistsDelegate()
	{
		struct KismetSystemLibrary_eventK2_TimerExistsDelegate_Parms
		{
			FScriptDelegate Delegate;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_TimerExistsDelegate"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetSystemLibrary_eventK2_TimerExistsDelegate_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetSystemLibrary_eventK2_TimerExistsDelegate_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetSystemLibrary_eventK2_TimerExistsDelegate_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetSystemLibrary_eventK2_TimerExistsDelegate_Parms), sizeof(bool), true);
			UProperty* NewProp_Delegate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Delegate"), RF_Public|RF_Transient|RF_Native) UDelegateProperty(CPP_PROPERTY_BASE(Delegate, KismetSystemLibrary_eventK2_TimerExistsDelegate_Parms), 0x0000000000000080, Z_Construct_UDelegateFunction_Engine_TimerDynamicDelegate__DelegateSignature());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Time"));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecatedFunction"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecationMessage"), TEXT("Use Does Timer Exist by Handle"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Does Timer Exist by Event"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true is a timer for the given delegate exists, false otherwise.\n@param Event  Can be a K2 function or a Custom Event.\n@return                              True if the timer exists."));
			MetaData->SetValue(NewProp_Delegate, TEXT("DisplayName"), TEXT("Event"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_TimerExistsHandle()
	{
		struct KismetSystemLibrary_eventK2_TimerExistsHandle_Parms
		{
			UObject* WorldContextObject;
			FTimerHandle Handle;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_TimerExistsHandle"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetSystemLibrary_eventK2_TimerExistsHandle_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetSystemLibrary_eventK2_TimerExistsHandle_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetSystemLibrary_eventK2_TimerExistsHandle_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetSystemLibrary_eventK2_TimerExistsHandle_Parms), sizeof(bool), true);
			UProperty* NewProp_Handle = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Handle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Handle, KismetSystemLibrary_eventK2_TimerExistsHandle_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FTimerHandle());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventK2_TimerExistsHandle_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Time"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Does Timer Exist by Handle"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true is a timer for the given handle exists, false otherwise.\n@param Handle                The handle to check whether it exists.\n@return                              True if the timer exists."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_UnPauseTimer()
	{
		struct KismetSystemLibrary_eventK2_UnPauseTimer_Parms
		{
			UObject* Object;
			FString FunctionName;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_UnPauseTimer"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(KismetSystemLibrary_eventK2_UnPauseTimer_Parms));
			UProperty* NewProp_FunctionName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FunctionName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(FunctionName, KismetSystemLibrary_eventK2_UnPauseTimer_Parms), 0x0000000000000080);
			UProperty* NewProp_Object = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Object"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Object, KismetSystemLibrary_eventK2_UnPauseTimer_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Time"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("Object"));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecatedFunction"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecationMessage"), TEXT("Use Unpause Timer by Handle"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Unpause Timer by Function Name"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Resumes a paused timer from its current elapsed time.\n@param Object                Object that implements the delegate function. Defaults to self (this blueprint)\n@param FunctionName  Delegate function name. Can be a K2 function or a Custom Event."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_UnPauseTimerDelegate()
	{
		struct KismetSystemLibrary_eventK2_UnPauseTimerDelegate_Parms
		{
			FScriptDelegate Delegate;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_UnPauseTimerDelegate"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(KismetSystemLibrary_eventK2_UnPauseTimerDelegate_Parms));
			UProperty* NewProp_Delegate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Delegate"), RF_Public|RF_Transient|RF_Native) UDelegateProperty(CPP_PROPERTY_BASE(Delegate, KismetSystemLibrary_eventK2_UnPauseTimerDelegate_Parms), 0x0000000000000080, Z_Construct_UDelegateFunction_Engine_TimerDynamicDelegate__DelegateSignature());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Time"));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecatedFunction"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecationMessage"), TEXT("Use Unpause Timer by Handle"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Unpause Timer by Event"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Resumes a paused timer from its current elapsed time.\n@param Event  Can be a K2 function or a Custom Event."));
			MetaData->SetValue(NewProp_Delegate, TEXT("DisplayName"), TEXT("Event"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_UnPauseTimerHandle()
	{
		struct KismetSystemLibrary_eventK2_UnPauseTimerHandle_Parms
		{
			UObject* WorldContextObject;
			FTimerHandle Handle;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_UnPauseTimerHandle"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(KismetSystemLibrary_eventK2_UnPauseTimerHandle_Parms));
			UProperty* NewProp_Handle = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Handle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Handle, KismetSystemLibrary_eventK2_UnPauseTimerHandle_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FTimerHandle());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventK2_UnPauseTimerHandle_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Time"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Unpause Timer by Handle"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Resumes a paused timer from its current elapsed time.\n@param Handle                The handle of the timer to unpause."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_LaunchURL()
	{
		struct KismetSystemLibrary_eventLaunchURL_Parms
		{
			FString URL;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LaunchURL"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(KismetSystemLibrary_eventLaunchURL_Parms));
			UProperty* NewProp_URL = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("URL"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(URL, KismetSystemLibrary_eventLaunchURL_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Platform"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Opens the specified URL in the platform's web browser of choice"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_LineTraceMulti_DEPRECATED()
	{
		struct KismetSystemLibrary_eventLineTraceMulti_DEPRECATED_Parms
		{
			UObject* WorldContextObject;
			FVector Start;
			FVector End;
			TEnumAsByte<ECollisionChannel> TraceChannel;
			bool bTraceComplex;
			TArray<AActor*> ActorsToIgnore;
			TEnumAsByte<EDrawDebugTrace::Type> DrawDebugType;
			TArray<FHitResult> OutHits;
			bool bIgnoreSelf;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LineTraceMulti_DEPRECATED"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(KismetSystemLibrary_eventLineTraceMulti_DEPRECATED_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetSystemLibrary_eventLineTraceMulti_DEPRECATED_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetSystemLibrary_eventLineTraceMulti_DEPRECATED_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetSystemLibrary_eventLineTraceMulti_DEPRECATED_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIgnoreSelf, KismetSystemLibrary_eventLineTraceMulti_DEPRECATED_Parms, bool);
			UProperty* NewProp_bIgnoreSelf = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bIgnoreSelf"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIgnoreSelf, KismetSystemLibrary_eventLineTraceMulti_DEPRECATED_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bIgnoreSelf, KismetSystemLibrary_eventLineTraceMulti_DEPRECATED_Parms), sizeof(bool), true);
			UProperty* NewProp_OutHits = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutHits"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(OutHits, KismetSystemLibrary_eventLineTraceMulti_DEPRECATED_Parms), 0x0000008000000180);
			UProperty* NewProp_OutHits_Inner = new(EC_InternalUseOnlyConstructor, NewProp_OutHits, TEXT("OutHits"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000008000000000, Z_Construct_UScriptStruct_FHitResult());
			UProperty* NewProp_DrawDebugType = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DrawDebugType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(DrawDebugType, KismetSystemLibrary_eventLineTraceMulti_DEPRECATED_Parms), 0x0000000000000080, Z_Construct_UEnum_Engine_EDrawDebugTrace());
			UProperty* NewProp_ActorsToIgnore = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ActorsToIgnore, KismetSystemLibrary_eventLineTraceMulti_DEPRECATED_Parms), 0x0000000008000182);
			UProperty* NewProp_ActorsToIgnore_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ActorsToIgnore, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTraceComplex, KismetSystemLibrary_eventLineTraceMulti_DEPRECATED_Parms, bool);
			UProperty* NewProp_bTraceComplex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTraceComplex"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTraceComplex, KismetSystemLibrary_eventLineTraceMulti_DEPRECATED_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bTraceComplex, KismetSystemLibrary_eventLineTraceMulti_DEPRECATED_Parms), sizeof(bool), true);
			UProperty* NewProp_TraceChannel = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TraceChannel"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(TraceChannel, KismetSystemLibrary_eventLineTraceMulti_DEPRECATED_Parms), 0x0000000000000080, Z_Construct_UEnum_Engine_ECollisionChannel());
			UProperty* NewProp_End = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("End"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(End, KismetSystemLibrary_eventLineTraceMulti_DEPRECATED_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Start = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Start"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Start, KismetSystemLibrary_eventLineTraceMulti_DEPRECATED_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventLineTraceMulti_DEPRECATED_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AutoCreateRefTerm"), TEXT("ActorsToIgnore"));
			MetaData->SetValue(ReturnFunction, TEXT("bIgnoreSelf"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Collision"));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecatedFunction"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecationMessage"), TEXT("Use new MultiLineTraceByChannel"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("MultiLineTraceByChannelDeprecated"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Does a collision trace along the given line and returns all hits encountered up to and including the first blocking hit.\nThis trace finds the objects that RESPOND to the given TraceChannel\n\n@param WorldContext  World context\n@param Start                 Start of line segment.\n@param End                   End of line segment.\n@param TraceChannel\n@param bTraceComplex True to test against complex collision, false to test against simplified collision.\n@param OutHit                Properties of the trace hit.\n@return                              True if there was a hit, false otherwise."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_LineTraceMulti_NEW()
	{
		struct KismetSystemLibrary_eventLineTraceMulti_NEW_Parms
		{
			UObject* WorldContextObject;
			FVector Start;
			FVector End;
			TEnumAsByte<ETraceTypeQuery> TraceChannel;
			bool bTraceComplex;
			TArray<AActor*> ActorsToIgnore;
			TEnumAsByte<EDrawDebugTrace::Type> DrawDebugType;
			TArray<FHitResult> OutHits;
			bool bIgnoreSelf;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LineTraceMulti_NEW"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(KismetSystemLibrary_eventLineTraceMulti_NEW_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetSystemLibrary_eventLineTraceMulti_NEW_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetSystemLibrary_eventLineTraceMulti_NEW_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetSystemLibrary_eventLineTraceMulti_NEW_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIgnoreSelf, KismetSystemLibrary_eventLineTraceMulti_NEW_Parms, bool);
			UProperty* NewProp_bIgnoreSelf = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bIgnoreSelf"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIgnoreSelf, KismetSystemLibrary_eventLineTraceMulti_NEW_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bIgnoreSelf, KismetSystemLibrary_eventLineTraceMulti_NEW_Parms), sizeof(bool), true);
			UProperty* NewProp_OutHits = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutHits"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(OutHits, KismetSystemLibrary_eventLineTraceMulti_NEW_Parms), 0x0000008000000180);
			UProperty* NewProp_OutHits_Inner = new(EC_InternalUseOnlyConstructor, NewProp_OutHits, TEXT("OutHits"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000008000000000, Z_Construct_UScriptStruct_FHitResult());
			UProperty* NewProp_DrawDebugType = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DrawDebugType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(DrawDebugType, KismetSystemLibrary_eventLineTraceMulti_NEW_Parms), 0x0000000000000080, Z_Construct_UEnum_Engine_EDrawDebugTrace());
			UProperty* NewProp_ActorsToIgnore = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ActorsToIgnore, KismetSystemLibrary_eventLineTraceMulti_NEW_Parms), 0x0000000008000182);
			UProperty* NewProp_ActorsToIgnore_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ActorsToIgnore, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTraceComplex, KismetSystemLibrary_eventLineTraceMulti_NEW_Parms, bool);
			UProperty* NewProp_bTraceComplex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTraceComplex"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTraceComplex, KismetSystemLibrary_eventLineTraceMulti_NEW_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bTraceComplex, KismetSystemLibrary_eventLineTraceMulti_NEW_Parms), sizeof(bool), true);
			UProperty* NewProp_TraceChannel = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TraceChannel"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(TraceChannel, KismetSystemLibrary_eventLineTraceMulti_NEW_Parms), 0x0000000000000080, Z_Construct_UEnum_Engine_ETraceTypeQuery());
			UProperty* NewProp_End = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("End"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(End, KismetSystemLibrary_eventLineTraceMulti_NEW_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Start = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Start"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Start, KismetSystemLibrary_eventLineTraceMulti_NEW_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventLineTraceMulti_NEW_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AutoCreateRefTerm"), TEXT("ActorsToIgnore"));
			MetaData->SetValue(ReturnFunction, TEXT("bIgnoreSelf"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Collision"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("MultiLineTraceByChannel"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("raycast"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Does a collision trace along the given line and returns all hits encountered up to and including the first blocking hit.\nThis trace finds the objects that RESPOND to the given TraceChannel\n\n@param WorldContext  World context\n@param Start                 Start of line segment.\n@param End                   End of line segment.\n@param TraceChannel  The channel to trace\n@param bTraceComplex True to test against complex collision, false to test against simplified collision.\n@param OutHit                Properties of the trace hit.\n@return                              True if there was a blocking hit, false otherwise."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_LineTraceMultiByObject_DEPRECATED()
	{
		struct KismetSystemLibrary_eventLineTraceMultiByObject_DEPRECATED_Parms
		{
			UObject* WorldContextObject;
			FVector Start;
			FVector End;
			TArray<TEnumAsByte<ECollisionChannel> > ObjectsToTrace;
			bool bTraceComplex;
			TArray<AActor*> ActorsToIgnore;
			TEnumAsByte<EDrawDebugTrace::Type> DrawDebugType;
			TArray<FHitResult> OutHits;
			bool bIgnoreSelf;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LineTraceMultiByObject_DEPRECATED"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(KismetSystemLibrary_eventLineTraceMultiByObject_DEPRECATED_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetSystemLibrary_eventLineTraceMultiByObject_DEPRECATED_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetSystemLibrary_eventLineTraceMultiByObject_DEPRECATED_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetSystemLibrary_eventLineTraceMultiByObject_DEPRECATED_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIgnoreSelf, KismetSystemLibrary_eventLineTraceMultiByObject_DEPRECATED_Parms, bool);
			UProperty* NewProp_bIgnoreSelf = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bIgnoreSelf"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIgnoreSelf, KismetSystemLibrary_eventLineTraceMultiByObject_DEPRECATED_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bIgnoreSelf, KismetSystemLibrary_eventLineTraceMultiByObject_DEPRECATED_Parms), sizeof(bool), true);
			UProperty* NewProp_OutHits = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutHits"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(OutHits, KismetSystemLibrary_eventLineTraceMultiByObject_DEPRECATED_Parms), 0x0000008000000180);
			UProperty* NewProp_OutHits_Inner = new(EC_InternalUseOnlyConstructor, NewProp_OutHits, TEXT("OutHits"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000008000000000, Z_Construct_UScriptStruct_FHitResult());
			UProperty* NewProp_DrawDebugType = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DrawDebugType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(DrawDebugType, KismetSystemLibrary_eventLineTraceMultiByObject_DEPRECATED_Parms), 0x0000000000000080, Z_Construct_UEnum_Engine_EDrawDebugTrace());
			UProperty* NewProp_ActorsToIgnore = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ActorsToIgnore, KismetSystemLibrary_eventLineTraceMultiByObject_DEPRECATED_Parms), 0x0000000008000182);
			UProperty* NewProp_ActorsToIgnore_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ActorsToIgnore, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTraceComplex, KismetSystemLibrary_eventLineTraceMultiByObject_DEPRECATED_Parms, bool);
			UProperty* NewProp_bTraceComplex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTraceComplex"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTraceComplex, KismetSystemLibrary_eventLineTraceMultiByObject_DEPRECATED_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bTraceComplex, KismetSystemLibrary_eventLineTraceMultiByObject_DEPRECATED_Parms), sizeof(bool), true);
			UProperty* NewProp_ObjectsToTrace = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ObjectsToTrace"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ObjectsToTrace, KismetSystemLibrary_eventLineTraceMultiByObject_DEPRECATED_Parms), 0x0000000008000182);
			UProperty* NewProp_ObjectsToTrace_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ObjectsToTrace, TEXT("ObjectsToTrace"), RF_Public|RF_Transient|RF_Native) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UEnum_Engine_ECollisionChannel());
			UProperty* NewProp_End = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("End"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(End, KismetSystemLibrary_eventLineTraceMultiByObject_DEPRECATED_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Start = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Start"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Start, KismetSystemLibrary_eventLineTraceMultiByObject_DEPRECATED_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventLineTraceMultiByObject_DEPRECATED_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AutoCreateRefTerm"), TEXT("ActorsToIgnore"));
			MetaData->SetValue(ReturnFunction, TEXT("bIgnoreSelf"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Collision"));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecatedFunction"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecationMessage"), TEXT("Use new MultiLineTraceForObjects"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("MultiLineTraceByObjectDeprecated"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Does a collision trace along the given line and returns all hits encountered.\nThis finds objects belonging to the channels specified in the ObjectsToTrace input.\n\n@param WorldContext  World context\n@param Start                 Start of line segment.\n@param End                   End of line segment.\n@param ObjectsToTrace        Array of Object Types to trace\n@param bTraceComplex True to test against complex collision, false to test against simplified collision.\n@param OutHit                Properties of the trace hit.\n@return                              True if there was a hit, false otherwise."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_LineTraceMultiForObjects()
	{
		struct KismetSystemLibrary_eventLineTraceMultiForObjects_Parms
		{
			UObject* WorldContextObject;
			FVector Start;
			FVector End;
			TArray<TEnumAsByte<EObjectTypeQuery> > ObjectTypes;
			bool bTraceComplex;
			TArray<AActor*> ActorsToIgnore;
			TEnumAsByte<EDrawDebugTrace::Type> DrawDebugType;
			TArray<FHitResult> OutHits;
			bool bIgnoreSelf;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LineTraceMultiForObjects"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(KismetSystemLibrary_eventLineTraceMultiForObjects_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetSystemLibrary_eventLineTraceMultiForObjects_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetSystemLibrary_eventLineTraceMultiForObjects_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetSystemLibrary_eventLineTraceMultiForObjects_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIgnoreSelf, KismetSystemLibrary_eventLineTraceMultiForObjects_Parms, bool);
			UProperty* NewProp_bIgnoreSelf = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bIgnoreSelf"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIgnoreSelf, KismetSystemLibrary_eventLineTraceMultiForObjects_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bIgnoreSelf, KismetSystemLibrary_eventLineTraceMultiForObjects_Parms), sizeof(bool), true);
			UProperty* NewProp_OutHits = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutHits"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(OutHits, KismetSystemLibrary_eventLineTraceMultiForObjects_Parms), 0x0000008000000180);
			UProperty* NewProp_OutHits_Inner = new(EC_InternalUseOnlyConstructor, NewProp_OutHits, TEXT("OutHits"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000008000000000, Z_Construct_UScriptStruct_FHitResult());
			UProperty* NewProp_DrawDebugType = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DrawDebugType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(DrawDebugType, KismetSystemLibrary_eventLineTraceMultiForObjects_Parms), 0x0000000000000080, Z_Construct_UEnum_Engine_EDrawDebugTrace());
			UProperty* NewProp_ActorsToIgnore = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ActorsToIgnore, KismetSystemLibrary_eventLineTraceMultiForObjects_Parms), 0x0000000008000182);
			UProperty* NewProp_ActorsToIgnore_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ActorsToIgnore, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTraceComplex, KismetSystemLibrary_eventLineTraceMultiForObjects_Parms, bool);
			UProperty* NewProp_bTraceComplex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTraceComplex"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTraceComplex, KismetSystemLibrary_eventLineTraceMultiForObjects_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bTraceComplex, KismetSystemLibrary_eventLineTraceMultiForObjects_Parms), sizeof(bool), true);
			UProperty* NewProp_ObjectTypes = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ObjectTypes"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ObjectTypes, KismetSystemLibrary_eventLineTraceMultiForObjects_Parms), 0x0000000008000182);
			UProperty* NewProp_ObjectTypes_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ObjectTypes, TEXT("ObjectTypes"), RF_Public|RF_Transient|RF_Native) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UEnum_Engine_EObjectTypeQuery());
			UProperty* NewProp_End = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("End"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(End, KismetSystemLibrary_eventLineTraceMultiForObjects_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Start = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Start"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Start, KismetSystemLibrary_eventLineTraceMultiForObjects_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventLineTraceMultiForObjects_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AutoCreateRefTerm"), TEXT("ActorsToIgnore"));
			MetaData->SetValue(ReturnFunction, TEXT("bIgnoreSelf"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Collision"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("MultiLineTraceForObjects"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("raycast"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Does a collision trace along the given line and returns all hits encountered.\nThis only finds objects that are of a type specified by ObjectTypes.\n\n@param WorldContext  World context\n@param Start                 Start of line segment.\n@param End                   End of line segment.\n@param ObjectTypes   Array of Object Types to trace\n@param bTraceComplex True to test against complex collision, false to test against simplified collision.\n@param OutHit                Properties of the trace hit.\n@return                              True if there was a hit, false otherwise."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_LineTraceSingle_DEPRECATED()
	{
		struct KismetSystemLibrary_eventLineTraceSingle_DEPRECATED_Parms
		{
			UObject* WorldContextObject;
			FVector Start;
			FVector End;
			TEnumAsByte<ECollisionChannel> TraceChannel;
			bool bTraceComplex;
			TArray<AActor*> ActorsToIgnore;
			TEnumAsByte<EDrawDebugTrace::Type> DrawDebugType;
			FHitResult OutHit;
			bool bIgnoreSelf;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LineTraceSingle_DEPRECATED"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(KismetSystemLibrary_eventLineTraceSingle_DEPRECATED_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetSystemLibrary_eventLineTraceSingle_DEPRECATED_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetSystemLibrary_eventLineTraceSingle_DEPRECATED_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetSystemLibrary_eventLineTraceSingle_DEPRECATED_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIgnoreSelf, KismetSystemLibrary_eventLineTraceSingle_DEPRECATED_Parms, bool);
			UProperty* NewProp_bIgnoreSelf = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bIgnoreSelf"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIgnoreSelf, KismetSystemLibrary_eventLineTraceSingle_DEPRECATED_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bIgnoreSelf, KismetSystemLibrary_eventLineTraceSingle_DEPRECATED_Parms), sizeof(bool), true);
			UProperty* NewProp_OutHit = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutHit"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(OutHit, KismetSystemLibrary_eventLineTraceSingle_DEPRECATED_Parms), 0x0000008000000180, Z_Construct_UScriptStruct_FHitResult());
			UProperty* NewProp_DrawDebugType = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DrawDebugType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(DrawDebugType, KismetSystemLibrary_eventLineTraceSingle_DEPRECATED_Parms), 0x0000000000000080, Z_Construct_UEnum_Engine_EDrawDebugTrace());
			UProperty* NewProp_ActorsToIgnore = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ActorsToIgnore, KismetSystemLibrary_eventLineTraceSingle_DEPRECATED_Parms), 0x0000000008000182);
			UProperty* NewProp_ActorsToIgnore_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ActorsToIgnore, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTraceComplex, KismetSystemLibrary_eventLineTraceSingle_DEPRECATED_Parms, bool);
			UProperty* NewProp_bTraceComplex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTraceComplex"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTraceComplex, KismetSystemLibrary_eventLineTraceSingle_DEPRECATED_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bTraceComplex, KismetSystemLibrary_eventLineTraceSingle_DEPRECATED_Parms), sizeof(bool), true);
			UProperty* NewProp_TraceChannel = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TraceChannel"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(TraceChannel, KismetSystemLibrary_eventLineTraceSingle_DEPRECATED_Parms), 0x0000000000000080, Z_Construct_UEnum_Engine_ECollisionChannel());
			UProperty* NewProp_End = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("End"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(End, KismetSystemLibrary_eventLineTraceSingle_DEPRECATED_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Start = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Start"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Start, KismetSystemLibrary_eventLineTraceSingle_DEPRECATED_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventLineTraceSingle_DEPRECATED_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AutoCreateRefTerm"), TEXT("ActorsToIgnore"));
			MetaData->SetValue(ReturnFunction, TEXT("bIgnoreSelf"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Collision"));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecatedFunction"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecationMessage"), TEXT("Use new SingleLineTraceByChannel"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("SingleLineTraceByChannelDeprecated"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Does a collision trace along the given line and returns the first blocking hit encountered.\nThis trace finds the objects that RESPOND to the given TraceChannel\n\n@param WorldContext  World context\n@param Start                 Start of line segment.\n@param End                   End of line segment.\n@param TraceChannel\n@param bTraceComplex True to test against complex collision, false to test against simplified collision.\n@param OutHit                Properties of the trace hit.\n@return                              True if there was a hit, false otherwise."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_LineTraceSingle_NEW()
	{
		struct KismetSystemLibrary_eventLineTraceSingle_NEW_Parms
		{
			UObject* WorldContextObject;
			FVector Start;
			FVector End;
			TEnumAsByte<ETraceTypeQuery> TraceChannel;
			bool bTraceComplex;
			TArray<AActor*> ActorsToIgnore;
			TEnumAsByte<EDrawDebugTrace::Type> DrawDebugType;
			FHitResult OutHit;
			bool bIgnoreSelf;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LineTraceSingle_NEW"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(KismetSystemLibrary_eventLineTraceSingle_NEW_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetSystemLibrary_eventLineTraceSingle_NEW_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetSystemLibrary_eventLineTraceSingle_NEW_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetSystemLibrary_eventLineTraceSingle_NEW_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIgnoreSelf, KismetSystemLibrary_eventLineTraceSingle_NEW_Parms, bool);
			UProperty* NewProp_bIgnoreSelf = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bIgnoreSelf"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIgnoreSelf, KismetSystemLibrary_eventLineTraceSingle_NEW_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bIgnoreSelf, KismetSystemLibrary_eventLineTraceSingle_NEW_Parms), sizeof(bool), true);
			UProperty* NewProp_OutHit = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutHit"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(OutHit, KismetSystemLibrary_eventLineTraceSingle_NEW_Parms), 0x0000008000000180, Z_Construct_UScriptStruct_FHitResult());
			UProperty* NewProp_DrawDebugType = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DrawDebugType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(DrawDebugType, KismetSystemLibrary_eventLineTraceSingle_NEW_Parms), 0x0000000000000080, Z_Construct_UEnum_Engine_EDrawDebugTrace());
			UProperty* NewProp_ActorsToIgnore = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ActorsToIgnore, KismetSystemLibrary_eventLineTraceSingle_NEW_Parms), 0x0000000008000182);
			UProperty* NewProp_ActorsToIgnore_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ActorsToIgnore, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTraceComplex, KismetSystemLibrary_eventLineTraceSingle_NEW_Parms, bool);
			UProperty* NewProp_bTraceComplex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTraceComplex"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTraceComplex, KismetSystemLibrary_eventLineTraceSingle_NEW_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bTraceComplex, KismetSystemLibrary_eventLineTraceSingle_NEW_Parms), sizeof(bool), true);
			UProperty* NewProp_TraceChannel = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TraceChannel"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(TraceChannel, KismetSystemLibrary_eventLineTraceSingle_NEW_Parms), 0x0000000000000080, Z_Construct_UEnum_Engine_ETraceTypeQuery());
			UProperty* NewProp_End = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("End"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(End, KismetSystemLibrary_eventLineTraceSingle_NEW_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Start = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Start"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Start, KismetSystemLibrary_eventLineTraceSingle_NEW_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventLineTraceSingle_NEW_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AutoCreateRefTerm"), TEXT("ActorsToIgnore"));
			MetaData->SetValue(ReturnFunction, TEXT("bIgnoreSelf"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Collision"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("LineTraceByChannel"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("raycast"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Does a collision trace along the given line and returns the first blocking hit encountered.\nThis trace finds the objects that RESPONDS to the given TraceChannel\n\n@param WorldContext  World context\n@param Start                 Start of line segment.\n@param End                   End of line segment.\n@param TraceChannel\n@param bTraceComplex True to test against complex collision, false to test against simplified collision.\n@param OutHit                Properties of the trace hit.\n@return                              True if there was a hit, false otherwise."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_LineTraceSingleByObject_DEPRECATED()
	{
		struct KismetSystemLibrary_eventLineTraceSingleByObject_DEPRECATED_Parms
		{
			UObject* WorldContextObject;
			FVector Start;
			FVector End;
			TArray<TEnumAsByte<ECollisionChannel> > ObjectsToTrace;
			bool bTraceComplex;
			TArray<AActor*> ActorsToIgnore;
			TEnumAsByte<EDrawDebugTrace::Type> DrawDebugType;
			FHitResult OutHit;
			bool bIgnoreSelf;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LineTraceSingleByObject_DEPRECATED"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(KismetSystemLibrary_eventLineTraceSingleByObject_DEPRECATED_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetSystemLibrary_eventLineTraceSingleByObject_DEPRECATED_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetSystemLibrary_eventLineTraceSingleByObject_DEPRECATED_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetSystemLibrary_eventLineTraceSingleByObject_DEPRECATED_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIgnoreSelf, KismetSystemLibrary_eventLineTraceSingleByObject_DEPRECATED_Parms, bool);
			UProperty* NewProp_bIgnoreSelf = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bIgnoreSelf"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIgnoreSelf, KismetSystemLibrary_eventLineTraceSingleByObject_DEPRECATED_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bIgnoreSelf, KismetSystemLibrary_eventLineTraceSingleByObject_DEPRECATED_Parms), sizeof(bool), true);
			UProperty* NewProp_OutHit = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutHit"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(OutHit, KismetSystemLibrary_eventLineTraceSingleByObject_DEPRECATED_Parms), 0x0000008000000180, Z_Construct_UScriptStruct_FHitResult());
			UProperty* NewProp_DrawDebugType = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DrawDebugType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(DrawDebugType, KismetSystemLibrary_eventLineTraceSingleByObject_DEPRECATED_Parms), 0x0000000000000080, Z_Construct_UEnum_Engine_EDrawDebugTrace());
			UProperty* NewProp_ActorsToIgnore = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ActorsToIgnore, KismetSystemLibrary_eventLineTraceSingleByObject_DEPRECATED_Parms), 0x0000000008000182);
			UProperty* NewProp_ActorsToIgnore_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ActorsToIgnore, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTraceComplex, KismetSystemLibrary_eventLineTraceSingleByObject_DEPRECATED_Parms, bool);
			UProperty* NewProp_bTraceComplex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTraceComplex"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTraceComplex, KismetSystemLibrary_eventLineTraceSingleByObject_DEPRECATED_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bTraceComplex, KismetSystemLibrary_eventLineTraceSingleByObject_DEPRECATED_Parms), sizeof(bool), true);
			UProperty* NewProp_ObjectsToTrace = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ObjectsToTrace"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ObjectsToTrace, KismetSystemLibrary_eventLineTraceSingleByObject_DEPRECATED_Parms), 0x0000000008000182);
			UProperty* NewProp_ObjectsToTrace_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ObjectsToTrace, TEXT("ObjectsToTrace"), RF_Public|RF_Transient|RF_Native) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UEnum_Engine_ECollisionChannel());
			UProperty* NewProp_End = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("End"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(End, KismetSystemLibrary_eventLineTraceSingleByObject_DEPRECATED_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Start = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Start"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Start, KismetSystemLibrary_eventLineTraceSingleByObject_DEPRECATED_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventLineTraceSingleByObject_DEPRECATED_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AutoCreateRefTerm"), TEXT("ActorsToIgnore"));
			MetaData->SetValue(ReturnFunction, TEXT("bIgnoreSelf"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Collision"));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecatedFunction"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecationMessage"), TEXT("Use new SingleLineTraceForObjects"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("SingleLineTraceByObjectDeprecated"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Does a collision trace along the given line and returns the first hit encountered.\nThis finds objects belonging to the channels specified in the ObjectsToTrace input.\n\n@param WorldContext  World context\n@param Start                 Start of line segment.\n@param End                   End of line segment.\n@param ObjectsToTrace        Array of Object Types to trace\n@param bTraceComplex True to test against complex collision, false to test against simplified collision.\n@param OutHit                Properties of the trace hit.\n@return                              True if there was a hit, false otherwise."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_LineTraceSingleForObjects()
	{
		struct KismetSystemLibrary_eventLineTraceSingleForObjects_Parms
		{
			UObject* WorldContextObject;
			FVector Start;
			FVector End;
			TArray<TEnumAsByte<EObjectTypeQuery> > ObjectTypes;
			bool bTraceComplex;
			TArray<AActor*> ActorsToIgnore;
			TEnumAsByte<EDrawDebugTrace::Type> DrawDebugType;
			FHitResult OutHit;
			bool bIgnoreSelf;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LineTraceSingleForObjects"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(KismetSystemLibrary_eventLineTraceSingleForObjects_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetSystemLibrary_eventLineTraceSingleForObjects_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetSystemLibrary_eventLineTraceSingleForObjects_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetSystemLibrary_eventLineTraceSingleForObjects_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIgnoreSelf, KismetSystemLibrary_eventLineTraceSingleForObjects_Parms, bool);
			UProperty* NewProp_bIgnoreSelf = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bIgnoreSelf"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIgnoreSelf, KismetSystemLibrary_eventLineTraceSingleForObjects_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bIgnoreSelf, KismetSystemLibrary_eventLineTraceSingleForObjects_Parms), sizeof(bool), true);
			UProperty* NewProp_OutHit = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutHit"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(OutHit, KismetSystemLibrary_eventLineTraceSingleForObjects_Parms), 0x0000008000000180, Z_Construct_UScriptStruct_FHitResult());
			UProperty* NewProp_DrawDebugType = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DrawDebugType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(DrawDebugType, KismetSystemLibrary_eventLineTraceSingleForObjects_Parms), 0x0000000000000080, Z_Construct_UEnum_Engine_EDrawDebugTrace());
			UProperty* NewProp_ActorsToIgnore = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ActorsToIgnore, KismetSystemLibrary_eventLineTraceSingleForObjects_Parms), 0x0000000008000182);
			UProperty* NewProp_ActorsToIgnore_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ActorsToIgnore, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTraceComplex, KismetSystemLibrary_eventLineTraceSingleForObjects_Parms, bool);
			UProperty* NewProp_bTraceComplex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTraceComplex"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTraceComplex, KismetSystemLibrary_eventLineTraceSingleForObjects_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bTraceComplex, KismetSystemLibrary_eventLineTraceSingleForObjects_Parms), sizeof(bool), true);
			UProperty* NewProp_ObjectTypes = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ObjectTypes"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ObjectTypes, KismetSystemLibrary_eventLineTraceSingleForObjects_Parms), 0x0000000008000182);
			UProperty* NewProp_ObjectTypes_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ObjectTypes, TEXT("ObjectTypes"), RF_Public|RF_Transient|RF_Native) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UEnum_Engine_EObjectTypeQuery());
			UProperty* NewProp_End = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("End"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(End, KismetSystemLibrary_eventLineTraceSingleForObjects_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Start = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Start"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Start, KismetSystemLibrary_eventLineTraceSingleForObjects_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventLineTraceSingleForObjects_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AutoCreateRefTerm"), TEXT("ActorsToIgnore"));
			MetaData->SetValue(ReturnFunction, TEXT("bIgnoreSelf"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Collision"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("LineTraceForObjects"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("raycast"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Does a collision trace along the given line and returns the first hit encountered.\nThis only finds objects that are of a type specified by ObjectTypes.\n\n@param WorldContext  World context\n@param Start                 Start of line segment.\n@param End                   End of line segment.\n@param ObjectTypes   Array of Object Types to trace\n@param bTraceComplex True to test against complex collision, false to test against simplified collision.\n@param OutHit                Properties of the trace hit.\n@return                              True if there was a hit, false otherwise."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_LoadAsset()
	{
		struct KismetSystemLibrary_eventLoadAsset_Parms
		{
			UObject* WorldContextObject;
			TAssetPtr<UObject> Asset;
			FScriptDelegate OnLoaded;
			FLatentActionInfo LatentInfo;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LoadAsset"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(KismetSystemLibrary_eventLoadAsset_Parms));
			UProperty* NewProp_LatentInfo = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LatentInfo"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LatentInfo, KismetSystemLibrary_eventLoadAsset_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FLatentActionInfo());
			UProperty* NewProp_OnLoaded = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OnLoaded"), RF_Public|RF_Transient|RF_Native) UDelegateProperty(CPP_PROPERTY_BASE(OnLoaded, KismetSystemLibrary_eventLoadAsset_Parms), 0x0000000000000080, Z_Construct_UDelegateFunction_UKismetSystemLibrary_OnAssetLoaded__DelegateSignature());
			UProperty* NewProp_Asset = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Asset"), RF_Public|RF_Transient|RF_Native) UAssetObjectProperty(CPP_PROPERTY_BASE(Asset, KismetSystemLibrary_eventLoadAsset_Parms), 0x0004000008000182, Z_Construct_UClass_UObject_NoRegister());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventLoadAsset_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities"));
			MetaData->SetValue(ReturnFunction, TEXT("Latent"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("LatentInfo"), TEXT("LatentInfo"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_LoadAssetClass()
	{
		struct KismetSystemLibrary_eventLoadAssetClass_Parms
		{
			UObject* WorldContextObject;
			TAssetSubclassOf<UObject>  AssetClass;
			FScriptDelegate OnLoaded;
			FLatentActionInfo LatentInfo;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LoadAssetClass"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(KismetSystemLibrary_eventLoadAssetClass_Parms));
			UProperty* NewProp_LatentInfo = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LatentInfo"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LatentInfo, KismetSystemLibrary_eventLoadAssetClass_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FLatentActionInfo());
			UProperty* NewProp_OnLoaded = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OnLoaded"), RF_Public|RF_Transient|RF_Native) UDelegateProperty(CPP_PROPERTY_BASE(OnLoaded, KismetSystemLibrary_eventLoadAssetClass_Parms), 0x0000000000000080, Z_Construct_UDelegateFunction_UKismetSystemLibrary_OnAssetClassLoaded__DelegateSignature());
			UProperty* NewProp_AssetClass = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AssetClass"), RF_Public|RF_Transient|RF_Native) UAssetClassProperty(CPP_PROPERTY_BASE(AssetClass, KismetSystemLibrary_eventLoadAssetClass_Parms), 0x0004000008000182, Z_Construct_UClass_UObject_NoRegister());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventLoadAssetClass_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities"));
			MetaData->SetValue(ReturnFunction, TEXT("Latent"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("LatentInfo"), TEXT("LatentInfo"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_MakeLiteralBool()
	{
		struct KismetSystemLibrary_eventMakeLiteralBool_Parms
		{
			bool Value;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MakeLiteralBool"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetSystemLibrary_eventMakeLiteralBool_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetSystemLibrary_eventMakeLiteralBool_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetSystemLibrary_eventMakeLiteralBool_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetSystemLibrary_eventMakeLiteralBool_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(Value, KismetSystemLibrary_eventMakeLiteralBool_Parms, bool);
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Value, KismetSystemLibrary_eventMakeLiteralBool_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(Value, KismetSystemLibrary_eventMakeLiteralBool_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Boolean"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Creates a literal bool\n@param       Value   value to set the bool to\n@return      The literal bool"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_MakeLiteralByte()
	{
		struct KismetSystemLibrary_eventMakeLiteralByte_Parms
		{
			uint8 Value;
			uint8 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MakeLiteralByte"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetSystemLibrary_eventMakeLiteralByte_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(ReturnValue, KismetSystemLibrary_eventMakeLiteralByte_Parms), 0x0000000000000580);
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(Value, KismetSystemLibrary_eventMakeLiteralByte_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Byte"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Creates a literal byte\n@param       Value   value to set the byte to\n@return      The literal byte"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_MakeLiteralFloat()
	{
		struct KismetSystemLibrary_eventMakeLiteralFloat_Parms
		{
			float Value;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MakeLiteralFloat"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetSystemLibrary_eventMakeLiteralFloat_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, KismetSystemLibrary_eventMakeLiteralFloat_Parms), 0x0000000000000580);
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Value, KismetSystemLibrary_eventMakeLiteralFloat_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Float"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Creates a literal float\n@param       Value   value to set the float to\n@return      The literal float"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_MakeLiteralInt()
	{
		struct KismetSystemLibrary_eventMakeLiteralInt_Parms
		{
			int32 Value;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MakeLiteralInt"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetSystemLibrary_eventMakeLiteralInt_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, KismetSystemLibrary_eventMakeLiteralInt_Parms), 0x0000000000000580);
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Value, KismetSystemLibrary_eventMakeLiteralInt_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Integer"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Creates a literal integer\n@param       Value   value to set the integer to\n@return      The literal integer"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_MakeLiteralName()
	{
		struct KismetSystemLibrary_eventMakeLiteralName_Parms
		{
			FName Value;
			FName ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MakeLiteralName"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetSystemLibrary_eventMakeLiteralName_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(ReturnValue, KismetSystemLibrary_eventMakeLiteralName_Parms), 0x0000000000000580);
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(Value, KismetSystemLibrary_eventMakeLiteralName_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Name"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Creates a literal name\n@param       Value   value to set the name to\n@return      The literal name"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_MakeLiteralString()
	{
		struct KismetSystemLibrary_eventMakeLiteralString_Parms
		{
			FString Value;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MakeLiteralString"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetSystemLibrary_eventMakeLiteralString_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, KismetSystemLibrary_eventMakeLiteralString_Parms), 0x0000000000000580);
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Value, KismetSystemLibrary_eventMakeLiteralString_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|String"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Creates a literal string\n@param       Value   value to set the string to\n@return      The literal string"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_MakeLiteralText()
	{
		struct KismetSystemLibrary_eventMakeLiteralText_Parms
		{
			FText Value;
			FText ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MakeLiteralText"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetSystemLibrary_eventMakeLiteralText_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(ReturnValue, KismetSystemLibrary_eventMakeLiteralText_Parms), 0x0000000000000580);
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(Value, KismetSystemLibrary_eventMakeLiteralText_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Text"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Creates a literal FText\n@param       Value   value to set the FText to\n@return      The literal FText"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_MoveComponentTo()
	{
		struct KismetSystemLibrary_eventMoveComponentTo_Parms
		{
			USceneComponent* Component;
			FVector TargetRelativeLocation;
			FRotator TargetRelativeRotation;
			bool bEaseOut;
			bool bEaseIn;
			float OverTime;
			TEnumAsByte<EMoveComponentAction::Type> MoveAction;
			FLatentActionInfo LatentInfo;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MoveComponentTo"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04822401, 65535, sizeof(KismetSystemLibrary_eventMoveComponentTo_Parms));
			UProperty* NewProp_LatentInfo = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LatentInfo"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LatentInfo, KismetSystemLibrary_eventMoveComponentTo_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FLatentActionInfo());
			UProperty* NewProp_MoveAction = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MoveAction"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(MoveAction, KismetSystemLibrary_eventMoveComponentTo_Parms), 0x0000000000000080, Z_Construct_UEnum_Engine_EMoveComponentAction());
			UProperty* NewProp_OverTime = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OverTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(OverTime, KismetSystemLibrary_eventMoveComponentTo_Parms), 0x0000000000000080);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEaseIn, KismetSystemLibrary_eventMoveComponentTo_Parms, bool);
			UProperty* NewProp_bEaseIn = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bEaseIn"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEaseIn, KismetSystemLibrary_eventMoveComponentTo_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bEaseIn, KismetSystemLibrary_eventMoveComponentTo_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEaseOut, KismetSystemLibrary_eventMoveComponentTo_Parms, bool);
			UProperty* NewProp_bEaseOut = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bEaseOut"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEaseOut, KismetSystemLibrary_eventMoveComponentTo_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bEaseOut, KismetSystemLibrary_eventMoveComponentTo_Parms), sizeof(bool), true);
			UProperty* NewProp_TargetRelativeRotation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TargetRelativeRotation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TargetRelativeRotation, KismetSystemLibrary_eventMoveComponentTo_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_TargetRelativeLocation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TargetRelativeLocation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TargetRelativeLocation, KismetSystemLibrary_eventMoveComponentTo_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Component = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Component"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Component, KismetSystemLibrary_eventMoveComponentTo_Parms), 0x0000000000080080, Z_Construct_UClass_USceneComponent_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Components"));
			MetaData->SetValue(ReturnFunction, TEXT("ExpandEnumAsExecs"), TEXT("MoveAction"));
			MetaData->SetValue(ReturnFunction, TEXT("Latent"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("LatentInfo"), TEXT("LatentInfo"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("OverTime"), TEXT("0.2"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Interpolate a component to the specified relative location and rotation over the course of OverTime seconds."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
			MetaData->SetValue(NewProp_Component, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_PrintString()
	{
		struct KismetSystemLibrary_eventPrintString_Parms
		{
			UObject* WorldContextObject;
			FString InString;
			bool bPrintToScreen;
			bool bPrintToLog;
			FLinearColor TextColor;
			float Duration;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PrintString"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04822401, 65535, sizeof(KismetSystemLibrary_eventPrintString_Parms));
			UProperty* NewProp_Duration = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Duration"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Duration, KismetSystemLibrary_eventPrintString_Parms), 0x0000040000000080);
			UProperty* NewProp_TextColor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TextColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TextColor, KismetSystemLibrary_eventPrintString_Parms), 0x0000040000000080, Z_Construct_UScriptStruct_FLinearColor());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bPrintToLog, KismetSystemLibrary_eventPrintString_Parms, bool);
			UProperty* NewProp_bPrintToLog = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bPrintToLog"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bPrintToLog, KismetSystemLibrary_eventPrintString_Parms), 0x0000040000000080, CPP_BOOL_PROPERTY_BITMASK(bPrintToLog, KismetSystemLibrary_eventPrintString_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bPrintToScreen, KismetSystemLibrary_eventPrintString_Parms, bool);
			UProperty* NewProp_bPrintToScreen = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bPrintToScreen"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bPrintToScreen, KismetSystemLibrary_eventPrintString_Parms), 0x0000040000000080, CPP_BOOL_PROPERTY_BITMASK(bPrintToScreen, KismetSystemLibrary_eventPrintString_Parms), sizeof(bool), true);
			UProperty* NewProp_InString = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InString"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(InString, KismetSystemLibrary_eventPrintString_Parms), 0x0000000000000080);
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventPrintString_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AdvancedDisplay"), TEXT("2"));
			MetaData->SetValue(ReturnFunction, TEXT("CallableWithoutWorldContext"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|String"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bPrintToLog"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bPrintToScreen"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Duration"), TEXT("2.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_InString"), TEXT("Hello"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_TextColor"), TEXT("(R=0.000000,G=0.660000,B=1.000000,A=1.000000)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("log print"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Prints a string to the log, and optionally, to the screen\nIf Print To Log is true, it will be visible in the Output Log window.  Otherwise it will be logged only as 'Verbose', so it generally won't show up.\n\n@param       InString                The string to log out\n@param       bPrintToScreen  Whether or not to print the output to the screen\n@param       bPrintToLog             Whether or not to print the output to the log\n@param       bPrintToConsole Whether or not to print the output to the console\n@param       TextColor               Whether or not to print the output to the console\n@param       Duration                The display duration (if Print to Screen is True). Using negative number will result in loading the duration time from the config."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_PrintText()
	{
		struct KismetSystemLibrary_eventPrintText_Parms
		{
			UObject* WorldContextObject;
			FText InText;
			bool bPrintToScreen;
			bool bPrintToLog;
			FLinearColor TextColor;
			float Duration;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PrintText"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04822401, 65535, sizeof(KismetSystemLibrary_eventPrintText_Parms));
			UProperty* NewProp_Duration = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Duration"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Duration, KismetSystemLibrary_eventPrintText_Parms), 0x0000040000000080);
			UProperty* NewProp_TextColor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TextColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TextColor, KismetSystemLibrary_eventPrintText_Parms), 0x0000040000000080, Z_Construct_UScriptStruct_FLinearColor());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bPrintToLog, KismetSystemLibrary_eventPrintText_Parms, bool);
			UProperty* NewProp_bPrintToLog = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bPrintToLog"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bPrintToLog, KismetSystemLibrary_eventPrintText_Parms), 0x0000040000000080, CPP_BOOL_PROPERTY_BITMASK(bPrintToLog, KismetSystemLibrary_eventPrintText_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bPrintToScreen, KismetSystemLibrary_eventPrintText_Parms, bool);
			UProperty* NewProp_bPrintToScreen = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bPrintToScreen"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bPrintToScreen, KismetSystemLibrary_eventPrintText_Parms), 0x0000040000000080, CPP_BOOL_PROPERTY_BITMASK(bPrintToScreen, KismetSystemLibrary_eventPrintText_Parms), sizeof(bool), true);
			UProperty* NewProp_InText = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InText"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(InText, KismetSystemLibrary_eventPrintText_Parms), 0x0000000000000082);
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventPrintText_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AdvancedDisplay"), TEXT("2"));
			MetaData->SetValue(ReturnFunction, TEXT("CallableWithoutWorldContext"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Text"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bPrintToLog"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bPrintToScreen"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Duration"), TEXT("2.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_InText"), TEXT("Hello"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_TextColor"), TEXT("(R=0.000000,G=0.660000,B=1.000000,A=1.000000)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("log"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Prints text to the log, and optionally, to the screen\nIf Print To Log is true, it will be visible in the Output Log window.  Otherwise it will be logged only as 'Verbose', so it generally won't show up.\n\n@param       InText                  The text to log out\n@param       bPrintToScreen  Whether or not to print the output to the screen\n@param       bPrintToLog             Whether or not to print the output to the log\n@param       bPrintToConsole Whether or not to print the output to the console\n@param       TextColor               Whether or not to print the output to the console\n@param       Duration                The display duration (if Print to Screen is True). Using negative number will result in loading the duration time from the config."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_PrintWarning()
	{
		struct KismetSystemLibrary_eventPrintWarning_Parms
		{
			FString InString;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PrintWarning"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(KismetSystemLibrary_eventPrintWarning_Parms));
			UProperty* NewProp_InString = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InString"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(InString, KismetSystemLibrary_eventPrintWarning_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("TRUE"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Prints a warning string to the log and the screen. Meant to be used as a way to inform the user that they misused the node.\n\nWARNING!! Don't change the signature of this function without fixing up all nodes using it in the compiler\n\n@param       InString                The string to log out"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_QuitGame()
	{
		struct KismetSystemLibrary_eventQuitGame_Parms
		{
			UObject* WorldContextObject;
			APlayerController* SpecificPlayer;
			TEnumAsByte<EQuitPreference::Type> QuitPreference;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("QuitGame"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(KismetSystemLibrary_eventQuitGame_Parms));
			UProperty* NewProp_QuitPreference = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("QuitPreference"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(QuitPreference, KismetSystemLibrary_eventQuitGame_Parms), 0x0000000000000080, Z_Construct_UEnum_Engine_EQuitPreference());
			UProperty* NewProp_SpecificPlayer = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SpecificPlayer"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(SpecificPlayer, KismetSystemLibrary_eventQuitGame_Parms), 0x0000000000000080, Z_Construct_UClass_APlayerController_NoRegister());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventQuitGame_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Game"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Exit the current game\n@param       SpecificPlayer  The specific player to quit the game. If not specified, player 0 will quit."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_RegisterForRemoteNotifications()
	{
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RegisterForRemoteNotifications"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Platform"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Requests permission to send remote notifications to the user's device.\n(iOS only)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_ResetGamepadAssignments()
	{
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ResetGamepadAssignments"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Platform"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Resets the gamepad to player controller id assignments (Android only)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_ResetGamepadAssignmentToController()
	{
		struct KismetSystemLibrary_eventResetGamepadAssignmentToController_Parms
		{
			int32 ControllerId;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ResetGamepadAssignmentToController"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(KismetSystemLibrary_eventResetGamepadAssignmentToController_Parms));
			UProperty* NewProp_ControllerId = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ControllerId"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ControllerId, KismetSystemLibrary_eventResetGamepadAssignmentToController_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Platform"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("* Resets the gamepad assignment to player controller id (Android only)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_RetriggerableDelay()
	{
		struct KismetSystemLibrary_eventRetriggerableDelay_Parms
		{
			UObject* WorldContextObject;
			float Duration;
			FLatentActionInfo LatentInfo;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RetriggerableDelay"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(KismetSystemLibrary_eventRetriggerableDelay_Parms));
			UProperty* NewProp_LatentInfo = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LatentInfo"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LatentInfo, KismetSystemLibrary_eventRetriggerableDelay_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FLatentActionInfo());
			UProperty* NewProp_Duration = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Duration"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Duration, KismetSystemLibrary_eventRetriggerableDelay_Parms), 0x0000000000000080);
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventRetriggerableDelay_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|FlowControl"));
			MetaData->SetValue(ReturnFunction, TEXT("Duration"), TEXT("0.2"));
			MetaData->SetValue(ReturnFunction, TEXT("Latent"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("LatentInfo"), TEXT("LatentInfo"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Perform a latent action with a retriggerable delay (specified in seconds).  Calling again while it is counting down will reset the countdown to Duration.\n\n@param WorldContext  World context.\n@param Duration              length of delay (in seconds).\n@param LatentInfo    The latent action."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetAssetClassPropertyByName()
	{
		struct KismetSystemLibrary_eventSetAssetClassPropertyByName_Parms
		{
			UObject* Object;
			FName PropertyName;
			TAssetSubclassOf<UObject>  Value;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetAssetClassPropertyByName"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(KismetSystemLibrary_eventSetAssetClassPropertyByName_Parms));
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_Native) UAssetClassProperty(CPP_PROPERTY_BASE(Value, KismetSystemLibrary_eventSetAssetClassPropertyByName_Parms), 0x0004000008000182, Z_Construct_UClass_UObject_NoRegister());
			UProperty* NewProp_PropertyName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PropertyName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(PropertyName, KismetSystemLibrary_eventSetAssetClassPropertyByName_Parms), 0x0000000000000080);
			UProperty* NewProp_Object = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Object"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Object, KismetSystemLibrary_eventSetAssetClassPropertyByName_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AutoCreateRefTerm"), TEXT("Value"));
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set a ASSETCLASS property by name"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetAssetPropertyByName()
	{
		struct KismetSystemLibrary_eventSetAssetPropertyByName_Parms
		{
			UObject* Object;
			FName PropertyName;
			TAssetPtr<UObject> Value;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetAssetPropertyByName"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(KismetSystemLibrary_eventSetAssetPropertyByName_Parms));
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_Native) UAssetObjectProperty(CPP_PROPERTY_BASE(Value, KismetSystemLibrary_eventSetAssetPropertyByName_Parms), 0x0004000008000182, Z_Construct_UClass_UObject_NoRegister());
			UProperty* NewProp_PropertyName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PropertyName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(PropertyName, KismetSystemLibrary_eventSetAssetPropertyByName_Parms), 0x0000000000000080);
			UProperty* NewProp_Object = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Object"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Object, KismetSystemLibrary_eventSetAssetPropertyByName_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AutoCreateRefTerm"), TEXT("Value"));
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set a ASSET property by name"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetBoolPropertyByName()
	{
		struct KismetSystemLibrary_eventSetBoolPropertyByName_Parms
		{
			UObject* Object;
			FName PropertyName;
			bool Value;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetBoolPropertyByName"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(KismetSystemLibrary_eventSetBoolPropertyByName_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(Value, KismetSystemLibrary_eventSetBoolPropertyByName_Parms, bool);
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Value, KismetSystemLibrary_eventSetBoolPropertyByName_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(Value, KismetSystemLibrary_eventSetBoolPropertyByName_Parms), sizeof(bool), true);
			UProperty* NewProp_PropertyName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PropertyName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(PropertyName, KismetSystemLibrary_eventSetBoolPropertyByName_Parms), 0x0000000000000080);
			UProperty* NewProp_Object = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Object"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Object, KismetSystemLibrary_eventSetBoolPropertyByName_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set a bool property by name"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetBytePropertyByName()
	{
		struct KismetSystemLibrary_eventSetBytePropertyByName_Parms
		{
			UObject* Object;
			FName PropertyName;
			uint8 Value;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetBytePropertyByName"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(KismetSystemLibrary_eventSetBytePropertyByName_Parms));
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(Value, KismetSystemLibrary_eventSetBytePropertyByName_Parms), 0x0000000000000080);
			UProperty* NewProp_PropertyName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PropertyName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(PropertyName, KismetSystemLibrary_eventSetBytePropertyByName_Parms), 0x0000000000000080);
			UProperty* NewProp_Object = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Object"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Object, KismetSystemLibrary_eventSetBytePropertyByName_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set an uint8 or enum property by name"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetClassPropertyByName()
	{
		struct KismetSystemLibrary_eventSetClassPropertyByName_Parms
		{
			UObject* Object;
			FName PropertyName;
			TSubclassOf<UObject>  Value;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetClassPropertyByName"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(KismetSystemLibrary_eventSetClassPropertyByName_Parms));
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(Value, KismetSystemLibrary_eventSetClassPropertyByName_Parms), 0x0004000000000080, Z_Construct_UClass_UObject_NoRegister());
			UProperty* NewProp_PropertyName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PropertyName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(PropertyName, KismetSystemLibrary_eventSetClassPropertyByName_Parms), 0x0000000000000080);
			UProperty* NewProp_Object = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Object"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Object, KismetSystemLibrary_eventSetClassPropertyByName_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set an OBJECT property by name"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetCollisionProfileNameProperty()
	{
		struct KismetSystemLibrary_eventSetCollisionProfileNameProperty_Parms
		{
			UObject* Object;
			FName PropertyName;
			FCollisionProfileName Value;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetCollisionProfileNameProperty"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(KismetSystemLibrary_eventSetCollisionProfileNameProperty_Parms));
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Value, KismetSystemLibrary_eventSetCollisionProfileNameProperty_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FCollisionProfileName());
			UProperty* NewProp_PropertyName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PropertyName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(PropertyName, KismetSystemLibrary_eventSetCollisionProfileNameProperty_Parms), 0x0000000000000080);
			UProperty* NewProp_Object = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Object"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Object, KismetSystemLibrary_eventSetCollisionProfileNameProperty_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AutoCreateRefTerm"), TEXT("Value"));
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set a CollisionProfileName property by name"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetFloatPropertyByName()
	{
		struct KismetSystemLibrary_eventSetFloatPropertyByName_Parms
		{
			UObject* Object;
			FName PropertyName;
			float Value;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetFloatPropertyByName"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(KismetSystemLibrary_eventSetFloatPropertyByName_Parms));
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Value, KismetSystemLibrary_eventSetFloatPropertyByName_Parms), 0x0000000000000080);
			UProperty* NewProp_PropertyName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PropertyName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(PropertyName, KismetSystemLibrary_eventSetFloatPropertyByName_Parms), 0x0000000000000080);
			UProperty* NewProp_Object = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Object"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Object, KismetSystemLibrary_eventSetFloatPropertyByName_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set a float property by name"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetIntPropertyByName()
	{
		struct KismetSystemLibrary_eventSetIntPropertyByName_Parms
		{
			UObject* Object;
			FName PropertyName;
			int32 Value;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetIntPropertyByName"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(KismetSystemLibrary_eventSetIntPropertyByName_Parms));
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Value, KismetSystemLibrary_eventSetIntPropertyByName_Parms), 0x0000000000000080);
			UProperty* NewProp_PropertyName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PropertyName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(PropertyName, KismetSystemLibrary_eventSetIntPropertyByName_Parms), 0x0000000000000080);
			UProperty* NewProp_Object = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Object"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Object, KismetSystemLibrary_eventSetIntPropertyByName_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set an int32 property by name"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetLinearColorPropertyByName()
	{
		struct KismetSystemLibrary_eventSetLinearColorPropertyByName_Parms
		{
			UObject* Object;
			FName PropertyName;
			FLinearColor Value;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetLinearColorPropertyByName"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(KismetSystemLibrary_eventSetLinearColorPropertyByName_Parms));
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Value, KismetSystemLibrary_eventSetLinearColorPropertyByName_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_PropertyName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PropertyName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(PropertyName, KismetSystemLibrary_eventSetLinearColorPropertyByName_Parms), 0x0000000000000080);
			UProperty* NewProp_Object = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Object"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Object, KismetSystemLibrary_eventSetLinearColorPropertyByName_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AutoCreateRefTerm"), TEXT("Value"));
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set a LINEAR COLOR property by name"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetNamePropertyByName()
	{
		struct KismetSystemLibrary_eventSetNamePropertyByName_Parms
		{
			UObject* Object;
			FName PropertyName;
			FName Value;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetNamePropertyByName"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(KismetSystemLibrary_eventSetNamePropertyByName_Parms));
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(Value, KismetSystemLibrary_eventSetNamePropertyByName_Parms), 0x0000000008000182);
			UProperty* NewProp_PropertyName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PropertyName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(PropertyName, KismetSystemLibrary_eventSetNamePropertyByName_Parms), 0x0000000000000080);
			UProperty* NewProp_Object = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Object"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Object, KismetSystemLibrary_eventSetNamePropertyByName_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AutoCreateRefTerm"), TEXT("Value"));
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set a NAME property by name"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetObjectPropertyByName()
	{
		struct KismetSystemLibrary_eventSetObjectPropertyByName_Parms
		{
			UObject* Object;
			FName PropertyName;
			UObject* Value;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetObjectPropertyByName"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(KismetSystemLibrary_eventSetObjectPropertyByName_Parms));
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Value, KismetSystemLibrary_eventSetObjectPropertyByName_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			UProperty* NewProp_PropertyName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PropertyName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(PropertyName, KismetSystemLibrary_eventSetObjectPropertyByName_Parms), 0x0000000000000080);
			UProperty* NewProp_Object = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Object"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Object, KismetSystemLibrary_eventSetObjectPropertyByName_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set an OBJECT property by name"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetRotatorPropertyByName()
	{
		struct KismetSystemLibrary_eventSetRotatorPropertyByName_Parms
		{
			UObject* Object;
			FName PropertyName;
			FRotator Value;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetRotatorPropertyByName"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(KismetSystemLibrary_eventSetRotatorPropertyByName_Parms));
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Value, KismetSystemLibrary_eventSetRotatorPropertyByName_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_PropertyName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PropertyName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(PropertyName, KismetSystemLibrary_eventSetRotatorPropertyByName_Parms), 0x0000000000000080);
			UProperty* NewProp_Object = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Object"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Object, KismetSystemLibrary_eventSetRotatorPropertyByName_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AutoCreateRefTerm"), TEXT("Value"));
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set a ROTATOR property by name"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetStringPropertyByName()
	{
		struct KismetSystemLibrary_eventSetStringPropertyByName_Parms
		{
			UObject* Object;
			FName PropertyName;
			FString Value;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetStringPropertyByName"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(KismetSystemLibrary_eventSetStringPropertyByName_Parms));
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Value, KismetSystemLibrary_eventSetStringPropertyByName_Parms), 0x0000000000000080);
			UProperty* NewProp_PropertyName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PropertyName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(PropertyName, KismetSystemLibrary_eventSetStringPropertyByName_Parms), 0x0000000000000080);
			UProperty* NewProp_Object = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Object"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Object, KismetSystemLibrary_eventSetStringPropertyByName_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AutoCreateRefTerm"), TEXT("Value"));
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set a STRING property by name"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetStructurePropertyByName()
	{
		struct KismetSystemLibrary_eventSetStructurePropertyByName_Parms
		{
			UObject* Object;
			FName PropertyName;
			FGenericStruct Value;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetStructurePropertyByName"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(KismetSystemLibrary_eventSetStructurePropertyByName_Parms));
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Value, KismetSystemLibrary_eventSetStructurePropertyByName_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FGenericStruct());
			UProperty* NewProp_PropertyName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PropertyName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(PropertyName, KismetSystemLibrary_eventSetStructurePropertyByName_Parms), 0x0000000000000080);
			UProperty* NewProp_Object = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Object"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Object, KismetSystemLibrary_eventSetStructurePropertyByName_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("CustomStructureParam"), TEXT("Value"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set a custom structure property by name"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetSupressViewportTransitionMessage()
	{
		struct KismetSystemLibrary_eventSetSupressViewportTransitionMessage_Parms
		{
			UObject* WorldContextObject;
			bool bState;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetSupressViewportTransitionMessage"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(KismetSystemLibrary_eventSetSupressViewportTransitionMessage_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bState, KismetSystemLibrary_eventSetSupressViewportTransitionMessage_Parms, bool);
			UProperty* NewProp_bState = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bState"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bState, KismetSystemLibrary_eventSetSupressViewportTransitionMessage_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bState, KismetSystemLibrary_eventSetSupressViewportTransitionMessage_Parms), sizeof(bool), true);
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventSetSupressViewportTransitionMessage_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the state of the transition message rendered by the viewport. (The blue text displayed when the game is paused and so forth.)\n\n@param WorldContextObject    World context\n@param State                                 set true to supress transition message"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetTextPropertyByName()
	{
		struct KismetSystemLibrary_eventSetTextPropertyByName_Parms
		{
			UObject* Object;
			FName PropertyName;
			FText Value;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetTextPropertyByName"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(KismetSystemLibrary_eventSetTextPropertyByName_Parms));
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(Value, KismetSystemLibrary_eventSetTextPropertyByName_Parms), 0x0000000008000182);
			UProperty* NewProp_PropertyName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PropertyName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(PropertyName, KismetSystemLibrary_eventSetTextPropertyByName_Parms), 0x0000000000000080);
			UProperty* NewProp_Object = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Object"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Object, KismetSystemLibrary_eventSetTextPropertyByName_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AutoCreateRefTerm"), TEXT("Value"));
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set a TEXT property by name"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetTransformPropertyByName()
	{
		struct KismetSystemLibrary_eventSetTransformPropertyByName_Parms
		{
			UObject* Object;
			FName PropertyName;
			FTransform Value;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetTransformPropertyByName"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(KismetSystemLibrary_eventSetTransformPropertyByName_Parms));
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Value, KismetSystemLibrary_eventSetTransformPropertyByName_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FTransform());
			UProperty* NewProp_PropertyName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PropertyName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(PropertyName, KismetSystemLibrary_eventSetTransformPropertyByName_Parms), 0x0000000000000080);
			UProperty* NewProp_Object = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Object"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Object, KismetSystemLibrary_eventSetTransformPropertyByName_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AutoCreateRefTerm"), TEXT("Value"));
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set a TRANSFORM property by name"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetVectorPropertyByName()
	{
		struct KismetSystemLibrary_eventSetVectorPropertyByName_Parms
		{
			UObject* Object;
			FName PropertyName;
			FVector Value;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetVectorPropertyByName"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(KismetSystemLibrary_eventSetVectorPropertyByName_Parms));
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Value, KismetSystemLibrary_eventSetVectorPropertyByName_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_PropertyName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PropertyName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(PropertyName, KismetSystemLibrary_eventSetVectorPropertyByName_Parms), 0x0000000000000080);
			UProperty* NewProp_Object = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Object"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Object, KismetSystemLibrary_eventSetVectorPropertyByName_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AutoCreateRefTerm"), TEXT("Value"));
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set a VECTOR property by name"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetVolumeButtonsHandledBySystem()
	{
		struct KismetSystemLibrary_eventSetVolumeButtonsHandledBySystem_Parms
		{
			bool bEnabled;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetVolumeButtonsHandledBySystem"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(KismetSystemLibrary_eventSetVolumeButtonsHandledBySystem_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnabled, KismetSystemLibrary_eventSetVolumeButtonsHandledBySystem_Parms, bool);
			UProperty* NewProp_bEnabled = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bEnabled"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnabled, KismetSystemLibrary_eventSetVolumeButtonsHandledBySystem_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bEnabled, KismetSystemLibrary_eventSetVolumeButtonsHandledBySystem_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Platform"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Allows or inhibits system default handling of volume up and volume down buttons (Android only)\n@param       bEnabled                                If true, allow Android to handle volume up and down events"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetWindowTitle()
	{
		struct KismetSystemLibrary_eventSetWindowTitle_Parms
		{
			FText Title;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetWindowTitle"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(KismetSystemLibrary_eventSetWindowTitle_Parms));
			UProperty* NewProp_Title = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Title"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(Title, KismetSystemLibrary_eventSetWindowTitle_Parms), 0x0000000008000182);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the game window title"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_ShowAdBanner()
	{
		struct KismetSystemLibrary_eventShowAdBanner_Parms
		{
			int32 AdIdIndex;
			bool bShowOnBottomOfScreen;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ShowAdBanner"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(KismetSystemLibrary_eventShowAdBanner_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bShowOnBottomOfScreen, KismetSystemLibrary_eventShowAdBanner_Parms, bool);
			UProperty* NewProp_bShowOnBottomOfScreen = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bShowOnBottomOfScreen"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bShowOnBottomOfScreen, KismetSystemLibrary_eventShowAdBanner_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bShowOnBottomOfScreen, KismetSystemLibrary_eventShowAdBanner_Parms), sizeof(bool), true);
			UProperty* NewProp_AdIdIndex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AdIdIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(AdIdIndex, KismetSystemLibrary_eventShowAdBanner_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Platform"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Will show an ad banner (iAd on iOS, or AdMob on Android) on the top or bottom of screen, on top of the GL view (doesn't resize the view)\n(iOS and Android only)\n\n@param AdIdIndex The index of the ID to select for the add to show\n@param bShowOnBottomOfScreen If true, the iAd will be shown at the bottom of the screen, top otherwise"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_ShowPlatformSpecificAchievementsScreen()
	{
		struct KismetSystemLibrary_eventShowPlatformSpecificAchievementsScreen_Parms
		{
			APlayerController* SpecificPlayer;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ShowPlatformSpecificAchievementsScreen"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(KismetSystemLibrary_eventShowPlatformSpecificAchievementsScreen_Parms));
			UProperty* NewProp_SpecificPlayer = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SpecificPlayer"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(SpecificPlayer, KismetSystemLibrary_eventShowPlatformSpecificAchievementsScreen_Parms), 0x0000000000000080, Z_Construct_UClass_APlayerController_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Platform"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Displays the built-in achievements GUI (iOS and Android only; this function may be renamed or moved in a future release)\n\n@param SpecificPlayer Specific player's achievements to show. May not be supported on all platforms. If null, defaults to the player with ControllerId 0"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_ShowPlatformSpecificLeaderboardScreen()
	{
		struct KismetSystemLibrary_eventShowPlatformSpecificLeaderboardScreen_Parms
		{
			FString CategoryName;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ShowPlatformSpecificLeaderboardScreen"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(KismetSystemLibrary_eventShowPlatformSpecificLeaderboardScreen_Parms));
			UProperty* NewProp_CategoryName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CategoryName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(CategoryName, KismetSystemLibrary_eventShowPlatformSpecificLeaderboardScreen_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Platform"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Displays the built-in leaderboard GUI (iOS and Android only; this function may be renamed or moved in a future release)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SphereOverlapActors_DEPRECATED()
	{
		struct KismetSystemLibrary_eventSphereOverlapActors_DEPRECATED_Parms
		{
			UObject* WorldContextObject;
			FVector SpherePos;
			float SphereRadius;
			TEnumAsByte<EOverlapFilterOption> Filter;
			UClass* ActorClassFilter;
			TArray<AActor*> ActorsToIgnore;
			TArray<AActor*> OutActors;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SphereOverlapActors_DEPRECATED"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(KismetSystemLibrary_eventSphereOverlapActors_DEPRECATED_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetSystemLibrary_eventSphereOverlapActors_DEPRECATED_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetSystemLibrary_eventSphereOverlapActors_DEPRECATED_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetSystemLibrary_eventSphereOverlapActors_DEPRECATED_Parms), sizeof(bool), true);
			UProperty* NewProp_OutActors = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutActors"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(OutActors, KismetSystemLibrary_eventSphereOverlapActors_DEPRECATED_Parms), 0x0000000000000180);
			UProperty* NewProp_OutActors_Inner = new(EC_InternalUseOnlyConstructor, NewProp_OutActors, TEXT("OutActors"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_ActorsToIgnore = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ActorsToIgnore, KismetSystemLibrary_eventSphereOverlapActors_DEPRECATED_Parms), 0x0000000008000182);
			UProperty* NewProp_ActorsToIgnore_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ActorsToIgnore, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_ActorClassFilter = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActorClassFilter"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(ActorClassFilter, KismetSystemLibrary_eventSphereOverlapActors_DEPRECATED_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			UProperty* NewProp_Filter = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Filter"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(Filter, KismetSystemLibrary_eventSphereOverlapActors_DEPRECATED_Parms), 0x0000000000000080, Z_Construct_UEnum_Engine_EOverlapFilterOption());
			UProperty* NewProp_SphereRadius = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SphereRadius"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(SphereRadius, KismetSystemLibrary_eventSphereOverlapActors_DEPRECATED_Parms), 0x0000000000000080);
			UProperty* NewProp_SpherePos = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SpherePos"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SpherePos, KismetSystemLibrary_eventSphereOverlapActors_DEPRECATED_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventSphereOverlapActors_DEPRECATED_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AutoCreateRefTerm"), TEXT("ActorsToIgnore"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Collision"));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecatedFunction"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecationMessage"), TEXT("Use new SphereOverlapActors"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SphereOverlapActors_NEW()
	{
		struct KismetSystemLibrary_eventSphereOverlapActors_NEW_Parms
		{
			UObject* WorldContextObject;
			FVector SpherePos;
			float SphereRadius;
			TArray<TEnumAsByte<EObjectTypeQuery> > ObjectTypes;
			UClass* ActorClassFilter;
			TArray<AActor*> ActorsToIgnore;
			TArray<AActor*> OutActors;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SphereOverlapActors_NEW"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(KismetSystemLibrary_eventSphereOverlapActors_NEW_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetSystemLibrary_eventSphereOverlapActors_NEW_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetSystemLibrary_eventSphereOverlapActors_NEW_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetSystemLibrary_eventSphereOverlapActors_NEW_Parms), sizeof(bool), true);
			UProperty* NewProp_OutActors = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutActors"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(OutActors, KismetSystemLibrary_eventSphereOverlapActors_NEW_Parms), 0x0000000000000180);
			UProperty* NewProp_OutActors_Inner = new(EC_InternalUseOnlyConstructor, NewProp_OutActors, TEXT("OutActors"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_ActorsToIgnore = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ActorsToIgnore, KismetSystemLibrary_eventSphereOverlapActors_NEW_Parms), 0x0000000008000182);
			UProperty* NewProp_ActorsToIgnore_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ActorsToIgnore, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_ActorClassFilter = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActorClassFilter"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(ActorClassFilter, KismetSystemLibrary_eventSphereOverlapActors_NEW_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			UProperty* NewProp_ObjectTypes = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ObjectTypes"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ObjectTypes, KismetSystemLibrary_eventSphereOverlapActors_NEW_Parms), 0x0000000008000182);
			UProperty* NewProp_ObjectTypes_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ObjectTypes, TEXT("ObjectTypes"), RF_Public|RF_Transient|RF_Native) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UEnum_Engine_EObjectTypeQuery());
			UProperty* NewProp_SphereRadius = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SphereRadius"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(SphereRadius, KismetSystemLibrary_eventSphereOverlapActors_NEW_Parms), 0x0000000000000080);
			UProperty* NewProp_SpherePos = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SpherePos"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SpherePos, KismetSystemLibrary_eventSphereOverlapActors_NEW_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventSphereOverlapActors_NEW_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AutoCreateRefTerm"), TEXT("ActorsToIgnore"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Collision"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("SphereOverlapActors"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns an array of actors that overlap the given sphere.\n@param WorldContext  World context\n@param SpherePos             Center of sphere.\n@param SphereRadius  Size of sphere.\n@param Filter                Option to restrict results to only static or only dynamic.  For efficiency.\n@param ClassFilter   If set, will only return results of this class or subclasses of it.\n@param ActorsToIgnore                Ignore these actors in the list\n@param OutActors             Returned array of actors. Unsorted.\n@return                              true if there was an overlap that passed the filters, false otherwise."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SphereOverlapComponents_DEPRECATED()
	{
		struct KismetSystemLibrary_eventSphereOverlapComponents_DEPRECATED_Parms
		{
			UObject* WorldContextObject;
			FVector SpherePos;
			float SphereRadius;
			TEnumAsByte<EOverlapFilterOption> Filter;
			UClass* ComponentClassFilter;
			TArray<AActor*> ActorsToIgnore;
			TArray<UPrimitiveComponent*> OutComponents;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SphereOverlapComponents_DEPRECATED"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(KismetSystemLibrary_eventSphereOverlapComponents_DEPRECATED_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetSystemLibrary_eventSphereOverlapComponents_DEPRECATED_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetSystemLibrary_eventSphereOverlapComponents_DEPRECATED_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetSystemLibrary_eventSphereOverlapComponents_DEPRECATED_Parms), sizeof(bool), true);
			UProperty* NewProp_OutComponents = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutComponents"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(OutComponents, KismetSystemLibrary_eventSphereOverlapComponents_DEPRECATED_Parms), 0x0000008000000180);
			UProperty* NewProp_OutComponents_Inner = new(EC_InternalUseOnlyConstructor, NewProp_OutComponents, TEXT("OutComponents"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000080000, Z_Construct_UClass_UPrimitiveComponent_NoRegister());
			UProperty* NewProp_ActorsToIgnore = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ActorsToIgnore, KismetSystemLibrary_eventSphereOverlapComponents_DEPRECATED_Parms), 0x0000000008000182);
			UProperty* NewProp_ActorsToIgnore_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ActorsToIgnore, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_ComponentClassFilter = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ComponentClassFilter"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(ComponentClassFilter, KismetSystemLibrary_eventSphereOverlapComponents_DEPRECATED_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			UProperty* NewProp_Filter = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Filter"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(Filter, KismetSystemLibrary_eventSphereOverlapComponents_DEPRECATED_Parms), 0x0000000000000080, Z_Construct_UEnum_Engine_EOverlapFilterOption());
			UProperty* NewProp_SphereRadius = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SphereRadius"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(SphereRadius, KismetSystemLibrary_eventSphereOverlapComponents_DEPRECATED_Parms), 0x0000000000000080);
			UProperty* NewProp_SpherePos = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SpherePos"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SpherePos, KismetSystemLibrary_eventSphereOverlapComponents_DEPRECATED_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventSphereOverlapComponents_DEPRECATED_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AutoCreateRefTerm"), TEXT("ActorsToIgnore"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Collision"));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecatedFunction"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecationMessage"), TEXT("Use new SphereOverlapComponents"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
			MetaData->SetValue(NewProp_OutComponents, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UKismetSystemLibrary_NoRegister()
	{
		return UKismetSystemLibrary::StaticClass();
	}
	UClass* Z_Construct_UClass_UKismetSystemLibrary()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBlueprintFunctionLibrary();
			Z_Construct_UPackage_Engine();
			OuterClass = UKismetSystemLibrary::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_AddFloatHistorySample());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_BoxOverlapActors_DEPRECATED());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_BoxOverlapActors_NEW());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_BoxOverlapComponents_DEPRECATED());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_BoxOverlapComponents_NEW());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_BoxTraceMulti());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_BoxTraceMultiForObjects());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_BoxTraceSingle());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_BoxTraceSingleForObjects());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_CapsuleOverlapActors_DEPRECATED());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_CapsuleOverlapActors_NEW());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_CapsuleOverlapComponents_DEPRECATED());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_CapsuleOverlapComponents_NEW());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_CapsuleTraceMulti_DEPRECATED());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_CapsuleTraceMulti_NEW());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_CapsuleTraceMultiByObject_DEPRECATED());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_CapsuleTraceMultiForObjects());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_CapsuleTraceSingle_DEPRECATED());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_CapsuleTraceSingle_NEW());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_CapsuleTraceSingleByObject_DEPRECATED());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_CapsuleTraceSingleForObjects());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_CollectGarbage());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_ComponentOverlapActors_DEPRECATED());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_ComponentOverlapActors_NEW());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_ComponentOverlapComponents_DEPRECATED());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_ComponentOverlapComponents_NEW());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_ControlScreensaver());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_Conv_AssetClassToClass());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_Conv_AssetToObject());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_Conv_InterfaceToObject());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_CreateCopyForUndoBuffer());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_Delay());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_DoesImplementInterface());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugArrow());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugBox());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugCamera());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugCapsule());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugCircle());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugCone());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugConeInDegrees());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugCoordinateSystem());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugCylinder());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugFloatHistoryLocation());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugFloatHistoryTransform());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugFrustum());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugLine());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugPlane());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugPoint());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugSphere());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugString());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_ExecuteConsoleCommand());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_FlushDebugStrings());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_FlushPersistentDebugLines());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_ForceCloseAdBanner());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_GetActorBounds());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_GetActorListFromComponentList());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_GetAdIDCount());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_GetClassDisplayName());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_GetComponentBounds());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_GetDisplayName());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_GetEngineVersion());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_GetGameName());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_GetGameTimeInSeconds());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_GetLocalCurrencyCode());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_GetLocalCurrencySymbol());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_GetObjectName());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_GetPlatformUserName());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_GetPreferredLanguages());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_GetRenderingDetailMode());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_GetRenderingMaterialQualityLevel());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_GetSupportedFullscreenResolutions());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_GetUniqueDeviceId());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_GetVolumeButtonsHandledBySystem());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_HideAdBanner());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_IsControllerAssignedToGamepad());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_IsDedicatedServer());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_IsLoggedIn());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_IsPackagedForDistribution());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_IsServer());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_IsValid());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_IsValidClass());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_K2_ClearTimer());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_K2_ClearTimerDelegate());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_K2_ClearTimerHandle());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_K2_GetTimerElapsedTime());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_K2_GetTimerElapsedTimeDelegate());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_K2_GetTimerElapsedTimeHandle());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_K2_GetTimerRemainingTime());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_K2_GetTimerRemainingTimeDelegate());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_K2_GetTimerRemainingTimeHandle());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_K2_InvalidateTimerHandle());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_K2_IsTimerActive());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_K2_IsTimerActiveDelegate());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_K2_IsTimerActiveHandle());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_K2_IsTimerPaused());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_K2_IsTimerPausedDelegate());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_K2_IsTimerPausedHandle());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_K2_IsValidTimerHandle());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_K2_PauseTimer());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_K2_PauseTimerDelegate());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_K2_PauseTimerHandle());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_K2_SetTimer());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_K2_SetTimerDelegate());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_K2_TimerExists());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_K2_TimerExistsDelegate());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_K2_TimerExistsHandle());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_K2_UnPauseTimer());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_K2_UnPauseTimerDelegate());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_K2_UnPauseTimerHandle());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_LaunchURL());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_LineTraceMulti_DEPRECATED());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_LineTraceMulti_NEW());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_LineTraceMultiByObject_DEPRECATED());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_LineTraceMultiForObjects());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_LineTraceSingle_DEPRECATED());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_LineTraceSingle_NEW());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_LineTraceSingleByObject_DEPRECATED());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_LineTraceSingleForObjects());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_LoadAsset());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_LoadAssetClass());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_MakeLiteralBool());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_MakeLiteralByte());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_MakeLiteralFloat());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_MakeLiteralInt());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_MakeLiteralName());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_MakeLiteralString());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_MakeLiteralText());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_MoveComponentTo());
				OuterClass->LinkChild(Z_Construct_UDelegateFunction_UKismetSystemLibrary_OnAssetClassLoaded__DelegateSignature());
				OuterClass->LinkChild(Z_Construct_UDelegateFunction_UKismetSystemLibrary_OnAssetLoaded__DelegateSignature());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_PrintString());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_PrintText());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_PrintWarning());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_QuitGame());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_RegisterForRemoteNotifications());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_ResetGamepadAssignments());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_ResetGamepadAssignmentToController());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_RetriggerableDelay());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_SetAssetClassPropertyByName());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_SetAssetPropertyByName());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_SetBoolPropertyByName());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_SetBytePropertyByName());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_SetClassPropertyByName());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_SetCollisionProfileNameProperty());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_SetFloatPropertyByName());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_SetIntPropertyByName());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_SetLinearColorPropertyByName());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_SetNamePropertyByName());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_SetObjectPropertyByName());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_SetRotatorPropertyByName());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_SetStringPropertyByName());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_SetStructurePropertyByName());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_SetSupressViewportTransitionMessage());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_SetTextPropertyByName());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_SetTransformPropertyByName());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_SetVectorPropertyByName());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_SetVolumeButtonsHandledBySystem());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_SetWindowTitle());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_ShowAdBanner());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_ShowPlatformSpecificAchievementsScreen());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_ShowPlatformSpecificLeaderboardScreen());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_SphereOverlapActors_DEPRECATED());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_SphereOverlapActors_NEW());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_SphereOverlapComponents_DEPRECATED());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_SphereOverlapComponents_NEW());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_SphereTraceMulti_DEPRECATED());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_SphereTraceMulti_NEW());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_SphereTraceMultiByObject_DEPRECATED());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_SphereTraceMultiForObjects());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_SphereTraceSingle_DEPRECATED());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_SphereTraceSingle_NEW());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_SphereTraceSingleByObject_DEPRECATED());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_SphereTraceSingleForObjects());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetSystemLibrary_StackTrace());

				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_AddFloatHistorySample()); // 1500062645
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_BoxOverlapActors_DEPRECATED()); // 245183781
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_BoxOverlapActors_NEW()); // 1979747895
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_BoxOverlapComponents_DEPRECATED()); // 919988295
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_BoxOverlapComponents_NEW()); // 3253328286
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_BoxTraceMulti()); // 3962818526
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_BoxTraceMultiForObjects()); // 964674985
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_BoxTraceSingle()); // 2885313393
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_BoxTraceSingleForObjects()); // 1662525817
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_CapsuleOverlapActors_DEPRECATED()); // 3742880355
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_CapsuleOverlapActors_NEW()); // 3030314827
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_CapsuleOverlapComponents_DEPRECATED()); // 1255589277
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_CapsuleOverlapComponents_NEW()); // 3841360415
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_CapsuleTraceMulti_DEPRECATED()); // 3173220349
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_CapsuleTraceMulti_NEW()); // 1419975176
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_CapsuleTraceMultiByObject_DEPRECATED()); // 3600365110
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_CapsuleTraceMultiForObjects()); // 2980585385
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_CapsuleTraceSingle_DEPRECATED()); // 2034859456
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_CapsuleTraceSingle_NEW()); // 3900954814
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_CapsuleTraceSingleByObject_DEPRECATED()); // 3124119565
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_CapsuleTraceSingleForObjects()); // 3455250803
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_CollectGarbage()); // 4155632963
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_ComponentOverlapActors_DEPRECATED()); // 2891820159
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_ComponentOverlapActors_NEW()); // 627613836
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_ComponentOverlapComponents_DEPRECATED()); // 3872911293
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_ComponentOverlapComponents_NEW()); // 38675671
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_ControlScreensaver()); // 717059787
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_Conv_AssetClassToClass()); // 3757286478
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_Conv_AssetToObject()); // 2440430096
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_Conv_InterfaceToObject()); // 524799497
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_CreateCopyForUndoBuffer()); // 4035832722
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_Delay()); // 702492906
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_DoesImplementInterface()); // 331245967
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugArrow()); // 3015853711
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugBox()); // 1737784614
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugCamera()); // 4174645499
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugCapsule()); // 3925578192
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugCircle()); // 1080753487
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugCone()); // 736317359
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugConeInDegrees()); // 1964189204
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugCoordinateSystem()); // 560626042
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugCylinder()); // 1510467990
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugFloatHistoryLocation()); // 1497458559
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugFloatHistoryTransform()); // 190524749
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugFrustum()); // 692132844
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugLine()); // 3778696868
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugPlane()); // 904051941
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugPoint()); // 1187670336
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugSphere()); // 4167011204
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugString()); // 3228325868
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_ExecuteConsoleCommand()); // 2859271529
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_FlushDebugStrings()); // 1026563272
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_FlushPersistentDebugLines()); // 2255247188
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_ForceCloseAdBanner()); // 2394960681
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_GetActorBounds()); // 3831443343
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_GetActorListFromComponentList()); // 3491283623
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_GetAdIDCount()); // 3839165999
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_GetClassDisplayName()); // 3254405550
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_GetComponentBounds()); // 192457378
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_GetDisplayName()); // 2518833902
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_GetEngineVersion()); // 2507531548
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_GetGameName()); // 2780157877
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_GetGameTimeInSeconds()); // 2867008227
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_GetLocalCurrencyCode()); // 3659265691
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_GetLocalCurrencySymbol()); // 1117457774
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_GetObjectName()); // 3399377426
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_GetPlatformUserName()); // 211589671
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_GetPreferredLanguages()); // 3170322896
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_GetRenderingDetailMode()); // 1594789789
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_GetRenderingMaterialQualityLevel()); // 1896718288
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_GetSupportedFullscreenResolutions()); // 1614320372
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_GetUniqueDeviceId()); // 261479991
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_GetVolumeButtonsHandledBySystem()); // 3531144271
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_HideAdBanner()); // 3822670036
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_IsControllerAssignedToGamepad()); // 2856374917
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_IsDedicatedServer()); // 565680560
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_IsLoggedIn()); // 503490681
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_IsPackagedForDistribution()); // 1081439673
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_IsServer()); // 2698380572
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_IsValid()); // 2557745243
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_IsValidClass()); // 623905930
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_K2_ClearTimer()); // 3682446252
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_K2_ClearTimerDelegate()); // 2989261991
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_K2_ClearTimerHandle()); // 2334431036
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_K2_GetTimerElapsedTime()); // 1019208056
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_K2_GetTimerElapsedTimeDelegate()); // 3935323322
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_K2_GetTimerElapsedTimeHandle()); // 862946491
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_K2_GetTimerRemainingTime()); // 963611530
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_K2_GetTimerRemainingTimeDelegate()); // 106531469
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_K2_GetTimerRemainingTimeHandle()); // 1593594972
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_K2_InvalidateTimerHandle()); // 1377179486
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_K2_IsTimerActive()); // 2736579004
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_K2_IsTimerActiveDelegate()); // 3930312373
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_K2_IsTimerActiveHandle()); // 3780409588
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_K2_IsTimerPaused()); // 999972505
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_K2_IsTimerPausedDelegate()); // 2338006691
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_K2_IsTimerPausedHandle()); // 100505359
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_K2_IsValidTimerHandle()); // 3678806370
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_K2_PauseTimer()); // 2273028364
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_K2_PauseTimerDelegate()); // 3608904545
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_K2_PauseTimerHandle()); // 3151594570
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_K2_SetTimer()); // 2609955375
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_K2_SetTimerDelegate()); // 3688607624
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_K2_TimerExists()); // 1556294258
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_K2_TimerExistsDelegate()); // 2369990198
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_K2_TimerExistsHandle()); // 3863774536
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_K2_UnPauseTimer()); // 536376841
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_K2_UnPauseTimerDelegate()); // 3905658339
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_K2_UnPauseTimerHandle()); // 3529627471
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_LaunchURL()); // 688799956
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_LineTraceMulti_DEPRECATED()); // 3104383224
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_LineTraceMulti_NEW()); // 1128999402
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_LineTraceMultiByObject_DEPRECATED()); // 652107975
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_LineTraceMultiForObjects()); // 1126525659
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_LineTraceSingle_DEPRECATED()); // 280112877
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_LineTraceSingle_NEW()); // 232358300
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_LineTraceSingleByObject_DEPRECATED()); // 2806182779
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_LineTraceSingleForObjects()); // 2103377715
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_LoadAsset()); // 1089103026
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_LoadAssetClass()); // 742682134
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_MakeLiteralBool()); // 401087108
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_MakeLiteralByte()); // 2721673035
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_MakeLiteralFloat()); // 705837460
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_MakeLiteralInt()); // 3365102716
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_MakeLiteralName()); // 3616378095
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_MakeLiteralString()); // 3975714507
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_MakeLiteralText()); // 1698746679
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_MoveComponentTo()); // 113768209
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UDelegateFunction_UKismetSystemLibrary_OnAssetClassLoaded__DelegateSignature()); // 3953657354
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UDelegateFunction_UKismetSystemLibrary_OnAssetLoaded__DelegateSignature()); // 107640656
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_PrintString()); // 32289345
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_PrintText()); // 3012776538
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_PrintWarning()); // 3737348650
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_QuitGame()); // 3863585841
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_RegisterForRemoteNotifications()); // 2647964004
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_ResetGamepadAssignments()); // 2739896743
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_ResetGamepadAssignmentToController()); // 3435165692
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_RetriggerableDelay()); // 704079344
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_SetAssetClassPropertyByName()); // 2187236443
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_SetAssetPropertyByName()); // 212716923
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_SetBoolPropertyByName()); // 877589297
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_SetBytePropertyByName()); // 1015658150
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_SetClassPropertyByName()); // 2932355725
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_SetCollisionProfileNameProperty()); // 112455654
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_SetFloatPropertyByName()); // 1624849469
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_SetIntPropertyByName()); // 2667872271
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_SetLinearColorPropertyByName()); // 3520129647
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_SetNamePropertyByName()); // 3351127774
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_SetObjectPropertyByName()); // 2064788193
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_SetRotatorPropertyByName()); // 1462004462
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_SetStringPropertyByName()); // 3184133045
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_SetStructurePropertyByName()); // 1696152565
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_SetSupressViewportTransitionMessage()); // 1736357965
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_SetTextPropertyByName()); // 2709334299
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_SetTransformPropertyByName()); // 1861921755
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_SetVectorPropertyByName()); // 3724301492
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_SetVolumeButtonsHandledBySystem()); // 3666666461
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_SetWindowTitle()); // 1710232579
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_ShowAdBanner()); // 2008868107
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_ShowPlatformSpecificAchievementsScreen()); // 2437921446
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_ShowPlatformSpecificLeaderboardScreen()); // 3017845700
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_SphereOverlapActors_DEPRECATED()); // 188839352
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_SphereOverlapActors_NEW()); // 2915271145
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_SphereOverlapComponents_DEPRECATED()); // 1524469998
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_SphereOverlapComponents_NEW()); // 2286651481
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_SphereTraceMulti_DEPRECATED()); // 3718604493
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_SphereTraceMulti_NEW()); // 3090019261
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_SphereTraceMultiByObject_DEPRECATED()); // 2070563386
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_SphereTraceMultiForObjects()); // 4200427399
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_SphereTraceSingle_DEPRECATED()); // 3385166640
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_SphereTraceSingle_NEW()); // 2855021324
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_SphereTraceSingleByObject_DEPRECATED()); // 1758478072
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_SphereTraceSingleForObjects()); // 638022543
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetSystemLibrary_StackTrace()); // 2292043250
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Kismet/KismetSystemLibrary.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UKismetSystemLibrary(Z_Construct_UClass_UKismetSystemLibrary, TEXT("UKismetSystemLibrary"));
#endif

PRAGMA_ENABLE_DEPRECATION_WARNINGS
