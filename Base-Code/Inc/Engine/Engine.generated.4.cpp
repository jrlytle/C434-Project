// Copyright 1998-2015 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Boilerplate C++ definitions for a single module.
	This is automatically generated by UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "Private/EnginePrivate.h"
#include "Engine.generated.dep.h"
PRAGMA_DISABLE_DEPRECATION_WARNINGS
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	COREUOBJECT_API class UClass* Z_Construct_UClass_UObject();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FVector();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FLinearColor();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FVector2D();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FRotator();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FIntPoint();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FQuat();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FGuid();
	COREUOBJECT_API class UClass* Z_Construct_UClass_UObject_NoRegister();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FTransform();
	INPUTCORE_API class UEnum* Z_Construct_UEnum_InputCore_ETouchIndex();
	INPUTCORE_API class UScriptStruct* Z_Construct_UScriptStruct_FKey();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FColor();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FStringClassReference();
	INPUTCORE_API class UEnum* Z_Construct_UEnum_InputCore_EControllerHand();
	COREUOBJECT_API class UEnum* Z_Construct_UEnum_CoreUObject_EMouseCursor();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FIntVector();
	COREUOBJECT_API class UEnum* Z_Construct_UEnum_CoreUObject_EAxis();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FBoxSphereBounds();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FInterpCurveFloat();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FInterpCurveVector();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FInterpCurveQuat();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FPackedNormal();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FMatrix();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FBox();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FStringAssetReference();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FControllerEvent();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnalogInputEvent();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FKeyEvent();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FInputEvent();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FPointerEvent();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FDateTime();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FTimespan();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FRandomStream();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FPlane();
	COREUOBJECT_API class UEnum* Z_Construct_UEnum_CoreUObject_ESearchCase();
	COREUOBJECT_API class UEnum* Z_Construct_UEnum_CoreUObject_ESearchDir();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FButtonStyle();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FCheckBoxStyle();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FInterpCurveVector2D();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FInterpCurveTwoVectors();
	SLATE_API class UScriptStruct* Z_Construct_UScriptStruct_FInputChord();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FFloatRange();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FCompositeFont();
	SLATECORE_API class UClass* Z_Construct_UClass_UFontProviderInterface_NoRegister();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FInterpCurveLinearColor();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FVector4();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FSlateBrush();
	COREUOBJECT_API class UEnum* Z_Construct_UEnum_CoreUObject_EPixelFormat();

	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EViewModeIndex();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EDemoPlayFailure();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETravelType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETravelFailure();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ENetworkFailure();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETickingGroup();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EInputEvent();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FExposureSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FURL();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPrimitiveComponentPostPhysicsTickFunction();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FActorComponentTickFunction();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FActorTickFunction();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTickFunction();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTickPrerequisite();
	ENGINE_API class UClass* Z_Construct_UClass_UEngineBaseTypes_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UEngineBaseTypes();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FVector_NetQuantizeNormal();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FVector_NetQuantize100();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FVector_NetQuantize10();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FVector_NetQuantize();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FFastArraySerializer();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FFastArraySerializerItem();
	ENGINE_API class UClass* Z_Construct_UClass_UDamageType_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDamageType();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_TimerDynamicDelegate__DelegateSignature();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESpawnActorCollisionHandlingMethod();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAngularConstraintMotion();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EComponentSocketType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EComponentMobility();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EPhysicalSurface();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EWalkableSlopeBehavior();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ERotatorQuantization();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EVectorQuantization();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EEndPlayReason();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAutoPossessAI();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAutoReceiveInput();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ENetDormancy();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ENetRole();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMeshFeatureImportance();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EShadowMapFlags();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ELightMapPaddingType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ECollisionEnabled();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETimelineSigType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESleepFamily();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ERadialImpulseFalloff();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EInputConsumeOptions();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EFilterInterpolationType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ECollisionResponse();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EPhysicsSceneType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETraceTypeQuery();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EObjectTypeQuery();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EOverlapFilterOption();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ECollisionChannel();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMovementMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETriangleSortAxis();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETriangleSortOption();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ELightingBuildQuality();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMaterialSamplerType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMaterialTessellationMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMaterialShadingModel();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EParticleCollisionMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETrailWidthMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETranslucentSortPolicy();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETranslucencyLightingMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESamplerSourceMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EBlendMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EIndirectLightingCacheQuality();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESceneDepthPriorityGroup();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAttachLocation();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EActorMetricsType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAspectRatioAxisConstraint();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCanvasUVTri();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FFontRenderInfo();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDepthFieldGlowInfo();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDebugFloatHistory();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRedirector();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDirectoryPath();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FFilePath();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FComponentReference();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FConstrainComponentPropName();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FWalkableSlopeOverride();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRepAttachment();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRepMovement();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTimerHandle();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRadialDamageEvent();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRadialDamageParams();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPointDamageEvent();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDamageEvent();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMeshMergingSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMeshProxySettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMaterialSimplificationSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMeshBuildSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMeshReductionSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPOV();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimUpdateRateParameters();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimSlotDesc();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimSlotInfo();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMTDResult();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FOverlapResult();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FHitResult();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPrimitiveMaterialRef();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSwarmDebugOptions();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FLightmassDebugOptions();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FLightmassPrimitiveSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FLightmassDirectionalLightSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FLightmassPointLightSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FLightmassLightSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FLocalizedSubtitle();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSubtitleCue();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBasedPosition();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FFractureEffect();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCollisionImpactData();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRigidBodyContactInfo();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRigidBodyErrorCorrection();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRigidBodyState();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCollisionResponseContainer();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FResponseChannel();
	ENGINE_API class UClass* Z_Construct_UClass_UEngineTypes_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UEngineTypes();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ENodeAdvancedPins();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ENodeTitleType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EEdGraphPinDirection();
	ENGINE_API class UClass* Z_Construct_UClass_UEdGraphNode_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UEdGraphNode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EBlueprintPinStyleType();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FEdGraphPinType();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSimpleMemberReference();
	ENGINE_API class UClass* Z_Construct_UClass_UEdGraphPin_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UEdGraphPin();
	ENGINE_API class UClass* Z_Construct_UClass_UBlueprintCore_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBlueprintCore();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EBlueprintType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EBlueprintStatus();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FEditedDocumentInfo();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBPInterfaceDescription();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBPVariableDescription();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBPVariableMetaDataEntry();
	ENGINE_API class UClass* Z_Construct_UClass_UBlueprint_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBlueprint();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMemberReference();
	ENGINE_API class UClass* Z_Construct_UClass_UInterface_AssetUserData_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterface_AssetUserData();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EComponentCreationMethod();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_Activate();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_AddTickPrerequisiteActor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_AddTickPrerequisiteComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_ComponentHasTag();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_Deactivate();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_GetOwner();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_IsActive();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_IsBeingDestroyed();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_IsComponentTickEnabled();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_K2_DestroyComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_OnRep_IsActive();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_ReceiveBeginPlay();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_ReceiveEndPlay();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_ReceiveTick();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_RemoveTickPrerequisiteActor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_RemoveTickPrerequisiteComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_SetActive();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_SetComponentTickEnabled();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_SetIsReplicated();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_SetTickableWhenPaused();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_SetTickGroup();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_ToggleActive();
	ENGINE_API class UClass* Z_Construct_UClass_UActorComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UActorComponent();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_PhysicsVolumeChanged__DelegateSignature();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ERelativeTransformSpace();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EDetailMode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FOverlapInfo();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_DetachFromParent();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_DoesSocketExist();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_GetAllSocketNames();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_GetAttachParent();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_GetChildComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_GetChildrenComponents();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_GetComponentVelocity();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_GetForwardVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_GetNumChildrenComponents();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_GetParentComponents();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_GetPhysicsVolume();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_GetRelativeTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_GetRightVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_GetSocketLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_GetSocketQuaternion();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_GetSocketRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_GetSocketTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_GetUpVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_IsAnySimulatingPhysics();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_IsSimulatingPhysics();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_IsVisible();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_AddLocalOffset();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_AddLocalRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_AddLocalTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_AddRelativeLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_AddRelativeRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_AddWorldOffset();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_AddWorldRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_AddWorldTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_AttachTo();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_GetComponentLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_GetComponentRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_GetComponentScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_GetComponentToWorld();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_SetRelativeLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_SetRelativeLocationAndRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_SetRelativeRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_SetRelativeTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_SetWorldLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_SetWorldLocationAndRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_SetWorldRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_SetWorldTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_OnRep_Transform();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_OnRep_Visibility();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_ResetRelativeTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_SetAbsolute();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_SetHiddenInGame();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_SetRelativeScale3D();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_SetVisibility();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_SetWorldScale3D();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_SnapTo();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_ToggleVisibility();
	ENGINE_API class UClass* Z_Construct_UClass_USceneComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USceneComponent();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ActorEndPlaySignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ActorDestroyedSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ActorEndTouchOverSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ActorBeginTouchOverSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ActorOnInputTouchEndSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ActorOnInputTouchBeginSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ActorOnReleasedSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ActorOnClickedSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ActorEndCursorOverSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ActorBeginCursorOverSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ActorHitSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ActorEndOverlapSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ActorBeginOverlapSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_TakePointDamageSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_TakeAnyDamageSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ActorHasTag();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_AddComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_AddTickPrerequisiteActor();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_AddTickPrerequisiteComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_DetachRootComponentFromParent();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_DisableInput();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_EnableInput();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_FlushNetDormancy();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ForceNetUpdate();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetActorBounds();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetActorEnableCollision();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetActorEyesViewPoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetActorForwardVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetActorRelativeScale3D();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetActorRightVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetActorScale3D();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetActorTimeDilation();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetActorUpVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetComponentByClass();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetComponentsByClass();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetComponentsByTag();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetDistanceTo();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetDotProductTo();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetHorizontalDistanceTo();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetHorizontalDotProductTo();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetInputAxisKeyValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetInputAxisValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetInputVectorAxisValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetInstigator();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetInstigatorController();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetLifeSpan();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetOverlappingActors();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetOverlappingComponents();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetOwner();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetTickableWhenPaused();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetVelocity();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetVerticalDistanceTo();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_HasAuthority();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_IsActorBeingDestroyed();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_IsActorTickEnabled();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_IsOverlappingActor();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_AddActorLocalOffset();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_AddActorLocalRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_AddActorLocalTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_AddActorWorldOffset();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_AddActorWorldRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_AddActorWorldTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_AttachRootComponentTo();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_AttachRootComponentToActor();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_DestroyActor();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_DestroyComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_GetActorLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_GetActorRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_GetRootComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_OnBecomeViewTarget();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_OnEndViewTarget();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_OnReset();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_SetActorLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_SetActorLocationAndRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_SetActorRelativeLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_SetActorRelativeRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_SetActorRelativeTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_SetActorTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_TeleportTo();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_MakeMIDForMaterial();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_MakeNoise();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_OnRep_AttachmentReplication();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_OnRep_Instigator();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_OnRep_ReplicatedMovement();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_OnRep_ReplicateMovement();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ReceiveActorBeginCursorOver();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ReceiveActorBeginOverlap();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ReceiveActorEndCursorOver();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ReceiveActorEndOverlap();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ReceiveActorOnClicked();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ReceiveActorOnInputTouchBegin();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ReceiveActorOnInputTouchEnd();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ReceiveActorOnInputTouchEnter();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ReceiveActorOnInputTouchLeave();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ReceiveActorOnReleased();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ReceiveAnyDamage();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ReceiveBeginPlay();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ReceiveDestroyed();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ReceiveEndPlay();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ReceiveHit();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ReceivePointDamage();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ReceiveRadialDamage();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ReceiveTick();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_RemoveTickPrerequisiteActor();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_RemoveTickPrerequisiteComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_SetActorEnableCollision();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_SetActorHiddenInGame();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_SetActorRelativeScale3D();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_SetActorRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_SetActorScale3D();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_SetActorTickEnabled();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_SetLifeSpan();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_SetOwner();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_SetReplicateMovement();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_SetReplicates();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_SetTickableWhenPaused();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_SetTickGroup();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_SnapRootComponentTo();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_TearOff();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_UserConstructionScript();
	ENGINE_API class UClass* Z_Construct_UClass_AActor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AActor();
	ENGINE_API class UFunction* Z_Construct_UFunction_AAmbientSound_AdjustVolume();
	ENGINE_API class UFunction* Z_Construct_UFunction_AAmbientSound_FadeIn();
	ENGINE_API class UFunction* Z_Construct_UFunction_AAmbientSound_FadeOut();
	ENGINE_API class UFunction* Z_Construct_UFunction_AAmbientSound_Play();
	ENGINE_API class UFunction* Z_Construct_UFunction_AAmbientSound_Stop();
	ENGINE_API class UClass* Z_Construct_UClass_AAmbientSound_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AAmbientSound();
	ENGINE_API class UClass* Z_Construct_UClass_UPendingNetGame_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPendingNetGame();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FLatentActionManager();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FLatentActionInfo();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameInstance_DebugCreatePlayer();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameInstance_DebugRemovePlayer();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameInstance_HandleNetworkError();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameInstance_HandleTravelError();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameInstance_ReceiveInit();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameInstance_ReceiveShutdown();
	ENGINE_API class UClass* Z_Construct_UClass_UGameInstance_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UGameInstance();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FEndClothSimulationFunction();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FStartClothSimulationFunction();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FEndPhysicsTickFunction();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FStartPhysicsTickFunction();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FLevelViewportInfo();
	ENGINE_API class UClass* Z_Construct_UClass_UWorld_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UWorld();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FLevelSimplificationDetails();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDynamicTextureInstance();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FStreamableTextureInstance();
	ENGINE_API class UClass* Z_Construct_UClass_ULevel_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ULevel();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EBrushType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ECsgOper();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FGeomSelection();
	ENGINE_API class UClass* Z_Construct_UClass_ABrush_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ABrush();
	ENGINE_API class UClass* Z_Construct_UClass_ABrushShape_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ABrushShape();
	ENGINE_API class UClass* Z_Construct_UClass_AVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AVolume();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ReverbPreset();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FInteriorSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FReverbSettings();
	ENGINE_API class UClass* Z_Construct_UClass_AAudioVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AAudioVolume();
	ENGINE_API class UClass* Z_Construct_UClass_ABlockingVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ABlockingVolume();
	ENGINE_API class UClass* Z_Construct_UClass_ACameraBlockingVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ACameraBlockingVolume();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCullDistanceSizePair();
	ENGINE_API class UClass* Z_Construct_UClass_ACullDistanceVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ACullDistanceVolume();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EStreamingVolumeUsage();
	ENGINE_API class UClass* Z_Construct_UClass_ALevelStreamingVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ALevelStreamingVolume();
	ENGINE_API class UClass* Z_Construct_UClass_ALightmassCharacterIndirectDetailVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ALightmassCharacterIndirectDetailVolume();
	ENGINE_API class UClass* Z_Construct_UClass_ALightmassImportanceVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ALightmassImportanceVolume();
	ENGINE_API class UClass* Z_Construct_UClass_ANavMeshBoundsVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ANavMeshBoundsVolume();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ENavigationQueryResult();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ENavPathEvent();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ENavDataGatheringModeConfig();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ENavDataGatheringMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ENavigationOptionFlag();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNavDataConfig();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNavAgentProperties();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMovementProperties();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNavAgentSelector();
	ENGINE_API class UClass* Z_Construct_UClass_UNavigationTypes_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavigationTypes();
	ENGINE_API class UClass* Z_Construct_UClass_UNavRelevantInterface_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavRelevantInterface();
	ENGINE_API class UFunction* Z_Construct_UFunction_ANavModifierVolume_SetAreaClass();
	ENGINE_API class UClass* Z_Construct_UClass_ANavModifierVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ANavModifierVolume();
	ENGINE_API class UClass* Z_Construct_UClass_APhysicsVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_APhysicsVolume();
	ENGINE_API class UClass* Z_Construct_UClass_ADefaultPhysicsVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ADefaultPhysicsVolume();
	ENGINE_API class UClass* Z_Construct_UClass_AKillZVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AKillZVolume();
	ENGINE_API class UClass* Z_Construct_UClass_APainCausingVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_APainCausingVolume();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EBlendableLocation();
	ENGINE_API class UClass* Z_Construct_UClass_UBlendableInterface_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBlendableInterface();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAntiAliasingMethod();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EDepthOfFieldMethod();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPostProcessSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FWeightedBlendables();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FWeightedBlendable();
	ENGINE_API class UClass* Z_Construct_UClass_UScene_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UScene();
	ENGINE_API class UClass* Z_Construct_UClass_UInterface_PostProcessVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterface_PostProcessVolume();
	ENGINE_API class UFunction* Z_Construct_UFunction_APostProcessVolume_AddOrUpdateBlendable();
	ENGINE_API class UClass* Z_Construct_UClass_APostProcessVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_APostProcessVolume();
	ENGINE_API class UClass* Z_Construct_UClass_APrecomputedVisibilityOverrideVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_APrecomputedVisibilityOverrideVolume();
	ENGINE_API class UClass* Z_Construct_UClass_APrecomputedVisibilityVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_APrecomputedVisibilityVolume();
	ENGINE_API class UClass* Z_Construct_UClass_ATriggerVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ATriggerVolume();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACameraActor_GetAutoActivatePlayerIndex();
	ENGINE_API class UClass* Z_Construct_UClass_ACameraActor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ACameraActor();
	ENGINE_API class UClass* Z_Construct_UClass_UNavAgentInterface_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavAgentInterface();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_InstigatedAnyDamageSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_CastToPlayerController();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_ClientSetLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_ClientSetRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_GetControlRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_GetDesiredRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_GetViewTarget();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_IsLocalController();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_IsLocalPlayerController();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_K2_GetPawn();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_LineOfSightTo();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_OnRep_Pawn();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_OnRep_PlayerState();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_Possess();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_ReceiveInstigatedAnyDamage();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_SetControlRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_SetInitialLocationAndRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_StopMovement();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_UnPossess();
	ENGINE_API class UClass* Z_Construct_UClass_AController_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AController();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPlayerMuteList();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ECameraAnimPlaySpace();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ECameraProjectionMode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMinimalViewInfo();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EInitialOscillatorOffset();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FVOscillator();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FROscillator();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FFOscillator();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCameraShake_BlueprintUpdateCameraShake();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCameraShake_ReceiveIsFinished();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCameraShake_ReceivePlayShake();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCameraShake_ReceiveStopShake();
	ENGINE_API class UClass* Z_Construct_UClass_UCameraShake_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCameraShake();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EViewTargetBlendFunction();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FViewTargetTransitionParams();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTViewTarget();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCameraCacheEntry();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_AddCameraLensEffect();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_AddNewCameraModifier();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_BlueprintUpdateCamera();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_ClearCameraLensEffects();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_FindCameraModifierByClass();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_GetCameraLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_GetCameraRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_GetFOVAngle();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_GetOwningPlayerController();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_PlayCameraAnim();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_PlayCameraShake();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_RemoveCameraLensEffect();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_RemoveCameraModifier();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_SetManualCameraFade();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_StartCameraFade();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_StopAllCameraAnims();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_StopAllCameraShakes();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_StopAllInstancesOfCameraAnim();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_StopAllInstancesOfCameraShake();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_StopCameraAnimInst();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_StopCameraFade();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_StopCameraShake();
	ENGINE_API class UClass* Z_Construct_UClass_APlayerCameraManager_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_APlayerCameraManager();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_InputGestureHandlerDynamicSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_InputVectorAxisHandlerDynamicSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_InputAxisHandlerDynamicSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_InputTouchHandlerDynamicSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_InputActionHandlerDynamicSignature__DelegateSignature();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EControllerAnalogStick();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInputComponent_GetControllerAnalogKeyState();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInputComponent_GetControllerAnalogStickState();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInputComponent_GetControllerKeyTimeDown();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInputComponent_GetControllerMouseDelta();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInputComponent_GetControllerVectorKeyState();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInputComponent_GetTouchState();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInputComponent_IsControllerKeyDown();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInputComponent_WasControllerKeyJustPressed();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInputComponent_WasControllerKeyJustReleased();
	ENGINE_API class UClass* Z_Construct_UClass_UInputComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInputComponent();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ERichCurveExtrapolation();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ERichCurveTangentWeightMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ERichCurveTangentMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ERichCurveInterpMode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FIntegralCurve();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FIntegralKey();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRichCurve();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRichCurveKey();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNameCurve();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNameCurveKey();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FIndexedCurve();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FKeyHandleMap();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCurveBase_GetTimeRange();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCurveBase_GetValueRange();
	ENGINE_API class UClass* Z_Construct_UClass_UCurveBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCurveBase();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRuntimeFloatCurve();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCurveFloat_GetFloatValue();
	ENGINE_API class UClass* Z_Construct_UClass_UCurveFloat_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCurveFloat();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FActiveForceFeedbackEffect();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FForceFeedbackChannelDetails();
	ENGINE_API class UClass* Z_Construct_UClass_UForceFeedbackEffect_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UForceFeedbackEffect();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FUniqueNetIdRepl();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EDynamicForceFeedbackAction();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ActivateTouchInterface();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_AddPitchInput();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_AddRollInput();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_AddYawInput();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_Camera();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClearAudioListenerOverride();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientAddTextureStreamingLoc();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientCancelPendingMapChange();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientCapBandwidth();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientClearCameraLensEffects();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientCommitMapChange();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientEnableNetworkVoice();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientEndOnlineSession();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientFlushLevelStreaming();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientForceGarbageCollection();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientGameEnded();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientGotoState();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientIgnoreLookInput();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientIgnoreMoveInput();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientMessage();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientMutePlayer();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientPlayCameraAnim();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientPlayCameraShake();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientPlayForceFeedback();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientPlaySound();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientPlaySoundAtLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientPrepareMapChange();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientPrestreamTextures();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientReceiveLocalizedMessage();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientRepObjRef();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientReset();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientRestart();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientRetryClientRestart();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientReturnToMainMenu();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientSetBlockOnAsyncLoading();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientSetCameraFade();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientSetCameraMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientSetCinematicMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientSetForceMipLevelsToBeResident();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientSetHUD();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientSetSpectatorWaiting();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientSetViewTarget();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientSpawnCameraLensEffect();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientStartOnlineSession();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientStopCameraAnim();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientStopCameraShake();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientStopForceFeedback();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientTeamMessage();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientTravel();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientTravelInternal();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientUnmutePlayer();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientUpdateLevelStreamingStatus();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientVoiceHandshakeComplete();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientWasKicked();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ConsoleKey();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_DeprojectMousePositionToWorld();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_DeprojectScreenPositionToWorld();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_EnableCheats();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_FOV();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_GetFocalLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_GetHitResultUnderCursor();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_GetHitResultUnderCursorByChannel();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_GetHitResultUnderCursorForObjects();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_GetHitResultUnderFinger();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_GetHitResultUnderFingerByChannel();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_GetHitResultUnderFingerForObjects();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_GetHUD();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_GetInputAnalogKeyState();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_GetInputAnalogStickState();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_GetInputKeyTimeDown();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_GetInputMotionState();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_GetInputMouseDelta();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_GetInputTouchState();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_GetInputVectorKeyState();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_GetMousePosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_GetSpectatorPawn();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_GetViewportSize();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_IsInputKeyDown();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_IsLookInputIgnored();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_IsMoveInputIgnored();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_LocalTravel();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_OnServerStartedVisualLogger();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_Pause();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_PlayDynamicForceFeedback();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_PlayHapticEffect();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ProjectWorldLocationToScreen();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ResetIgnoreInputFlags();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ResetIgnoreLookInput();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ResetIgnoreMoveInput();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_RestartLevel();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_SendToConsole();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerAcknowledgePossession();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerCamera();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerChangeName();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerCheckClientPossession();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerCheckClientPossessionReliable();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerMutePlayer();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerNotifyLoadedWorld();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerPause();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerRestartPlayer();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerSetSpectatorLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerSetSpectatorWaiting();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerShortTimeout();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerToggleAILogging();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerUnmutePlayer();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerUpdateCamera();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerUpdateLevelVisibility();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerVerifyViewTarget();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerViewNextPlayer();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerViewPrevPlayer();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerViewSelf();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_SetAudioListenerOverride();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_SetCinematicMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_SetHapticsByValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_SetIgnoreLookInput();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_SetIgnoreMoveInput();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_SetName();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_SetViewTargetWithBlend();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_SetVirtualJoystickVisibility();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_StartFire();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_StopHapticEffect();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_SwitchLevel();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ToggleSpeaking();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_WasInputKeyJustPressed();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_WasInputKeyJustReleased();
	ENGINE_API class UClass* Z_Construct_UClass_APlayerController_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_APlayerController();
	ENGINE_API class UFunction* Z_Construct_UFunction_ADebugCameraController_ShowDebugSelectedInfo();
	ENGINE_API class UClass* Z_Construct_UClass_ADebugCameraController_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ADebugCameraController();
	ENGINE_API class UClass* Z_Construct_UClass_ALogVisualizerCameraController_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ALogVisualizerCameraController();
	ENGINE_API class UFunction* Z_Construct_UFunction_ADecalActor_CreateDynamicMaterialInstance();
	ENGINE_API class UFunction* Z_Construct_UFunction_ADecalActor_GetDecalMaterial();
	ENGINE_API class UFunction* Z_Construct_UFunction_ADecalActor_SetDecalMaterial();
	ENGINE_API class UClass* Z_Construct_UClass_ADecalActor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ADecalActor();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ActorFractureSignature__DelegateSignature();
	ENGINE_API class UClass* Z_Construct_UClass_ADestructibleActor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ADestructibleActor();
	ENGINE_API class UClass* Z_Construct_UClass_ADocumentationActor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ADocumentationActor();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ParticleCollisionSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ParticleDeathSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ParticleBurstSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ParticleSpawnSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UFunction_AEmitter_Activate();
	ENGINE_API class UFunction* Z_Construct_UFunction_AEmitter_Deactivate();
	ENGINE_API class UFunction* Z_Construct_UFunction_AEmitter_IsActive();
	ENGINE_API class UFunction* Z_Construct_UFunction_AEmitter_OnParticleSystemFinished();
	ENGINE_API class UFunction* Z_Construct_UFunction_AEmitter_OnRep_bCurrentlyActive();
	ENGINE_API class UFunction* Z_Construct_UFunction_AEmitter_SetActorParameter();
	ENGINE_API class UFunction* Z_Construct_UFunction_AEmitter_SetColorParameter();
	ENGINE_API class UFunction* Z_Construct_UFunction_AEmitter_SetFloatParameter();
	ENGINE_API class UFunction* Z_Construct_UFunction_AEmitter_SetMaterialParameter();
	ENGINE_API class UFunction* Z_Construct_UFunction_AEmitter_SetTemplate();
	ENGINE_API class UFunction* Z_Construct_UFunction_AEmitter_SetVectorParameter();
	ENGINE_API class UFunction* Z_Construct_UFunction_AEmitter_ToggleActive();
	ENGINE_API class UClass* Z_Construct_UClass_AEmitter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AEmitter();
	ENGINE_API class UClass* Z_Construct_UClass_AEmitterCameraLensEffectBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AEmitterCameraLensEffectBase();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDebugTextInfo();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_AddDebugText();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_AddHitBox();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_Deproject();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_DrawLine();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_DrawMaterial();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_DrawMaterialSimple();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_DrawMaterialTriangle();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_DrawRect();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_DrawText();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_DrawTexture();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_DrawTextureSimple();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_GetActorsInSelectionRectangle();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_GetOwningPawn();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_GetOwningPlayerController();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_GetTextSize();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_Project();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_ReceiveDrawHUD();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_ReceiveHitBoxBeginCursorOver();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_ReceiveHitBoxClick();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_ReceiveHitBoxEndCursorOver();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_ReceiveHitBoxRelease();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_RemoveAllDebugStrings();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_RemoveDebugText();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_ShowDebug();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_ShowDebugForReticleTargetToggle();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_ShowDebugToggleSubCategory();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_ShowHUD();
	ENGINE_API class UClass* Z_Construct_UClass_AHUD_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AHUD();
	ENGINE_API class UClass* Z_Construct_UClass_ADebugCameraHUD_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ADebugCameraHUD();
	ENGINE_API class UClass* Z_Construct_UClass_ALogVisualizerHUD_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ALogVisualizerHUD();
	ENGINE_API class UClass* Z_Construct_UClass_AInfo_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AInfo();
	ENGINE_API class UClass* Z_Construct_UClass_AAtmosphericFog_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AAtmosphericFog();
	ENGINE_API class UFunction* Z_Construct_UFunction_AExponentialHeightFog_OnRep_bEnabled();
	ENGINE_API class UClass* Z_Construct_UClass_AExponentialHeightFog_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AExponentialHeightFog();
	ENGINE_API class UClass* Z_Construct_UClass_ANavigationObjectBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ANavigationObjectBase();
	ENGINE_API class UClass* Z_Construct_UClass_APlayerStart_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_APlayerStart();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FGameClassShortName();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_AbortMatch();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_CanSpectate();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_ChangeName();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_ChoosePlayerStart();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_EndMatch();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_FindPlayerStart();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_GetDefaultPawnClassForController();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_GetMatchState();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_GetNumPlayers();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_HasMatchEnded();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_HasMatchStarted();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_InitStartSpot();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_IsMatchInProgress();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_K2_FindPlayerStart();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_K2_OnChangeName();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_K2_OnLogout();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_K2_OnRestartPlayer();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_K2_OnSetMatchState();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_K2_OnSwapPlayerControllers();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_K2_PostLogin();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_MustSpectate();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_PlayerCanRestart();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_ReadyToEndMatch();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_ReadyToStartMatch();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_ResetLevel();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_RestartGame();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_ReturnToMainMenuHost();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_SetBandwidthLimit();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_ShouldReset();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_SpawnDefaultPawnFor();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_StartMatch();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_StartPlay();
	ENGINE_API class UClass* Z_Construct_UClass_AGameMode_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AGameMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EStandbyType();
	ENGINE_API class UClass* Z_Construct_UClass_AGameNetworkManager_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AGameNetworkManager();
	ENGINE_API class UClass* Z_Construct_UClass_AGameSession_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AGameSession();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameState_GetServerWorldTimeSeconds();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameState_OnRep_ElapsedTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameState_OnRep_GameModeClass();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameState_OnRep_MatchState();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameState_OnRep_ReplicatedWorldTimeSeconds();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameState_OnRep_SpectatorClass();
	ENGINE_API class UClass* Z_Construct_UClass_AGameState_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AGameState();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerState_OnRep_bIsInactive();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerState_OnRep_PlayerName();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerState_OnRep_Score();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerState_OnRep_UniqueId();
	ENGINE_API class UClass* Z_Construct_UClass_APlayerState_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_APlayerState();
	ENGINE_API class UFunction* Z_Construct_UFunction_ASkyLight_OnRep_bEnabled();
	ENGINE_API class UClass* Z_Construct_UClass_ASkyLight_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ASkyLight();
	ENGINE_API class UClass* Z_Construct_UClass_AWindDirectionalSource_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AWindDirectionalSource();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EVisibilityAggressiveness();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FHierarchicalSimplification();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNetViewer();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FLightmassWorldInfoSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FGameModePrefix();
	ENGINE_API class UFunction* Z_Construct_UFunction_AWorldSettings_OnRep_WorldGravityZ();
	ENGINE_API class UClass* Z_Construct_UClass_AWorldSettings_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AWorldSettings();
	ENGINE_API class UClass* Z_Construct_UClass_ALevelBounds_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ALevelBounds();
	ENGINE_API class UFunction* Z_Construct_UFunction_ALevelScriptActor_LevelReset();
	ENGINE_API class UFunction* Z_Construct_UFunction_ALevelScriptActor_RemoteEvent();
	ENGINE_API class UFunction* Z_Construct_UFunction_ALevelScriptActor_SetCinematicMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_ALevelScriptActor_WorldOriginLocationChanged();
	ENGINE_API class UClass* Z_Construct_UClass_ALevelScriptActor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ALevelScriptActor();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULightComponentBase_GetLightColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULightComponentBase_SetCastShadows();
	ENGINE_API class UClass* Z_Construct_UClass_ULightComponentBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ULightComponentBase();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULightComponent_SetAffectDynamicIndirectLighting();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULightComponent_SetAffectTranslucentLighting();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULightComponent_SetBloomScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULightComponent_SetBloomThreshold();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULightComponent_SetBloomTint();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULightComponent_SetEnableLightShaftBloom();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULightComponent_SetIESTexture();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULightComponent_SetIndirectLightingIntensity();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULightComponent_SetIntensity();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULightComponent_SetLightColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULightComponent_SetLightFunctionDisabledBrightness();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULightComponent_SetLightFunctionFadeDistance();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULightComponent_SetLightFunctionMaterial();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULightComponent_SetLightFunctionScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULightComponent_SetTemperature();
	ENGINE_API class UClass* Z_Construct_UClass_ULightComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ULightComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_ALight_GetBrightness();
	ENGINE_API class UFunction* Z_Construct_UFunction_ALight_GetLightColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_ALight_IsEnabled();
	ENGINE_API class UFunction* Z_Construct_UFunction_ALight_OnRep_bEnabled();
	ENGINE_API class UFunction* Z_Construct_UFunction_ALight_SetAffectTranslucentLighting();
	ENGINE_API class UFunction* Z_Construct_UFunction_ALight_SetBrightness();
	ENGINE_API class UFunction* Z_Construct_UFunction_ALight_SetCastShadows();
	ENGINE_API class UFunction* Z_Construct_UFunction_ALight_SetEnabled();
	ENGINE_API class UFunction* Z_Construct_UFunction_ALight_SetLightColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_ALight_SetLightFunctionFadeDistance();
	ENGINE_API class UFunction* Z_Construct_UFunction_ALight_SetLightFunctionMaterial();
	ENGINE_API class UFunction* Z_Construct_UFunction_ALight_SetLightFunctionScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_ALight_ToggleEnabled();
	ENGINE_API class UClass* Z_Construct_UClass_ALight_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ALight();
	ENGINE_API class UClass* Z_Construct_UClass_ADirectionalLight_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ADirectionalLight();
	ENGINE_API class UFunction* Z_Construct_UFunction_APointLight_SetLightFalloffExponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_APointLight_SetRadius();
	ENGINE_API class UClass* Z_Construct_UClass_APointLight_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_APointLight();
	ENGINE_API class UFunction* Z_Construct_UFunction_ASpotLight_SetInnerConeAngle();
	ENGINE_API class UFunction* Z_Construct_UFunction_ASpotLight_SetOuterConeAngle();
	ENGINE_API class UClass* Z_Construct_UClass_ASpotLight_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ASpotLight();
	ENGINE_API class UClass* Z_Construct_UClass_AGeneratedMeshAreaLight_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AGeneratedMeshAreaLight();
	ENGINE_API class UClass* Z_Construct_UClass_ALODActor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ALODActor();
	ENGINE_API class UClass* Z_Construct_UClass_AMaterialInstanceActor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AMaterialInstanceActor();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_OnMatineeEvent__DelegateSignature();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FInterpGroupActorInfo();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCameraCutInfo();
	ENGINE_API class UFunction* Z_Construct_UFunction_AMatineeActor_ChangePlaybackDirection();
	ENGINE_API class UFunction* Z_Construct_UFunction_AMatineeActor_Pause();
	ENGINE_API class UFunction* Z_Construct_UFunction_AMatineeActor_Play();
	ENGINE_API class UFunction* Z_Construct_UFunction_AMatineeActor_Reverse();
	ENGINE_API class UFunction* Z_Construct_UFunction_AMatineeActor_SetLoopingState();
	ENGINE_API class UFunction* Z_Construct_UFunction_AMatineeActor_SetPosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_AMatineeActor_Stop();
	ENGINE_API class UClass* Z_Construct_UClass_AMatineeActor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AMatineeActor();
	ENGINE_API class UClass* Z_Construct_UClass_AMatineeActorCameraAnim_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AMatineeActorCameraAnim();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNavigationFilterFlags();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNavigationFilterArea();
	ENGINE_API class UClass* Z_Construct_UClass_UNavigationQueryFilter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavigationQueryFilter();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ERuntimeGenerationType();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSupportedAreaData();
	ENGINE_API class UClass* Z_Construct_UClass_ANavigationData_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ANavigationData();
	ENGINE_API class UClass* Z_Construct_UClass_AAbstractNavData_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AAbstractNavData();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNavGraphNode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNavGraphEdge();
	ENGINE_API class UClass* Z_Construct_UClass_ANavigationGraph_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ANavigationGraph();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ERecastPartitioning();
	ENGINE_API class UClass* Z_Construct_UClass_ARecastNavMesh_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ARecastNavMesh();
	ENGINE_API class UClass* Z_Construct_UClass_ANavigationGraphNode_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ANavigationGraphNode();
	ENGINE_API class UClass* Z_Construct_UClass_APlayerStartPIE_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_APlayerStartPIE();
	ENGINE_API class UClass* Z_Construct_UClass_UNavPathObserverInterface_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavPathObserverInterface();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ENavCostDisplay();
	ENGINE_API class UClass* Z_Construct_UClass_ANavigationTestingActor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ANavigationTestingActor();
	ENGINE_API class UClass* Z_Construct_UClass_UNavArea_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavArea();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ENavLinkDirection();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNavigationSegmentLink();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNavigationLink();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNavigationLinkBase();
	ENGINE_API class UClass* Z_Construct_UClass_UNavLinkDefinition_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavLinkDefinition();
	ENGINE_API class UClass* Z_Construct_UClass_UNavLinkHostInterface_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavLinkHostInterface();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_SmartLinkReachedSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UFunction_ANavLinkProxy_HasMovingAgents();
	ENGINE_API class UFunction* Z_Construct_UFunction_ANavLinkProxy_IsSmartLinkEnabled();
	ENGINE_API class UFunction* Z_Construct_UFunction_ANavLinkProxy_ReceiveSmartLinkReached();
	ENGINE_API class UFunction* Z_Construct_UFunction_ANavLinkProxy_ResumePathFollowing();
	ENGINE_API class UFunction* Z_Construct_UFunction_ANavLinkProxy_SetSmartLinkEnabled();
	ENGINE_API class UClass* Z_Construct_UClass_ANavLinkProxy_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ANavLinkProxy();
	ENGINE_API class UClass* Z_Construct_UClass_ANote_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ANote();
	ENGINE_API class UClass* Z_Construct_UClass_AParticleEventManager_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AParticleEventManager();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_AddControllerPitchInput();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_AddControllerRollInput();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_AddControllerYawInput();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_AddMovementInput();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_ConsumeMovementInputVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_DetachFromControllerPendingDestroy();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_GetBaseAimRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_GetController();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_GetControlRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_GetLastMovementInputVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_GetMovementBaseActor();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_GetMovementComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_GetNavAgentLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_GetPendingMovementInputVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_IsControlled();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_IsLocallyControlled();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_IsMoveInputIgnored();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_K2_GetMovementInputVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_LaunchPawn();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_OnRep_Controller();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_OnRep_PlayerState();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_PawnMakeNoise();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_ReceivePossessed();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_ReceiveUnpossessed();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_SetCanAffectNavigationGeneration();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_SpawnDefaultController();
	ENGINE_API class UClass* Z_Construct_UClass_APawn_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_APawn();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPreviewAssetAttachContainer();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPreviewAttachedObjectPair();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSmartNameContainer();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSmartNameMapping();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EBoneTranslationRetargetingMode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimSlotGroup();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRigConfiguration();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNameMapping();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBoneReductionSetting();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FReferencePose();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBoneNode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSkeletonToMeshLinkup();
	ENGINE_API class UClass* Z_Construct_UClass_USkeleton_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USkeleton();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTriMeshCollisionData();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTriIndices();
	ENGINE_API class UClass* Z_Construct_UClass_UInterface_CollisionDataProvider_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterface_CollisionDataProvider();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_SkeletalMeshOptimizationType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_SkeletalMeshOptimizationImportance();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSkeletalMaterial();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FClothingAssetData();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FClothPhysicsProperties();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMorphTargetMap();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSkeletalMeshLODInfo();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSkeletalMeshOptimizationSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBoneReference();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTriangleSortSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBoneMirrorExport();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBoneMirrorInfo();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMesh_FindSocket();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMesh_IsSectionUsingCloth();
	ENGINE_API class UClass* Z_Construct_UClass_USkeletalMesh_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USkeletalMesh();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAnimGroupRole();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ERootMotionMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ERootMotionRootLock();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimationGroupReference();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRootMotionMovementParams();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimGroupInstance();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimTickRecord();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimExtractContext();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBlendFilter();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBlendSampleData();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimationAsset_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimationAsset();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_CharacterReachedApexSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_CharacterMovementUpdatedSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_MovementModeChangedSignature__DelegateSignature();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBasedMovementInfo();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSimulatedRootMotionReplicatedMove();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRepRootMotionMontage();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_CanJump();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_CanJumpInternal();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_ClientCheatFly();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_ClientCheatGhost();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_ClientCheatWalk();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_Crouch();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_GetCurrentMontage();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_IsJumpProvidingForce();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_IsPlayingNetworkedRootMotionMontage();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_IsPlayingRootMotion();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_Jump();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_K2_OnEndCrouch();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_K2_OnMovementModeChanged();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_K2_OnStartCrouch();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_K2_UpdateCustomMovement();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_LaunchCharacter();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_OnJumped();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_OnLanded();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_OnLaunched();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_OnRep_IsCrouched();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_OnRep_ReplicatedBasedMovement();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_OnRep_RootMotion();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_OnWalkingOffLedge();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_PlayAnimMontage();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_SetReplicateMovement();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_StopAnimMontage();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_StopJumping();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_UnCrouch();
	ENGINE_API class UClass* Z_Construct_UClass_ACharacter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ACharacter();
	ENGINE_API class UFunction* Z_Construct_UFunction_ADefaultPawn_LookUp();
	ENGINE_API class UFunction* Z_Construct_UFunction_ADefaultPawn_LookUpAtRate();
	ENGINE_API class UFunction* Z_Construct_UFunction_ADefaultPawn_MoveForward();
	ENGINE_API class UFunction* Z_Construct_UFunction_ADefaultPawn_MoveRight();
	ENGINE_API class UFunction* Z_Construct_UFunction_ADefaultPawn_MoveUp_World();
	ENGINE_API class UFunction* Z_Construct_UFunction_ADefaultPawn_Turn();
	ENGINE_API class UFunction* Z_Construct_UFunction_ADefaultPawn_TurnAtRate();
	ENGINE_API class UClass* Z_Construct_UClass_ADefaultPawn_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ADefaultPawn();
	ENGINE_API class UClass* Z_Construct_UClass_ASpectatorPawn_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ASpectatorPawn();
	ENGINE_API class UClass* Z_Construct_UClass_AWheeledVehicle_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AWheeledVehicle();
	ENGINE_API class UClass* Z_Construct_UClass_AReflectionCapture_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AReflectionCapture();
	ENGINE_API class UClass* Z_Construct_UClass_ABoxReflectionCapture_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ABoxReflectionCapture();
	ENGINE_API class UClass* Z_Construct_UClass_APlaneReflectionCapture_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_APlaneReflectionCapture();
	ENGINE_API class UClass* Z_Construct_UClass_ASphereReflectionCapture_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ASphereReflectionCapture();
	ENGINE_API class UClass* Z_Construct_UClass_ARigidBodyBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ARigidBodyBase();
	ENGINE_API class UClass* Z_Construct_UClass_APhysicsConstraintActor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_APhysicsConstraintActor();
	ENGINE_API class UClass* Z_Construct_UClass_APhysicsThruster_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_APhysicsThruster();
	ENGINE_API class UFunction* Z_Construct_UFunction_ARadialForceActor_DisableForce();
	ENGINE_API class UFunction* Z_Construct_UFunction_ARadialForceActor_EnableForce();
	ENGINE_API class UFunction* Z_Construct_UFunction_ARadialForceActor_FireImpulse();
	ENGINE_API class UFunction* Z_Construct_UFunction_ARadialForceActor_ToggleForce();
	ENGINE_API class UClass* Z_Construct_UClass_ARadialForceActor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ARadialForceActor();
	ENGINE_API class UClass* Z_Construct_UClass_ASceneCapture_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ASceneCapture();
	ENGINE_API class UFunction* Z_Construct_UFunction_ASceneCapture2D_OnInterpToggle();
	ENGINE_API class UClass* Z_Construct_UClass_ASceneCapture2D_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ASceneCapture2D();
	ENGINE_API class UFunction* Z_Construct_UFunction_ASceneCaptureCube_OnInterpToggle();
	ENGINE_API class UClass* Z_Construct_UClass_ASceneCaptureCube_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ASceneCaptureCube();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EDOFMode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBodyInstance();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCollisionResponse();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ComponentEndTouchOverSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ComponentBeginTouchOverSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ComponentOnInputTouchEndSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ComponentOnInputTouchBeginSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ComponentOnReleasedSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ComponentOnClickedSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ComponentEndCursorOverSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ComponentBeginCursorOverSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ComponentSleepSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ComponentWakeSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ComponentEndOverlapSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ComponentBeginOverlapSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ComponentHitSignature__DelegateSignature();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EHasCustomNavigableGeometry();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ECanBeCharacterBase();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSpriteCategoryInfo();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_AddAngularImpulse();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_AddForce();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_AddForceAtLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_AddImpulse();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_AddImpulseAtLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_AddRadialForce();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_AddRadialImpulse();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_AddTorque();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_CanCharacterStepUp();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_ClearMoveIgnoreActors();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_CopyArrayOfMoveIgnoreActors();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_CreateAndSetMaterialInstanceDynamic();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_CreateAndSetMaterialInstanceDynamicFromMaterial();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_CreateDynamicMaterialInstance();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_GetAngularDamping();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_GetCenterOfMass();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_GetClosestPointOnCollision();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_GetCollisionObjectType();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_GetCollisionProfileName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_GetCollisionResponseToChannel();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_GetInertiaTensor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_GetLinearDamping();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_GetMass();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_GetMassScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_GetMaterial();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_GetNumMaterials();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_GetOverlapInfos();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_GetOverlappingActors();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_GetOverlappingComponents();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_GetPhysicsAngularVelocity();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_GetPhysicsLinearVelocity();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_GetPhysicsLinearVelocityAtPoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_GetWalkableSlopeOverride();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_IgnoreActorWhenMoving();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_IsGravityEnabled();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_IsOverlappingActor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_IsOverlappingComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_K2_LineTraceComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_PutRigidBodyToSleep();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_ScaleByMomentOfInertia();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetAllMassScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetAllPhysicsLinearVelocity();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetAngularDamping();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetCastShadow();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetCenterOfMass();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetCollisionEnabled();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetCollisionObjectType();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetCollisionProfileName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetCollisionResponseToAllChannels();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetCollisionResponseToChannel();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetConstraintMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetCullDistance();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetCustomDepthStencilValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetEnableGravity();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetLinearDamping();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetLockedAxis();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetMassOverrideInKg();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetMassScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetMaterial();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetNotifyRigidBodyCollision();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetOnlyOwnerSee();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetOwnerNoSee();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetPhysicsAngularVelocity();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetPhysicsLinearVelocity();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetPhysicsMaxAngularVelocity();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetPhysMaterialOverride();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetRenderCustomDepth();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetRenderInMainPass();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetSimulatePhysics();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetTranslucentSortPriority();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetWalkableSlopeOverride();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_WakeAllRigidBodies();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_WakeRigidBody();
	ENGINE_API class UClass* Z_Construct_UClass_UPrimitiveComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPrimitiveComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMeshComponent_GetMaterials();
	ENGINE_API class UClass* Z_Construct_UClass_UMeshComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMeshComponent();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EBoneSpaces();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMeshComponentUpdateFlag();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EPhysBodyOp();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EBoneVisibilityStatus();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSkelMeshComponentLODInfo();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FActiveVertexAnim();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkinnedMeshComponent_BoneIsChildOf();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkinnedMeshComponent_GetBoneIndex();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkinnedMeshComponent_GetBoneName();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkinnedMeshComponent_GetParentBone();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkinnedMeshComponent_GetSocketBoneName();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkinnedMeshComponent_HideBoneByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkinnedMeshComponent_IsBoneHiddenByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkinnedMeshComponent_SetMasterPoseComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkinnedMeshComponent_SetPhysicsAsset();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkinnedMeshComponent_SetSkeletalMesh();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkinnedMeshComponent_TransformFromBoneSpace();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkinnedMeshComponent_TransformToBoneSpace();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkinnedMeshComponent_UnHideBoneByName();
	ENGINE_API class UClass* Z_Construct_UClass_USkinnedMeshComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USkinnedMeshComponent();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAngularDriveMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EConstraintFrame();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ELinearConstraintMotion();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FConstraintInstance();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ConstraintBrokenSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_BreakConstraint();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_GetConstraintForce();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_GetCurrentSwing1();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_GetCurrentSwing2();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_GetCurrentTwist();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetAngularDriveParams();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetAngularOrientationDrive();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetAngularOrientationTarget();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetAngularSwing1Limit();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetAngularSwing2Limit();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetAngularTwistLimit();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetAngularVelocityDrive();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetAngularVelocityTarget();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetConstrainedComponents();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetConstraintReferenceFrame();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetConstraintReferenceOrientation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetConstraintReferencePosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetDisableCollision();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetLinearDriveParams();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetLinearPositionDrive();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetLinearPositionTarget();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetLinearVelocityDrive();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetLinearVelocityTarget();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetLinearXLimit();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetLinearYLimit();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetLinearZLimit();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicsConstraintComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicsConstraintComponent();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAnimLinkMethod();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimLinkableElement();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ECurveBlendOption();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAdditiveAnimationType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ENotifyFilterType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMontageNotifyTickType();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNotifyTrack();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNotifyEvent();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRawCurveTracks();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTransformCurve();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FVectorCurve();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FFloatCurve();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimCurveBase();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAnimationMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EKinematicBonesUpdateToPhysics();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSkeletalMeshComponentPreClothTickFunction();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSingleAnimationPlayData();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_AccumulateAllBodiesBelowPhysicsBlendWeight();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_BindClothToMasterPoseComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_ClearMorphTargets();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_ForceClothNextUpdateTeleport();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_ForceClothNextUpdateTeleportAndReset();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_GetAnimationMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_GetAnimInstance();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_GetClothMaxDistanceScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_GetMorphTarget();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_GetPlayRate();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_GetPosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_IsPlaying();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_Play();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_PlayAnimation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_ResetAllBodiesSimulatePhysics();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_ResetClothTeleportMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_SetAllBodiesBelowPhysicsBlendWeight();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_SetAllBodiesBelowSimulatePhysics();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_SetAllBodiesPhysicsBlendWeight();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_SetAllBodiesSimulatePhysics();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_SetAllMotorsAngularDriveParams();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_SetAllMotorsAngularPositionDrive();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_SetAllMotorsAngularVelocityDrive();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_SetAnimation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_SetAnimationMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_SetAnimInstanceClass();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_SetClothMaxDistanceScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_SetEnablePhysicsBlending();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_SetMorphTarget();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_SetPhysicsBlendWeight();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_SetPlayRate();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_SetPosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_Stop();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_UnbindClothFromMasterPoseComponent();
	ENGINE_API class UClass* Z_Construct_UClass_USkeletalMeshComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USkeletalMeshComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UMatineeAnimInterface_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMatineeAnimInterface();
	ENGINE_API class UFunction* Z_Construct_UFunction_ASkeletalMeshActor_OnRep_ReplicatedMaterial0();
	ENGINE_API class UFunction* Z_Construct_UFunction_ASkeletalMeshActor_OnRep_ReplicatedMaterial1();
	ENGINE_API class UFunction* Z_Construct_UFunction_ASkeletalMeshActor_OnRep_ReplicatedMesh();
	ENGINE_API class UFunction* Z_Construct_UFunction_ASkeletalMeshActor_OnRep_ReplicatedPhysAsset();
	ENGINE_API class UClass* Z_Construct_UClass_ASkeletalMeshActor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ASkeletalMeshActor();
	ENGINE_API class UClass* Z_Construct_UClass_ASplineMeshActor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ASplineMeshActor();
	ENGINE_API class UClass* Z_Construct_UClass_AStaticMeshActor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AStaticMeshActor();
	ENGINE_API class UClass* Z_Construct_UClass_ATargetPoint_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ATargetPoint();
	ENGINE_API class UClass* Z_Construct_UClass_ATextRenderActor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ATextRenderActor();
	ENGINE_API class UClass* Z_Construct_UClass_ATriggerBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ATriggerBase();
	ENGINE_API class UClass* Z_Construct_UClass_ATriggerBox_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ATriggerBox();
	ENGINE_API class UClass* Z_Construct_UClass_ATriggerCapsule_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ATriggerCapsule();
	ENGINE_API class UClass* Z_Construct_UClass_ATriggerSphere_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ATriggerSphere();
	ENGINE_API class UClass* Z_Construct_UClass_AVectorFieldVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AVectorFieldVolume();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_UApplicationLifecycleComponent_ApplicationLifetimeDelegate__DelegateSignature();
	ENGINE_API class UClass* Z_Construct_UClass_UApplicationLifecycleComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UApplicationLifecycleComponent();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EPlaneConstraintAxisSetting();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_ConstrainDirectionToPlane();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_ConstrainLocationToPlane();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_ConstrainNormalToPlane();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_GetGravityZ();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_GetMaxSpeed();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_GetPhysicsVolume();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_GetPlaneConstraintAxisSetting();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_GetPlaneConstraintNormal();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_GetPlaneConstraintOrigin();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_IsExceedingMaxSpeed();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_K2_GetMaxSpeedModifier();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_K2_GetModifiedMaxSpeed();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_K2_MoveUpdatedComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_PhysicsVolumeChanged();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_SetPlaneConstraintAxisSetting();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_SetPlaneConstraintEnabled();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_SetPlaneConstraintFromVectors();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_SetPlaneConstraintNormal();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_SetPlaneConstraintOrigin();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_SetUpdatedComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_SnapUpdatedComponentToPlane();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_StopMovementImmediately();
	ENGINE_API class UClass* Z_Construct_UClass_UMovementComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMovementComponent();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESplineCoordinateSpace();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESplinePointType();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_AddSplineLocalPoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_AddSplinePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_AddSplineWorldPoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_ClearSplinePoints();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetDefaultUpVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetDirectionAtDistanceAlongSpline();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetDirectionAtSplinePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetDirectionAtTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetDistanceAlongSplineAtSplinePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetInputKeyAtDistanceAlongSpline();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetLocalLocationAndTangentAtSplinePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetLocationAndTangentAtSplinePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetLocationAtDistanceAlongSpline();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetLocationAtSplinePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetLocationAtTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetNumberOfSplinePoints();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetQuaternionAtDistanceAlongSpline();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetQuaternionAtSplinePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetQuaternionAtTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetRightVectorAtDistanceAlongSpline();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetRightVectorAtSplinePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetRightVectorAtTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetRollAtDistanceAlongSpline();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetRollAtSplinePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetRollAtTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetRotationAtDistanceAlongSpline();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetRotationAtSplinePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetRotationAtTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetScaleAtDistanceAlongSpline();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetScaleAtSplinePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetScaleAtTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetSplineLength();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetSplinePointType();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetTangentAtDistanceAlongSpline();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetTangentAtSplinePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetTangentAtTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetTransformAtDistanceAlongSpline();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetTransformAtSplinePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetTransformAtTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetUpVectorAtDistanceAlongSpline();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetUpVectorAtSplinePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetUpVectorAtTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetWorldDirectionAtDistanceAlongSpline();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetWorldDirectionAtTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetWorldLocationAtDistanceAlongSpline();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetWorldLocationAtSplinePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetWorldLocationAtTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetWorldRotationAtDistanceAlongSpline();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetWorldRotationAtTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetWorldTangentAtDistanceAlongSpline();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_IsClosedLoop();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_SetClosedLoop();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_SetDefaultUpVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_SetLocationAtSplinePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_SetSelectedSplineSegmentColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_SetSplineLocalPoints();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_SetSplinePoints();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_SetSplinePointType();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_SetSplineWorldPoints();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_SetTangentAtSplinePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_SetUnselectedSplineSegmentColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_SetWorldLocationAtSplinePoint();
	ENGINE_API class UClass* Z_Construct_UClass_USplineComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USplineComponent();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_UInterpToMovementComponent_OnInterpToResetDelegate__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_UInterpToMovementComponent_OnInterpToWaitEndDelegate__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_UInterpToMovementComponent_OnInterpToWaitBeginDelegate__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_UInterpToMovementComponent_OnInterpToStopDelegate__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_UInterpToMovementComponent_OnInterpToReverseDelegate__DelegateSignature();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EInterpToBehaviourType();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FInterpControlPoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInterpToMovementComponent_StopSimulating();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpToMovementComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpToMovementComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UBlueprintFunctionLibrary_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBlueprintFunctionLibrary();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_OnNavDataGenerigEvent__DelegateSignature();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_FNavigationSystemRunMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_FindPathToActorSynchronously();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_FindPathToLocationSynchronously();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_GetNavigationSystem();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_GetPathCost();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_GetPathLength();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_GetRandomPoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_GetRandomPointInNavigableRadius();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_GetRandomPointInRadius();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_GetRandomReachablePointInRadius();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_IsNavigationBeingBuilt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_NavigationRaycast();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_OnNavigationBoundsUpdated();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_ProjectPointToNavigation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_RegisterNavigationInvoker();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_ResetMaxSimultaneousTileGenerationJobsCount();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_SetGeometryGatheringMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_SetMaxSimultaneousTileGenerationJobsCount();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_SimpleMoveToActor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_SimpleMoveToLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_UnregisterNavigationInvoker();
	ENGINE_API class UClass* Z_Construct_UClass_UNavigationSystem_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavigationSystem();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavMovementComponent_IsCrouching();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavMovementComponent_IsFalling();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavMovementComponent_IsFlying();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavMovementComponent_IsMovingOnGround();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavMovementComponent_IsSwimming();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavMovementComponent_StopActiveMovement();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavMovementComponent_StopMovementKeepPathing();
	ENGINE_API class UClass* Z_Construct_UClass_UNavMovementComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavMovementComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPawnMovementComponent_AddInputVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPawnMovementComponent_ConsumeInputVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPawnMovementComponent_GetLastInputVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPawnMovementComponent_GetPawnOwner();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPawnMovementComponent_GetPendingInputVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPawnMovementComponent_IsMoveInputIgnored();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPawnMovementComponent_K2_GetInputVector();
	ENGINE_API class UClass* Z_Construct_UClass_UPawnMovementComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPawnMovementComponent();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNavAvoidanceMask();
	ENGINE_API class UClass* Z_Construct_UClass_URVOAvoidanceInterface_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_URVOAvoidanceInterface();
	ENGINE_API class UClass* Z_Construct_UClass_UNetworkPredictionInterface_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNetworkPredictionInterface();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCharacterMovementComponentPreClothTickFunction();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FFindFloorResult();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_AddForce();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_AddImpulse();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_CalcVelocity();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_CapsuleTouched();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_ClientAckGoodMove();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_ClientAdjustPosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_ClientAdjustRootMotionPosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_ClientVeryShortAdjustPosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_DisableMovement();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_GetAnalogInputModifier();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_GetCharacterOwner();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_GetCurrentAcceleration();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_GetImpartedMovementBaseVelocity();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_GetMaxAcceleration();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_GetMaxJumpHeight();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_GetMovementBase();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_GetPerchRadiusThreshold();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_GetValidPerchRadius();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_IsWalkable();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_IsWalking();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_K2_GetModifiedMaxAcceleration();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_K2_GetWalkableFloorAngle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_K2_GetWalkableFloorZ();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_ServerMove();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_ServerMoveDual();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_ServerMoveDualHybridRootMotion();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_ServerMoveOld();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_SetAvoidanceEnabled();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_SetAvoidanceGroup();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_SetGroupsToAvoid();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_SetGroupsToIgnore();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_SetMovementMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_SetWalkableFloorAngle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_SetWalkableFloorZ();
	ENGINE_API class UClass* Z_Construct_UClass_UCharacterMovementComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCharacterMovementComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UFloatingPawnMovement_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UFloatingPawnMovement();
	ENGINE_API class UClass* Z_Construct_UClass_USpectatorPawnMovement_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USpectatorPawnMovement();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FVehicleInputRate();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FReplicatedVehicleState();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FWheelSetup();
	ENGINE_API class UFunction* Z_Construct_UFunction_UWheeledVehicleMovementComponent_GetCurrentGear();
	ENGINE_API class UFunction* Z_Construct_UFunction_UWheeledVehicleMovementComponent_GetEngineMaxRotationSpeed();
	ENGINE_API class UFunction* Z_Construct_UFunction_UWheeledVehicleMovementComponent_GetEngineRotationSpeed();
	ENGINE_API class UFunction* Z_Construct_UFunction_UWheeledVehicleMovementComponent_GetForwardSpeed();
	ENGINE_API class UFunction* Z_Construct_UFunction_UWheeledVehicleMovementComponent_GetTargetGear();
	ENGINE_API class UFunction* Z_Construct_UFunction_UWheeledVehicleMovementComponent_GetUseAutoGears();
	ENGINE_API class UFunction* Z_Construct_UFunction_UWheeledVehicleMovementComponent_ServerUpdateState();
	ENGINE_API class UFunction* Z_Construct_UFunction_UWheeledVehicleMovementComponent_SetAvoidanceEnabled();
	ENGINE_API class UFunction* Z_Construct_UFunction_UWheeledVehicleMovementComponent_SetAvoidanceGroup();
	ENGINE_API class UFunction* Z_Construct_UFunction_UWheeledVehicleMovementComponent_SetGearDown();
	ENGINE_API class UFunction* Z_Construct_UFunction_UWheeledVehicleMovementComponent_SetGearUp();
	ENGINE_API class UFunction* Z_Construct_UFunction_UWheeledVehicleMovementComponent_SetGroupsToAvoid();
	ENGINE_API class UFunction* Z_Construct_UFunction_UWheeledVehicleMovementComponent_SetGroupsToIgnore();
	ENGINE_API class UFunction* Z_Construct_UFunction_UWheeledVehicleMovementComponent_SetHandbrakeInput();
	ENGINE_API class UFunction* Z_Construct_UFunction_UWheeledVehicleMovementComponent_SetSteeringInput();
	ENGINE_API class UFunction* Z_Construct_UFunction_UWheeledVehicleMovementComponent_SetTargetGear();
	ENGINE_API class UFunction* Z_Construct_UFunction_UWheeledVehicleMovementComponent_SetThrottleInput();
	ENGINE_API class UFunction* Z_Construct_UFunction_UWheeledVehicleMovementComponent_SetUseAutoGears();
	ENGINE_API class UClass* Z_Construct_UClass_UWheeledVehicleMovementComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UWheeledVehicleMovementComponent();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EVehicleDifferential4W();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FVehicleTransmissionData();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FVehicleGearData();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FVehicleEngineData();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FVehicleDifferential4WData();
	ENGINE_API class UClass* Z_Construct_UClass_UWheeledVehicleMovementComponent4W_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UWheeledVehicleMovementComponent4W();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_UProjectileMovementComponent_OnProjectileStopDelegate__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_UProjectileMovementComponent_OnProjectileBounceDelegate__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UFunction_UProjectileMovementComponent_LimitVelocity();
	ENGINE_API class UFunction* Z_Construct_UFunction_UProjectileMovementComponent_SetVelocityInLocalSpace();
	ENGINE_API class UFunction* Z_Construct_UFunction_UProjectileMovementComponent_StopSimulating();
	ENGINE_API class UClass* Z_Construct_UClass_UProjectileMovementComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UProjectileMovementComponent();
	ENGINE_API class UClass* Z_Construct_UClass_URotatingMovementComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_URotatingMovementComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UNavigationInvokerComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavigationInvokerComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavRelevantComponent_SetNavigationRelevancy();
	ENGINE_API class UClass* Z_Construct_UClass_UNavRelevantComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavRelevantComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UNavLinkCustomInterface_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavLinkCustomInterface();
	ENGINE_API class UClass* Z_Construct_UClass_UNavLinkCustomComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavLinkCustomComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UNavModifierComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavModifierComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPawnNoiseEmitterComponent_MakeNoise();
	ENGINE_API class UClass* Z_Construct_UClass_UPawnNoiseEmitterComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPawnNoiseEmitterComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsHandleComponent_GetTargetLocationAndRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsHandleComponent_GrabComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsHandleComponent_ReleaseComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsHandleComponent_SetAngularDamping();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsHandleComponent_SetAngularStiffness();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsHandleComponent_SetInterpolationSpeed();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsHandleComponent_SetLinearDamping();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsHandleComponent_SetLinearStiffness();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsHandleComponent_SetTargetLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsHandleComponent_SetTargetLocationAndRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsHandleComponent_SetTargetRotation();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicsHandleComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicsHandleComponent();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_UPlatformEventsComponent_PlatformEventDelegate__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPlatformEventsComponent_IsInLaptopMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPlatformEventsComponent_IsInTabletMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPlatformEventsComponent_SupportsConvertibleLaptops();
	ENGINE_API class UClass* Z_Construct_UClass_UPlatformEventsComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPlatformEventsComponent();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAtmospherePrecomputeParameters();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAtmosphericFogComponent_DisableGroundScattering();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAtmosphericFogComponent_DisableSunDisk();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAtmosphericFogComponent_SetAltitudeScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAtmosphericFogComponent_SetDefaultBrightness();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAtmosphericFogComponent_SetDefaultLightColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAtmosphericFogComponent_SetDensityMultiplier();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAtmosphericFogComponent_SetDensityOffset();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAtmosphericFogComponent_SetDistanceOffset();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAtmosphericFogComponent_SetDistanceScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAtmosphericFogComponent_SetFogMultiplier();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAtmosphericFogComponent_SetPrecomputeParams();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAtmosphericFogComponent_SetStartDistance();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAtmosphericFogComponent_SetSunMultiplier();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAtmosphericFogComponent_StartPrecompute();
	ENGINE_API class UClass* Z_Construct_UClass_UAtmosphericFogComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAtmosphericFogComponent();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESoundSpatializationAlgorithm();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAttenuationShape();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESoundDistanceCalc();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESoundDistanceModel();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAttenuationSettings();
	ENGINE_API class UClass* Z_Construct_UClass_USoundAttenuation_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundAttenuation();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_OnQueueSubtitles__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_OnAudioFinished__DelegateSignature();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAudioComponentParam();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAudioComponent_AdjustAttenuation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAudioComponent_AdjustVolume();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAudioComponent_BP_GetAttenuationSettingsToApply();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAudioComponent_FadeIn();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAudioComponent_FadeOut();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAudioComponent_IsPlaying();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAudioComponent_Play();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAudioComponent_SetBoolParameter();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAudioComponent_SetFloatParameter();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAudioComponent_SetIntParameter();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAudioComponent_SetPitchMultiplier();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAudioComponent_SetSound();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAudioComponent_SetUISound();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAudioComponent_SetVolumeMultiplier();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAudioComponent_SetWaveParameter();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAudioComponent_Stop();
	ENGINE_API class UClass* Z_Construct_UClass_UAudioComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAudioComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCameraComponent_AddOrUpdateBlendable();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCameraComponent_GetCameraView();
	ENGINE_API class UClass* Z_Construct_UClass_UCameraComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCameraComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UChildActorComponent_SetChildActorClass();
	ENGINE_API class UClass* Z_Construct_UClass_UChildActorComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UChildActorComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDecalComponent_CreateDynamicMaterialInstance();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDecalComponent_GetDecalMaterial();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDecalComponent_SetDecalMaterial();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDecalComponent_SetSortOrder();
	ENGINE_API class UClass* Z_Construct_UClass_UDecalComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDecalComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UExponentialHeightFogComponent_SetDirectionalInscatteringColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UExponentialHeightFogComponent_SetDirectionalInscatteringExponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UExponentialHeightFogComponent_SetDirectionalInscatteringStartDistance();
	ENGINE_API class UFunction* Z_Construct_UFunction_UExponentialHeightFogComponent_SetFogDensity();
	ENGINE_API class UFunction* Z_Construct_UFunction_UExponentialHeightFogComponent_SetFogHeightFalloff();
	ENGINE_API class UFunction* Z_Construct_UFunction_UExponentialHeightFogComponent_SetFogInscatteringColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UExponentialHeightFogComponent_SetFogMaxOpacity();
	ENGINE_API class UFunction* Z_Construct_UFunction_UExponentialHeightFogComponent_SetStartDistance();
	ENGINE_API class UClass* Z_Construct_UClass_UExponentialHeightFogComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UExponentialHeightFogComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDirectionalLightComponent_SetCascadeDistributionExponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDirectionalLightComponent_SetCascadeTransitionFraction();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDirectionalLightComponent_SetDynamicShadowCascades();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDirectionalLightComponent_SetDynamicShadowDistanceMovableLight();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDirectionalLightComponent_SetDynamicShadowDistanceStationaryLight();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDirectionalLightComponent_SetEnableLightShaftOcclusion();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDirectionalLightComponent_SetLightShaftOverrideDirection();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDirectionalLightComponent_SetOcclusionMaskDarkness();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDirectionalLightComponent_SetShadowDistanceFadeoutFraction();
	ENGINE_API class UClass* Z_Construct_UClass_UDirectionalLightComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDirectionalLightComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPointLightComponent_SetAttenuationRadius();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPointLightComponent_SetLightFalloffExponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPointLightComponent_SetSourceLength();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPointLightComponent_SetSourceRadius();
	ENGINE_API class UClass* Z_Construct_UClass_UPointLightComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPointLightComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_USpotLightComponent_SetInnerConeAngle();
	ENGINE_API class UFunction* Z_Construct_UFunction_USpotLightComponent_SetOuterConeAngle();
	ENGINE_API class UClass* Z_Construct_UClass_USpotLightComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USpotLightComponent();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESkyLightSourceType();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkyLightComponent_RecaptureSky();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkyLightComponent_SetCubemap();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkyLightComponent_SetCubemapBlend();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkyLightComponent_SetIndirectLightingIntensity();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkyLightComponent_SetIntensity();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkyLightComponent_SetLightColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkyLightComponent_SetMinOcclusion();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkyLightComponent_SetOcclusionTint();
	ENGINE_API class UClass* Z_Construct_UClass_USkyLightComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USkyLightComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UNavigationGraphNodeComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavigationGraphNodeComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsSpringComponent_GetNormalizedCompressionScalar();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsSpringComponent_GetSpringCurrentEndPoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsSpringComponent_GetSpringDirection();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsSpringComponent_GetSpringRestingPoint();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicsSpringComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicsSpringComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicsThrusterComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicsThrusterComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPostProcessComponent_AddOrUpdateBlendable();
	ENGINE_API class UClass* Z_Construct_UClass_UPostProcessComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPostProcessComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UArrowComponent_SetArrowColor_DEPRECATED();
	ENGINE_API class UFunction* Z_Construct_UFunction_UArrowComponent_SetArrowColor_New();
	ENGINE_API class UClass* Z_Construct_UClass_UArrowComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UArrowComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UBillboardComponent_SetSprite();
	ENGINE_API class UFunction* Z_Construct_UFunction_UBillboardComponent_SetSpriteAndUV();
	ENGINE_API class UFunction* Z_Construct_UFunction_UBillboardComponent_SetUV();
	ENGINE_API class UClass* Z_Construct_UClass_UBillboardComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBillboardComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UBrushComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBrushComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UDrawFrustumComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDrawFrustumComponent();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBatchedPoint();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBatchedLine();
	ENGINE_API class UClass* Z_Construct_UClass_ULineBatchComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ULineBatchComponent();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMaterialSpriteElement();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMaterialBillboardComponent_AddElement();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialBillboardComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialBillboardComponent();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ComponentFractureSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDestructibleComponent_ApplyDamage();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDestructibleComponent_ApplyRadiusDamage();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDestructibleComponent_GetDestructibleMesh();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDestructibleComponent_SetDestructibleMesh();
	ENGINE_API class UClass* Z_Construct_UClass_UDestructibleComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDestructibleComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPoseableMeshComponent_GetBoneLocationByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPoseableMeshComponent_GetBoneRotationByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPoseableMeshComponent_GetBoneScaleByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPoseableMeshComponent_GetBoneTransformByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPoseableMeshComponent_ResetBoneTransformByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPoseableMeshComponent_SetBoneLocationByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPoseableMeshComponent_SetBoneRotationByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPoseableMeshComponent_SetBoneScaleByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPoseableMeshComponent_SetBoneTransformByName();
	ENGINE_API class UClass* Z_Construct_UClass_UPoseableMeshComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPoseableMeshComponent();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FStaticMeshComponentLODInfo();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPaintedVertex();
	ENGINE_API class UFunction* Z_Construct_UFunction_UStaticMeshComponent_GetLocalBounds();
	ENGINE_API class UFunction* Z_Construct_UFunction_UStaticMeshComponent_OnRep_StaticMesh();
	ENGINE_API class UFunction* Z_Construct_UFunction_UStaticMeshComponent_SetForcedLodModel();
	ENGINE_API class UFunction* Z_Construct_UFunction_UStaticMeshComponent_SetStaticMesh();
	ENGINE_API class UClass* Z_Construct_UClass_UStaticMeshComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UStaticMeshComponent();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FInstancedStaticMeshMappingInfo();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FInstancedStaticMeshInstanceData();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInstancedStaticMeshComponent_AddInstance();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInstancedStaticMeshComponent_AddInstanceWorldSpace();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInstancedStaticMeshComponent_ClearInstances();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInstancedStaticMeshComponent_GetInstanceCount();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInstancedStaticMeshComponent_GetInstancesOverlappingSphere();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInstancedStaticMeshComponent_GetInstanceTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInstancedStaticMeshComponent_RemoveInstance();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInstancedStaticMeshComponent_SetCullDistances();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInstancedStaticMeshComponent_UpdateInstanceTransform();
	ENGINE_API class UClass* Z_Construct_UClass_UInstancedStaticMeshComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInstancedStaticMeshComponent();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FClusterNode();
	ENGINE_API class UFunction* Z_Construct_UFunction_UHierarchicalInstancedStaticMeshComponent_RemoveInstances();
	ENGINE_API class UClass* Z_Construct_UClass_UHierarchicalInstancedStaticMeshComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UHierarchicalInstancedStaticMeshComponent();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESplineMeshAxis();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSplineMeshParams();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_GetBoundaryMax();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_GetBoundaryMin();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_GetEndOffset();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_GetEndPosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_GetEndRoll();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_GetEndScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_GetEndTangent();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_GetForwardAxis();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_GetSplineUpDir();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_GetStartOffset();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_GetStartPosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_GetStartRoll();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_GetStartScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_GetStartTangent();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_SetBoundaryMax();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_SetBoundaryMin();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_SetEndOffset();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_SetEndPosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_SetEndRoll();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_SetEndScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_SetEndTangent();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_SetForwardAxis();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_SetSplineUpDir();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_SetStartAndEnd();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_SetStartOffset();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_SetStartPosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_SetStartRoll();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_SetStartScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_SetStartTangent();
	ENGINE_API class UClass* Z_Construct_UClass_USplineMeshComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USplineMeshComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UModelComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UModelComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UNavLinkRenderingComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavLinkRenderingComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UNavMeshRenderingComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavMeshRenderingComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UNavTestRenderingComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavTestRenderingComponent();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMaterialUsage();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FLightmassMaterialInterfaceSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMaterialRelevance();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMaterialInterface_GetBaseMaterial();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMaterialInterface_GetPhysicalMaterial();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialInterface_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialInterface();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EParticleSystemOcclusionBoundsMethod();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ParticleSystemLODMethod();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EParticleSystemUpdateMode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNamedEmitterMaterial();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FLODSoloTrack();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FParticleSystemLOD();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystem_ContainsEmitterType();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleSystem_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleSystem();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_OnSystemFinished__DelegateSignature();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EParticleEventType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ParticleReplayState();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EParticleSysParamType();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FParticleSysParam();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_BeginTrails();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_CreateNamedDynamicMaterialInstance();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_EndTrails();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_GenerateParticleEvent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_GetNamedMaterial();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_GetNumActiveParticles();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_SetActorParameter();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_SetBeamEndPoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_SetBeamSourcePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_SetBeamSourceStrength();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_SetBeamSourceTangent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_SetBeamTargetPoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_SetBeamTargetStrength();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_SetBeamTargetTangent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_SetColorParameter();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_SetEmitterEnable();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_SetFloatParameter();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_SetMaterialParameter();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_SetTemplate();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_SetTrailSourceData();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_SetVectorParameter();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleSystemComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleSystemComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UShapeComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UShapeComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UBoxComponent_GetScaledBoxExtent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UBoxComponent_GetUnscaledBoxExtent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UBoxComponent_SetBoxExtent();
	ENGINE_API class UClass* Z_Construct_UClass_UBoxComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBoxComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCapsuleComponent_GetScaledCapsuleHalfHeight();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCapsuleComponent_GetScaledCapsuleRadius();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCapsuleComponent_GetScaledCapsuleSize();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCapsuleComponent_GetShapeScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCapsuleComponent_GetUnscaledCapsuleHalfHeight();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCapsuleComponent_GetUnscaledCapsuleRadius();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCapsuleComponent_GetUnscaledCapsuleSize();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCapsuleComponent_SetCapsuleHalfHeight();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCapsuleComponent_SetCapsuleRadius();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCapsuleComponent_SetCapsuleSize();
	ENGINE_API class UClass* Z_Construct_UClass_UCapsuleComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCapsuleComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_USphereComponent_GetScaledSphereRadius();
	ENGINE_API class UFunction* Z_Construct_UFunction_USphereComponent_GetShapeScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_USphereComponent_GetUnscaledSphereRadius();
	ENGINE_API class UFunction* Z_Construct_UFunction_USphereComponent_SetSphereRadius();
	ENGINE_API class UClass* Z_Construct_UClass_USphereComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USphereComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UDrawSphereComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDrawSphereComponent();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EVerticalTextAligment();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EHorizTextAligment();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTextRenderComponent_GetTextLocalSize();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTextRenderComponent_GetTextWorldSize();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTextRenderComponent_K2_SetText();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTextRenderComponent_SetFont();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTextRenderComponent_SetHorizontalAlignment();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTextRenderComponent_SetHorizSpacingAdjust();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTextRenderComponent_SetText();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTextRenderComponent_SetTextMaterial();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTextRenderComponent_SetTextRenderColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTextRenderComponent_SetWorldSize();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTextRenderComponent_SetXScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTextRenderComponent_SetYScale();
	ENGINE_API class UClass* Z_Construct_UClass_UTextRenderComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UTextRenderComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UVectorFieldComponent_SetIntensity();
	ENGINE_API class UClass* Z_Construct_UClass_UVectorFieldComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UVectorFieldComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_URadialForceComponent_AddObjectTypeToAffect();
	ENGINE_API class UFunction* Z_Construct_UFunction_URadialForceComponent_FireImpulse();
	ENGINE_API class UFunction* Z_Construct_UFunction_URadialForceComponent_RemoveObjectTypeToAffect();
	ENGINE_API class UClass* Z_Construct_UClass_URadialForceComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_URadialForceComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UReflectionCaptureComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UReflectionCaptureComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UBoxReflectionCaptureComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBoxReflectionCaptureComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UPlaneReflectionCaptureComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPlaneReflectionCaptureComponent();
	ENGINE_API class UClass* Z_Construct_UClass_USphereReflectionCaptureComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USphereReflectionCaptureComponent();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FEngineShowFlagsSetting();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneCaptureComponent_HideActorComponents();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneCaptureComponent_HideComponent();
	ENGINE_API class UClass* Z_Construct_UClass_USceneCaptureComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USceneCaptureComponent();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESceneCaptureSource();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneCaptureComponent2D_AddOrUpdateBlendable();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneCaptureComponent2D_UpdateContent();
	ENGINE_API class UClass* Z_Construct_UClass_USceneCaptureComponent2D_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USceneCaptureComponent2D();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneCaptureComponentCube_UpdateContent();
	ENGINE_API class UClass* Z_Construct_UClass_USceneCaptureComponentCube_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USceneCaptureComponentCube();
	ENGINE_API class UClass* Z_Construct_UClass_USpringArmComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USpringArmComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UWindDirectionalSourceComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UWindDirectionalSourceComponent();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_OnTimelineLinearColor__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_OnTimelineVector__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_OnTimelineFloat__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_OnTimelineEvent__DelegateSignature();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETimelineDirection();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETimelineLengthMode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTimeline();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTimelineLinearColorTrack();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTimelineFloatTrack();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTimelineVectorTrack();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTimelineEventEntry();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTimelineComponent_GetPlaybackPosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTimelineComponent_GetPlayRate();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTimelineComponent_GetTimelineLength();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTimelineComponent_IsLooping();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTimelineComponent_IsPlaying();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTimelineComponent_IsReversing();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTimelineComponent_OnRep_Timeline();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTimelineComponent_Play();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTimelineComponent_PlayFromStart();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTimelineComponent_Reverse();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTimelineComponent_ReverseFromEnd();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTimelineComponent_SetLooping();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTimelineComponent_SetNewTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTimelineComponent_SetPlaybackPosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTimelineComponent_SetPlayRate();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTimelineComponent_SetTimelineLength();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTimelineComponent_SetTimelineLengthMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTimelineComponent_Stop();
	ENGINE_API class UClass* Z_Construct_UClass_UTimelineComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UTimelineComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UAISystemBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAISystemBase();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETypeAdvanceAnim();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimSequenceBase_GetPlayLength();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimSequenceBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimSequenceBase();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimTrack();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimSegment();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRootMotionExtractionStep();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimCompositeBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimCompositeBase();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimComposite_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimComposite();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAlphaBlendOption();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAlphaBlend();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETransitionLogicType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETransitionBlendMode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBakedAnimationStateMachine();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBakedAnimationState();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBakedStateExitTransition();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimationTransitionBetweenStates();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimationState();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimationStateBase();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimationTransitionRule();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimStateMachineTypes_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimStateMachineTypes();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_OnMontageBlendingOutStartedMCDelegate__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_OnMontageEndedMCDelegate__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_OnMontageStartedMCDelegate__DelegateSignature();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EBoneRotationSource();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EBoneControlSpace();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSlotEvaluationPose();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPerBoneBlendWeights();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPerBoneBlendWeight();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FA2CSPose();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FA2Pose();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_AnimNotify_Sound();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_BlueprintInitializeAnimation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_BlueprintPostEvaluateAnimation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_BlueprintUpdateAnimation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_CalculateDirection();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_ClearMorphTargets();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetAnimAssetPlayerLength();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetAnimAssetPlayerTimeFraction();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetAnimAssetPlayerTimeFromEnd();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetAnimAssetPlayerTimeFromEndFraction();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetCurrentStateElapsedTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetCurrentStateName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetCurveValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetInstanceAssetPlayerLength();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetInstanceAssetPlayerTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetInstanceAssetPlayerTimeFraction();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetInstanceAssetPlayerTimeFromEnd();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetInstanceAssetPlayerTimeFromEndFraction();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetInstanceCurrentStateElapsedTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetInstanceStateWeight();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetInstanceTransitionCrossfadeDuration();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetInstanceTransitionTimeElapsed();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetInstanceTransitionTimeElapsedFraction();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetOwningActor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetOwningComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetRelevantAnimLength();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetRelevantAnimTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetRelevantAnimTimeFraction();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetRelevantAnimTimeRemaining();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetRelevantAnimTimeRemainingFraction();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetStateWeight();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_IsPlayingSlotAnimation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_LockAIResources();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_Montage_GetCurrentSection();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_Montage_IsActive();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_Montage_IsPlaying();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_Montage_JumpToSection();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_Montage_JumpToSectionsEnd();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_Montage_Pause();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_Montage_Play();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_Montage_SetNextSection();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_Montage_SetPlayRate();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_Montage_Stop();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_PlaySlotAnimation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_PlaySlotAnimationAsDynamicMontage();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_SetMorphTarget();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_StopSlotAnimation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_TryGetPawnOwner();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_UnlockAIResources();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimInstance_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimInstance();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAnimNotifyEventType();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimMontageInstance();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBranchingPointMarker();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBranchingPoint();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSlotAnimationTrack();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCompositeSection();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimMontage_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimMontage();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAdditiveBasePoseType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_AnimationKeyFormat();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_AnimationCompressionFormat();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCompressedOffsetData();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCompressedTrack();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCurveTrack();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FScaleTrack();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRotationTrack();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTranslationTrack();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTrackToSkeletonMap();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimSequenceTrackContainer();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRawAnimSequenceTrack();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimSequence_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimSequence();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ENotifyTriggerMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EBlendSpaceAxis();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPerBoneInterpolation();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FGridBlendSample();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FEditorElement();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBlendSample();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBlendParameter();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FInterpolationParameter();
	ENGINE_API class UClass* Z_Construct_UClass_UBlendSpaceBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBlendSpaceBase();
	ENGINE_API class UClass* Z_Construct_UClass_UBlendSpace_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBlendSpace();
	ENGINE_API class UClass* Z_Construct_UClass_UAimOffsetBlendSpace_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAimOffsetBlendSpace();
	ENGINE_API class UClass* Z_Construct_UClass_UBlendSpace1D_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBlendSpace1D();
	ENGINE_API class UClass* Z_Construct_UClass_UAimOffsetBlendSpace1D_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAimOffsetBlendSpace1D();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimCompress_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimCompress();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimCompress_Automatic_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimCompress_Automatic();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimCompress_BitwiseCompressOnly_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimCompress_BitwiseCompressOnly();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimCompress_LeastDestructive_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimCompress_LeastDestructive();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimCompress_RemoveEverySecondKey_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimCompress_RemoveEverySecondKey();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimCompress_RemoveLinearKeys_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimCompress_RemoveLinearKeys();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimCompress_PerTrackCompression_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimCompress_PerTrackCompression();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimCompress_RemoveTrivialKeys_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimCompress_RemoveTrivialKeys();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_PostEvaluateAnimEvent__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimSingleNodeInstance_GetLength();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimSingleNodeInstance_PlayAnim();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimSingleNodeInstance_SetAnimationAsset();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimSingleNodeInstance_SetBlendSpaceInput();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimSingleNodeInstance_SetLooping();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimSingleNodeInstance_SetPlaying();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimSingleNodeInstance_SetPlayRate();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimSingleNodeInstance_SetPosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimSingleNodeInstance_SetReverse();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimSingleNodeInstance_SetVertexAnimation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimSingleNodeInstance_StopAnim();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimSingleNodeInstance_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimSingleNodeInstance();
	ENGINE_API class UFunction* Z_Construct_UFunction_UVehicleAnimInstance_GetVehicle();
	ENGINE_API class UClass* Z_Construct_UClass_UVehicleAnimInstance_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UVehicleAnimInstance();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimMetaData_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimMetaData();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimNotify_GetNotifyName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimNotify_Received_Notify();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimNotify_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimNotify();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimNotifyState_GetNotifyName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimNotifyState_Received_NotifyBegin();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimNotifyState_Received_NotifyEnd();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimNotifyState_Received_NotifyTick();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimNotifyState_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimNotifyState();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimNotifyState_TimedParticleEffect_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimNotifyState_TimedParticleEffect();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimNotifyState_Trail_OverridePSTemplate();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimNotifyState_Trail_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimNotifyState_Trail();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimSetMeshLinkup();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimSet_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimSet();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAssetImportInfo();
	ENGINE_API class UClass* Z_Construct_UClass_UAssetImportData_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAssetImportData();
	ENGINE_API class UClass* Z_Construct_UClass_UAssetUserData_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAssetUserData();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FLaunchOnTestSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FEditorMapPerformanceTestDefinition();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBuildPromotionTestSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FParticleEditorPromotionSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMaterialEditorPromotionSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBuildPromotionNewProjectSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBuildPromotionBlueprintSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBuildPromotionOpenAssetSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBuildPromotionImportWorkflowSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FEditorImportWorkflowDefinition();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FEditorImportExportTestDefinition();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FImportFactorySettingValues();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FExternalToolDefinition();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FOpenTestAsset();
	ENGINE_API class UClass* Z_Construct_UClass_UAutomationTestSettings_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAutomationTestSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNavAvoidanceData();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAvoidanceManager_GetAvoidanceVelocity();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAvoidanceManager_GetAvoidanceVelocityForComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAvoidanceManager_GetAvoidanceVelocityIgnoringUID();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAvoidanceManager_GetNewAvoidanceUID();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAvoidanceManager_GetObjectCount();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAvoidanceManager_RegisterMovementComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UAvoidanceManager_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAvoidanceManager();
	ENGINE_API class UFunction* Z_Construct_UFunction_UBlueprintAsyncActionBase_Activate();
	ENGINE_API class UClass* Z_Construct_UClass_UBlueprintAsyncActionBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBlueprintAsyncActionBase();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimParentNodeAssetOverride();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimGroupInfo();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimBlueprint_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimBlueprint();
	ENGINE_API class UClass* Z_Construct_UClass_ULevelScriptBlueprint_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ULevelScriptBlueprint();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDataTableCategoryHandle();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDataTableRowHandle();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTableRowBase();
	ENGINE_API class UClass* Z_Construct_UClass_UDataTable_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDataTable();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EEvaluateCurveTableResult();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDataTableFunctionLibrary_EvaluateCurveTableRow();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDataTableFunctionLibrary_GetDataTableRowFromName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDataTableFunctionLibrary_GetDataTableRowNames();
	ENGINE_API class UClass* Z_Construct_UClass_UDataTableFunctionLibrary_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDataTableFunctionLibrary();
	ENGINE_API class UClass* Z_Construct_UClass_UDebugDrawService_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDebugDrawService();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EGrammaticalNumber();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EGrammaticalGender();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDialogueWaveParameter();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDialogueContext();
	ENGINE_API class UClass* Z_Construct_UClass_UDialogueTypes_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDialogueTypes();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESuggestProjVelocityTraceOption();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_ActivateReverbEffect();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_ApplyDamage();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_ApplyPointDamage();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_ApplyRadialDamage();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_ApplyRadialDamageWithFalloff();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_AreAnyListenersWithinRange();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_BeginDeferredActorSpawnFromClass();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_BeginSpawningActorFromBlueprint();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_BeginSpawningActorFromClass();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_BlueprintSuggestProjectileVelocity();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_BreakHitResult();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_CancelAsyncLoading();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_ClearSoundMixModifiers();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_CreatePlayer();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_CreateSaveGameObject();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_CreateSaveGameObjectFromBlueprint();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_DeactivateReverbEffect();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_DeleteGameInSlot();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_DeprojectScreenToWorld();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_DoesSaveGameExist();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_EnableLiveStreaming();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_FinishSpawningActor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_FlushLevelStreaming();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetAccurateRealTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetActorArrayAverageLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetActorArrayBounds();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetAllActorsOfClass();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetAllActorsWithInterface();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetAudioTimeSeconds();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetCurrentLevelName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetGameInstance();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetGameMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetGameState();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetGlobalTimeDilation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetIntOption();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetKeyValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetObjectClass();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetPlatformName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetPlayerCameraManager();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetPlayerCharacter();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetPlayerController();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetPlayerPawn();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetRealTimeSeconds();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetStreamingLevel();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetSurfaceType();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetWorldDeltaSeconds();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetWorldOriginLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GrassOverlappingSphereCount();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_HasOption();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_IsGamePaused();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_LoadGameFromSlot();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_LoadStreamLevel();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_OpenLevel();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_ParseOption();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_PlayDialogue2D();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_PlayDialogueAtLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_PlaySound2D();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_PlaySoundAtLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_PlayWorldCameraShake();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_PopSoundMixModifier();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_ProjectWorldToScreen();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_PushSoundMixModifier();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_RemovePlayer();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_SaveGameToSlot();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_SetBaseSoundMix();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_SetGamePaused();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_SetGlobalTimeDilation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_SetWorldOriginLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_SpawnDecalAtLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_SpawnDecalAttached();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_SpawnDialogue2D();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_SpawnDialogueAtLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_SpawnDialogueAttached();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_SpawnEmitterAtLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_SpawnEmitterAttached();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_SpawnObject();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_SpawnSound2D();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_SpawnSoundAtLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_SpawnSoundAttached();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_UnloadStreamLevel();
	ENGINE_API class UClass* Z_Construct_UClass_UGameplayStatics_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UGameplayStatics();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EOrientPositionSelector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_EnableHMD();
	ENGINE_API class UFunction* Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_EnableLowPersistenceMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_GetOrientationAndPosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_GetPositionalTrackingCameraParameters();
	ENGINE_API class UFunction* Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_GetScreenPercentage();
	ENGINE_API class UFunction* Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_GetWorldToMetersScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_HasValidTrackingPosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_IsHeadMountedDisplayEnabled();
	ENGINE_API class UFunction* Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_IsInLowPersistenceMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_ResetOrientationAndPosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_SetClippingPlanes();
	ENGINE_API class UFunction* Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_SetWorldToMetersScale();
	ENGINE_API class UClass* Z_Construct_UClass_UHeadMountedDisplayFunctionLibrary_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UHeadMountedDisplayFunctionLibrary();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetArrayLibrary_Array_Add();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetArrayLibrary_Array_AddUnique();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetArrayLibrary_Array_Append();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetArrayLibrary_Array_Clear();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetArrayLibrary_Array_Contains();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetArrayLibrary_Array_Find();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetArrayLibrary_Array_Get();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetArrayLibrary_Array_Insert();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetArrayLibrary_Array_LastIndex();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetArrayLibrary_Array_Length();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetArrayLibrary_Array_Remove();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetArrayLibrary_Array_RemoveItem();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetArrayLibrary_Array_Resize();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetArrayLibrary_Array_Set();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetArrayLibrary_Array_Shuffle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetArrayLibrary_FilterArray();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetArrayLibrary_SetArrayPropertyByName();
	ENGINE_API class UClass* Z_Construct_UClass_UKismetArrayLibrary_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UKismetArrayLibrary();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetGuidLibrary_Conv_GuidToString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetGuidLibrary_EqualEqual_GuidGuid();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetGuidLibrary_Invalidate_Guid();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetGuidLibrary_IsValid_Guid();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetGuidLibrary_NewGuid();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetGuidLibrary_NotEqual_GuidGuid();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetGuidLibrary_Parse_StringToGuid();
	ENGINE_API class UClass* Z_Construct_UClass_UKismetGuidLibrary_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UKismetGuidLibrary();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_CalibrateTilt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_ControllerEvent_GetAnalogValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_ControllerEvent_GetEffectingButton();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_ControllerEvent_GetUserIndex();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_EqualEqual_KeyKey();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_GetAnalogValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_GetKey();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_GetUserIndex();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsAltDown();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsCommandDown();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsControlDown();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsLeftAltDown();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsLeftCommandDown();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsLeftControlDown();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsLeftShiftDown();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsRepeat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsRightAltDown();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsRightCommandDown();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsRightControlDown();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsRightShiftDown();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsShiftDown();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_Key_GetDisplayName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_Key_IsFloatAxis();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_Key_IsGamepadKey();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_Key_IsKeyboardKey();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_Key_IsModifierKey();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_Key_IsMouseButton();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_Key_IsVectorAxis();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_PointerEvent_GetCursorDelta();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_PointerEvent_GetEffectingButton();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_PointerEvent_GetGestureDelta();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_PointerEvent_GetLastScreenSpacePosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_PointerEvent_GetPointerIndex();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_PointerEvent_GetScreenSpacePosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_PointerEvent_GetTouchpadIndex();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_PointerEvent_GetUserIndex();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_PointerEvent_GetWheelDelta();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_PointerEvent_IsMouseButtonDown();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_PointerEvent_IsTouchEvent();
	ENGINE_API class UClass* Z_Construct_UClass_UKismetInputLibrary_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UKismetInputLibrary();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMaterialLibrary_CreateDynamicMaterialInstance();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMaterialLibrary_GetScalarParameterValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMaterialLibrary_GetVectorParameterValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMaterialLibrary_SetScalarParameterValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMaterialLibrary_SetVectorParameterValue();
	ENGINE_API class UClass* Z_Construct_UClass_UKismetMaterialLibrary_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UKismetMaterialLibrary();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EEasingFunc();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Abs();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Abs_Int();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Acos();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Add_ByteByte();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Add_DateTimeTimespan();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Add_FloatFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Add_IntInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Add_TimespanTimespan();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Add_Vector2DFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Add_Vector2DVector2D();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Add_VectorFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Add_VectorInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Add_VectorVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_And_IntInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Asin();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Atan();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Atan2();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_BooleanAND();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_BooleanNAND();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_BooleanNOR();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_BooleanOR();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_BooleanXOR();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_BreakColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_BreakDateTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_BreakRandomStream();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_BreakRotator();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_BreakRotIntoAxes();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_BreakTimespan();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_BreakTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_BreakVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_BreakVector2D();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_CInterpTo();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Clamp();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_ClampAngle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_ClampAxis();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_ClampVectorSize();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_ClassIsChildOf();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_ComposeRotators();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_ComposeTransforms();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_BoolToByte();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_BoolToFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_BoolToInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_ByteToFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_ByteToInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_ColorToLinearColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_FloatToLinearColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_FloatToVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_IntToBool();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_IntToByte();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_IntToFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_LinearColorToColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_LinearColorToVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_RotatorToVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_Vector2DToVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_VectorToLinearColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_VectorToRotator();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_VectorToTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_VectorToVector2D();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_ConvertTransformToRelative();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Cos();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_CreateVectorFromYawPitch();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Cross_VectorVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_CrossProduct2D();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_DateTimeFromIsoString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_DateTimeFromString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_DateTimeMaxValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_DateTimeMinValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_DaysInMonth();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_DaysInYear();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_DegAcos();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_DegAsin();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_DegAtan();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_DegAtan2();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_DegCos();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_DegreesToRadians();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_DegSin();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_DegTan();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Divide_ByteByte();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Divide_FloatFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Divide_IntInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Divide_Vector2DFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Divide_VectorFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Divide_VectorInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Divide_VectorVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Dot_VectorVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_DotProduct2D();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Ease();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_BoolBool();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_ByteByte();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_ClassClass();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_DateTimeDateTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_FloatFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_IntInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_NameName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_ObjectObject();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_RotatorRotator();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_TimespanTimespan();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_TransformTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_VectorVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Exp();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_FCeil();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_FClamp();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_FFloor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_FindLookAtRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_FInterpEaseInOut();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_FInterpTo();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_FInterpTo_Constant();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_FixedTurn();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_FMax();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_FMin();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_FMod();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Fraction();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_FromDays();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_FromHours();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_FromMilliseconds();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_FromMinutes();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_FromSeconds();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_FTrunc();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetAxes();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetDate();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetDay();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetDayOfYear();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetDays();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetDirectionVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetDuration();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetForwardVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetHour();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetHour12();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetHours();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetMaxElement();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetMillisecond();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetMilliseconds();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetMinElement();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetMinute();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetMinutes();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetMonth();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetPI();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetRightVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetSecond();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetSeconds();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetTimeOfDay();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetTotalDays();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetTotalHours();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetTotalMilliseconds();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetTotalMinutes();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetTotalSeconds();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetUpVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetVectorArrayAverage();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetYawPitchFromVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetYear();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Greater_ByteByte();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Greater_DateTimeDateTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Greater_FloatFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Greater_IntInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Greater_TimespanTimespan();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GreaterEqual_ByteByte();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GreaterEqual_DateTimeDateTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GreaterEqual_FloatFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GreaterEqual_IntInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GreaterEqual_TimespanTimespan();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GreaterGreater_VectorRotator();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GridSnap_Float();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_HSVToRGB();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_HSVToRGB_Vector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Hypotenuse();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_InRange_FloatFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_InverseLerp();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_InverseTransformDirection();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_InverseTransformLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_InvertTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_IsAfternoon();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_IsLeapYear();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_IsMorning();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Lerp();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Less_ByteByte();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Less_DateTimeDateTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Less_FloatFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Less_IntInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Less_TimespanTimespan();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_LessEqual_ByteByte();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_LessEqual_DateTimeDateTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_LessEqual_FloatFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_LessEqual_IntInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_LessEqual_TimespanTimespan();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_LessLess_VectorRotator();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_LinearColorLerp();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_LinearColorLerpUsingHSV();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_LinePlaneIntersection();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_LinePlaneIntersection_OriginNormal();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Loge();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeDateTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakePulsatingValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeRandomStream();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeRotationFromAxes();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeRotator();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeRotFromX();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeRotFromXY();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeRotFromXZ();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeRotFromY();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeRotFromYX();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeRotFromYZ();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeRotFromZ();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeRotFromZX();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeRotFromZY();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeTimespan();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeVector2D();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MapRangeClamped();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MapRangeUnclamped();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Max();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MaxOfByteArray();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MaxOfFloatArray();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MaxOfIntArray();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Min();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MinimumAreaRectangle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MinOfByteArray();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MinOfFloatArray();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MinOfIntArray();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MirrorVectorByNormal();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Multiply_ByteByte();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Multiply_FloatFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Multiply_IntFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Multiply_IntInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Multiply_LinearColorFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Multiply_LinearColorLinearColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Multiply_RotatorFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Multiply_RotatorInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Multiply_TimespanFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Multiply_Vector2DFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Multiply_VectorFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Multiply_VectorInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Multiply_VectorVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MultiplyByPi();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MultiplyMultiply_FloatFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_NearlyEqual_FloatFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_NearlyEqual_TransformTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_NegateRotator();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_NegateVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Normal();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Normal2D();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_NormalizeAxis();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_NormalizedDeltaRotator();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_NormalizeToRange();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Not_PreBool();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_NotEqual_BoolBool();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_NotEqual_ByteByte();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_NotEqual_ClassClass();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_NotEqual_DateTimeDateTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_NotEqual_FloatFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_NotEqual_IntInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_NotEqual_NameName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_NotEqual_ObjectObject();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_NotEqual_RotatorRotator();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_NotEqual_TimespanTimespan();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_NotEqual_VectorVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Now();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Or_IntInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Percent_ByteByte();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Percent_FloatFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Percent_IntInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_PointsAreCoplanar();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_ProjectPointOnToPlane();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_ProjectVectorOnToPlane();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_ProjectVectorOnToVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RadiansToDegrees();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomBool();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomBoolFromStream();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomFloatFromStream();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomFloatInRange();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomFloatInRangeFromStream();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomInteger();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomIntegerFromStream();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomIntegerInRange();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomIntegerInRangeFromStream();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomPointInBoundingBox();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomRotator();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomRotatorFromStream();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomUnitVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomUnitVectorFromStream();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomUnitVectorInCone();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomUnitVectorInConeWithYawAndPitch();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_REase();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_ResetRandomStream();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RGBToHSV();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RGBToHSV_Vector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RInterpTo();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RInterpTo_Constant();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RLerp();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RotateAngleAxis();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RotatorFromAxisAndAngle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Round();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_SeedRandomStream();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_SelectClass();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_SelectColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_SelectFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_SelectInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_SelectObject();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_SelectRotator();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_SelectString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_SelectTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_SelectVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_SetRandomStreamSeed();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_SignOfFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_SignOfInteger();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Sin();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Sqrt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Square();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Subtract_ByteByte();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Subtract_DateTimeDateTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Subtract_DateTimeTimespan();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Subtract_FloatFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Subtract_IntInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Subtract_TimespanTimespan();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Subtract_Vector2DFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Subtract_Vector2DVector2D();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Subtract_VectorFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Subtract_VectorInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Subtract_VectorVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Tan();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_TEase();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_TimespanFromString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_TimespanMaxValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_TimespanMinValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_TimespanRatio();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_TimespanZeroValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_TInterpTo();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_TLerp();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Today();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_TransformDirection();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_TransformLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_UtcNow();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_VEase();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Vector2DInterpTo();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Vector2DInterpTo_Constant();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_VInterpTo();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_VInterpTo_Constant();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_VLerp();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_VSize();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_VSize2D();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_VSize2DSquared();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_VSizeSquared();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Xor_IntInt();
	ENGINE_API class UClass* Z_Construct_UClass_UKismetMathLibrary_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UKismetMathLibrary();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetNodeHelperLibrary_BitIsMarked();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetNodeHelperLibrary_ClearAllBits();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetNodeHelperLibrary_ClearBit();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetNodeHelperLibrary_GetEnumeratorName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetNodeHelperLibrary_GetEnumeratorUserFriendlyName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetNodeHelperLibrary_GetFirstUnmarkedBit();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetNodeHelperLibrary_GetRandomUnmarkedBit();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetNodeHelperLibrary_GetUnmarkedBit();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetNodeHelperLibrary_GetValidIndex();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetNodeHelperLibrary_HasMarkedBit();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetNodeHelperLibrary_HasUnmarkedBit();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetNodeHelperLibrary_MarkBit();
	ENGINE_API class UClass* Z_Construct_UClass_UKismetNodeHelperLibrary_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UKismetNodeHelperLibrary();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_BuildString_Bool();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_BuildString_Color();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_BuildString_Float();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_BuildString_Int();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_BuildString_Name();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_BuildString_Object();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_BuildString_Rotator();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_BuildString_Vector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_BuildString_Vector2d();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Concat_StrStr();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Conv_BoolToString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Conv_ByteToString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Conv_ColorToString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Conv_FloatToString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Conv_IntToString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Conv_NameToString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Conv_ObjectToString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Conv_RotatorToString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Conv_StringToFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Conv_StringToInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Conv_StringToName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Conv_TransformToString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Conv_Vector2dToString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Conv_VectorToString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_CullArray();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_EndsWith();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_EqualEqual_StriStri();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_EqualEqual_StrStr();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_FindSubstring();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_GetCharacterArrayFromString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_GetCharacterAsNumber();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_GetSubstring();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_IsNumeric();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_JoinStringArray();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Left();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_LeftChop();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_LeftPad();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Len();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_MatchesWildcard();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Mid();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_NotEqual_StriStri();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_NotEqual_StrStr();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_ParseIntoArray();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Replace();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_ReplaceInline();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Reverse();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Right();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_RightChop();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_RightPad();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Split();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_StartsWith();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_TimeSecondsToString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_ToLower();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_ToUpper();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Trim();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_TrimTrailing();
	ENGINE_API class UClass* Z_Construct_UClass_UKismetStringLibrary_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UKismetStringLibrary();
	ENGINE_API class UClass* Z_Construct_UClass_UDeveloperSettings_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDeveloperSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCustomProfile();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCustomChannelSetup();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCollisionResponseTemplate();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCollisionProfileName();
	ENGINE_API class UClass* Z_Construct_UClass_UCollisionProfile_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCollisionProfile();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_UKismetSystemLibrary_OnAssetClassLoaded__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_UKismetSystemLibrary_OnAssetLoaded__DelegateSignature();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EQuitPreference();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMoveComponentAction();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EDrawDebugTrace();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FGenericStruct();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_AddFloatHistorySample();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_BoxOverlapActors_DEPRECATED();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_BoxOverlapActors_NEW();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_BoxOverlapComponents_DEPRECATED();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_BoxOverlapComponents_NEW();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_BoxTraceMulti();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_BoxTraceMultiForObjects();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_BoxTraceSingle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_BoxTraceSingleForObjects();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_CapsuleOverlapActors_DEPRECATED();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_CapsuleOverlapActors_NEW();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_CapsuleOverlapComponents_DEPRECATED();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_CapsuleOverlapComponents_NEW();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_CapsuleTraceMulti_DEPRECATED();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_CapsuleTraceMulti_NEW();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_CapsuleTraceMultiByObject_DEPRECATED();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_CapsuleTraceMultiForObjects();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_CapsuleTraceSingle_DEPRECATED();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_CapsuleTraceSingle_NEW();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_CapsuleTraceSingleByObject_DEPRECATED();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_CapsuleTraceSingleForObjects();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_CollectGarbage();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_ComponentOverlapActors_DEPRECATED();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_ComponentOverlapActors_NEW();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_ComponentOverlapComponents_DEPRECATED();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_ComponentOverlapComponents_NEW();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_ControlScreensaver();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_Conv_AssetClassToClass();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_Conv_AssetToObject();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_Conv_InterfaceToObject();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_CreateCopyForUndoBuffer();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_Delay();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DoesImplementInterface();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugArrow();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugBox();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugCamera();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugCapsule();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugCircle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugCone();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugConeInDegrees();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugCoordinateSystem();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugCylinder();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugFloatHistoryLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugFloatHistoryTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugFrustum();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugLine();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugPlane();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugPoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugSphere();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_ExecuteConsoleCommand();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_FlushDebugStrings();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_FlushPersistentDebugLines();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_ForceCloseAdBanner();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetActorBounds();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetActorListFromComponentList();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetAdIDCount();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetClassDisplayName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetComponentBounds();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetDisplayName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetEngineVersion();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetGameName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetGameTimeInSeconds();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetLocalCurrencyCode();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetLocalCurrencySymbol();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetObjectName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetPlatformUserName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetPreferredLanguages();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetRenderingDetailMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetRenderingMaterialQualityLevel();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetSupportedFullscreenResolutions();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetUniqueDeviceId();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetVolumeButtonsHandledBySystem();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_HideAdBanner();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_IsControllerAssignedToGamepad();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_IsDedicatedServer();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_IsLoggedIn();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_IsPackagedForDistribution();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_IsServer();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_IsValid();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_IsValidClass();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_ClearTimer();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_ClearTimerDelegate();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_ClearTimerHandle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_GetTimerElapsedTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_GetTimerElapsedTimeDelegate();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_GetTimerElapsedTimeHandle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_GetTimerRemainingTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_GetTimerRemainingTimeDelegate();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_GetTimerRemainingTimeHandle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_InvalidateTimerHandle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_IsTimerActive();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_IsTimerActiveDelegate();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_IsTimerActiveHandle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_IsTimerPaused();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_IsTimerPausedDelegate();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_IsTimerPausedHandle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_IsValidTimerHandle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_PauseTimer();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_PauseTimerDelegate();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_PauseTimerHandle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_SetTimer();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_SetTimerDelegate();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_TimerExists();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_TimerExistsDelegate();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_TimerExistsHandle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_UnPauseTimer();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_UnPauseTimerDelegate();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_UnPauseTimerHandle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_LaunchURL();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_LineTraceMulti_DEPRECATED();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_LineTraceMulti_NEW();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_LineTraceMultiByObject_DEPRECATED();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_LineTraceMultiForObjects();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_LineTraceSingle_DEPRECATED();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_LineTraceSingle_NEW();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_LineTraceSingleByObject_DEPRECATED();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_LineTraceSingleForObjects();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_LoadAsset();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_LoadAssetClass();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_MakeLiteralBool();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_MakeLiteralByte();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_MakeLiteralFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_MakeLiteralInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_MakeLiteralName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_MakeLiteralString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_MakeLiteralText();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_MoveComponentTo();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_PrintString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_PrintText();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_PrintWarning();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_QuitGame();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_RegisterForRemoteNotifications();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_ResetGamepadAssignments();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_ResetGamepadAssignmentToController();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_RetriggerableDelay();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetAssetClassPropertyByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetAssetPropertyByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetBoolPropertyByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetBytePropertyByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetClassPropertyByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetCollisionProfileNameProperty();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetFloatPropertyByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetIntPropertyByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetLinearColorPropertyByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetNamePropertyByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetObjectPropertyByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetRotatorPropertyByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetStringPropertyByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetStructurePropertyByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetSupressViewportTransitionMessage();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetTextPropertyByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetTransformPropertyByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetVectorPropertyByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetVolumeButtonsHandledBySystem();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetWindowTitle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_ShowAdBanner();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_ShowPlatformSpecificAchievementsScreen();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_ShowPlatformSpecificLeaderboardScreen();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SphereOverlapActors_DEPRECATED();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SphereOverlapActors_NEW();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SphereOverlapComponents_DEPRECATED();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SphereOverlapComponents_NEW();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SphereTraceMulti_DEPRECATED();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SphereTraceMulti_NEW();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SphereTraceMultiByObject_DEPRECATED();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SphereTraceMultiForObjects();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SphereTraceSingle_DEPRECATED();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SphereTraceSingle_NEW();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SphereTraceSingleByObject_DEPRECATED();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SphereTraceSingleForObjects();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_StackTrace();
	ENGINE_API class UClass* Z_Construct_UClass_UKismetSystemLibrary_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UKismetSystemLibrary();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ERoundingMode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FFormatTextArgument();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_AsCurrency_Float();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_AsCurrency_Integer();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_AsDate_DateTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_AsDateTime_DateTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_AsPercent_Float();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_AsTime_DateTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_AsTimespan_Timespan();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_Conv_BoolToText();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_Conv_ByteToText();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_Conv_FloatToText();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_Conv_IntToText();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_Conv_NameToText();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_Conv_StringToText();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_Conv_TextToString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_EqualEqual_IgnoreCase_TextText();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_EqualEqual_TextText();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_FindTextInLocalizationTable();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_Format();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_GetEmptyText();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_NotEqual_IgnoreCase_TextText();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_NotEqual_TextText();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_TextIsCultureInvariant();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_TextIsEmpty();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_TextIsTransient();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_TextTrimPreceding();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_TextTrimPrecedingAndTrailing();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_TextTrimTrailing();
	ENGINE_API class UClass* Z_Construct_UClass_UKismetTextLibrary_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UKismetTextLibrary();
	ENGINE_API class UFunction* Z_Construct_UFunction_UVisualLoggerKismetLibrary_LogBox();
	ENGINE_API class UFunction* Z_Construct_UFunction_UVisualLoggerKismetLibrary_LogLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UVisualLoggerKismetLibrary_LogText();
	ENGINE_API class UClass* Z_Construct_UClass_UVisualLoggerKismetLibrary_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UVisualLoggerKismetLibrary();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FEventGraphFastCallPair();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBlueprintDebugData();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPointerToUberGraphFrame();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDebuggingInfoForSingleFunction();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNodeToCodeAssociation();
	ENGINE_API class UClass* Z_Construct_UClass_UBlueprintGeneratedClass_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBlueprintGeneratedClass();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimBlueprintDebugData();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimationFrameSnapshot();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FStateMachineDebugData();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimBlueprintGeneratedClass_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimBlueprintGeneratedClass();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FKShapeElem();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FKConvexElem();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FKBoxElem();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FKSphereElem();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FKSphylElem();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FKAggregateGeom();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EBodyCollisionResponse();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EPhysicsType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ECollisionTraceFlag();
	ENGINE_API class UClass* Z_Construct_UClass_UBodySetup_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBodySetup();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAggregateGeometry2D();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBoxElement2D();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCircleElement2D();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FConvexElement2D();
	ENGINE_API class UClass* Z_Construct_UClass_UBodySetup2D_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBodySetup2D();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FInputBlendPose();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBranchFilter();
	ENGINE_API class UClass* Z_Construct_UClass_UBoneMaskFilter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBoneMaskFilter();
	ENGINE_API class UClass* Z_Construct_UClass_UBookMark_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBookMark();
	ENGINE_API class UClass* Z_Construct_UClass_UBookMark2D_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBookMark2D();
	ENGINE_API class UClass* Z_Construct_UClass_UBreakpoint_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBreakpoint();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBuilderPoly();
	ENGINE_API class UClass* Z_Construct_UClass_UBrushBuilder_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBrushBuilder();
	ENGINE_API class UClass* Z_Construct_UClass_UButtonStyleAsset_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UButtonStyleAsset();
	ENGINE_API class UClass* Z_Construct_UClass_UCameraAnim_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCameraAnim();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCameraAnimInst_SetDuration();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCameraAnimInst_SetScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCameraAnimInst_Stop();
	ENGINE_API class UClass* Z_Construct_UClass_UCameraAnimInst_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCameraAnimInst();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCameraModifier_BlueprintModifyCamera();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCameraModifier_BlueprintModifyPostProcess();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCameraModifier_DisableModifier();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCameraModifier_EnableModifier();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCameraModifier_GetViewTarget();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCameraModifier_IsDisabled();
	ENGINE_API class UClass* Z_Construct_UClass_UCameraModifier_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCameraModifier();
	ENGINE_API class UClass* Z_Construct_UClass_UCameraModifier_CameraShake_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCameraModifier_CameraShake();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FWrappedStringElement();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTextSizingParameters();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCanvasIcon();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCanvas_K2_Deproject();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCanvas_K2_DrawBorder();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCanvas_K2_DrawBox();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCanvas_K2_DrawLine();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCanvas_K2_DrawMaterial();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCanvas_K2_DrawMaterialTriangle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCanvas_K2_DrawPolygon();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCanvas_K2_DrawText();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCanvas_K2_DrawTexture();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCanvas_K2_DrawTriangle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCanvas_K2_Project();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCanvas_K2_StrLen();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCanvas_K2_TextSize();
	ENGINE_API class UClass* Z_Construct_UClass_UCanvas_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCanvas();
	ENGINE_API class UClass* Z_Construct_UClass_UChannel_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UChannel();
	ENGINE_API class UClass* Z_Construct_UClass_UActorChannel_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UActorChannel();
	ENGINE_API class UClass* Z_Construct_UClass_UControlChannel_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UControlChannel();
	ENGINE_API class UClass* Z_Construct_UClass_UVoiceChannel_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UVoiceChannel();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_BugIt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_BugItGo();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_BugItStringCreator();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_ChangeSize();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_DamageTarget();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_DebugCapsuleSweep();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_DebugCapsuleSweepCapture();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_DebugCapsuleSweepChannel();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_DebugCapsuleSweepClear();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_DebugCapsuleSweepComplex();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_DebugCapsuleSweepPawn();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_DebugCapsuleSweepSize();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_DestroyAll();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_DestroyAllPawnsExceptTarget();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_DestroyPawns();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_DestroyTarget();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_DumpOnlineSessionState();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_DumpPartyState();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_DumpVoiceMutingState();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_FlushLog();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_Fly();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_FontAtlasVisualizer();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_FreezeFrame();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_Ghost();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_God();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_InvertMouse();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_LogLoc();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_OnlyLoadLevel();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_PlayersOnly();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_RebuildNavigation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_ServerToggleAILogging();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_SetMouseSensitivityToDefault();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_SetNavDrawDistance();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_SetWorldOrigin();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_Slomo();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_StreamLevelIn();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_StreamLevelOut();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_Summon();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_Teleport();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_TestCollisionDistance();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_TextureAtlasVisualizer();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_ToggleAILogging();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_ToggleDebugCamera();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_ViewActor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_ViewClass();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_ViewPlayer();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_ViewSelf();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_Walk();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_WidgetReflector();
	ENGINE_API class UClass* Z_Construct_UClass_UCheatManager_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCheatManager();
	ENGINE_API class UClass* Z_Construct_UClass_UCheckBoxStyleAsset_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCheckBoxStyleAsset();
	ENGINE_API class UClass* Z_Construct_UClass_UCommandlet_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCommandlet();
	ENGINE_API class UClass* Z_Construct_UClass_UPluginCommandlet_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPluginCommandlet();
	ENGINE_API class UClass* Z_Construct_UClass_USmokeTestCommandlet_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USmokeTestCommandlet();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAutoCompleteNode();
	ENGINE_API class UClass* Z_Construct_UClass_UConsole_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UConsole();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRuntimeCurveLinearColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCurveLinearColor_GetLinearColorValue();
	ENGINE_API class UClass* Z_Construct_UClass_UCurveLinearColor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCurveLinearColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCurveVector_GetVectorValue();
	ENGINE_API class UClass* Z_Construct_UClass_UCurveVector_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCurveVector();
	ENGINE_API class UClass* Z_Construct_UClass_UDEPRECATED_CurveEdPresetCurve_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDEPRECATED_CurveEdPresetCurve();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCurveTableRowHandle();
	ENGINE_API class UClass* Z_Construct_UClass_UCurveTable_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCurveTable();
	ENGINE_API class UClass* Z_Construct_UClass_UDataAsset_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDataAsset();
	ENGINE_API class UClass* Z_Construct_UClass_UTireType_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UTireType();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDestructibleChunkParameters();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FFractureMaterial();
	ENGINE_API class UClass* Z_Construct_UClass_UDestructibleFractureSettings_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDestructibleFractureSettings();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimationSettings_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimationSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAudioQualitySettings();
	ENGINE_API class UClass* Z_Construct_UClass_UAudioSettings_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAudioSettings();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EUIScalingRule();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ERenderFocusRule();
	ENGINE_API class UClass* Z_Construct_UClass_UUserInterfaceSettings_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UUserInterfaceSettings();
	ENGINE_API class UClass* Z_Construct_UClass_UStreamingSettings_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UStreamingSettings();
	ENGINE_API class UClass* Z_Construct_UClass_UGarbageCollectionSettings_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UGarbageCollectionSettings();
	ENGINE_API class UClass* Z_Construct_UClass_UNetworkSettings_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNetworkSettings();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESettingsLockedAxis();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESettingsDOF();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EFrictionCombineMode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPhysicalSurfaceName();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicsSettings_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicsSettings();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAntiAliasingMethodUI();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EEarlyZPass();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ECustomDepthStencil();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ECompositingSampleCount();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EClearSceneOptions();
	ENGINE_API class UClass* Z_Construct_UClass_URendererSettings_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_URendererSettings();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETextureSamplerFilter();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETexturePowerOfTwoSetting();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_TextureMipGenSettings();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_TextureGroup();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTextureLODGroup();
	ENGINE_API class UClass* Z_Construct_UClass_UTextureLODSettings_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UTextureLODSettings();
	ENGINE_API class UClass* Z_Construct_UClass_UDeviceProfile_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDeviceProfile();
	ENGINE_API class UClass* Z_Construct_UClass_UDeviceProfileManager_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDeviceProfileManager();
	ENGINE_API class UClass* Z_Construct_UClass_UDialogueVoice_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDialogueVoice();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDialogueContextMapping();
	ENGINE_API class UClass* Z_Construct_UClass_UDialogueWave_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDialogueWave();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_DistributionParamMode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRawDistribution();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDistributionLookupTable();
	ENGINE_API class UClass* Z_Construct_UClass_UDistribution_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDistribution();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRawDistributionFloat();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FFloatDistribution();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionFloat_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionFloat();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionFloatConstant_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionFloatConstant();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionFloatParameterBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionFloatParameterBase();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionFloatParticleParameter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionFloatParticleParameter();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionFloatConstantCurve_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionFloatConstantCurve();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionFloatUniform_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionFloatUniform();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionFloatUniformCurve_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionFloatUniformCurve();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EDistributionVectorMirrorFlags();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EDistributionVectorLockFlags();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRawDistributionVector();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FVector4Distribution();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FVectorDistribution();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionVector_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionVector();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionVectorConstant_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionVectorConstant();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionVectorParameterBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionVectorParameterBase();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionVectorParticleParameter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionVectorParticleParameter();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionVectorConstantCurve_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionVectorConstantCurve();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionVectorUniform_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionVectorUniform();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionVectorUniformCurve_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionVectorUniformCurve();
	ENGINE_API class UClass* Z_Construct_UClass_UDPICustomScalingRule_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDPICustomScalingRule();
	ENGINE_API class UClass* Z_Construct_UClass_UDynamicBlueprintBinding_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDynamicBlueprintBinding();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBlueprintComponentDelegateBinding();
	ENGINE_API class UClass* Z_Construct_UClass_UComponentDelegateBinding_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UComponentDelegateBinding();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBlueprintInputDelegateBinding();
	ENGINE_API class UClass* Z_Construct_UClass_UInputDelegateBinding_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInputDelegateBinding();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBlueprintInputActionDelegateBinding();
	ENGINE_API class UClass* Z_Construct_UClass_UInputActionDelegateBinding_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInputActionDelegateBinding();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBlueprintInputAxisDelegateBinding();
	ENGINE_API class UClass* Z_Construct_UClass_UInputAxisDelegateBinding_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInputAxisDelegateBinding();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBlueprintInputAxisKeyDelegateBinding();
	ENGINE_API class UClass* Z_Construct_UClass_UInputAxisKeyDelegateBinding_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInputAxisKeyDelegateBinding();
	ENGINE_API class UClass* Z_Construct_UClass_UInputVectorAxisDelegateBinding_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInputVectorAxisDelegateBinding();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBlueprintInputKeyDelegateBinding();
	ENGINE_API class UClass* Z_Construct_UClass_UInputKeyDelegateBinding_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInputKeyDelegateBinding();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBlueprintInputTouchDelegateBinding();
	ENGINE_API class UClass* Z_Construct_UClass_UInputTouchDelegateBinding_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInputTouchDelegateBinding();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FGraphReference();
	ENGINE_API class UClass* Z_Construct_UClass_UEdGraph_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UEdGraph();
	ENGINE_API class UClass* Z_Construct_UClass_UEdGraphNode_Documentation_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UEdGraphNode_Documentation();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ECanCreateConnectionResponse();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EGraphType();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FEdGraphSchemaAction_NewNode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FEdGraphSchemaAction();
	ENGINE_API class UClass* Z_Construct_UClass_UEdGraphSchema_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UEdGraphSchema();
	ENGINE_API class UClass* Z_Construct_UClass_UImportantToggleSettingInterface_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UImportantToggleSettingInterface();
	ENGINE_API class UClass* Z_Construct_UClass_UEndUserSettings_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UEndUserSettings();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EConsoleType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETransitionType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EFullyLoadPackageType();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPluginRedirect();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FStructRedirect();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FClassRedirect();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FGameNameRedirect();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FScreenMessageString();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDropNoteInfo();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FStatColorMapping();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FStatColorMapEntry();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FWorldContext();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNamedNetDriver();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNetDriverDefinition();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FLevelStreamingStatus();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FFullyLoadedPackagesInfo();
	ENGINE_API class UClass* Z_Construct_UClass_UEngine_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UEngine();
	ENGINE_API class UClass* Z_Construct_UClass_UGameEngine_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UGameEngine();
	ENGINE_API class UClass* Z_Construct_UClass_UExporter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UExporter();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EFontImportCharacterSet();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FFontImportOptionsData();
	ENGINE_API class UClass* Z_Construct_UClass_UFontImportOptions_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UFontImportOptions();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EFontCacheType();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FFontCharacter();
	ENGINE_API class UClass* Z_Construct_UClass_UFont_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UFont();
	ENGINE_API class UClass* Z_Construct_UClass_UGameUserSettings_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UGameUserSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FActiveHapticFeedbackEffect();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FHapticFeedbackDetails();
	ENGINE_API class UClass* Z_Construct_UClass_UHapticFeedbackEffect_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UHapticFeedbackEffect();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FComponentOverrideRecord();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FComponentKey();
	ENGINE_API class UClass* Z_Construct_UClass_UInheritableComponentHandler_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInheritableComponentHandler();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FInputAxisKeyMapping();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FInputActionKeyMapping();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FInputAxisConfigEntry();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FInputAxisProperties();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FKeyBind();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPlayerInput_ClearSmoothing();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPlayerInput_InvertAxis();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPlayerInput_InvertAxisKey();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPlayerInput_SetBind();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPlayerInput_SetMouseSensitivity();
	ENGINE_API class UClass* Z_Construct_UClass_UPlayerInput_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPlayerInput();
	ENGINE_API class UClass* Z_Construct_UClass_UInputSettings_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInputSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCurveEdTab();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCurveEdEntry();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpCurveEdSetup_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpCurveEdSetup();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpData_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpData();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpFilter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpFilter();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpFilter_Classes_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpFilter_Classes();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpFilter_Custom_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpFilter_Custom();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FInterpEdSelKey();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpGroup_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpGroup();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCameraPreviewInfo();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpGroupCamera_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpGroupCamera();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpGroupDirector_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpGroupDirector();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpGroupInst_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpGroupInst();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpGroupInstCamera_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpGroupInstCamera();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpGroupInstDirector_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpGroupInstDirector();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETrackActiveCondition();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSubTrackGroup();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSupportedSubTrackInfo();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrack_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrack();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBoolTrackKey();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackBoolProp_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackBoolProp();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDirectorTrackCut();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackDirector_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackDirector();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FEventTrackKey();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackEvent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackEvent();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackFloatBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackFloatBase();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimControlTrackKey();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackAnimControl_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackAnimControl();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackFade_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackFade();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackFloatAnimBPParam_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackFloatAnimBPParam();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackFloatMaterialParam_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackFloatMaterialParam();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackFloatParticleParam_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackFloatParticleParam();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackFloatProp_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackFloatProp();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EInterpTrackMoveRotMode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FInterpLookupTrack();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FInterpLookupPoint();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackMove_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackMove();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EInterpMoveAxis();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackMoveAxis_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackMoveAxis();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackSlomo_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackSlomo();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackLinearColorBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackLinearColorBase();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackLinearColorProp_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackLinearColorProp();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FParticleReplayTrackKey();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackParticleReplay_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackParticleReplay();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETrackToggleAction();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FToggleTrackKey();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackToggle_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackToggle();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackVectorBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackVectorBase();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackAudioMaster_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackAudioMaster();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackColorProp_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackColorProp();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackColorScale_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackColorScale();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSoundTrackKey();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackSound_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackSound();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackVectorMaterialParam_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackVectorMaterialParam();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackVectorProp_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackVectorProp();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EVisibilityTrackCondition();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EVisibilityTrackAction();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FVisibilityTrackKey();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackVisibility_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackVisibility();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInst_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInst();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstAnimControl_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstAnimControl();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstAudioMaster_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstAudioMaster();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstColorScale_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstColorScale();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstDirector_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstDirector();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstEvent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstEvent();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstFade_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstFade();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstFloatAnimBPParam_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstFloatAnimBPParam();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstFloatMaterialParam_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstFloatMaterialParam();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstFloatParticleParam_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstFloatParticleParam();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstMove_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstMove();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstParticleReplay_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstParticleReplay();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstProperty_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstProperty();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstBoolProp_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstBoolProp();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstColorProp_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstColorProp();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstFloatProp_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstFloatProp();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstLinearColorProp_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstLinearColorProp();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstVectorProp_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstVectorProp();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstSlomo_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstSlomo();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstSound_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstSound();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstToggle_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstToggle();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstVectorMaterialParam_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstVectorMaterialParam();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstVisibility_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstVisibility();
	ENGINE_API class UClass* Z_Construct_UClass_UIntSerialization_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UIntSerialization();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FLayerActorStats();
	ENGINE_API class UClass* Z_Construct_UClass_ULayer_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ULayer();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_LevelStreamingVisibilityStatus__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_LevelStreamingLoadedStatus__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULevelStreaming_CreateInstance();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULevelStreaming_GetLevelScriptActor();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULevelStreaming_IsLevelLoaded();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULevelStreaming_IsLevelVisible();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULevelStreaming_IsStreamingStatePending();
	ENGINE_API class UClass* Z_Construct_UClass_ULevelStreaming_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ULevelStreaming();
	ENGINE_API class UClass* Z_Construct_UClass_ULevelStreamingAlwaysLoaded_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ULevelStreamingAlwaysLoaded();
	ENGINE_API class UClass* Z_Construct_UClass_ULevelStreamingKismet_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ULevelStreamingKismet();
	ENGINE_API class UClass* Z_Construct_UClass_ULevelStreamingPersistent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ULevelStreamingPersistent();
	ENGINE_API class UClass* Z_Construct_UClass_ULightmappedSurfaceCollection_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ULightmappedSurfaceCollection();
	ENGINE_API class UClass* Z_Construct_UClass_ULightmassPrimitiveSettingsObject_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ULightmassPrimitiveSettingsObject();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FClientReceiveData();
	ENGINE_API class UClass* Z_Construct_UClass_ULocalMessage_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ULocalMessage();
	ENGINE_API class UClass* Z_Construct_UClass_UEngineMessage_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UEngineMessage();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FExpressionOutput();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMaterialAttributesInput();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FExpressionInput();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpression_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpression();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionAbs_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionAbs();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionActorPositionWS_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionActorPositionWS();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionAdd_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionAdd();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionAppendVector_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionAppendVector();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionAtmosphericFogColor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionAtmosphericFogColor();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionBlackBody_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionBlackBody();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionBreakMaterialAttributes_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionBreakMaterialAttributes();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionBumpOffset_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionBumpOffset();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionCameraPositionWS_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionCameraPositionWS();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionCameraVectorWS_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionCameraVectorWS();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionCeil_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionCeil();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EClampMode();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionClamp_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionClamp();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionCollectionParameter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionCollectionParameter();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionComment_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionComment();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionComponentMask_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionComponentMask();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionConstant_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionConstant();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionConstant2Vector_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionConstant2Vector();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionConstant3Vector_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionConstant3Vector();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionConstant4Vector_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionConstant4Vector();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionConstantBiasScale_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionConstantBiasScale();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionCosine_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionCosine();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionCrossProduct_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionCrossProduct();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ECustomMaterialOutputType();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCustomInput();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionCustom_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionCustom();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionCustomOutput_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionCustomOutput();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDDX_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDDX();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDDY_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDDY();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDecalMipmapLevel_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDecalMipmapLevel();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDepthFade_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDepthFade();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EDepthOfFieldFunctionValue();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDepthOfFieldFunction_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDepthOfFieldFunction();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDeriveNormalZ_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDeriveNormalZ();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDesaturation_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDesaturation();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDistance_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDistance();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDistanceCullFade_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDistanceCullFade();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDistanceFieldGradient_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDistanceFieldGradient();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDistanceToNearestSurface_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDistanceToNearestSurface();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDivide_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDivide();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDotProduct_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDotProduct();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDynamicParameter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDynamicParameter();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionEyeAdaptation_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionEyeAdaptation();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionFeatureLevelSwitch_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionFeatureLevelSwitch();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionFloor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionFloor();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionFmod_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionFmod();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionFontSample_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionFontSample();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionFontSampleParameter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionFontSampleParameter();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionFrac_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionFrac();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionFresnel_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionFresnel();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EFunctionInputType();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionFunctionInput_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionFunctionInput();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionFunctionOutput_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionFunctionOutput();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionGIReplace_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionGIReplace();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionIf_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionIf();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionLightmapUVs_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionLightmapUVs();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionLightmassReplace_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionLightmassReplace();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionLightVector_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionLightVector();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionLinearInterpolate_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionLinearInterpolate();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionLogarithm2_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionLogarithm2();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionMakeMaterialAttributes_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionMakeMaterialAttributes();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FFunctionExpressionOutput();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FFunctionExpressionInput();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionMaterialFunctionCall_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionMaterialFunctionCall();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionMax_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionMax();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionMin_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionMin();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionMultiply_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionMultiply();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ENoiseFunction();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionNoise_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionNoise();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionNormalize_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionNormalize();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionObjectBounds_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionObjectBounds();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionObjectOrientation_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionObjectOrientation();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionObjectPositionWS_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionObjectPositionWS();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionObjectRadius_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionObjectRadius();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionOneMinus_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionOneMinus();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionPanner_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionPanner();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParameter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParameter();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionScalarParameter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionScalarParameter();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionStaticBoolParameter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionStaticBoolParameter();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionStaticSwitchParameter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionStaticSwitchParameter();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionStaticComponentMaskParameter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionStaticComponentMaskParameter();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionVectorParameter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionVectorParameter();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticleColor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticleColor();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticleDirection_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticleDirection();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticleMacroUV_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticleMacroUV();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticleMotionBlurFade_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticleMotionBlurFade();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticlePositionWS_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticlePositionWS();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticleRadius_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticleRadius();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticleRelativeTime_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticleRelativeTime();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticleSize_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticleSize();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticleSpeed_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticleSpeed();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionPerInstanceFadeAmount_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionPerInstanceFadeAmount();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionPerInstanceRandom_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionPerInstanceRandom();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionPixelDepth_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionPixelDepth();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionPixelNormalWS_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionPixelNormalWS();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionPower_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionPower();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionPrecomputedAOMask_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionPrecomputedAOMask();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionQualitySwitch_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionQualitySwitch();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionReflectionVectorWS_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionReflectionVectorWS();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionRotateAboutAxis_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionRotateAboutAxis();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionRotator_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionRotator();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMaterialSceneAttributeInputMode();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSceneColor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSceneColor();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSceneDepth_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSceneDepth();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSceneTexelSize_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSceneTexelSize();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESceneTextureId();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSceneTexture_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSceneTexture();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionScreenPosition_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionScreenPosition();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSine_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSine();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESpeedTreeLODType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESpeedTreeWindType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESpeedTreeGeometryType();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSpeedTree_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSpeedTree();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSphereMask_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSphereMask();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSphericalParticleOpacity_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSphericalParticleOpacity();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSquareRoot_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSquareRoot();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionStaticBool_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionStaticBool();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionStaticSwitch_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionStaticSwitch();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSubtract_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSubtract();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTextureBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTextureBase();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTextureObject_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTextureObject();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETextureMipValueMode();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTextureSample_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTextureSample();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticleSubUV_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticleSubUV();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTextureSampleParameter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTextureSampleParameter();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTextureObjectParameter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTextureObjectParameter();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTextureSampleParameter2D_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTextureSampleParameter2D();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETextureColorChannel();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionAntialiasedTextureMask_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionAntialiasedTextureMask();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTextureSampleParameterSubUV_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTextureSampleParameterSubUV();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTextureSampleParameterCube_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTextureSampleParameterCube();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTextureCoordinate_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTextureCoordinate();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTime_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTime();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMaterialVectorCoordTransform();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMaterialVectorCoordTransformSource();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTransform_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTransform();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMaterialPositionTransformSource();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTransformPosition_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTransformPosition();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTwoSidedSign_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTwoSidedSign();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionVertexColor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionVertexColor();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionVertexNormalWS_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionVertexNormalWS();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMaterialExposedViewProperty();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionViewProperty_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionViewProperty();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionViewSize_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionViewSize();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EWorldPositionIncludedOffsets();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionWorldPosition_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionWorldPosition();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialFunction_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialFunction();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMaterialDecalResponse();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMaterialDomain();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EDecalBlendMode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMaterialParameterCollectionInfo();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMaterialFunctionInfo();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FVector2MaterialInput();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FVectorMaterialInput();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FScalarMaterialInput();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FColorMaterialInput();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMaterialInput();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterial_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterial();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMaterialInstanceBasePropertyOverrides();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FVectorParameterValue();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTextureParameterValue();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FScalarParameterValue();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FFontParameterValue();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialInstance_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialInstance();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialInstanceConstant_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialInstanceConstant();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMaterialInstanceDynamic_CopyParameterOverrides();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMaterialInstanceDynamic_K2_CopyMaterialInstanceParameters();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMaterialInstanceDynamic_K2_GetScalarParameterValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMaterialInstanceDynamic_K2_GetTextureParameterValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMaterialInstanceDynamic_K2_GetVectorParameterValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMaterialInstanceDynamic_K2_InterpolateMaterialInstanceParams();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMaterialInstanceDynamic_SetScalarParameterValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMaterialInstanceDynamic_SetTextureParameterValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMaterialInstanceDynamic_SetVectorParameterValue();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialInstanceDynamic_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialInstanceDynamic();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCollectionVectorParameter();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCollectionScalarParameter();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCollectionParameterBase();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialParameterCollection_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialParameterCollection();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialParameterCollectionInstance_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialParameterCollectionInstance();
	ENGINE_API class UClass* Z_Construct_UClass_UMatineeInterface_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMatineeInterface();
	ENGINE_API class UClass* Z_Construct_UClass_UNavArea_Default_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavArea_Default();
	ENGINE_API class UClass* Z_Construct_UClass_UNavArea_LowHeight_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavArea_LowHeight();
	ENGINE_API class UClass* Z_Construct_UClass_UNavArea_Null_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavArea_Null();
	ENGINE_API class UClass* Z_Construct_UClass_UNavArea_Obstacle_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavArea_Obstacle();
	ENGINE_API class UClass* Z_Construct_UClass_UNavAreaMeta_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavAreaMeta();
	ENGINE_API class UClass* Z_Construct_UClass_UNavAreaMeta_SwitchByAgent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavAreaMeta_SwitchByAgent();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNavCollisionBox();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNavCollisionCylinder();
	ENGINE_API class UClass* Z_Construct_UClass_UNavCollision_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavCollision();
	ENGINE_API class UClass* Z_Construct_UClass_UNavigationDataChunk_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavigationDataChunk();
	ENGINE_API class UClass* Z_Construct_UClass_URecastNavMeshDataChunk_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_URecastNavMeshDataChunk();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_OnNavigationPathUpdated__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationPath_EnableDebugDrawing();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationPath_EnableRecalculationOnInvalidation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationPath_GetDebugString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationPath_GetPathCost();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationPath_GetPathLength();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationPath_IsPartial();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationPath_IsStringPulled();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationPath_IsValid();
	ENGINE_API class UClass* Z_Construct_UClass_UNavigationPath_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavigationPath();
	ENGINE_API class UClass* Z_Construct_UClass_UNavigationPathGenerator_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavigationPathGenerator();
	ENGINE_API class UClass* Z_Construct_UClass_URecastFilter_UseDefaultArea_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_URecastFilter_UseDefaultArea();
	ENGINE_API class UClass* Z_Construct_UClass_UNavLinkTrivial_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavLinkTrivial();
	ENGINE_API class UClass* Z_Construct_UClass_UNavNodeInterface_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavNodeInterface();
	ENGINE_API class UClass* Z_Construct_UClass_UNetDriver_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNetDriver();
	ENGINE_API class UClass* Z_Construct_UClass_UDemoNetDriver_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDemoNetDriver();
	ENGINE_API class UClass* Z_Construct_UClass_UNiagaraEffectRendererProperties_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNiagaraEffectRendererProperties();
	ENGINE_API class UClass* Z_Construct_UClass_UNiagaraRibbonRendererProperties_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNiagaraRibbonRendererProperties();
	ENGINE_API class UClass* Z_Construct_UClass_UNiagaraSpriteRendererProperties_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNiagaraSpriteRendererProperties();
	ENGINE_API class UClass* Z_Construct_UClass_UObjectLibrary_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UObjectLibrary();
	ENGINE_API class UClass* Z_Construct_UClass_UObjectReferencer_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UObjectReferencer();
	ENGINE_API class UClass* Z_Construct_UClass_UOnlineSession_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UOnlineSession();
	ENGINE_API class UClass* Z_Construct_UClass_UPackageMapClient_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPackageMapClient();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EEmitterRenderMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EParticleSubUVInterpMethod();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EParticleBurstMethod();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FParticleBurst();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleEmitter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleEmitter();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EParticleScreenAlignment();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleSpriteEmitter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleSpriteEmitter();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleLODLevel_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleLODLevel();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EParticleSourceSelectionMethod();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EModuleType();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FParticleRandomSeedInfo();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FParticleCurvePair();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModule_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModule();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAccelerationBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAccelerationBase();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAcceleration_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAcceleration();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAccelerationConstant_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAccelerationConstant();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAccelerationDrag_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAccelerationDrag();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAccelerationDragScaleOverLife_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAccelerationDragScaleOverLife();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAccelerationOverLifetime_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAccelerationOverLifetime();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAttractorBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAttractorBase();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAttractorLine_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAttractorLine();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAttractorParticleSelectionMethod();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAttractorParticle_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAttractorParticle();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAttractorPoint_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAttractorPoint();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAttractorPointGravity_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAttractorPointGravity();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_Beam2SourceTargetTangentMethod();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_Beam2SourceTargetMethod();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleBeamBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleBeamBase();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_BeamModifierType();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBeamModifierOptions();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleBeamModifier_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleBeamModifier();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleBeamNoise_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleBeamNoise();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleBeamSource_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleBeamSource();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleBeamTarget_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleBeamTarget();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleCameraBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleCameraBase();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EParticleCameraOffsetUpdateMethod();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleCameraOffset_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleCameraOffset();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EParticleCollisionComplete();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleCollisionBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleCollisionBase();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleCollision_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleCollision();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EParticleCollisionResponse();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleCollisionGPU_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleCollisionGPU();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleColorBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleColorBase();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleColor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleColor();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleColor_Seeded_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleColor_Seeded();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleColorOverLife_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleColorOverLife();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleColorScaleOverLife_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleColorScaleOverLife();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleEventBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleEventBase();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FParticleEvent_GenerateInfo();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleEventGenerator_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleEventGenerator();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleEventReceiverBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleEventReceiverBase();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleEventReceiverKillParticles_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleEventReceiverKillParticles();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleEventReceiverSpawn_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleEventReceiverSpawn();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleKillBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleKillBase();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleKillBox_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleKillBox();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleKillHeight_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleKillHeight();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLifetimeBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLifetimeBase();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLifetime_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLifetime();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLifetime_Seeded_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLifetime_Seeded();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLightBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLightBase();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLight_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLight();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLight_Seeded_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLight_Seeded();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationBase();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocation_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocation();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocation_Seeded_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocation_Seeded();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationWorldOffset_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationWorldOffset();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationWorldOffset_Seeded_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationWorldOffset_Seeded();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ELocationBoneSocketSelectionMethod();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ELocationBoneSocketSource();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FLocationBoneSocketInfo();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationBoneSocket_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationBoneSocket();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationDirect_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationDirect();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ELocationEmitterSelectionMethod();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationEmitter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationEmitter();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationEmitterDirect_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationEmitterDirect();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationPrimitiveBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationPrimitiveBase();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_CylinderHeightAxis();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationPrimitiveCylinder_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationPrimitiveCylinder();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationPrimitiveCylinder_Seeded_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationPrimitiveCylinder_Seeded();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationPrimitiveSphere_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationPrimitiveSphere();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationPrimitiveSphere_Seeded_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationPrimitiveSphere_Seeded();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationPrimitiveTriangle_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationPrimitiveTriangle();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ELocationSkelVertSurfaceSource();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationSkelVertSurface_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationSkelVertSurface();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModulePivotOffset_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModulePivotOffset();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSourceMovement_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSourceMovement();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleMaterialBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleMaterialBase();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleMeshMaterial_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleMeshMaterial();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleOrbitBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleOrbitBase();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EOrbitChainMode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FOrbitOptions();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleOrbit_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleOrbit();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleOrientationBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleOrientationBase();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EParticleAxisLock();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleOrientationAxisLock_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleOrientationAxisLock();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleParameterBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleParameterBase();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EEmitterDynamicParameterValue();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FEmitterDynamicParameter();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleParameterDynamic_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleParameterDynamic();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleParameterDynamic_Seeded_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleParameterDynamic_Seeded();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EEmitterNormalsMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EParticleSortMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EParticleUVFlipMode();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleRequired_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleRequired();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleRotationBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleRotationBase();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleMeshRotation_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleMeshRotation();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleMeshRotation_Seeded_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleMeshRotation_Seeded();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleRotation_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleRotation();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleRotation_Seeded_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleRotation_Seeded();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleRotationOverLifetime_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleRotationOverLifetime();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleRotationRateBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleRotationRateBase();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleMeshRotationRate_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleMeshRotationRate();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleRotationRate_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleRotationRate();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleMeshRotationRate_Seeded_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleMeshRotationRate_Seeded();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleMeshRotationRateMultiplyLife_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleMeshRotationRateMultiplyLife();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleMeshRotationRateOverLife_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleMeshRotationRateOverLife();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleRotationRate_Seeded_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleRotationRate_Seeded();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleRotationRateMultiplyLife_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleRotationRateMultiplyLife();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSizeBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSizeBase();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSize_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSize();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSize_Seeded_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSize_Seeded();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSizeMultiplyLife_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSizeMultiplyLife();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSizeScale_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSizeScale();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSizeScaleBySpeed_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSizeScaleBySpeed();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSpawnBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSpawnBase();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSpawn_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSpawn();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSpawnPerUnit_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSpawnPerUnit();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSubUVBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSubUVBase();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSubUV_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSubUV();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSubUVMovie_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSubUVMovie();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleTrailBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleTrailBase();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETrail2SourceMethod();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleTrailSource_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleTrailSource();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleTypeDataBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleTypeDataBase();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleTypeDataAnimTrail_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleTypeDataAnimTrail();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EBeamTaperMethod();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EBeam2Method();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBeamTargetData();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleTypeDataBeam2_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleTypeDataBeam2();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FGPUSpriteResourceData();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FGPUSpriteEmitterInfo();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FGPUSpriteLocalVectorFieldInfo();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleTypeDataGpu_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleTypeDataGpu();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMeshCameraFacingOptions();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMeshCameraFacingUpAxis();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMeshScreenAlignment();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleTypeDataMesh_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleTypeDataMesh();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETrailsRenderAxisOption();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleTypeDataRibbon_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleTypeDataRibbon();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVectorFieldBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVectorFieldBase();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVectorFieldGlobal_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVectorFieldGlobal();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVectorFieldLocal_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVectorFieldLocal();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVectorFieldRotation_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVectorFieldRotation();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVectorFieldRotationRate_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVectorFieldRotationRate();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVectorFieldScale_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVectorFieldScale();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVectorFieldScaleOverLife_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVectorFieldScaleOverLife();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVelocityBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVelocityBase();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVelocity_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVelocity();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVelocity_Seeded_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVelocity_Seeded();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVelocityCone_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVelocityCone();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVelocityInheritParent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVelocityInheritParent();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVelocityOverLifetime_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVelocityOverLifetime();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleEventSendToGame_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleEventSendToGame();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FParticleSystemReplayFrame();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FParticleEmitterReplayFrame();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleSystemReplay_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleSystemReplay();
	ENGINE_API class UClass* Z_Construct_UClass_UDemoPendingNetGame_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDemoPendingNetGame();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTireFrictionScalePair();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicalMaterial_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicalMaterial();
	ENGINE_API class UClass* Z_Construct_UClass_UDEPRECATED_PhysicalMaterialPropertyBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDEPRECATED_PhysicalMaterialPropertyBase();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicsAsset_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicsAsset();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicsCollisionHandler_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicsCollisionHandler();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicsConstraintTemplate_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicsConstraintTemplate();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicsSerializer_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicsSerializer();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_PlatformInterfaceDelegate__DelegateSignature();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EPlatformInterfaceDataType();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDelegateArray();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPlatformInterfaceDelegateResult();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPlatformInterfaceData();
	ENGINE_API class UClass* Z_Construct_UClass_UPlatformInterfaceBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPlatformInterfaceBase();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ECloudStorageDelegate();
	ENGINE_API class UClass* Z_Construct_UClass_UCloudStorageBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCloudStorageBase();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_OnUserClosedAdvertisement__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_OnUserClickedBanner__DelegateSignature();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAdManagerDelegate();
	ENGINE_API class UClass* Z_Construct_UClass_UInGameAdManager_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInGameAdManager();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMicroTransactionResult();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMicroTransactionDelegate();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPurchaseInfo();
	ENGINE_API class UClass* Z_Construct_UClass_UMicroTransactionBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMicroTransactionBase();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETwitterIntegrationDelegate();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETwitterRequestMethod();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTwitterIntegrationBase_AuthorizeAccounts();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTwitterIntegrationBase_CanShowTweetUI();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTwitterIntegrationBase_GetAccountName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTwitterIntegrationBase_GetNumAccounts();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTwitterIntegrationBase_Init();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTwitterIntegrationBase_ShowTweetUI();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTwitterIntegrationBase_TwitterRequest();
	ENGINE_API class UClass* Z_Construct_UClass_UTwitterIntegrationBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UTwitterIntegrationBase();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPlatformInterfaceWebResponse_GetHeader();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPlatformInterfaceWebResponse_GetHeaderValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPlatformInterfaceWebResponse_GetNumHeaders();
	ENGINE_API class UClass* Z_Construct_UClass_UPlatformInterfaceWebResponse_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPlatformInterfaceWebResponse();
	ENGINE_API class UClass* Z_Construct_UClass_UPlayer_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPlayer();
	ENGINE_API class UClass* Z_Construct_UClass_ULocalPlayer_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ULocalPlayer();
	ENGINE_API class UClass* Z_Construct_UClass_UNetConnection_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNetConnection();
	ENGINE_API class UClass* Z_Construct_UClass_UChildConnection_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UChildConnection();
	ENGINE_API class UClass* Z_Construct_UClass_UDemoNetConnection_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDemoNetConnection();
	ENGINE_API class UClass* Z_Construct_UClass_UPolys_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPolys();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EReporterLineStyle();
	ENGINE_API class UClass* Z_Construct_UClass_UReporterBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UReporterBase();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ELegendPosition();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EGraphDataStyle();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EGraphAxisStyle();
	ENGINE_API class UClass* Z_Construct_UClass_UReporterGraph_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UReporterGraph();
	ENGINE_API class UClass* Z_Construct_UClass_UReverbEffect_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UReverbEffect();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EConstraintTransform();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EControlConstraint();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTransformBase();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTransformBaseConstraint();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRigTransformConstraint();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNode();
	ENGINE_API class UClass* Z_Construct_UClass_URig_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_URig();
	ENGINE_API class UClass* Z_Construct_UClass_USaveGame_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USaveGame();
	ENGINE_API class UClass* Z_Construct_UClass_UScriptViewportClient_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UScriptViewportClient();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDebugDisplayProperty();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameViewportClient_SetConsoleTarget();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameViewportClient_ShowTitleSafeArea();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameViewportClient_SSSwapControllers();
	ENGINE_API class UClass* Z_Construct_UClass_UGameViewportClient_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UGameViewportClient();
	ENGINE_API class UClass* Z_Construct_UClass_USimpleConstructionScript_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USimpleConstructionScript();
	ENGINE_API class UClass* Z_Construct_UClass_USCS_Node_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USCS_Node();
	ENGINE_API class UClass* Z_Construct_UClass_USelection_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USelection();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EImpactDamageOverride();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDestructibleParameters();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDestructibleSpecialHierarchyDepths();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDestructibleAdvancedParameters();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDestructibleDebrisParameters();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDestructibleDamageParameters();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDestructibleParametersFlag();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDestructibleDepthParameters();
	ENGINE_API class UClass* Z_Construct_UClass_UDestructibleMesh_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDestructibleMesh();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshSocket_GetSocketLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshSocket_InitializeSocketFromLocation();
	ENGINE_API class UClass* Z_Construct_UClass_USkeletalMeshSocket_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USkeletalMeshSocket();
	ENGINE_API class UClass* Z_Construct_UClass_USlateBrushAsset_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USlateBrushAsset();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMaxConcurrentResolutionRule();
	ENGINE_API class UClass* Z_Construct_UClass_USoundBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundBase();
	ENGINE_API class UClass* Z_Construct_UClass_UDialogueSoundWaveProxy_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDialogueSoundWaveProxy();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSoundNodeEditorData();
	ENGINE_API class UClass* Z_Construct_UClass_USoundCue_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundCue();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESoundGroup();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSoundGroup();
	ENGINE_API class UClass* Z_Construct_UClass_USoundGroups_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundGroups();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EDecompressionType();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FStreamedAudioPlatformData();
	ENGINE_API class UClass* Z_Construct_UClass_USoundWave_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundWave();
	ENGINE_API class UClass* Z_Construct_UClass_USoundWaveProcedural_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundWaveProcedural();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAudioOutputTarget();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPassiveSoundMixModifier();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSoundClassProperties();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSoundClassEditorData();
	ENGINE_API class UClass* Z_Construct_UClass_USoundClass_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundClass();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSoundClassAdjuster();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAudioEQEffect();
	ENGINE_API class UClass* Z_Construct_UClass_USoundMix_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundMix();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNode_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNode();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeAssetReferencer_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeAssetReferencer();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeWavePlayer_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeWavePlayer();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeAttenuation_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeAttenuation();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeBranch_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeBranch();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeConcatenator_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeConcatenator();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeDelay_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeDelay();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeDialoguePlayer_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeDialoguePlayer();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDistanceDatum();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeDistanceCrossFade_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeDistanceCrossFade();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeParamCrossFade_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeParamCrossFade();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeDoppler_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeDoppler();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeEnveloper_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeEnveloper();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeGroupControl_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeGroupControl();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeLooping_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeLooping();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeMature_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeMature();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeMixer_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeMixer();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeModulator_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeModulator();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ModulationParamMode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FModulatorContinuousParams();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeModulatorContinuous_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeModulatorContinuous();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeOscillator_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeOscillator();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeQualityLevel_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeQualityLevel();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeRandom_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeRandom();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeSoundClass_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeSoundClass();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeSwitch_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeSwitch();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeWaveParam_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeWaveParam();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EOptimizationType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EImportanceLevel();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ENormalMode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAssetEditorOrbitCameraPosition();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMeshSectionInfoMap();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMeshSectionInfo();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FStaticMeshSourceModel();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FStaticMeshOptimizationSettings();
	ENGINE_API class UFunction* Z_Construct_UFunction_UStaticMesh_GetBoundingBox();
	ENGINE_API class UClass* Z_Construct_UClass_UStaticMesh_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UStaticMesh();
	ENGINE_API class UClass* Z_Construct_UClass_UStaticMeshSocket_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UStaticMeshSocket();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSubsurfaceProfileStruct();
	ENGINE_API class UClass* Z_Construct_UClass_USubsurfaceProfile_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USubsurfaceProfile();
	ENGINE_API class UClass* Z_Construct_UClass_UTextPropertyTestObject_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UTextPropertyTestObject();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETextureSourceFormat();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETextureSourceArtType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETextureMipCount();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ECompositeTextureMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_TextureAddress();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_TextureFilter();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_TextureCompressionSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTexturePlatformData();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTextureSource();
	ENGINE_API class UClass* Z_Construct_UClass_UTexture_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UTexture();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTexture2D_Blueprint_GetSizeX();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTexture2D_Blueprint_GetSizeY();
	ENGINE_API class UClass* Z_Construct_UClass_UTexture2D_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UTexture2D();
	ENGINE_API class UClass* Z_Construct_UClass_ULightMapTexture2D_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ULightMapTexture2D();
	ENGINE_API class UClass* Z_Construct_UClass_UShadowMapTexture2D_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UShadowMapTexture2D();
	ENGINE_API class UClass* Z_Construct_UClass_UTextureLightProfile_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UTextureLightProfile();
	ENGINE_API class UClass* Z_Construct_UClass_UTexture2DDynamic_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UTexture2DDynamic();
	ENGINE_API class UClass* Z_Construct_UClass_UTextureCube_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UTextureCube();
	ENGINE_API class UClass* Z_Construct_UClass_UTextureRenderTarget_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UTextureRenderTarget();
	ENGINE_API class UClass* Z_Construct_UClass_UTextureRenderTarget2D_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UTextureRenderTarget2D();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_OnCanvasRenderTargetUpdate__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCanvasRenderTarget2D_CreateCanvasRenderTarget2D();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCanvasRenderTarget2D_GetSize();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCanvasRenderTarget2D_ReceiveUpdate();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCanvasRenderTarget2D_UpdateResource();
	ENGINE_API class UClass* Z_Construct_UClass_UCanvasRenderTarget2D_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCanvasRenderTarget2D();
	ENGINE_API class UClass* Z_Construct_UClass_UTextureRenderTargetCube_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UTextureRenderTargetCube();
	ENGINE_API class UClass* Z_Construct_UClass_UThumbnailInfo_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UThumbnailInfo();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTTLinearColorTrack();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTTVectorTrack();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTTFloatTrack();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTTEventTrack();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTTTrackBase();
	ENGINE_API class UClass* Z_Construct_UClass_UTimelineTemplate_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UTimelineTemplate();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTouchInputControl();
	ENGINE_API class UClass* Z_Construct_UClass_UTouchInterface_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UTouchInterface();
	ENGINE_API class UClass* Z_Construct_UClass_UUserDefinedEnum_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UUserDefinedEnum();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EUserDefinedStructureStatus();
	ENGINE_API class UClass* Z_Construct_UClass_UUserDefinedStruct_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UUserDefinedStruct();
	ENGINE_API class UClass* Z_Construct_UClass_UVectorField_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UVectorField();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EVectorFieldConstructionOp();
	ENGINE_API class UClass* Z_Construct_UClass_UVectorFieldAnimated_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UVectorFieldAnimated();
	ENGINE_API class UClass* Z_Construct_UClass_UVectorFieldStatic_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UVectorFieldStatic();
	ENGINE_API class UFunction* Z_Construct_UFunction_UVehicleWheel_GetRotationAngle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UVehicleWheel_GetSteerAngle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UVehicleWheel_GetSuspensionOffset();
	ENGINE_API class UClass* Z_Construct_UClass_UVehicleWheel_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UVehicleWheel();
	ENGINE_API class UClass* Z_Construct_UClass_UVertexAnimBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UVertexAnimBase();
	ENGINE_API class UClass* Z_Construct_UClass_UMorphTarget_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMorphTarget();
	ENGINE_API class UClass* Z_Construct_UClass_UVertexAnimation_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UVertexAnimation();
	ENGINE_API class UClass* Z_Construct_UClass_UVisualLoggerAutomationTests_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UVisualLoggerAutomationTests();
	ENGINE_API class UClass* Z_Construct_UClass_UWorldComposition_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UWorldComposition();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EPinHidingMode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_Base();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FExposedValueHandler();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FComponentSpacePoseLink();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPoseLink();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPoseLinkBase();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FInputScaleBias();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_ApplyAdditive();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_AssetPlayerBase();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_BlendListBase();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_BlendListByBool();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_BlendListByEnum();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_BlendListByInt();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_BlendSpacePlayer();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_BlendSpaceEvaluator();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_LayeredBoneBlend();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ERefPoseType();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_MeshSpaceRefPose();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_RefPose();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_Root();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_RotateRootBone();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_RotationOffsetBlendSpace();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_SaveCachedPose();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_SequenceEvaluator();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_SequencePlayer();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_Slot();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_StateMachine();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimationPotentialTransition();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimationActiveTransitionEntry();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EEvaluatorMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EEvaluatorDataSource();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_TransitionPoseEvaluator();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_TransitionResult();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimationNode_TwoWayBlend();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_UseCachedPose();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_ConvertLocalToComponentSpace();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_ConvertComponentToLocalSpace();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ECameraAlphaBlendMode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDummySpacerCameraTypes();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FStreamableManager();
	ENGINE_API class UPackage* Z_Construct_UPackage_Engine();
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SphereOverlapComponents_NEW()
	{
		struct KismetSystemLibrary_eventSphereOverlapComponents_NEW_Parms
		{
			UObject* WorldContextObject;
			FVector SpherePos;
			float SphereRadius;
			TArray<TEnumAsByte<EObjectTypeQuery> > ObjectTypes;
			UClass* ComponentClassFilter;
			TArray<AActor*> ActorsToIgnore;
			TArray<UPrimitiveComponent*> OutComponents;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SphereOverlapComponents_NEW"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(KismetSystemLibrary_eventSphereOverlapComponents_NEW_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetSystemLibrary_eventSphereOverlapComponents_NEW_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetSystemLibrary_eventSphereOverlapComponents_NEW_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetSystemLibrary_eventSphereOverlapComponents_NEW_Parms), sizeof(bool), true);
			UProperty* NewProp_OutComponents = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutComponents"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(OutComponents, KismetSystemLibrary_eventSphereOverlapComponents_NEW_Parms), 0x0000008000000180);
			UProperty* NewProp_OutComponents_Inner = new(EC_InternalUseOnlyConstructor, NewProp_OutComponents, TEXT("OutComponents"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000080000, Z_Construct_UClass_UPrimitiveComponent_NoRegister());
			UProperty* NewProp_ActorsToIgnore = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ActorsToIgnore, KismetSystemLibrary_eventSphereOverlapComponents_NEW_Parms), 0x0000000008000182);
			UProperty* NewProp_ActorsToIgnore_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ActorsToIgnore, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_ComponentClassFilter = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ComponentClassFilter"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(ComponentClassFilter, KismetSystemLibrary_eventSphereOverlapComponents_NEW_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			UProperty* NewProp_ObjectTypes = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ObjectTypes"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ObjectTypes, KismetSystemLibrary_eventSphereOverlapComponents_NEW_Parms), 0x0000000008000182);
			UProperty* NewProp_ObjectTypes_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ObjectTypes, TEXT("ObjectTypes"), RF_Public|RF_Transient|RF_Native) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UEnum_Engine_EObjectTypeQuery());
			UProperty* NewProp_SphereRadius = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SphereRadius"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(SphereRadius, KismetSystemLibrary_eventSphereOverlapComponents_NEW_Parms), 0x0000000000000080);
			UProperty* NewProp_SpherePos = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SpherePos"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SpherePos, KismetSystemLibrary_eventSphereOverlapComponents_NEW_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventSphereOverlapComponents_NEW_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AutoCreateRefTerm"), TEXT("ActorsToIgnore"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Collision"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("SphereOverlapComponents"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns an array of components that overlap the given sphere.\n@param WorldContext  World context\n@param SpherePos             Center of sphere.\n@param SphereRadius  Size of sphere.\n@param Filter                Option to restrict results to only static or only dynamic.  For efficiency.\n@param ClassFilter   If set, will only return results of this class or subclasses of it.\n@param ActorsToIgnore                Ignore these actors in the list\n@param OutActors             Returned array of actors. Unsorted.\n@return                              true if there was an overlap that passed the filters, false otherwise."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
			MetaData->SetValue(NewProp_OutComponents, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SphereTraceMulti_DEPRECATED()
	{
		struct KismetSystemLibrary_eventSphereTraceMulti_DEPRECATED_Parms
		{
			UObject* WorldContextObject;
			FVector Start;
			FVector End;
			float Radius;
			TEnumAsByte<ECollisionChannel> TraceChannel;
			bool bTraceComplex;
			TArray<AActor*> ActorsToIgnore;
			TEnumAsByte<EDrawDebugTrace::Type> DrawDebugType;
			TArray<FHitResult> OutHits;
			bool bIgnoreSelf;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SphereTraceMulti_DEPRECATED"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(KismetSystemLibrary_eventSphereTraceMulti_DEPRECATED_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetSystemLibrary_eventSphereTraceMulti_DEPRECATED_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetSystemLibrary_eventSphereTraceMulti_DEPRECATED_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetSystemLibrary_eventSphereTraceMulti_DEPRECATED_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIgnoreSelf, KismetSystemLibrary_eventSphereTraceMulti_DEPRECATED_Parms, bool);
			UProperty* NewProp_bIgnoreSelf = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bIgnoreSelf"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIgnoreSelf, KismetSystemLibrary_eventSphereTraceMulti_DEPRECATED_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bIgnoreSelf, KismetSystemLibrary_eventSphereTraceMulti_DEPRECATED_Parms), sizeof(bool), true);
			UProperty* NewProp_OutHits = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutHits"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(OutHits, KismetSystemLibrary_eventSphereTraceMulti_DEPRECATED_Parms), 0x0000008000000180);
			UProperty* NewProp_OutHits_Inner = new(EC_InternalUseOnlyConstructor, NewProp_OutHits, TEXT("OutHits"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000008000000000, Z_Construct_UScriptStruct_FHitResult());
			UProperty* NewProp_DrawDebugType = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DrawDebugType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(DrawDebugType, KismetSystemLibrary_eventSphereTraceMulti_DEPRECATED_Parms), 0x0000000000000080, Z_Construct_UEnum_Engine_EDrawDebugTrace());
			UProperty* NewProp_ActorsToIgnore = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ActorsToIgnore, KismetSystemLibrary_eventSphereTraceMulti_DEPRECATED_Parms), 0x0000000008000182);
			UProperty* NewProp_ActorsToIgnore_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ActorsToIgnore, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTraceComplex, KismetSystemLibrary_eventSphereTraceMulti_DEPRECATED_Parms, bool);
			UProperty* NewProp_bTraceComplex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTraceComplex"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTraceComplex, KismetSystemLibrary_eventSphereTraceMulti_DEPRECATED_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bTraceComplex, KismetSystemLibrary_eventSphereTraceMulti_DEPRECATED_Parms), sizeof(bool), true);
			UProperty* NewProp_TraceChannel = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TraceChannel"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(TraceChannel, KismetSystemLibrary_eventSphereTraceMulti_DEPRECATED_Parms), 0x0000000000000080, Z_Construct_UEnum_Engine_ECollisionChannel());
			UProperty* NewProp_Radius = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Radius"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Radius, KismetSystemLibrary_eventSphereTraceMulti_DEPRECATED_Parms), 0x0000000000000080);
			UProperty* NewProp_End = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("End"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(End, KismetSystemLibrary_eventSphereTraceMulti_DEPRECATED_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Start = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Start"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Start, KismetSystemLibrary_eventSphereTraceMulti_DEPRECATED_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventSphereTraceMulti_DEPRECATED_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AutoCreateRefTerm"), TEXT("ActorsToIgnore"));
			MetaData->SetValue(ReturnFunction, TEXT("bIgnoreSelf"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Collision"));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecatedFunction"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecationMessage"), TEXT("Use new MultiSphereTraceByChannel"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("MultiSphereTraceByChannelDeprecated"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sweeps a sphere along the given line and returns all hits encountered up to and including the first blocking hit.\nThis trace finds the objects that RESPONDS to the given TraceChannel\n\n@param WorldContext  World context\n@param Start                 Start of line segment.\n@param End                   End of line segment.\n@param Radius                Radius of the sphere to sweep\n@param TraceChannel\n@param bTraceComplex True to test against complex collision, false to test against simplified collision.\n@param OutHits               A list of hits, sorted along the trace from start to finish.  The blocking hit will be the last hit, if there was one.\n@return                              True if there was a hit, false otherwise."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SphereTraceMulti_NEW()
	{
		struct KismetSystemLibrary_eventSphereTraceMulti_NEW_Parms
		{
			UObject* WorldContextObject;
			FVector Start;
			FVector End;
			float Radius;
			TEnumAsByte<ETraceTypeQuery> TraceChannel;
			bool bTraceComplex;
			TArray<AActor*> ActorsToIgnore;
			TEnumAsByte<EDrawDebugTrace::Type> DrawDebugType;
			TArray<FHitResult> OutHits;
			bool bIgnoreSelf;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SphereTraceMulti_NEW"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(KismetSystemLibrary_eventSphereTraceMulti_NEW_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetSystemLibrary_eventSphereTraceMulti_NEW_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetSystemLibrary_eventSphereTraceMulti_NEW_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetSystemLibrary_eventSphereTraceMulti_NEW_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIgnoreSelf, KismetSystemLibrary_eventSphereTraceMulti_NEW_Parms, bool);
			UProperty* NewProp_bIgnoreSelf = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bIgnoreSelf"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIgnoreSelf, KismetSystemLibrary_eventSphereTraceMulti_NEW_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bIgnoreSelf, KismetSystemLibrary_eventSphereTraceMulti_NEW_Parms), sizeof(bool), true);
			UProperty* NewProp_OutHits = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutHits"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(OutHits, KismetSystemLibrary_eventSphereTraceMulti_NEW_Parms), 0x0000008000000180);
			UProperty* NewProp_OutHits_Inner = new(EC_InternalUseOnlyConstructor, NewProp_OutHits, TEXT("OutHits"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000008000000000, Z_Construct_UScriptStruct_FHitResult());
			UProperty* NewProp_DrawDebugType = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DrawDebugType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(DrawDebugType, KismetSystemLibrary_eventSphereTraceMulti_NEW_Parms), 0x0000000000000080, Z_Construct_UEnum_Engine_EDrawDebugTrace());
			UProperty* NewProp_ActorsToIgnore = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ActorsToIgnore, KismetSystemLibrary_eventSphereTraceMulti_NEW_Parms), 0x0000000008000182);
			UProperty* NewProp_ActorsToIgnore_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ActorsToIgnore, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTraceComplex, KismetSystemLibrary_eventSphereTraceMulti_NEW_Parms, bool);
			UProperty* NewProp_bTraceComplex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTraceComplex"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTraceComplex, KismetSystemLibrary_eventSphereTraceMulti_NEW_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bTraceComplex, KismetSystemLibrary_eventSphereTraceMulti_NEW_Parms), sizeof(bool), true);
			UProperty* NewProp_TraceChannel = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TraceChannel"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(TraceChannel, KismetSystemLibrary_eventSphereTraceMulti_NEW_Parms), 0x0000000000000080, Z_Construct_UEnum_Engine_ETraceTypeQuery());
			UProperty* NewProp_Radius = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Radius"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Radius, KismetSystemLibrary_eventSphereTraceMulti_NEW_Parms), 0x0000000000000080);
			UProperty* NewProp_End = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("End"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(End, KismetSystemLibrary_eventSphereTraceMulti_NEW_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Start = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Start"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Start, KismetSystemLibrary_eventSphereTraceMulti_NEW_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventSphereTraceMulti_NEW_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AutoCreateRefTerm"), TEXT("ActorsToIgnore"));
			MetaData->SetValue(ReturnFunction, TEXT("bIgnoreSelf"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Collision"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("MultiSphereTraceByChannel"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("sweep"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sweeps a sphere along the given line and returns all hits encountered up to and including the first blocking hit.\nThis trace finds the objects that RESPOND to the given TraceChannel\n\n@param WorldContext  World context\n@param Start                 Start of line segment.\n@param End                   End of line segment.\n@param Radius                Radius of the sphere to sweep\n@param TraceChannel\n@param bTraceComplex True to test against complex collision, false to test against simplified collision.\n@param OutHits               A list of hits, sorted along the trace from start to finish.  The blocking hit will be the last hit, if there was one.\n@return                              True if there was a blocking hit, false otherwise."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SphereTraceMultiByObject_DEPRECATED()
	{
		struct KismetSystemLibrary_eventSphereTraceMultiByObject_DEPRECATED_Parms
		{
			UObject* WorldContextObject;
			FVector Start;
			FVector End;
			float Radius;
			TArray<TEnumAsByte<ECollisionChannel> > ObjectsToTrace;
			bool bTraceComplex;
			TArray<AActor*> ActorsToIgnore;
			TEnumAsByte<EDrawDebugTrace::Type> DrawDebugType;
			TArray<FHitResult> OutHits;
			bool bIgnoreSelf;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SphereTraceMultiByObject_DEPRECATED"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(KismetSystemLibrary_eventSphereTraceMultiByObject_DEPRECATED_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetSystemLibrary_eventSphereTraceMultiByObject_DEPRECATED_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetSystemLibrary_eventSphereTraceMultiByObject_DEPRECATED_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetSystemLibrary_eventSphereTraceMultiByObject_DEPRECATED_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIgnoreSelf, KismetSystemLibrary_eventSphereTraceMultiByObject_DEPRECATED_Parms, bool);
			UProperty* NewProp_bIgnoreSelf = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bIgnoreSelf"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIgnoreSelf, KismetSystemLibrary_eventSphereTraceMultiByObject_DEPRECATED_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bIgnoreSelf, KismetSystemLibrary_eventSphereTraceMultiByObject_DEPRECATED_Parms), sizeof(bool), true);
			UProperty* NewProp_OutHits = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutHits"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(OutHits, KismetSystemLibrary_eventSphereTraceMultiByObject_DEPRECATED_Parms), 0x0000008000000180);
			UProperty* NewProp_OutHits_Inner = new(EC_InternalUseOnlyConstructor, NewProp_OutHits, TEXT("OutHits"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000008000000000, Z_Construct_UScriptStruct_FHitResult());
			UProperty* NewProp_DrawDebugType = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DrawDebugType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(DrawDebugType, KismetSystemLibrary_eventSphereTraceMultiByObject_DEPRECATED_Parms), 0x0000000000000080, Z_Construct_UEnum_Engine_EDrawDebugTrace());
			UProperty* NewProp_ActorsToIgnore = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ActorsToIgnore, KismetSystemLibrary_eventSphereTraceMultiByObject_DEPRECATED_Parms), 0x0000000008000182);
			UProperty* NewProp_ActorsToIgnore_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ActorsToIgnore, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTraceComplex, KismetSystemLibrary_eventSphereTraceMultiByObject_DEPRECATED_Parms, bool);
			UProperty* NewProp_bTraceComplex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTraceComplex"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTraceComplex, KismetSystemLibrary_eventSphereTraceMultiByObject_DEPRECATED_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bTraceComplex, KismetSystemLibrary_eventSphereTraceMultiByObject_DEPRECATED_Parms), sizeof(bool), true);
			UProperty* NewProp_ObjectsToTrace = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ObjectsToTrace"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ObjectsToTrace, KismetSystemLibrary_eventSphereTraceMultiByObject_DEPRECATED_Parms), 0x0000000008000182);
			UProperty* NewProp_ObjectsToTrace_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ObjectsToTrace, TEXT("ObjectsToTrace"), RF_Public|RF_Transient|RF_Native) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UEnum_Engine_ECollisionChannel());
			UProperty* NewProp_Radius = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Radius"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Radius, KismetSystemLibrary_eventSphereTraceMultiByObject_DEPRECATED_Parms), 0x0000000000000080);
			UProperty* NewProp_End = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("End"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(End, KismetSystemLibrary_eventSphereTraceMultiByObject_DEPRECATED_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Start = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Start"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Start, KismetSystemLibrary_eventSphereTraceMultiByObject_DEPRECATED_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventSphereTraceMultiByObject_DEPRECATED_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AutoCreateRefTerm"), TEXT("ActorsToIgnore"));
			MetaData->SetValue(ReturnFunction, TEXT("bIgnoreSelf"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Collision"));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecatedFunction"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecationMessage"), TEXT("Use new MultiSphereTraceForObjects"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("MultiSphereTraceByObjectDeprecated"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sweeps a sphere along the given line and returns all hits encountered.\nThis finds objects belonging to the channels specified in the ObjectsToTrace input.\n\n@param WorldContext  World context\n@param Start                 Start of line segment.\n@param End                   End of line segment.\n@param Radius                Radius of the sphere to sweep\n@param ObjectsToTrace        Array of Object Types to trace\n@param bTraceComplex True to test against complex collision, false to test against simplified collision.\n@param OutHits               A list of hits, sorted along the trace from start to finish.  The blocking hit will be the last hit, if there was one.\n@return                              True if there was a hit, false otherwise."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SphereTraceMultiForObjects()
	{
		struct KismetSystemLibrary_eventSphereTraceMultiForObjects_Parms
		{
			UObject* WorldContextObject;
			FVector Start;
			FVector End;
			float Radius;
			TArray<TEnumAsByte<EObjectTypeQuery> > ObjectTypes;
			bool bTraceComplex;
			TArray<AActor*> ActorsToIgnore;
			TEnumAsByte<EDrawDebugTrace::Type> DrawDebugType;
			TArray<FHitResult> OutHits;
			bool bIgnoreSelf;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SphereTraceMultiForObjects"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(KismetSystemLibrary_eventSphereTraceMultiForObjects_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetSystemLibrary_eventSphereTraceMultiForObjects_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetSystemLibrary_eventSphereTraceMultiForObjects_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetSystemLibrary_eventSphereTraceMultiForObjects_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIgnoreSelf, KismetSystemLibrary_eventSphereTraceMultiForObjects_Parms, bool);
			UProperty* NewProp_bIgnoreSelf = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bIgnoreSelf"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIgnoreSelf, KismetSystemLibrary_eventSphereTraceMultiForObjects_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bIgnoreSelf, KismetSystemLibrary_eventSphereTraceMultiForObjects_Parms), sizeof(bool), true);
			UProperty* NewProp_OutHits = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutHits"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(OutHits, KismetSystemLibrary_eventSphereTraceMultiForObjects_Parms), 0x0000008000000180);
			UProperty* NewProp_OutHits_Inner = new(EC_InternalUseOnlyConstructor, NewProp_OutHits, TEXT("OutHits"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000008000000000, Z_Construct_UScriptStruct_FHitResult());
			UProperty* NewProp_DrawDebugType = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DrawDebugType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(DrawDebugType, KismetSystemLibrary_eventSphereTraceMultiForObjects_Parms), 0x0000000000000080, Z_Construct_UEnum_Engine_EDrawDebugTrace());
			UProperty* NewProp_ActorsToIgnore = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ActorsToIgnore, KismetSystemLibrary_eventSphereTraceMultiForObjects_Parms), 0x0000000008000182);
			UProperty* NewProp_ActorsToIgnore_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ActorsToIgnore, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTraceComplex, KismetSystemLibrary_eventSphereTraceMultiForObjects_Parms, bool);
			UProperty* NewProp_bTraceComplex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTraceComplex"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTraceComplex, KismetSystemLibrary_eventSphereTraceMultiForObjects_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bTraceComplex, KismetSystemLibrary_eventSphereTraceMultiForObjects_Parms), sizeof(bool), true);
			UProperty* NewProp_ObjectTypes = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ObjectTypes"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ObjectTypes, KismetSystemLibrary_eventSphereTraceMultiForObjects_Parms), 0x0000000008000182);
			UProperty* NewProp_ObjectTypes_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ObjectTypes, TEXT("ObjectTypes"), RF_Public|RF_Transient|RF_Native) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UEnum_Engine_EObjectTypeQuery());
			UProperty* NewProp_Radius = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Radius"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Radius, KismetSystemLibrary_eventSphereTraceMultiForObjects_Parms), 0x0000000000000080);
			UProperty* NewProp_End = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("End"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(End, KismetSystemLibrary_eventSphereTraceMultiForObjects_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Start = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Start"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Start, KismetSystemLibrary_eventSphereTraceMultiForObjects_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventSphereTraceMultiForObjects_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AutoCreateRefTerm"), TEXT("ActorsToIgnore"));
			MetaData->SetValue(ReturnFunction, TEXT("bIgnoreSelf"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Collision"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("MultiSphereTraceForObjects"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("sweep"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sweeps a sphere along the given line and returns all hits encountered.\nThis only finds objects that are of a type specified by ObjectTypes.\n\n@param WorldContext  World context\n@param Start                 Start of line segment.\n@param End                   End of line segment.\n@param Radius                Radius of the sphere to sweep\n@param ObjectTypes   Array of Object Types to trace\n@param bTraceComplex True to test against complex collision, false to test against simplified collision.\n@param OutHits               A list of hits, sorted along the trace from start to finish.  The blocking hit will be the last hit, if there was one.\n@return                              True if there was a hit, false otherwise."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SphereTraceSingle_DEPRECATED()
	{
		struct KismetSystemLibrary_eventSphereTraceSingle_DEPRECATED_Parms
		{
			UObject* WorldContextObject;
			FVector Start;
			FVector End;
			float Radius;
			TEnumAsByte<ECollisionChannel> TraceChannel;
			bool bTraceComplex;
			TArray<AActor*> ActorsToIgnore;
			TEnumAsByte<EDrawDebugTrace::Type> DrawDebugType;
			FHitResult OutHit;
			bool bIgnoreSelf;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SphereTraceSingle_DEPRECATED"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(KismetSystemLibrary_eventSphereTraceSingle_DEPRECATED_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetSystemLibrary_eventSphereTraceSingle_DEPRECATED_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetSystemLibrary_eventSphereTraceSingle_DEPRECATED_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetSystemLibrary_eventSphereTraceSingle_DEPRECATED_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIgnoreSelf, KismetSystemLibrary_eventSphereTraceSingle_DEPRECATED_Parms, bool);
			UProperty* NewProp_bIgnoreSelf = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bIgnoreSelf"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIgnoreSelf, KismetSystemLibrary_eventSphereTraceSingle_DEPRECATED_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bIgnoreSelf, KismetSystemLibrary_eventSphereTraceSingle_DEPRECATED_Parms), sizeof(bool), true);
			UProperty* NewProp_OutHit = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutHit"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(OutHit, KismetSystemLibrary_eventSphereTraceSingle_DEPRECATED_Parms), 0x0000008000000180, Z_Construct_UScriptStruct_FHitResult());
			UProperty* NewProp_DrawDebugType = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DrawDebugType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(DrawDebugType, KismetSystemLibrary_eventSphereTraceSingle_DEPRECATED_Parms), 0x0000000000000080, Z_Construct_UEnum_Engine_EDrawDebugTrace());
			UProperty* NewProp_ActorsToIgnore = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ActorsToIgnore, KismetSystemLibrary_eventSphereTraceSingle_DEPRECATED_Parms), 0x0000000008000182);
			UProperty* NewProp_ActorsToIgnore_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ActorsToIgnore, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTraceComplex, KismetSystemLibrary_eventSphereTraceSingle_DEPRECATED_Parms, bool);
			UProperty* NewProp_bTraceComplex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTraceComplex"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTraceComplex, KismetSystemLibrary_eventSphereTraceSingle_DEPRECATED_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bTraceComplex, KismetSystemLibrary_eventSphereTraceSingle_DEPRECATED_Parms), sizeof(bool), true);
			UProperty* NewProp_TraceChannel = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TraceChannel"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(TraceChannel, KismetSystemLibrary_eventSphereTraceSingle_DEPRECATED_Parms), 0x0000000000000080, Z_Construct_UEnum_Engine_ECollisionChannel());
			UProperty* NewProp_Radius = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Radius"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Radius, KismetSystemLibrary_eventSphereTraceSingle_DEPRECATED_Parms), 0x0000000000000080);
			UProperty* NewProp_End = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("End"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(End, KismetSystemLibrary_eventSphereTraceSingle_DEPRECATED_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Start = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Start"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Start, KismetSystemLibrary_eventSphereTraceSingle_DEPRECATED_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventSphereTraceSingle_DEPRECATED_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AutoCreateRefTerm"), TEXT("ActorsToIgnore"));
			MetaData->SetValue(ReturnFunction, TEXT("bIgnoreSelf"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Collision"));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecatedFunction"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecationMessage"), TEXT("Use new SingleSphereTraceByChannel"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("SingleSphereTraceByChannelDeprecated"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sweeps a sphere along the given line and returns the first blocking hit encountered.\nThis trace finds the objects that RESPONDS to the given TraceChannel\n\n@param Start                 Start of line segment.\n@param End                   End of line segment.\n@param Radius                Radius of the sphere to sweep\n@param TraceChannel\n@param bTraceComplex True to test against complex collision, false to test against simplified collision.\n@param OutHit                Properties of the trace hit.\n@return                              True if there was a hit, false otherwise."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SphereTraceSingle_NEW()
	{
		struct KismetSystemLibrary_eventSphereTraceSingle_NEW_Parms
		{
			UObject* WorldContextObject;
			FVector Start;
			FVector End;
			float Radius;
			TEnumAsByte<ETraceTypeQuery> TraceChannel;
			bool bTraceComplex;
			TArray<AActor*> ActorsToIgnore;
			TEnumAsByte<EDrawDebugTrace::Type> DrawDebugType;
			FHitResult OutHit;
			bool bIgnoreSelf;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SphereTraceSingle_NEW"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(KismetSystemLibrary_eventSphereTraceSingle_NEW_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetSystemLibrary_eventSphereTraceSingle_NEW_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetSystemLibrary_eventSphereTraceSingle_NEW_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetSystemLibrary_eventSphereTraceSingle_NEW_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIgnoreSelf, KismetSystemLibrary_eventSphereTraceSingle_NEW_Parms, bool);
			UProperty* NewProp_bIgnoreSelf = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bIgnoreSelf"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIgnoreSelf, KismetSystemLibrary_eventSphereTraceSingle_NEW_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bIgnoreSelf, KismetSystemLibrary_eventSphereTraceSingle_NEW_Parms), sizeof(bool), true);
			UProperty* NewProp_OutHit = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutHit"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(OutHit, KismetSystemLibrary_eventSphereTraceSingle_NEW_Parms), 0x0000008000000180, Z_Construct_UScriptStruct_FHitResult());
			UProperty* NewProp_DrawDebugType = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DrawDebugType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(DrawDebugType, KismetSystemLibrary_eventSphereTraceSingle_NEW_Parms), 0x0000000000000080, Z_Construct_UEnum_Engine_EDrawDebugTrace());
			UProperty* NewProp_ActorsToIgnore = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ActorsToIgnore, KismetSystemLibrary_eventSphereTraceSingle_NEW_Parms), 0x0000000008000182);
			UProperty* NewProp_ActorsToIgnore_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ActorsToIgnore, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTraceComplex, KismetSystemLibrary_eventSphereTraceSingle_NEW_Parms, bool);
			UProperty* NewProp_bTraceComplex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTraceComplex"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTraceComplex, KismetSystemLibrary_eventSphereTraceSingle_NEW_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bTraceComplex, KismetSystemLibrary_eventSphereTraceSingle_NEW_Parms), sizeof(bool), true);
			UProperty* NewProp_TraceChannel = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TraceChannel"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(TraceChannel, KismetSystemLibrary_eventSphereTraceSingle_NEW_Parms), 0x0000000000000080, Z_Construct_UEnum_Engine_ETraceTypeQuery());
			UProperty* NewProp_Radius = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Radius"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Radius, KismetSystemLibrary_eventSphereTraceSingle_NEW_Parms), 0x0000000000000080);
			UProperty* NewProp_End = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("End"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(End, KismetSystemLibrary_eventSphereTraceSingle_NEW_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Start = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Start"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Start, KismetSystemLibrary_eventSphereTraceSingle_NEW_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventSphereTraceSingle_NEW_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AutoCreateRefTerm"), TEXT("ActorsToIgnore"));
			MetaData->SetValue(ReturnFunction, TEXT("bIgnoreSelf"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Collision"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("SphereTraceByChannel"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("sweep"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sweeps a sphere along the given line and returns the first blocking hit encountered.\nThis trace finds the objects that RESPONDS to the given TraceChannel\n\n@param Start                 Start of line segment.\n@param End                   End of line segment.\n@param Radius                Radius of the sphere to sweep\n@param TraceChannel\n@param bTraceComplex True to test against complex collision, false to test against simplified collision.\n@param OutHit                Properties of the trace hit.\n@return                              True if there was a hit, false otherwise."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SphereTraceSingleByObject_DEPRECATED()
	{
		struct KismetSystemLibrary_eventSphereTraceSingleByObject_DEPRECATED_Parms
		{
			UObject* WorldContextObject;
			FVector Start;
			FVector End;
			float Radius;
			TArray<TEnumAsByte<ECollisionChannel> > ObjectsToTrace;
			bool bTraceComplex;
			TArray<AActor*> ActorsToIgnore;
			TEnumAsByte<EDrawDebugTrace::Type> DrawDebugType;
			FHitResult OutHit;
			bool bIgnoreSelf;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SphereTraceSingleByObject_DEPRECATED"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(KismetSystemLibrary_eventSphereTraceSingleByObject_DEPRECATED_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetSystemLibrary_eventSphereTraceSingleByObject_DEPRECATED_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetSystemLibrary_eventSphereTraceSingleByObject_DEPRECATED_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetSystemLibrary_eventSphereTraceSingleByObject_DEPRECATED_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIgnoreSelf, KismetSystemLibrary_eventSphereTraceSingleByObject_DEPRECATED_Parms, bool);
			UProperty* NewProp_bIgnoreSelf = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bIgnoreSelf"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIgnoreSelf, KismetSystemLibrary_eventSphereTraceSingleByObject_DEPRECATED_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bIgnoreSelf, KismetSystemLibrary_eventSphereTraceSingleByObject_DEPRECATED_Parms), sizeof(bool), true);
			UProperty* NewProp_OutHit = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutHit"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(OutHit, KismetSystemLibrary_eventSphereTraceSingleByObject_DEPRECATED_Parms), 0x0000008000000180, Z_Construct_UScriptStruct_FHitResult());
			UProperty* NewProp_DrawDebugType = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DrawDebugType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(DrawDebugType, KismetSystemLibrary_eventSphereTraceSingleByObject_DEPRECATED_Parms), 0x0000000000000080, Z_Construct_UEnum_Engine_EDrawDebugTrace());
			UProperty* NewProp_ActorsToIgnore = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ActorsToIgnore, KismetSystemLibrary_eventSphereTraceSingleByObject_DEPRECATED_Parms), 0x0000000008000182);
			UProperty* NewProp_ActorsToIgnore_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ActorsToIgnore, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTraceComplex, KismetSystemLibrary_eventSphereTraceSingleByObject_DEPRECATED_Parms, bool);
			UProperty* NewProp_bTraceComplex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTraceComplex"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTraceComplex, KismetSystemLibrary_eventSphereTraceSingleByObject_DEPRECATED_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bTraceComplex, KismetSystemLibrary_eventSphereTraceSingleByObject_DEPRECATED_Parms), sizeof(bool), true);
			UProperty* NewProp_ObjectsToTrace = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ObjectsToTrace"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ObjectsToTrace, KismetSystemLibrary_eventSphereTraceSingleByObject_DEPRECATED_Parms), 0x0000000008000182);
			UProperty* NewProp_ObjectsToTrace_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ObjectsToTrace, TEXT("ObjectsToTrace"), RF_Public|RF_Transient|RF_Native) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UEnum_Engine_ECollisionChannel());
			UProperty* NewProp_Radius = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Radius"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Radius, KismetSystemLibrary_eventSphereTraceSingleByObject_DEPRECATED_Parms), 0x0000000000000080);
			UProperty* NewProp_End = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("End"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(End, KismetSystemLibrary_eventSphereTraceSingleByObject_DEPRECATED_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Start = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Start"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Start, KismetSystemLibrary_eventSphereTraceSingleByObject_DEPRECATED_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventSphereTraceSingleByObject_DEPRECATED_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AutoCreateRefTerm"), TEXT("ActorsToIgnore"));
			MetaData->SetValue(ReturnFunction, TEXT("bIgnoreSelf"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Collision"));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecatedFunction"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecationMessage"), TEXT("Use new SingleSphereTraceForObjects"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("SingleSphereTraceByObjectDeprecated"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sweeps a sphere along the given line and returns the first hit encountered.\nThis finds objects belonging to the channels specified in the ObjectsToTrace input.\n\n@param Start                 Start of line segment.\n@param End                   End of line segment.\n@param Radius                Radius of the sphere to sweep\n@param ObjectsToTrace        Array of Object Types to trace\n@param bTraceComplex True to test against complex collision, false to test against simplified collision.\n@param OutHit                Properties of the trace hit.\n@return                              True if there was a hit, false otherwise."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SphereTraceSingleForObjects()
	{
		struct KismetSystemLibrary_eventSphereTraceSingleForObjects_Parms
		{
			UObject* WorldContextObject;
			FVector Start;
			FVector End;
			float Radius;
			TArray<TEnumAsByte<EObjectTypeQuery> > ObjectTypes;
			bool bTraceComplex;
			TArray<AActor*> ActorsToIgnore;
			TEnumAsByte<EDrawDebugTrace::Type> DrawDebugType;
			FHitResult OutHit;
			bool bIgnoreSelf;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SphereTraceSingleForObjects"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(KismetSystemLibrary_eventSphereTraceSingleForObjects_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetSystemLibrary_eventSphereTraceSingleForObjects_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetSystemLibrary_eventSphereTraceSingleForObjects_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetSystemLibrary_eventSphereTraceSingleForObjects_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIgnoreSelf, KismetSystemLibrary_eventSphereTraceSingleForObjects_Parms, bool);
			UProperty* NewProp_bIgnoreSelf = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bIgnoreSelf"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIgnoreSelf, KismetSystemLibrary_eventSphereTraceSingleForObjects_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bIgnoreSelf, KismetSystemLibrary_eventSphereTraceSingleForObjects_Parms), sizeof(bool), true);
			UProperty* NewProp_OutHit = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutHit"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(OutHit, KismetSystemLibrary_eventSphereTraceSingleForObjects_Parms), 0x0000008000000180, Z_Construct_UScriptStruct_FHitResult());
			UProperty* NewProp_DrawDebugType = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DrawDebugType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(DrawDebugType, KismetSystemLibrary_eventSphereTraceSingleForObjects_Parms), 0x0000000000000080, Z_Construct_UEnum_Engine_EDrawDebugTrace());
			UProperty* NewProp_ActorsToIgnore = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ActorsToIgnore, KismetSystemLibrary_eventSphereTraceSingleForObjects_Parms), 0x0000000008000182);
			UProperty* NewProp_ActorsToIgnore_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ActorsToIgnore, TEXT("ActorsToIgnore"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTraceComplex, KismetSystemLibrary_eventSphereTraceSingleForObjects_Parms, bool);
			UProperty* NewProp_bTraceComplex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTraceComplex"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTraceComplex, KismetSystemLibrary_eventSphereTraceSingleForObjects_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bTraceComplex, KismetSystemLibrary_eventSphereTraceSingleForObjects_Parms), sizeof(bool), true);
			UProperty* NewProp_ObjectTypes = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ObjectTypes"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ObjectTypes, KismetSystemLibrary_eventSphereTraceSingleForObjects_Parms), 0x0000000008000182);
			UProperty* NewProp_ObjectTypes_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ObjectTypes, TEXT("ObjectTypes"), RF_Public|RF_Transient|RF_Native) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UEnum_Engine_EObjectTypeQuery());
			UProperty* NewProp_Radius = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Radius"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Radius, KismetSystemLibrary_eventSphereTraceSingleForObjects_Parms), 0x0000000000000080);
			UProperty* NewProp_End = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("End"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(End, KismetSystemLibrary_eventSphereTraceSingleForObjects_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Start = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Start"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Start, KismetSystemLibrary_eventSphereTraceSingleForObjects_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, KismetSystemLibrary_eventSphereTraceSingleForObjects_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AutoCreateRefTerm"), TEXT("ActorsToIgnore"));
			MetaData->SetValue(ReturnFunction, TEXT("bIgnoreSelf"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Collision"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("SphereTraceForObjects"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("sweep"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sweeps a sphere along the given line and returns the first hit encountered.\nThis only finds objects that are of a type specified by ObjectTypes.\n\n@param Start                 Start of line segment.\n@param End                   End of line segment.\n@param Radius                Radius of the sphere to sweep\n@param ObjectTypes   Array of Object Types to trace\n@param bTraceComplex True to test against complex collision, false to test against simplified collision.\n@param OutHit                Properties of the trace hit.\n@return                              True if there was a hit, false otherwise."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetSystemLibrary_StackTrace()
	{
		UObject* Outer=Z_Construct_UClass_UKismetSystemLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("StackTrace"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Development|Editor"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("ScriptTrace"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetSystemLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Prints a stack trace to the log, so you can see how a blueprint got to this node"));
#endif
		}
		return ReturnFunction;
	}
	DEFINE_VTABLE_PTR_HELPER_CTOR(UKismetSystemLibrary);
	UEnum* Z_Construct_UEnum_Engine_ERoundingMode()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_ERoundingMode_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ERoundingMode"), 0, Get_Z_Construct_UEnum_Engine_ERoundingMode_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ERoundingMode"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("HalfToEven")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("HalfFromZero")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("HalfToZero")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("FromZero")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ToZero")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ToNegativeInfinity")), 5));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ToPositiveInfinity")), 6));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ERoundingMode_MAX")), 7));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("FromZero.ToolTip"), TEXT("Rounds to the value which is further from zero, \"larger\" in absolute value: 0.1 becomes 1, -0.1 becomes -1"));
			MetaData->SetValue(ReturnEnum, TEXT("HalfFromZero.ToolTip"), TEXT("Rounds to nearest place, equidistant ties go to the value which is further from zero: -0.5 becomes -1.0, 0.5 becomes 1.0"));
			MetaData->SetValue(ReturnEnum, TEXT("HalfToEven.ToolTip"), TEXT("Rounds to the nearest place, equidistant ties go to the value which is closest to an even value: 1.5 becomes 2, 0.5 becomes 0"));
			MetaData->SetValue(ReturnEnum, TEXT("HalfToZero.ToolTip"), TEXT("Rounds to nearest place, equidistant ties go to the value which is closer to zero: -0.5 becomes 0, 0.5 becomes 0."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetTextLibrary.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToNegativeInfinity.ToolTip"), TEXT("Rounds to the value which is more negative: 0.1 becomes 0, -0.1 becomes -1"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Provides rounding modes for converting numbers into localized text"));
			MetaData->SetValue(ReturnEnum, TEXT("ToPositiveInfinity.ToolTip"), TEXT("Rounds to the value which is more positive: 0.1 becomes 1, -0.1 becomes 0"));
			MetaData->SetValue(ReturnEnum, TEXT("ToZero.ToolTip"), TEXT("Rounds to the value which is closer to zero, \"smaller\" in absolute value: 0.1 becomes 0, -0.1 becomes 0"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_ERoundingMode_CRC() { return 3109322624U; }
	UScriptStruct* Z_Construct_UScriptStruct_FFormatTextArgument()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FFormatTextArgument_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("FormatTextArgument"), sizeof(FFormatTextArgument), Get_Z_Construct_UScriptStruct_FFormatTextArgument_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FormatTextArgument"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FFormatTextArgument>, EStructFlags(0x00000001));
			UProperty* NewProp_TextValue = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TextValue"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(TextValue, FFormatTextArgument), 0x0000000000000805);
			UProperty* NewProp_ArgumentName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ArgumentName"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(ArgumentName, FFormatTextArgument), 0x0000000000000805);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetTextLibrary.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Used for formatting text in Blueprints; a helper struct that helps funnel the data to FText::Format"));
			MetaData->SetValue(NewProp_TextValue, TEXT("Category"), TEXT("ArgumentValue"));
			MetaData->SetValue(NewProp_TextValue, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetTextLibrary.h"));
			MetaData->SetValue(NewProp_ArgumentName, TEXT("Category"), TEXT("ArgumentValue"));
			MetaData->SetValue(NewProp_ArgumentName, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetTextLibrary.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FFormatTextArgument_CRC() { return 2641138522U; }
	UFunction* Z_Construct_UFunction_UKismetTextLibrary_AsCurrency_Float()
	{
		struct KismetTextLibrary_eventAsCurrency_Float_Parms
		{
			float Value;
			TEnumAsByte<ERoundingMode> RoundingMode;
			bool bUseGrouping;
			int32 MinimumIntegralDigits;
			int32 MaximumIntegralDigits;
			int32 MinimumFractionalDigits;
			int32 MaximumFractionalDigits;
			FString CurrencyCode;
			FText ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetTextLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AsCurrency_Float"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetTextLibrary_eventAsCurrency_Float_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(ReturnValue, KismetTextLibrary_eventAsCurrency_Float_Parms), 0x0000000000000580);
			UProperty* NewProp_CurrencyCode = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CurrencyCode"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(CurrencyCode, KismetTextLibrary_eventAsCurrency_Float_Parms), 0x0000040000000080);
			UProperty* NewProp_MaximumFractionalDigits = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MaximumFractionalDigits"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MaximumFractionalDigits, KismetTextLibrary_eventAsCurrency_Float_Parms), 0x0000040000000080);
			UProperty* NewProp_MinimumFractionalDigits = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MinimumFractionalDigits"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MinimumFractionalDigits, KismetTextLibrary_eventAsCurrency_Float_Parms), 0x0000040000000080);
			UProperty* NewProp_MaximumIntegralDigits = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MaximumIntegralDigits"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MaximumIntegralDigits, KismetTextLibrary_eventAsCurrency_Float_Parms), 0x0000040000000080);
			UProperty* NewProp_MinimumIntegralDigits = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MinimumIntegralDigits"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MinimumIntegralDigits, KismetTextLibrary_eventAsCurrency_Float_Parms), 0x0000040000000080);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseGrouping, KismetTextLibrary_eventAsCurrency_Float_Parms, bool);
			UProperty* NewProp_bUseGrouping = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bUseGrouping"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseGrouping, KismetTextLibrary_eventAsCurrency_Float_Parms), 0x0000040000000080, CPP_BOOL_PROPERTY_BITMASK(bUseGrouping, KismetTextLibrary_eventAsCurrency_Float_Parms), sizeof(bool), true);
			UProperty* NewProp_RoundingMode = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("RoundingMode"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(RoundingMode, KismetTextLibrary_eventAsCurrency_Float_Parms), 0x0000040000000080, Z_Construct_UEnum_Engine_ERoundingMode());
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Value, KismetTextLibrary_eventAsCurrency_Float_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AdvancedDisplay"), TEXT("1"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Text"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bUseGrouping"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_MaximumFractionalDigits"), TEXT("3"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_MaximumIntegralDigits"), TEXT("324"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_MinimumFractionalDigits"), TEXT("0"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_MinimumIntegralDigits"), TEXT("1"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("AsCurrency (float)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetTextLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Converts a passed in float to a text formatted as a currency"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetTextLibrary_AsCurrency_Integer()
	{
		struct KismetTextLibrary_eventAsCurrency_Integer_Parms
		{
			int32 Value;
			TEnumAsByte<ERoundingMode> RoundingMode;
			bool bUseGrouping;
			int32 MinimumIntegralDigits;
			int32 MaximumIntegralDigits;
			int32 MinimumFractionalDigits;
			int32 MaximumFractionalDigits;
			FString CurrencyCode;
			FText ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetTextLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AsCurrency_Integer"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetTextLibrary_eventAsCurrency_Integer_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(ReturnValue, KismetTextLibrary_eventAsCurrency_Integer_Parms), 0x0000000000000580);
			UProperty* NewProp_CurrencyCode = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CurrencyCode"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(CurrencyCode, KismetTextLibrary_eventAsCurrency_Integer_Parms), 0x0000040000000080);
			UProperty* NewProp_MaximumFractionalDigits = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MaximumFractionalDigits"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MaximumFractionalDigits, KismetTextLibrary_eventAsCurrency_Integer_Parms), 0x0000040000000080);
			UProperty* NewProp_MinimumFractionalDigits = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MinimumFractionalDigits"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MinimumFractionalDigits, KismetTextLibrary_eventAsCurrency_Integer_Parms), 0x0000040000000080);
			UProperty* NewProp_MaximumIntegralDigits = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MaximumIntegralDigits"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MaximumIntegralDigits, KismetTextLibrary_eventAsCurrency_Integer_Parms), 0x0000040000000080);
			UProperty* NewProp_MinimumIntegralDigits = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MinimumIntegralDigits"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MinimumIntegralDigits, KismetTextLibrary_eventAsCurrency_Integer_Parms), 0x0000040000000080);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseGrouping, KismetTextLibrary_eventAsCurrency_Integer_Parms, bool);
			UProperty* NewProp_bUseGrouping = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bUseGrouping"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseGrouping, KismetTextLibrary_eventAsCurrency_Integer_Parms), 0x0000040000000080, CPP_BOOL_PROPERTY_BITMASK(bUseGrouping, KismetTextLibrary_eventAsCurrency_Integer_Parms), sizeof(bool), true);
			UProperty* NewProp_RoundingMode = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("RoundingMode"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(RoundingMode, KismetTextLibrary_eventAsCurrency_Integer_Parms), 0x0000040000000080, Z_Construct_UEnum_Engine_ERoundingMode());
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Value, KismetTextLibrary_eventAsCurrency_Integer_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AdvancedDisplay"), TEXT("1"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Text"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bUseGrouping"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_MaximumFractionalDigits"), TEXT("3"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_MaximumIntegralDigits"), TEXT("324"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_MinimumFractionalDigits"), TEXT("0"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_MinimumIntegralDigits"), TEXT("1"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("AsCurrency (int)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetTextLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Converts a passed in integer to a text formatted as a currency"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetTextLibrary_AsDate_DateTime()
	{
		struct KismetTextLibrary_eventAsDate_DateTime_Parms
		{
			FDateTime InDateTime;
			FText ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetTextLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AsDate_DateTime"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(KismetTextLibrary_eventAsDate_DateTime_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(ReturnValue, KismetTextLibrary_eventAsDate_DateTime_Parms), 0x0000000000000580);
			UProperty* NewProp_InDateTime = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InDateTime"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InDateTime, KismetTextLibrary_eventAsDate_DateTime_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FDateTime());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AdvancedDisplay"), TEXT("1"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Text"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("AsDate"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetTextLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Converts a passed in date & time to a text, formatted as a date"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetTextLibrary_AsDateTime_DateTime()
	{
		struct KismetTextLibrary_eventAsDateTime_DateTime_Parms
		{
			FDateTime In;
			FText ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetTextLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AsDateTime_DateTime"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(KismetTextLibrary_eventAsDateTime_DateTime_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(ReturnValue, KismetTextLibrary_eventAsDateTime_DateTime_Parms), 0x0000000000000580);
			UProperty* NewProp_In = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("In"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(In, KismetTextLibrary_eventAsDateTime_DateTime_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FDateTime());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AdvancedDisplay"), TEXT("1"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Text"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("AsDateTime"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetTextLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Converts a passed in date & time to a text, formatted as a date & time"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetTextLibrary_AsPercent_Float()
	{
		struct KismetTextLibrary_eventAsPercent_Float_Parms
		{
			float Value;
			TEnumAsByte<ERoundingMode> RoundingMode;
			bool bUseGrouping;
			int32 MinimumIntegralDigits;
			int32 MaximumIntegralDigits;
			int32 MinimumFractionalDigits;
			int32 MaximumFractionalDigits;
			FText ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetTextLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AsPercent_Float"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetTextLibrary_eventAsPercent_Float_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(ReturnValue, KismetTextLibrary_eventAsPercent_Float_Parms), 0x0000000000000580);
			UProperty* NewProp_MaximumFractionalDigits = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MaximumFractionalDigits"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MaximumFractionalDigits, KismetTextLibrary_eventAsPercent_Float_Parms), 0x0000040000000080);
			UProperty* NewProp_MinimumFractionalDigits = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MinimumFractionalDigits"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MinimumFractionalDigits, KismetTextLibrary_eventAsPercent_Float_Parms), 0x0000040000000080);
			UProperty* NewProp_MaximumIntegralDigits = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MaximumIntegralDigits"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MaximumIntegralDigits, KismetTextLibrary_eventAsPercent_Float_Parms), 0x0000040000000080);
			UProperty* NewProp_MinimumIntegralDigits = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MinimumIntegralDigits"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MinimumIntegralDigits, KismetTextLibrary_eventAsPercent_Float_Parms), 0x0000040000000080);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseGrouping, KismetTextLibrary_eventAsPercent_Float_Parms, bool);
			UProperty* NewProp_bUseGrouping = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bUseGrouping"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseGrouping, KismetTextLibrary_eventAsPercent_Float_Parms), 0x0000040000000080, CPP_BOOL_PROPERTY_BITMASK(bUseGrouping, KismetTextLibrary_eventAsPercent_Float_Parms), sizeof(bool), true);
			UProperty* NewProp_RoundingMode = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("RoundingMode"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(RoundingMode, KismetTextLibrary_eventAsPercent_Float_Parms), 0x0000040000000080, Z_Construct_UEnum_Engine_ERoundingMode());
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Value, KismetTextLibrary_eventAsPercent_Float_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AdvancedDisplay"), TEXT("1"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Text"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bUseGrouping"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_MaximumFractionalDigits"), TEXT("3"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_MaximumIntegralDigits"), TEXT("324"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_MinimumFractionalDigits"), TEXT("0"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_MinimumIntegralDigits"), TEXT("1"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("AsPercent"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetTextLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Converts a passed in float to a text, formatted as a percent"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetTextLibrary_AsTime_DateTime()
	{
		struct KismetTextLibrary_eventAsTime_DateTime_Parms
		{
			FDateTime In;
			FText ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetTextLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AsTime_DateTime"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(KismetTextLibrary_eventAsTime_DateTime_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(ReturnValue, KismetTextLibrary_eventAsTime_DateTime_Parms), 0x0000000000000580);
			UProperty* NewProp_In = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("In"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(In, KismetTextLibrary_eventAsTime_DateTime_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FDateTime());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AdvancedDisplay"), TEXT("1"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Text"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("AsTime"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetTextLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Converts a passed in date & time to a text, formatted as a time"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetTextLibrary_AsTimespan_Timespan()
	{
		struct KismetTextLibrary_eventAsTimespan_Timespan_Parms
		{
			FTimespan InTimespan;
			FText ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetTextLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AsTimespan_Timespan"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(KismetTextLibrary_eventAsTimespan_Timespan_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(ReturnValue, KismetTextLibrary_eventAsTimespan_Timespan_Parms), 0x0000000000000580);
			UProperty* NewProp_InTimespan = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InTimespan"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InTimespan, KismetTextLibrary_eventAsTimespan_Timespan_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FTimespan());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AdvancedDisplay"), TEXT("1"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Text"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("AsTimespan"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetTextLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Converts a passed in time span to a text, formatted as a time span"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetTextLibrary_Conv_BoolToText()
	{
		struct KismetTextLibrary_eventConv_BoolToText_Parms
		{
			bool InBool;
			FText ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetTextLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Conv_BoolToText"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetTextLibrary_eventConv_BoolToText_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(ReturnValue, KismetTextLibrary_eventConv_BoolToText_Parms), 0x0000000000000580);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(InBool, KismetTextLibrary_eventConv_BoolToText_Parms, bool);
			UProperty* NewProp_InBool = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InBool"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(InBool, KismetTextLibrary_eventConv_BoolToText_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(InBool, KismetTextLibrary_eventConv_BoolToText_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintAutocast"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Text"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("->"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("ToText (boolean)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetTextLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Converts a boolean value to text, either 'true' or 'false'"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetTextLibrary_Conv_ByteToText()
	{
		struct KismetTextLibrary_eventConv_ByteToText_Parms
		{
			uint8 Value;
			FText ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetTextLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Conv_ByteToText"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetTextLibrary_eventConv_ByteToText_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(ReturnValue, KismetTextLibrary_eventConv_ByteToText_Parms), 0x0000000000000580);
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(Value, KismetTextLibrary_eventConv_ByteToText_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintAutocast"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Text"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("->"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("ToText (byte)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetTextLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Converts a byte value to text"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetTextLibrary_Conv_FloatToText()
	{
		struct KismetTextLibrary_eventConv_FloatToText_Parms
		{
			float Value;
			TEnumAsByte<ERoundingMode> RoundingMode;
			bool bUseGrouping;
			int32 MinimumIntegralDigits;
			int32 MaximumIntegralDigits;
			int32 MinimumFractionalDigits;
			int32 MaximumFractionalDigits;
			FText ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetTextLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Conv_FloatToText"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetTextLibrary_eventConv_FloatToText_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(ReturnValue, KismetTextLibrary_eventConv_FloatToText_Parms), 0x0000000000000580);
			UProperty* NewProp_MaximumFractionalDigits = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MaximumFractionalDigits"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MaximumFractionalDigits, KismetTextLibrary_eventConv_FloatToText_Parms), 0x0000040000000080);
			UProperty* NewProp_MinimumFractionalDigits = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MinimumFractionalDigits"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MinimumFractionalDigits, KismetTextLibrary_eventConv_FloatToText_Parms), 0x0000040000000080);
			UProperty* NewProp_MaximumIntegralDigits = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MaximumIntegralDigits"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MaximumIntegralDigits, KismetTextLibrary_eventConv_FloatToText_Parms), 0x0000040000000080);
			UProperty* NewProp_MinimumIntegralDigits = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MinimumIntegralDigits"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MinimumIntegralDigits, KismetTextLibrary_eventConv_FloatToText_Parms), 0x0000040000000080);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseGrouping, KismetTextLibrary_eventConv_FloatToText_Parms, bool);
			UProperty* NewProp_bUseGrouping = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bUseGrouping"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseGrouping, KismetTextLibrary_eventConv_FloatToText_Parms), 0x0000040000000080, CPP_BOOL_PROPERTY_BITMASK(bUseGrouping, KismetTextLibrary_eventConv_FloatToText_Parms), sizeof(bool), true);
			UProperty* NewProp_RoundingMode = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("RoundingMode"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(RoundingMode, KismetTextLibrary_eventConv_FloatToText_Parms), 0x0000040000000080, Z_Construct_UEnum_Engine_ERoundingMode());
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Value, KismetTextLibrary_eventConv_FloatToText_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AdvancedDisplay"), TEXT("1"));
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintAutocast"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Text"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bUseGrouping"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_MaximumFractionalDigits"), TEXT("3"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_MaximumIntegralDigits"), TEXT("324"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_MinimumFractionalDigits"), TEXT("0"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_MinimumIntegralDigits"), TEXT("1"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("ToText (float)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetTextLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Converts a passed in float to a text based on formatting options"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetTextLibrary_Conv_IntToText()
	{
		struct KismetTextLibrary_eventConv_IntToText_Parms
		{
			int32 Value;
			bool bUseGrouping;
			int32 MinimumIntegralDigits;
			int32 MaximumIntegralDigits;
			FText ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetTextLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Conv_IntToText"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetTextLibrary_eventConv_IntToText_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(ReturnValue, KismetTextLibrary_eventConv_IntToText_Parms), 0x0000000000000580);
			UProperty* NewProp_MaximumIntegralDigits = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MaximumIntegralDigits"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MaximumIntegralDigits, KismetTextLibrary_eventConv_IntToText_Parms), 0x0000040000000080);
			UProperty* NewProp_MinimumIntegralDigits = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MinimumIntegralDigits"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MinimumIntegralDigits, KismetTextLibrary_eventConv_IntToText_Parms), 0x0000040000000080);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseGrouping, KismetTextLibrary_eventConv_IntToText_Parms, bool);
			UProperty* NewProp_bUseGrouping = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bUseGrouping"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseGrouping, KismetTextLibrary_eventConv_IntToText_Parms), 0x0000040000000080, CPP_BOOL_PROPERTY_BITMASK(bUseGrouping, KismetTextLibrary_eventConv_IntToText_Parms), sizeof(bool), true);
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Value, KismetTextLibrary_eventConv_IntToText_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AdvancedDisplay"), TEXT("1"));
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintAutocast"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Text"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bUseGrouping"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_MaximumIntegralDigits"), TEXT("324"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_MinimumIntegralDigits"), TEXT("1"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("ToText (int)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetTextLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Converts a passed in integer to a text based on formatting options"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetTextLibrary_Conv_NameToText()
	{
		struct KismetTextLibrary_eventConv_NameToText_Parms
		{
			FName InName;
			FText ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetTextLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Conv_NameToText"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetTextLibrary_eventConv_NameToText_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(ReturnValue, KismetTextLibrary_eventConv_NameToText_Parms), 0x0000000000000580);
			UProperty* NewProp_InName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(InName, KismetTextLibrary_eventConv_NameToText_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintAutocast"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Text"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("->"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("ToText (name)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetTextLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Converts string to localizable text"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetTextLibrary_Conv_StringToText()
	{
		struct KismetTextLibrary_eventConv_StringToText_Parms
		{
			FString InString;
			FText ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetTextLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Conv_StringToText"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetTextLibrary_eventConv_StringToText_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(ReturnValue, KismetTextLibrary_eventConv_StringToText_Parms), 0x0000000000000580);
			UProperty* NewProp_InString = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InString"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(InString, KismetTextLibrary_eventConv_StringToText_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintAutocast"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Text"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("->"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("ToText (string)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetTextLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Converts string to localizable text"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetTextLibrary_Conv_TextToString()
	{
		struct KismetTextLibrary_eventConv_TextToString_Parms
		{
			FText InText;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetTextLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Conv_TextToString"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(KismetTextLibrary_eventConv_TextToString_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, KismetTextLibrary_eventConv_TextToString_Parms), 0x0000000000000580);
			UProperty* NewProp_InText = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InText"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(InText, KismetTextLibrary_eventConv_TextToString_Parms), 0x0000000008000182);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintAutocast"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|String"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("->"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("ToString (text)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetTextLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Converts localizable text to the string"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetTextLibrary_EqualEqual_IgnoreCase_TextText()
	{
		struct KismetTextLibrary_eventEqualEqual_IgnoreCase_TextText_Parms
		{
			FText A;
			FText B;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetTextLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EqualEqual_IgnoreCase_TextText"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(KismetTextLibrary_eventEqualEqual_IgnoreCase_TextText_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetTextLibrary_eventEqualEqual_IgnoreCase_TextText_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetTextLibrary_eventEqualEqual_IgnoreCase_TextText_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetTextLibrary_eventEqualEqual_IgnoreCase_TextText_Parms), sizeof(bool), true);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(B, KismetTextLibrary_eventEqualEqual_IgnoreCase_TextText_Parms), 0x0000000008000182);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(A, KismetTextLibrary_eventEqualEqual_IgnoreCase_TextText_Parms), 0x0000000008000182);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Text"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("=="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Equal, Case Insensitive (text)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetTextLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if A and B are linguistically equal (A == B), ignoring case."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetTextLibrary_EqualEqual_TextText()
	{
		struct KismetTextLibrary_eventEqualEqual_TextText_Parms
		{
			FText A;
			FText B;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetTextLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EqualEqual_TextText"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(KismetTextLibrary_eventEqualEqual_TextText_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetTextLibrary_eventEqualEqual_TextText_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetTextLibrary_eventEqualEqual_TextText_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetTextLibrary_eventEqualEqual_TextText_Parms), sizeof(bool), true);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(B, KismetTextLibrary_eventEqualEqual_TextText_Parms), 0x0000000008000182);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(A, KismetTextLibrary_eventEqualEqual_TextText_Parms), 0x0000000008000182);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Text"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("=="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Equal (text)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetTextLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if A and B are linguistically equal (A == B)."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetTextLibrary_FindTextInLocalizationTable()
	{
		struct KismetTextLibrary_eventFindTextInLocalizationTable_Parms
		{
			FString Namespace;
			FString Key;
			FText OutText;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetTextLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FindTextInLocalizationTable"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(KismetTextLibrary_eventFindTextInLocalizationTable_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetTextLibrary_eventFindTextInLocalizationTable_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetTextLibrary_eventFindTextInLocalizationTable_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetTextLibrary_eventFindTextInLocalizationTable_Parms), sizeof(bool), true);
			UProperty* NewProp_OutText = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutText"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(OutText, KismetTextLibrary_eventFindTextInLocalizationTable_Parms), 0x0000000000000180);
			UProperty* NewProp_Key = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Key"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Key, KismetTextLibrary_eventFindTextInLocalizationTable_Parms), 0x0000000000000080);
			UProperty* NewProp_Namespace = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Namespace"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Namespace, KismetTextLibrary_eventFindTextInLocalizationTable_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Text"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetTextLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Attempts to find existing Text using the representation found in the loc tables for the specified namespace and key."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetTextLibrary_Format()
	{
		struct KismetTextLibrary_eventFormat_Parms
		{
			FText InPattern;
			TArray<FFormatTextArgument> InArgs;
			FText ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetTextLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Format"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetTextLibrary_eventFormat_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(ReturnValue, KismetTextLibrary_eventFormat_Parms), 0x0000000000000580);
			UProperty* NewProp_InArgs = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InArgs"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(InArgs, KismetTextLibrary_eventFormat_Parms), 0x0000000000000080);
			UProperty* NewProp_InArgs_Inner = new(EC_InternalUseOnlyConstructor, NewProp_InArgs, TEXT("InArgs"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FFormatTextArgument());
			UProperty* NewProp_InPattern = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InPattern"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(InPattern, KismetTextLibrary_eventFormat_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetTextLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Used for formatting text using the FText::Format function and utilized by the UK2Node_FormatText"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetTextLibrary_GetEmptyText()
	{
		struct KismetTextLibrary_eventGetEmptyText_Parms
		{
			FText ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetTextLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetEmptyText"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(KismetTextLibrary_eventGetEmptyText_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(ReturnValue, KismetTextLibrary_eventGetEmptyText_Parms), 0x0000000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Text"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetTextLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns an empty piece of text."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetTextLibrary_NotEqual_IgnoreCase_TextText()
	{
		struct KismetTextLibrary_eventNotEqual_IgnoreCase_TextText_Parms
		{
			FText A;
			FText B;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetTextLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NotEqual_IgnoreCase_TextText"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(KismetTextLibrary_eventNotEqual_IgnoreCase_TextText_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetTextLibrary_eventNotEqual_IgnoreCase_TextText_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetTextLibrary_eventNotEqual_IgnoreCase_TextText_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetTextLibrary_eventNotEqual_IgnoreCase_TextText_Parms), sizeof(bool), true);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(B, KismetTextLibrary_eventNotEqual_IgnoreCase_TextText_Parms), 0x0000000008000182);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(A, KismetTextLibrary_eventNotEqual_IgnoreCase_TextText_Parms), 0x0000000008000182);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Text"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("!="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("NotEqual, Case Insensitive (text)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetTextLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if A and B are linguistically not equal (A != B), ignoring case."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetTextLibrary_NotEqual_TextText()
	{
		struct KismetTextLibrary_eventNotEqual_TextText_Parms
		{
			FText A;
			FText B;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetTextLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NotEqual_TextText"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(KismetTextLibrary_eventNotEqual_TextText_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetTextLibrary_eventNotEqual_TextText_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetTextLibrary_eventNotEqual_TextText_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetTextLibrary_eventNotEqual_TextText_Parms), sizeof(bool), true);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(B, KismetTextLibrary_eventNotEqual_TextText_Parms), 0x0000000008000182);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(A, KismetTextLibrary_eventNotEqual_TextText_Parms), 0x0000000008000182);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Text"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("!="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("NotEqual (text)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetTextLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if A and B are linguistically not equal (A != B)."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetTextLibrary_TextIsCultureInvariant()
	{
		struct KismetTextLibrary_eventTextIsCultureInvariant_Parms
		{
			FText InText;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetTextLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TextIsCultureInvariant"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(KismetTextLibrary_eventTextIsCultureInvariant_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetTextLibrary_eventTextIsCultureInvariant_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetTextLibrary_eventTextIsCultureInvariant_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetTextLibrary_eventTextIsCultureInvariant_Parms), sizeof(bool), true);
			UProperty* NewProp_InText = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InText"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(InText, KismetTextLibrary_eventTextIsCultureInvariant_Parms), 0x0000000008000182);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Text"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetTextLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if text is culture invariant."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetTextLibrary_TextIsEmpty()
	{
		struct KismetTextLibrary_eventTextIsEmpty_Parms
		{
			FText InText;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetTextLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TextIsEmpty"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(KismetTextLibrary_eventTextIsEmpty_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetTextLibrary_eventTextIsEmpty_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetTextLibrary_eventTextIsEmpty_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetTextLibrary_eventTextIsEmpty_Parms), sizeof(bool), true);
			UProperty* NewProp_InText = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InText"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(InText, KismetTextLibrary_eventTextIsEmpty_Parms), 0x0000000008000182);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Text"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetTextLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if text is empty."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetTextLibrary_TextIsTransient()
	{
		struct KismetTextLibrary_eventTextIsTransient_Parms
		{
			FText InText;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetTextLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TextIsTransient"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(KismetTextLibrary_eventTextIsTransient_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, KismetTextLibrary_eventTextIsTransient_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, KismetTextLibrary_eventTextIsTransient_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, KismetTextLibrary_eventTextIsTransient_Parms), sizeof(bool), true);
			UProperty* NewProp_InText = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InText"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(InText, KismetTextLibrary_eventTextIsTransient_Parms), 0x0000000008000182);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Text"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetTextLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if text is transient."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetTextLibrary_TextTrimPreceding()
	{
		struct KismetTextLibrary_eventTextTrimPreceding_Parms
		{
			FText InText;
			FText ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetTextLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TextTrimPreceding"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(KismetTextLibrary_eventTextTrimPreceding_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(ReturnValue, KismetTextLibrary_eventTextTrimPreceding_Parms), 0x0000000000000580);
			UProperty* NewProp_InText = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InText"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(InText, KismetTextLibrary_eventTextTrimPreceding_Parms), 0x0000000008000182);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Text"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetTextLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Removes whitespace characters from the front of the text."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetTextLibrary_TextTrimPrecedingAndTrailing()
	{
		struct KismetTextLibrary_eventTextTrimPrecedingAndTrailing_Parms
		{
			FText InText;
			FText ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetTextLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TextTrimPrecedingAndTrailing"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(KismetTextLibrary_eventTextTrimPrecedingAndTrailing_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(ReturnValue, KismetTextLibrary_eventTextTrimPrecedingAndTrailing_Parms), 0x0000000000000580);
			UProperty* NewProp_InText = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InText"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(InText, KismetTextLibrary_eventTextTrimPrecedingAndTrailing_Parms), 0x0000000008000182);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Text"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetTextLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Removes whitespace characters from the front and end of the text."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UKismetTextLibrary_TextTrimTrailing()
	{
		struct KismetTextLibrary_eventTextTrimTrailing_Parms
		{
			FText InText;
			FText ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UKismetTextLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TextTrimTrailing"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(KismetTextLibrary_eventTextTrimTrailing_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(ReturnValue, KismetTextLibrary_eventTextTrimTrailing_Parms), 0x0000000000000580);
			UProperty* NewProp_InText = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InText"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(InText, KismetTextLibrary_eventTextTrimTrailing_Parms), 0x0000000008000182);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|Text"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetTextLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Removes trailing whitespace characters."));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UKismetTextLibrary_NoRegister()
	{
		return UKismetTextLibrary::StaticClass();
	}
	UClass* Z_Construct_UClass_UKismetTextLibrary()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBlueprintFunctionLibrary();
			Z_Construct_UPackage_Engine();
			OuterClass = UKismetTextLibrary::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_UKismetTextLibrary_AsCurrency_Float());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetTextLibrary_AsCurrency_Integer());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetTextLibrary_AsDate_DateTime());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetTextLibrary_AsDateTime_DateTime());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetTextLibrary_AsPercent_Float());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetTextLibrary_AsTime_DateTime());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetTextLibrary_AsTimespan_Timespan());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetTextLibrary_Conv_BoolToText());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetTextLibrary_Conv_ByteToText());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetTextLibrary_Conv_FloatToText());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetTextLibrary_Conv_IntToText());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetTextLibrary_Conv_NameToText());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetTextLibrary_Conv_StringToText());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetTextLibrary_Conv_TextToString());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetTextLibrary_EqualEqual_IgnoreCase_TextText());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetTextLibrary_EqualEqual_TextText());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetTextLibrary_FindTextInLocalizationTable());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetTextLibrary_Format());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetTextLibrary_GetEmptyText());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetTextLibrary_NotEqual_IgnoreCase_TextText());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetTextLibrary_NotEqual_TextText());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetTextLibrary_TextIsCultureInvariant());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetTextLibrary_TextIsEmpty());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetTextLibrary_TextIsTransient());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetTextLibrary_TextTrimPreceding());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetTextLibrary_TextTrimPrecedingAndTrailing());
				OuterClass->LinkChild(Z_Construct_UFunction_UKismetTextLibrary_TextTrimTrailing());

				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetTextLibrary_AsCurrency_Float()); // 4146055394
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetTextLibrary_AsCurrency_Integer()); // 2159449614
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetTextLibrary_AsDate_DateTime()); // 1210006790
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetTextLibrary_AsDateTime_DateTime()); // 2368183875
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetTextLibrary_AsPercent_Float()); // 3835243285
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetTextLibrary_AsTime_DateTime()); // 2754853525
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetTextLibrary_AsTimespan_Timespan()); // 2755257625
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetTextLibrary_Conv_BoolToText()); // 1769967109
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetTextLibrary_Conv_ByteToText()); // 468761844
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetTextLibrary_Conv_FloatToText()); // 3704022526
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetTextLibrary_Conv_IntToText()); // 2949054815
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetTextLibrary_Conv_NameToText()); // 3549839719
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetTextLibrary_Conv_StringToText()); // 555749586
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetTextLibrary_Conv_TextToString()); // 671663855
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetTextLibrary_EqualEqual_IgnoreCase_TextText()); // 2609863916
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetTextLibrary_EqualEqual_TextText()); // 3327308062
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetTextLibrary_FindTextInLocalizationTable()); // 3808008386
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetTextLibrary_Format()); // 3989359225
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetTextLibrary_GetEmptyText()); // 4211526448
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetTextLibrary_NotEqual_IgnoreCase_TextText()); // 12134222
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetTextLibrary_NotEqual_TextText()); // 1451760602
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetTextLibrary_TextIsCultureInvariant()); // 578822880
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetTextLibrary_TextIsEmpty()); // 375129628
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetTextLibrary_TextIsTransient()); // 3229484009
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetTextLibrary_TextTrimPreceding()); // 2005805309
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetTextLibrary_TextTrimPrecedingAndTrailing()); // 476727904
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UKismetTextLibrary_TextTrimTrailing()); // 2656943844
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Kismet/KismetTextLibrary.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Kismet/KismetTextLibrary.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UKismetTextLibrary(Z_Construct_UClass_UKismetTextLibrary, TEXT("UKismetTextLibrary"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UKismetTextLibrary);
	UFunction* Z_Construct_UFunction_UVisualLoggerKismetLibrary_LogBox()
	{
		struct VisualLoggerKismetLibrary_eventLogBox_Parms
		{
			UObject* WorldContextObject;
			FBox BoxShape;
			FString Text;
			FLinearColor ObjectColor;
			FName LogCategory;
		};
		UObject* Outer=Z_Construct_UClass_UVisualLoggerKismetLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LogBox"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04822401, 65535, sizeof(VisualLoggerKismetLibrary_eventLogBox_Parms));
			UProperty* NewProp_LogCategory = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LogCategory"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(LogCategory, VisualLoggerKismetLibrary_eventLogBox_Parms), 0x0000000000000080);
			UProperty* NewProp_ObjectColor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ObjectColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ObjectColor, VisualLoggerKismetLibrary_eventLogBox_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_Text = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Text"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Text, VisualLoggerKismetLibrary_eventLogBox_Parms), 0x0000000000000080);
			UProperty* NewProp_BoxShape = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("BoxShape"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(BoxShape, VisualLoggerKismetLibrary_eventLogBox_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FBox());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, VisualLoggerKismetLibrary_eventLogBox_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Debug|VisualLogger"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_LogCategory"), TEXT("Blueprint Log"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_ObjectColor"), TEXT("(R=1.000000,G=1.000000,B=1.000000,A=1.000000)"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Log Box Shape"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/VisualLogger/VisualLoggerKismetLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Logs box shape - recording for Visual Logs has to be enabled to record this data"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVisualLoggerKismetLibrary_LogLocation()
	{
		struct VisualLoggerKismetLibrary_eventLogLocation_Parms
		{
			UObject* WorldContextObject;
			FVector Location;
			FString Text;
			FLinearColor ObjectColor;
			float Radius;
			FName LogCategory;
		};
		UObject* Outer=Z_Construct_UClass_UVisualLoggerKismetLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LogLocation"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04822401, 65535, sizeof(VisualLoggerKismetLibrary_eventLogLocation_Parms));
			UProperty* NewProp_LogCategory = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LogCategory"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(LogCategory, VisualLoggerKismetLibrary_eventLogLocation_Parms), 0x0000000000000080);
			UProperty* NewProp_Radius = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Radius"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Radius, VisualLoggerKismetLibrary_eventLogLocation_Parms), 0x0000000000000080);
			UProperty* NewProp_ObjectColor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ObjectColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ObjectColor, VisualLoggerKismetLibrary_eventLogLocation_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_Text = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Text"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Text, VisualLoggerKismetLibrary_eventLogLocation_Parms), 0x0000000000000080);
			UProperty* NewProp_Location = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Location"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Location, VisualLoggerKismetLibrary_eventLogLocation_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, VisualLoggerKismetLibrary_eventLogLocation_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Debug|VisualLogger"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_LogCategory"), TEXT("Blueprint Log"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_ObjectColor"), TEXT("(R=1.000000,G=1.000000,B=1.000000,A=1.000000)"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Radius"), TEXT("10.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("LogLocation"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/VisualLogger/VisualLoggerKismetLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Logs location as sphere with given radius - recording for Visual Logs has to be enabled to record this data"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVisualLoggerKismetLibrary_LogText()
	{
		struct VisualLoggerKismetLibrary_eventLogText_Parms
		{
			UObject* WorldContextObject;
			FString Text;
			FName LogCategory;
		};
		UObject* Outer=Z_Construct_UClass_UVisualLoggerKismetLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LogText"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(VisualLoggerKismetLibrary_eventLogText_Parms));
			UProperty* NewProp_LogCategory = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LogCategory"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(LogCategory, VisualLoggerKismetLibrary_eventLogText_Parms), 0x0000000000000080);
			UProperty* NewProp_Text = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Text"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Text, VisualLoggerKismetLibrary_eventLogText_Parms), 0x0000000000000080);
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, VisualLoggerKismetLibrary_eventLogText_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Debug|VisualLogger"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_LogCategory"), TEXT("Blueprint Log"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("LogText"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/VisualLogger/VisualLoggerKismetLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Logs simple text string with Visual Logger - recording for Visual Logs has to be enabled to record this data"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UVisualLoggerKismetLibrary_NoRegister()
	{
		return UVisualLoggerKismetLibrary::StaticClass();
	}
	UClass* Z_Construct_UClass_UVisualLoggerKismetLibrary()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBlueprintFunctionLibrary();
			Z_Construct_UPackage_Engine();
			OuterClass = UVisualLoggerKismetLibrary::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;

				OuterClass->LinkChild(Z_Construct_UFunction_UVisualLoggerKismetLibrary_LogBox());
				OuterClass->LinkChild(Z_Construct_UFunction_UVisualLoggerKismetLibrary_LogLocation());
				OuterClass->LinkChild(Z_Construct_UFunction_UVisualLoggerKismetLibrary_LogText());

				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UVisualLoggerKismetLibrary_LogBox()); // 2455059578
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UVisualLoggerKismetLibrary_LogLocation()); // 33427137
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UVisualLoggerKismetLibrary_LogText()); // 1918666157
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("VisualLogger/VisualLoggerKismetLibrary.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/VisualLogger/VisualLoggerKismetLibrary.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UVisualLoggerKismetLibrary(Z_Construct_UClass_UVisualLoggerKismetLibrary, TEXT("UVisualLoggerKismetLibrary"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UVisualLoggerKismetLibrary);
	UScriptStruct* Z_Construct_UScriptStruct_FEventGraphFastCallPair()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FEventGraphFastCallPair_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("EventGraphFastCallPair"), sizeof(FEventGraphFastCallPair), Get_Z_Construct_UScriptStruct_FEventGraphFastCallPair_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EventGraphFastCallPair"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FEventGraphFastCallPair>, EStructFlags(0x00000201));
			UProperty* NewProp_EventGraphCallOffset = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("EventGraphCallOffset"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(EventGraphCallOffset, FEventGraphFastCallPair), 0x0000000000000000);
			UProperty* NewProp_FunctionToPatch = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("FunctionToPatch"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(FunctionToPatch, FEventGraphFastCallPair), 0x0000000000000000, UFunction::StaticClass());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/BlueprintGeneratedClass.h"));
			MetaData->SetValue(NewProp_EventGraphCallOffset, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/BlueprintGeneratedClass.h"));
			MetaData->SetValue(NewProp_FunctionToPatch, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/BlueprintGeneratedClass.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FEventGraphFastCallPair_CRC() { return 2025672887U; }
	UScriptStruct* Z_Construct_UScriptStruct_FBlueprintDebugData()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FBlueprintDebugData_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("BlueprintDebugData"), sizeof(FBlueprintDebugData), Get_Z_Construct_UScriptStruct_FBlueprintDebugData_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BlueprintDebugData"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FBlueprintDebugData>, EStructFlags(0x00000201));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/BlueprintGeneratedClass.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FBlueprintDebugData_CRC() { return 3247513908U; }
	UScriptStruct* Z_Construct_UScriptStruct_FPointerToUberGraphFrame()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FPointerToUberGraphFrame_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("PointerToUberGraphFrame"), sizeof(FPointerToUberGraphFrame), Get_Z_Construct_UScriptStruct_FPointerToUberGraphFrame_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PointerToUberGraphFrame"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FPointerToUberGraphFrame>, EStructFlags(0x00000001));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/BlueprintGeneratedClass.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FPointerToUberGraphFrame_CRC() { return 427129140U; }
	UScriptStruct* Z_Construct_UScriptStruct_FDebuggingInfoForSingleFunction()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FDebuggingInfoForSingleFunction_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("DebuggingInfoForSingleFunction"), sizeof(FDebuggingInfoForSingleFunction), Get_Z_Construct_UScriptStruct_FDebuggingInfoForSingleFunction_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DebuggingInfoForSingleFunction"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FDebuggingInfoForSingleFunction>, EStructFlags(0x00000001));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/BlueprintGeneratedClass.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FDebuggingInfoForSingleFunction_CRC() { return 1679491723U; }
	UScriptStruct* Z_Construct_UScriptStruct_FNodeToCodeAssociation()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FNodeToCodeAssociation_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("NodeToCodeAssociation"), sizeof(FNodeToCodeAssociation), Get_Z_Construct_UScriptStruct_FNodeToCodeAssociation_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NodeToCodeAssociation"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FNodeToCodeAssociation>, EStructFlags(0x00000001));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/BlueprintGeneratedClass.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FNodeToCodeAssociation_CRC() { return 2952127566U; }
	UClass* Z_Construct_UClass_UBlueprintGeneratedClass_NoRegister()
	{
		return UBlueprintGeneratedClass::StaticClass();
	}
	UClass* Z_Construct_UClass_UBlueprintGeneratedClass()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			UClass::StaticClass();
			Z_Construct_UPackage_Engine();
			OuterClass = UBlueprintGeneratedClass::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_OverridenArchetypeForCDO = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OverridenArchetypeForCDO"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(OverridenArchetypeForCDO, UBlueprintGeneratedClass), 0x0000000800002000, Z_Construct_UClass_UObject_NoRegister());
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_FastCallPairs = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FastCallPairs"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(FastCallPairs_DEPRECATED, UBlueprintGeneratedClass), 0x0000000020000000);
				UProperty* NewProp_FastCallPairs_Inner = new(EC_InternalUseOnlyConstructor, NewProp_FastCallPairs, TEXT("FastCallPairs"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000020000000, Z_Construct_UScriptStruct_FEventGraphFastCallPair());
				UProperty* NewProp_UberGraphFunction = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UberGraphFunction"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(UberGraphFunction, UBlueprintGeneratedClass), 0x0000000000000000, UFunction::StaticClass());
				UProperty* NewProp_UberGraphFramePointerProperty = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UberGraphFramePointerProperty"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(UberGraphFramePointerProperty, UBlueprintGeneratedClass), 0x0000000000000000, UStructProperty::StaticClass());
				UProperty* NewProp_InheritableComponentHandler = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InheritableComponentHandler"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(InheritableComponentHandler, UBlueprintGeneratedClass), 0x0000000000000000, Z_Construct_UClass_UInheritableComponentHandler_NoRegister());
				UProperty* NewProp_SimpleConstructionScript = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SimpleConstructionScript"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(SimpleConstructionScript, UBlueprintGeneratedClass), 0x0000000000000000, Z_Construct_UClass_USimpleConstructionScript_NoRegister());
				UProperty* NewProp_Timelines = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Timelines"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Timelines, UBlueprintGeneratedClass), 0x0000000000000000);
				UProperty* NewProp_Timelines_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Timelines, TEXT("Timelines"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UTimelineTemplate_NoRegister());
				UProperty* NewProp_ComponentTemplates = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ComponentTemplates"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ComponentTemplates, UBlueprintGeneratedClass), 0x0000008000000008);
				UProperty* NewProp_ComponentTemplates_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ComponentTemplates, TEXT("ComponentTemplates"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000080008, Z_Construct_UClass_UActorComponent_NoRegister());
				UProperty* NewProp_DynamicBindingObjects = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DynamicBindingObjects"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(DynamicBindingObjects, UBlueprintGeneratedClass), 0x0000000000000000);
				UProperty* NewProp_DynamicBindingObjects_Inner = new(EC_InternalUseOnlyConstructor, NewProp_DynamicBindingObjects, TEXT("DynamicBindingObjects"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UDynamicBlueprintBinding_NoRegister());
				UProperty* NewProp_NumReplicatedProperties = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NumReplicatedProperties"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(NumReplicatedProperties, UBlueprintGeneratedClass), 0x0000010000000000);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/BlueprintGeneratedClass.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/BlueprintGeneratedClass.h"));
				MetaData->SetValue(NewProp_OverridenArchetypeForCDO, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/BlueprintGeneratedClass.h"));
				MetaData->SetValue(NewProp_FastCallPairs, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/BlueprintGeneratedClass.h"));
				MetaData->SetValue(NewProp_FastCallPairs, TEXT("ToolTip"), TEXT("This is a list of event graph call function nodes that are simple (no argument) thunks into the event graph (typically used for animation delegates, etc...)\nIt is a deprecated list only used for backwards compatibility prior to VER_UE4_SERIALIZE_BLUEPRINT_EVENTGRAPH_FASTCALLS_IN_UFUNCTION."));
				MetaData->SetValue(NewProp_UberGraphFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/BlueprintGeneratedClass.h"));
				MetaData->SetValue(NewProp_UberGraphFramePointerProperty, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/BlueprintGeneratedClass.h"));
				MetaData->SetValue(NewProp_InheritableComponentHandler, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/BlueprintGeneratedClass.h"));
				MetaData->SetValue(NewProp_InheritableComponentHandler, TEXT("ToolTip"), TEXT("Stores data to override (in children classes) components (created by SCS) from parent classes"));
				MetaData->SetValue(NewProp_SimpleConstructionScript, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/BlueprintGeneratedClass.h"));
				MetaData->SetValue(NewProp_SimpleConstructionScript, TEXT("ToolTip"), TEXT("'Simple' construction script - graph of components to instance"));
				MetaData->SetValue(NewProp_Timelines, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/BlueprintGeneratedClass.h"));
				MetaData->SetValue(NewProp_Timelines, TEXT("ToolTip"), TEXT("Array of templates for timelines that should be created"));
				MetaData->SetValue(NewProp_ComponentTemplates, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_ComponentTemplates, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/BlueprintGeneratedClass.h"));
				MetaData->SetValue(NewProp_ComponentTemplates, TEXT("ToolTip"), TEXT("Array of component template objects, used by AddComponent function"));
				MetaData->SetValue(NewProp_DynamicBindingObjects, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/BlueprintGeneratedClass.h"));
				MetaData->SetValue(NewProp_DynamicBindingObjects, TEXT("ToolTip"), TEXT("Array of objects containing information for dynamically binding delegates to functions in this blueprint"));
				MetaData->SetValue(NewProp_NumReplicatedProperties, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/BlueprintGeneratedClass.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBlueprintGeneratedClass(Z_Construct_UClass_UBlueprintGeneratedClass, TEXT("UBlueprintGeneratedClass"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBlueprintGeneratedClass);
	UScriptStruct* Z_Construct_UScriptStruct_FAnimBlueprintDebugData()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimBlueprintDebugData_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("AnimBlueprintDebugData"), sizeof(FAnimBlueprintDebugData), Get_Z_Construct_UScriptStruct_FAnimBlueprintDebugData_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimBlueprintDebugData"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FAnimBlueprintDebugData>, EStructFlags(0x00000201));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimBlueprintGeneratedClass.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("This structure represents animation-related debugging information for an entire AnimBlueprint\n(general debug information for the event graph, etc... is still contained in a FBlueprintDebugData structure)"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimBlueprintDebugData_CRC() { return 3681198602U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimationFrameSnapshot()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimationFrameSnapshot_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("AnimationFrameSnapshot"), sizeof(FAnimationFrameSnapshot), Get_Z_Construct_UScriptStruct_FAnimationFrameSnapshot_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimationFrameSnapshot"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FAnimationFrameSnapshot>, EStructFlags(0x00000001));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimBlueprintGeneratedClass.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("This structure represents debugging information for a frame snapshot"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimationFrameSnapshot_CRC() { return 1241539564U; }
	UScriptStruct* Z_Construct_UScriptStruct_FStateMachineDebugData()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FStateMachineDebugData_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("StateMachineDebugData"), sizeof(FStateMachineDebugData), Get_Z_Construct_UScriptStruct_FStateMachineDebugData_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("StateMachineDebugData"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FStateMachineDebugData>, EStructFlags(0x00000001));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimBlueprintGeneratedClass.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("This structure represents debugging information for a single state machine"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FStateMachineDebugData_CRC() { return 599827199U; }
	UClass* Z_Construct_UClass_UAnimBlueprintGeneratedClass_NoRegister()
	{
		return UAnimBlueprintGeneratedClass::StaticClass();
	}
	UClass* Z_Construct_UClass_UAnimBlueprintGeneratedClass()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBlueprintGeneratedClass();
			Z_Construct_UPackage_Engine();
			OuterClass = UAnimBlueprintGeneratedClass::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_RootAnimNodeIndex = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RootAnimNodeIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(RootAnimNodeIndex, UAnimBlueprintGeneratedClass), 0x0000000000000000);
				UProperty* NewProp_AnimNotifies = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AnimNotifies"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(AnimNotifies, UAnimBlueprintGeneratedClass), 0x0000008000000000);
				UProperty* NewProp_AnimNotifies_Inner = new(EC_InternalUseOnlyConstructor, NewProp_AnimNotifies, TEXT("AnimNotifies"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000008000000000, Z_Construct_UScriptStruct_FAnimNotifyEvent());
				UProperty* NewProp_TargetSkeleton = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TargetSkeleton"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(TargetSkeleton, UAnimBlueprintGeneratedClass), 0x0000000000000000, Z_Construct_UClass_USkeleton_NoRegister());
				UProperty* NewProp_BakedStateMachines = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BakedStateMachines"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(BakedStateMachines, UAnimBlueprintGeneratedClass), 0x0000000000000000);
				UProperty* NewProp_BakedStateMachines_Inner = new(EC_InternalUseOnlyConstructor, NewProp_BakedStateMachines, TEXT("BakedStateMachines"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FBakedAnimationStateMachine());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Animation/AnimBlueprintGeneratedClass.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimBlueprintGeneratedClass.h"));
				MetaData->SetValue(NewProp_RootAnimNodeIndex, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimBlueprintGeneratedClass.h"));
				MetaData->SetValue(NewProp_RootAnimNodeIndex, TEXT("ToolTip"), TEXT("The index of the root node in the animation tree"));
				MetaData->SetValue(NewProp_AnimNotifies, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimBlueprintGeneratedClass.h"));
				MetaData->SetValue(NewProp_AnimNotifies, TEXT("ToolTip"), TEXT("A list of anim notifies that state machines (or anything else) may reference"));
				MetaData->SetValue(NewProp_TargetSkeleton, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimBlueprintGeneratedClass.h"));
				MetaData->SetValue(NewProp_TargetSkeleton, TEXT("ToolTip"), TEXT("Target skeleton for this blueprint class"));
				MetaData->SetValue(NewProp_BakedStateMachines, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimBlueprintGeneratedClass.h"));
				MetaData->SetValue(NewProp_BakedStateMachines, TEXT("ToolTip"), TEXT("List of state machines present in this blueprint class"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UAnimBlueprintGeneratedClass(Z_Construct_UClass_UAnimBlueprintGeneratedClass, TEXT("UAnimBlueprintGeneratedClass"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UAnimBlueprintGeneratedClass);
	UScriptStruct* Z_Construct_UScriptStruct_FKShapeElem()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FKShapeElem_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("KShapeElem"), sizeof(FKShapeElem), Get_Z_Construct_UScriptStruct_FKShapeElem_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("KShapeElem"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FKShapeElem>, EStructFlags(0x00000001));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/ShapeElem.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Sphere shape used for collision"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FKShapeElem_CRC() { return 3568372672U; }
	UScriptStruct* Z_Construct_UScriptStruct_FKConvexElem()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FKConvexElem_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("KConvexElem"), sizeof(FKConvexElem), Get_Z_Construct_UScriptStruct_FKConvexElem_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("KConvexElem"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FKShapeElem(), new UScriptStruct::TCppStructOps<FKConvexElem>, EStructFlags(0x00000001));
			UProperty* NewProp_Transform = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Transform"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Transform, FKConvexElem), 0x0000000000000000, Z_Construct_UScriptStruct_FTransform());
			UProperty* NewProp_ElemBox = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ElemBox"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ElemBox, FKConvexElem), 0x0000000000000000, Z_Construct_UScriptStruct_FBox());
			UProperty* NewProp_VertexData = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("VertexData"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(VertexData, FKConvexElem), 0x0000000000000000);
			UProperty* NewProp_VertexData_Inner = new(EC_InternalUseOnlyConstructor, NewProp_VertexData, TEXT("VertexData"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FVector());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/ConvexElem.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("One convex hull, used for simplified collision."));
			MetaData->SetValue(NewProp_Transform, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/ConvexElem.h"));
			MetaData->SetValue(NewProp_Transform, TEXT("ToolTip"), TEXT("Transform of this element"));
			MetaData->SetValue(NewProp_ElemBox, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/ConvexElem.h"));
			MetaData->SetValue(NewProp_ElemBox, TEXT("ToolTip"), TEXT("Bounding box of this convex hull."));
			MetaData->SetValue(NewProp_VertexData, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/ConvexElem.h"));
			MetaData->SetValue(NewProp_VertexData, TEXT("ToolTip"), TEXT("Array of indices that make up the convex hull."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FKConvexElem_CRC() { return 2887210316U; }
	UScriptStruct* Z_Construct_UScriptStruct_FKBoxElem()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FKBoxElem_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("KBoxElem"), sizeof(FKBoxElem), Get_Z_Construct_UScriptStruct_FKBoxElem_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("KBoxElem"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FKShapeElem(), new UScriptStruct::TCppStructOps<FKBoxElem>, EStructFlags(0x00000001));
			UProperty* NewProp_Z = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Z"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Z, FKBoxElem), 0x0000000000020001);
			UProperty* NewProp_Y = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Y"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Y, FKBoxElem), 0x0000000000020001);
			UProperty* NewProp_X = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("X"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(X, FKBoxElem), 0x0000000000020001);
			UProperty* NewProp_Orientation = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Orientation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Orientation, FKBoxElem), 0x0000000000020001, Z_Construct_UScriptStruct_FQuat());
			UProperty* NewProp_Center = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Center"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Center, FKBoxElem), 0x0000000000020001, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_TM = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TM"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TM_DEPRECATED, FKBoxElem), 0x0000000020000000, Z_Construct_UScriptStruct_FMatrix());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/BoxElem.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Box shape used for collision"));
			MetaData->SetValue(NewProp_Z, TEXT("Category"), TEXT("KBoxElem"));
			MetaData->SetValue(NewProp_Z, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/BoxElem.h"));
			MetaData->SetValue(NewProp_Z, TEXT("ToolTip"), TEXT("length (not radius)"));
			MetaData->SetValue(NewProp_Y, TEXT("Category"), TEXT("KBoxElem"));
			MetaData->SetValue(NewProp_Y, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/BoxElem.h"));
			MetaData->SetValue(NewProp_X, TEXT("Category"), TEXT("KBoxElem"));
			MetaData->SetValue(NewProp_X, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/BoxElem.h"));
			MetaData->SetValue(NewProp_Orientation, TEXT("Category"), TEXT("KBoxElem"));
			MetaData->SetValue(NewProp_Orientation, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/BoxElem.h"));
			MetaData->SetValue(NewProp_Center, TEXT("Category"), TEXT("KBoxElem"));
			MetaData->SetValue(NewProp_Center, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/BoxElem.h"));
			MetaData->SetValue(NewProp_TM, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/BoxElem.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FKBoxElem_CRC() { return 3820967993U; }
	UScriptStruct* Z_Construct_UScriptStruct_FKSphereElem()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FKSphereElem_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("KSphereElem"), sizeof(FKSphereElem), Get_Z_Construct_UScriptStruct_FKSphereElem_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("KSphereElem"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FKShapeElem(), new UScriptStruct::TCppStructOps<FKSphereElem>, EStructFlags(0x00000001));
			UProperty* NewProp_Radius = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Radius"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Radius, FKSphereElem), 0x0000000000020001);
			UProperty* NewProp_Center = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Center"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Center, FKSphereElem), 0x0000000000020001, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_TM = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TM"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TM_DEPRECATED, FKSphereElem), 0x0000000020000000, Z_Construct_UScriptStruct_FMatrix());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/SphereElem.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Sphere shape used for collision"));
			MetaData->SetValue(NewProp_Radius, TEXT("Category"), TEXT("KSphereElem"));
			MetaData->SetValue(NewProp_Radius, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/SphereElem.h"));
			MetaData->SetValue(NewProp_Center, TEXT("Category"), TEXT("KSphereElem"));
			MetaData->SetValue(NewProp_Center, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/SphereElem.h"));
			MetaData->SetValue(NewProp_TM, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/SphereElem.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FKSphereElem_CRC() { return 4028768055U; }
	UScriptStruct* Z_Construct_UScriptStruct_FKSphylElem()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FKSphylElem_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("KSphylElem"), sizeof(FKSphylElem), Get_Z_Construct_UScriptStruct_FKSphylElem_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("KSphylElem"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FKShapeElem(), new UScriptStruct::TCppStructOps<FKSphylElem>, EStructFlags(0x00000001));
			UProperty* NewProp_Length = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Length"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Length, FKSphylElem), 0x0000000000020001);
			UProperty* NewProp_Radius = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Radius"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Radius, FKSphylElem), 0x0000000000020001);
			UProperty* NewProp_Orientation = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Orientation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Orientation, FKSphylElem), 0x0000000000020001, Z_Construct_UScriptStruct_FQuat());
			UProperty* NewProp_Center = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Center"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Center, FKSphylElem), 0x0000000000020001, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_TM = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TM"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TM_DEPRECATED, FKSphylElem), 0x0000000020000000, Z_Construct_UScriptStruct_FMatrix());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/SphylElem.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Capsule shape used for collision"));
			MetaData->SetValue(NewProp_Length, TEXT("Category"), TEXT("KSphylElem"));
			MetaData->SetValue(NewProp_Length, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/SphylElem.h"));
			MetaData->SetValue(NewProp_Length, TEXT("ToolTip"), TEXT("This is of line-segment ie. add Radius to both ends to find total length."));
			MetaData->SetValue(NewProp_Radius, TEXT("Category"), TEXT("KSphylElem"));
			MetaData->SetValue(NewProp_Radius, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/SphylElem.h"));
			MetaData->SetValue(NewProp_Orientation, TEXT("Category"), TEXT("KBoxElem"));
			MetaData->SetValue(NewProp_Orientation, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/SphylElem.h"));
			MetaData->SetValue(NewProp_Center, TEXT("Category"), TEXT("KBoxElem"));
			MetaData->SetValue(NewProp_Center, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/SphylElem.h"));
			MetaData->SetValue(NewProp_TM, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/SphylElem.h"));
			MetaData->SetValue(NewProp_TM, TEXT("ToolTip"), TEXT("The transform assumes the sphyl axis points down Z."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FKSphylElem_CRC() { return 495502572U; }
	UScriptStruct* Z_Construct_UScriptStruct_FKAggregateGeom()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FKAggregateGeom_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("KAggregateGeom"), sizeof(FKAggregateGeom), Get_Z_Construct_UScriptStruct_FKAggregateGeom_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("KAggregateGeom"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FKAggregateGeom>, EStructFlags(0x00000201));
			UProperty* NewProp_ConvexElems = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ConvexElems"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ConvexElems, FKAggregateGeom), 0x0000000000000041);
			UProperty* NewProp_ConvexElems_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ConvexElems, TEXT("ConvexElems"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FKConvexElem());
			UProperty* NewProp_SphylElems = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SphylElems"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(SphylElems, FKAggregateGeom), 0x0000000000000041);
			UProperty* NewProp_SphylElems_Inner = new(EC_InternalUseOnlyConstructor, NewProp_SphylElems, TEXT("SphylElems"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FKSphylElem());
			UProperty* NewProp_BoxElems = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BoxElems"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(BoxElems, FKAggregateGeom), 0x0000000000000041);
			UProperty* NewProp_BoxElems_Inner = new(EC_InternalUseOnlyConstructor, NewProp_BoxElems, TEXT("BoxElems"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FKBoxElem());
			UProperty* NewProp_SphereElems = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SphereElems"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(SphereElems, FKAggregateGeom), 0x0000000000000041);
			UProperty* NewProp_SphereElems_Inner = new(EC_InternalUseOnlyConstructor, NewProp_SphereElems, TEXT("SphereElems"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FKSphereElem());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/AggregateGeom.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Container for an aggregate of collision shapes"));
			MetaData->SetValue(NewProp_ConvexElems, TEXT("Category"), TEXT("KAggregateGeom"));
			MetaData->SetValue(NewProp_ConvexElems, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/AggregateGeom.h"));
			MetaData->SetValue(NewProp_SphylElems, TEXT("Category"), TEXT("KAggregateGeom"));
			MetaData->SetValue(NewProp_SphylElems, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/AggregateGeom.h"));
			MetaData->SetValue(NewProp_BoxElems, TEXT("Category"), TEXT("KAggregateGeom"));
			MetaData->SetValue(NewProp_BoxElems, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/AggregateGeom.h"));
			MetaData->SetValue(NewProp_SphereElems, TEXT("Category"), TEXT("KAggregateGeom"));
			MetaData->SetValue(NewProp_SphereElems, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/AggregateGeom.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FKAggregateGeom_CRC() { return 341231557U; }
	UEnum* Z_Construct_UEnum_Engine_EBodyCollisionResponse()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EBodyCollisionResponse_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EBodyCollisionResponse"), 0, Get_Z_Construct_UEnum_Engine_EBodyCollisionResponse_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EBodyCollisionResponse"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EBodyCollisionResponse::BodyCollision_Enabled")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EBodyCollisionResponse::BodyCollision_Disabled")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EBodyCollisionResponse::BodyCollision_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BodyCollision_Disabled.DisplayName"), TEXT("Disabled"));
			MetaData->SetValue(ReturnEnum, TEXT("BodyCollision_Enabled.DisplayName"), TEXT("Enabled"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/BodySetupEnums.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EBodyCollisionResponse_CRC() { return 511279598U; }
	UEnum* Z_Construct_UEnum_Engine_EPhysicsType()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EPhysicsType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EPhysicsType"), 0, Get_Z_Construct_UEnum_Engine_EPhysicsType_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EPhysicsType"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PhysType_Default")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PhysType_Kinematic")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PhysType_Simulated")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PhysType_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/BodySetupEnums.h"));
			MetaData->SetValue(ReturnEnum, TEXT("PhysType_Default.DisplayName"), TEXT("Default"));
			MetaData->SetValue(ReturnEnum, TEXT("PhysType_Default.ToolTip"), TEXT("Follow owner."));
			MetaData->SetValue(ReturnEnum, TEXT("PhysType_Kinematic.DisplayName"), TEXT("Kinematic"));
			MetaData->SetValue(ReturnEnum, TEXT("PhysType_Kinematic.ToolTip"), TEXT("Do not follow owner, but make kinematic."));
			MetaData->SetValue(ReturnEnum, TEXT("PhysType_Simulated.DisplayName"), TEXT("Simulated"));
			MetaData->SetValue(ReturnEnum, TEXT("PhysType_Simulated.ToolTip"), TEXT("Do not follow owner, but simulate."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EPhysicsType_CRC() { return 1209422108U; }
	UEnum* Z_Construct_UEnum_Engine_ECollisionTraceFlag()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_ECollisionTraceFlag_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ECollisionTraceFlag"), 0, Get_Z_Construct_UEnum_Engine_ECollisionTraceFlag_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ECollisionTraceFlag"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("CTF_UseDefault")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("CTF_UseSimpleAsComplex")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("CTF_UseComplexAsSimple")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("CTF_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("CTF_UseComplexAsSimple.DisplayName"), TEXT("Use Complex Collision As Simple"));
			MetaData->SetValue(ReturnEnum, TEXT("CTF_UseComplexAsSimple.ToolTip"), TEXT("Use complex collision (per poly) for all collision tests."));
			MetaData->SetValue(ReturnEnum, TEXT("CTF_UseDefault.DisplayName"), TEXT("Default"));
			MetaData->SetValue(ReturnEnum, TEXT("CTF_UseDefault.ToolTip"), TEXT("Keep simple/complex separate for each test. This is the default."));
			MetaData->SetValue(ReturnEnum, TEXT("CTF_UseSimpleAsComplex.DisplayName"), TEXT("Use Simple Collision As Complex"));
			MetaData->SetValue(ReturnEnum, TEXT("CTF_UseSimpleAsComplex.ToolTip"), TEXT("Use simple collision for all collision tests."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/BodySetupEnums.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_ECollisionTraceFlag_CRC() { return 2817082331U; }
	UClass* Z_Construct_UClass_UBodySetup_NoRegister()
	{
		return UBodySetup::StaticClass();
	}
	UClass* Z_Construct_UClass_UBodySetup()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UBodySetup::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_BuildScale3D = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BuildScale3D"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(BuildScale3D, UBodySetup), 0x0000000000000000, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_BuildScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BuildScale"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(BuildScale_DEPRECATED, UBodySetup), 0x0000000020000000);
				UProperty* NewProp_WalkableSlopeOverride = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WalkableSlopeOverride"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(WalkableSlopeOverride, UBodySetup), 0x0000040000000001, Z_Construct_UScriptStruct_FWalkableSlopeOverride());
				UProperty* NewProp_DefaultInstance = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultInstance"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DefaultInstance, UBodySetup), 0x0000000000000001, Z_Construct_UScriptStruct_FBodyInstance());
				UProperty* NewProp_CollisionTraceFlag = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CollisionTraceFlag"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(CollisionTraceFlag, UBodySetup), 0x0000000000000001, Z_Construct_UEnum_Engine_ECollisionTraceFlag());
				UProperty* NewProp_CollisionReponse = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CollisionReponse"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(CollisionReponse, UBodySetup), 0x0000000000000001, Z_Construct_UEnum_Engine_EBodyCollisionResponse());
				UProperty* NewProp_PhysMaterial = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PhysMaterial"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(PhysMaterial, UBodySetup), 0x0000000000000001, Z_Construct_UClass_UPhysicalMaterial_NoRegister());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bGenerateMirroredCollision, UBodySetup, uint8);
				UProperty* NewProp_bGenerateMirroredCollision = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bGenerateMirroredCollision"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bGenerateMirroredCollision, UBodySetup), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bGenerateMirroredCollision, UBodySetup), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSharedCookedData, UBodySetup, uint8);
				UProperty* NewProp_bSharedCookedData = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bSharedCookedData"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSharedCookedData, UBodySetup), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bSharedCookedData, UBodySetup), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bGenerateNonMirroredCollision, UBodySetup, uint8);
				UProperty* NewProp_bGenerateNonMirroredCollision = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bGenerateNonMirroredCollision"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bGenerateNonMirroredCollision, UBodySetup), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bGenerateNonMirroredCollision, UBodySetup), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDoubleSidedGeometry, UBodySetup, uint8);
				UProperty* NewProp_bDoubleSidedGeometry = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bDoubleSidedGeometry"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDoubleSidedGeometry, UBodySetup), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bDoubleSidedGeometry, UBodySetup), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bMeshCollideAll, UBodySetup, uint8);
				UProperty* NewProp_bMeshCollideAll = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bMeshCollideAll"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bMeshCollideAll, UBodySetup), 0x0000000000002000, CPP_BOOL_PROPERTY_BITMASK(bMeshCollideAll, UBodySetup), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bConsiderForBounds, UBodySetup, uint8);
				UProperty* NewProp_bConsiderForBounds = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bConsiderForBounds"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bConsiderForBounds, UBodySetup), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bConsiderForBounds, UBodySetup), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAlwaysFullAnimWeight_DEPRECATED, UBodySetup, uint8);
				UProperty* NewProp_bAlwaysFullAnimWeight = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAlwaysFullAnimWeight"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAlwaysFullAnimWeight_DEPRECATED, UBodySetup), 0x0000000020000000, CPP_BOOL_PROPERTY_BITMASK(bAlwaysFullAnimWeight_DEPRECATED, UBodySetup), sizeof(uint8), false);
				UProperty* NewProp_PhysicsType = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PhysicsType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(PhysicsType, UBodySetup), 0x0000000000000001, Z_Construct_UEnum_Engine_EPhysicsType());
				UProperty* NewProp_BoneName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BoneName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(BoneName, UBodySetup), 0x0000000000020001);
				UProperty* NewProp_AggGeom = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AggGeom"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(AggGeom, UBodySetup), 0x0000000000000000, Z_Construct_UScriptStruct_FKAggregateGeom());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("PhysicsEngine/BodySetup.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/BodySetup.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("BodySetup contains all collision information that is associated with a single asset.\nA single BodySetup instance is shared among many BodyInstances so that geometry data is not duplicated.\nAssets typically implement a GetBodySetup function that is used during physics state creation.\n\n@see GetBodySetup\n@see FBodyInstance"));
				MetaData->SetValue(NewProp_BuildScale3D, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/BodySetup.h"));
				MetaData->SetValue(NewProp_BuildScale3D, TEXT("ToolTip"), TEXT("Build scale for this body setup (static mesh settings define this value)"));
				MetaData->SetValue(NewProp_BuildScale, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/BodySetup.h"));
				MetaData->SetValue(NewProp_WalkableSlopeOverride, TEXT("Category"), TEXT("Physics"));
				MetaData->SetValue(NewProp_WalkableSlopeOverride, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/BodySetup.h"));
				MetaData->SetValue(NewProp_WalkableSlopeOverride, TEXT("ToolTip"), TEXT("Custom walkable slope setting for this body."));
				MetaData->SetValue(NewProp_DefaultInstance, TEXT("Category"), TEXT("Collision"));
				MetaData->SetValue(NewProp_DefaultInstance, TEXT("FullyExpand"), TEXT("true"));
				MetaData->SetValue(NewProp_DefaultInstance, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/BodySetup.h"));
				MetaData->SetValue(NewProp_DefaultInstance, TEXT("ToolTip"), TEXT("Default properties of the body instance, copied into objects on instantiation, was URB_BodyInstance"));
				MetaData->SetValue(NewProp_CollisionTraceFlag, TEXT("Category"), TEXT("Collision"));
				MetaData->SetValue(NewProp_CollisionTraceFlag, TEXT("DisplayName"), TEXT("Collision Complexity"));
				MetaData->SetValue(NewProp_CollisionTraceFlag, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/BodySetup.h"));
				MetaData->SetValue(NewProp_CollisionTraceFlag, TEXT("ToolTip"), TEXT("Collision Trace behavior - by default, it will keep simple(convex)/complex(per-poly) separate *"));
				MetaData->SetValue(NewProp_CollisionReponse, TEXT("Category"), TEXT("Collision"));
				MetaData->SetValue(NewProp_CollisionReponse, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/BodySetup.h"));
				MetaData->SetValue(NewProp_CollisionReponse, TEXT("ToolTip"), TEXT("Collision Type for this body. This eventually changes response to collision to others *"));
				MetaData->SetValue(NewProp_PhysMaterial, TEXT("Category"), TEXT("Physics"));
				MetaData->SetValue(NewProp_PhysMaterial, TEXT("DisplayName"), TEXT("Simple Collision Physical Material"));
				MetaData->SetValue(NewProp_PhysMaterial, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/BodySetup.h"));
				MetaData->SetValue(NewProp_PhysMaterial, TEXT("ToolTip"), TEXT("Physical material to use for simple collision on this body. Encodes information about density, friction etc."));
				MetaData->SetValue(NewProp_bGenerateMirroredCollision, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/BodySetup.h"));
				MetaData->SetValue(NewProp_bGenerateMirroredCollision, TEXT("ToolTip"), TEXT("Should we generate data necessary to support collision on mirrored versions of this mesh.\nThis halves the collision data size for this mesh, but disables collision on mirrored instances of the body."));
				MetaData->SetValue(NewProp_bSharedCookedData, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/BodySetup.h"));
				MetaData->SetValue(NewProp_bSharedCookedData, TEXT("ToolTip"), TEXT("Whether the cooked data is shared by multiple body setups. This is needed for per poly collision case where we don't want to duplicate cooked data, but still need multiple body setups for in place geometry changes"));
				MetaData->SetValue(NewProp_bGenerateNonMirroredCollision, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/BodySetup.h"));
				MetaData->SetValue(NewProp_bGenerateNonMirroredCollision, TEXT("ToolTip"), TEXT("Should we generate data necessary to support collision on normal (non-mirrored) versions of this body."));
				MetaData->SetValue(NewProp_bDoubleSidedGeometry, TEXT("Category"), TEXT("Physics"));
				MetaData->SetValue(NewProp_bDoubleSidedGeometry, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/BodySetup.h"));
				MetaData->SetValue(NewProp_bDoubleSidedGeometry, TEXT("ToolTip"), TEXT("If true, the physics triangle mesh will use double sided faces when doing scene queries.\nThis is useful for planes and single sided meshes that need traces to work on both sides."));
				MetaData->SetValue(NewProp_bMeshCollideAll, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/BodySetup.h"));
				MetaData->SetValue(NewProp_bMeshCollideAll, TEXT("ToolTip"), TEXT("If true, the physics of this mesh (only affects static meshes) will always contain ALL elements from the mesh - not just the ones enabled for collision.\nThis is useful for forcing high detail collisions using the entire render mesh."));
				MetaData->SetValue(NewProp_bConsiderForBounds, TEXT("Category"), TEXT("BodySetup"));
				MetaData->SetValue(NewProp_bConsiderForBounds, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/BodySetup.h"));
				MetaData->SetValue(NewProp_bConsiderForBounds, TEXT("ToolTip"), TEXT("Should this BodySetup be considered for the bounding box of the PhysicsAsset (and hence SkeletalMeshComponent).\nThere is a speed improvement from having less BodySetups processed each frame when updating the bounds."));
				MetaData->SetValue(NewProp_bAlwaysFullAnimWeight, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/BodySetup.h"));
				MetaData->SetValue(NewProp_bAlwaysFullAnimWeight, TEXT("ToolTip"), TEXT("If true (and bEnableFullAnimWeightBodies in SkelMeshComp is true), the physics of this bone will always be blended into the skeletal mesh, regardless of what PhysicsWeight of the SkelMeshComp is.\nThis is useful for bones that should always be physics, even when blending physics in and out for hit reactions (eg cloth or pony-tails)."));
				MetaData->SetValue(NewProp_PhysicsType, TEXT("Category"), TEXT("Physics"));
				MetaData->SetValue(NewProp_PhysicsType, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/BodySetup.h"));
				MetaData->SetValue(NewProp_PhysicsType, TEXT("ToolTip"), TEXT("If Unfixed it will use physics. If fixed, it will use kinematic. Default will inherit from OwnerComponent's behavior."));
				MetaData->SetValue(NewProp_BoneName, TEXT("Category"), TEXT("BodySetup"));
				MetaData->SetValue(NewProp_BoneName, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/BodySetup.h"));
				MetaData->SetValue(NewProp_BoneName, TEXT("ToolTip"), TEXT("Used in the PhysicsAsset case. Associates this Body with Bone in a skeletal mesh."));
				MetaData->SetValue(NewProp_AggGeom, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/BodySetup.h"));
				MetaData->SetValue(NewProp_AggGeom, TEXT("ToolTip"), TEXT("Simplified collision representation of this"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBodySetup(Z_Construct_UClass_UBodySetup, TEXT("UBodySetup"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBodySetup);
	UScriptStruct* Z_Construct_UScriptStruct_FAggregateGeometry2D()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FAggregateGeometry2D_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("AggregateGeometry2D"), sizeof(FAggregateGeometry2D), Get_Z_Construct_UScriptStruct_FAggregateGeometry2D_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AggregateGeometry2D"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FAggregateGeometry2D>, EStructFlags(0x00000201));
			UProperty* NewProp_ConvexElements = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ConvexElements"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ConvexElements, FAggregateGeometry2D), 0x0000000000000041);
			UProperty* NewProp_ConvexElements_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ConvexElements, TEXT("ConvexElements"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FConvexElement2D());
			UProperty* NewProp_BoxElements = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BoxElements"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(BoxElements, FAggregateGeometry2D), 0x0000000000000041);
			UProperty* NewProp_BoxElements_Inner = new(EC_InternalUseOnlyConstructor, NewProp_BoxElements, TEXT("BoxElements"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FBoxElement2D());
			UProperty* NewProp_CircleElements = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CircleElements"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(CircleElements, FAggregateGeometry2D), 0x0000000000000041);
			UProperty* NewProp_CircleElements_Inner = new(EC_InternalUseOnlyConstructor, NewProp_CircleElements, TEXT("CircleElements"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FCircleElement2D());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/AggregateGeometry2D.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Container for an aggregate of 2D collision shapes"));
			MetaData->SetValue(NewProp_ConvexElements, TEXT("Category"), TEXT("KAggregateGeom"));
			MetaData->SetValue(NewProp_ConvexElements, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/AggregateGeometry2D.h"));
			MetaData->SetValue(NewProp_BoxElements, TEXT("Category"), TEXT("KAggregateGeom"));
			MetaData->SetValue(NewProp_BoxElements, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/AggregateGeometry2D.h"));
			MetaData->SetValue(NewProp_CircleElements, TEXT("Category"), TEXT("KAggregateGeom"));
			MetaData->SetValue(NewProp_CircleElements, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/AggregateGeometry2D.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAggregateGeometry2D_CRC() { return 1912137441U; }
	UScriptStruct* Z_Construct_UScriptStruct_FBoxElement2D()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FBoxElement2D_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("BoxElement2D"), sizeof(FBoxElement2D), Get_Z_Construct_UScriptStruct_FBoxElement2D_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BoxElement2D"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FBoxElement2D>, EStructFlags(0x00000201));
			UProperty* NewProp_Angle = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Angle"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Angle, FBoxElement2D), 0x0000000000020001);
			UProperty* NewProp_Height = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Height"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Height, FBoxElement2D), 0x0000000000020001);
			UProperty* NewProp_Width = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Width"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Width, FBoxElement2D), 0x0000000000020001);
			UProperty* NewProp_Center = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Center"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Center, FBoxElement2D), 0x0000000000020001, Z_Construct_UScriptStruct_FVector2D());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/AggregateGeometry2D.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Box shape used for collision"));
			MetaData->SetValue(NewProp_Angle, TEXT("Category"), TEXT("KBoxElem"));
			MetaData->SetValue(NewProp_Angle, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/AggregateGeometry2D.h"));
			MetaData->SetValue(NewProp_Angle, TEXT("ToolTip"), TEXT("Rotation of the box (in degrees)"));
			MetaData->SetValue(NewProp_Height, TEXT("Category"), TEXT("KBoxElem"));
			MetaData->SetValue(NewProp_Height, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/AggregateGeometry2D.h"));
			MetaData->SetValue(NewProp_Height, TEXT("ToolTip"), TEXT("Height of the box"));
			MetaData->SetValue(NewProp_Width, TEXT("Category"), TEXT("KBoxElem"));
			MetaData->SetValue(NewProp_Width, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/AggregateGeometry2D.h"));
			MetaData->SetValue(NewProp_Width, TEXT("ToolTip"), TEXT("Width of the box"));
			MetaData->SetValue(NewProp_Center, TEXT("Category"), TEXT("KBoxElem"));
			MetaData->SetValue(NewProp_Center, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/AggregateGeometry2D.h"));
			MetaData->SetValue(NewProp_Center, TEXT("ToolTip"), TEXT("Center of the box"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FBoxElement2D_CRC() { return 3905009903U; }
	UScriptStruct* Z_Construct_UScriptStruct_FCircleElement2D()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FCircleElement2D_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("CircleElement2D"), sizeof(FCircleElement2D), Get_Z_Construct_UScriptStruct_FCircleElement2D_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CircleElement2D"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FCircleElement2D>, EStructFlags(0x00000201));
			UProperty* NewProp_Radius = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Radius"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Radius, FCircleElement2D), 0x0000000000020001);
			UProperty* NewProp_Center = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Center"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Center, FCircleElement2D), 0x0000000000020001, Z_Construct_UScriptStruct_FVector2D());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/AggregateGeometry2D.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Sphere shape used for collision"));
			MetaData->SetValue(NewProp_Radius, TEXT("Category"), TEXT("KSphereElem"));
			MetaData->SetValue(NewProp_Radius, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/AggregateGeometry2D.h"));
			MetaData->SetValue(NewProp_Center, TEXT("Category"), TEXT("KSphereElem"));
			MetaData->SetValue(NewProp_Center, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/AggregateGeometry2D.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FCircleElement2D_CRC() { return 2393727920U; }
	UScriptStruct* Z_Construct_UScriptStruct_FConvexElement2D()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FConvexElement2D_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("ConvexElement2D"), sizeof(FConvexElement2D), Get_Z_Construct_UScriptStruct_FConvexElement2D_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ConvexElement2D"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FConvexElement2D>, EStructFlags(0x00000201));
			UProperty* NewProp_VertexData = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("VertexData"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(VertexData, FConvexElement2D), 0x0000000000000000);
			UProperty* NewProp_VertexData_Inner = new(EC_InternalUseOnlyConstructor, NewProp_VertexData, TEXT("VertexData"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FVector2D());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/AggregateGeometry2D.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("One convex hull, used for simplified collision."));
			MetaData->SetValue(NewProp_VertexData, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/AggregateGeometry2D.h"));
			MetaData->SetValue(NewProp_VertexData, TEXT("ToolTip"), TEXT("Vertices that lie on the convex hull"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FConvexElement2D_CRC() { return 3622330751U; }
	UClass* Z_Construct_UClass_UBodySetup2D_NoRegister()
	{
		return UBodySetup2D::StaticClass();
	}
	UClass* Z_Construct_UClass_UBodySetup2D()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBodySetup();
			Z_Construct_UPackage_Engine();
			OuterClass = UBodySetup2D::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_AggGeom2D = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AggGeom2D"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(AggGeom2D, UBodySetup2D), 0x0000000000000000, Z_Construct_UScriptStruct_FAggregateGeometry2D());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("PhysicsEngine/BodySetup2D.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/BodySetup2D.h"));
				MetaData->SetValue(NewProp_AggGeom2D, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/BodySetup2D.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBodySetup2D(Z_Construct_UClass_UBodySetup2D, TEXT("UBodySetup2D"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBodySetup2D);
	UScriptStruct* Z_Construct_UScriptStruct_FInputBlendPose()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FInputBlendPose_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("InputBlendPose"), sizeof(FInputBlendPose), Get_Z_Construct_UScriptStruct_FInputBlendPose_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("InputBlendPose"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FInputBlendPose>, EStructFlags(0x00000001));
			UProperty* NewProp_BranchFilters = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BranchFilters"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(BranchFilters, FInputBlendPose), 0x0000000000000001);
			UProperty* NewProp_BranchFilters_Inner = new(EC_InternalUseOnlyConstructor, NewProp_BranchFilters, TEXT("BranchFilters"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FBranchFilter());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimData/BoneMaskFilter.h"));
			MetaData->SetValue(NewProp_BranchFilters, TEXT("Category"), TEXT("Filter"));
			MetaData->SetValue(NewProp_BranchFilters, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimData/BoneMaskFilter.h"));
			MetaData->SetValue(NewProp_BranchFilters, TEXT("ToolTip"), TEXT("Bone Name to filter *"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FInputBlendPose_CRC() { return 1594405513U; }
	UScriptStruct* Z_Construct_UScriptStruct_FBranchFilter()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FBranchFilter_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("BranchFilter"), sizeof(FBranchFilter), Get_Z_Construct_UScriptStruct_FBranchFilter_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BranchFilter"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FBranchFilter>, EStructFlags(0x00000001));
			UProperty* NewProp_BlendDepth = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BlendDepth"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(BlendDepth, FBranchFilter), 0x0000000000000001);
			UProperty* NewProp_BoneName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BoneName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(BoneName, FBranchFilter), 0x0000000000000001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimData/BoneMaskFilter.h"));
			MetaData->SetValue(NewProp_BlendDepth, TEXT("Category"), TEXT("Branch"));
			MetaData->SetValue(NewProp_BlendDepth, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimData/BoneMaskFilter.h"));
			MetaData->SetValue(NewProp_BlendDepth, TEXT("ToolTip"), TEXT("Blend Depth *"));
			MetaData->SetValue(NewProp_BoneName, TEXT("Category"), TEXT("Branch"));
			MetaData->SetValue(NewProp_BoneName, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimData/BoneMaskFilter.h"));
			MetaData->SetValue(NewProp_BoneName, TEXT("ToolTip"), TEXT("Bone Name to filter *"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FBranchFilter_CRC() { return 2852633836U; }
	UClass* Z_Construct_UClass_UBoneMaskFilter_NoRegister()
	{
		return UBoneMaskFilter::StaticClass();
	}
	UClass* Z_Construct_UClass_UBoneMaskFilter()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UBoneMaskFilter::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_BlendPoses = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BlendPoses"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(BlendPoses, UBoneMaskFilter), 0x0000000000000001);
				UProperty* NewProp_BlendPoses_Inner = new(EC_InternalUseOnlyConstructor, NewProp_BlendPoses, TEXT("BlendPoses"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FInputBlendPose());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Animation/AnimData/BoneMaskFilter.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimData/BoneMaskFilter.h"));
				MetaData->SetValue(NewProp_BlendPoses, TEXT("Category"), TEXT("BoneMask"));
				MetaData->SetValue(NewProp_BlendPoses, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimData/BoneMaskFilter.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBoneMaskFilter(Z_Construct_UClass_UBoneMaskFilter, TEXT("UBoneMaskFilter"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBoneMaskFilter);
	UClass* Z_Construct_UClass_UBookMark_NoRegister()
	{
		return UBookMark::StaticClass();
	}
	UClass* Z_Construct_UClass_UBookMark()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UBookMark::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_HiddenLevels = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HiddenLevels"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(HiddenLevels, UBookMark), 0x0000000000000001);
				UProperty* NewProp_HiddenLevels_Inner = new(EC_InternalUseOnlyConstructor, NewProp_HiddenLevels, TEXT("HiddenLevels"), RF_Public|RF_Transient|RF_Native) UStrProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
				UProperty* NewProp_Rotation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Rotation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Rotation, UBookMark), 0x0000000000000001, Z_Construct_UScriptStruct_FRotator());
				UProperty* NewProp_Location = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Location"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Location, UBookMark), 0x0000000000000001, Z_Construct_UScriptStruct_FVector());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/BookMark.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/BookMark.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("A camera position the current level."));
				MetaData->SetValue(NewProp_HiddenLevels, TEXT("Category"), TEXT("BookMark"));
				MetaData->SetValue(NewProp_HiddenLevels, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/BookMark.h"));
				MetaData->SetValue(NewProp_HiddenLevels, TEXT("ToolTip"), TEXT("Array of levels that are hidden"));
				MetaData->SetValue(NewProp_Rotation, TEXT("Category"), TEXT("BookMark"));
				MetaData->SetValue(NewProp_Rotation, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/BookMark.h"));
				MetaData->SetValue(NewProp_Rotation, TEXT("ToolTip"), TEXT("Camera rotation"));
				MetaData->SetValue(NewProp_Location, TEXT("Category"), TEXT("BookMark"));
				MetaData->SetValue(NewProp_Location, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/BookMark.h"));
				MetaData->SetValue(NewProp_Location, TEXT("ToolTip"), TEXT("Camera position"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBookMark(Z_Construct_UClass_UBookMark, TEXT("UBookMark"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBookMark);
	UClass* Z_Construct_UClass_UBookMark2D_NoRegister()
	{
		return UBookMark2D::StaticClass();
	}
	UClass* Z_Construct_UClass_UBookMark2D()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UBookMark2D::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Location = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Location"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Location, UBookMark2D), 0x0000000000000001, Z_Construct_UScriptStruct_FIntPoint());
				UProperty* NewProp_Zoom2D = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Zoom2D"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Zoom2D, UBookMark2D), 0x0000000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/BookMark2D.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/BookMark2D.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Simple class to store 2D camera information."));
				MetaData->SetValue(NewProp_Location, TEXT("Category"), TEXT("BookMark2D"));
				MetaData->SetValue(NewProp_Location, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/BookMark2D.h"));
				MetaData->SetValue(NewProp_Location, TEXT("ToolTip"), TEXT("Location of the camera"));
				MetaData->SetValue(NewProp_Zoom2D, TEXT("Category"), TEXT("BookMark2D"));
				MetaData->SetValue(NewProp_Zoom2D, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/BookMark2D.h"));
				MetaData->SetValue(NewProp_Zoom2D, TEXT("ToolTip"), TEXT("Zoom of the camera"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBookMark2D(Z_Construct_UClass_UBookMark2D, TEXT("UBookMark2D"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBookMark2D);
	UClass* Z_Construct_UClass_UBreakpoint_NoRegister()
	{
		return UBreakpoint::StaticClass();
	}
	UClass* Z_Construct_UClass_UBreakpoint()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UBreakpoint::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bStepOnce_RemoveAfterHit, UBreakpoint, uint8);
				UProperty* NewProp_bStepOnce_RemoveAfterHit = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bStepOnce_RemoveAfterHit"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bStepOnce_RemoveAfterHit, UBreakpoint), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bStepOnce_RemoveAfterHit, UBreakpoint), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bStepOnce_WasPreviouslyDisabled, UBreakpoint, uint8);
				UProperty* NewProp_bStepOnce_WasPreviouslyDisabled = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bStepOnce_WasPreviouslyDisabled"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bStepOnce_WasPreviouslyDisabled, UBreakpoint), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bStepOnce_WasPreviouslyDisabled, UBreakpoint), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bStepOnce, UBreakpoint, uint8);
				UProperty* NewProp_bStepOnce = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bStepOnce"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bStepOnce, UBreakpoint), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bStepOnce, UBreakpoint), sizeof(uint8), false);
				UProperty* NewProp_Node = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Node"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Node, UBreakpoint), 0x0000000000000000, Z_Construct_UClass_UEdGraphNode_NoRegister());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnabled, UBreakpoint, uint8);
				UProperty* NewProp_bEnabled = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bEnabled"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnabled, UBreakpoint), 0x0000000000002000, CPP_BOOL_PROPERTY_BITMASK(bEnabled, UBreakpoint), sizeof(uint8), false);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/Breakpoint.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Breakpoint.h"));
				MetaData->SetValue(NewProp_bStepOnce_RemoveAfterHit, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Breakpoint.h"));
				MetaData->SetValue(NewProp_bStepOnce_WasPreviouslyDisabled, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Breakpoint.h"));
				MetaData->SetValue(NewProp_bStepOnce, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Breakpoint.h"));
				MetaData->SetValue(NewProp_bStepOnce, TEXT("ToolTip"), TEXT("Is this breakpoint auto-generated, and should be removed when next hit?"));
				MetaData->SetValue(NewProp_Node, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Breakpoint.h"));
				MetaData->SetValue(NewProp_Node, TEXT("ToolTip"), TEXT("Node that the breakpoint is placed on"));
				MetaData->SetValue(NewProp_bEnabled, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Breakpoint.h"));
				MetaData->SetValue(NewProp_bEnabled, TEXT("ToolTip"), TEXT("Is the breakpoint currently enabled?"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBreakpoint(Z_Construct_UClass_UBreakpoint, TEXT("UBreakpoint"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBreakpoint);
	UScriptStruct* Z_Construct_UScriptStruct_FBuilderPoly()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FBuilderPoly_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("BuilderPoly"), sizeof(FBuilderPoly), Get_Z_Construct_UScriptStruct_FBuilderPoly_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BuilderPoly"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FBuilderPoly>, EStructFlags(0x00000001));
			UProperty* NewProp_PolyFlags = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PolyFlags"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(PolyFlags, FBuilderPoly), 0x0000000000000000);
			UProperty* NewProp_ItemName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ItemName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(ItemName, FBuilderPoly), 0x0000000000000000);
			UProperty* NewProp_Direction = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Direction"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Direction, FBuilderPoly), 0x0000000000000000);
			UProperty* NewProp_VertexIndices = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("VertexIndices"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(VertexIndices, FBuilderPoly), 0x0000000000000000);
			UProperty* NewProp_VertexIndices_Inner = new(EC_InternalUseOnlyConstructor, NewProp_VertexIndices, TEXT("VertexIndices"), RF_Public|RF_Transient|RF_Native) UIntProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/BrushBuilder.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Internal state, not accessible to script."));
			MetaData->SetValue(NewProp_PolyFlags, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/BrushBuilder.h"));
			MetaData->SetValue(NewProp_ItemName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/BrushBuilder.h"));
			MetaData->SetValue(NewProp_Direction, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/BrushBuilder.h"));
			MetaData->SetValue(NewProp_VertexIndices, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/BrushBuilder.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FBuilderPoly_CRC() { return 1607657198U; }
	UClass* Z_Construct_UClass_UBrushBuilder_NoRegister()
	{
		return UBrushBuilder::StaticClass();
	}
	UClass* Z_Construct_UClass_UBrushBuilder()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UBrushBuilder::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080081;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(MergeCoplanars, UBrushBuilder, uint8);
				UProperty* NewProp_MergeCoplanars = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MergeCoplanars"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(MergeCoplanars, UBrushBuilder), 0x0000080000000000, CPP_BOOL_PROPERTY_BITMASK(MergeCoplanars, UBrushBuilder), sizeof(uint8), false);
				UProperty* NewProp_Layer = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Layer"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(Layer, UBrushBuilder), 0x0000080000000000);
				UProperty* NewProp_Polys = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Polys"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Polys, UBrushBuilder), 0x0000080000000000);
				UProperty* NewProp_Polys_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Polys, TEXT("Polys"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FBuilderPoly());
				UProperty* NewProp_Vertices = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Vertices"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Vertices, UBrushBuilder), 0x0000080000000000);
				UProperty* NewProp_Vertices_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Vertices, TEXT("Vertices"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FVector());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(NotifyBadParams, UBrushBuilder, uint8);
				UProperty* NewProp_NotifyBadParams = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NotifyBadParams"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(NotifyBadParams, UBrushBuilder), 0x0000000000002000, CPP_BOOL_PROPERTY_BITMASK(NotifyBadParams, UBrushBuilder), sizeof(uint8), false);
				UProperty* NewProp_ToolTip = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ToolTip"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ToolTip, UBrushBuilder), 0x0000000000000000);
				UProperty* NewProp_BitmapFilename = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BitmapFilename"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(BitmapFilename, UBrushBuilder), 0x0000000000000000);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/BrushBuilder.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/BrushBuilder.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Base class of UnrealEd brush builders.\n\n\nTips for writing brush builders:\n\n- Always validate the user-specified and call BadParameters function\n  if anything is wrong, instead of actually building geometry.\n  If you build an invalid brush due to bad user parameters, you'll\n  cause an extraordinary amount of pain for the poor user.\n\n- When generating polygons with more than 3 vertices, BE SURE all the\n  polygon's vertices are coplanar!  Out-of-plane polygons will cause\n  geometry to be corrupted."));
				MetaData->SetValue(NewProp_MergeCoplanars, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/BrushBuilder.h"));
				MetaData->SetValue(NewProp_Layer, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/BrushBuilder.h"));
				MetaData->SetValue(NewProp_Polys, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/BrushBuilder.h"));
				MetaData->SetValue(NewProp_Vertices, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/BrushBuilder.h"));
				MetaData->SetValue(NewProp_NotifyBadParams, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/BrushBuilder.h"));
				MetaData->SetValue(NewProp_NotifyBadParams, TEXT("ToolTip"), TEXT("If false, disabled the bad param notifications"));
				MetaData->SetValue(NewProp_ToolTip, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/BrushBuilder.h"));
				MetaData->SetValue(NewProp_ToolTip, TEXT("ToolTip"), TEXT("localized FString that will be displayed as the name of this brush builder in the editor"));
				MetaData->SetValue(NewProp_BitmapFilename, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/BrushBuilder.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBrushBuilder(Z_Construct_UClass_UBrushBuilder, TEXT("UBrushBuilder"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBrushBuilder);
	UClass* Z_Construct_UClass_UButtonStyleAsset_NoRegister()
	{
		return UButtonStyleAsset::StaticClass();
	}
	UClass* Z_Construct_UClass_UButtonStyleAsset()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UButtonStyleAsset::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ButtonStyle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ButtonStyle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ButtonStyle, UButtonStyleAsset), 0x0000000000000001, Z_Construct_UScriptStruct_FButtonStyle());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Slate/ButtonStyleAsset.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Slate/ButtonStyleAsset.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("An asset describing a button's appearance.\nJust a wrapper for the struct with real data in it.style factory"));
				MetaData->SetValue(NewProp_ButtonStyle, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_ButtonStyle, TEXT("ModuleRelativePath"), TEXT("Classes/Slate/ButtonStyleAsset.h"));
				MetaData->SetValue(NewProp_ButtonStyle, TEXT("ShowOnlyInnerProperties"), TEXT(""));
				MetaData->SetValue(NewProp_ButtonStyle, TEXT("ToolTip"), TEXT("The actual data describing the button's appearance."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UButtonStyleAsset(Z_Construct_UClass_UButtonStyleAsset, TEXT("UButtonStyleAsset"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UButtonStyleAsset);
	UClass* Z_Construct_UClass_UCameraAnim_NoRegister()
	{
		return UCameraAnim::StaticClass();
	}
	UClass* Z_Construct_UClass_UCameraAnim()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UCameraAnim::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080280;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_BasePostProcessBlendWeight = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BasePostProcessBlendWeight"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(BasePostProcessBlendWeight, UCameraAnim), 0x0000000000000000);
				UProperty* NewProp_BasePostProcessSettings = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BasePostProcessSettings"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(BasePostProcessSettings, UCameraAnim), 0x0000000000000000, Z_Construct_UScriptStruct_FPostProcessSettings());
				UProperty* NewProp_BaseFOV = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BaseFOV"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(BaseFOV, UCameraAnim), 0x0000000000000000);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bRelativeToInitialTransform, UCameraAnim, uint8);
				UProperty* NewProp_bRelativeToInitialTransform = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bRelativeToInitialTransform"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bRelativeToInitialTransform, UCameraAnim), 0x0000000000010001, CPP_BOOL_PROPERTY_BITMASK(bRelativeToInitialTransform, UCameraAnim), sizeof(uint8), false);
				UProperty* NewProp_BoundingBox = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BoundingBox"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(BoundingBox, UCameraAnim), 0x0000000000000000, Z_Construct_UScriptStruct_FBox());
				UProperty* NewProp_AnimLength = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AnimLength"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(AnimLength, UCameraAnim), 0x0000000000000000);
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_PreviewInterpGroup = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PreviewInterpGroup"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(PreviewInterpGroup, UCameraAnim), 0x0000000800002000, Z_Construct_UClass_UInterpGroup_NoRegister());
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_CameraInterpGroup = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CameraInterpGroup"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(CameraInterpGroup, UCameraAnim), 0x0000000000000000, Z_Construct_UClass_UInterpGroup_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Camera/CameraAnim.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Camera/CameraAnim.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("A predefined animation to be played on a camera"));
				MetaData->SetValue(NewProp_BasePostProcessBlendWeight, TEXT("ModuleRelativePath"), TEXT("Classes/Camera/CameraAnim.h"));
				MetaData->SetValue(NewProp_BasePostProcessBlendWeight, TEXT("ToolTip"), TEXT("Default PP blend weight to put on the animated camera. For modifying PP without keyframes."));
				MetaData->SetValue(NewProp_BasePostProcessSettings, TEXT("ModuleRelativePath"), TEXT("Classes/Camera/CameraAnim.h"));
				MetaData->SetValue(NewProp_BasePostProcessSettings, TEXT("ToolTip"), TEXT("Default PP settings to put on the animated camera. For modifying PP without keyframes."));
				MetaData->SetValue(NewProp_BaseFOV, TEXT("ModuleRelativePath"), TEXT("Classes/Camera/CameraAnim.h"));
				MetaData->SetValue(NewProp_BaseFOV, TEXT("ToolTip"), TEXT("The FOV"));
				MetaData->SetValue(NewProp_bRelativeToInitialTransform, TEXT("Category"), TEXT("CameraAnim"));
				MetaData->SetValue(NewProp_bRelativeToInitialTransform, TEXT("ModuleRelativePath"), TEXT("Classes/Camera/CameraAnim.h"));
				MetaData->SetValue(NewProp_bRelativeToInitialTransform, TEXT("ToolTip"), TEXT("If true, assume all transform keys are intended be offsets from the start of the animation. This allows the animation to be authored at any world location and be applied as a delta to the camera.\nIf false, assume all transform keys are authored relative to the world origin. Positions will be directly applied as deltas to the camera."));
				MetaData->SetValue(NewProp_BoundingBox, TEXT("ModuleRelativePath"), TEXT("Classes/Camera/CameraAnim.h"));
				MetaData->SetValue(NewProp_BoundingBox, TEXT("ToolTip"), TEXT("AABB in local space."));
				MetaData->SetValue(NewProp_AnimLength, TEXT("ModuleRelativePath"), TEXT("Classes/Camera/CameraAnim.h"));
				MetaData->SetValue(NewProp_AnimLength, TEXT("ToolTip"), TEXT("Length, in seconds."));
				MetaData->SetValue(NewProp_PreviewInterpGroup, TEXT("ModuleRelativePath"), TEXT("Classes/Camera/CameraAnim.h"));
				MetaData->SetValue(NewProp_PreviewInterpGroup, TEXT("ToolTip"), TEXT("This is to preview and they only exists in editor"));
				MetaData->SetValue(NewProp_CameraInterpGroup, TEXT("ModuleRelativePath"), TEXT("Classes/Camera/CameraAnim.h"));
				MetaData->SetValue(NewProp_CameraInterpGroup, TEXT("ToolTip"), TEXT("The UInterpGroup that holds our actual interpolation data."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UCameraAnim(Z_Construct_UClass_UCameraAnim, TEXT("UCameraAnim"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UCameraAnim);
	UFunction* Z_Construct_UFunction_UCameraAnimInst_SetDuration()
	{
		struct CameraAnimInst_eventSetDuration_Parms
		{
			float NewDuration;
		};
		UObject* Outer=Z_Construct_UClass_UCameraAnimInst();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetDuration"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(CameraAnimInst_eventSetDuration_Parms));
			UProperty* NewProp_NewDuration = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewDuration"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(NewDuration, CameraAnimInst_eventSetDuration_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("CameraAnimInst"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Camera/CameraAnimInst.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Changes the running duration of this active anim, while maintaining playback position."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCameraAnimInst_SetScale()
	{
		struct CameraAnimInst_eventSetScale_Parms
		{
			float NewDuration;
		};
		UObject* Outer=Z_Construct_UClass_UCameraAnimInst();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetScale"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(CameraAnimInst_eventSetScale_Parms));
			UProperty* NewProp_NewDuration = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewDuration"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(NewDuration, CameraAnimInst_eventSetScale_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("CameraAnimInst"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Camera/CameraAnimInst.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Changes the scale of the animation while playing."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCameraAnimInst_Stop()
	{
		struct CameraAnimInst_eventStop_Parms
		{
			bool bImmediate;
		};
		UObject* Outer=Z_Construct_UClass_UCameraAnimInst();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Stop"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(CameraAnimInst_eventStop_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bImmediate, CameraAnimInst_eventStop_Parms, bool);
			UProperty* NewProp_bImmediate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bImmediate"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bImmediate, CameraAnimInst_eventStop_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bImmediate, CameraAnimInst_eventStop_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("CameraAnimInst"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bImmediate"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Camera/CameraAnimInst.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Stops this instance playing whatever animation it is playing."));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UCameraAnimInst_NoRegister()
	{
		return UCameraAnimInst::StaticClass();
	}
	UClass* Z_Construct_UClass_UCameraAnimInst()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UCameraAnimInst::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900288;

				OuterClass->LinkChild(Z_Construct_UFunction_UCameraAnimInst_SetDuration());
				OuterClass->LinkChild(Z_Construct_UFunction_UCameraAnimInst_SetScale());
				OuterClass->LinkChild(Z_Construct_UFunction_UCameraAnimInst_Stop());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_PlaySpace = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PlaySpace"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(PlaySpace, UCameraAnimInst), 0x0000000000000000, Z_Construct_UEnum_Engine_ECameraAnimPlaySpace());
				UProperty* NewProp_MoveInst = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MoveInst"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(MoveInst, UCameraAnimInst), 0x0000000000002000, Z_Construct_UClass_UInterpTrackInstMove_NoRegister());
				UProperty* NewProp_MoveTrack = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MoveTrack"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(MoveTrack, UCameraAnimInst), 0x0000000000002000, Z_Construct_UClass_UInterpTrackMove_NoRegister());
				UProperty* NewProp_PlayRate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PlayRate"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(PlayRate, UCameraAnimInst), 0x0000000000000004);
				UProperty* NewProp_InterpGroupInst = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InterpGroupInst"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(InterpGroupInst, UCameraAnimInst), 0x0002000000080008, Z_Construct_UClass_UInterpGroupInst_NoRegister());
				UProperty* NewProp_CamAnim = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CamAnim"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(CamAnim, UCameraAnimInst), 0x0000000000000000, Z_Construct_UClass_UCameraAnim_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCameraAnimInst_SetDuration()); // 499370763
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCameraAnimInst_SetScale()); // 2547381106
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCameraAnimInst_Stop()); // 3932074243
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Camera/CameraAnimInst.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Camera/CameraAnimInst.h"));
				MetaData->SetValue(NewProp_PlaySpace, TEXT("ModuleRelativePath"), TEXT("Classes/Camera/CameraAnimInst.h"));
				MetaData->SetValue(NewProp_MoveInst, TEXT("ModuleRelativePath"), TEXT("Classes/Camera/CameraAnimInst.h"));
				MetaData->SetValue(NewProp_MoveTrack, TEXT("ModuleRelativePath"), TEXT("Classes/Camera/CameraAnimInst.h"));
				MetaData->SetValue(NewProp_MoveTrack, TEXT("ToolTip"), TEXT("cached movement track from the currently playing anim so we don't have to go find it every frame"));
				MetaData->SetValue(NewProp_PlayRate, TEXT("Category"), TEXT("CameraAnimInst"));
				MetaData->SetValue(NewProp_PlayRate, TEXT("ModuleRelativePath"), TEXT("Classes/Camera/CameraAnimInst.h"));
				MetaData->SetValue(NewProp_PlayRate, TEXT("ToolTip"), TEXT("Multiplier for playback rate.  1.0 = normal."));
				MetaData->SetValue(NewProp_InterpGroupInst, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_InterpGroupInst, TEXT("ModuleRelativePath"), TEXT("Classes/Camera/CameraAnimInst.h"));
				MetaData->SetValue(NewProp_CamAnim, TEXT("ModuleRelativePath"), TEXT("Classes/Camera/CameraAnimInst.h"));
				MetaData->SetValue(NewProp_CamAnim, TEXT("ToolTip"), TEXT("which CameraAnim this is an instance of"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UCameraAnimInst(Z_Construct_UClass_UCameraAnimInst, TEXT("UCameraAnimInst"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UCameraAnimInst);
	UFunction* Z_Construct_UFunction_UCameraModifier_BlueprintModifyCamera()
	{
		UObject* Outer=Z_Construct_UClass_UCameraModifier();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BlueprintModifyCamera"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08C20808, 65535, sizeof(CameraModifier_eventBlueprintModifyCamera_Parms));
			UProperty* NewProp_NewFOV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewFOV"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(NewFOV, CameraModifier_eventBlueprintModifyCamera_Parms), 0x0000000000000180);
			UProperty* NewProp_NewViewRotation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewViewRotation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(NewViewRotation, CameraModifier_eventBlueprintModifyCamera_Parms), 0x0000000000000180, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_NewViewLocation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewViewLocation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(NewViewLocation, CameraModifier_eventBlueprintModifyCamera_Parms), 0x0000000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_FOV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FOV"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(FOV, CameraModifier_eventBlueprintModifyCamera_Parms), 0x0000000000000080);
			UProperty* NewProp_ViewRotation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ViewRotation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ViewRotation, CameraModifier_eventBlueprintModifyCamera_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_ViewLocation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ViewLocation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ViewLocation, CameraModifier_eventBlueprintModifyCamera_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_DeltaTime = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DeltaTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DeltaTime, CameraModifier_eventBlueprintModifyCamera_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Camera/CameraModifier.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Called per tick that the modifier is active to allow Blueprinted modifiers to modify the camera's transform.\nScaling by Alpha happens after this in code, so no need to deal with that in the blueprint.\n@param       DeltaTime       Change in time since last update\n@param       ViewLocation            The current camera location.\n@param       ViewRotation            The current camera rotation.\n@param       FOV                                     The current camera fov.\n@param       NewViewLocation         (out) The modified camera location.\n@param       NewViewRotation         (out) The modified camera rotation.\n@param       NewFOV                          (out) The modified camera FOV."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCameraModifier_BlueprintModifyPostProcess()
	{
		UObject* Outer=Z_Construct_UClass_UCameraModifier();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BlueprintModifyPostProcess"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08420808, 65535, sizeof(CameraModifier_eventBlueprintModifyPostProcess_Parms));
			UProperty* NewProp_PostProcessSettings = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PostProcessSettings"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PostProcessSettings, CameraModifier_eventBlueprintModifyPostProcess_Parms), 0x0000000000000180, Z_Construct_UScriptStruct_FPostProcessSettings());
			UProperty* NewProp_PostProcessBlendWeight = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PostProcessBlendWeight"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(PostProcessBlendWeight, CameraModifier_eventBlueprintModifyPostProcess_Parms), 0x0000000000000180);
			UProperty* NewProp_DeltaTime = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DeltaTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DeltaTime, CameraModifier_eventBlueprintModifyPostProcess_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Camera/CameraModifier.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Called per tick that the modifier is active to allow Blueprinted modifiers to modify the camera's postprocess effects.\nScaling by Alpha happens after this in code, so no need to deal with that in the blueprint.\n@param       DeltaTime                               Change in time since last update\n@param       PostProcessBlendWeight  (out) Blend weight applied to the entire postprocess structure.\n@param       PostProcessSettings             (out) Post process structure defining what settings and values to override."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCameraModifier_DisableModifier()
	{
		struct CameraModifier_eventDisableModifier_Parms
		{
			bool bImmediate;
		};
		UObject* Outer=Z_Construct_UClass_UCameraModifier();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DisableModifier"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020400, 65535, sizeof(CameraModifier_eventDisableModifier_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bImmediate, CameraModifier_eventDisableModifier_Parms, bool);
			UProperty* NewProp_bImmediate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bImmediate"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bImmediate, CameraModifier_eventDisableModifier_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bImmediate, CameraModifier_eventDisableModifier_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("CameraModifier"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bImmediate"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Camera/CameraModifier.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Disables this modifier.\n@param  bImmediate  - true to disable with no blend out, false (default) to allow blend out"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCameraModifier_EnableModifier()
	{
		UObject* Outer=Z_Construct_UClass_UCameraModifier();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EnableModifier"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020400, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("CameraModifier"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Camera/CameraModifier.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Enables this modifier."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCameraModifier_GetViewTarget()
	{
		struct CameraModifier_eventGetViewTarget_Parms
		{
			AActor* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UCameraModifier();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetViewTarget"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020400, 65535, sizeof(CameraModifier_eventGetViewTarget_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, CameraModifier_eventGetViewTarget_Parms), 0x0000000000000580, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("CameraModifier"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Camera/CameraModifier.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@return Returns the actor the camera is currently viewing."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCameraModifier_IsDisabled()
	{
		struct CameraModifier_eventIsDisabled_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UCameraModifier();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsDisabled"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020400, 65535, sizeof(CameraModifier_eventIsDisabled_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, CameraModifier_eventIsDisabled_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, CameraModifier_eventIsDisabled_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, CameraModifier_eventIsDisabled_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("CameraModifier"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Camera/CameraModifier.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@return Returns true if modifier is disabled, false otherwise."));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UCameraModifier_NoRegister()
	{
		return UCameraModifier::StaticClass();
	}
	UClass* Z_Construct_UClass_UCameraModifier()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UCameraModifier::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_UCameraModifier_BlueprintModifyCamera());
				OuterClass->LinkChild(Z_Construct_UFunction_UCameraModifier_BlueprintModifyPostProcess());
				OuterClass->LinkChild(Z_Construct_UFunction_UCameraModifier_DisableModifier());
				OuterClass->LinkChild(Z_Construct_UFunction_UCameraModifier_EnableModifier());
				OuterClass->LinkChild(Z_Construct_UFunction_UCameraModifier_GetViewTarget());
				OuterClass->LinkChild(Z_Construct_UFunction_UCameraModifier_IsDisabled());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Alpha = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Alpha"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Alpha, UCameraModifier), 0x0000080000002014);
				UProperty* NewProp_AlphaOutTime = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AlphaOutTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(AlphaOutTime, UCameraModifier), 0x0000080000010015);
				UProperty* NewProp_AlphaInTime = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AlphaInTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(AlphaInTime, UCameraModifier), 0x0000080000010015);
				UProperty* NewProp_CameraOwner = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CameraOwner"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(CameraOwner, UCameraModifier), 0x0000080000002014, Z_Construct_UClass_APlayerCameraManager_NoRegister());
				UProperty* NewProp_Priority = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Priority"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(Priority, UCameraModifier), 0x0000000000010015);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bExclusive, UCameraModifier, uint8);
				UProperty* NewProp_bExclusive = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bExclusive"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bExclusive, UCameraModifier), 0x0000000000010015, CPP_BOOL_PROPERTY_BITMASK(bExclusive, UCameraModifier), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDebug, UCameraModifier, uint8);
				UProperty* NewProp_bDebug = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bDebug"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDebug, UCameraModifier), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bDebug, UCameraModifier), sizeof(uint8), false);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCameraModifier_BlueprintModifyCamera()); // 1535251136
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCameraModifier_BlueprintModifyPostProcess()); // 1892132526
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCameraModifier_DisableModifier()); // 1480077984
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCameraModifier_EnableModifier()); // 3385497518
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCameraModifier_GetViewTarget()); // 399914423
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCameraModifier_IsDisabled()); // 614903055
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Camera/CameraModifier.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Camera/CameraModifier.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("A CameraModifier is a base class for objects that may adjust the final camera properties after\nbeing computed by the APlayerCameraManager (@see ModifyCamera). A CameraModifier\ncan be stateful, and is associated uniquely with a specific APlayerCameraManager."));
				MetaData->SetValue(NewProp_Alpha, TEXT("Category"), TEXT("CameraModifier"));
				MetaData->SetValue(NewProp_Alpha, TEXT("ModuleRelativePath"), TEXT("Classes/Camera/CameraModifier.h"));
				MetaData->SetValue(NewProp_Alpha, TEXT("ToolTip"), TEXT("Current blend alpha."));
				MetaData->SetValue(NewProp_AlphaOutTime, TEXT("Category"), TEXT("CameraModifier"));
				MetaData->SetValue(NewProp_AlphaOutTime, TEXT("ModuleRelativePath"), TEXT("Classes/Camera/CameraModifier.h"));
				MetaData->SetValue(NewProp_AlphaOutTime, TEXT("ToolTip"), TEXT("When blending out, alpha proceeds from 1 to 0 over this time"));
				MetaData->SetValue(NewProp_AlphaInTime, TEXT("Category"), TEXT("CameraModifier"));
				MetaData->SetValue(NewProp_AlphaInTime, TEXT("ModuleRelativePath"), TEXT("Classes/Camera/CameraModifier.h"));
				MetaData->SetValue(NewProp_AlphaInTime, TEXT("ToolTip"), TEXT("When blending in, alpha proceeds from 0 to 1 over this time"));
				MetaData->SetValue(NewProp_CameraOwner, TEXT("Category"), TEXT("CameraModifier"));
				MetaData->SetValue(NewProp_CameraOwner, TEXT("ModuleRelativePath"), TEXT("Classes/Camera/CameraModifier.h"));
				MetaData->SetValue(NewProp_CameraOwner, TEXT("ToolTip"), TEXT("Camera this object is associated with."));
				MetaData->SetValue(NewProp_Priority, TEXT("Category"), TEXT("CameraModifier"));
				MetaData->SetValue(NewProp_Priority, TEXT("ModuleRelativePath"), TEXT("Classes/Camera/CameraModifier.h"));
				MetaData->SetValue(NewProp_Priority, TEXT("ToolTip"), TEXT("Priority value that determines the order in which modifiers are applied. 0 = highest priority, 255 = lowest."));
				MetaData->SetValue(NewProp_bExclusive, TEXT("Category"), TEXT("CameraModifier"));
				MetaData->SetValue(NewProp_bExclusive, TEXT("ModuleRelativePath"), TEXT("Classes/Camera/CameraModifier.h"));
				MetaData->SetValue(NewProp_bExclusive, TEXT("ToolTip"), TEXT("If true, no other modifiers of same priority allowed."));
				MetaData->SetValue(NewProp_bDebug, TEXT("Category"), TEXT("Debug"));
				MetaData->SetValue(NewProp_bDebug, TEXT("ModuleRelativePath"), TEXT("Classes/Camera/CameraModifier.h"));
				MetaData->SetValue(NewProp_bDebug, TEXT("ToolTip"), TEXT("If true, enables certain debug visualization features."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UCameraModifier(Z_Construct_UClass_UCameraModifier, TEXT("UCameraModifier"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UCameraModifier);
	UClass* Z_Construct_UClass_UCameraModifier_CameraShake_NoRegister()
	{
		return UCameraModifier_CameraShake::StaticClass();
	}
	UClass* Z_Construct_UClass_UCameraModifier_CameraShake()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UCameraModifier();
			Z_Construct_UPackage_Engine();
			OuterClass = UCameraModifier_CameraShake::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_SplitScreenShakeScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SplitScreenShakeScale"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(SplitScreenShakeScale, UCameraModifier_CameraShake), 0x0000080000000001);
				UProperty* NewProp_ActiveShakes = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ActiveShakes"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ActiveShakes, UCameraModifier_CameraShake), 0x0000000000000000);
				UProperty* NewProp_ActiveShakes_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ActiveShakes, TEXT("ActiveShakes"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UCameraShake_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("Camera"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Camera/CameraModifier_CameraShake.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Camera/CameraModifier_CameraShake.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("A UCameraModifier_CameraShake is a camera modifier that can apply a UCameraShake to\nthe owning camera."));
				MetaData->SetValue(NewProp_SplitScreenShakeScale, TEXT("Category"), TEXT("CameraModifier_CameraShake"));
				MetaData->SetValue(NewProp_SplitScreenShakeScale, TEXT("ModuleRelativePath"), TEXT("Classes/Camera/CameraModifier_CameraShake.h"));
				MetaData->SetValue(NewProp_SplitScreenShakeScale, TEXT("ToolTip"), TEXT("Scaling factor applied to all camera shakes in when in splitscreen mode. Normally used to reduce shaking, since shakes feel more intense in a smaller viewport."));
				MetaData->SetValue(NewProp_ActiveShakes, TEXT("ModuleRelativePath"), TEXT("Classes/Camera/CameraModifier_CameraShake.h"));
				MetaData->SetValue(NewProp_ActiveShakes, TEXT("ToolTip"), TEXT("List of active CameraShake instances"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UCameraModifier_CameraShake(Z_Construct_UClass_UCameraModifier_CameraShake, TEXT("UCameraModifier_CameraShake"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UCameraModifier_CameraShake);
	UScriptStruct* Z_Construct_UScriptStruct_FWrappedStringElement()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FWrappedStringElement_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("WrappedStringElement"), sizeof(FWrappedStringElement), Get_Z_Construct_UScriptStruct_FWrappedStringElement_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WrappedStringElement"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FWrappedStringElement>, EStructFlags(0x00000001));
			UProperty* NewProp_LineExtent = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LineExtent"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LineExtent, FWrappedStringElement), 0x0000000000000000, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Value"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Value, FWrappedStringElement), 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/CanvasTypes.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Used by UUIString::WrapString to track information about each line that is generated as the result of wrapping."));
			MetaData->SetValue(NewProp_LineExtent, TEXT("ModuleRelativePath"), TEXT("Public/CanvasTypes.h"));
			MetaData->SetValue(NewProp_LineExtent, TEXT("ToolTip"), TEXT("the size (in pixels) that it will take to render this string"));
			MetaData->SetValue(NewProp_Value, TEXT("ModuleRelativePath"), TEXT("Public/CanvasTypes.h"));
			MetaData->SetValue(NewProp_Value, TEXT("ToolTip"), TEXT("the string associated with this line"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FWrappedStringElement_CRC() { return 1565060957U; }
	UScriptStruct* Z_Construct_UScriptStruct_FTextSizingParameters()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FTextSizingParameters_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("TextSizingParameters"), sizeof(FTextSizingParameters), Get_Z_Construct_UScriptStruct_FTextSizingParameters_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TextSizingParameters"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FTextSizingParameters>, EStructFlags(0x00000001));
			UProperty* NewProp_SpacingAdjust = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SpacingAdjust"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SpacingAdjust, FTextSizingParameters), 0x0000000000000000, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_DrawFont = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DrawFont"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(DrawFont, FTextSizingParameters), 0x0000000000000000, Z_Construct_UClass_UFont_NoRegister());
			UProperty* NewProp_Scaling = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Scaling"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Scaling, FTextSizingParameters), 0x0000000000000000, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_DrawYL = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DrawYL"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DrawYL, FTextSizingParameters), 0x0000000000000000);
			UProperty* NewProp_DrawXL = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DrawXL"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DrawXL, FTextSizingParameters), 0x0000000000000000);
			UProperty* NewProp_DrawY = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DrawY"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DrawY, FTextSizingParameters), 0x0000000000000000);
			UProperty* NewProp_DrawX = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DrawX"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DrawX, FTextSizingParameters), 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/CanvasTypes.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("General purpose data structure for grouping all parameters needed when sizing or wrapping a string"));
			MetaData->SetValue(NewProp_SpacingAdjust, TEXT("ModuleRelativePath"), TEXT("Public/CanvasTypes.h"));
			MetaData->SetValue(NewProp_SpacingAdjust, TEXT("ToolTip"), TEXT("Horizontal spacing adjustment between characters and vertical spacing adjustment between wrapped lines"));
			MetaData->SetValue(NewProp_DrawFont, TEXT("ModuleRelativePath"), TEXT("Public/CanvasTypes.h"));
			MetaData->SetValue(NewProp_DrawFont, TEXT("ToolTip"), TEXT("the font to use for sizing/wrapping the string"));
			MetaData->SetValue(NewProp_Scaling, TEXT("ModuleRelativePath"), TEXT("Public/CanvasTypes.h"));
			MetaData->SetValue(NewProp_Scaling, TEXT("ToolTip"), TEXT("A value between 0.0 and 1.0, which represents how much the width/height should be scaled, where 1.0 represents 100% scaling."));
			MetaData->SetValue(NewProp_DrawYL, TEXT("ModuleRelativePath"), TEXT("Public/CanvasTypes.h"));
			MetaData->SetValue(NewProp_DrawYL, TEXT("ToolTip"), TEXT("a pixel value representing the height of the area available for rendering the string"));
			MetaData->SetValue(NewProp_DrawXL, TEXT("ModuleRelativePath"), TEXT("Public/CanvasTypes.h"));
			MetaData->SetValue(NewProp_DrawXL, TEXT("ToolTip"), TEXT("a pixel value representing the width of the area available for rendering the string"));
			MetaData->SetValue(NewProp_DrawY, TEXT("ModuleRelativePath"), TEXT("Public/CanvasTypes.h"));
			MetaData->SetValue(NewProp_DrawY, TEXT("ToolTip"), TEXT("a pixel value representing the vertical screen location to begin rendering the string"));
			MetaData->SetValue(NewProp_DrawX, TEXT("ModuleRelativePath"), TEXT("Public/CanvasTypes.h"));
			MetaData->SetValue(NewProp_DrawX, TEXT("ToolTip"), TEXT("a pixel value representing the horizontal screen location to begin rendering the string"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FTextSizingParameters_CRC() { return 2280512773U; }
	UScriptStruct* Z_Construct_UScriptStruct_FCanvasIcon()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FCanvasIcon_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("CanvasIcon"), sizeof(FCanvasIcon), Get_Z_Construct_UScriptStruct_FCanvasIcon_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CanvasIcon"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FCanvasIcon>, EStructFlags(0x00000001));
			UProperty* NewProp_VL = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("VL"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(VL, FCanvasIcon), 0x0000000000000005);
			UProperty* NewProp_UL = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UL"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(UL, FCanvasIcon), 0x0000000000000005);
			UProperty* NewProp_V = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("V"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(V, FCanvasIcon), 0x0000000000000005);
			UProperty* NewProp_U = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("U"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(U, FCanvasIcon), 0x0000000000000005);
			UProperty* NewProp_Texture = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Texture"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Texture, FCanvasIcon), 0x0000000000000005, Z_Construct_UClass_UTexture_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Canvas.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Holds texture information with UV coordinates as well."));
			MetaData->SetValue(NewProp_VL, TEXT("Category"), TEXT("CanvasIcon"));
			MetaData->SetValue(NewProp_VL, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Canvas.h"));
			MetaData->SetValue(NewProp_UL, TEXT("Category"), TEXT("CanvasIcon"));
			MetaData->SetValue(NewProp_UL, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Canvas.h"));
			MetaData->SetValue(NewProp_V, TEXT("Category"), TEXT("CanvasIcon"));
			MetaData->SetValue(NewProp_V, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Canvas.h"));
			MetaData->SetValue(NewProp_U, TEXT("Category"), TEXT("CanvasIcon"));
			MetaData->SetValue(NewProp_U, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Canvas.h"));
			MetaData->SetValue(NewProp_U, TEXT("ToolTip"), TEXT("UV coords"));
			MetaData->SetValue(NewProp_Texture, TEXT("Category"), TEXT("CanvasIcon"));
			MetaData->SetValue(NewProp_Texture, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Canvas.h"));
			MetaData->SetValue(NewProp_Texture, TEXT("ToolTip"), TEXT("Source texture"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FCanvasIcon_CRC() { return 3501737055U; }
	UFunction* Z_Construct_UFunction_UCanvas_K2_Deproject()
	{
		struct Canvas_eventK2_Deproject_Parms
		{
			FVector2D ScreenPosition;
			FVector WorldOrigin;
			FVector WorldDirection;
		};
		UObject* Outer=Z_Construct_UClass_UCanvas();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_Deproject"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C20401, 65535, sizeof(Canvas_eventK2_Deproject_Parms));
			UProperty* NewProp_WorldDirection = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldDirection"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(WorldDirection, Canvas_eventK2_Deproject_Parms), 0x0000000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_WorldOrigin = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldOrigin"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(WorldOrigin, Canvas_eventK2_Deproject_Parms), 0x0000000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_ScreenPosition = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ScreenPosition"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ScreenPosition, Canvas_eventK2_Deproject_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Canvas"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Deproject"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Canvas.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Performs a deprojection of a screen space coordinate using the projection matrix set up for the Canvas.\n\n@param ScreenPosition                        Screen space position to deproject to the World.\n@param WorldOrigin                           Vector which is the world position of the screen space position.\n@param WorldDirection                        Vector which can be used in a trace to determine what is \"behind\" the screen space position. Useful for object picking."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCanvas_K2_DrawBorder()
	{
		struct Canvas_eventK2_DrawBorder_Parms
		{
			UTexture* BorderTexture;
			UTexture* BackgroundTexture;
			UTexture* LeftBorderTexture;
			UTexture* RightBorderTexture;
			UTexture* TopBorderTexture;
			UTexture* BottomBorderTexture;
			FVector2D ScreenPosition;
			FVector2D ScreenSize;
			FVector2D CoordinatePosition;
			FVector2D CoordinateSize;
			FLinearColor RenderColor;
			FVector2D BorderScale;
			FVector2D BackgroundScale;
			float Rotation;
			FVector2D PivotPoint;
			FVector2D CornerSize;
		};
		UObject* Outer=Z_Construct_UClass_UCanvas();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_DrawBorder"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(Canvas_eventK2_DrawBorder_Parms));
			UProperty* NewProp_CornerSize = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CornerSize"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(CornerSize, Canvas_eventK2_DrawBorder_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_PivotPoint = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PivotPoint"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PivotPoint, Canvas_eventK2_DrawBorder_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_Rotation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Rotation"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Rotation, Canvas_eventK2_DrawBorder_Parms), 0x0000000000000080);
			UProperty* NewProp_BackgroundScale = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("BackgroundScale"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(BackgroundScale, Canvas_eventK2_DrawBorder_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_BorderScale = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("BorderScale"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(BorderScale, Canvas_eventK2_DrawBorder_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_RenderColor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("RenderColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(RenderColor, Canvas_eventK2_DrawBorder_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_CoordinateSize = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CoordinateSize"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(CoordinateSize, Canvas_eventK2_DrawBorder_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_CoordinatePosition = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CoordinatePosition"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(CoordinatePosition, Canvas_eventK2_DrawBorder_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_ScreenSize = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ScreenSize"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ScreenSize, Canvas_eventK2_DrawBorder_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_ScreenPosition = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ScreenPosition"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ScreenPosition, Canvas_eventK2_DrawBorder_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_BottomBorderTexture = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("BottomBorderTexture"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(BottomBorderTexture, Canvas_eventK2_DrawBorder_Parms), 0x0000000000000080, Z_Construct_UClass_UTexture_NoRegister());
			UProperty* NewProp_TopBorderTexture = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TopBorderTexture"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(TopBorderTexture, Canvas_eventK2_DrawBorder_Parms), 0x0000000000000080, Z_Construct_UClass_UTexture_NoRegister());
			UProperty* NewProp_RightBorderTexture = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("RightBorderTexture"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(RightBorderTexture, Canvas_eventK2_DrawBorder_Parms), 0x0000000000000080, Z_Construct_UClass_UTexture_NoRegister());
			UProperty* NewProp_LeftBorderTexture = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LeftBorderTexture"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(LeftBorderTexture, Canvas_eventK2_DrawBorder_Parms), 0x0000000000000080, Z_Construct_UClass_UTexture_NoRegister());
			UProperty* NewProp_BackgroundTexture = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("BackgroundTexture"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(BackgroundTexture, Canvas_eventK2_DrawBorder_Parms), 0x0000000000000080, Z_Construct_UClass_UTexture_NoRegister());
			UProperty* NewProp_BorderTexture = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("BorderTexture"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(BorderTexture, Canvas_eventK2_DrawBorder_Parms), 0x0000000000000080, Z_Construct_UClass_UTexture_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Canvas"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_BackgroundScale"), TEXT("(X=0.100,Y=0.100)"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_BorderScale"), TEXT("(X=0.100,Y=0.100)"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_CoordinateSize"), TEXT("(X=1.000,Y=1.000)"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_PivotPoint"), TEXT("(X=0.500,Y=0.500)"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_RenderColor"), TEXT("(R=1.000000,G=1.000000,B=1.000000,A=1.000000)"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Rotation"), TEXT("0.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Draw Border"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Canvas.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Draws a 3x3 grid border with tiled frame and tiled interior on the Canvas.\n\n@param BorderTexture                         Texture to use for border.\n@param BackgroundTexture                     Texture to use for border background.\n@param LeftBorderTexture                     Texture to use for the tiling left border.\n@param RightBorderTexture            Texture to use for the tiling right border.\n@param TopBorderTexture                      Texture to use for the tiling top border.\n@param BottomBorderTexture           Texture to use for the tiling bottom border.\n@param ScreenPosition                        Screen space position to render the texture.\n@param ScreenSize                            Screen space size to render the texture.\n@param CoordinatePosition            Normalized UV starting coordinate to use when rendering the border texture.\n@param CoordinateSize                        Normalized UV size coordinate to use when rendering the border texture.\n@param RenderColor                           Color to tint the border.\n@param BorderScale                           Scale of the border.\n@param BackgroundScale                       Scale of the background.\n@param Rotation                                      Rotation, in degrees, to render the texture.\n@param PivotPoint                            Normalized pivot point to use when rotating the texture.\n@param CornerSize                            Frame corner size in percent of frame texture (should be < 0.5f)."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCanvas_K2_DrawBox()
	{
		struct Canvas_eventK2_DrawBox_Parms
		{
			FVector2D ScreenPosition;
			FVector2D ScreenSize;
			float Thickness;
		};
		UObject* Outer=Z_Construct_UClass_UCanvas();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_DrawBox"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(Canvas_eventK2_DrawBox_Parms));
			UProperty* NewProp_Thickness = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Thickness"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Thickness, Canvas_eventK2_DrawBox_Parms), 0x0000000000000080);
			UProperty* NewProp_ScreenSize = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ScreenSize"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ScreenSize, Canvas_eventK2_DrawBox_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_ScreenPosition = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ScreenPosition"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ScreenPosition, Canvas_eventK2_DrawBox_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Canvas"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Thickness"), TEXT("1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Draw Box"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Canvas.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Draws an unfilled box on the Canvas.\n\n@param ScreenPosition                        Screen space position to render the text.\n@param ScreenSize                            Screen space size to render the texture.\n@param Thickness                                     How many pixels thick the box lines should be."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCanvas_K2_DrawLine()
	{
		struct Canvas_eventK2_DrawLine_Parms
		{
			FVector2D ScreenPositionA;
			FVector2D ScreenPositionB;
			float Thickness;
			FLinearColor RenderColor;
		};
		UObject* Outer=Z_Construct_UClass_UCanvas();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_DrawLine"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(Canvas_eventK2_DrawLine_Parms));
			UProperty* NewProp_RenderColor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("RenderColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(RenderColor, Canvas_eventK2_DrawLine_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_Thickness = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Thickness"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Thickness, Canvas_eventK2_DrawLine_Parms), 0x0000000000000080);
			UProperty* NewProp_ScreenPositionB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ScreenPositionB"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ScreenPositionB, Canvas_eventK2_DrawLine_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_ScreenPositionA = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ScreenPositionA"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ScreenPositionA, Canvas_eventK2_DrawLine_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Canvas"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_RenderColor"), TEXT("(R=1.000000,G=1.000000,B=1.000000,A=1.000000)"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Thickness"), TEXT("1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Draw Line"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Canvas.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Draws a line on the Canvas.\n\n@param ScreenPositionA               Starting position of the line in screen space.\n@param ScreenPositionB               Ending position of the line in screen space.\n@param Thickness                             How many pixels thick this line should be.\n@param RenderColor                   Color to render the line."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCanvas_K2_DrawMaterial()
	{
		struct Canvas_eventK2_DrawMaterial_Parms
		{
			UMaterialInterface* RenderMaterial;
			FVector2D ScreenPosition;
			FVector2D ScreenSize;
			FVector2D CoordinatePosition;
			FVector2D CoordinateSize;
			float Rotation;
			FVector2D PivotPoint;
		};
		UObject* Outer=Z_Construct_UClass_UCanvas();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_DrawMaterial"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(Canvas_eventK2_DrawMaterial_Parms));
			UProperty* NewProp_PivotPoint = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PivotPoint"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PivotPoint, Canvas_eventK2_DrawMaterial_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_Rotation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Rotation"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Rotation, Canvas_eventK2_DrawMaterial_Parms), 0x0000000000000080);
			UProperty* NewProp_CoordinateSize = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CoordinateSize"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(CoordinateSize, Canvas_eventK2_DrawMaterial_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_CoordinatePosition = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CoordinatePosition"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(CoordinatePosition, Canvas_eventK2_DrawMaterial_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_ScreenSize = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ScreenSize"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ScreenSize, Canvas_eventK2_DrawMaterial_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_ScreenPosition = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ScreenPosition"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ScreenPosition, Canvas_eventK2_DrawMaterial_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_RenderMaterial = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("RenderMaterial"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(RenderMaterial, Canvas_eventK2_DrawMaterial_Parms), 0x0000000000000080, Z_Construct_UClass_UMaterialInterface_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Canvas"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_CoordinateSize"), TEXT("(X=1.000,Y=1.000)"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_PivotPoint"), TEXT("(X=0.500,Y=0.500)"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Rotation"), TEXT("0.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Draw Material"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Canvas.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Draws a material on the Canvas.\n\n@param RenderMaterial                        Material to use when rendering. Remember that only the emissive channel is able to be rendered as no lighting is performed when rendering to the Canvas.\n@param ScreenPosition                        Screen space position to render the texture.\n@param ScreenSize                            Screen space size to render the texture.\n@param CoordinatePosition            Normalized UV starting coordinate to use when rendering the texture.\n@param CoordinateSize                        Normalized UV size coordinate to use when rendering the texture.\n@param Rotation                                      Rotation, in degrees, to render the texture.\n@param PivotPoint                            Normalized pivot point to use when rotating the texture."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCanvas_K2_DrawMaterialTriangle()
	{
		struct Canvas_eventK2_DrawMaterialTriangle_Parms
		{
			UMaterialInterface* RenderMaterial;
			TArray<FCanvasUVTri> Triangles;
		};
		UObject* Outer=Z_Construct_UClass_UCanvas();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_DrawMaterialTriangle"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(Canvas_eventK2_DrawMaterialTriangle_Parms));
			UProperty* NewProp_Triangles = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Triangles"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Triangles, Canvas_eventK2_DrawMaterialTriangle_Parms), 0x0000000000000080);
			UProperty* NewProp_Triangles_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Triangles, TEXT("Triangles"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FCanvasUVTri());
			UProperty* NewProp_RenderMaterial = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("RenderMaterial"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(RenderMaterial, Canvas_eventK2_DrawMaterialTriangle_Parms), 0x0000000000000080, Z_Construct_UClass_UMaterialInterface_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Canvas"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Draw Material Triangles"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Canvas.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Draws a set of triangles on the Canvas.\n\n@param RenderMaterial                        Material to use when rendering. Remember that only the emissive channel is able to be rendered as no lighting is performed when rendering to the Canvas.\n@param Triangles                                     Triangles to render."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCanvas_K2_DrawPolygon()
	{
		struct Canvas_eventK2_DrawPolygon_Parms
		{
			UTexture* RenderTexture;
			FVector2D ScreenPosition;
			FVector2D Radius;
			int32 NumberOfSides;
			FLinearColor RenderColor;
		};
		UObject* Outer=Z_Construct_UClass_UCanvas();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_DrawPolygon"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(Canvas_eventK2_DrawPolygon_Parms));
			UProperty* NewProp_RenderColor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("RenderColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(RenderColor, Canvas_eventK2_DrawPolygon_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_NumberOfSides = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NumberOfSides"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(NumberOfSides, Canvas_eventK2_DrawPolygon_Parms), 0x0000000000000080);
			UProperty* NewProp_Radius = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Radius"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Radius, Canvas_eventK2_DrawPolygon_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_ScreenPosition = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ScreenPosition"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ScreenPosition, Canvas_eventK2_DrawPolygon_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_RenderTexture = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("RenderTexture"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(RenderTexture, Canvas_eventK2_DrawPolygon_Parms), 0x0000000000000080, Z_Construct_UClass_UTexture_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Canvas"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_NumberOfSides"), TEXT("3"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Radius"), TEXT("(X=1.000,Y=1.000)"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_RenderColor"), TEXT("(R=1.000000,G=1.000000,B=1.000000,A=1.000000)"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Draw Polygon"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Canvas.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Draws a polygon on the Canvas.\n\n@param RenderTexture                         Texture to use when rendering the triangles. If no texture is set, then the default white texture is used.\n@param ScreenPosition                        Screen space position to render the text.\n@param Radius                                        How large in pixels this polygon should be.\n@param NumberOfSides                         How many sides this polygon should have. This should be above or equal to three.\n@param RenderColor                           Color to tint the polygon."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCanvas_K2_DrawText()
	{
		struct Canvas_eventK2_DrawText_Parms
		{
			UFont* RenderFont;
			FString RenderText;
			FVector2D ScreenPosition;
			FLinearColor RenderColor;
			float Kerning;
			FLinearColor ShadowColor;
			FVector2D ShadowOffset;
			bool bCentreX;
			bool bCentreY;
			bool bOutlined;
			FLinearColor OutlineColor;
		};
		UObject* Outer=Z_Construct_UClass_UCanvas();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_DrawText"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(Canvas_eventK2_DrawText_Parms));
			UProperty* NewProp_OutlineColor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutlineColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(OutlineColor, Canvas_eventK2_DrawText_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FLinearColor());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOutlined, Canvas_eventK2_DrawText_Parms, bool);
			UProperty* NewProp_bOutlined = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bOutlined"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOutlined, Canvas_eventK2_DrawText_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bOutlined, Canvas_eventK2_DrawText_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCentreY, Canvas_eventK2_DrawText_Parms, bool);
			UProperty* NewProp_bCentreY = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bCentreY"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCentreY, Canvas_eventK2_DrawText_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bCentreY, Canvas_eventK2_DrawText_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCentreX, Canvas_eventK2_DrawText_Parms, bool);
			UProperty* NewProp_bCentreX = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bCentreX"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCentreX, Canvas_eventK2_DrawText_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bCentreX, Canvas_eventK2_DrawText_Parms), sizeof(bool), true);
			UProperty* NewProp_ShadowOffset = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ShadowOffset"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ShadowOffset, Canvas_eventK2_DrawText_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_ShadowColor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ShadowColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ShadowColor, Canvas_eventK2_DrawText_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_Kerning = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Kerning"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Kerning, Canvas_eventK2_DrawText_Parms), 0x0000000000000080);
			UProperty* NewProp_RenderColor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("RenderColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(RenderColor, Canvas_eventK2_DrawText_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_ScreenPosition = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ScreenPosition"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ScreenPosition, Canvas_eventK2_DrawText_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_RenderText = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("RenderText"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(RenderText, Canvas_eventK2_DrawText_Parms), 0x0000000000000080);
			UProperty* NewProp_RenderFont = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("RenderFont"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(RenderFont, Canvas_eventK2_DrawText_Parms), 0x0000000000000080, Z_Construct_UClass_UFont_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Canvas"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bCentreX"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bCentreY"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bOutlined"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Kerning"), TEXT("0.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_OutlineColor"), TEXT("(R=0.000000,G=0.000000,B=0.000000,A=1.000000)"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_RenderColor"), TEXT("(R=1.000000,G=1.000000,B=1.000000,A=1.000000)"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_ShadowColor"), TEXT("(R=0.000000,G=0.000000,B=0.000000,A=1.000000)"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_ShadowOffset"), TEXT("(X=1.000,Y=1.000)"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Draw Text"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Canvas.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Draws text on the Canvas.\n\n@param RenderFont                            Font to use when rendering the text. If this is null, then a default engine font is used.\n@param RenderText                            Text to render on the Canvas.\n@param ScreenPosition                        Screen space position to render the text.\n@param RenderColor                           Color to render the text.\n@param Kerning                                       Horizontal spacing adjustment to modify the spacing between each letter.\n@param ShadowColor                           Color to render the shadow of the text.\n@param ShadowOffset                          Pixel offset relative to the screen space position to render the shadow of the text.\n@param bCentreX                                      If true, then interpret the screen space position X coordinate as the center of the rendered text.\n@param bCentreY                                      If true, then interpret the screen space position Y coordinate as the center of the rendered text.\n@param bOutlined                                     If true, then the text should be rendered with an outline.\n@param OutlineColor                          Color to render the outline for the text."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCanvas_K2_DrawTexture()
	{
		struct Canvas_eventK2_DrawTexture_Parms
		{
			UTexture* RenderTexture;
			FVector2D ScreenPosition;
			FVector2D ScreenSize;
			FVector2D CoordinatePosition;
			FVector2D CoordinateSize;
			FLinearColor RenderColor;
			TEnumAsByte<EBlendMode> BlendMode;
			float Rotation;
			FVector2D PivotPoint;
		};
		UObject* Outer=Z_Construct_UClass_UCanvas();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_DrawTexture"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(Canvas_eventK2_DrawTexture_Parms));
			UProperty* NewProp_PivotPoint = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PivotPoint"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PivotPoint, Canvas_eventK2_DrawTexture_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_Rotation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Rotation"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Rotation, Canvas_eventK2_DrawTexture_Parms), 0x0000000000000080);
			UProperty* NewProp_BlendMode = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("BlendMode"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(BlendMode, Canvas_eventK2_DrawTexture_Parms), 0x0000000000000080, Z_Construct_UEnum_Engine_EBlendMode());
			UProperty* NewProp_RenderColor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("RenderColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(RenderColor, Canvas_eventK2_DrawTexture_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_CoordinateSize = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CoordinateSize"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(CoordinateSize, Canvas_eventK2_DrawTexture_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_CoordinatePosition = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CoordinatePosition"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(CoordinatePosition, Canvas_eventK2_DrawTexture_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_ScreenSize = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ScreenSize"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ScreenSize, Canvas_eventK2_DrawTexture_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_ScreenPosition = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ScreenPosition"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ScreenPosition, Canvas_eventK2_DrawTexture_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_RenderTexture = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("RenderTexture"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(RenderTexture, Canvas_eventK2_DrawTexture_Parms), 0x0000000000000080, Z_Construct_UClass_UTexture_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Canvas"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_BlendMode"), TEXT("BLEND_Translucent"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_CoordinateSize"), TEXT("(X=1.000,Y=1.000)"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_PivotPoint"), TEXT("(X=0.500,Y=0.500)"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_RenderColor"), TEXT("(R=1.000000,G=1.000000,B=1.000000,A=1.000000)"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Rotation"), TEXT("0.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Draw Texture"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Canvas.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Draws a texture on the Canvas.\n\n@param RenderTexture                         Texture to use when rendering. If no texture is set then this will use the default white texture.\n@param ScreenPosition                        Screen space position to render the texture.\n@param ScreenSize                            Screen space size to render the texture.\n@param CoordinatePosition            Normalized UV starting coordinate to use when rendering the texture.\n@param CoordinateSize                        Normalized UV size coordinate to use when rendering the texture.\n@param RenderColor                           Color to use when rendering the texture.\n@param BlendMode                                     Blending mode to use when rendering the texture.\n@param Rotation                                      Rotation, in degrees, to render the texture.\n@param PivotPoint                            Normalized pivot point to use when rotating the texture."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCanvas_K2_DrawTriangle()
	{
		struct Canvas_eventK2_DrawTriangle_Parms
		{
			UTexture* RenderTexture;
			TArray<FCanvasUVTri> Triangles;
		};
		UObject* Outer=Z_Construct_UClass_UCanvas();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_DrawTriangle"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(Canvas_eventK2_DrawTriangle_Parms));
			UProperty* NewProp_Triangles = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Triangles"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Triangles, Canvas_eventK2_DrawTriangle_Parms), 0x0000000000000080);
			UProperty* NewProp_Triangles_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Triangles, TEXT("Triangles"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FCanvasUVTri());
			UProperty* NewProp_RenderTexture = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("RenderTexture"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(RenderTexture, Canvas_eventK2_DrawTriangle_Parms), 0x0000000000000080, Z_Construct_UClass_UTexture_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Canvas"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Draw Triangles"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Canvas.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Draws a set of triangles on the Canvas.\n\n@param RenderTexture                         Texture to use when rendering the triangles. If no texture is set, then the default white texture is used.\n@param Triangles                                     Triangles to render."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCanvas_K2_Project()
	{
		struct Canvas_eventK2_Project_Parms
		{
			FVector WorldLocation;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UCanvas();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_Project"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(Canvas_eventK2_Project_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, Canvas_eventK2_Project_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_WorldLocation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldLocation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(WorldLocation, Canvas_eventK2_Project_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Canvas"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Project"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Canvas.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Performs a projection of a world space coordinates using the projection matrix set up for the Canvas.\n\n@param WorldLocation                         World space location to project onto the Canvas rendering plane.\n@return                                                      Returns a vector where X, Y defines a screen space position representing the world space location."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCanvas_K2_StrLen()
	{
		struct Canvas_eventK2_StrLen_Parms
		{
			UFont* RenderFont;
			FString RenderText;
			FVector2D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UCanvas();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_StrLen"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(Canvas_eventK2_StrLen_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, Canvas_eventK2_StrLen_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_RenderText = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("RenderText"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(RenderText, Canvas_eventK2_StrLen_Parms), 0x0000000000000080);
			UProperty* NewProp_RenderFont = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("RenderFont"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(RenderFont, Canvas_eventK2_StrLen_Parms), 0x0000000000000080, Z_Construct_UClass_UFont_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Canvas"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Wrapped Text Size"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Canvas.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the wrapped text size in screen space coordinates.\n\n@param RenderFont                            Font to use when determining the size of the text. If this is null, then a default engine font is used.\n@param RenderText                            Text to determine the size of.\n@return                                                      Returns the screen space size of the text."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCanvas_K2_TextSize()
	{
		struct Canvas_eventK2_TextSize_Parms
		{
			UFont* RenderFont;
			FString RenderText;
			FVector2D Scale;
			FVector2D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UCanvas();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_TextSize"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(Canvas_eventK2_TextSize_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, Canvas_eventK2_TextSize_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_Scale = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Scale"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Scale, Canvas_eventK2_TextSize_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_RenderText = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("RenderText"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(RenderText, Canvas_eventK2_TextSize_Parms), 0x0000000000000080);
			UProperty* NewProp_RenderFont = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("RenderFont"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(RenderFont, Canvas_eventK2_TextSize_Parms), 0x0000000000000080, Z_Construct_UClass_UFont_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Canvas"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Scale"), TEXT("(X=1.000,Y=1.000)"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Clipped Text Size"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Canvas.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the clipped text size in screen space coordinates.\n\n@param RenderFont                            Font to use when determining the size of the text. If this is null, then a default engine font is used.\n@param RenderText                            Text to determine the size of.\n@param Scale                                         Scale of the font to use when determining the size of the text.\n@return                                                      Returns the screen space size of the text."));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UCanvas_NoRegister()
	{
		return UCanvas::StaticClass();
	}
	UClass* Z_Construct_UClass_UCanvas()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UCanvas::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100088;

				OuterClass->LinkChild(Z_Construct_UFunction_UCanvas_K2_Deproject());
				OuterClass->LinkChild(Z_Construct_UFunction_UCanvas_K2_DrawBorder());
				OuterClass->LinkChild(Z_Construct_UFunction_UCanvas_K2_DrawBox());
				OuterClass->LinkChild(Z_Construct_UFunction_UCanvas_K2_DrawLine());
				OuterClass->LinkChild(Z_Construct_UFunction_UCanvas_K2_DrawMaterial());
				OuterClass->LinkChild(Z_Construct_UFunction_UCanvas_K2_DrawMaterialTriangle());
				OuterClass->LinkChild(Z_Construct_UFunction_UCanvas_K2_DrawPolygon());
				OuterClass->LinkChild(Z_Construct_UFunction_UCanvas_K2_DrawText());
				OuterClass->LinkChild(Z_Construct_UFunction_UCanvas_K2_DrawTexture());
				OuterClass->LinkChild(Z_Construct_UFunction_UCanvas_K2_DrawTriangle());
				OuterClass->LinkChild(Z_Construct_UFunction_UCanvas_K2_Project());
				OuterClass->LinkChild(Z_Construct_UFunction_UCanvas_K2_StrLen());
				OuterClass->LinkChild(Z_Construct_UFunction_UCanvas_K2_TextSize());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ReporterGraph = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ReporterGraph"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReporterGraph, UCanvas), 0x0000000000000000, Z_Construct_UClass_UReporterGraph_NoRegister());
				UProperty* NewProp_GradientTexture0 = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GradientTexture0"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(GradientTexture0, UCanvas), 0x0000000000000000, Z_Construct_UClass_UTexture2D_NoRegister());
				UProperty* NewProp_DefaultTexture = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultTexture"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(DefaultTexture, UCanvas), 0x0000000000000000, Z_Construct_UClass_UTexture2D_NoRegister());
				UProperty* NewProp_ColorModulate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ColorModulate"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ColorModulate, UCanvas), 0x0000000000000000, Z_Construct_UScriptStruct_FPlane());
				UProperty* NewProp_SizeY = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SizeY"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(SizeY, UCanvas), 0x0000000000000000);
				UProperty* NewProp_SizeX = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SizeX"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(SizeX, UCanvas), 0x0000000000000000);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bNoSmooth, UCanvas, uint8);
				UProperty* NewProp_bNoSmooth = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bNoSmooth"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bNoSmooth, UCanvas), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bNoSmooth, UCanvas), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCenterY, UCanvas, uint8);
				UProperty* NewProp_bCenterY = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bCenterY"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCenterY, UCanvas), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bCenterY, UCanvas), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCenterX, UCanvas, uint8);
				UProperty* NewProp_bCenterX = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bCenterX"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCenterX, UCanvas), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bCenterX, UCanvas), sizeof(uint8), false);
				UProperty* NewProp_DrawColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DrawColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DrawColor, UCanvas), 0x0000000000000000, Z_Construct_UScriptStruct_FColor());
				UProperty* NewProp_ClipY = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ClipY"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ClipY, UCanvas), 0x0000000000000000);
				UProperty* NewProp_ClipX = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ClipX"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ClipX, UCanvas), 0x0000000000000000);
				UProperty* NewProp_OrgY = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OrgY"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(OrgY, UCanvas), 0x0000000000000000);
				UProperty* NewProp_OrgX = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OrgX"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(OrgX, UCanvas), 0x0000000000000000);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCanvas_K2_Deproject()); // 590561433
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCanvas_K2_DrawBorder()); // 434399833
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCanvas_K2_DrawBox()); // 4188792414
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCanvas_K2_DrawLine()); // 1976767639
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCanvas_K2_DrawMaterial()); // 1202362664
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCanvas_K2_DrawMaterialTriangle()); // 1615411387
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCanvas_K2_DrawPolygon()); // 3201789501
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCanvas_K2_DrawText()); // 2610584658
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCanvas_K2_DrawTexture()); // 1298969284
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCanvas_K2_DrawTriangle()); // 3098818745
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCanvas_K2_Project()); // 3755475900
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCanvas_K2_StrLen()); // 4289041754
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCanvas_K2_TextSize()); // 202630218
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/Canvas.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Canvas.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("A drawing canvas."));
				MetaData->SetValue(NewProp_ReporterGraph, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Canvas.h"));
				MetaData->SetValue(NewProp_ReporterGraph, TEXT("ToolTip"), TEXT("Helper class to render 2d graphs on canvas"));
				MetaData->SetValue(NewProp_GradientTexture0, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Canvas.h"));
				MetaData->SetValue(NewProp_GradientTexture0, TEXT("ToolTip"), TEXT("Default texture to use"));
				MetaData->SetValue(NewProp_DefaultTexture, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Canvas.h"));
				MetaData->SetValue(NewProp_ColorModulate, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Canvas.h"));
				MetaData->SetValue(NewProp_ColorModulate, TEXT("ToolTip"), TEXT("Internal."));
				MetaData->SetValue(NewProp_SizeY, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Canvas.h"));
				MetaData->SetValue(NewProp_SizeY, TEXT("ToolTip"), TEXT("Zero-based actual dimensions X."));
				MetaData->SetValue(NewProp_SizeX, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Canvas.h"));
				MetaData->SetValue(NewProp_SizeX, TEXT("ToolTip"), TEXT("Don't bilinear filter."));
				MetaData->SetValue(NewProp_bNoSmooth, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Canvas.h"));
				MetaData->SetValue(NewProp_bNoSmooth, TEXT("ToolTip"), TEXT("Whether to center the text vertically (about CurY)"));
				MetaData->SetValue(NewProp_bCenterY, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Canvas.h"));
				MetaData->SetValue(NewProp_bCenterY, TEXT("ToolTip"), TEXT("Whether to center the text horizontally (about CurX)"));
				MetaData->SetValue(NewProp_bCenterX, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Canvas.h"));
				MetaData->SetValue(NewProp_bCenterX, TEXT("ToolTip"), TEXT("Color for drawing."));
				MetaData->SetValue(NewProp_DrawColor, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Canvas.h"));
				MetaData->SetValue(NewProp_DrawColor, TEXT("ToolTip"), TEXT("Bottom right clipping region."));
				MetaData->SetValue(NewProp_ClipY, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Canvas.h"));
				MetaData->SetValue(NewProp_ClipY, TEXT("ToolTip"), TEXT("Bottom right clipping region."));
				MetaData->SetValue(NewProp_ClipX, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Canvas.h"));
				MetaData->SetValue(NewProp_ClipX, TEXT("ToolTip"), TEXT("Origin for drawing in Y."));
				MetaData->SetValue(NewProp_OrgY, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Canvas.h"));
				MetaData->SetValue(NewProp_OrgY, TEXT("ToolTip"), TEXT("Origin for drawing in X."));
				MetaData->SetValue(NewProp_OrgX, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Canvas.h"));
				MetaData->SetValue(NewProp_OrgX, TEXT("ToolTip"), TEXT("Modifiable properties."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UCanvas(Z_Construct_UClass_UCanvas, TEXT("UCanvas"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UCanvas);
	UClass* Z_Construct_UClass_UChannel_NoRegister()
	{
		return UChannel::StaticClass();
	}
	UClass* Z_Construct_UClass_UChannel()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UChannel::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100088;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Connection = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Connection"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Connection, UChannel), 0x0000000000000000, Z_Construct_UClass_UNetConnection_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/Channel.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Channel.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Base class of communication channels."));
				MetaData->SetValue(NewProp_Connection, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Channel.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UChannel(Z_Construct_UClass_UChannel, TEXT("UChannel"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UChannel);
	UClass* Z_Construct_UClass_UActorChannel_NoRegister()
	{
		return UActorChannel::StaticClass();
	}
	UClass* Z_Construct_UClass_UActorChannel()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UChannel();
			Z_Construct_UPackage_Engine();
			OuterClass = UActorChannel::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100088;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Actor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Actor"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Actor, UActorChannel), 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/ActorChannel.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/ActorChannel.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("A channel for exchanging actor and its subobject's properties and RPCs.\n\nActorChannel manages the creation and lifetime of a replicated actor. Actual replication of properties and RPCs\nactually happens in FObjectReplicator now (see DataReplication.h).\n\nAn ActorChannel bunch looks like this:\n\n            |----------------------|---------------------------------------------------------------------------|\n            | SpawnInfo                    | (Spawn Info) Initial bunch only                                           |\n            |  -Actor Class        |        -Created by ActorChannel                                                   |\n            |  -Spawn Loc/Rot      |                                                                           |\n     | NetGUID assigns      |                                                                           |\n            |  -Actor NetGUID      |                                                                           |\n            |  -Component NetGUIDs |                                                                           |\n            |----------------------|---------------------------------------------------------------------------|\n            |                      |                                                                           |\n            |----------------------|---------------------------------------------------------------------------|\n            | NetGUID ObjRef       | (Content chunks) x number of replicating objects (Actor + any components) |\n            |                      |                -Each chunk created by its own FObjectReplicator instance.         |\n            |----------------------|---------------------------------------------------------------------------|\n     |                      |                                                                                  |\n            | Properties...        |                                                                           |\n            |                      |                                                                               |\n            | RPCs...              |                                                                           |\n     |                      |                                                                           |\n     |----------------------|---------------------------------------------------------------------------|\n            | </End Tag>           |                                                                           |\n            |----------------------|---------------------------------------------------------------------------|"));
				MetaData->SetValue(NewProp_Actor, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/ActorChannel.h"));
				MetaData->SetValue(NewProp_Actor, TEXT("ToolTip"), TEXT("Variables."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UActorChannel(Z_Construct_UClass_UActorChannel, TEXT("UActorChannel"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UActorChannel);
	UClass* Z_Construct_UClass_UControlChannel_NoRegister()
	{
		return UControlChannel::StaticClass();
	}
	UClass* Z_Construct_UClass_UControlChannel()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UChannel();
			Z_Construct_UPackage_Engine();
			OuterClass = UControlChannel::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100088;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/ControlChannel.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/ControlChannel.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("A channel for exchanging connection control messages."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UControlChannel(Z_Construct_UClass_UControlChannel, TEXT("UControlChannel"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UControlChannel);
	UClass* Z_Construct_UClass_UVoiceChannel_NoRegister()
	{
		return UVoiceChannel::StaticClass();
	}
	UClass* Z_Construct_UClass_UVoiceChannel()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UChannel();
			Z_Construct_UPackage_Engine();
			OuterClass = UVoiceChannel::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100088;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/VoiceChannel.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/VoiceChannel.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UVoiceChannel(Z_Construct_UClass_UVoiceChannel, TEXT("UVoiceChannel"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UVoiceChannel);
	UFunction* Z_Construct_UFunction_UCheatManager_BugIt()
	{
		struct CheatManager_eventBugIt_Parms
		{
			FString ScreenShotDescription;
		};
		UObject* Outer=Z_Construct_UClass_UCheatManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BugIt"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020600, 65535, sizeof(CheatManager_eventBugIt_Parms));
			UProperty* NewProp_ScreenShotDescription = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ScreenShotDescription"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ScreenShotDescription, CheatManager_eventBugIt_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/CheatManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("This function is used to print out the BugIt location.  It prints out copy and paste versions for both IMing someone to type in\nand also a gameinfo ?options version so that you can append it to your launching url and be taken to the correct place.\nAdditionally, it will take a screen shot so reporting bugs is a one command action!"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCheatManager_BugItGo()
	{
		struct CheatManager_eventBugItGo_Parms
		{
			float X;
			float Y;
			float Z;
			float Pitch;
			float Yaw;
			float Roll;
		};
		UObject* Outer=Z_Construct_UClass_UCheatManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BugItGo"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020600, 65535, sizeof(CheatManager_eventBugItGo_Parms));
			UProperty* NewProp_Roll = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Roll"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Roll, CheatManager_eventBugItGo_Parms), 0x0000000000000080);
			UProperty* NewProp_Yaw = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Yaw"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Yaw, CheatManager_eventBugItGo_Parms), 0x0000000000000080);
			UProperty* NewProp_Pitch = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Pitch"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Pitch, CheatManager_eventBugItGo_Parms), 0x0000000000000080);
			UProperty* NewProp_Z = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Z"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Z, CheatManager_eventBugItGo_Parms), 0x0000000000000080);
			UProperty* NewProp_Y = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Y"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Y, CheatManager_eventBugItGo_Parms), 0x0000000000000080);
			UProperty* NewProp_X = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("X"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(X, CheatManager_eventBugItGo_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/CheatManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("This will move the player and set their rotation to the passed in values.\nWe have this version of the BugIt family as it is easier to type in just raw numbers in the console."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCheatManager_BugItStringCreator()
	{
		struct CheatManager_eventBugItStringCreator_Parms
		{
			FVector ViewLocation;
			FRotator ViewRotation;
			FString GoString;
			FString LocString;
		};
		UObject* Outer=Z_Construct_UClass_UCheatManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BugItStringCreator"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00C20600, 65535, sizeof(CheatManager_eventBugItStringCreator_Parms));
			UProperty* NewProp_LocString = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LocString"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(LocString, CheatManager_eventBugItStringCreator_Parms), 0x0000000000000180);
			UProperty* NewProp_GoString = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("GoString"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(GoString, CheatManager_eventBugItStringCreator_Parms), 0x0000000000000180);
			UProperty* NewProp_ViewRotation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ViewRotation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ViewRotation, CheatManager_eventBugItStringCreator_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_ViewLocation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ViewLocation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ViewLocation, CheatManager_eventBugItStringCreator_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/CheatManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("This will create a BugItGo string for us.  Nice for calling form c++ where you just want the string and no Screenshots *"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCheatManager_ChangeSize()
	{
		struct CheatManager_eventChangeSize_Parms
		{
			float F;
		};
		UObject* Outer=Z_Construct_UClass_UCheatManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ChangeSize"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020600, 65535, sizeof(CheatManager_eventChangeSize_Parms));
			UProperty* NewProp_F = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("F"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(F, CheatManager_eventChangeSize_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/CheatManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Scale the player's size to be F * default size."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCheatManager_DamageTarget()
	{
		struct CheatManager_eventDamageTarget_Parms
		{
			float DamageAmount;
		};
		UObject* Outer=Z_Construct_UClass_UCheatManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DamageTarget"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020601, 65535, sizeof(CheatManager_eventDamageTarget_Parms));
			UProperty* NewProp_DamageAmount = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DamageAmount"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DamageAmount, CheatManager_eventDamageTarget_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/CheatManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Damage the actor you're looking at (sourced from the player)."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCheatManager_DebugCapsuleSweep()
	{
		UObject* Outer=Z_Construct_UClass_UCheatManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DebugCapsuleSweep"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020600, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/CheatManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Toggle capsule trace debugging. Will trace a capsule from current view point and show where it hits the world"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCheatManager_DebugCapsuleSweepCapture()
	{
		UObject* Outer=Z_Construct_UClass_UCheatManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DebugCapsuleSweepCapture"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020600, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/CheatManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Capture current trace and add to persistent list *"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCheatManager_DebugCapsuleSweepChannel()
	{
		struct CheatManager_eventDebugCapsuleSweepChannel_Parms
		{
			TEnumAsByte<ECollisionChannel> Channel;
		};
		UObject* Outer=Z_Construct_UClass_UCheatManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DebugCapsuleSweepChannel"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020600, 65535, sizeof(CheatManager_eventDebugCapsuleSweepChannel_Parms));
			UProperty* NewProp_Channel = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Channel"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(Channel, CheatManager_eventDebugCapsuleSweepChannel_Parms), 0x0000000000000080, Z_Construct_UEnum_Engine_ECollisionChannel());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/CheatManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Change Trace Channel *"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCheatManager_DebugCapsuleSweepClear()
	{
		UObject* Outer=Z_Construct_UClass_UCheatManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DebugCapsuleSweepClear"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020600, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/CheatManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Clear persistent list for trace capture *"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCheatManager_DebugCapsuleSweepComplex()
	{
		struct CheatManager_eventDebugCapsuleSweepComplex_Parms
		{
			bool bTraceComplex;
		};
		UObject* Outer=Z_Construct_UClass_UCheatManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DebugCapsuleSweepComplex"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020600, 65535, sizeof(CheatManager_eventDebugCapsuleSweepComplex_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTraceComplex, CheatManager_eventDebugCapsuleSweepComplex_Parms, bool);
			UProperty* NewProp_bTraceComplex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTraceComplex"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTraceComplex, CheatManager_eventDebugCapsuleSweepComplex_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bTraceComplex, CheatManager_eventDebugCapsuleSweepComplex_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/CheatManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Change Trace Complex setting *"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCheatManager_DebugCapsuleSweepPawn()
	{
		UObject* Outer=Z_Construct_UClass_UCheatManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DebugCapsuleSweepPawn"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020600, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/CheatManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Capture current local PC's pawn's location and add to persistent list *"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCheatManager_DebugCapsuleSweepSize()
	{
		struct CheatManager_eventDebugCapsuleSweepSize_Parms
		{
			float HalfHeight;
			float Radius;
		};
		UObject* Outer=Z_Construct_UClass_UCheatManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DebugCapsuleSweepSize"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020600, 65535, sizeof(CheatManager_eventDebugCapsuleSweepSize_Parms));
			UProperty* NewProp_Radius = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Radius"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Radius, CheatManager_eventDebugCapsuleSweepSize_Parms), 0x0000000000000080);
			UProperty* NewProp_HalfHeight = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("HalfHeight"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(HalfHeight, CheatManager_eventDebugCapsuleSweepSize_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/CheatManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Change Trace capsule size *"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCheatManager_DestroyAll()
	{
		struct CheatManager_eventDestroyAll_Parms
		{
			TSubclassOf<AActor>  aClass;
		};
		UObject* Outer=Z_Construct_UClass_UCheatManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DestroyAll"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020600, 65535, sizeof(CheatManager_eventDestroyAll_Parms));
			UProperty* NewProp_aClass = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("aClass"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(aClass, CheatManager_eventDestroyAll_Parms), 0x0004000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/CheatManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Destroy all actors of class aClass"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCheatManager_DestroyAllPawnsExceptTarget()
	{
		UObject* Outer=Z_Construct_UClass_UCheatManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DestroyAllPawnsExceptTarget"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020601, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/CheatManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Destroy all pawns except for the (pawn) target.  If no (pawn) target is found we don't destroy anything."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCheatManager_DestroyPawns()
	{
		struct CheatManager_eventDestroyPawns_Parms
		{
			TSubclassOf<APawn>  aClass;
		};
		UObject* Outer=Z_Construct_UClass_UCheatManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DestroyPawns"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020600, 65535, sizeof(CheatManager_eventDestroyPawns_Parms));
			UProperty* NewProp_aClass = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("aClass"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(aClass, CheatManager_eventDestroyPawns_Parms), 0x0004000000000080, Z_Construct_UClass_APawn_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/CheatManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Destroys (by calling destroy directly) all non-player pawns of class aClass in the level"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCheatManager_DestroyTarget()
	{
		UObject* Outer=Z_Construct_UClass_UCheatManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DestroyTarget"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020600, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/CheatManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Destroy the actor you're looking at."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCheatManager_DumpOnlineSessionState()
	{
		UObject* Outer=Z_Construct_UClass_UCheatManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DumpOnlineSessionState"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020600, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/CheatManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Dump online session information"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCheatManager_DumpPartyState()
	{
		UObject* Outer=Z_Construct_UClass_UCheatManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DumpPartyState"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020600, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/CheatManager.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCheatManager_DumpVoiceMutingState()
	{
		UObject* Outer=Z_Construct_UClass_UCheatManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DumpVoiceMutingState"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020600, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/CheatManager.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCheatManager_FlushLog()
	{
		UObject* Outer=Z_Construct_UClass_UCheatManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FlushLog"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020600, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/CheatManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("This will force a flush of the output log to file"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCheatManager_Fly()
	{
		UObject* Outer=Z_Construct_UClass_UCheatManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Fly"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020600, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/CheatManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Pawn can fly."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCheatManager_FontAtlasVisualizer()
	{
		UObject* Outer=Z_Construct_UClass_UCheatManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FontAtlasVisualizer"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020600, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/CheatManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Spawns a Slate font atlas visualizer in game"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCheatManager_FreezeFrame()
	{
		struct CheatManager_eventFreezeFrame_Parms
		{
			float Delay;
		};
		UObject* Outer=Z_Construct_UClass_UCheatManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FreezeFrame"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020600, 65535, sizeof(CheatManager_eventFreezeFrame_Parms));
			UProperty* NewProp_Delay = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Delay"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Delay, CheatManager_eventFreezeFrame_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/CheatManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Pause the game for Delay seconds."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCheatManager_Ghost()
	{
		UObject* Outer=Z_Construct_UClass_UCheatManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Ghost"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020600, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/CheatManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Pawn no longer collides with the world, and can fly"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCheatManager_God()
	{
		UObject* Outer=Z_Construct_UClass_UCheatManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("God"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020600, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/CheatManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Invulnerability cheat."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCheatManager_InvertMouse()
	{
		UObject* Outer=Z_Construct_UClass_UCheatManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("InvertMouse"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020601, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/CheatManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Backwards compatibility exec function for people used to it instead of using InvertAxisKey"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCheatManager_LogLoc()
	{
		UObject* Outer=Z_Construct_UClass_UCheatManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LogLoc"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020600, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/CheatManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Logs the current location in bugit format without taking screenshot and further routing."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCheatManager_OnlyLoadLevel()
	{
		struct CheatManager_eventOnlyLoadLevel_Parms
		{
			FName PackageName;
		};
		UObject* Outer=Z_Construct_UClass_UCheatManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnlyLoadLevel"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020600, 65535, sizeof(CheatManager_eventOnlyLoadLevel_Parms));
			UProperty* NewProp_PackageName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PackageName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(PackageName, CheatManager_eventOnlyLoadLevel_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/CheatManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Load the given level."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCheatManager_PlayersOnly()
	{
		UObject* Outer=Z_Construct_UClass_UCheatManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PlayersOnly"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020600, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/CheatManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Freeze everything in the level except for players."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCheatManager_RebuildNavigation()
	{
		UObject* Outer=Z_Construct_UClass_UCheatManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RebuildNavigation"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020600, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/CheatManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Builds the navigation mesh (or rebuilds it). *"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCheatManager_ServerToggleAILogging()
	{
		UObject* Outer=Z_Construct_UClass_UCheatManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ServerToggleAILogging"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x80220CC0, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/CheatManager.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCheatManager_SetMouseSensitivityToDefault()
	{
		UObject* Outer=Z_Construct_UClass_UCheatManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetMouseSensitivityToDefault"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020601, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/CheatManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Exec function to return the mouse sensitivity to its default value"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCheatManager_SetNavDrawDistance()
	{
		struct CheatManager_eventSetNavDrawDistance_Parms
		{
			float DrawDistance;
		};
		UObject* Outer=Z_Construct_UClass_UCheatManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetNavDrawDistance"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020601, 65535, sizeof(CheatManager_eventSetNavDrawDistance_Parms));
			UProperty* NewProp_DrawDistance = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DrawDistance"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DrawDistance, CheatManager_eventSetNavDrawDistance_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/CheatManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets navigation drawing distance. Relevant only in non-editor modes. *"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCheatManager_SetWorldOrigin()
	{
		UObject* Outer=Z_Construct_UClass_UCheatManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetWorldOrigin"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020601, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/CheatManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Translate world origin to this player position"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCheatManager_Slomo()
	{
		struct CheatManager_eventSlomo_Parms
		{
			float T;
		};
		UObject* Outer=Z_Construct_UClass_UCheatManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Slomo"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020600, 65535, sizeof(CheatManager_eventSlomo_Parms));
			UProperty* NewProp_T = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("T"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(T, CheatManager_eventSlomo_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/CheatManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Modify time dilation to change apparent speed of passage of time.  Slomo 0.1 makes everything move very slowly, Slomo 10 makes everything move very fast."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCheatManager_StreamLevelIn()
	{
		struct CheatManager_eventStreamLevelIn_Parms
		{
			FName PackageName;
		};
		UObject* Outer=Z_Construct_UClass_UCheatManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("StreamLevelIn"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020600, 65535, sizeof(CheatManager_eventStreamLevelIn_Parms));
			UProperty* NewProp_PackageName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PackageName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(PackageName, CheatManager_eventStreamLevelIn_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/CheatManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Stream in the given level."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCheatManager_StreamLevelOut()
	{
		struct CheatManager_eventStreamLevelOut_Parms
		{
			FName PackageName;
		};
		UObject* Outer=Z_Construct_UClass_UCheatManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("StreamLevelOut"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020600, 65535, sizeof(CheatManager_eventStreamLevelOut_Parms));
			UProperty* NewProp_PackageName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PackageName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(PackageName, CheatManager_eventStreamLevelOut_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/CheatManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Stream out the given level."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCheatManager_Summon()
	{
		struct CheatManager_eventSummon_Parms
		{
			FString ClassName;
		};
		UObject* Outer=Z_Construct_UClass_UCheatManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Summon"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020600, 65535, sizeof(CheatManager_eventSummon_Parms));
			UProperty* NewProp_ClassName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ClassName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ClassName, CheatManager_eventSummon_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/CheatManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Load Classname and spawn an actor of that class"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCheatManager_Teleport()
	{
		UObject* Outer=Z_Construct_UClass_UCheatManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Teleport"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020600, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/CheatManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Teleport to surface player is looking at."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCheatManager_TestCollisionDistance()
	{
		UObject* Outer=Z_Construct_UClass_UCheatManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TestCollisionDistance"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020600, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/CheatManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Test all volumes in the world to the player controller's view location*"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCheatManager_TextureAtlasVisualizer()
	{
		UObject* Outer=Z_Construct_UClass_UCheatManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TextureAtlasVisualizer"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020600, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/CheatManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Spawns a Slate texture atlas visualizer in game"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCheatManager_ToggleAILogging()
	{
		UObject* Outer=Z_Construct_UClass_UCheatManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ToggleAILogging"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020600, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/CheatManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("toggles AI logging"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCheatManager_ToggleDebugCamera()
	{
		UObject* Outer=Z_Construct_UClass_UCheatManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ToggleDebugCamera"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020600, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/CheatManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Toggle between debug camera/player camera without locking gameplay and with locking local player controller input."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCheatManager_ViewActor()
	{
		struct CheatManager_eventViewActor_Parms
		{
			FName ActorName;
		};
		UObject* Outer=Z_Construct_UClass_UCheatManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ViewActor"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020600, 65535, sizeof(CheatManager_eventViewActor_Parms));
			UProperty* NewProp_ActorName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActorName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(ActorName, CheatManager_eventViewActor_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/CheatManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("View from the point of view of AActor with Name ActorName."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCheatManager_ViewClass()
	{
		struct CheatManager_eventViewClass_Parms
		{
			TSubclassOf<AActor>  DesiredClass;
		};
		UObject* Outer=Z_Construct_UClass_UCheatManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ViewClass"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020600, 65535, sizeof(CheatManager_eventViewClass_Parms));
			UProperty* NewProp_DesiredClass = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DesiredClass"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(DesiredClass, CheatManager_eventViewClass_Parms), 0x0004000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/CheatManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("View from the point of view of an AActor of class DesiredClass.  Each subsequent ViewClass cycles through the list of actors of that class."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCheatManager_ViewPlayer()
	{
		struct CheatManager_eventViewPlayer_Parms
		{
			FString S;
		};
		UObject* Outer=Z_Construct_UClass_UCheatManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ViewPlayer"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020600, 65535, sizeof(CheatManager_eventViewPlayer_Parms));
			UProperty* NewProp_S = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("S"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(S, CheatManager_eventViewPlayer_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/CheatManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("View from the point of view of player with PlayerName S."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCheatManager_ViewSelf()
	{
		UObject* Outer=Z_Construct_UClass_UCheatManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ViewSelf"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020600, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/CheatManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Make controlled pawn the viewtarget again."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCheatManager_Walk()
	{
		UObject* Outer=Z_Construct_UClass_UCheatManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Walk"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020600, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/CheatManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Return to walking movement mode from Fly or Ghost cheat."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCheatManager_WidgetReflector()
	{
		UObject* Outer=Z_Construct_UClass_UCheatManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WidgetReflector"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020600, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/CheatManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Spawns a Slate Widget Inspector in game *"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UCheatManager_NoRegister()
	{
		return UCheatManager::StaticClass();
	}
	UClass* Z_Construct_UClass_UCheatManager()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UCheatManager::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_UCheatManager_BugIt());
				OuterClass->LinkChild(Z_Construct_UFunction_UCheatManager_BugItGo());
				OuterClass->LinkChild(Z_Construct_UFunction_UCheatManager_BugItStringCreator());
				OuterClass->LinkChild(Z_Construct_UFunction_UCheatManager_ChangeSize());
				OuterClass->LinkChild(Z_Construct_UFunction_UCheatManager_DamageTarget());
				OuterClass->LinkChild(Z_Construct_UFunction_UCheatManager_DebugCapsuleSweep());
				OuterClass->LinkChild(Z_Construct_UFunction_UCheatManager_DebugCapsuleSweepCapture());
				OuterClass->LinkChild(Z_Construct_UFunction_UCheatManager_DebugCapsuleSweepChannel());
				OuterClass->LinkChild(Z_Construct_UFunction_UCheatManager_DebugCapsuleSweepClear());
				OuterClass->LinkChild(Z_Construct_UFunction_UCheatManager_DebugCapsuleSweepComplex());
				OuterClass->LinkChild(Z_Construct_UFunction_UCheatManager_DebugCapsuleSweepPawn());
				OuterClass->LinkChild(Z_Construct_UFunction_UCheatManager_DebugCapsuleSweepSize());
				OuterClass->LinkChild(Z_Construct_UFunction_UCheatManager_DestroyAll());
				OuterClass->LinkChild(Z_Construct_UFunction_UCheatManager_DestroyAllPawnsExceptTarget());
				OuterClass->LinkChild(Z_Construct_UFunction_UCheatManager_DestroyPawns());
				OuterClass->LinkChild(Z_Construct_UFunction_UCheatManager_DestroyTarget());
				OuterClass->LinkChild(Z_Construct_UFunction_UCheatManager_DumpOnlineSessionState());
				OuterClass->LinkChild(Z_Construct_UFunction_UCheatManager_DumpPartyState());
				OuterClass->LinkChild(Z_Construct_UFunction_UCheatManager_DumpVoiceMutingState());
				OuterClass->LinkChild(Z_Construct_UFunction_UCheatManager_FlushLog());
				OuterClass->LinkChild(Z_Construct_UFunction_UCheatManager_Fly());
				OuterClass->LinkChild(Z_Construct_UFunction_UCheatManager_FontAtlasVisualizer());
				OuterClass->LinkChild(Z_Construct_UFunction_UCheatManager_FreezeFrame());
				OuterClass->LinkChild(Z_Construct_UFunction_UCheatManager_Ghost());
				OuterClass->LinkChild(Z_Construct_UFunction_UCheatManager_God());
				OuterClass->LinkChild(Z_Construct_UFunction_UCheatManager_InvertMouse());
				OuterClass->LinkChild(Z_Construct_UFunction_UCheatManager_LogLoc());
				OuterClass->LinkChild(Z_Construct_UFunction_UCheatManager_OnlyLoadLevel());
				OuterClass->LinkChild(Z_Construct_UFunction_UCheatManager_PlayersOnly());
				OuterClass->LinkChild(Z_Construct_UFunction_UCheatManager_RebuildNavigation());
				OuterClass->LinkChild(Z_Construct_UFunction_UCheatManager_ServerToggleAILogging());
				OuterClass->LinkChild(Z_Construct_UFunction_UCheatManager_SetMouseSensitivityToDefault());
				OuterClass->LinkChild(Z_Construct_UFunction_UCheatManager_SetNavDrawDistance());
				OuterClass->LinkChild(Z_Construct_UFunction_UCheatManager_SetWorldOrigin());
				OuterClass->LinkChild(Z_Construct_UFunction_UCheatManager_Slomo());
				OuterClass->LinkChild(Z_Construct_UFunction_UCheatManager_StreamLevelIn());
				OuterClass->LinkChild(Z_Construct_UFunction_UCheatManager_StreamLevelOut());
				OuterClass->LinkChild(Z_Construct_UFunction_UCheatManager_Summon());
				OuterClass->LinkChild(Z_Construct_UFunction_UCheatManager_Teleport());
				OuterClass->LinkChild(Z_Construct_UFunction_UCheatManager_TestCollisionDistance());
				OuterClass->LinkChild(Z_Construct_UFunction_UCheatManager_TextureAtlasVisualizer());
				OuterClass->LinkChild(Z_Construct_UFunction_UCheatManager_ToggleAILogging());
				OuterClass->LinkChild(Z_Construct_UFunction_UCheatManager_ToggleDebugCamera());
				OuterClass->LinkChild(Z_Construct_UFunction_UCheatManager_ViewActor());
				OuterClass->LinkChild(Z_Construct_UFunction_UCheatManager_ViewClass());
				OuterClass->LinkChild(Z_Construct_UFunction_UCheatManager_ViewPlayer());
				OuterClass->LinkChild(Z_Construct_UFunction_UCheatManager_ViewSelf());
				OuterClass->LinkChild(Z_Construct_UFunction_UCheatManager_Walk());
				OuterClass->LinkChild(Z_Construct_UFunction_UCheatManager_WidgetReflector());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_DebugCameraControllerClass = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DebugCameraControllerClass"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(DebugCameraControllerClass, UCheatManager), 0x0004000000000000, Z_Construct_UClass_ADebugCameraController_NoRegister());
				UProperty* NewProp_DebugCameraControllerRef = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DebugCameraControllerRef"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(DebugCameraControllerRef, UCheatManager), 0x0000000000000000, Z_Construct_UClass_ADebugCameraController_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCheatManager_BugIt()); // 3517545514
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCheatManager_BugItGo()); // 2718053728
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCheatManager_BugItStringCreator()); // 200516374
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCheatManager_ChangeSize()); // 159930251
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCheatManager_DamageTarget()); // 2758963127
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCheatManager_DebugCapsuleSweep()); // 2466211558
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCheatManager_DebugCapsuleSweepCapture()); // 3288798506
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCheatManager_DebugCapsuleSweepChannel()); // 2046386980
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCheatManager_DebugCapsuleSweepClear()); // 1963542042
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCheatManager_DebugCapsuleSweepComplex()); // 231292198
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCheatManager_DebugCapsuleSweepPawn()); // 1104535878
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCheatManager_DebugCapsuleSweepSize()); // 2214307267
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCheatManager_DestroyAll()); // 3138682278
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCheatManager_DestroyAllPawnsExceptTarget()); // 3820609315
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCheatManager_DestroyPawns()); // 3904190936
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCheatManager_DestroyTarget()); // 2445117808
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCheatManager_DumpOnlineSessionState()); // 24270555
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCheatManager_DumpPartyState()); // 661784632
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCheatManager_DumpVoiceMutingState()); // 3077708269
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCheatManager_FlushLog()); // 3579936872
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCheatManager_Fly()); // 1675258634
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCheatManager_FontAtlasVisualizer()); // 3544158803
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCheatManager_FreezeFrame()); // 3797390339
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCheatManager_Ghost()); // 1539181404
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCheatManager_God()); // 3883622375
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCheatManager_InvertMouse()); // 3828574587
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCheatManager_LogLoc()); // 518244244
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCheatManager_OnlyLoadLevel()); // 3139659787
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCheatManager_PlayersOnly()); // 264708628
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCheatManager_RebuildNavigation()); // 2386971423
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCheatManager_ServerToggleAILogging()); // 3603746211
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCheatManager_SetMouseSensitivityToDefault()); // 3653867848
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCheatManager_SetNavDrawDistance()); // 2758945446
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCheatManager_SetWorldOrigin()); // 129057933
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCheatManager_Slomo()); // 3394664168
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCheatManager_StreamLevelIn()); // 2784497389
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCheatManager_StreamLevelOut()); // 1229819318
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCheatManager_Summon()); // 4096377439
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCheatManager_Teleport()); // 3179575550
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCheatManager_TestCollisionDistance()); // 548927804
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCheatManager_TextureAtlasVisualizer()); // 3626700903
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCheatManager_ToggleAILogging()); // 3727818591
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCheatManager_ToggleDebugCamera()); // 1552648367
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCheatManager_ViewActor()); // 3817585375
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCheatManager_ViewClass()); // 1998580081
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCheatManager_ViewPlayer()); // 2704097210
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCheatManager_ViewSelf()); // 1946422571
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCheatManager_Walk()); // 3277810968
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCheatManager_WidgetReflector()); // 3831047327
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("GameFramework/CheatManager.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/CheatManager.h"));
				MetaData->SetValue(NewProp_DebugCameraControllerClass, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/CheatManager.h"));
				MetaData->SetValue(NewProp_DebugCameraControllerClass, TEXT("ToolTip"), TEXT("Debug camera - used to have independent camera without stopping gameplay"));
				MetaData->SetValue(NewProp_DebugCameraControllerRef, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/CheatManager.h"));
				MetaData->SetValue(NewProp_DebugCameraControllerRef, TEXT("ToolTip"), TEXT("Debug camera - used to have independent camera without stopping gameplay"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UCheatManager(Z_Construct_UClass_UCheatManager, TEXT("UCheatManager"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UCheatManager);
	UClass* Z_Construct_UClass_UCheckBoxStyleAsset_NoRegister()
	{
		return UCheckBoxStyleAsset::StaticClass();
	}
	UClass* Z_Construct_UClass_UCheckBoxStyleAsset()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UCheckBoxStyleAsset::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_CheckBoxStyle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CheckBoxStyle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(CheckBoxStyle, UCheckBoxStyleAsset), 0x0000000000000001, Z_Construct_UScriptStruct_FCheckBoxStyle());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Slate/CheckboxStyleAsset.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Slate/CheckboxStyleAsset.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("An asset describing a CheckBox's appearance.\nJust a wrapper for the struct with real data in it."));
				MetaData->SetValue(NewProp_CheckBoxStyle, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_CheckBoxStyle, TEXT("ModuleRelativePath"), TEXT("Classes/Slate/CheckboxStyleAsset.h"));
				MetaData->SetValue(NewProp_CheckBoxStyle, TEXT("ShowOnlyInnerProperties"), TEXT(""));
				MetaData->SetValue(NewProp_CheckBoxStyle, TEXT("ToolTip"), TEXT("The actual data describing the Check Box's appearance."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UCheckBoxStyleAsset(Z_Construct_UClass_UCheckBoxStyleAsset, TEXT("UCheckBoxStyleAsset"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UCheckBoxStyleAsset);
	UClass* Z_Construct_UClass_UCommandlet_NoRegister()
	{
		return UCommandlet::StaticClass();
	}
	UClass* Z_Construct_UClass_UCommandlet()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UCommandlet::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080089;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(ShowErrorCount, UCommandlet, uint8);
				UProperty* NewProp_ShowErrorCount = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ShowErrorCount"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ShowErrorCount, UCommandlet), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(ShowErrorCount, UCommandlet), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(LogToConsole, UCommandlet, uint8);
				UProperty* NewProp_LogToConsole = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LogToConsole"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(LogToConsole, UCommandlet), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(LogToConsole, UCommandlet), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsEditor, UCommandlet, uint8);
				UProperty* NewProp_IsEditor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("IsEditor"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsEditor, UCommandlet), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(IsEditor, UCommandlet), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsClient, UCommandlet, uint8);
				UProperty* NewProp_IsClient = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("IsClient"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsClient, UCommandlet), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(IsClient, UCommandlet), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsServer, UCommandlet, uint8);
				UProperty* NewProp_IsServer = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("IsServer"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsServer, UCommandlet), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(IsServer, UCommandlet), sizeof(uint8), false);
				UProperty* NewProp_HelpParamDescriptions = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HelpParamDescriptions"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(HelpParamDescriptions, UCommandlet), 0x0000000000000000);
				UProperty* NewProp_HelpParamDescriptions_Inner = new(EC_InternalUseOnlyConstructor, NewProp_HelpParamDescriptions, TEXT("HelpParamDescriptions"), RF_Public|RF_Transient|RF_Native) UStrProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
				UProperty* NewProp_HelpParamNames = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HelpParamNames"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(HelpParamNames, UCommandlet), 0x0000000000000000);
				UProperty* NewProp_HelpParamNames_Inner = new(EC_InternalUseOnlyConstructor, NewProp_HelpParamNames, TEXT("HelpParamNames"), RF_Public|RF_Transient|RF_Native) UStrProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
				UProperty* NewProp_HelpWebLink = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HelpWebLink"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(HelpWebLink, UCommandlet), 0x0000000000000000);
				UProperty* NewProp_HelpUsage = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HelpUsage"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(HelpUsage, UCommandlet), 0x0000000000000000);
				UProperty* NewProp_HelpDescription = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HelpDescription"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(HelpDescription, UCommandlet), 0x0000000000000000);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Commandlets/Commandlet.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Commandlets/Commandlet.h"));
				MetaData->SetValue(NewProp_ShowErrorCount, TEXT("ModuleRelativePath"), TEXT("Classes/Commandlets/Commandlet.h"));
				MetaData->SetValue(NewProp_ShowErrorCount, TEXT("ToolTip"), TEXT("Whether to show standard error and warning count on exit"));
				MetaData->SetValue(NewProp_LogToConsole, TEXT("ModuleRelativePath"), TEXT("Classes/Commandlets/Commandlet.h"));
				MetaData->SetValue(NewProp_LogToConsole, TEXT("ToolTip"), TEXT("Whether to redirect standard log to the console"));
				MetaData->SetValue(NewProp_IsEditor, TEXT("ModuleRelativePath"), TEXT("Classes/Commandlets/Commandlet.h"));
				MetaData->SetValue(NewProp_IsClient, TEXT("ModuleRelativePath"), TEXT("Classes/Commandlets/Commandlet.h"));
				MetaData->SetValue(NewProp_IsServer, TEXT("ModuleRelativePath"), TEXT("Classes/Commandlets/Commandlet.h"));
				MetaData->SetValue(NewProp_IsServer, TEXT("ToolTip"), TEXT("Whether to load objects required in server, client, and editor context.  If IsEditor is set to false, then a\nUGameEngine (or whatever the value of /Script/Engine.Engine.GameEngine is) will be created for the commandlet instead\nof a UEditorEngine (or /Script/Engine.Engine.EditorEngine), unless the commandlet overrides the CreateCustomEngine method."));
				MetaData->SetValue(NewProp_HelpParamDescriptions, TEXT("ModuleRelativePath"), TEXT("Classes/Commandlets/Commandlet.h"));
				MetaData->SetValue(NewProp_HelpParamDescriptions, TEXT("ToolTip"), TEXT("The description of the parameter"));
				MetaData->SetValue(NewProp_HelpParamNames, TEXT("ModuleRelativePath"), TEXT("Classes/Commandlets/Commandlet.h"));
				MetaData->SetValue(NewProp_HelpParamNames, TEXT("ToolTip"), TEXT("The name of the parameter the commandlet takes"));
				MetaData->SetValue(NewProp_HelpWebLink, TEXT("ModuleRelativePath"), TEXT("Classes/Commandlets/Commandlet.h"));
				MetaData->SetValue(NewProp_HelpWebLink, TEXT("ToolTip"), TEXT("Hyperlink for more info"));
				MetaData->SetValue(NewProp_HelpUsage, TEXT("ModuleRelativePath"), TEXT("Classes/Commandlets/Commandlet.h"));
				MetaData->SetValue(NewProp_HelpUsage, TEXT("ToolTip"), TEXT("Usage template to show for \"ucc help\""));
				MetaData->SetValue(NewProp_HelpDescription, TEXT("ModuleRelativePath"), TEXT("Classes/Commandlets/Commandlet.h"));
				MetaData->SetValue(NewProp_HelpDescription, TEXT("ToolTip"), TEXT("Description of the commandlet's purpose"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UCommandlet(Z_Construct_UClass_UCommandlet, TEXT("UCommandlet"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UCommandlet);
	UClass* Z_Construct_UClass_UPluginCommandlet_NoRegister()
	{
		return UPluginCommandlet::StaticClass();
	}
	UClass* Z_Construct_UClass_UPluginCommandlet()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UCommandlet();
			Z_Construct_UPackage_Engine();
			OuterClass = UPluginCommandlet::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000088;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Commandlets/PluginCommandlet.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Commandlets/PluginCommandlet.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UPluginCommandlet(Z_Construct_UClass_UPluginCommandlet, TEXT("UPluginCommandlet"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UPluginCommandlet);
	UClass* Z_Construct_UClass_USmokeTestCommandlet_NoRegister()
	{
		return USmokeTestCommandlet::StaticClass();
	}
	UClass* Z_Construct_UClass_USmokeTestCommandlet()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UCommandlet();
			Z_Construct_UPackage_Engine();
			OuterClass = USmokeTestCommandlet::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000088;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Commandlets/SmokeTestCommandlet.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Commandlets/SmokeTestCommandlet.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USmokeTestCommandlet(Z_Construct_UClass_USmokeTestCommandlet, TEXT("USmokeTestCommandlet"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(USmokeTestCommandlet);
	UScriptStruct* Z_Construct_UScriptStruct_FAutoCompleteNode()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FAutoCompleteNode_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("AutoCompleteNode"), sizeof(FAutoCompleteNode), Get_Z_Construct_UScriptStruct_FAutoCompleteNode_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AutoCompleteNode"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FAutoCompleteNode>, EStructFlags(0x00000001));
			UProperty* NewProp_AutoCompleteListIndices = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("AutoCompleteListIndices"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(AutoCompleteListIndices, FAutoCompleteNode), 0x0000000000000000);
			UProperty* NewProp_AutoCompleteListIndices_Inner = new(EC_InternalUseOnlyConstructor, NewProp_AutoCompleteListIndices, TEXT("AutoCompleteListIndices"), RF_Public|RF_Transient|RF_Native) UIntProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_IndexChar = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("IndexChar"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(IndexChar, FAutoCompleteNode), 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Console.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Node for storing an auto-complete tree based on each char in the command."));
			MetaData->SetValue(NewProp_AutoCompleteListIndices, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Console.h"));
			MetaData->SetValue(NewProp_AutoCompleteListIndices, TEXT("ToolTip"), TEXT("Indices into AutoCompleteList for commands that match to this level"));
			MetaData->SetValue(NewProp_IndexChar, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Console.h"));
			MetaData->SetValue(NewProp_IndexChar, TEXT("ToolTip"), TEXT("Char for node in the tree"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAutoCompleteNode_CRC() { return 4196299152U; }
	UClass* Z_Construct_UClass_UConsole_NoRegister()
	{
		return UConsole::StaticClass();
	}
	UClass* Z_Construct_UClass_UConsole()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UConsole::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x2010008C;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_HistoryBuffer = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HistoryBuffer"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(HistoryBuffer, UConsole), 0x0000000000004000);
				UProperty* NewProp_HistoryBuffer_Inner = new(EC_InternalUseOnlyConstructor, NewProp_HistoryBuffer, TEXT("HistoryBuffer"), RF_Public|RF_Transient|RF_Native) UStrProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000004000);
				UProperty* NewProp_DefaultTexture_White = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultTexture_White"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(DefaultTexture_White, UConsole), 0x0000000000000000, Z_Construct_UClass_UTexture2D_NoRegister());
				UProperty* NewProp_DefaultTexture_Black = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultTexture_Black"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(DefaultTexture_Black, UConsole), 0x0000000000000000, Z_Construct_UClass_UTexture2D_NoRegister());
				UProperty* NewProp_ConsoleTargetPlayer = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConsoleTargetPlayer"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ConsoleTargetPlayer, UConsole), 0x0000000000000000, Z_Construct_UClass_ULocalPlayer_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("Input"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/Console.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Console.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("A basic command line console that accepts most commands."));
				MetaData->SetValue(NewProp_HistoryBuffer, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Console.h"));
				MetaData->SetValue(NewProp_HistoryBuffer, TEXT("ToolTip"), TEXT("Holds the history buffer, order is old to new"));
				MetaData->SetValue(NewProp_DefaultTexture_White, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Console.h"));
				MetaData->SetValue(NewProp_DefaultTexture_Black, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Console.h"));
				MetaData->SetValue(NewProp_ConsoleTargetPlayer, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Console.h"));
				MetaData->SetValue(NewProp_ConsoleTargetPlayer, TEXT("ToolTip"), TEXT("The player which the next console command should be executed in the context of.  If nullptr, execute in the viewport."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UConsole(Z_Construct_UClass_UConsole, TEXT("UConsole"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UConsole);
	UScriptStruct* Z_Construct_UScriptStruct_FRuntimeCurveLinearColor()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FRuntimeCurveLinearColor_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("RuntimeCurveLinearColor"), sizeof(FRuntimeCurveLinearColor), Get_Z_Construct_UScriptStruct_FRuntimeCurveLinearColor_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RuntimeCurveLinearColor"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FRuntimeCurveLinearColor>, EStructFlags(0x00000201));
			UProperty* NewProp_ExternalCurve = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ExternalCurve"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ExternalCurve, FRuntimeCurveLinearColor), 0x0000000000000001, Z_Construct_UClass_UCurveLinearColor_NoRegister());
			UProperty* NewProp_ColorCurves = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ColorCurves"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ColorCurves, FRuntimeCurveLinearColor), 0x0000000000000000, Z_Construct_UScriptStruct_FRichCurve());
			NewProp_ColorCurves->ArrayDim = CPP_ARRAY_DIM(ColorCurves, FRuntimeCurveLinearColor);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Curves/CurveLinearColor.h"));
			MetaData->SetValue(NewProp_ExternalCurve, TEXT("Category"), TEXT("RuntimeFloatCurve"));
			MetaData->SetValue(NewProp_ExternalCurve, TEXT("ModuleRelativePath"), TEXT("Classes/Curves/CurveLinearColor.h"));
			MetaData->SetValue(NewProp_ColorCurves, TEXT("ModuleRelativePath"), TEXT("Classes/Curves/CurveLinearColor.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FRuntimeCurveLinearColor_CRC() { return 4237834597U; }
	UFunction* Z_Construct_UFunction_UCurveLinearColor_GetLinearColorValue()
	{
		struct CurveLinearColor_eventGetLinearColorValue_Parms
		{
			float InTime;
			FLinearColor ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UCurveLinearColor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetLinearColorValue"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54820400, 65535, sizeof(CurveLinearColor_eventGetLinearColorValue_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, CurveLinearColor_eventGetLinearColorValue_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_InTime = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InTime, CurveLinearColor_eventGetLinearColorValue_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Curves"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Curves/CurveLinearColor.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UCurveLinearColor_NoRegister()
	{
		return UCurveLinearColor::StaticClass();
	}
	UClass* Z_Construct_UClass_UCurveLinearColor()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UCurveBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UCurveLinearColor::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_UCurveLinearColor_GetLinearColorValue());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_FloatCurves = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FloatCurves"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(FloatCurves, UCurveLinearColor), 0x0000000000000000, Z_Construct_UScriptStruct_FRichCurve());
				NewProp_FloatCurves->ArrayDim = CPP_ARRAY_DIM(FloatCurves, UCurveLinearColor);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCurveLinearColor_GetLinearColorValue()); // 288849375
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Curves/CurveLinearColor.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Curves/CurveLinearColor.h"));
				MetaData->SetValue(NewProp_FloatCurves, TEXT("ModuleRelativePath"), TEXT("Classes/Curves/CurveLinearColor.h"));
				MetaData->SetValue(NewProp_FloatCurves, TEXT("ToolTip"), TEXT("Keyframe data, one curve for red, green, blue, and alpha"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UCurveLinearColor(Z_Construct_UClass_UCurveLinearColor, TEXT("UCurveLinearColor"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UCurveLinearColor);
	UFunction* Z_Construct_UFunction_UCurveVector_GetVectorValue()
	{
		struct CurveVector_eventGetVectorValue_Parms
		{
			float InTime;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UCurveVector();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetVectorValue"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54820403, 65535, sizeof(CurveVector_eventGetVectorValue_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, CurveVector_eventGetVectorValue_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_InTime = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InTime, CurveVector_eventGetVectorValue_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Math|Curves"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Curves/CurveVector.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Evaluate this float curve at the specified time"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UCurveVector_NoRegister()
	{
		return UCurveVector::StaticClass();
	}
	UClass* Z_Construct_UClass_UCurveVector()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UCurveBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UCurveVector::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;

				OuterClass->LinkChild(Z_Construct_UFunction_UCurveVector_GetVectorValue());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_FloatCurves = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FloatCurves"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(FloatCurves, UCurveVector), 0x0000000000000000, Z_Construct_UScriptStruct_FRichCurve());
				NewProp_FloatCurves->ArrayDim = CPP_ARRAY_DIM(FloatCurves, UCurveVector);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCurveVector_GetVectorValue()); // 2748087227
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Curves/CurveVector.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Curves/CurveVector.h"));
				MetaData->SetValue(NewProp_FloatCurves, TEXT("ModuleRelativePath"), TEXT("Classes/Curves/CurveVector.h"));
				MetaData->SetValue(NewProp_FloatCurves, TEXT("ToolTip"), TEXT("Keyframe data, one curve for X, Y and Z"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UCurveVector(Z_Construct_UClass_UCurveVector, TEXT("UCurveVector"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UCurveVector);
	UClass* Z_Construct_UClass_UDEPRECATED_CurveEdPresetCurve_NoRegister()
	{
		return UDEPRECATED_CurveEdPresetCurve::StaticClass();
	}
	UClass* Z_Construct_UClass_UDEPRECATED_CurveEdPresetCurve()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UDEPRECATED_CurveEdPresetCurve::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x22000280;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Curves/CurveEdPresetCurve.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Curves/CurveEdPresetCurve.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UDEPRECATED_CurveEdPresetCurve(Z_Construct_UClass_UDEPRECATED_CurveEdPresetCurve, TEXT("UDEPRECATED_CurveEdPresetCurve"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UDEPRECATED_CurveEdPresetCurve);
	UScriptStruct* Z_Construct_UScriptStruct_FCurveTableRowHandle()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FCurveTableRowHandle_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("CurveTableRowHandle"), sizeof(FCurveTableRowHandle), Get_Z_Construct_UScriptStruct_FCurveTableRowHandle_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CurveTableRowHandle"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FCurveTableRowHandle>, EStructFlags(0x00000201));
			UProperty* NewProp_RowName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RowName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(RowName, FCurveTableRowHandle), 0x0000000000000005);
			UProperty* NewProp_CurveTable = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CurveTable"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(CurveTable, FCurveTableRowHandle), 0x0000000000000005, Z_Construct_UClass_UCurveTable_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/CurveTable.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Handle to a particular row in a table."));
			MetaData->SetValue(NewProp_RowName, TEXT("Category"), TEXT("CurveTableRowHandle"));
			MetaData->SetValue(NewProp_RowName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/CurveTable.h"));
			MetaData->SetValue(NewProp_RowName, TEXT("ToolTip"), TEXT("Name of row in the table that we want"));
			MetaData->SetValue(NewProp_CurveTable, TEXT("Category"), TEXT("CurveTableRowHandle"));
			MetaData->SetValue(NewProp_CurveTable, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/CurveTable.h"));
			MetaData->SetValue(NewProp_CurveTable, TEXT("ToolTip"), TEXT("Pointer to table we want a row from"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FCurveTableRowHandle_CRC() { return 2491945051U; }
	UClass* Z_Construct_UClass_UCurveTable_NoRegister()
	{
		return UCurveTable::StaticClass();
	}
	UClass* Z_Construct_UClass_UCurveTable()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UCurveTable::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_ImportPath = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ImportPath"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ImportPath_DEPRECATED, UCurveTable), 0x0000000820000000);
				UProperty* NewProp_AssetImportData = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AssetImportData"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(AssetImportData, UCurveTable), 0x00020008000a0009, Z_Construct_UClass_UAssetImportData_NoRegister());
#endif // WITH_EDITORONLY_DATA
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/CurveTable.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/CurveTable.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Imported spreadsheet table as curves."));
				MetaData->SetValue(NewProp_ImportPath, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/CurveTable.h"));
				MetaData->SetValue(NewProp_ImportPath, TEXT("ToolTip"), TEXT("The filename imported to create this object. Relative to this object's package, BaseDir() or absolute"));
				MetaData->SetValue(NewProp_AssetImportData, TEXT("Category"), TEXT("ImportSettings"));
				MetaData->SetValue(NewProp_AssetImportData, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_AssetImportData, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/CurveTable.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UCurveTable(Z_Construct_UClass_UCurveTable, TEXT("UCurveTable"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UCurveTable);
	UClass* Z_Construct_UClass_UDataAsset_NoRegister()
	{
		return UDataAsset::StaticClass();
	}
	UClass* Z_Construct_UClass_UDataAsset()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UDataAsset::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/DataAsset.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DataAsset.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Base class for a simple asset containing data."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UDataAsset(Z_Construct_UClass_UDataAsset, TEXT("UDataAsset"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UDataAsset);
	UClass* Z_Construct_UClass_UTireType_NoRegister()
	{
		return UTireType::StaticClass();
	}
	UClass* Z_Construct_UClass_UTireType()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UDataAsset();
			Z_Construct_UPackage_Engine();
			OuterClass = UTireType::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_FrictionScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FrictionScale"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(FrictionScale, UTireType), 0x0000000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Vehicles/TireType.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Vehicles/TireType.h"));
				MetaData->SetValue(NewProp_FrictionScale, TEXT("Category"), TEXT("TireType"));
				MetaData->SetValue(NewProp_FrictionScale, TEXT("ModuleRelativePath"), TEXT("Classes/Vehicles/TireType.h"));
				MetaData->SetValue(NewProp_FrictionScale, TEXT("ToolTip"), TEXT("Scale the tire friction for this tire type"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UTireType(Z_Construct_UClass_UTireType, TEXT("UTireType"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UTireType);
	UScriptStruct* Z_Construct_UScriptStruct_FDestructibleChunkParameters()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FDestructibleChunkParameters_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("DestructibleChunkParameters"), sizeof(FDestructibleChunkParameters), Get_Z_Construct_UScriptStruct_FDestructibleChunkParameters_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DestructibleChunkParameters"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FDestructibleChunkParameters>, EStructFlags(0x00000001));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDoNotCrumble, FDestructibleChunkParameters, bool);
			UProperty* NewProp_bDoNotCrumble = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bDoNotCrumble"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDoNotCrumble, FDestructibleChunkParameters), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bDoNotCrumble, FDestructibleChunkParameters), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDoNotDamage, FDestructibleChunkParameters, bool);
			UProperty* NewProp_bDoNotDamage = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bDoNotDamage"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDoNotDamage, FDestructibleChunkParameters), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bDoNotDamage, FDestructibleChunkParameters), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDoNotFracture, FDestructibleChunkParameters, bool);
			UProperty* NewProp_bDoNotFracture = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bDoNotFracture"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDoNotFracture, FDestructibleChunkParameters), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bDoNotFracture, FDestructibleChunkParameters), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsSupportChunk, FDestructibleChunkParameters, bool);
			UProperty* NewProp_bIsSupportChunk = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bIsSupportChunk"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsSupportChunk, FDestructibleChunkParameters), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bIsSupportChunk, FDestructibleChunkParameters), sizeof(bool), true);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleFractureSettings.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Per-chunk authoring data."));
			MetaData->SetValue(NewProp_bDoNotCrumble, TEXT("Category"), TEXT("DestructibleChunkParameters"));
			MetaData->SetValue(NewProp_bDoNotCrumble, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleFractureSettings.h"));
			MetaData->SetValue(NewProp_bDoNotCrumble, TEXT("ToolTip"), TEXT("Defines the chunk to be uncrumbleable.  This means this chunk will not be broken down into fluid mesh particles\nno matter how much damage it takes.  Note: this only applies to chunks with no children.  For a chunk with\nchildren, then:\n1) The chunk may be broken down into its children, and then its children may be crumbled, if the doNotCrumble flag\nis not set on them.\n2) If the Destructible module's chunk depth offset LOD may be set such that this chunk effectively has no children.\nIn this case, the doNotCrumble flag will apply to it.\nDefault = false."));
			MetaData->SetValue(NewProp_bDoNotDamage, TEXT("Category"), TEXT("DestructibleChunkParameters"));
			MetaData->SetValue(NewProp_bDoNotDamage, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleFractureSettings.h"));
			MetaData->SetValue(NewProp_bDoNotDamage, TEXT("ToolTip"), TEXT("Defines the chunk to be undamageable.  This means this chunk will not fracture, but its children might.\nDefault = false."));
			MetaData->SetValue(NewProp_bDoNotFracture, TEXT("Category"), TEXT("DestructibleChunkParameters"));
			MetaData->SetValue(NewProp_bDoNotFracture, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleFractureSettings.h"));
			MetaData->SetValue(NewProp_bDoNotFracture, TEXT("ToolTip"), TEXT("Defines the chunk to be unfractureable.  If this is true, then none of its children will be fractureable.\nDefault = false."));
			MetaData->SetValue(NewProp_bIsSupportChunk, TEXT("Category"), TEXT("DestructibleChunkParameters"));
			MetaData->SetValue(NewProp_bIsSupportChunk, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleFractureSettings.h"));
			MetaData->SetValue(NewProp_bIsSupportChunk, TEXT("ToolTip"), TEXT("Defines the chunk to be environmentally supported, if the appropriate NxDestructibleParametersFlag flags\nare set in NxDestructibleParameters.\nDefault = false."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FDestructibleChunkParameters_CRC() { return 1870804522U; }
	UScriptStruct* Z_Construct_UScriptStruct_FFractureMaterial()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FFractureMaterial_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("FractureMaterial"), sizeof(FFractureMaterial), Get_Z_Construct_UScriptStruct_FFractureMaterial_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FractureMaterial"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FFractureMaterial>, EStructFlags(0x00000001));
			UProperty* NewProp_InteriorElementIndex = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("InteriorElementIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(InteriorElementIndex, FFractureMaterial), 0x0000000000000001);
			UProperty* NewProp_UAngle = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UAngle"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(UAngle, FFractureMaterial), 0x0000000000000001);
			UProperty* NewProp_Tangent = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Tangent"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Tangent, FFractureMaterial), 0x0000000000000001, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_UVOffset = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UVOffset"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(UVOffset, FFractureMaterial), 0x0000000000000001, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_UVScale = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UVScale"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(UVScale, FFractureMaterial), 0x0000000000000001, Z_Construct_UScriptStruct_FVector2D());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleFractureSettings.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Parameters to describe the application of U,V coordinates on a particular slice within a destructible."));
			MetaData->SetValue(NewProp_InteriorElementIndex, TEXT("Category"), TEXT("FractureMaterial"));
			MetaData->SetValue(NewProp_InteriorElementIndex, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleFractureSettings.h"));
			MetaData->SetValue(NewProp_InteriorElementIndex, TEXT("ToolTip"), TEXT("The element index to use for the newly-created triangles.\nIf a negative index is given, a new element will be created for interior triangles.\nDefault = -1"));
			MetaData->SetValue(NewProp_UAngle, TEXT("Category"), TEXT("FractureMaterial"));
			MetaData->SetValue(NewProp_UAngle, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleFractureSettings.h"));
			MetaData->SetValue(NewProp_UAngle, TEXT("ToolTip"), TEXT("Angle from tangent direction for the u coordinate axis.\nDefault = 0.0f."));
			MetaData->SetValue(NewProp_Tangent, TEXT("Category"), TEXT("FractureMaterial"));
			MetaData->SetValue(NewProp_Tangent, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleFractureSettings.h"));
			MetaData->SetValue(NewProp_Tangent, TEXT("ToolTip"), TEXT("Object-space vector specifying surface tangent direction.  If this vector is (0.0f,0.0f,0.0f), then an arbitrary direction will be chosen.\nDefault = (0.0f,0.0f,0.0f)."));
			MetaData->SetValue(NewProp_UVOffset, TEXT("Category"), TEXT("FractureMaterial"));
			MetaData->SetValue(NewProp_UVOffset, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleFractureSettings.h"));
			MetaData->SetValue(NewProp_UVOffset, TEXT("ToolTip"), TEXT("A UV origin offset for interior materials.\nDefault = (0.0f,0.0f)."));
			MetaData->SetValue(NewProp_UVScale, TEXT("Category"), TEXT("FractureMaterial"));
			MetaData->SetValue(NewProp_UVScale, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleFractureSettings.h"));
			MetaData->SetValue(NewProp_UVScale, TEXT("ToolTip"), TEXT("The UV scale (geometric distance/unit texture distance) for interior materials.\nDefault = (100.0f,100.0f)."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FFractureMaterial_CRC() { return 1034417175U; }
	UClass* Z_Construct_UClass_UDestructibleFractureSettings_NoRegister()
	{
		return UDestructibleFractureSettings::StaticClass();
	}
	UClass* Z_Construct_UClass_UDestructibleFractureSettings()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UDestructibleFractureSettings::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ChunkParameters = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ChunkParameters"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ChunkParameters, UDestructibleFractureSettings), 0x0000000000000000);
				UProperty* NewProp_ChunkParameters_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ChunkParameters, TEXT("ChunkParameters"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FDestructibleChunkParameters());
				UProperty* NewProp_Materials = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Materials"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Materials, UDestructibleFractureSettings), 0x0000000000000000);
				UProperty* NewProp_Materials_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Materials, TEXT("Materials"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UMaterialInterface_NoRegister());
				UProperty* NewProp_OriginalSubmeshCount = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OriginalSubmeshCount"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(OriginalSubmeshCount, UDestructibleFractureSettings), 0x0000000000000000);
				UProperty* NewProp_VoronoiSites = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VoronoiSites"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(VoronoiSites, UDestructibleFractureSettings), 0x0000000000000000);
				UProperty* NewProp_VoronoiSites_Inner = new(EC_InternalUseOnlyConstructor, NewProp_VoronoiSites, TEXT("VoronoiSites"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_RandomSeed = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RandomSeed"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(RandomSeed, UDestructibleFractureSettings), 0x0000000000000001);
				UProperty* NewProp_FractureMaterialDesc = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FractureMaterialDesc"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(FractureMaterialDesc, UDestructibleFractureSettings), 0x0000000000002001, Z_Construct_UScriptStruct_FFractureMaterial());
				UProperty* NewProp_CellSiteCount = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CellSiteCount"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(CellSiteCount, UDestructibleFractureSettings), 0x0000000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/DestructibleFractureSettings.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleFractureSettings.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Information to create an NxDestructibleAsset"));
				MetaData->SetValue(NewProp_ChunkParameters, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleFractureSettings.h"));
				MetaData->SetValue(NewProp_ChunkParameters, TEXT("ToolTip"), TEXT("Per-chunk authoring parameters, which should be made writable when a chunk selection GUI is in place."));
				MetaData->SetValue(NewProp_Materials, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleFractureSettings.h"));
				MetaData->SetValue(NewProp_Materials, TEXT("ToolTip"), TEXT("APEX references materials by name, but we'll bypass that mechanism and use of UE materials instead."));
				MetaData->SetValue(NewProp_OriginalSubmeshCount, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleFractureSettings.h"));
				MetaData->SetValue(NewProp_OriginalSubmeshCount, TEXT("ToolTip"), TEXT("The mesh's original number of submeshes.  APEX needs to store this in the authoring."));
				MetaData->SetValue(NewProp_VoronoiSites, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleFractureSettings.h"));
				MetaData->SetValue(NewProp_VoronoiSites, TEXT("ToolTip"), TEXT("Stored Voronoi sites"));
				MetaData->SetValue(NewProp_RandomSeed, TEXT("Category"), TEXT("General"));
				MetaData->SetValue(NewProp_RandomSeed, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleFractureSettings.h"));
				MetaData->SetValue(NewProp_RandomSeed, TEXT("ToolTip"), TEXT("Random seed for reproducibility"));
				MetaData->SetValue(NewProp_FractureMaterialDesc, TEXT("Category"), TEXT("General"));
				MetaData->SetValue(NewProp_FractureMaterialDesc, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleFractureSettings.h"));
				MetaData->SetValue(NewProp_FractureMaterialDesc, TEXT("ToolTip"), TEXT("Stored interior material data.  Just need one as we only support Voronoi splitting."));
				MetaData->SetValue(NewProp_CellSiteCount, TEXT("Category"), TEXT("Voronoi"));
				MetaData->SetValue(NewProp_CellSiteCount, TEXT("ClampMin"), TEXT("1"));
				MetaData->SetValue(NewProp_CellSiteCount, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleFractureSettings.h"));
				MetaData->SetValue(NewProp_CellSiteCount, TEXT("ToolTip"), TEXT("The number of voronoi cell sites."));
				MetaData->SetValue(NewProp_CellSiteCount, TEXT("UIMin"), TEXT("1"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UDestructibleFractureSettings(Z_Construct_UClass_UDestructibleFractureSettings, TEXT("UDestructibleFractureSettings"));
	UClass* Z_Construct_UClass_UAnimationSettings_NoRegister()
	{
		return UAnimationSettings::StaticClass();
	}
	UClass* Z_Construct_UClass_UAnimationSettings()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UDeveloperSettings();
			Z_Construct_UPackage_Engine();
			OuterClass = UAnimationSettings::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100086;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTryIntervalKeyRemoval, UAnimationSettings, bool);
				UProperty* NewProp_bTryIntervalKeyRemoval = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bTryIntervalKeyRemoval"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTryIntervalKeyRemoval, UAnimationSettings), 0x0000000000004001, CPP_BOOL_PROPERTY_BITMASK(bTryIntervalKeyRemoval, UAnimationSettings), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTryLinearKeyRemovalCompression, UAnimationSettings, bool);
				UProperty* NewProp_bTryLinearKeyRemovalCompression = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bTryLinearKeyRemovalCompression"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTryLinearKeyRemovalCompression, UAnimationSettings), 0x0000000000004001, CPP_BOOL_PROPERTY_BITMASK(bTryLinearKeyRemovalCompression, UAnimationSettings), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTryPerTrackBitwiseCompression, UAnimationSettings, bool);
				UProperty* NewProp_bTryPerTrackBitwiseCompression = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bTryPerTrackBitwiseCompression"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTryPerTrackBitwiseCompression, UAnimationSettings), 0x0000000000004001, CPP_BOOL_PROPERTY_BITMASK(bTryPerTrackBitwiseCompression, UAnimationSettings), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTryFixedBitwiseCompression, UAnimationSettings, bool);
				UProperty* NewProp_bTryFixedBitwiseCompression = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bTryFixedBitwiseCompression"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTryFixedBitwiseCompression, UAnimationSettings), 0x0000000000004001, CPP_BOOL_PROPERTY_BITMASK(bTryFixedBitwiseCompression, UAnimationSettings), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bRaiseMaxErrorToExisting, UAnimationSettings, bool);
				UProperty* NewProp_bRaiseMaxErrorToExisting = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bRaiseMaxErrorToExisting"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bRaiseMaxErrorToExisting, UAnimationSettings), 0x0000000000004001, CPP_BOOL_PROPERTY_BITMASK(bRaiseMaxErrorToExisting, UAnimationSettings), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bFirstRecompressUsingCurrentOrDefault, UAnimationSettings, bool);
				UProperty* NewProp_bFirstRecompressUsingCurrentOrDefault = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bFirstRecompressUsingCurrentOrDefault"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bFirstRecompressUsingCurrentOrDefault, UAnimationSettings), 0x0000000000004001, CPP_BOOL_PROPERTY_BITMASK(bFirstRecompressUsingCurrentOrDefault, UAnimationSettings), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bForceBelowThreshold, UAnimationSettings, bool);
				UProperty* NewProp_bForceBelowThreshold = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bForceBelowThreshold"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bForceBelowThreshold, UAnimationSettings), 0x0000000000004001, CPP_BOOL_PROPERTY_BITMASK(bForceBelowThreshold, UAnimationSettings), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOnlyCheckForMissingSkeletalMeshes, UAnimationSettings, bool);
				UProperty* NewProp_bOnlyCheckForMissingSkeletalMeshes = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bOnlyCheckForMissingSkeletalMeshes"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOnlyCheckForMissingSkeletalMeshes, UAnimationSettings), 0x0000000000004001, CPP_BOOL_PROPERTY_BITMASK(bOnlyCheckForMissingSkeletalMeshes, UAnimationSettings), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(ForceRecompression, UAnimationSettings, bool);
				UProperty* NewProp_ForceRecompression = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ForceRecompression"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ForceRecompression, UAnimationSettings), 0x0000000000004001, CPP_BOOL_PROPERTY_BITMASK(ForceRecompression, UAnimationSettings), sizeof(bool), true);
				UProperty* NewProp_AlternativeCompressionThreshold = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AlternativeCompressionThreshold"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(AlternativeCompressionThreshold, UAnimationSettings), 0x0000000000004001);
				UProperty* NewProp_TranslationCompressionFormat = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TranslationCompressionFormat"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(TranslationCompressionFormat, UAnimationSettings), 0x0000000000004001, Z_Construct_UEnum_Engine_AnimationCompressionFormat());
				UProperty* NewProp_RotationCompressionFormat = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RotationCompressionFormat"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(RotationCompressionFormat, UAnimationSettings), 0x0000000000004001, Z_Construct_UEnum_Engine_AnimationCompressionFormat());
				UProperty* NewProp_DefaultCompressionAlgorithm = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultCompressionAlgorithm"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(DefaultCompressionAlgorithm, UAnimationSettings), 0x0004000000004001, Z_Construct_UClass_UAnimCompress_NoRegister());
				UProperty* NewProp_KeyEndEffectorsMatchNameArray = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("KeyEndEffectorsMatchNameArray"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(KeyEndEffectorsMatchNameArray, UAnimationSettings), 0x0000000000004001);
				UProperty* NewProp_KeyEndEffectorsMatchNameArray_Inner = new(EC_InternalUseOnlyConstructor, NewProp_KeyEndEffectorsMatchNameArray, TEXT("KeyEndEffectorsMatchNameArray"), RF_Public|RF_Transient|RF_Native) UStrProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000004000);
				UProperty* NewProp_CompressCommandletVersion = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CompressCommandletVersion"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(CompressCommandletVersion, UAnimationSettings), 0x0000000000024001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Animation"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Animation/AnimationSettings.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimationSettings.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Default animation settings."));
				MetaData->SetValue(NewProp_bTryIntervalKeyRemoval, TEXT("Category"), TEXT("Compression"));
				MetaData->SetValue(NewProp_bTryIntervalKeyRemoval, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimationSettings.h"));
				MetaData->SetValue(NewProp_bTryLinearKeyRemovalCompression, TEXT("Category"), TEXT("Compression"));
				MetaData->SetValue(NewProp_bTryLinearKeyRemovalCompression, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimationSettings.h"));
				MetaData->SetValue(NewProp_bTryPerTrackBitwiseCompression, TEXT("Category"), TEXT("Compression"));
				MetaData->SetValue(NewProp_bTryPerTrackBitwiseCompression, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimationSettings.h"));
				MetaData->SetValue(NewProp_bTryFixedBitwiseCompression, TEXT("Category"), TEXT("Compression"));
				MetaData->SetValue(NewProp_bTryFixedBitwiseCompression, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimationSettings.h"));
				MetaData->SetValue(NewProp_bRaiseMaxErrorToExisting, TEXT("Category"), TEXT("Compression"));
				MetaData->SetValue(NewProp_bRaiseMaxErrorToExisting, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimationSettings.h"));
				MetaData->SetValue(NewProp_bFirstRecompressUsingCurrentOrDefault, TEXT("Category"), TEXT("Compression"));
				MetaData->SetValue(NewProp_bFirstRecompressUsingCurrentOrDefault, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimationSettings.h"));
				MetaData->SetValue(NewProp_bForceBelowThreshold, TEXT("Category"), TEXT("Compression"));
				MetaData->SetValue(NewProp_bForceBelowThreshold, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimationSettings.h"));
				MetaData->SetValue(NewProp_bOnlyCheckForMissingSkeletalMeshes, TEXT("Category"), TEXT("Compression"));
				MetaData->SetValue(NewProp_bOnlyCheckForMissingSkeletalMeshes, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimationSettings.h"));
				MetaData->SetValue(NewProp_ForceRecompression, TEXT("Category"), TEXT("Compression"));
				MetaData->SetValue(NewProp_ForceRecompression, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimationSettings.h"));
				MetaData->SetValue(NewProp_AlternativeCompressionThreshold, TEXT("Category"), TEXT("Compression"));
				MetaData->SetValue(NewProp_AlternativeCompressionThreshold, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_AlternativeCompressionThreshold, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimationSettings.h"));
				MetaData->SetValue(NewProp_AlternativeCompressionThreshold, TEXT("UIMin"), TEXT("0"));
				MetaData->SetValue(NewProp_TranslationCompressionFormat, TEXT("Category"), TEXT("Compression"));
				MetaData->SetValue(NewProp_TranslationCompressionFormat, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimationSettings.h"));
				MetaData->SetValue(NewProp_RotationCompressionFormat, TEXT("Category"), TEXT("Compression"));
				MetaData->SetValue(NewProp_RotationCompressionFormat, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimationSettings.h"));
				MetaData->SetValue(NewProp_DefaultCompressionAlgorithm, TEXT("Category"), TEXT("Compression"));
				MetaData->SetValue(NewProp_DefaultCompressionAlgorithm, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimationSettings.h"));
				MetaData->SetValue(NewProp_KeyEndEffectorsMatchNameArray, TEXT("Category"), TEXT("Compression"));
				MetaData->SetValue(NewProp_KeyEndEffectorsMatchNameArray, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimationSettings.h"));
				MetaData->SetValue(NewProp_CompressCommandletVersion, TEXT("Category"), TEXT("Compression"));
				MetaData->SetValue(NewProp_CompressCommandletVersion, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimationSettings.h"));
				MetaData->SetValue(NewProp_CompressCommandletVersion, TEXT("ToolTip"), TEXT("compression upgrade version"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UAnimationSettings(Z_Construct_UClass_UAnimationSettings, TEXT("UAnimationSettings"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UAnimationSettings);
	UScriptStruct* Z_Construct_UScriptStruct_FAudioQualitySettings()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FAudioQualitySettings_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("AudioQualitySettings"), sizeof(FAudioQualitySettings), Get_Z_Construct_UScriptStruct_FAudioQualitySettings_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AudioQualitySettings"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FAudioQualitySettings>, EStructFlags(0x00000201));
			UProperty* NewProp_MaxChannels = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MaxChannels"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MaxChannels, FAudioQualitySettings), 0x0000000000000001);
			UProperty* NewProp_DisplayName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DisplayName"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(DisplayName, FAudioQualitySettings), 0x0000000000000001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/AudioSettings.h"));
			MetaData->SetValue(NewProp_MaxChannels, TEXT("Category"), TEXT("Quality"));
			MetaData->SetValue(NewProp_MaxChannels, TEXT("ClampMin"), TEXT("1"));
			MetaData->SetValue(NewProp_MaxChannels, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/AudioSettings.h"));
			MetaData->SetValue(NewProp_MaxChannels, TEXT("ToolTip"), TEXT("The number of audio channels that can be used at once\nNOTE: Some platforms may cap this value to a lower setting regardless of what the settings request"));
			MetaData->SetValue(NewProp_DisplayName, TEXT("Category"), TEXT("Quality"));
			MetaData->SetValue(NewProp_DisplayName, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/AudioSettings.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAudioQualitySettings_CRC() { return 550734314U; }
	UClass* Z_Construct_UClass_UAudioSettings_NoRegister()
	{
		return UAudioSettings::StaticClass();
	}
	UClass* Z_Construct_UClass_UAudioSettings()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UDeveloperSettings();
			Z_Construct_UPackage_Engine();
			OuterClass = UAudioSettings::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100086;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_QualityLevels = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("QualityLevels"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(QualityLevels, UAudioSettings), 0x0000000000004001);
				UProperty* NewProp_QualityLevels_Inner = new(EC_InternalUseOnlyConstructor, NewProp_QualityLevels, TEXT("QualityLevels"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000004000, Z_Construct_UScriptStruct_FAudioQualitySettings());
				UProperty* NewProp_MaximumConcurrentStreams = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaximumConcurrentStreams"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MaximumConcurrentStreams, UAudioSettings), 0x0000000000004001);
				UProperty* NewProp_LowPassFilterResonance = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LowPassFilterResonance"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(LowPassFilterResonance, UAudioSettings), 0x0000040000004001);
				UProperty* NewProp_VoiPSoundClass = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VoiPSoundClass"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(VoiPSoundClass, UAudioSettings), 0x0000000000004001, Z_Construct_UScriptStruct_FStringAssetReference());
				UProperty* NewProp_DefaultBaseSoundMix = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultBaseSoundMix"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DefaultBaseSoundMix, UAudioSettings), 0x0000000000004001, Z_Construct_UScriptStruct_FStringAssetReference());
				UProperty* NewProp_DefaultSoundClassName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultSoundClassName"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DefaultSoundClassName, UAudioSettings), 0x0000000000004001, Z_Construct_UScriptStruct_FStringAssetReference());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Audio"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Sound/AudioSettings.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/AudioSettings.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Audio settings."));
				MetaData->SetValue(NewProp_QualityLevels, TEXT("Category"), TEXT("Quality"));
				MetaData->SetValue(NewProp_QualityLevels, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/AudioSettings.h"));
				MetaData->SetValue(NewProp_MaximumConcurrentStreams, TEXT("Category"), TEXT("Audio"));
				MetaData->SetValue(NewProp_MaximumConcurrentStreams, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_MaximumConcurrentStreams, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/AudioSettings.h"));
				MetaData->SetValue(NewProp_MaximumConcurrentStreams, TEXT("ToolTip"), TEXT("How many streaming sounds can be played at the same time (if more are played they will be sorted by priority)"));
				MetaData->SetValue(NewProp_LowPassFilterResonance, TEXT("Category"), TEXT("Audio"));
				MetaData->SetValue(NewProp_LowPassFilterResonance, TEXT("ClampMax"), TEXT("1.500000"));
				MetaData->SetValue(NewProp_LowPassFilterResonance, TEXT("ClampMin"), TEXT("0.100000"));
				MetaData->SetValue(NewProp_LowPassFilterResonance, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/AudioSettings.h"));
				MetaData->SetValue(NewProp_VoiPSoundClass, TEXT("AllowedClasses"), TEXT("SoundClass"));
				MetaData->SetValue(NewProp_VoiPSoundClass, TEXT("Category"), TEXT("Audio"));
				MetaData->SetValue(NewProp_VoiPSoundClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/AudioSettings.h"));
				MetaData->SetValue(NewProp_VoiPSoundClass, TEXT("ToolTip"), TEXT("Sound class to be used for the VOIP audio component"));
				MetaData->SetValue(NewProp_DefaultBaseSoundMix, TEXT("AllowedClasses"), TEXT("SoundMix"));
				MetaData->SetValue(NewProp_DefaultBaseSoundMix, TEXT("Category"), TEXT("Audio"));
				MetaData->SetValue(NewProp_DefaultBaseSoundMix, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/AudioSettings.h"));
				MetaData->SetValue(NewProp_DefaultBaseSoundMix, TEXT("ToolTip"), TEXT("The SoundMix to use as base when no other system has specified a Base SoundMix"));
				MetaData->SetValue(NewProp_DefaultSoundClassName, TEXT("AllowedClasses"), TEXT("SoundClass"));
				MetaData->SetValue(NewProp_DefaultSoundClassName, TEXT("Category"), TEXT("Audio"));
				MetaData->SetValue(NewProp_DefaultSoundClassName, TEXT("DisplayName"), TEXT("Default Sound Class"));
				MetaData->SetValue(NewProp_DefaultSoundClassName, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/AudioSettings.h"));
				MetaData->SetValue(NewProp_DefaultSoundClassName, TEXT("ToolTip"), TEXT("The SoundClass assigned to newly created sounds"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UAudioSettings(Z_Construct_UClass_UAudioSettings, TEXT("UAudioSettings"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UAudioSettings);
	UEnum* Z_Construct_UEnum_Engine_EUIScalingRule()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EUIScalingRule_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EUIScalingRule"), 0, Get_Z_Construct_UEnum_Engine_EUIScalingRule_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EUIScalingRule"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EUIScalingRule::ShortestSide")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EUIScalingRule::LongestSide")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EUIScalingRule::Horizontal")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EUIScalingRule::Vertical")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EUIScalingRule::Custom")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EUIScalingRule::EUIScalingRule_MAX")), 5));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("Custom.ToolTip"), TEXT("Custom - Allows custom rule interpretation."));
			MetaData->SetValue(ReturnEnum, TEXT("Horizontal.ToolTip"), TEXT("Evaluates the scale curve based on the X axis of the viewport."));
			MetaData->SetValue(ReturnEnum, TEXT("LongestSide.ToolTip"), TEXT("Evaluates the scale curve based on the longest side of the viewport."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/UserInterfaceSettings.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ShortestSide.ToolTip"), TEXT("Evaluates the scale curve based on the shortest side of the viewport."));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("The Side to use when scaling the UI."));
			MetaData->SetValue(ReturnEnum, TEXT("Vertical.ToolTip"), TEXT("Evaluates the scale curve based on the Y axis of the viewport."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EUIScalingRule_CRC() { return 4093637499U; }
	UEnum* Z_Construct_UEnum_Engine_ERenderFocusRule()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_ERenderFocusRule_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ERenderFocusRule"), 0, Get_Z_Construct_UEnum_Engine_ERenderFocusRule_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ERenderFocusRule"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ERenderFocusRule::Always")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ERenderFocusRule::NonPointer")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ERenderFocusRule::NavigationOnly")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ERenderFocusRule::Never")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ERenderFocusRule::ERenderFocusRule_MAX")), 4));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("Always.ToolTip"), TEXT("Focus Brush will always be rendered for widgets that have user focus."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/UserInterfaceSettings.h"));
			MetaData->SetValue(ReturnEnum, TEXT("NavigationOnly.ToolTip"), TEXT("Focus Brush will be rendered for widgets that have user focus only if the focus was set by navigation."));
			MetaData->SetValue(ReturnEnum, TEXT("Never.ToolTip"), TEXT("Focus Brush will not be rendered."));
			MetaData->SetValue(ReturnEnum, TEXT("NonPointer.ToolTip"), TEXT("Focus Brush will be rendered for widgets that have user focus not set based on pointer causes."));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("When to render the Focus Brush for widgets that have user focus. Based on the EFocusCause."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_ERenderFocusRule_CRC() { return 2088956493U; }
	UClass* Z_Construct_UClass_UUserInterfaceSettings_NoRegister()
	{
		return UUserInterfaceSettings::StaticClass();
	}
	UClass* Z_Construct_UClass_UUserInterfaceSettings()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UDeveloperSettings();
			Z_Construct_UPackage_Engine();
			OuterClass = UUserInterfaceSettings::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100086;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_CustomScalingRule = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CustomScalingRule"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(CustomScalingRule, UUserInterfaceSettings), 0x0000000000002000, Z_Construct_UClass_UDPICustomScalingRule_NoRegister());
				UProperty* NewProp_CustomScalingRuleClassInstance = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CustomScalingRuleClassInstance"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(CustomScalingRuleClassInstance, UUserInterfaceSettings), 0x0000000000002000, Z_Construct_UClass_UObject_NoRegister());
				UProperty* NewProp_CursorClasses = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CursorClasses"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(CursorClasses, UUserInterfaceSettings), 0x0000000000002000);
				UProperty* NewProp_CursorClasses_Inner = new(EC_InternalUseOnlyConstructor, NewProp_CursorClasses, TEXT("CursorClasses"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UObject_NoRegister());
				UProperty* NewProp_UIScaleCurve = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UIScaleCurve"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(UIScaleCurve, UUserInterfaceSettings), 0x0000000000004001, Z_Construct_UScriptStruct_FRuntimeFloatCurve());
				UProperty* NewProp_CustomScalingRuleClass = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CustomScalingRuleClass"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(CustomScalingRuleClass, UUserInterfaceSettings), 0x0000000000004001, Z_Construct_UScriptStruct_FStringClassReference());
				UProperty* NewProp_UIScaleRule = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UIScaleRule"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(UIScaleRule, UUserInterfaceSettings), 0x0000000000004001, Z_Construct_UEnum_Engine_EUIScalingRule());
				UProperty* NewProp_ApplicationScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ApplicationScale"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ApplicationScale, UUserInterfaceSettings), 0x0000000000004001);
				UProperty* NewProp_SlashedCircleCursor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SlashedCircleCursor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SlashedCircleCursor, UUserInterfaceSettings), 0x0000000000004001, Z_Construct_UScriptStruct_FStringClassReference());
				UProperty* NewProp_GrabHandClosedCursor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GrabHandClosedCursor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(GrabHandClosedCursor, UUserInterfaceSettings), 0x0000000000004001, Z_Construct_UScriptStruct_FStringClassReference());
				UProperty* NewProp_GrabHandCursor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GrabHandCursor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(GrabHandCursor, UUserInterfaceSettings), 0x0000000000004001, Z_Construct_UScriptStruct_FStringClassReference());
				UProperty* NewProp_CrosshairsCursor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CrosshairsCursor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(CrosshairsCursor, UUserInterfaceSettings), 0x0000000000004001, Z_Construct_UScriptStruct_FStringClassReference());
				UProperty* NewProp_TextEditBeamCursor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TextEditBeamCursor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TextEditBeamCursor, UUserInterfaceSettings), 0x0000000000004001, Z_Construct_UScriptStruct_FStringClassReference());
				UProperty* NewProp_DefaultCursor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultCursor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DefaultCursor, UUserInterfaceSettings), 0x0000000000004001, Z_Construct_UScriptStruct_FStringClassReference());
				UProperty* NewProp_RenderFocusRule = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RenderFocusRule"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(RenderFocusRule, UUserInterfaceSettings), 0x0000000000004001, Z_Construct_UEnum_Engine_ERenderFocusRule());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("User Interface"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/UserInterfaceSettings.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/UserInterfaceSettings.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("User Interface settings that control Slate and UMG."));
				MetaData->SetValue(NewProp_CustomScalingRule, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/UserInterfaceSettings.h"));
				MetaData->SetValue(NewProp_CustomScalingRuleClassInstance, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/UserInterfaceSettings.h"));
				MetaData->SetValue(NewProp_CursorClasses, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/UserInterfaceSettings.h"));
				MetaData->SetValue(NewProp_UIScaleCurve, TEXT("Category"), TEXT("DPI Scaling"));
				MetaData->SetValue(NewProp_UIScaleCurve, TEXT("DisplayName"), TEXT("DPI Curve"));
				MetaData->SetValue(NewProp_UIScaleCurve, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/UserInterfaceSettings.h"));
				MetaData->SetValue(NewProp_UIScaleCurve, TEXT("ToolTip"), TEXT("Controls how the UI is scaled at different resolutions based on the DPI Scale Rule"));
				MetaData->SetValue(NewProp_UIScaleCurve, TEXT("XAxisName"), TEXT("Resolution"));
				MetaData->SetValue(NewProp_UIScaleCurve, TEXT("YAxisName"), TEXT("Scale"));
				MetaData->SetValue(NewProp_CustomScalingRuleClass, TEXT("Category"), TEXT("DPI Scaling"));
				MetaData->SetValue(NewProp_CustomScalingRuleClass, TEXT("MetaClass"), TEXT("DPICustomScalingRule"));
				MetaData->SetValue(NewProp_CustomScalingRuleClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/UserInterfaceSettings.h"));
				MetaData->SetValue(NewProp_CustomScalingRuleClass, TEXT("ToolTip"), TEXT("Set DPI Scale Rule to Custom, and this class will be used instead of any of the built-in rules."));
				MetaData->SetValue(NewProp_UIScaleRule, TEXT("Category"), TEXT("DPI Scaling"));
				MetaData->SetValue(NewProp_UIScaleRule, TEXT("DisplayName"), TEXT("DPI Scale Rule"));
				MetaData->SetValue(NewProp_UIScaleRule, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/UserInterfaceSettings.h"));
				MetaData->SetValue(NewProp_UIScaleRule, TEXT("ToolTip"), TEXT("The rule used when trying to decide what scale to apply."));
				MetaData->SetValue(NewProp_ApplicationScale, TEXT("Category"), TEXT("DPI Scaling"));
				MetaData->SetValue(NewProp_ApplicationScale, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/UserInterfaceSettings.h"));
				MetaData->SetValue(NewProp_ApplicationScale, TEXT("ToolTip"), TEXT("An optional application scale to apply on top of the custom scaling rules.  So if you want to expose a property in your game title, you can modify this underlying value to scale the entire UI."));
				MetaData->SetValue(NewProp_SlashedCircleCursor, TEXT("Category"), TEXT("Cursors"));
				MetaData->SetValue(NewProp_SlashedCircleCursor, TEXT("MetaClass"), TEXT("UserWidget"));
				MetaData->SetValue(NewProp_SlashedCircleCursor, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/UserInterfaceSettings.h"));
				MetaData->SetValue(NewProp_SlashedCircleCursor, TEXT("ToolTip"), TEXT("Widget to use when the SlashedCircle Cursor is requested."));
				MetaData->SetValue(NewProp_GrabHandClosedCursor, TEXT("Category"), TEXT("Cursors"));
				MetaData->SetValue(NewProp_GrabHandClosedCursor, TEXT("MetaClass"), TEXT("UserWidget"));
				MetaData->SetValue(NewProp_GrabHandClosedCursor, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/UserInterfaceSettings.h"));
				MetaData->SetValue(NewProp_GrabHandClosedCursor, TEXT("ToolTip"), TEXT("Widget to use when the GrabHandClosed Cursor is requested."));
				MetaData->SetValue(NewProp_GrabHandCursor, TEXT("Category"), TEXT("Cursors"));
				MetaData->SetValue(NewProp_GrabHandCursor, TEXT("MetaClass"), TEXT("UserWidget"));
				MetaData->SetValue(NewProp_GrabHandCursor, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/UserInterfaceSettings.h"));
				MetaData->SetValue(NewProp_GrabHandCursor, TEXT("ToolTip"), TEXT("Widget to use when the GrabHand Cursor is requested."));
				MetaData->SetValue(NewProp_CrosshairsCursor, TEXT("Category"), TEXT("Cursors"));
				MetaData->SetValue(NewProp_CrosshairsCursor, TEXT("MetaClass"), TEXT("UserWidget"));
				MetaData->SetValue(NewProp_CrosshairsCursor, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/UserInterfaceSettings.h"));
				MetaData->SetValue(NewProp_CrosshairsCursor, TEXT("ToolTip"), TEXT("Widget to use when the Crosshairs Cursor is requested."));
				MetaData->SetValue(NewProp_TextEditBeamCursor, TEXT("Category"), TEXT("Cursors"));
				MetaData->SetValue(NewProp_TextEditBeamCursor, TEXT("MetaClass"), TEXT("UserWidget"));
				MetaData->SetValue(NewProp_TextEditBeamCursor, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/UserInterfaceSettings.h"));
				MetaData->SetValue(NewProp_TextEditBeamCursor, TEXT("ToolTip"), TEXT("Widget to use when the TextEditBeam Cursor is requested."));
				MetaData->SetValue(NewProp_DefaultCursor, TEXT("Category"), TEXT("Cursors"));
				MetaData->SetValue(NewProp_DefaultCursor, TEXT("MetaClass"), TEXT("UserWidget"));
				MetaData->SetValue(NewProp_DefaultCursor, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/UserInterfaceSettings.h"));
				MetaData->SetValue(NewProp_DefaultCursor, TEXT("ToolTip"), TEXT("Widget to use when the Default Cursor is requested."));
				MetaData->SetValue(NewProp_RenderFocusRule, TEXT("Category"), TEXT("Focus"));
				MetaData->SetValue(NewProp_RenderFocusRule, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/UserInterfaceSettings.h"));
				MetaData->SetValue(NewProp_RenderFocusRule, TEXT("ToolTip"), TEXT("Rule to determine if we should render the Focus Brush for widgets that have user focus."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UUserInterfaceSettings(Z_Construct_UClass_UUserInterfaceSettings, TEXT("UUserInterfaceSettings"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UUserInterfaceSettings);
	UClass* Z_Construct_UClass_UStreamingSettings_NoRegister()
	{
		return UStreamingSettings::StaticClass();
	}
	UClass* Z_Construct_UClass_UStreamingSettings()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UDeveloperSettings();
			Z_Construct_UPackage_Engine();
			OuterClass = UStreamingSettings::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100086;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_LevelStreamingComponentsRegistrationGranularity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LevelStreamingComponentsRegistrationGranularity"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(LevelStreamingComponentsRegistrationGranularity, UStreamingSettings), 0x00000c0000004001);
				UProperty* NewProp_LevelStreamingActorsUpdateTimeLimit = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LevelStreamingActorsUpdateTimeLimit"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(LevelStreamingActorsUpdateTimeLimit, UStreamingSettings), 0x00000c0000004001);
				UProperty* NewProp_PriorityAsyncLoadingExtraTime = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PriorityAsyncLoadingExtraTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(PriorityAsyncLoadingExtraTime, UStreamingSettings), 0x00000c0000004001);
				UProperty* NewProp_AsyncLoadingTimeLimit = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AsyncLoadingTimeLimit"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(AsyncLoadingTimeLimit, UStreamingSettings), 0x00000c0000004001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(AsyncLoadingUseFullTimeLimit, UStreamingSettings, uint8);
				UProperty* NewProp_AsyncLoadingUseFullTimeLimit = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AsyncLoadingUseFullTimeLimit"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(AsyncLoadingUseFullTimeLimit, UStreamingSettings), 0x00000c0000004001, CPP_BOOL_PROPERTY_BITMASK(AsyncLoadingUseFullTimeLimit, UStreamingSettings), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(UseBackgroundLevelStreaming, UStreamingSettings, uint8);
				UProperty* NewProp_UseBackgroundLevelStreaming = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UseBackgroundLevelStreaming"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(UseBackgroundLevelStreaming, UStreamingSettings), 0x0000080000004001, CPP_BOOL_PROPERTY_BITMASK(UseBackgroundLevelStreaming, UStreamingSettings), sizeof(uint8), false);
				UProperty* NewProp_AsyncIOBandwidthLimit = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AsyncIOBandwidthLimit"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(AsyncIOBandwidthLimit, UStreamingSettings), 0x0000080000004001);
				UProperty* NewProp_MinBulkDataSizeForAsyncLoading = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MinBulkDataSizeForAsyncLoading"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MinBulkDataSizeForAsyncLoading, UStreamingSettings), 0x00000c0000004001);
				UProperty* NewProp_TimeLimitExceededMinTime = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TimeLimitExceededMinTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(TimeLimitExceededMinTime, UStreamingSettings), 0x00000c0000004001);
				UProperty* NewProp_TimeLimitExceededMultiplier = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TimeLimitExceededMultiplier"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(TimeLimitExceededMultiplier, UStreamingSettings), 0x00000c0000004001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(WarnIfTimeLimitExceeded, UStreamingSettings, uint8);
				UProperty* NewProp_WarnIfTimeLimitExceeded = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WarnIfTimeLimitExceeded"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(WarnIfTimeLimitExceeded, UStreamingSettings), 0x00000c0000004001, CPP_BOOL_PROPERTY_BITMASK(WarnIfTimeLimitExceeded, UStreamingSettings), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(AsyncLoadingThreadEnabled, UStreamingSettings, uint8);
				UProperty* NewProp_AsyncLoadingThreadEnabled = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AsyncLoadingThreadEnabled"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(AsyncLoadingThreadEnabled, UStreamingSettings), 0x0000080000004001, CPP_BOOL_PROPERTY_BITMASK(AsyncLoadingThreadEnabled, UStreamingSettings), sizeof(uint8), false);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Streaming"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/CoreSettings.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/CoreSettings.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Rendering settings."));
				MetaData->SetValue(NewProp_LevelStreamingComponentsRegistrationGranularity, TEXT("Category"), TEXT("LevelStreaming"));
				MetaData->SetValue(NewProp_LevelStreamingComponentsRegistrationGranularity, TEXT("ConsoleVariable"), TEXT("s.LevelStreamingComponentsRegistrationGranularity"));
				MetaData->SetValue(NewProp_LevelStreamingComponentsRegistrationGranularity, TEXT("DisplayName"), TEXT("Level Streaming Components Registration Granularity"));
				MetaData->SetValue(NewProp_LevelStreamingComponentsRegistrationGranularity, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/CoreSettings.h"));
				MetaData->SetValue(NewProp_LevelStreamingComponentsRegistrationGranularity, TEXT("ToolTip"), TEXT("Batching granularity used to register actor components during level streaming."));
				MetaData->SetValue(NewProp_LevelStreamingActorsUpdateTimeLimit, TEXT("Category"), TEXT("LevelStreaming"));
				MetaData->SetValue(NewProp_LevelStreamingActorsUpdateTimeLimit, TEXT("ConsoleVariable"), TEXT("s.LevelStreamingActorsUpdateTimeLimit"));
				MetaData->SetValue(NewProp_LevelStreamingActorsUpdateTimeLimit, TEXT("DisplayName"), TEXT("Level Streaming Actors Update Time Limit"));
				MetaData->SetValue(NewProp_LevelStreamingActorsUpdateTimeLimit, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/CoreSettings.h"));
				MetaData->SetValue(NewProp_LevelStreamingActorsUpdateTimeLimit, TEXT("ToolTip"), TEXT("Maximum allowed time to spend for actor registration steps during level streaming (ms per frame)."));
				MetaData->SetValue(NewProp_PriorityAsyncLoadingExtraTime, TEXT("Category"), TEXT("LevelStreaming"));
				MetaData->SetValue(NewProp_PriorityAsyncLoadingExtraTime, TEXT("ConsoleVariable"), TEXT("s.PriorityAsyncLoadingExtraTime"));
				MetaData->SetValue(NewProp_PriorityAsyncLoadingExtraTime, TEXT("DisplayName"), TEXT("Priority Async Loading Extra Time"));
				MetaData->SetValue(NewProp_PriorityAsyncLoadingExtraTime, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/CoreSettings.h"));
				MetaData->SetValue(NewProp_PriorityAsyncLoadingExtraTime, TEXT("ToolTip"), TEXT("Additional time to spend asynchronous loading during a high priority load."));
				MetaData->SetValue(NewProp_AsyncLoadingTimeLimit, TEXT("Category"), TEXT("LevelStreaming"));
				MetaData->SetValue(NewProp_AsyncLoadingTimeLimit, TEXT("ConsoleVariable"), TEXT("s.AsyncLoadingTimeLimit"));
				MetaData->SetValue(NewProp_AsyncLoadingTimeLimit, TEXT("DisplayName"), TEXT("Async Loading Time Limit"));
				MetaData->SetValue(NewProp_AsyncLoadingTimeLimit, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/CoreSettings.h"));
				MetaData->SetValue(NewProp_AsyncLoadingTimeLimit, TEXT("ToolTip"), TEXT("Maximum amount of time to spend doing asynchronous loading (ms per frame)."));
				MetaData->SetValue(NewProp_AsyncLoadingUseFullTimeLimit, TEXT("Category"), TEXT("LevelStreaming"));
				MetaData->SetValue(NewProp_AsyncLoadingUseFullTimeLimit, TEXT("ConsoleVariable"), TEXT("s.AsyncLoadingUseFullTimeLimit"));
				MetaData->SetValue(NewProp_AsyncLoadingUseFullTimeLimit, TEXT("DisplayName"), TEXT("Async Loading Use Full Time Limit"));
				MetaData->SetValue(NewProp_AsyncLoadingUseFullTimeLimit, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/CoreSettings.h"));
				MetaData->SetValue(NewProp_AsyncLoadingUseFullTimeLimit, TEXT("ToolTip"), TEXT("Whether to use the entire time limit even if blocked on I/O."));
				MetaData->SetValue(NewProp_UseBackgroundLevelStreaming, TEXT("Category"), TEXT("LevelStreaming"));
				MetaData->SetValue(NewProp_UseBackgroundLevelStreaming, TEXT("ConsoleVariable"), TEXT("s.UseBackgroundLevelStreaming"));
				MetaData->SetValue(NewProp_UseBackgroundLevelStreaming, TEXT("DisplayName"), TEXT("Use Background Level Streaming"));
				MetaData->SetValue(NewProp_UseBackgroundLevelStreaming, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/CoreSettings.h"));
				MetaData->SetValue(NewProp_UseBackgroundLevelStreaming, TEXT("ToolTip"), TEXT("Whether to allow background level streaming."));
				MetaData->SetValue(NewProp_AsyncIOBandwidthLimit, TEXT("Category"), TEXT("IO"));
				MetaData->SetValue(NewProp_AsyncIOBandwidthLimit, TEXT("ConsoleVariable"), TEXT("s.AsyncIOBandwidthLimit"));
				MetaData->SetValue(NewProp_AsyncIOBandwidthLimit, TEXT("DisplayName"), TEXT("Asynchronous IO Bandwidth Limit"));
				MetaData->SetValue(NewProp_AsyncIOBandwidthLimit, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/CoreSettings.h"));
				MetaData->SetValue(NewProp_AsyncIOBandwidthLimit, TEXT("ToolTip"), TEXT("Constrain bandwidth if wanted. Value is in MByte/ sec."));
				MetaData->SetValue(NewProp_MinBulkDataSizeForAsyncLoading, TEXT("Category"), TEXT("PackageStreaming"));
				MetaData->SetValue(NewProp_MinBulkDataSizeForAsyncLoading, TEXT("ConsoleVariable"), TEXT("s.MinBulkDataSizeForAsyncLoading"));
				MetaData->SetValue(NewProp_MinBulkDataSizeForAsyncLoading, TEXT("DisplayName"), TEXT("Minimum Bulk Data Size For Async Loading"));
				MetaData->SetValue(NewProp_MinBulkDataSizeForAsyncLoading, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/CoreSettings.h"));
				MetaData->SetValue(NewProp_MinBulkDataSizeForAsyncLoading, TEXT("ToolTip"), TEXT("Minimum time the time limit exceeded warning will be triggered by."));
				MetaData->SetValue(NewProp_TimeLimitExceededMinTime, TEXT("Category"), TEXT("PackageStreaming"));
				MetaData->SetValue(NewProp_TimeLimitExceededMinTime, TEXT("ConsoleVariable"), TEXT("s.TimeLimitExceededMinTime"));
				MetaData->SetValue(NewProp_TimeLimitExceededMinTime, TEXT("DisplayName"), TEXT("Minimum Time Limit For Time Limit Exceeded Warning"));
				MetaData->SetValue(NewProp_TimeLimitExceededMinTime, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/CoreSettings.h"));
				MetaData->SetValue(NewProp_TimeLimitExceededMinTime, TEXT("ToolTip"), TEXT("Minimum time the time limit exceeded warning will be triggered by."));
				MetaData->SetValue(NewProp_TimeLimitExceededMultiplier, TEXT("Category"), TEXT("PackageStreaming"));
				MetaData->SetValue(NewProp_TimeLimitExceededMultiplier, TEXT("ConsoleVariable"), TEXT("s.TimeLimitExceededMultiplier"));
				MetaData->SetValue(NewProp_TimeLimitExceededMultiplier, TEXT("DisplayName"), TEXT("Time Limit Exceeded Warning Multiplier"));
				MetaData->SetValue(NewProp_TimeLimitExceededMultiplier, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/CoreSettings.h"));
				MetaData->SetValue(NewProp_TimeLimitExceededMultiplier, TEXT("ToolTip"), TEXT("Multiplier for time limit exceeded warning time threshold."));
				MetaData->SetValue(NewProp_WarnIfTimeLimitExceeded, TEXT("Category"), TEXT("PackageStreaming"));
				MetaData->SetValue(NewProp_WarnIfTimeLimitExceeded, TEXT("ConsoleVariable"), TEXT("s.WarnIfTimeLimitExceeded"));
				MetaData->SetValue(NewProp_WarnIfTimeLimitExceeded, TEXT("DisplayName"), TEXT("Warn If Time Limit Has Been Exceeded"));
				MetaData->SetValue(NewProp_WarnIfTimeLimitExceeded, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/CoreSettings.h"));
				MetaData->SetValue(NewProp_WarnIfTimeLimitExceeded, TEXT("ToolTip"), TEXT("Enables log warning if time limit for time-sliced package streaming has been exceeded."));
				MetaData->SetValue(NewProp_AsyncLoadingThreadEnabled, TEXT("Category"), TEXT("PackageStreaming"));
				MetaData->SetValue(NewProp_AsyncLoadingThreadEnabled, TEXT("ConsoleVariable"), TEXT("s.AsyncLoadingThreadEnabled"));
				MetaData->SetValue(NewProp_AsyncLoadingThreadEnabled, TEXT("DisplayName"), TEXT("Async Loading Thread Enabled"));
				MetaData->SetValue(NewProp_AsyncLoadingThreadEnabled, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/CoreSettings.h"));
				MetaData->SetValue(NewProp_AsyncLoadingThreadEnabled, TEXT("ToolTip"), TEXT("Enables separate thread for package streaming. Requires restart to take effect."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UStreamingSettings(Z_Construct_UClass_UStreamingSettings, TEXT("UStreamingSettings"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UStreamingSettings);
	UClass* Z_Construct_UClass_UGarbageCollectionSettings_NoRegister()
	{
		return UGarbageCollectionSettings::StaticClass();
	}
	UClass* Z_Construct_UClass_UGarbageCollectionSettings()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UDeveloperSettings();
			Z_Construct_UPackage_Engine();
			OuterClass = UGarbageCollectionSettings::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100086;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_SizeOfPermanentObjectPool = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SizeOfPermanentObjectPool"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(SizeOfPermanentObjectPool, UGarbageCollectionSettings), 0x0000080000004001);
				UProperty* NewProp_MaxObjectsNotConsideredByGC = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxObjectsNotConsideredByGC"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MaxObjectsNotConsideredByGC, UGarbageCollectionSettings), 0x0000080000004001);
				UProperty* NewProp_NumRetriesBeforeForcingGC = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NumRetriesBeforeForcingGC"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(NumRetriesBeforeForcingGC, UGarbageCollectionSettings), 0x0000080000004001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(AllowParallelGC, UGarbageCollectionSettings, uint8);
				UProperty* NewProp_AllowParallelGC = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AllowParallelGC"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(AllowParallelGC, UGarbageCollectionSettings), 0x0000080000004001, CPP_BOOL_PROPERTY_BITMASK(AllowParallelGC, UGarbageCollectionSettings), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(FlushStreamingOnGC, UGarbageCollectionSettings, uint8);
				UProperty* NewProp_FlushStreamingOnGC = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FlushStreamingOnGC"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(FlushStreamingOnGC, UGarbageCollectionSettings), 0x0000080000004001, CPP_BOOL_PROPERTY_BITMASK(FlushStreamingOnGC, UGarbageCollectionSettings), sizeof(uint8), false);
				UProperty* NewProp_TimeBetweenPurgingPendingKillObjects = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TimeBetweenPurgingPendingKillObjects"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(TimeBetweenPurgingPendingKillObjects, UGarbageCollectionSettings), 0x0000080000004001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Garbage Collection"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/CoreSettings.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/CoreSettings.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Implements the settings for garbage collection."));
				MetaData->SetValue(NewProp_SizeOfPermanentObjectPool, TEXT("Category"), TEXT("Optimization"));
				MetaData->SetValue(NewProp_SizeOfPermanentObjectPool, TEXT("ConsoleVariable"), TEXT("gc.SizeOfPermanentObjectPool"));
				MetaData->SetValue(NewProp_SizeOfPermanentObjectPool, TEXT("DisplayName"), TEXT("Size Of Permanent Object Pool"));
				MetaData->SetValue(NewProp_SizeOfPermanentObjectPool, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/CoreSettings.h"));
				MetaData->SetValue(NewProp_SizeOfPermanentObjectPool, TEXT("ToolTip"), TEXT("Size Of Permanent Object Pool (bytes). Works only in cooked builds."));
				MetaData->SetValue(NewProp_MaxObjectsNotConsideredByGC, TEXT("Category"), TEXT("Optimization"));
				MetaData->SetValue(NewProp_MaxObjectsNotConsideredByGC, TEXT("ConsoleVariable"), TEXT("gc.MaxObjectsNotConsideredByGC"));
				MetaData->SetValue(NewProp_MaxObjectsNotConsideredByGC, TEXT("DisplayName"), TEXT("Maximum Object Count Not Considered By GC"));
				MetaData->SetValue(NewProp_MaxObjectsNotConsideredByGC, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/CoreSettings.h"));
				MetaData->SetValue(NewProp_MaxObjectsNotConsideredByGC, TEXT("ToolTip"), TEXT("Maximum Object Count Not Considered By GC. Works only in cooked builds."));
				MetaData->SetValue(NewProp_NumRetriesBeforeForcingGC, TEXT("Category"), TEXT("General"));
				MetaData->SetValue(NewProp_NumRetriesBeforeForcingGC, TEXT("ConsoleVariable"), TEXT("gc.NumRetriesBeforeForcingGC"));
				MetaData->SetValue(NewProp_NumRetriesBeforeForcingGC, TEXT("DisplayName"), TEXT("Number Of Retries Before Forcing GC"));
				MetaData->SetValue(NewProp_NumRetriesBeforeForcingGC, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/CoreSettings.h"));
				MetaData->SetValue(NewProp_NumRetriesBeforeForcingGC, TEXT("ToolTip"), TEXT("Maximum number of times GC can be skipped if worker threads are currently modifying UObject state. 0 = never force GC"));
				MetaData->SetValue(NewProp_AllowParallelGC, TEXT("Category"), TEXT("Optimization"));
				MetaData->SetValue(NewProp_AllowParallelGC, TEXT("ConsoleVariable"), TEXT("gc.AllowParallelGC"));
				MetaData->SetValue(NewProp_AllowParallelGC, TEXT("DisplayName"), TEXT("Allow Parallel GC"));
				MetaData->SetValue(NewProp_AllowParallelGC, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/CoreSettings.h"));
				MetaData->SetValue(NewProp_AllowParallelGC, TEXT("ToolTip"), TEXT("If enabled, garbage collection will use multiple threads."));
				MetaData->SetValue(NewProp_FlushStreamingOnGC, TEXT("Category"), TEXT("General"));
				MetaData->SetValue(NewProp_FlushStreamingOnGC, TEXT("ConsoleVariable"), TEXT("gc.FlushStreamingOnGC"));
				MetaData->SetValue(NewProp_FlushStreamingOnGC, TEXT("DisplayName"), TEXT("Flush Streaming On GC"));
				MetaData->SetValue(NewProp_FlushStreamingOnGC, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/CoreSettings.h"));
				MetaData->SetValue(NewProp_FlushStreamingOnGC, TEXT("ToolTip"), TEXT("If enabled, streaming will be flushed each time garbage collection is triggered."));
				MetaData->SetValue(NewProp_TimeBetweenPurgingPendingKillObjects, TEXT("Category"), TEXT("General"));
				MetaData->SetValue(NewProp_TimeBetweenPurgingPendingKillObjects, TEXT("ConsoleVariable"), TEXT("gc.TimeBetweenPurgingPendingKillObjects"));
				MetaData->SetValue(NewProp_TimeBetweenPurgingPendingKillObjects, TEXT("DisplayName"), TEXT("Time Between Purging Pending Kill Objects"));
				MetaData->SetValue(NewProp_TimeBetweenPurgingPendingKillObjects, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/CoreSettings.h"));
				MetaData->SetValue(NewProp_TimeBetweenPurgingPendingKillObjects, TEXT("ToolTip"), TEXT("Time in seconds (game time) we should wait between purging object references to objects that are pending kill."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UGarbageCollectionSettings(Z_Construct_UClass_UGarbageCollectionSettings, TEXT("UGarbageCollectionSettings"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UGarbageCollectionSettings);
	UClass* Z_Construct_UClass_UNetworkSettings_NoRegister()
	{
		return UNetworkSettings::StaticClass();
	}
	UClass* Z_Construct_UClass_UNetworkSettings()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UDeveloperSettings();
			Z_Construct_UPackage_Engine();
			OuterClass = UNetworkSettings::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100086;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bVerifyPeer, UNetworkSettings, uint8);
				UProperty* NewProp_bVerifyPeer = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bVerifyPeer"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bVerifyPeer, UNetworkSettings), 0x0000000000004001, CPP_BOOL_PROPERTY_BITMASK(bVerifyPeer, UNetworkSettings), sizeof(uint8), false);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Network"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/NetworkSettings.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NetworkSettings.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Network settings."));
				MetaData->SetValue(NewProp_bVerifyPeer, TEXT("Category"), TEXT("libcurl"));
				MetaData->SetValue(NewProp_bVerifyPeer, TEXT("ConsoleVariable"), TEXT("n.VerifyPeer"));
				MetaData->SetValue(NewProp_bVerifyPeer, TEXT("DisplayName"), TEXT("Verify Peer"));
				MetaData->SetValue(NewProp_bVerifyPeer, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NetworkSettings.h"));
				MetaData->SetValue(NewProp_bVerifyPeer, TEXT("ToolTip"), TEXT("If true, libcurl authenticates the peer's certificate. Disable to allow self-signed certificates."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UNetworkSettings(Z_Construct_UClass_UNetworkSettings, TEXT("UNetworkSettings"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UNetworkSettings);
	UEnum* Z_Construct_UEnum_Engine_ESettingsLockedAxis()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_ESettingsLockedAxis_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ESettingsLockedAxis"), 0, Get_Z_Construct_UEnum_Engine_ESettingsLockedAxis_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ESettingsLockedAxis"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESettingsLockedAxis::None")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESettingsLockedAxis::X")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESettingsLockedAxis::Y")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESettingsLockedAxis::Z")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESettingsLockedAxis::Invalid")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESettingsLockedAxis::ESettingsLockedAxis_MAX")), 5));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("Invalid.ToolTip"), TEXT("Used for backwards compatibility. Indicates that we've updated into the new struct."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsSettings.h"));
			MetaData->SetValue(ReturnEnum, TEXT("None.ToolTip"), TEXT("No axis is locked."));
			MetaData->SetValue(ReturnEnum, TEXT("X.ToolTip"), TEXT("Lock movement along the x-axis."));
			MetaData->SetValue(ReturnEnum, TEXT("Y.ToolTip"), TEXT("Lock movement along the y-axis."));
			MetaData->SetValue(ReturnEnum, TEXT("Z.ToolTip"), TEXT("Lock movement along the z-axis."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_ESettingsLockedAxis_CRC() { return 3021005025U; }
	UEnum* Z_Construct_UEnum_Engine_ESettingsDOF()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_ESettingsDOF_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ESettingsDOF"), 0, Get_Z_Construct_UEnum_Engine_ESettingsDOF_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ESettingsDOF"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESettingsDOF::Full3D")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESettingsDOF::YZPlane")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESettingsDOF::XZPlane")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESettingsDOF::XYPlane")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESettingsDOF::ESettingsDOF_MAX")), 4));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("Full3D.ToolTip"), TEXT("Allows for full 3D movement and rotation."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsSettings.h"));
			MetaData->SetValue(ReturnEnum, TEXT("XYPlane.ToolTip"), TEXT("Allows 2D movement along the X-Y plane."));
			MetaData->SetValue(ReturnEnum, TEXT("XZPlane.ToolTip"), TEXT("Allows 2D movement along the X-Z plane."));
			MetaData->SetValue(ReturnEnum, TEXT("YZPlane.ToolTip"), TEXT("Allows 2D movement along the Y-Z plane."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_ESettingsDOF_CRC() { return 3248951027U; }
	UEnum* Z_Construct_UEnum_Engine_EFrictionCombineMode()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EFrictionCombineMode_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EFrictionCombineMode"), 0, Get_Z_Construct_UEnum_Engine_EFrictionCombineMode_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EFrictionCombineMode"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EFrictionCombineMode::Average")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EFrictionCombineMode::Min")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EFrictionCombineMode::Multiply")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EFrictionCombineMode::Max")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EFrictionCombineMode::EFrictionCombineMode_MAX")), 4));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("Average.ToolTip"), TEXT("Uses the average value of the materials touching: (a+b)/2"));
			MetaData->SetValue(ReturnEnum, TEXT("Max.ToolTip"), TEXT("Uses the maximum value of materials touching: max(a,b)"));
			MetaData->SetValue(ReturnEnum, TEXT("Min.ToolTip"), TEXT("Uses the minimum value of the materials touching: min(a,b)"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsSettings.h"));
			MetaData->SetValue(ReturnEnum, TEXT("Multiply.ToolTip"), TEXT("Uses the product of the values of the materials touching: a*b"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EFrictionCombineMode_CRC() { return 1519405446U; }
	UScriptStruct* Z_Construct_UScriptStruct_FPhysicalSurfaceName()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FPhysicalSurfaceName_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("PhysicalSurfaceName"), sizeof(FPhysicalSurfaceName), Get_Z_Construct_UScriptStruct_FPhysicalSurfaceName_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PhysicalSurfaceName"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FPhysicalSurfaceName>, EStructFlags(0x00000001));
			UProperty* NewProp_Name = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Name"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(Name, FPhysicalSurfaceName), 0x0000000000000000);
			UProperty* NewProp_Type = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Type"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(Type, FPhysicalSurfaceName), 0x0000000000000000, Z_Construct_UEnum_Engine_EPhysicalSurface());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsSettings.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Structure that represents the name of physical surfaces."));
			MetaData->SetValue(NewProp_Name, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsSettings.h"));
			MetaData->SetValue(NewProp_Type, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsSettings.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FPhysicalSurfaceName_CRC() { return 439507776U; }
	UClass* Z_Construct_UClass_UPhysicsSettings_NoRegister()
	{
		return UPhysicsSettings::StaticClass();
	}
	UClass* Z_Construct_UClass_UPhysicsSettings()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UDeveloperSettings();
			Z_Construct_UPackage_Engine();
			OuterClass = UPhysicsSettings::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100086;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_PhysicalSurfaces = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PhysicalSurfaces"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(PhysicalSurfaces, UPhysicsSettings), 0x0000000000004000);
				UProperty* NewProp_PhysicalSurfaces_Inner = new(EC_InternalUseOnlyConstructor, NewProp_PhysicalSurfaces, TEXT("PhysicalSurfaces"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000004000, Z_Construct_UScriptStruct_FPhysicalSurfaceName());
				UProperty* NewProp_InitialAverageFrameRate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InitialAverageFrameRate"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InitialAverageFrameRate, UPhysicsSettings), 0x0000040000004001);
				UProperty* NewProp_AsyncSceneSmoothingFactor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AsyncSceneSmoothingFactor"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(AsyncSceneSmoothingFactor, UPhysicsSettings), 0x0000040000004001);
				UProperty* NewProp_SyncSceneSmoothingFactor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SyncSceneSmoothingFactor"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(SyncSceneSmoothingFactor, UPhysicsSettings), 0x0000040000004001);
				UProperty* NewProp_MaxSubsteps = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxSubsteps"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MaxSubsteps, UPhysicsSettings), 0x0000000000004001);
				UProperty* NewProp_MaxSubstepDeltaTime = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxSubstepDeltaTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MaxSubstepDeltaTime, UPhysicsSettings), 0x0000000000004001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSubsteppingAsync, UPhysicsSettings, bool);
				UProperty* NewProp_bSubsteppingAsync = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bSubsteppingAsync"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSubsteppingAsync, UPhysicsSettings), 0x0000000000004001, CPP_BOOL_PROPERTY_BITMASK(bSubsteppingAsync, UPhysicsSettings), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSubstepping, UPhysicsSettings, bool);
				UProperty* NewProp_bSubstepping = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bSubstepping"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSubstepping, UPhysicsSettings), 0x0000000000004001, CPP_BOOL_PROPERTY_BITMASK(bSubstepping, UPhysicsSettings), sizeof(bool), true);
				UProperty* NewProp_MaxPhysicsDeltaTime = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxPhysicsDeltaTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MaxPhysicsDeltaTime, UPhysicsSettings), 0x0000000000004001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDefaultHasComplexCollision, UPhysicsSettings, bool);
				UProperty* NewProp_bDefaultHasComplexCollision = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bDefaultHasComplexCollision"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDefaultHasComplexCollision, UPhysicsSettings), 0x0000000000004001, CPP_BOOL_PROPERTY_BITMASK(bDefaultHasComplexCollision, UPhysicsSettings), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSimulateSkeletalMeshOnDedicatedServer, UPhysicsSettings, bool);
				UProperty* NewProp_bSimulateSkeletalMeshOnDedicatedServer = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bSimulateSkeletalMeshOnDedicatedServer"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSimulateSkeletalMeshOnDedicatedServer, UPhysicsSettings), 0x0000000000004001, CPP_BOOL_PROPERTY_BITMASK(bSimulateSkeletalMeshOnDedicatedServer, UPhysicsSettings), sizeof(bool), true);
				UProperty* NewProp_MaxDepenetrationVelocity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxDepenetrationVelocity"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MaxDepenetrationVelocity, UPhysicsSettings), 0x0000000000004001);
				UProperty* NewProp_MaxAngularVelocity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxAngularVelocity"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MaxAngularVelocity, UPhysicsSettings), 0x0000000000004001);
				UProperty* NewProp_RestitutionCombineMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RestitutionCombineMode"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(RestitutionCombineMode, UPhysicsSettings), 0x0000000000004001, Z_Construct_UEnum_Engine_EFrictionCombineMode());
				UProperty* NewProp_FrictionCombineMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FrictionCombineMode"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(FrictionCombineMode, UPhysicsSettings), 0x0000000000004001, Z_Construct_UEnum_Engine_EFrictionCombineMode());
				UProperty* NewProp_BounceThresholdVelocity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BounceThresholdVelocity"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(BounceThresholdVelocity, UPhysicsSettings), 0x0000000000004001);
				UProperty* NewProp_DefaultDegreesOfFreedom = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultDegreesOfFreedom"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(DefaultDegreesOfFreedom, UPhysicsSettings), 0x0000000000004001, Z_Construct_UEnum_Engine_ESettingsDOF());
				UProperty* NewProp_LockedAxis = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LockedAxis"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(LockedAxis_DEPRECATED, UPhysicsSettings), 0x0000000020004000, Z_Construct_UEnum_Engine_ESettingsLockedAxis());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnable2DPhysics, UPhysicsSettings, bool);
				UProperty* NewProp_bEnable2DPhysics = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bEnable2DPhysics"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnable2DPhysics, UPhysicsSettings), 0x0000000000004001, CPP_BOOL_PROPERTY_BITMASK(bEnable2DPhysics, UPhysicsSettings), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bWarnMissingLocks, UPhysicsSettings, bool);
				UProperty* NewProp_bWarnMissingLocks = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bWarnMissingLocks"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bWarnMissingLocks, UPhysicsSettings), 0x0000040000004001, CPP_BOOL_PROPERTY_BITMASK(bWarnMissingLocks, UPhysicsSettings), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnablePCM, UPhysicsSettings, bool);
				UProperty* NewProp_bEnablePCM = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bEnablePCM"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnablePCM, UPhysicsSettings), 0x0000040000004001, CPP_BOOL_PROPERTY_BITMASK(bEnablePCM, UPhysicsSettings), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnableShapeSharing, UPhysicsSettings, bool);
				UProperty* NewProp_bEnableShapeSharing = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bEnableShapeSharing"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnableShapeSharing, UPhysicsSettings), 0x0000040000004001, CPP_BOOL_PROPERTY_BITMASK(bEnableShapeSharing, UPhysicsSettings), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnableAsyncScene, UPhysicsSettings, bool);
				UProperty* NewProp_bEnableAsyncScene = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bEnableAsyncScene"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnableAsyncScene, UPhysicsSettings), 0x0000040000004001, CPP_BOOL_PROPERTY_BITMASK(bEnableAsyncScene, UPhysicsSettings), sizeof(bool), true);
				UProperty* NewProp_TriangleMeshTriangleMinAreaThreshold = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TriangleMeshTriangleMinAreaThreshold"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(TriangleMeshTriangleMinAreaThreshold, UPhysicsSettings), 0x0000040000004001);
				UProperty* NewProp_RagdollAggregateThreshold = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RagdollAggregateThreshold"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(RagdollAggregateThreshold, UPhysicsSettings), 0x0000000000004001);
				UProperty* NewProp_DefaultFluidFriction = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultFluidFriction"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DefaultFluidFriction, UPhysicsSettings), 0x0000000000004001);
				UProperty* NewProp_DefaultTerminalVelocity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultTerminalVelocity"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DefaultTerminalVelocity, UPhysicsSettings), 0x0000000000004001);
				UProperty* NewProp_DefaultGravityZ = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultGravityZ"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DefaultGravityZ, UPhysicsSettings), 0x0000000000004001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Physics"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("PhysicsEngine/PhysicsSettings.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsSettings.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Default physics settings."));
				MetaData->SetValue(NewProp_PhysicalSurfaces, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsSettings.h"));
				MetaData->SetValue(NewProp_PhysicalSurfaces, TEXT("ToolTip"), TEXT("PhysicalMaterial Surface Types"));
				MetaData->SetValue(NewProp_InitialAverageFrameRate, TEXT("Category"), TEXT("Framerate"));
				MetaData->SetValue(NewProp_InitialAverageFrameRate, TEXT("ClampMax"), TEXT("1.0"));
				MetaData->SetValue(NewProp_InitialAverageFrameRate, TEXT("ClampMin"), TEXT("0.0013"));
				MetaData->SetValue(NewProp_InitialAverageFrameRate, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsSettings.h"));
				MetaData->SetValue(NewProp_InitialAverageFrameRate, TEXT("ToolTip"), TEXT("Physics delta time initial average."));
				MetaData->SetValue(NewProp_InitialAverageFrameRate, TEXT("UIMax"), TEXT("1.0"));
				MetaData->SetValue(NewProp_InitialAverageFrameRate, TEXT("UIMin"), TEXT("1.0"));
				MetaData->SetValue(NewProp_AsyncSceneSmoothingFactor, TEXT("Category"), TEXT("Framerate"));
				MetaData->SetValue(NewProp_AsyncSceneSmoothingFactor, TEXT("ClampMax"), TEXT("1.0"));
				MetaData->SetValue(NewProp_AsyncSceneSmoothingFactor, TEXT("ClampMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_AsyncSceneSmoothingFactor, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsSettings.h"));
				MetaData->SetValue(NewProp_AsyncSceneSmoothingFactor, TEXT("ToolTip"), TEXT("Physics delta time smoothing factor for async scene."));
				MetaData->SetValue(NewProp_AsyncSceneSmoothingFactor, TEXT("UIMax"), TEXT("1.0"));
				MetaData->SetValue(NewProp_AsyncSceneSmoothingFactor, TEXT("UIMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_SyncSceneSmoothingFactor, TEXT("Category"), TEXT("Framerate"));
				MetaData->SetValue(NewProp_SyncSceneSmoothingFactor, TEXT("ClampMax"), TEXT("1.0"));
				MetaData->SetValue(NewProp_SyncSceneSmoothingFactor, TEXT("ClampMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_SyncSceneSmoothingFactor, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsSettings.h"));
				MetaData->SetValue(NewProp_SyncSceneSmoothingFactor, TEXT("ToolTip"), TEXT("Physics delta time smoothing factor for sync scene."));
				MetaData->SetValue(NewProp_SyncSceneSmoothingFactor, TEXT("UIMax"), TEXT("1.0"));
				MetaData->SetValue(NewProp_SyncSceneSmoothingFactor, TEXT("UIMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_MaxSubsteps, TEXT("Category"), TEXT("Framerate"));
				MetaData->SetValue(NewProp_MaxSubsteps, TEXT("ClampMax"), TEXT("16"));
				MetaData->SetValue(NewProp_MaxSubsteps, TEXT("ClampMin"), TEXT("1"));
				MetaData->SetValue(NewProp_MaxSubsteps, TEXT("editcondition"), TEXT("bSubstepping"));
				MetaData->SetValue(NewProp_MaxSubsteps, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsSettings.h"));
				MetaData->SetValue(NewProp_MaxSubsteps, TEXT("ToolTip"), TEXT("Max number of substeps for physics simulation."));
				MetaData->SetValue(NewProp_MaxSubsteps, TEXT("UIMax"), TEXT("16"));
				MetaData->SetValue(NewProp_MaxSubsteps, TEXT("UIMin"), TEXT("1"));
				MetaData->SetValue(NewProp_MaxSubstepDeltaTime, TEXT("Category"), TEXT("Framerate"));
				MetaData->SetValue(NewProp_MaxSubstepDeltaTime, TEXT("ClampMax"), TEXT("1.0"));
				MetaData->SetValue(NewProp_MaxSubstepDeltaTime, TEXT("ClampMin"), TEXT("0.0013"));
				MetaData->SetValue(NewProp_MaxSubstepDeltaTime, TEXT("editcondition"), TEXT("bSubStepping"));
				MetaData->SetValue(NewProp_MaxSubstepDeltaTime, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsSettings.h"));
				MetaData->SetValue(NewProp_MaxSubstepDeltaTime, TEXT("ToolTip"), TEXT("Max delta time (in seconds) for an individual simulation substep."));
				MetaData->SetValue(NewProp_MaxSubstepDeltaTime, TEXT("UIMax"), TEXT("1.0"));
				MetaData->SetValue(NewProp_MaxSubstepDeltaTime, TEXT("UIMin"), TEXT("0.0013"));
				MetaData->SetValue(NewProp_bSubsteppingAsync, TEXT("Category"), TEXT("Framerate"));
				MetaData->SetValue(NewProp_bSubsteppingAsync, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsSettings.h"));
				MetaData->SetValue(NewProp_bSubsteppingAsync, TEXT("ToolTip"), TEXT("Whether to substep the async physics simulation. This feature is still experimental. Certain functionality might not work correctly"));
				MetaData->SetValue(NewProp_bSubstepping, TEXT("Category"), TEXT("Framerate"));
				MetaData->SetValue(NewProp_bSubstepping, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsSettings.h"));
				MetaData->SetValue(NewProp_bSubstepping, TEXT("ToolTip"), TEXT("Whether to substep the physics simulation. This feature is still experimental. Certain functionality might not work correctly"));
				MetaData->SetValue(NewProp_MaxPhysicsDeltaTime, TEXT("Category"), TEXT("Framerate"));
				MetaData->SetValue(NewProp_MaxPhysicsDeltaTime, TEXT("ClampMax"), TEXT("1.0"));
				MetaData->SetValue(NewProp_MaxPhysicsDeltaTime, TEXT("ClampMin"), TEXT("0.0013"));
				MetaData->SetValue(NewProp_MaxPhysicsDeltaTime, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsSettings.h"));
				MetaData->SetValue(NewProp_MaxPhysicsDeltaTime, TEXT("ToolTip"), TEXT("Max Physics Delta Time to be clamped."));
				MetaData->SetValue(NewProp_MaxPhysicsDeltaTime, TEXT("UIMax"), TEXT("1.0"));
				MetaData->SetValue(NewProp_MaxPhysicsDeltaTime, TEXT("UIMin"), TEXT("0.0013"));
				MetaData->SetValue(NewProp_bDefaultHasComplexCollision, TEXT("Category"), TEXT("Simulation"));
				MetaData->SetValue(NewProp_bDefaultHasComplexCollision, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsSettings.h"));
				MetaData->SetValue(NewProp_bDefaultHasComplexCollision, TEXT("ToolTip"), TEXT("If true, static meshes will use per poly collision as complex collision by default. If false the default behavior is the same as UseSimpleAsComplex."));
				MetaData->SetValue(NewProp_bSimulateSkeletalMeshOnDedicatedServer, TEXT("Category"), TEXT("Simulation"));
				MetaData->SetValue(NewProp_bSimulateSkeletalMeshOnDedicatedServer, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsSettings.h"));
				MetaData->SetValue(NewProp_bSimulateSkeletalMeshOnDedicatedServer, TEXT("ToolTip"), TEXT("If true, simulate physics for this component on a dedicated server.\nThis should be set if simulating physics and replicating with a dedicated server."));
				MetaData->SetValue(NewProp_MaxDepenetrationVelocity, TEXT("Category"), TEXT("Simulation"));
				MetaData->SetValue(NewProp_MaxDepenetrationVelocity, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsSettings.h"));
				MetaData->SetValue(NewProp_MaxDepenetrationVelocity, TEXT("ToolTip"), TEXT("Max velocity which may be used to depenetrate simulated physics objects. 0 means no maximum."));
				MetaData->SetValue(NewProp_MaxAngularVelocity, TEXT("Category"), TEXT("Simulation"));
				MetaData->SetValue(NewProp_MaxAngularVelocity, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsSettings.h"));
				MetaData->SetValue(NewProp_MaxAngularVelocity, TEXT("ToolTip"), TEXT("Max angular velocity that a simulated object can achieve."));
				MetaData->SetValue(NewProp_RestitutionCombineMode, TEXT("Category"), TEXT("Simulation"));
				MetaData->SetValue(NewProp_RestitutionCombineMode, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsSettings.h"));
				MetaData->SetValue(NewProp_RestitutionCombineMode, TEXT("ToolTip"), TEXT("Restitution combine mode, controls how restitution is computed for multiple materials."));
				MetaData->SetValue(NewProp_FrictionCombineMode, TEXT("Category"), TEXT("Simulation"));
				MetaData->SetValue(NewProp_FrictionCombineMode, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsSettings.h"));
				MetaData->SetValue(NewProp_FrictionCombineMode, TEXT("ToolTip"), TEXT("Friction combine mode, controls how friction is computed for multiple materials."));
				MetaData->SetValue(NewProp_BounceThresholdVelocity, TEXT("Category"), TEXT("Simulation"));
				MetaData->SetValue(NewProp_BounceThresholdVelocity, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_BounceThresholdVelocity, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsSettings.h"));
				MetaData->SetValue(NewProp_BounceThresholdVelocity, TEXT("ToolTip"), TEXT("Minimum relative velocity required for an object to bounce. A typical value for simulation stability is about 0.2 * gravity"));
				MetaData->SetValue(NewProp_BounceThresholdVelocity, TEXT("UIMin"), TEXT("0"));
				MetaData->SetValue(NewProp_DefaultDegreesOfFreedom, TEXT("Category"), TEXT("Simulation"));
				MetaData->SetValue(NewProp_DefaultDegreesOfFreedom, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsSettings.h"));
				MetaData->SetValue(NewProp_DefaultDegreesOfFreedom, TEXT("ToolTip"), TEXT("Useful for constraining all objects in the world, for example if you are making a 2D game using 3D environments."));
				MetaData->SetValue(NewProp_LockedAxis, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsSettings.h"));
				MetaData->SetValue(NewProp_bEnable2DPhysics, TEXT("Category"), TEXT("Simulation"));
				MetaData->SetValue(NewProp_bEnable2DPhysics, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsSettings.h"));
				MetaData->SetValue(NewProp_bEnable2DPhysics, TEXT("ToolTip"), TEXT("Can 2D physics be used (Box2D)?"));
				MetaData->SetValue(NewProp_bWarnMissingLocks, TEXT("Category"), TEXT("Simulation"));
				MetaData->SetValue(NewProp_bWarnMissingLocks, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsSettings.h"));
				MetaData->SetValue(NewProp_bWarnMissingLocks, TEXT("ToolTip"), TEXT("Whether to warn when physics locks are used incorrectly. Turning this off is not recommended and should only be used by very advanced users."));
				MetaData->SetValue(NewProp_bEnablePCM, TEXT("Category"), TEXT("Simulation"));
				MetaData->SetValue(NewProp_bEnablePCM, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsSettings.h"));
				MetaData->SetValue(NewProp_bEnablePCM, TEXT("ToolTip"), TEXT("Enables persistent contact manifolds. This will generate fewer contact points, but with more accuracy. Reduces stability of stacking, but can help energy conservation."));
				MetaData->SetValue(NewProp_bEnableShapeSharing, TEXT("Category"), TEXT("Simulation"));
				MetaData->SetValue(NewProp_bEnableShapeSharing, TEXT("editcondition"), TEXT("bEnableAsyncScene"));
				MetaData->SetValue(NewProp_bEnableShapeSharing, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsSettings.h"));
				MetaData->SetValue(NewProp_bEnableShapeSharing, TEXT("ToolTip"), TEXT("Enables shape sharing between sync and async scene for static rigid actors"));
				MetaData->SetValue(NewProp_bEnableAsyncScene, TEXT("Category"), TEXT("Simulation"));
				MetaData->SetValue(NewProp_bEnableAsyncScene, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsSettings.h"));
				MetaData->SetValue(NewProp_bEnableAsyncScene, TEXT("ToolTip"), TEXT("Enables the use of an async scene"));
				MetaData->SetValue(NewProp_TriangleMeshTriangleMinAreaThreshold, TEXT("Category"), TEXT("Constants"));
				MetaData->SetValue(NewProp_TriangleMeshTriangleMinAreaThreshold, TEXT("ClampMax"), TEXT("10.0"));
				MetaData->SetValue(NewProp_TriangleMeshTriangleMinAreaThreshold, TEXT("ClampMin"), TEXT("-1.0"));
				MetaData->SetValue(NewProp_TriangleMeshTriangleMinAreaThreshold, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsSettings.h"));
				MetaData->SetValue(NewProp_TriangleMeshTriangleMinAreaThreshold, TEXT("ToolTip"), TEXT("Triangles from triangle meshes (BSP) with an area less than or equal to this value will be removed from physics collision data. Set to less than 0 to disable."));
				MetaData->SetValue(NewProp_TriangleMeshTriangleMinAreaThreshold, TEXT("UIMax"), TEXT("10.0"));
				MetaData->SetValue(NewProp_TriangleMeshTriangleMinAreaThreshold, TEXT("UIMin"), TEXT("-1.0"));
				MetaData->SetValue(NewProp_RagdollAggregateThreshold, TEXT("Category"), TEXT("Constants"));
				MetaData->SetValue(NewProp_RagdollAggregateThreshold, TEXT("ClampMax"), TEXT("127"));
				MetaData->SetValue(NewProp_RagdollAggregateThreshold, TEXT("ClampMin"), TEXT("1"));
				MetaData->SetValue(NewProp_RagdollAggregateThreshold, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsSettings.h"));
				MetaData->SetValue(NewProp_RagdollAggregateThreshold, TEXT("ToolTip"), TEXT("Threshold for ragdoll bodies above which they will be added to an aggregate before being added to the scene"));
				MetaData->SetValue(NewProp_RagdollAggregateThreshold, TEXT("UIMax"), TEXT("127"));
				MetaData->SetValue(NewProp_RagdollAggregateThreshold, TEXT("UIMin"), TEXT("1"));
				MetaData->SetValue(NewProp_DefaultFluidFriction, TEXT("Category"), TEXT("Constants"));
				MetaData->SetValue(NewProp_DefaultFluidFriction, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsSettings.h"));
				MetaData->SetValue(NewProp_DefaultFluidFriction, TEXT("ToolTip"), TEXT("Default fluid friction for Physics Volumes."));
				MetaData->SetValue(NewProp_DefaultTerminalVelocity, TEXT("Category"), TEXT("Constants"));
				MetaData->SetValue(NewProp_DefaultTerminalVelocity, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsSettings.h"));
				MetaData->SetValue(NewProp_DefaultTerminalVelocity, TEXT("ToolTip"), TEXT("Default terminal velocity for Physics Volumes."));
				MetaData->SetValue(NewProp_DefaultGravityZ, TEXT("Category"), TEXT("Constants"));
				MetaData->SetValue(NewProp_DefaultGravityZ, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsSettings.h"));
				MetaData->SetValue(NewProp_DefaultGravityZ, TEXT("ToolTip"), TEXT("Default gravity."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UPhysicsSettings(Z_Construct_UClass_UPhysicsSettings, TEXT("UPhysicsSettings"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UPhysicsSettings);
	UEnum* Z_Construct_UEnum_Engine_EAntiAliasingMethodUI()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EAntiAliasingMethodUI_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EAntiAliasingMethodUI"), 0, Get_Z_Construct_UEnum_Engine_EAntiAliasingMethodUI_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EAntiAliasingMethodUI"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EAntiAliasingMethodUI::AAM_None")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EAntiAliasingMethodUI::AAM_FXAA")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EAntiAliasingMethodUI::AAM_TemporalAA")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EAntiAliasingMethodUI::AAM_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("AAM_FXAA.DisplayName"), TEXT("FXAA"));
			MetaData->SetValue(ReturnEnum, TEXT("AAM_None.DisplayName"), TEXT("None"));
			MetaData->SetValue(ReturnEnum, TEXT("AAM_TemporalAA.DisplayName"), TEXT("TemporalAA"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/RendererSettings.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("used by FPostProcessSettings Anti-aliasing"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EAntiAliasingMethodUI_CRC() { return 975817637U; }
	UEnum* Z_Construct_UEnum_Engine_EEarlyZPass()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EEarlyZPass_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EEarlyZPass"), 0, Get_Z_Construct_UEnum_Engine_EEarlyZPass_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EEarlyZPass"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EEarlyZPass::None")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EEarlyZPass::OpaqueOnly")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EEarlyZPass::OpaqueAndMasked")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EEarlyZPass::Auto")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EEarlyZPass::EEarlyZPass_MAX")), 4));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("Auto.DisplayName"), TEXT("Decide automatically"));
			MetaData->SetValue(ReturnEnum, TEXT("Auto.ToolTip"), TEXT("Let the engine decide what to render in the early Z pass based on the features being used."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/RendererSettings.h"));
			MetaData->SetValue(ReturnEnum, TEXT("None.DisplayName"), TEXT("None"));
			MetaData->SetValue(ReturnEnum, TEXT("OpaqueAndMasked.DisplayName"), TEXT("Opaque and masked meshes"));
			MetaData->SetValue(ReturnEnum, TEXT("OpaqueOnly.DisplayName"), TEXT("Opaque meshes only"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Enumerates available options for early Z-passes."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EEarlyZPass_CRC() { return 4249709001U; }
	UEnum* Z_Construct_UEnum_Engine_ECustomDepthStencil()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_ECustomDepthStencil_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ECustomDepthStencil"), 0, Get_Z_Construct_UEnum_Engine_ECustomDepthStencil_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ECustomDepthStencil"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ECustomDepthStencil::Disabled")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ECustomDepthStencil::Enabled")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ECustomDepthStencil::EnabledOnDemand")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ECustomDepthStencil::EnabledWithStencil")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ECustomDepthStencil::ECustomDepthStencil_MAX")), 4));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("Enabled.ToolTip"), TEXT("Depth buffer created immediately. Stencil disabled."));
			MetaData->SetValue(ReturnEnum, TEXT("EnabledOnDemand.ToolTip"), TEXT("Depth buffer created on first use, can save memory but cause stalls. Stencil disabled."));
			MetaData->SetValue(ReturnEnum, TEXT("EnabledWithStencil.ToolTip"), TEXT("Depth buffer created immediately. Stencil available for read/write."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/RendererSettings.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Enumerates available options for custom depth."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_ECustomDepthStencil_CRC() { return 1167264730U; }
	UEnum* Z_Construct_UEnum_Engine_ECompositingSampleCount()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_ECompositingSampleCount_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ECompositingSampleCount"), 0, Get_Z_Construct_UEnum_Engine_ECompositingSampleCount_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ECompositingSampleCount"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ECompositingSampleCount::One")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ECompositingSampleCount::Two")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ECompositingSampleCount::Four")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ECompositingSampleCount::Eight")), 8));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ECompositingSampleCount::ECompositingSampleCount_MAX")), 9));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("Eight.DisplayName"), TEXT("8x MSAA"));
			MetaData->SetValue(ReturnEnum, TEXT("Four.DisplayName"), TEXT("4x MSAA"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/RendererSettings.h"));
			MetaData->SetValue(ReturnEnum, TEXT("One.DisplayName"), TEXT("No MSAA"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Enumerates available compositing sample counts."));
			MetaData->SetValue(ReturnEnum, TEXT("Two.DisplayName"), TEXT("2x MSAA"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_ECompositingSampleCount_CRC() { return 2826339422U; }
	UEnum* Z_Construct_UEnum_Engine_EClearSceneOptions()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EClearSceneOptions_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EClearSceneOptions"), 0, Get_Z_Construct_UEnum_Engine_EClearSceneOptions_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EClearSceneOptions"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EClearSceneOptions::NoClear")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EClearSceneOptions::HardwareClear")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EClearSceneOptions::QuadAtMaxZ")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EClearSceneOptions::EClearSceneOptions_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("HardwareClear.DisplayName"), TEXT("Hardware clear"));
			MetaData->SetValue(ReturnEnum, TEXT("HardwareClear.ToolTip"), TEXT("Perform a full hardware clear before rendering. Most projects should use this option."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/RendererSettings.h"));
			MetaData->SetValue(ReturnEnum, TEXT("NoClear.DisplayName"), TEXT("Do not clear"));
			MetaData->SetValue(ReturnEnum, TEXT("NoClear.ToolTip"), TEXT("This option is fastest but can cause artifacts unless you render to every pixel. Make sure to use a skybox with this option!"));
			MetaData->SetValue(ReturnEnum, TEXT("QuadAtMaxZ.DisplayName"), TEXT("Clear at far plane"));
			MetaData->SetValue(ReturnEnum, TEXT("QuadAtMaxZ.ToolTip"), TEXT("Draws a quad to perform the clear at the far plane, this is faster than a hardware clear on some GPUs."));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Enumerates ways to clear a scene."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EClearSceneOptions_CRC() { return 2711296781U; }
	UClass* Z_Construct_UClass_URendererSettings_NoRegister()
	{
		return URendererSettings::StaticClass();
	}
	UClass* Z_Construct_UClass_URendererSettings()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UDeveloperSettings();
			Z_Construct_UPackage_Engine();
			OuterClass = URendererSettings::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100086;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_UIScaleCurve = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UIScaleCurve"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(UIScaleCurve_DEPRECATED, URendererSettings), 0x0000000020004000, Z_Construct_UScriptStruct_FRuntimeFloatCurve());
				UProperty* NewProp_UIScaleRule = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UIScaleRule"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(UIScaleRule_DEPRECATED, URendererSettings), 0x0000000020004000, Z_Construct_UEnum_Engine_EUIScalingRule());
				UProperty* NewProp_WireframeCullThreshold = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WireframeCullThreshold"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(WireframeCullThreshold, URendererSettings), 0x0000000000004001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bBasePassOutputsVelocity, URendererSettings, uint8);
				UProperty* NewProp_bBasePassOutputsVelocity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bBasePassOutputsVelocity"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bBasePassOutputsVelocity, URendererSettings), 0x0000000000004001, CPP_BOOL_PROPERTY_BITMASK(bBasePassOutputsVelocity, URendererSettings), sizeof(uint8), false);
				UProperty* NewProp_ClearSceneMethod = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ClearSceneMethod"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(ClearSceneMethod, URendererSettings), 0x0000000000004001, Z_Construct_UEnum_Engine_EClearSceneOptions());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDBuffer, URendererSettings, uint8);
				UProperty* NewProp_bDBuffer = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bDBuffer"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDBuffer, URendererSettings), 0x0000000000004001, CPP_BOOL_PROPERTY_BITMASK(bDBuffer, URendererSettings), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEarlyZPassMovable, URendererSettings, uint8);
				UProperty* NewProp_bEarlyZPassMovable = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bEarlyZPassMovable"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEarlyZPassMovable, URendererSettings), 0x0000000000004001, CPP_BOOL_PROPERTY_BITMASK(bEarlyZPassMovable, URendererSettings), sizeof(uint8), false);
				UProperty* NewProp_EarlyZPass = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EarlyZPass"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(EarlyZPass, URendererSettings), 0x0000000000004001, Z_Construct_UEnum_Engine_EEarlyZPass());
				UProperty* NewProp_DefaultFeatureAntiAliasing = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultFeatureAntiAliasing"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(DefaultFeatureAntiAliasing, URendererSettings), 0x0000000000004001, Z_Construct_UEnum_Engine_EAntiAliasingMethodUI());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDefaultFeatureLensFlare, URendererSettings, uint8);
				UProperty* NewProp_bDefaultFeatureLensFlare = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bDefaultFeatureLensFlare"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDefaultFeatureLensFlare, URendererSettings), 0x0000000000004001, CPP_BOOL_PROPERTY_BITMASK(bDefaultFeatureLensFlare, URendererSettings), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDefaultFeatureMotionBlur, URendererSettings, uint8);
				UProperty* NewProp_bDefaultFeatureMotionBlur = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bDefaultFeatureMotionBlur"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDefaultFeatureMotionBlur, URendererSettings), 0x0000000000004001, CPP_BOOL_PROPERTY_BITMASK(bDefaultFeatureMotionBlur, URendererSettings), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDefaultFeatureAutoExposure, URendererSettings, uint8);
				UProperty* NewProp_bDefaultFeatureAutoExposure = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bDefaultFeatureAutoExposure"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDefaultFeatureAutoExposure, URendererSettings), 0x0000000000004001, CPP_BOOL_PROPERTY_BITMASK(bDefaultFeatureAutoExposure, URendererSettings), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDefaultFeatureAmbientOcclusionStaticFraction, URendererSettings, uint8);
				UProperty* NewProp_bDefaultFeatureAmbientOcclusionStaticFraction = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bDefaultFeatureAmbientOcclusionStaticFraction"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDefaultFeatureAmbientOcclusionStaticFraction, URendererSettings), 0x0000000000004001, CPP_BOOL_PROPERTY_BITMASK(bDefaultFeatureAmbientOcclusionStaticFraction, URendererSettings), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDefaultFeatureAmbientOcclusion, URendererSettings, uint8);
				UProperty* NewProp_bDefaultFeatureAmbientOcclusion = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bDefaultFeatureAmbientOcclusion"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDefaultFeatureAmbientOcclusion, URendererSettings), 0x0000000000004001, CPP_BOOL_PROPERTY_BITMASK(bDefaultFeatureAmbientOcclusion, URendererSettings), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDefaultFeatureBloom, URendererSettings, uint8);
				UProperty* NewProp_bDefaultFeatureBloom = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bDefaultFeatureBloom"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDefaultFeatureBloom, URendererSettings), 0x0000000000004001, CPP_BOOL_PROPERTY_BITMASK(bDefaultFeatureBloom, URendererSettings), sizeof(uint8), false);
				UProperty* NewProp_CustomDepthStencil = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CustomDepthStencil"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(CustomDepthStencil, URendererSettings), 0x0000000000004001, Z_Construct_UEnum_Engine_ECustomDepthStencil());
				UProperty* NewProp_TranslucentSortAxis = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TranslucentSortAxis"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TranslucentSortAxis, URendererSettings), 0x0000000000004001, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_TranslucentSortPolicy = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TranslucentSortPolicy"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(TranslucentSortPolicy, URendererSettings), 0x0000000000004001, Z_Construct_UEnum_Engine_ETranslucentSortPolicy());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSeparateTranslucency, URendererSettings, uint8);
				UProperty* NewProp_bSeparateTranslucency = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bSeparateTranslucency"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSeparateTranslucency, URendererSettings), 0x0000000000004001, CPP_BOOL_PROPERTY_BITMASK(bSeparateTranslucency, URendererSettings), sizeof(uint8), false);
				UProperty* NewProp_TessellationAdaptivePixelsPerTriangle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TessellationAdaptivePixelsPerTriangle"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(TessellationAdaptivePixelsPerTriangle, URendererSettings), 0x0000000000004001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bGenerateLandscapeGIData, URendererSettings, uint8);
				UProperty* NewProp_bGenerateLandscapeGIData = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bGenerateLandscapeGIData"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bGenerateLandscapeGIData, URendererSettings), 0x0000000000004001, CPP_BOOL_PROPERTY_BITMASK(bGenerateLandscapeGIData, URendererSettings), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bGenerateMeshDistanceFields, URendererSettings, uint8);
				UProperty* NewProp_bGenerateMeshDistanceFields = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bGenerateMeshDistanceFields"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bGenerateMeshDistanceFields, URendererSettings), 0x0000000000004001, CPP_BOOL_PROPERTY_BITMASK(bGenerateMeshDistanceFields, URendererSettings), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseNormalMapsForStaticLighting, URendererSettings, uint8);
				UProperty* NewProp_bUseNormalMapsForStaticLighting = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUseNormalMapsForStaticLighting"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseNormalMapsForStaticLighting, URendererSettings), 0x0000000000004001, CPP_BOOL_PROPERTY_BITMASK(bUseNormalMapsForStaticLighting, URendererSettings), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAllowStaticLighting, URendererSettings, uint8);
				UProperty* NewProp_bAllowStaticLighting = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAllowStaticLighting"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAllowStaticLighting, URendererSettings), 0x0000000000004001, CPP_BOOL_PROPERTY_BITMASK(bAllowStaticLighting, URendererSettings), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseDXT5NormalMaps, URendererSettings, uint8);
				UProperty* NewProp_bUseDXT5NormalMaps = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUseDXT5NormalMaps"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseDXT5NormalMaps, URendererSettings), 0x0000000000004001, CPP_BOOL_PROPERTY_BITMASK(bUseDXT5NormalMaps, URendererSettings), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTextureStreaming, URendererSettings, uint8);
				UProperty* NewProp_bTextureStreaming = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bTextureStreaming"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTextureStreaming, URendererSettings), 0x0000000000004001, CPP_BOOL_PROPERTY_BITMASK(bTextureStreaming, URendererSettings), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bPrecomputedVisibilityWarning, URendererSettings, uint8);
				UProperty* NewProp_bPrecomputedVisibilityWarning = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bPrecomputedVisibilityWarning"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bPrecomputedVisibilityWarning, URendererSettings), 0x0000000000004001, CPP_BOOL_PROPERTY_BITMASK(bPrecomputedVisibilityWarning, URendererSettings), sizeof(uint8), false);
				UProperty* NewProp_MinScreenRadiusForCSMdepth = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MinScreenRadiusForCSMdepth"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MinScreenRadiusForCSMdepth, URendererSettings), 0x0000000000004001);
				UProperty* NewProp_MinScreenRadiusForEarlyZPass = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MinScreenRadiusForEarlyZPass"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MinScreenRadiusForEarlyZPass, URendererSettings), 0x0000000000004001);
				UProperty* NewProp_MinScreenRadiusForLights = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MinScreenRadiusForLights"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MinScreenRadiusForLights, URendererSettings), 0x0000000000004001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOcclusionCulling, URendererSettings, uint8);
				UProperty* NewProp_bOcclusionCulling = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bOcclusionCulling"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOcclusionCulling, URendererSettings), 0x0000000000004001, CPP_BOOL_PROPERTY_BITMASK(bOcclusionCulling, URendererSettings), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bMobileDynamicPointLightsUseStaticBranch, URendererSettings, uint8);
				UProperty* NewProp_bMobileDynamicPointLightsUseStaticBranch = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bMobileDynamicPointLightsUseStaticBranch"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bMobileDynamicPointLightsUseStaticBranch, URendererSettings), 0x0000000000004001, CPP_BOOL_PROPERTY_BITMASK(bMobileDynamicPointLightsUseStaticBranch, URendererSettings), sizeof(uint8), false);
				UProperty* NewProp_MobileNumDynamicPointLights = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MobileNumDynamicPointLights"), RF_Public|RF_Transient|RF_Native) UUInt32Property(CPP_PROPERTY_BASE(MobileNumDynamicPointLights, URendererSettings), 0x0000000000004001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bMobileHDR, URendererSettings, uint8);
				UProperty* NewProp_bMobileHDR = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bMobileHDR"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bMobileHDR, URendererSettings), 0x0000000000004001, CPP_BOOL_PROPERTY_BITMASK(bMobileHDR, URendererSettings), sizeof(uint8), false);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Rendering"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/RendererSettings.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/RendererSettings.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Rendering settings."));
				MetaData->SetValue(NewProp_UIScaleCurve, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/RendererSettings.h"));
				MetaData->SetValue(NewProp_UIScaleRule, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/RendererSettings.h"));
				MetaData->SetValue(NewProp_WireframeCullThreshold, TEXT("Category"), TEXT("Editor"));
				MetaData->SetValue(NewProp_WireframeCullThreshold, TEXT("ConsoleVariable"), TEXT("r.WireframeCullThreshold"));
				MetaData->SetValue(NewProp_WireframeCullThreshold, TEXT("DisplayName"), TEXT("Wireframe Cull Threshold"));
				MetaData->SetValue(NewProp_WireframeCullThreshold, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/RendererSettings.h"));
				MetaData->SetValue(NewProp_WireframeCullThreshold, TEXT("ToolTip"), TEXT("Screen radius at which wireframe objects are culled. Larger values can improve performance when viewing a scene in wireframe."));
				MetaData->SetValue(NewProp_bBasePassOutputsVelocity, TEXT("Category"), TEXT("Optimizations"));
				MetaData->SetValue(NewProp_bBasePassOutputsVelocity, TEXT("ConfigRestartRequired"), TEXT("TRUE"));
				MetaData->SetValue(NewProp_bBasePassOutputsVelocity, TEXT("ConsoleVariable"), TEXT("r.BasePassOutputsVelocity"));
				MetaData->SetValue(NewProp_bBasePassOutputsVelocity, TEXT("DisplayName"), TEXT("Accurate velocities from Vertex Deformation"));
				MetaData->SetValue(NewProp_bBasePassOutputsVelocity, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/RendererSettings.h"));
				MetaData->SetValue(NewProp_bBasePassOutputsVelocity, TEXT("ToolTip"), TEXT("Enables materials with time-based World Position Offset and/or World Displacement to output accurate velocities. This incurs a performance cost. If this is disabled, those materials will not output velocities. Changing this setting requires restarting the editor."));
				MetaData->SetValue(NewProp_ClearSceneMethod, TEXT("Category"), TEXT("Optimizations"));
				MetaData->SetValue(NewProp_ClearSceneMethod, TEXT("ConsoleVariable"), TEXT("r.ClearSceneMethod"));
				MetaData->SetValue(NewProp_ClearSceneMethod, TEXT("DisplayName"), TEXT("Clear Scene"));
				MetaData->SetValue(NewProp_ClearSceneMethod, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/RendererSettings.h"));
				MetaData->SetValue(NewProp_ClearSceneMethod, TEXT("ToolTip"), TEXT("Select how the g-buffer is cleared in game mode (only affects deferred shading)."));
				MetaData->SetValue(NewProp_bDBuffer, TEXT("Category"), TEXT("Lighting"));
				MetaData->SetValue(NewProp_bDBuffer, TEXT("ConsoleVariable"), TEXT("r.DBuffer"));
				MetaData->SetValue(NewProp_bDBuffer, TEXT("DisplayName"), TEXT("DBuffer Decals"));
				MetaData->SetValue(NewProp_bDBuffer, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/RendererSettings.h"));
				MetaData->SetValue(NewProp_bDBuffer, TEXT("ToolTip"), TEXT("Experimental decal feature (see r.DBuffer, ideally combined with 'Movables in early Z-pass' and 'Early Z-pass')"));
				MetaData->SetValue(NewProp_bEarlyZPassMovable, TEXT("Category"), TEXT("Optimizations"));
				MetaData->SetValue(NewProp_bEarlyZPassMovable, TEXT("ConsoleVariable"), TEXT("r.EarlyZPassMovable"));
				MetaData->SetValue(NewProp_bEarlyZPassMovable, TEXT("DisplayName"), TEXT("Movables in early Z-pass"));
				MetaData->SetValue(NewProp_bEarlyZPassMovable, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/RendererSettings.h"));
				MetaData->SetValue(NewProp_bEarlyZPassMovable, TEXT("ToolTip"), TEXT("Whether to render movable objects in the early Z pass. Need to reload the level!"));
				MetaData->SetValue(NewProp_EarlyZPass, TEXT("Category"), TEXT("Optimizations"));
				MetaData->SetValue(NewProp_EarlyZPass, TEXT("ConsoleVariable"), TEXT("r.EarlyZPass"));
				MetaData->SetValue(NewProp_EarlyZPass, TEXT("DisplayName"), TEXT("Early Z-pass"));
				MetaData->SetValue(NewProp_EarlyZPass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/RendererSettings.h"));
				MetaData->SetValue(NewProp_EarlyZPass, TEXT("ToolTip"), TEXT("Whether to use a depth only pass to initialize Z culling for the base pass. Need to reload the level!"));
				MetaData->SetValue(NewProp_DefaultFeatureAntiAliasing, TEXT("Category"), TEXT("DefaultPostprocessingSettings"));
				MetaData->SetValue(NewProp_DefaultFeatureAntiAliasing, TEXT("ConsoleVariable"), TEXT("r.DefaultFeature.AntiAliasing"));
				MetaData->SetValue(NewProp_DefaultFeatureAntiAliasing, TEXT("DisplayName"), TEXT("Anti-Aliasing Method"));
				MetaData->SetValue(NewProp_DefaultFeatureAntiAliasing, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/RendererSettings.h"));
				MetaData->SetValue(NewProp_DefaultFeatureAntiAliasing, TEXT("ToolTip"), TEXT("What anti-aliasing mode is used by default (postprocess volume/camera/game setting can still override and enable or disable it independently)"));
				MetaData->SetValue(NewProp_bDefaultFeatureLensFlare, TEXT("Category"), TEXT("DefaultPostprocessingSettings"));
				MetaData->SetValue(NewProp_bDefaultFeatureLensFlare, TEXT("ConsoleVariable"), TEXT("r.DefaultFeature.LensFlare"));
				MetaData->SetValue(NewProp_bDefaultFeatureLensFlare, TEXT("DisplayName"), TEXT("Lens Flares (Image based)"));
				MetaData->SetValue(NewProp_bDefaultFeatureLensFlare, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/RendererSettings.h"));
				MetaData->SetValue(NewProp_bDefaultFeatureLensFlare, TEXT("ToolTip"), TEXT("Whether the default for LensFlare is enabled or not (postprocess volume/camera/game setting can still override and enable or disable it independently)"));
				MetaData->SetValue(NewProp_bDefaultFeatureMotionBlur, TEXT("Category"), TEXT("DefaultPostprocessingSettings"));
				MetaData->SetValue(NewProp_bDefaultFeatureMotionBlur, TEXT("ConsoleVariable"), TEXT("r.DefaultFeature.MotionBlur"));
				MetaData->SetValue(NewProp_bDefaultFeatureMotionBlur, TEXT("DisplayName"), TEXT("Motion Blur"));
				MetaData->SetValue(NewProp_bDefaultFeatureMotionBlur, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/RendererSettings.h"));
				MetaData->SetValue(NewProp_bDefaultFeatureMotionBlur, TEXT("ToolTip"), TEXT("Whether the default for MotionBlur is enabled or not (postprocess volume/camera/game setting can still override and enable or disable it independently)"));
				MetaData->SetValue(NewProp_bDefaultFeatureAutoExposure, TEXT("Category"), TEXT("DefaultPostprocessingSettings"));
				MetaData->SetValue(NewProp_bDefaultFeatureAutoExposure, TEXT("ConsoleVariable"), TEXT("r.DefaultFeature.AutoExposure"));
				MetaData->SetValue(NewProp_bDefaultFeatureAutoExposure, TEXT("DisplayName"), TEXT("Auto Exposure"));
				MetaData->SetValue(NewProp_bDefaultFeatureAutoExposure, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/RendererSettings.h"));
				MetaData->SetValue(NewProp_bDefaultFeatureAutoExposure, TEXT("ToolTip"), TEXT("Whether the default for AutoExposure is enabled or not (postprocess volume/camera/game setting can still override and enable or disable it independently)"));
				MetaData->SetValue(NewProp_bDefaultFeatureAmbientOcclusionStaticFraction, TEXT("Category"), TEXT("DefaultPostprocessingSettings"));
				MetaData->SetValue(NewProp_bDefaultFeatureAmbientOcclusionStaticFraction, TEXT("ConsoleVariable"), TEXT("r.DefaultFeature.AmbientOcclusionStaticFraction"));
				MetaData->SetValue(NewProp_bDefaultFeatureAmbientOcclusionStaticFraction, TEXT("DisplayName"), TEXT("Ambient Occlusion Static Fraction (AO for baked lighting)"));
				MetaData->SetValue(NewProp_bDefaultFeatureAmbientOcclusionStaticFraction, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/RendererSettings.h"));
				MetaData->SetValue(NewProp_bDefaultFeatureAmbientOcclusionStaticFraction, TEXT("ToolTip"), TEXT("Whether the default for AmbientOcclusionStaticFraction is enabled or not (only useful for baked lighting and if AO is on, allows to have SSAO affect baked lighting as well, costs performance, postprocess volume/camera/game setting can still override and enable or disable it independently)"));
				MetaData->SetValue(NewProp_bDefaultFeatureAmbientOcclusion, TEXT("Category"), TEXT("DefaultPostprocessingSettings"));
				MetaData->SetValue(NewProp_bDefaultFeatureAmbientOcclusion, TEXT("ConsoleVariable"), TEXT("r.DefaultFeature.AmbientOcclusion"));
				MetaData->SetValue(NewProp_bDefaultFeatureAmbientOcclusion, TEXT("DisplayName"), TEXT("Ambient Occlusion"));
				MetaData->SetValue(NewProp_bDefaultFeatureAmbientOcclusion, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/RendererSettings.h"));
				MetaData->SetValue(NewProp_bDefaultFeatureAmbientOcclusion, TEXT("ToolTip"), TEXT("Whether the default for AmbientOcclusion is enabled or not (postprocess volume/camera/game setting can still override and enable or disable it independently)"));
				MetaData->SetValue(NewProp_bDefaultFeatureBloom, TEXT("Category"), TEXT("DefaultPostprocessingSettings"));
				MetaData->SetValue(NewProp_bDefaultFeatureBloom, TEXT("ConsoleVariable"), TEXT("r.DefaultFeature.Bloom"));
				MetaData->SetValue(NewProp_bDefaultFeatureBloom, TEXT("DisplayName"), TEXT("Bloom"));
				MetaData->SetValue(NewProp_bDefaultFeatureBloom, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/RendererSettings.h"));
				MetaData->SetValue(NewProp_bDefaultFeatureBloom, TEXT("ToolTip"), TEXT("Whether the default for Bloom is enabled or not (postprocess volume/camera/game setting can still override and enable or disable it independently)"));
				MetaData->SetValue(NewProp_CustomDepthStencil, TEXT("Category"), TEXT("Postprocessing"));
				MetaData->SetValue(NewProp_CustomDepthStencil, TEXT("ConsoleVariable"), TEXT("r.CustomDepth"));
				MetaData->SetValue(NewProp_CustomDepthStencil, TEXT("DisplayName"), TEXT("Custom Depth-Stencil Pass"));
				MetaData->SetValue(NewProp_CustomDepthStencil, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/RendererSettings.h"));
				MetaData->SetValue(NewProp_CustomDepthStencil, TEXT("ToolTip"), TEXT("Whether the custom depth pass for tagging primitives for postprocessing passes is enabled. Enabling it on demand can save memory but may cause a hitch the first time the feature is used."));
				MetaData->SetValue(NewProp_TranslucentSortAxis, TEXT("Category"), TEXT("Translucency"));
				MetaData->SetValue(NewProp_TranslucentSortAxis, TEXT("DisplayName"), TEXT("Translucent Sort Axis"));
				MetaData->SetValue(NewProp_TranslucentSortAxis, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/RendererSettings.h"));
				MetaData->SetValue(NewProp_TranslucentSortAxis, TEXT("ToolTip"), TEXT("The axis that sorting will occur along when Translucent Sort Policy is set to SortAlongAxis."));
				MetaData->SetValue(NewProp_TranslucentSortPolicy, TEXT("Category"), TEXT("Translucency"));
				MetaData->SetValue(NewProp_TranslucentSortPolicy, TEXT("ConsoleVariable"), TEXT("r.TranslucentSortPolicy"));
				MetaData->SetValue(NewProp_TranslucentSortPolicy, TEXT("DisplayName"), TEXT("Translucent Sort Policy"));
				MetaData->SetValue(NewProp_TranslucentSortPolicy, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/RendererSettings.h"));
				MetaData->SetValue(NewProp_TranslucentSortPolicy, TEXT("ToolTip"), TEXT("The sort mode for translucent primitives, affecting how they are ordered and how they change order as the camera moves."));
				MetaData->SetValue(NewProp_bSeparateTranslucency, TEXT("Category"), TEXT("Postprocessing"));
				MetaData->SetValue(NewProp_bSeparateTranslucency, TEXT("ConsoleVariable"), TEXT("r.SeparateTranslucency"));
				MetaData->SetValue(NewProp_bSeparateTranslucency, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/RendererSettings.h"));
				MetaData->SetValue(NewProp_bSeparateTranslucency, TEXT("ToolTip"), TEXT("Allow translucency to be rendered to a separate render targeted and composited after depth of field. Prevents translucency from appearing out of focus."));
				MetaData->SetValue(NewProp_TessellationAdaptivePixelsPerTriangle, TEXT("Category"), TEXT("Tessellation"));
				MetaData->SetValue(NewProp_TessellationAdaptivePixelsPerTriangle, TEXT("ConsoleVariable"), TEXT("r.TessellationAdaptivePixelsPerTriangle"));
				MetaData->SetValue(NewProp_TessellationAdaptivePixelsPerTriangle, TEXT("DisplayName"), TEXT("Adaptive pixels per triangle"));
				MetaData->SetValue(NewProp_TessellationAdaptivePixelsPerTriangle, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/RendererSettings.h"));
				MetaData->SetValue(NewProp_TessellationAdaptivePixelsPerTriangle, TEXT("ToolTip"), TEXT("When adaptive tessellation is enabled it will try to tessellate a mesh so that each triangle contains the specified number of pixels. The tessellation multiplier specified in the material can increase or decrease the amount of tessellation."));
				MetaData->SetValue(NewProp_bGenerateLandscapeGIData, TEXT("Category"), TEXT("Lighting"));
				MetaData->SetValue(NewProp_bGenerateLandscapeGIData, TEXT("ConsoleVariable"), TEXT("r.GenerateLandscapeGIData"));
				MetaData->SetValue(NewProp_bGenerateLandscapeGIData, TEXT("DisplayName"), TEXT("Generate Landscape Real-time GI Data"));
				MetaData->SetValue(NewProp_bGenerateLandscapeGIData, TEXT("EditCondition"), TEXT("bGenerateMeshDistanceFields"));
				MetaData->SetValue(NewProp_bGenerateLandscapeGIData, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/RendererSettings.h"));
				MetaData->SetValue(NewProp_bGenerateLandscapeGIData, TEXT("ToolTip"), TEXT("Whether to generate a low-resolution base color texture for landscapes for rendering real-time global illumination.  This feature requires GenerateMeshDistanceFields is also enabled, and will increase mesh build times and memory usage."));
				MetaData->SetValue(NewProp_bGenerateMeshDistanceFields, TEXT("Category"), TEXT("Lighting"));
				MetaData->SetValue(NewProp_bGenerateMeshDistanceFields, TEXT("ConfigRestartRequired"), TEXT("TRUE"));
				MetaData->SetValue(NewProp_bGenerateMeshDistanceFields, TEXT("ConsoleVariable"), TEXT("r.GenerateMeshDistanceFields"));
				MetaData->SetValue(NewProp_bGenerateMeshDistanceFields, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/RendererSettings.h"));
				MetaData->SetValue(NewProp_bGenerateMeshDistanceFields, TEXT("ToolTip"), TEXT("Whether to build distance fields of static meshes, needed for distance field AO, which is used to implement Movable SkyLight shadows, and ray traced distance field shadows on directional lights.  Enabling will increase mesh build times and memory usage.  Changing this setting requires restarting the editor."));
				MetaData->SetValue(NewProp_bUseNormalMapsForStaticLighting, TEXT("Category"), TEXT("Lighting"));
				MetaData->SetValue(NewProp_bUseNormalMapsForStaticLighting, TEXT("ConsoleVariable"), TEXT("r.NormalMapsForStaticLighting"));
				MetaData->SetValue(NewProp_bUseNormalMapsForStaticLighting, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/RendererSettings.h"));
				MetaData->SetValue(NewProp_bUseNormalMapsForStaticLighting, TEXT("ToolTip"), TEXT("Whether to allow any static lighting to use normal maps for lighting computations."));
				MetaData->SetValue(NewProp_bAllowStaticLighting, TEXT("Category"), TEXT("Lighting"));
				MetaData->SetValue(NewProp_bAllowStaticLighting, TEXT("ConfigRestartRequired"), TEXT("TRUE"));
				MetaData->SetValue(NewProp_bAllowStaticLighting, TEXT("ConsoleVariable"), TEXT("r.AllowStaticLighting"));
				MetaData->SetValue(NewProp_bAllowStaticLighting, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/RendererSettings.h"));
				MetaData->SetValue(NewProp_bAllowStaticLighting, TEXT("ToolTip"), TEXT("Whether to allow any static lighting to be generated and used, like lightmaps and shadowmaps. Games that only use dynamic lighting should set this to 0 to save some static lighting overhead. Changing this setting requires restarting the editor."));
				MetaData->SetValue(NewProp_bUseDXT5NormalMaps, TEXT("Category"), TEXT("Textures"));
				MetaData->SetValue(NewProp_bUseDXT5NormalMaps, TEXT("ConfigRestartRequired"), TEXT("TRUE"));
				MetaData->SetValue(NewProp_bUseDXT5NormalMaps, TEXT("ConsoleVariable"), TEXT("Compat.UseDXT5NormalMaps"));
				MetaData->SetValue(NewProp_bUseDXT5NormalMaps, TEXT("DisplayName"), TEXT("Use DXT5 Normal Maps"));
				MetaData->SetValue(NewProp_bUseDXT5NormalMaps, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/RendererSettings.h"));
				MetaData->SetValue(NewProp_bUseDXT5NormalMaps, TEXT("ToolTip"), TEXT("Whether to use DXT5 for normal maps, otherwise BC5 will be used, which is not supported on all hardware. Changing this setting requires restarting the editor."));
				MetaData->SetValue(NewProp_bTextureStreaming, TEXT("Category"), TEXT("Textures"));
				MetaData->SetValue(NewProp_bTextureStreaming, TEXT("ConsoleVariable"), TEXT("r.TextureStreaming"));
				MetaData->SetValue(NewProp_bTextureStreaming, TEXT("DisplayName"), TEXT("Texture Streaming"));
				MetaData->SetValue(NewProp_bTextureStreaming, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/RendererSettings.h"));
				MetaData->SetValue(NewProp_bTextureStreaming, TEXT("ToolTip"), TEXT("When enabled textures will stream in based on what is visible on screen."));
				MetaData->SetValue(NewProp_bPrecomputedVisibilityWarning, TEXT("Category"), TEXT("Culling"));
				MetaData->SetValue(NewProp_bPrecomputedVisibilityWarning, TEXT("ConsoleVariable"), TEXT("r.PrecomputedVisibilityWarning"));
				MetaData->SetValue(NewProp_bPrecomputedVisibilityWarning, TEXT("DisplayName"), TEXT("Warn about no precomputed visibility"));
				MetaData->SetValue(NewProp_bPrecomputedVisibilityWarning, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/RendererSettings.h"));
				MetaData->SetValue(NewProp_bPrecomputedVisibilityWarning, TEXT("ToolTip"), TEXT("Displays a warning when no precomputed visibility data is available for the current camera location. This can be helpful if you are making a game that relies on precomputed visibility, e.g. a first person mobile game."));
				MetaData->SetValue(NewProp_MinScreenRadiusForCSMdepth, TEXT("Category"), TEXT("Culling"));
				MetaData->SetValue(NewProp_MinScreenRadiusForCSMdepth, TEXT("ConsoleVariable"), TEXT("r.MinScreenRadiusForDepthPrepass"));
				MetaData->SetValue(NewProp_MinScreenRadiusForCSMdepth, TEXT("DisplayName"), TEXT("Min Screen Radius for Cascaded Shadow Maps"));
				MetaData->SetValue(NewProp_MinScreenRadiusForCSMdepth, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/RendererSettings.h"));
				MetaData->SetValue(NewProp_MinScreenRadiusForCSMdepth, TEXT("ToolTip"), TEXT("Screen radius at which objects are culled for cascaded shadow map depth passes. Larger values can improve performance but can cause artifacts as objects stop casting shadows."));
				MetaData->SetValue(NewProp_MinScreenRadiusForEarlyZPass, TEXT("Category"), TEXT("Culling"));
				MetaData->SetValue(NewProp_MinScreenRadiusForEarlyZPass, TEXT("ConsoleVariable"), TEXT("r.MinScreenRadiusForDepthPrepass"));
				MetaData->SetValue(NewProp_MinScreenRadiusForEarlyZPass, TEXT("DisplayName"), TEXT("Min Screen Radius for Early Z Pass"));
				MetaData->SetValue(NewProp_MinScreenRadiusForEarlyZPass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/RendererSettings.h"));
				MetaData->SetValue(NewProp_MinScreenRadiusForEarlyZPass, TEXT("ToolTip"), TEXT("Screen radius at which objects are culled for the early Z pass. Larger values can improve performance but very large values can degrade performance if large occluders are not rendered."));
				MetaData->SetValue(NewProp_MinScreenRadiusForLights, TEXT("Category"), TEXT("Culling"));
				MetaData->SetValue(NewProp_MinScreenRadiusForLights, TEXT("ConsoleVariable"), TEXT("r.MinScreenRadiusForLights"));
				MetaData->SetValue(NewProp_MinScreenRadiusForLights, TEXT("DisplayName"), TEXT("Min Screen Radius for Lights"));
				MetaData->SetValue(NewProp_MinScreenRadiusForLights, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/RendererSettings.h"));
				MetaData->SetValue(NewProp_MinScreenRadiusForLights, TEXT("ToolTip"), TEXT("Screen radius at which lights are culled. Larger values can improve performance but causes lights to pop off when they affect a small area of the screen."));
				MetaData->SetValue(NewProp_bOcclusionCulling, TEXT("Category"), TEXT("Culling"));
				MetaData->SetValue(NewProp_bOcclusionCulling, TEXT("ConsoleVariable"), TEXT("r.AllowOcclusionQueries"));
				MetaData->SetValue(NewProp_bOcclusionCulling, TEXT("DisplayName"), TEXT("Occlusion Culling"));
				MetaData->SetValue(NewProp_bOcclusionCulling, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/RendererSettings.h"));
				MetaData->SetValue(NewProp_bOcclusionCulling, TEXT("ToolTip"), TEXT("Allows occluded meshes to be culled and no rendered."));
				MetaData->SetValue(NewProp_bMobileDynamicPointLightsUseStaticBranch, TEXT("Category"), TEXT("Mobile"));
				MetaData->SetValue(NewProp_bMobileDynamicPointLightsUseStaticBranch, TEXT("ConfigRestartRequired"), TEXT("TRUE"));
				MetaData->SetValue(NewProp_bMobileDynamicPointLightsUseStaticBranch, TEXT("ConsoleVariable"), TEXT("r.MobileDynamicPointLightsUseStaticBranch"));
				MetaData->SetValue(NewProp_bMobileDynamicPointLightsUseStaticBranch, TEXT("DisplayName"), TEXT("Use Shared Dynamic Point Light Shaders"));
				MetaData->SetValue(NewProp_bMobileDynamicPointLightsUseStaticBranch, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/RendererSettings.h"));
				MetaData->SetValue(NewProp_bMobileDynamicPointLightsUseStaticBranch, TEXT("ToolTip"), TEXT("If this setting is enabled, the same shader will be used for any number of dynamic point lights (up to the maximum specified above) hitting a surface. This is slightly slower but reduces the number of shaders generated. Changing this setting requires restarting the editor."));
				MetaData->SetValue(NewProp_MobileNumDynamicPointLights, TEXT("Category"), TEXT("Mobile"));
				MetaData->SetValue(NewProp_MobileNumDynamicPointLights, TEXT("ClampMax"), TEXT("4"));
				MetaData->SetValue(NewProp_MobileNumDynamicPointLights, TEXT("ConfigRestartRequired"), TEXT("TRUE"));
				MetaData->SetValue(NewProp_MobileNumDynamicPointLights, TEXT("ConsoleVariable"), TEXT("r.MobileNumDynamicPointLights"));
				MetaData->SetValue(NewProp_MobileNumDynamicPointLights, TEXT("DisplayName"), TEXT("Max Dynamic Point Lights"));
				MetaData->SetValue(NewProp_MobileNumDynamicPointLights, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/RendererSettings.h"));
				MetaData->SetValue(NewProp_MobileNumDynamicPointLights, TEXT("ToolTip"), TEXT("The number of dynamic point lights to support on mobile devices. Setting this to 0 for games which do not require dynamic point lights will reduce the number of shaders generated. Changing this setting requires restarting the editor."));
				MetaData->SetValue(NewProp_bMobileHDR, TEXT("Category"), TEXT("Mobile"));
				MetaData->SetValue(NewProp_bMobileHDR, TEXT("ConsoleVariable"), TEXT("r.MobileHDR"));
				MetaData->SetValue(NewProp_bMobileHDR, TEXT("DisplayName"), TEXT("Mobile HDR"));
				MetaData->SetValue(NewProp_bMobileHDR, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/RendererSettings.h"));
				MetaData->SetValue(NewProp_bMobileHDR, TEXT("ToolTip"), TEXT("If true, mobile renders in full HDR. Disable this setting for games that do not require lighting features for better performance on slow devices."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_URendererSettings(Z_Construct_UClass_URendererSettings, TEXT("URendererSettings"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(URendererSettings);
	UEnum* Z_Construct_UEnum_Engine_ETextureSamplerFilter()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_ETextureSamplerFilter_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ETextureSamplerFilter"), 0, Get_Z_Construct_UEnum_Engine_ETextureSamplerFilter_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ETextureSamplerFilter"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ETextureSamplerFilter::Point")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ETextureSamplerFilter::Bilinear")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ETextureSamplerFilter::Trilinear")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ETextureSamplerFilter::AnisotropicPoint")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ETextureSamplerFilter::AnisotropicLinear")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ETextureSamplerFilter::ETextureSamplerFilter_MAX")), 5));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TextureDefines.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Must match enum ESamplerFilter in RHIDefinitions.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_ETextureSamplerFilter_CRC() { return 225973242U; }
	UEnum* Z_Construct_UEnum_Engine_ETexturePowerOfTwoSetting()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_ETexturePowerOfTwoSetting_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ETexturePowerOfTwoSetting"), 0, Get_Z_Construct_UEnum_Engine_ETexturePowerOfTwoSetting_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ETexturePowerOfTwoSetting"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ETexturePowerOfTwoSetting::None")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ETexturePowerOfTwoSetting::PadToPowerOfTwo")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ETexturePowerOfTwoSetting::PadToSquarePowerOfTwo")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ETexturePowerOfTwoSetting::ETexturePowerOfTwoSetting_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TextureDefines.h"));
			MetaData->SetValue(ReturnEnum, TEXT("None.ToolTip"), TEXT("Do not modify the texture dimensions."));
			MetaData->SetValue(ReturnEnum, TEXT("PadToPowerOfTwo.ToolTip"), TEXT("Pad the texture to the nearest power of two size."));
			MetaData->SetValue(ReturnEnum, TEXT("PadToSquarePowerOfTwo.ToolTip"), TEXT("Pad the texture to the nearest square power of two size."));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Options for texture padding mode."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_ETexturePowerOfTwoSetting_CRC() { return 2301273221U; }
	UEnum* Z_Construct_UEnum_Engine_TextureMipGenSettings()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_TextureMipGenSettings_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("TextureMipGenSettings"), 0, Get_Z_Construct_UEnum_Engine_TextureMipGenSettings_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TextureMipGenSettings"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TMGS_FromTextureGroup")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TMGS_SimpleAverage")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TMGS_Sharpen0")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TMGS_Sharpen1")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TMGS_Sharpen2")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TMGS_Sharpen3")), 5));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TMGS_Sharpen4")), 6));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TMGS_Sharpen5")), 7));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TMGS_Sharpen6")), 8));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TMGS_Sharpen7")), 9));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TMGS_Sharpen8")), 10));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TMGS_Sharpen9")), 11));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TMGS_Sharpen10")), 12));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TMGS_NoMipmaps")), 13));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TMGS_LeaveExistingMips")), 14));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TMGS_Blur1")), 15));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TMGS_Blur2")), 16));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TMGS_Blur3")), 17));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TMGS_Blur4")), 18));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TMGS_Blur5")), 19));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TMGS_MAX")), 20));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TextureDefines.h"));
			MetaData->SetValue(ReturnEnum, TEXT("TMGS_Blur1.DisplayName"), TEXT("Blur1"));
			MetaData->SetValue(ReturnEnum, TEXT("TMGS_Blur1.ToolTip"), TEXT("Blur further (useful for image based reflections)."));
			MetaData->SetValue(ReturnEnum, TEXT("TMGS_Blur2.DisplayName"), TEXT("Blur2"));
			MetaData->SetValue(ReturnEnum, TEXT("TMGS_Blur3.DisplayName"), TEXT("Blur3"));
			MetaData->SetValue(ReturnEnum, TEXT("TMGS_Blur4.DisplayName"), TEXT("Blur4"));
			MetaData->SetValue(ReturnEnum, TEXT("TMGS_Blur5.DisplayName"), TEXT("Blur5"));
			MetaData->SetValue(ReturnEnum, TEXT("TMGS_FromTextureGroup.DisplayName"), TEXT("FromTextureGroup"));
			MetaData->SetValue(ReturnEnum, TEXT("TMGS_FromTextureGroup.ToolTip"), TEXT("Default for the \"texture\"."));
			MetaData->SetValue(ReturnEnum, TEXT("TMGS_LeaveExistingMips.DisplayName"), TEXT("LeaveExistingMips"));
			MetaData->SetValue(ReturnEnum, TEXT("TMGS_LeaveExistingMips.ToolTip"), TEXT("Do not touch existing mip chain as it contains generated data."));
			MetaData->SetValue(ReturnEnum, TEXT("TMGS_NoMipmaps.DisplayName"), TEXT("NoMipmaps"));
			MetaData->SetValue(ReturnEnum, TEXT("TMGS_Sharpen0.DisplayName"), TEXT("Sharpen0"));
			MetaData->SetValue(ReturnEnum, TEXT("TMGS_Sharpen0.ToolTip"), TEXT("8x8 with sharpening: 0=no sharpening but better quality which is softer, 1=little, 5=medium, 10=extreme."));
			MetaData->SetValue(ReturnEnum, TEXT("TMGS_Sharpen1.DisplayName"), TEXT("Sharpen1"));
			MetaData->SetValue(ReturnEnum, TEXT("TMGS_Sharpen1.ToolTip"), TEXT("8x8 with sharpening: 0=no sharpening but better quality which is softer, 1=little, 5=medium, 10=extreme."));
			MetaData->SetValue(ReturnEnum, TEXT("TMGS_Sharpen10.DisplayName"), TEXT("Sharpen10"));
			MetaData->SetValue(ReturnEnum, TEXT("TMGS_Sharpen10.ToolTip"), TEXT("8x8 with sharpening: 0=no sharpening but better quality which is softer, 1=little, 5=medium, 10=extreme."));
			MetaData->SetValue(ReturnEnum, TEXT("TMGS_Sharpen2.DisplayName"), TEXT("Sharpen2"));
			MetaData->SetValue(ReturnEnum, TEXT("TMGS_Sharpen2.ToolTip"), TEXT("8x8 with sharpening: 0=no sharpening but better quality which is softer, 1=little, 5=medium, 10=extreme."));
			MetaData->SetValue(ReturnEnum, TEXT("TMGS_Sharpen3.DisplayName"), TEXT("Sharpen3"));
			MetaData->SetValue(ReturnEnum, TEXT("TMGS_Sharpen3.ToolTip"), TEXT("8x8 with sharpening: 0=no sharpening but better quality which is softer, 1=little, 5=medium, 10=extreme."));
			MetaData->SetValue(ReturnEnum, TEXT("TMGS_Sharpen4.DisplayName"), TEXT("Sharpen4"));
			MetaData->SetValue(ReturnEnum, TEXT("TMGS_Sharpen4.ToolTip"), TEXT("8x8 with sharpening: 0=no sharpening but better quality which is softer, 1=little, 5=medium, 10=extreme."));
			MetaData->SetValue(ReturnEnum, TEXT("TMGS_Sharpen5.DisplayName"), TEXT("Sharpen5"));
			MetaData->SetValue(ReturnEnum, TEXT("TMGS_Sharpen5.ToolTip"), TEXT("8x8 with sharpening: 0=no sharpening but better quality which is softer, 1=little, 5=medium, 10=extreme."));
			MetaData->SetValue(ReturnEnum, TEXT("TMGS_Sharpen6.DisplayName"), TEXT("Sharpen6"));
			MetaData->SetValue(ReturnEnum, TEXT("TMGS_Sharpen6.ToolTip"), TEXT("8x8 with sharpening: 0=no sharpening but better quality which is softer, 1=little, 5=medium, 10=extreme."));
			MetaData->SetValue(ReturnEnum, TEXT("TMGS_Sharpen7.DisplayName"), TEXT("Sharpen7"));
			MetaData->SetValue(ReturnEnum, TEXT("TMGS_Sharpen7.ToolTip"), TEXT("8x8 with sharpening: 0=no sharpening but better quality which is softer, 1=little, 5=medium, 10=extreme."));
			MetaData->SetValue(ReturnEnum, TEXT("TMGS_Sharpen8.DisplayName"), TEXT("Sharpen8"));
			MetaData->SetValue(ReturnEnum, TEXT("TMGS_Sharpen8.ToolTip"), TEXT("8x8 with sharpening: 0=no sharpening but better quality which is softer, 1=little, 5=medium, 10=extreme."));
			MetaData->SetValue(ReturnEnum, TEXT("TMGS_Sharpen9.DisplayName"), TEXT("Sharpen9"));
			MetaData->SetValue(ReturnEnum, TEXT("TMGS_Sharpen9.ToolTip"), TEXT("8x8 with sharpening: 0=no sharpening but better quality which is softer, 1=little, 5=medium, 10=extreme."));
			MetaData->SetValue(ReturnEnum, TEXT("TMGS_SimpleAverage.DisplayName"), TEXT("SimpleAverage"));
			MetaData->SetValue(ReturnEnum, TEXT("TMGS_SimpleAverage.ToolTip"), TEXT("2x2 average, default for the \"texture group\"."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_TextureMipGenSettings_CRC() { return 3146506112U; }
	UEnum* Z_Construct_UEnum_Engine_TextureGroup()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_TextureGroup_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("TextureGroup"), 0, Get_Z_Construct_UEnum_Engine_TextureGroup_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TextureGroup"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TEXTUREGROUP_World")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TEXTUREGROUP_WorldNormalMap")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TEXTUREGROUP_WorldSpecular")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TEXTUREGROUP_Character")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TEXTUREGROUP_CharacterNormalMap")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TEXTUREGROUP_CharacterSpecular")), 5));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TEXTUREGROUP_Weapon")), 6));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TEXTUREGROUP_WeaponNormalMap")), 7));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TEXTUREGROUP_WeaponSpecular")), 8));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TEXTUREGROUP_Vehicle")), 9));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TEXTUREGROUP_VehicleNormalMap")), 10));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TEXTUREGROUP_VehicleSpecular")), 11));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TEXTUREGROUP_Cinematic")), 12));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TEXTUREGROUP_Effects")), 13));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TEXTUREGROUP_EffectsNotFiltered")), 14));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TEXTUREGROUP_Skybox")), 15));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TEXTUREGROUP_UI")), 16));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TEXTUREGROUP_Lightmap")), 17));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TEXTUREGROUP_RenderTarget")), 18));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TEXTUREGROUP_MobileFlattened")), 19));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TEXTUREGROUP_ProcBuilding_Face")), 20));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TEXTUREGROUP_ProcBuilding_LightMap")), 21));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TEXTUREGROUP_Shadowmap")), 22));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TEXTUREGROUP_ColorLookupTable")), 23));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TEXTUREGROUP_Terrain_Heightmap")), 24));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TEXTUREGROUP_Terrain_Weightmap")), 25));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TEXTUREGROUP_Bokeh")), 26));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TEXTUREGROUP_IESLightProfile")), 27));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TEXTUREGROUP_Pixels2D")), 28));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TEXTUREGROUP_MAX")), 29));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TextureDefines.h"));
			MetaData->SetValue(ReturnEnum, TEXT("TEXTUREGROUP_Bokeh.DisplayName"), TEXT("Bokeh"));
			MetaData->SetValue(ReturnEnum, TEXT("TEXTUREGROUP_Bokeh.ToolTip"), TEXT("Using this TextureGroup triggers special mip map generation code only useful for the BokehDOF post process."));
			MetaData->SetValue(ReturnEnum, TEXT("TEXTUREGROUP_Character.DisplayName"), TEXT("Character"));
			MetaData->SetValue(ReturnEnum, TEXT("TEXTUREGROUP_CharacterNormalMap.DisplayName"), TEXT("CharacterNormalMap"));
			MetaData->SetValue(ReturnEnum, TEXT("TEXTUREGROUP_CharacterSpecular.DisplayName"), TEXT("CharacterSpecular"));
			MetaData->SetValue(ReturnEnum, TEXT("TEXTUREGROUP_Cinematic.DisplayName"), TEXT("Cinematic"));
			MetaData->SetValue(ReturnEnum, TEXT("TEXTUREGROUP_ColorLookupTable.DisplayName"), TEXT("ColorLookupTable"));
			MetaData->SetValue(ReturnEnum, TEXT("TEXTUREGROUP_ColorLookupTable.ToolTip"), TEXT("No compression, no mips."));
			MetaData->SetValue(ReturnEnum, TEXT("TEXTUREGROUP_Effects.DisplayName"), TEXT("Effects"));
			MetaData->SetValue(ReturnEnum, TEXT("TEXTUREGROUP_EffectsNotFiltered.DisplayName"), TEXT("EffectsNotFiltered"));
			MetaData->SetValue(ReturnEnum, TEXT("TEXTUREGROUP_IESLightProfile.DisplayName"), TEXT("IESLightProfile"));
			MetaData->SetValue(ReturnEnum, TEXT("TEXTUREGROUP_IESLightProfile.ToolTip"), TEXT("No compression, created on import of a .IES file."));
			MetaData->SetValue(ReturnEnum, TEXT("TEXTUREGROUP_Lightmap.DisplayName"), TEXT("Lightmap"));
			MetaData->SetValue(ReturnEnum, TEXT("TEXTUREGROUP_MobileFlattened.DisplayName"), TEXT("MobileFlattened"));
			MetaData->SetValue(ReturnEnum, TEXT("TEXTUREGROUP_Pixels2D.DisplayName"), TEXT("2D Pixels (unfiltered)"));
			MetaData->SetValue(ReturnEnum, TEXT("TEXTUREGROUP_Pixels2D.ToolTip"), TEXT("Non-filtered, useful for 2D rendering."));
			MetaData->SetValue(ReturnEnum, TEXT("TEXTUREGROUP_ProcBuilding_Face.DisplayName"), TEXT("ProcBuilding_Face"));
			MetaData->SetValue(ReturnEnum, TEXT("TEXTUREGROUP_ProcBuilding_Face.ToolTip"), TEXT("Obsolete - kept for backwards compatibility."));
			MetaData->SetValue(ReturnEnum, TEXT("TEXTUREGROUP_ProcBuilding_LightMap.DisplayName"), TEXT("ProcBuilding_LightMap"));
			MetaData->SetValue(ReturnEnum, TEXT("TEXTUREGROUP_ProcBuilding_LightMap.ToolTip"), TEXT("Obsolete - kept for backwards compatibility."));
			MetaData->SetValue(ReturnEnum, TEXT("TEXTUREGROUP_RenderTarget.DisplayName"), TEXT("RenderTarget"));
			MetaData->SetValue(ReturnEnum, TEXT("TEXTUREGROUP_Shadowmap.DisplayName"), TEXT("Shadowmap"));
			MetaData->SetValue(ReturnEnum, TEXT("TEXTUREGROUP_Skybox.DisplayName"), TEXT("Skybox"));
			MetaData->SetValue(ReturnEnum, TEXT("TEXTUREGROUP_Terrain_Heightmap.DisplayName"), TEXT("Terrain_Heightmap"));
			MetaData->SetValue(ReturnEnum, TEXT("TEXTUREGROUP_Terrain_Weightmap.DisplayName"), TEXT("Terrain_Weightmap"));
			MetaData->SetValue(ReturnEnum, TEXT("TEXTUREGROUP_UI.DisplayName"), TEXT("UI"));
			MetaData->SetValue(ReturnEnum, TEXT("TEXTUREGROUP_Vehicle.DisplayName"), TEXT("Vehicle"));
			MetaData->SetValue(ReturnEnum, TEXT("TEXTUREGROUP_VehicleNormalMap.DisplayName"), TEXT("VehicleNormalMap"));
			MetaData->SetValue(ReturnEnum, TEXT("TEXTUREGROUP_VehicleSpecular.DisplayName"), TEXT("VehicleSpecular"));
			MetaData->SetValue(ReturnEnum, TEXT("TEXTUREGROUP_Weapon.DisplayName"), TEXT("Weapon"));
			MetaData->SetValue(ReturnEnum, TEXT("TEXTUREGROUP_WeaponNormalMap.DisplayName"), TEXT("WeaponNormalMap"));
			MetaData->SetValue(ReturnEnum, TEXT("TEXTUREGROUP_WeaponSpecular.DisplayName"), TEXT("WeaponSpecular"));
			MetaData->SetValue(ReturnEnum, TEXT("TEXTUREGROUP_World.DisplayName"), TEXT("World"));
			MetaData->SetValue(ReturnEnum, TEXT("TEXTUREGROUP_WorldNormalMap.DisplayName"), TEXT("WorldNormalMap"));
			MetaData->SetValue(ReturnEnum, TEXT("TEXTUREGROUP_WorldSpecular.DisplayName"), TEXT("WorldSpecular"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("@warning: if this is changed:\n    update BaseEngine.ini [SystemSettings]\n    you might have to update the update Game's DefaultEngine.ini [SystemSettings]\n    order and actual name can never change (order is important!)\n\nTEXTUREGROUP_Cinematic: should be used for Cinematics which will be baked out\n                        and want to have the highest settings"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_TextureGroup_CRC() { return 3626835764U; }
	UScriptStruct* Z_Construct_UScriptStruct_FTextureLODGroup()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FTextureLODGroup_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("TextureLODGroup"), sizeof(FTextureLODGroup), Get_Z_Construct_UScriptStruct_FTextureLODGroup_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TextureLODGroup"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FTextureLODGroup>, EStructFlags(0x00000201));
			UProperty* NewProp_MipFilter = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MipFilter"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(MipFilter, FTextureLODGroup), 0x0000000000000000);
			UProperty* NewProp_MinMagFilter = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MinMagFilter"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(MinMagFilter, FTextureLODGroup), 0x0000000000000000);
			UProperty* NewProp_MaxLODSize = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MaxLODSize"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MaxLODSize, FTextureLODGroup), 0x0000000000000000);
			UProperty* NewProp_MinLODSize = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MinLODSize"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MinLODSize, FTextureLODGroup), 0x0000000000000000);
			UProperty* NewProp_MipGenSettings = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MipGenSettings"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(MipGenSettings, FTextureLODGroup), 0x0000000000000000, Z_Construct_UEnum_Engine_TextureMipGenSettings());
			UProperty* NewProp_NumStreamedMips = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("NumStreamedMips"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(NumStreamedMips, FTextureLODGroup), 0x0000000000000000);
			UProperty* NewProp_LODBias = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LODBias"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(LODBias, FTextureLODGroup), 0x0000000000000000);
			UProperty* NewProp_Group = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Group"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(Group, FTextureLODGroup), 0x0000000000000000, Z_Construct_UEnum_Engine_TextureGroup());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TextureLODSettings.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("LOD settings for a single texture group."));
			MetaData->SetValue(NewProp_MipFilter, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TextureLODSettings.h"));
			MetaData->SetValue(NewProp_MinMagFilter, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TextureLODSettings.h"));
			MetaData->SetValue(NewProp_MaxLODSize, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TextureLODSettings.h"));
			MetaData->SetValue(NewProp_MinLODSize, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TextureLODSettings.h"));
			MetaData->SetValue(NewProp_MipGenSettings, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TextureLODSettings.h"));
			MetaData->SetValue(NewProp_MipGenSettings, TEXT("ToolTip"), TEXT("Defines how the the mip-map generation works, e.g. sharpening"));
			MetaData->SetValue(NewProp_NumStreamedMips, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TextureLODSettings.h"));
			MetaData->SetValue(NewProp_NumStreamedMips, TEXT("ToolTip"), TEXT("Number of mip-levels that can be streamed. -1 means all mips can stream."));
			MetaData->SetValue(NewProp_LODBias, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TextureLODSettings.h"));
			MetaData->SetValue(NewProp_LODBias, TEXT("ToolTip"), TEXT("Group LOD bias."));
			MetaData->SetValue(NewProp_Group, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TextureLODSettings.h"));
			MetaData->SetValue(NewProp_Group, TEXT("ToolTip"), TEXT("Minimum LOD mip count below which the code won't bias."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FTextureLODGroup_CRC() { return 2964367658U; }
	UClass* Z_Construct_UClass_UTextureLODSettings_NoRegister()
	{
		return UTextureLODSettings::StaticClass();
	}
	UClass* Z_Construct_UClass_UTextureLODSettings()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UTextureLODSettings::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100484;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_TextureLODGroups = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TextureLODGroups"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(TextureLODGroups, UTextureLODSettings), 0x0000000000004001);
				UProperty* NewProp_TextureLODGroups_Inner = new(EC_InternalUseOnlyConstructor, NewProp_TextureLODGroups, TEXT("TextureLODGroups"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000004000, Z_Construct_UScriptStruct_FTextureLODGroup());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("DeviceProfiles"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/TextureLODSettings.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TextureLODSettings.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Structure containing all information related to an LOD group and providing helper functions to calculate\nthe LOD bias of a given group."));
				MetaData->SetValue(NewProp_TextureLODGroups, TEXT("Category"), TEXT("Texture LOD Settings"));
				MetaData->SetValue(NewProp_TextureLODGroups, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TextureLODSettings.h"));
				MetaData->SetValue(NewProp_TextureLODGroups, TEXT("ToolTip"), TEXT("Array of LOD settings with entries per group."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UTextureLODSettings(Z_Construct_UClass_UTextureLODSettings, TEXT("UTextureLODSettings"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UTextureLODSettings);
	UClass* Z_Construct_UClass_UDeviceProfile_NoRegister()
	{
		return UDeviceProfile::StaticClass();
	}
	UClass* Z_Construct_UClass_UDeviceProfile()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UTextureLODSettings();
			Z_Construct_UPackage_Engine();
			OuterClass = UDeviceProfile::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100484;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_CVars = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CVars"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(CVars, UDeviceProfile), 0x0000000000004001);
				UProperty* NewProp_CVars_Inner = new(EC_InternalUseOnlyConstructor, NewProp_CVars, TEXT("CVars"), RF_Public|RF_Transient|RF_Native) UStrProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000004000);
				UProperty* NewProp_Parent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Parent"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Parent, UDeviceProfile), 0x0000000000000000, Z_Construct_UClass_UObject_NoRegister());
				UProperty* NewProp_BaseProfileName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BaseProfileName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(BaseProfileName, UDeviceProfile), 0x0000000000004001);
				UProperty* NewProp_DeviceType = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DeviceType"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(DeviceType, UDeviceProfile), 0x0000000000024001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("DeviceProfiles"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("DeviceProfiles/DeviceProfile.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/DeviceProfiles/DeviceProfile.h"));
				MetaData->SetValue(NewProp_CVars, TEXT("Category"), TEXT("ConsoleVariables"));
				MetaData->SetValue(NewProp_CVars, TEXT("ModuleRelativePath"), TEXT("Classes/DeviceProfiles/DeviceProfile.h"));
				MetaData->SetValue(NewProp_CVars, TEXT("ToolTip"), TEXT("The collection of CVars which is set from this profile"));
				MetaData->SetValue(NewProp_Parent, TEXT("ModuleRelativePath"), TEXT("Classes/DeviceProfiles/DeviceProfile.h"));
				MetaData->SetValue(NewProp_Parent, TEXT("ToolTip"), TEXT("The parent object of this profile, it is the object matching this DeviceType with the BaseProfileName"));
				MetaData->SetValue(NewProp_BaseProfileName, TEXT("Category"), TEXT("DeviceSettings"));
				MetaData->SetValue(NewProp_BaseProfileName, TEXT("ModuleRelativePath"), TEXT("Classes/DeviceProfiles/DeviceProfile.h"));
				MetaData->SetValue(NewProp_BaseProfileName, TEXT("ToolTip"), TEXT("The name of the parent profile of this object"));
				MetaData->SetValue(NewProp_DeviceType, TEXT("Category"), TEXT("DeviceSettings"));
				MetaData->SetValue(NewProp_DeviceType, TEXT("ModuleRelativePath"), TEXT("Classes/DeviceProfiles/DeviceProfile.h"));
				MetaData->SetValue(NewProp_DeviceType, TEXT("ToolTip"), TEXT("The type of this profile, I.e. IOS, Windows, PS4 etc"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UDeviceProfile(Z_Construct_UClass_UDeviceProfile, TEXT("UDeviceProfile"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UDeviceProfile);
	UClass* Z_Construct_UClass_UDeviceProfileManager_NoRegister()
	{
		return UDeviceProfileManager::StaticClass();
	}
	UClass* Z_Construct_UClass_UDeviceProfileManager()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UDeviceProfileManager::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100088;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Profiles = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Profiles"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Profiles, UDeviceProfileManager), 0x0000000000000001);
				UProperty* NewProp_Profiles_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Profiles, TEXT("Profiles"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UObject_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("DeviceProfiles"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("DeviceProfiles/DeviceProfileManager.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/DeviceProfiles/DeviceProfileManager.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Implements a helper class that manages all profiles in the Device"));
				MetaData->SetValue(NewProp_Profiles, TEXT("Category"), TEXT("Properties"));
				MetaData->SetValue(NewProp_Profiles, TEXT("ModuleRelativePath"), TEXT("Classes/DeviceProfiles/DeviceProfileManager.h"));
				MetaData->SetValue(NewProp_Profiles, TEXT("ToolTip"), TEXT("Holds the collection of managed profiles."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UDeviceProfileManager(Z_Construct_UClass_UDeviceProfileManager, TEXT("UDeviceProfileManager"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UDeviceProfileManager);
	UClass* Z_Construct_UClass_UDialogueVoice_NoRegister()
	{
		return UDialogueVoice::StaticClass();
	}
	UClass* Z_Construct_UClass_UDialogueVoice()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UDialogueVoice::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20081080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_LocalizationGUID = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LocalizationGUID"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LocalizationGUID, UDialogueVoice), 0x0000000000000000, Z_Construct_UScriptStruct_FGuid());
				UProperty* NewProp_Plurality = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Plurality"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(Plurality, UDialogueVoice), 0x0000010000000001, Z_Construct_UEnum_Engine_EGrammaticalNumber());
				UProperty* NewProp_Gender = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Gender"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(Gender, UDialogueVoice), 0x0000010000000001, Z_Construct_UEnum_Engine_EGrammaticalGender());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Sound/DialogueVoice.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/DialogueVoice.h"));
				MetaData->SetValue(NewProp_LocalizationGUID, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/DialogueVoice.h"));
				MetaData->SetValue(NewProp_Plurality, TEXT("Category"), TEXT("DialogueVoice"));
				MetaData->SetValue(NewProp_Plurality, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/DialogueVoice.h"));
				MetaData->SetValue(NewProp_Gender, TEXT("Category"), TEXT("DialogueVoice"));
				MetaData->SetValue(NewProp_Gender, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/DialogueVoice.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UDialogueVoice(Z_Construct_UClass_UDialogueVoice, TEXT("UDialogueVoice"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UDialogueVoice);
	UScriptStruct* Z_Construct_UScriptStruct_FDialogueContextMapping()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FDialogueContextMapping_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("DialogueContextMapping"), sizeof(FDialogueContextMapping), Get_Z_Construct_UScriptStruct_FDialogueContextMapping_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DialogueContextMapping"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FDialogueContextMapping>, EStructFlags(0x00000001));
			UProperty* NewProp_Proxy = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Proxy"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Proxy, FDialogueContextMapping), 0x0000000000002000, Z_Construct_UClass_UDialogueSoundWaveProxy_NoRegister());
			UProperty* NewProp_SoundWave = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SoundWave"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(SoundWave, FDialogueContextMapping), 0x0000000000000001, Z_Construct_UClass_USoundWave_NoRegister());
			UProperty* NewProp_Context = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Context"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Context, FDialogueContextMapping), 0x0000000000000001, Z_Construct_UScriptStruct_FDialogueContext());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/DialogueWave.h"));
			MetaData->SetValue(NewProp_Proxy, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/DialogueWave.h"));
			MetaData->SetValue(NewProp_Proxy, TEXT("ToolTip"), TEXT("Cached object for playing the soundwave with subtitle information included."));
			MetaData->SetValue(NewProp_SoundWave, TEXT("Category"), TEXT("DialogueContextMapping"));
			MetaData->SetValue(NewProp_SoundWave, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/DialogueWave.h"));
			MetaData->SetValue(NewProp_SoundWave, TEXT("ToolTip"), TEXT("The soundwave to play for this dialogue."));
			MetaData->SetValue(NewProp_Context, TEXT("Category"), TEXT("DialogueContextMapping"));
			MetaData->SetValue(NewProp_Context, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/DialogueWave.h"));
			MetaData->SetValue(NewProp_Context, TEXT("ToolTip"), TEXT("The context of the dialogue."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FDialogueContextMapping_CRC() { return 2067813369U; }
	UClass* Z_Construct_UClass_UDialogueWave_NoRegister()
	{
		return UDialogueWave::StaticClass();
	}
	UClass* Z_Construct_UClass_UDialogueWave()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UDialogueWave::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20081080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_LocalizationGUID = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LocalizationGUID"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LocalizationGUID, UDialogueWave), 0x0000000000000000, Z_Construct_UScriptStruct_FGuid());
				UProperty* NewProp_ContextMappings = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ContextMappings"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ContextMappings, UDialogueWave), 0x0000000000000001);
				UProperty* NewProp_ContextMappings_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ContextMappings, TEXT("ContextMappings"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FDialogueContextMapping());
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_VoiceActorDirection = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VoiceActorDirection"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(VoiceActorDirection, UDialogueWave), 0x0000000800000001);
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_SpokenText = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SpokenText"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(SpokenText, UDialogueWave), 0x0000000000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bMature, UDialogueWave, uint8);
				UProperty* NewProp_bMature = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bMature"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bMature, UDialogueWave), 0x0000010000000001, CPP_BOOL_PROPERTY_BITMASK(bMature, UDialogueWave), sizeof(uint8), false);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Sound/DialogueWave.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/DialogueWave.h"));
				MetaData->SetValue(NewProp_LocalizationGUID, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/DialogueWave.h"));
				MetaData->SetValue(NewProp_ContextMappings, TEXT("Category"), TEXT("DialogueContexts"));
				MetaData->SetValue(NewProp_ContextMappings, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/DialogueWave.h"));
				MetaData->SetValue(NewProp_ContextMappings, TEXT("ToolTip"), TEXT("Mappings between dialogue contexts and associated soundwaves."));
				MetaData->SetValue(NewProp_VoiceActorDirection, TEXT("Category"), TEXT("Script"));
				MetaData->SetValue(NewProp_VoiceActorDirection, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/DialogueWave.h"));
				MetaData->SetValue(NewProp_VoiceActorDirection, TEXT("ToolTip"), TEXT("Provides contextual information for the sound to the translator - Notes to the voice actor intended to direct their performance."));
				MetaData->SetValue(NewProp_SpokenText, TEXT("Category"), TEXT("Script"));
				MetaData->SetValue(NewProp_SpokenText, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/DialogueWave.h"));
				MetaData->SetValue(NewProp_SpokenText, TEXT("ToolTip"), TEXT("A localized version of the text that is actually spoken phonetically in the audio."));
				MetaData->SetValue(NewProp_bMature, TEXT("Category"), TEXT("Filter"));
				MetaData->SetValue(NewProp_bMature, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/DialogueWave.h"));
				MetaData->SetValue(NewProp_bMature, TEXT("ToolTip"), TEXT("true if this dialogue is considered to contain mature/adult content."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UDialogueWave(Z_Construct_UClass_UDialogueWave, TEXT("UDialogueWave"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UDialogueWave);
	UEnum* Z_Construct_UEnum_Engine_DistributionParamMode()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_DistributionParamMode_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("DistributionParamMode"), 0, Get_Z_Construct_UEnum_Engine_DistributionParamMode_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DistributionParamMode"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("DPM_Normal")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("DPM_Abs")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("DPM_Direct")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("DPM_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/Distribution.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_DistributionParamMode_CRC() { return 2915364486U; }
	UScriptStruct* Z_Construct_UScriptStruct_FRawDistribution()
	{
		struct FDistributionLookupTable
		{
			uint8 Op;
			uint8 EntryCount;
			uint8 EntryStride;
			uint8 SubEntryStride;
			float TimeScale;
			float TimeBias;
			TArray<float> Values;
			uint8 LockFlag;
		};

		struct FRawDistribution
		{
			FDistributionLookupTable Table;
		};

		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FRawDistribution_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("RawDistribution"), sizeof(FRawDistribution), Get_Z_Construct_UScriptStruct_FRawDistribution_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RawDistribution"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, NULL, EStructFlags(0x00000008), sizeof(FRawDistribution), ALIGNOF(FRawDistribution));
			UProperty* NewProp_Table = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Table"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Table, FRawDistribution), 0x0000000000000000, Z_Construct_UScriptStruct_FDistributionLookupTable());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/Distribution.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Base class for raw (baked out) Distribution type"));
			MetaData->SetValue(NewProp_Table, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/Distribution.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FRawDistribution_CRC() { return 823437080U; }
	UScriptStruct* Z_Construct_UScriptStruct_FDistributionLookupTable()
	{
		struct FDistributionLookupTable
		{
			uint8 Op;
			uint8 EntryCount;
			uint8 EntryStride;
			uint8 SubEntryStride;
			float TimeScale;
			float TimeBias;
			TArray<float> Values;
			uint8 LockFlag;
		};

		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FDistributionLookupTable_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("DistributionLookupTable"), sizeof(FDistributionLookupTable), Get_Z_Construct_UScriptStruct_FDistributionLookupTable_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DistributionLookupTable"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, NULL, EStructFlags(0x00000008), sizeof(FDistributionLookupTable), ALIGNOF(FDistributionLookupTable));
			UProperty* NewProp_LockFlag = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LockFlag"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(LockFlag, FDistributionLookupTable), 0x0000000000000000);
			UProperty* NewProp_Values = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Values"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Values, FDistributionLookupTable), 0x0000000000000000);
			UProperty* NewProp_Values_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Values, TEXT("Values"), RF_Public|RF_Transient|RF_Native) UFloatProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_TimeBias = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TimeBias"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(TimeBias, FDistributionLookupTable), 0x0000000000000000);
			UProperty* NewProp_TimeScale = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TimeScale"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(TimeScale, FDistributionLookupTable), 0x0000000000000000);
			UProperty* NewProp_SubEntryStride = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SubEntryStride"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(SubEntryStride, FDistributionLookupTable), 0x0000000000000000);
			UProperty* NewProp_EntryStride = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("EntryStride"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(EntryStride, FDistributionLookupTable), 0x0000000000000000);
			UProperty* NewProp_EntryCount = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("EntryCount"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(EntryCount, FDistributionLookupTable), 0x0000000000000000);
			UProperty* NewProp_Op = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Op"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(Op, FDistributionLookupTable), 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/Distribution.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Lookup table for distributions."));
			MetaData->SetValue(NewProp_LockFlag, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/Distribution.h"));
			MetaData->SetValue(NewProp_Values, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/Distribution.h"));
			MetaData->SetValue(NewProp_TimeBias, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/Distribution.h"));
			MetaData->SetValue(NewProp_TimeScale, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/Distribution.h"));
			MetaData->SetValue(NewProp_SubEntryStride, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/Distribution.h"));
			MetaData->SetValue(NewProp_EntryStride, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/Distribution.h"));
			MetaData->SetValue(NewProp_EntryCount, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/Distribution.h"));
			MetaData->SetValue(NewProp_Op, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/Distribution.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FDistributionLookupTable_CRC() { return 1263822381U; }
	UClass* Z_Construct_UClass_UDistribution_NoRegister()
	{
		return UDistribution::StaticClass();
	}
	UClass* Z_Construct_UClass_UDistribution()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UDistribution::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20283081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Distributions/Distribution.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/Distribution.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UDistribution(Z_Construct_UClass_UDistribution, TEXT("UDistribution"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UDistribution);
	UScriptStruct* Z_Construct_UScriptStruct_FRawDistributionFloat()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FRawDistributionFloat_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("RawDistributionFloat"), sizeof(FRawDistributionFloat), Get_Z_Construct_UScriptStruct_FRawDistributionFloat_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RawDistributionFloat"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FRawDistribution(), new UScriptStruct::TCppStructOps<FRawDistributionFloat>, EStructFlags(0x00000005));
			UProperty* NewProp_Distribution = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Distribution"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Distribution, FRawDistributionFloat), 0x0000000002080009, Z_Construct_UClass_UDistributionFloat_NoRegister());
			UProperty* NewProp_MaxValue = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MaxValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MaxValue, FRawDistributionFloat), 0x0000000000000000);
			UProperty* NewProp_MinValue = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MinValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MinValue, FRawDistributionFloat), 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/DistributionFloat.h"));
			MetaData->SetValue(NewProp_Distribution, TEXT("Category"), TEXT("RawDistributionFloat"));
			MetaData->SetValue(NewProp_Distribution, TEXT("EditInline"), TEXT("true"));
			MetaData->SetValue(NewProp_Distribution, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/DistributionFloat.h"));
			MetaData->SetValue(NewProp_MaxValue, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/DistributionFloat.h"));
			MetaData->SetValue(NewProp_MinValue, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/DistributionFloat.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FRawDistributionFloat_CRC() { return 4161133654U; }
	UScriptStruct* Z_Construct_UScriptStruct_FFloatDistribution()
	{
		struct FDistributionLookupTable
		{
			uint8 Op;
			uint8 EntryCount;
			uint8 EntryStride;
			uint8 SubEntryStride;
			float TimeScale;
			float TimeBias;
			TArray<float> Values;
			uint8 LockFlag;
		};

		struct FFloatDistribution
		{
			FDistributionLookupTable Table;
		};

		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FFloatDistribution_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("FloatDistribution"), sizeof(FFloatDistribution), Get_Z_Construct_UScriptStruct_FFloatDistribution_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FloatDistribution"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, NULL, EStructFlags(0x00000008), sizeof(FFloatDistribution), ALIGNOF(FFloatDistribution));
			UProperty* NewProp_Table = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Table"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Table, FFloatDistribution), 0x0000000000000000, Z_Construct_UScriptStruct_FDistributionLookupTable());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/DistributionFloat.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Type-safe floating point distribution."));
			MetaData->SetValue(NewProp_Table, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/DistributionFloat.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FFloatDistribution_CRC() { return 499109305U; }
	UClass* Z_Construct_UClass_UDistributionFloat_NoRegister()
	{
		return UDistributionFloat::StaticClass();
	}
	UClass* Z_Construct_UClass_UDistributionFloat()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UDistribution();
			Z_Construct_UPackage_Engine();
			OuterClass = UDistributionFloat::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20283081;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCanBeBaked, UDistributionFloat, uint8);
				UProperty* NewProp_bCanBeBaked = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bCanBeBaked"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCanBeBaked, UDistributionFloat), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bCanBeBaked, UDistributionFloat), sizeof(uint8), false);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Distributions/DistributionFloat.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/DistributionFloat.h"));
				MetaData->SetValue(NewProp_bCanBeBaked, TEXT("Category"), TEXT("Baked"));
				MetaData->SetValue(NewProp_bCanBeBaked, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/DistributionFloat.h"));
				MetaData->SetValue(NewProp_bCanBeBaked, TEXT("ToolTip"), TEXT("Can this variable be baked out to a FRawDistribution? Should be true 99% of the time"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UDistributionFloat(Z_Construct_UClass_UDistributionFloat, TEXT("UDistributionFloat"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UDistributionFloat);
	UClass* Z_Construct_UClass_UDistributionFloatConstant_NoRegister()
	{
		return UDistributionFloatConstant::StaticClass();
	}
	UClass* Z_Construct_UClass_UDistributionFloatConstant()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UDistributionFloat();
			Z_Construct_UPackage_Engine();
			OuterClass = UDistributionFloatConstant::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20283080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Constant = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Constant"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Constant, UDistributionFloatConstant), 0x0000000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Distributions/DistributionFloatConstant.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/DistributionFloatConstant.h"));
				MetaData->SetValue(NewProp_Constant, TEXT("Category"), TEXT("DistributionFloatConstant"));
				MetaData->SetValue(NewProp_Constant, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/DistributionFloatConstant.h"));
				MetaData->SetValue(NewProp_Constant, TEXT("ToolTip"), TEXT("This float will be returned for all values of time."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UDistributionFloatConstant(Z_Construct_UClass_UDistributionFloatConstant, TEXT("UDistributionFloatConstant"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UDistributionFloatConstant);
	UClass* Z_Construct_UClass_UDistributionFloatParameterBase_NoRegister()
	{
		return UDistributionFloatParameterBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UDistributionFloatParameterBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UDistributionFloatConstant();
			Z_Construct_UPackage_Engine();
			OuterClass = UDistributionFloatParameterBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20203081;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ParamMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ParamMode"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(ParamMode, UDistributionFloatParameterBase), 0x0000000000000001, Z_Construct_UEnum_Engine_DistributionParamMode());
				UProperty* NewProp_MaxOutput = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxOutput"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MaxOutput, UDistributionFloatParameterBase), 0x0000000000000001);
				UProperty* NewProp_MinOutput = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MinOutput"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MinOutput, UDistributionFloatParameterBase), 0x0000000000000001);
				UProperty* NewProp_MaxInput = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxInput"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MaxInput, UDistributionFloatParameterBase), 0x0000000000000001);
				UProperty* NewProp_MinInput = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MinInput"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MinInput, UDistributionFloatParameterBase), 0x0000000000000001);
				UProperty* NewProp_ParameterName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ParameterName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(ParameterName, UDistributionFloatParameterBase), 0x0000000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Distributions/DistributionFloatParameterBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/DistributionFloatParameterBase.h"));
				MetaData->SetValue(NewProp_ParamMode, TEXT("Category"), TEXT("DistributionFloatParameterBase"));
				MetaData->SetValue(NewProp_ParamMode, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/DistributionFloatParameterBase.h"));
				MetaData->SetValue(NewProp_ParamMode, TEXT("ToolTip"), TEXT("todo document"));
				MetaData->SetValue(NewProp_MaxOutput, TEXT("Category"), TEXT("DistributionFloatParameterBase"));
				MetaData->SetValue(NewProp_MaxOutput, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/DistributionFloatParameterBase.h"));
				MetaData->SetValue(NewProp_MaxOutput, TEXT("ToolTip"), TEXT("todo document"));
				MetaData->SetValue(NewProp_MinOutput, TEXT("Category"), TEXT("DistributionFloatParameterBase"));
				MetaData->SetValue(NewProp_MinOutput, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/DistributionFloatParameterBase.h"));
				MetaData->SetValue(NewProp_MinOutput, TEXT("ToolTip"), TEXT("todo document"));
				MetaData->SetValue(NewProp_MaxInput, TEXT("Category"), TEXT("DistributionFloatParameterBase"));
				MetaData->SetValue(NewProp_MaxInput, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/DistributionFloatParameterBase.h"));
				MetaData->SetValue(NewProp_MaxInput, TEXT("ToolTip"), TEXT("todo document"));
				MetaData->SetValue(NewProp_MinInput, TEXT("Category"), TEXT("DistributionFloatParameterBase"));
				MetaData->SetValue(NewProp_MinInput, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/DistributionFloatParameterBase.h"));
				MetaData->SetValue(NewProp_MinInput, TEXT("ToolTip"), TEXT("todo document"));
				MetaData->SetValue(NewProp_ParameterName, TEXT("Category"), TEXT("DistributionFloatParameterBase"));
				MetaData->SetValue(NewProp_ParameterName, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/DistributionFloatParameterBase.h"));
				MetaData->SetValue(NewProp_ParameterName, TEXT("ToolTip"), TEXT("todo document"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UDistributionFloatParameterBase(Z_Construct_UClass_UDistributionFloatParameterBase, TEXT("UDistributionFloatParameterBase"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UDistributionFloatParameterBase);
	UClass* Z_Construct_UClass_UDistributionFloatParticleParameter_NoRegister()
	{
		return UDistributionFloatParticleParameter::StaticClass();
	}
	UClass* Z_Construct_UClass_UDistributionFloatParticleParameter()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UDistributionFloatParameterBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UDistributionFloatParticleParameter::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20283080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Distributions/DistributionFloatParticleParameter.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/DistributionFloatParticleParameter.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UDistributionFloatParticleParameter(Z_Construct_UClass_UDistributionFloatParticleParameter, TEXT("UDistributionFloatParticleParameter"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UDistributionFloatParticleParameter);
	UClass* Z_Construct_UClass_UDistributionFloatConstantCurve_NoRegister()
	{
		return UDistributionFloatConstantCurve::StaticClass();
	}
	UClass* Z_Construct_UClass_UDistributionFloatConstantCurve()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UDistributionFloat();
			Z_Construct_UPackage_Engine();
			OuterClass = UDistributionFloatConstantCurve::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20283080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ConstantCurve = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConstantCurve"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ConstantCurve, UDistributionFloatConstantCurve), 0x0000000000000001, Z_Construct_UScriptStruct_FInterpCurveFloat());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Distributions/DistributionFloatConstantCurve.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/DistributionFloatConstantCurve.h"));
				MetaData->SetValue(NewProp_ConstantCurve, TEXT("Category"), TEXT("DistributionFloatConstantCurve"));
				MetaData->SetValue(NewProp_ConstantCurve, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/DistributionFloatConstantCurve.h"));
				MetaData->SetValue(NewProp_ConstantCurve, TEXT("ToolTip"), TEXT("Keyframe data for how output constant varies over time."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UDistributionFloatConstantCurve(Z_Construct_UClass_UDistributionFloatConstantCurve, TEXT("UDistributionFloatConstantCurve"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UDistributionFloatConstantCurve);
	UClass* Z_Construct_UClass_UDistributionFloatUniform_NoRegister()
	{
		return UDistributionFloatUniform::StaticClass();
	}
	UClass* Z_Construct_UClass_UDistributionFloatUniform()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UDistributionFloat();
			Z_Construct_UPackage_Engine();
			OuterClass = UDistributionFloatUniform::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20283080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Max = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Max"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Max, UDistributionFloatUniform), 0x0000000000000001);
				UProperty* NewProp_Min = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Min"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Min, UDistributionFloatUniform), 0x0000000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Distributions/DistributionFloatUniform.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/DistributionFloatUniform.h"));
				MetaData->SetValue(NewProp_Max, TEXT("Category"), TEXT("DistributionFloatUniform"));
				MetaData->SetValue(NewProp_Max, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/DistributionFloatUniform.h"));
				MetaData->SetValue(NewProp_Max, TEXT("ToolTip"), TEXT("High end of output float distribution."));
				MetaData->SetValue(NewProp_Min, TEXT("Category"), TEXT("DistributionFloatUniform"));
				MetaData->SetValue(NewProp_Min, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/DistributionFloatUniform.h"));
				MetaData->SetValue(NewProp_Min, TEXT("ToolTip"), TEXT("Low end of output float distribution."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UDistributionFloatUniform(Z_Construct_UClass_UDistributionFloatUniform, TEXT("UDistributionFloatUniform"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UDistributionFloatUniform);
	UClass* Z_Construct_UClass_UDistributionFloatUniformCurve_NoRegister()
	{
		return UDistributionFloatUniformCurve::StaticClass();
	}
	UClass* Z_Construct_UClass_UDistributionFloatUniformCurve()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UDistributionFloat();
			Z_Construct_UPackage_Engine();
			OuterClass = UDistributionFloatUniformCurve::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20283080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ConstantCurve = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConstantCurve"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ConstantCurve, UDistributionFloatUniformCurve), 0x0000000000000001, Z_Construct_UScriptStruct_FInterpCurveVector2D());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Distributions/DistributionFloatUniformCurve.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/DistributionFloatUniformCurve.h"));
				MetaData->SetValue(NewProp_ConstantCurve, TEXT("Category"), TEXT("DistributionFloatUniformCurve"));
				MetaData->SetValue(NewProp_ConstantCurve, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/DistributionFloatUniformCurve.h"));
				MetaData->SetValue(NewProp_ConstantCurve, TEXT("ToolTip"), TEXT("Keyframe data for how output constant varies over time."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UDistributionFloatUniformCurve(Z_Construct_UClass_UDistributionFloatUniformCurve, TEXT("UDistributionFloatUniformCurve"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UDistributionFloatUniformCurve);
	UEnum* Z_Construct_UEnum_Engine_EDistributionVectorMirrorFlags()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EDistributionVectorMirrorFlags_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EDistributionVectorMirrorFlags"), 0, Get_Z_Construct_UEnum_Engine_EDistributionVectorMirrorFlags_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EDistributionVectorMirrorFlags"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDVMF_Same")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDVMF_Different")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDVMF_Mirror")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDVMF_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("EDVMF_Different.DisplayName"), TEXT("Different"));
			MetaData->SetValue(ReturnEnum, TEXT("EDVMF_Mirror.DisplayName"), TEXT("Mirror"));
			MetaData->SetValue(ReturnEnum, TEXT("EDVMF_Same.DisplayName"), TEXT("Same"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/DistributionVector.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EDistributionVectorMirrorFlags_CRC() { return 665619300U; }
	UEnum* Z_Construct_UEnum_Engine_EDistributionVectorLockFlags()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EDistributionVectorLockFlags_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EDistributionVectorLockFlags"), 0, Get_Z_Construct_UEnum_Engine_EDistributionVectorLockFlags_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EDistributionVectorLockFlags"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDVLF_None")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDVLF_XY")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDVLF_XZ")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDVLF_YZ")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDVLF_XYZ")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDVLF_MAX")), 5));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("EDVLF_None.DisplayName"), TEXT("None"));
			MetaData->SetValue(ReturnEnum, TEXT("EDVLF_XY.DisplayName"), TEXT("XY"));
			MetaData->SetValue(ReturnEnum, TEXT("EDVLF_XYZ.DisplayName"), TEXT("XYZ"));
			MetaData->SetValue(ReturnEnum, TEXT("EDVLF_XZ.DisplayName"), TEXT("XZ"));
			MetaData->SetValue(ReturnEnum, TEXT("EDVLF_YZ.DisplayName"), TEXT("YZ"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/DistributionVector.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EDistributionVectorLockFlags_CRC() { return 200967854U; }
	UScriptStruct* Z_Construct_UScriptStruct_FRawDistributionVector()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FRawDistributionVector_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("RawDistributionVector"), sizeof(FRawDistributionVector), Get_Z_Construct_UScriptStruct_FRawDistributionVector_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RawDistributionVector"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FRawDistribution(), new UScriptStruct::TCppStructOps<FRawDistributionVector>, EStructFlags(0x00000005));
			UProperty* NewProp_Distribution = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Distribution"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Distribution, FRawDistributionVector), 0x0000000002080009, Z_Construct_UClass_UDistributionVector_NoRegister());
			UProperty* NewProp_MaxValue = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MaxValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MaxValue, FRawDistributionVector), 0x0000000000000000);
			UProperty* NewProp_MinValue = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MinValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MinValue, FRawDistributionVector), 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/DistributionVector.h"));
			MetaData->SetValue(NewProp_Distribution, TEXT("Category"), TEXT("RawDistributionVector"));
			MetaData->SetValue(NewProp_Distribution, TEXT("EditInline"), TEXT("true"));
			MetaData->SetValue(NewProp_Distribution, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/DistributionVector.h"));
			MetaData->SetValue(NewProp_MaxValue, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/DistributionVector.h"));
			MetaData->SetValue(NewProp_MinValue, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/DistributionVector.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FRawDistributionVector_CRC() { return 3930902750U; }
	UScriptStruct* Z_Construct_UScriptStruct_FVector4Distribution()
	{
		struct FDistributionLookupTable
		{
			uint8 Op;
			uint8 EntryCount;
			uint8 EntryStride;
			uint8 SubEntryStride;
			float TimeScale;
			float TimeBias;
			TArray<float> Values;
			uint8 LockFlag;
		};

		struct FVector4Distribution
		{
			FDistributionLookupTable Table;
		};

		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FVector4Distribution_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("Vector4Distribution"), sizeof(FVector4Distribution), Get_Z_Construct_UScriptStruct_FVector4Distribution_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Vector4Distribution"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, NULL, EStructFlags(0x00000008), sizeof(FVector4Distribution), ALIGNOF(FVector4Distribution));
			UProperty* NewProp_Table = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Table"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Table, FVector4Distribution), 0x0000000000000000, Z_Construct_UScriptStruct_FDistributionLookupTable());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/DistributionVector.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Type-safe 4-vector distribution."));
			MetaData->SetValue(NewProp_Table, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/DistributionVector.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FVector4Distribution_CRC() { return 1679316060U; }
	UScriptStruct* Z_Construct_UScriptStruct_FVectorDistribution()
	{
		struct FDistributionLookupTable
		{
			uint8 Op;
			uint8 EntryCount;
			uint8 EntryStride;
			uint8 SubEntryStride;
			float TimeScale;
			float TimeBias;
			TArray<float> Values;
			uint8 LockFlag;
		};

		struct FVectorDistribution
		{
			FDistributionLookupTable Table;
		};

		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FVectorDistribution_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("VectorDistribution"), sizeof(FVectorDistribution), Get_Z_Construct_UScriptStruct_FVectorDistribution_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VectorDistribution"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, NULL, EStructFlags(0x00000008), sizeof(FVectorDistribution), ALIGNOF(FVectorDistribution));
			UProperty* NewProp_Table = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Table"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Table, FVectorDistribution), 0x0000000000000000, Z_Construct_UScriptStruct_FDistributionLookupTable());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/DistributionVector.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Type-safe vector distribution."));
			MetaData->SetValue(NewProp_Table, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/DistributionVector.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FVectorDistribution_CRC() { return 1730323115U; }
	UClass* Z_Construct_UClass_UDistributionVector_NoRegister()
	{
		return UDistributionVector::StaticClass();
	}
	UClass* Z_Construct_UClass_UDistributionVector()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UDistribution();
			Z_Construct_UPackage_Engine();
			OuterClass = UDistributionVector::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20303081;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsDirty, UDistributionVector, uint8);
				UProperty* NewProp_bIsDirty = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsDirty"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsDirty, UDistributionVector), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bIsDirty, UDistributionVector), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCanBeBaked, UDistributionVector, uint8);
				UProperty* NewProp_bCanBeBaked = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bCanBeBaked"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCanBeBaked, UDistributionVector), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bCanBeBaked, UDistributionVector), sizeof(uint8), false);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Distributions/DistributionVector.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/DistributionVector.h"));
				MetaData->SetValue(NewProp_bIsDirty, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/DistributionVector.h"));
				MetaData->SetValue(NewProp_bIsDirty, TEXT("ToolTip"), TEXT("Set internally when the distribution is updated so that that FRawDistribution can know to update itself"));
				MetaData->SetValue(NewProp_bCanBeBaked, TEXT("Category"), TEXT("Baked"));
				MetaData->SetValue(NewProp_bCanBeBaked, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/DistributionVector.h"));
				MetaData->SetValue(NewProp_bCanBeBaked, TEXT("ToolTip"), TEXT("Can this variable be baked out to a FRawDistribution? Should be true 99% of the time"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UDistributionVector(Z_Construct_UClass_UDistributionVector, TEXT("UDistributionVector"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UDistributionVector);
	UClass* Z_Construct_UClass_UDistributionVectorConstant_NoRegister()
	{
		return UDistributionVectorConstant::StaticClass();
	}
	UClass* Z_Construct_UClass_UDistributionVectorConstant()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UDistributionVector();
			Z_Construct_UPackage_Engine();
			OuterClass = UDistributionVectorConstant::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20303080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_LockedAxes = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LockedAxes"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(LockedAxes, UDistributionVectorConstant), 0x0000000000000001, Z_Construct_UEnum_Engine_EDistributionVectorLockFlags());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLockAxes, UDistributionVectorConstant, uint8);
				UProperty* NewProp_bLockAxes = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bLockAxes"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLockAxes, UDistributionVectorConstant), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bLockAxes, UDistributionVectorConstant), sizeof(uint8), false);
				UProperty* NewProp_Constant = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Constant"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Constant, UDistributionVectorConstant), 0x0000000000000001, Z_Construct_UScriptStruct_FVector());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Distributions/DistributionVectorConstant.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/DistributionVectorConstant.h"));
				MetaData->SetValue(NewProp_LockedAxes, TEXT("Category"), TEXT("DistributionVectorConstant"));
				MetaData->SetValue(NewProp_LockedAxes, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/DistributionVectorConstant.h"));
				MetaData->SetValue(NewProp_bLockAxes, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/DistributionVectorConstant.h"));
				MetaData->SetValue(NewProp_bLockAxes, TEXT("ToolTip"), TEXT("If true, X == Y == Z ie. only one degree of freedom. If false, each axis is picked independently."));
				MetaData->SetValue(NewProp_Constant, TEXT("Category"), TEXT("DistributionVectorConstant"));
				MetaData->SetValue(NewProp_Constant, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/DistributionVectorConstant.h"));
				MetaData->SetValue(NewProp_Constant, TEXT("ToolTip"), TEXT("This FVector will be returned for all input times."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UDistributionVectorConstant(Z_Construct_UClass_UDistributionVectorConstant, TEXT("UDistributionVectorConstant"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UDistributionVectorConstant);
	UClass* Z_Construct_UClass_UDistributionVectorParameterBase_NoRegister()
	{
		return UDistributionVectorParameterBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UDistributionVectorParameterBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UDistributionVectorConstant();
			Z_Construct_UPackage_Engine();
			OuterClass = UDistributionVectorParameterBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20203081;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ParamModes = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ParamModes"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(ParamModes, UDistributionVectorParameterBase), 0x0000000000000001, Z_Construct_UEnum_Engine_DistributionParamMode());
				NewProp_ParamModes->ArrayDim = CPP_ARRAY_DIM(ParamModes, UDistributionVectorParameterBase);
				UProperty* NewProp_MaxOutput = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxOutput"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MaxOutput, UDistributionVectorParameterBase), 0x0000000000000001, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_MinOutput = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MinOutput"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MinOutput, UDistributionVectorParameterBase), 0x0000000000000001, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_MaxInput = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxInput"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MaxInput, UDistributionVectorParameterBase), 0x0000000000000001, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_MinInput = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MinInput"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MinInput, UDistributionVectorParameterBase), 0x0000000000000001, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_ParameterName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ParameterName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(ParameterName, UDistributionVectorParameterBase), 0x0000000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Distributions/DistributionVectorParameterBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/DistributionVectorParameterBase.h"));
				MetaData->SetValue(NewProp_ParamModes, TEXT("Category"), TEXT("DistributionVectorParameterBase"));
				MetaData->SetValue(NewProp_ParamModes, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/DistributionVectorParameterBase.h"));
				MetaData->SetValue(NewProp_MaxOutput, TEXT("Category"), TEXT("DistributionVectorParameterBase"));
				MetaData->SetValue(NewProp_MaxOutput, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/DistributionVectorParameterBase.h"));
				MetaData->SetValue(NewProp_MinOutput, TEXT("Category"), TEXT("DistributionVectorParameterBase"));
				MetaData->SetValue(NewProp_MinOutput, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/DistributionVectorParameterBase.h"));
				MetaData->SetValue(NewProp_MaxInput, TEXT("Category"), TEXT("DistributionVectorParameterBase"));
				MetaData->SetValue(NewProp_MaxInput, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/DistributionVectorParameterBase.h"));
				MetaData->SetValue(NewProp_MinInput, TEXT("Category"), TEXT("DistributionVectorParameterBase"));
				MetaData->SetValue(NewProp_MinInput, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/DistributionVectorParameterBase.h"));
				MetaData->SetValue(NewProp_ParameterName, TEXT("Category"), TEXT("DistributionVectorParameterBase"));
				MetaData->SetValue(NewProp_ParameterName, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/DistributionVectorParameterBase.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UDistributionVectorParameterBase(Z_Construct_UClass_UDistributionVectorParameterBase, TEXT("UDistributionVectorParameterBase"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UDistributionVectorParameterBase);
	UClass* Z_Construct_UClass_UDistributionVectorParticleParameter_NoRegister()
	{
		return UDistributionVectorParticleParameter::StaticClass();
	}
	UClass* Z_Construct_UClass_UDistributionVectorParticleParameter()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UDistributionVectorParameterBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UDistributionVectorParticleParameter::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20283080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Distributions/DistributionVectorParticleParameter.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/DistributionVectorParticleParameter.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UDistributionVectorParticleParameter(Z_Construct_UClass_UDistributionVectorParticleParameter, TEXT("UDistributionVectorParticleParameter"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UDistributionVectorParticleParameter);
	UClass* Z_Construct_UClass_UDistributionVectorConstantCurve_NoRegister()
	{
		return UDistributionVectorConstantCurve::StaticClass();
	}
	UClass* Z_Construct_UClass_UDistributionVectorConstantCurve()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UDistributionVector();
			Z_Construct_UPackage_Engine();
			OuterClass = UDistributionVectorConstantCurve::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20283080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_LockedAxes = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LockedAxes"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(LockedAxes, UDistributionVectorConstantCurve), 0x0000000000000001, Z_Construct_UEnum_Engine_EDistributionVectorLockFlags());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLockAxes, UDistributionVectorConstantCurve, uint8);
				UProperty* NewProp_bLockAxes = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bLockAxes"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLockAxes, UDistributionVectorConstantCurve), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bLockAxes, UDistributionVectorConstantCurve), sizeof(uint8), false);
				UProperty* NewProp_ConstantCurve = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConstantCurve"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ConstantCurve, UDistributionVectorConstantCurve), 0x0000000000000001, Z_Construct_UScriptStruct_FInterpCurveVector());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Distributions/DistributionVectorConstantCurve.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/DistributionVectorConstantCurve.h"));
				MetaData->SetValue(NewProp_LockedAxes, TEXT("Category"), TEXT("DistributionVectorConstantCurve"));
				MetaData->SetValue(NewProp_LockedAxes, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/DistributionVectorConstantCurve.h"));
				MetaData->SetValue(NewProp_bLockAxes, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/DistributionVectorConstantCurve.h"));
				MetaData->SetValue(NewProp_bLockAxes, TEXT("ToolTip"), TEXT("If true, X == Y == Z ie. only one degree of freedom. If false, each axis is picked independently."));
				MetaData->SetValue(NewProp_ConstantCurve, TEXT("Category"), TEXT("DistributionVectorConstantCurve"));
				MetaData->SetValue(NewProp_ConstantCurve, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/DistributionVectorConstantCurve.h"));
				MetaData->SetValue(NewProp_ConstantCurve, TEXT("ToolTip"), TEXT("Keyframe data for each component (X,Y,Z) over time."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UDistributionVectorConstantCurve(Z_Construct_UClass_UDistributionVectorConstantCurve, TEXT("UDistributionVectorConstantCurve"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UDistributionVectorConstantCurve);
	UClass* Z_Construct_UClass_UDistributionVectorUniform_NoRegister()
	{
		return UDistributionVectorUniform::StaticClass();
	}
	UClass* Z_Construct_UClass_UDistributionVectorUniform()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UDistributionVector();
			Z_Construct_UPackage_Engine();
			OuterClass = UDistributionVectorUniform::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20283080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseExtremes, UDistributionVectorUniform, uint8);
				UProperty* NewProp_bUseExtremes = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUseExtremes"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseExtremes, UDistributionVectorUniform), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bUseExtremes, UDistributionVectorUniform), sizeof(uint8), false);
				UProperty* NewProp_MirrorFlags = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MirrorFlags"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(MirrorFlags, UDistributionVectorUniform), 0x0000000000000001, Z_Construct_UEnum_Engine_EDistributionVectorMirrorFlags());
				NewProp_MirrorFlags->ArrayDim = CPP_ARRAY_DIM(MirrorFlags, UDistributionVectorUniform);
				UProperty* NewProp_LockedAxes = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LockedAxes"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(LockedAxes, UDistributionVectorUniform), 0x0000000000000001, Z_Construct_UEnum_Engine_EDistributionVectorLockFlags());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLockAxes, UDistributionVectorUniform, uint8);
				UProperty* NewProp_bLockAxes = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bLockAxes"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLockAxes, UDistributionVectorUniform), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bLockAxes, UDistributionVectorUniform), sizeof(uint8), false);
				UProperty* NewProp_Min = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Min"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Min, UDistributionVectorUniform), 0x0000000000000001, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_Max = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Max"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Max, UDistributionVectorUniform), 0x0000000000000001, Z_Construct_UScriptStruct_FVector());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Distributions/DistributionVectorUniform.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/DistributionVectorUniform.h"));
				MetaData->SetValue(NewProp_bUseExtremes, TEXT("Category"), TEXT("DistributionVectorUniform"));
				MetaData->SetValue(NewProp_bUseExtremes, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/DistributionVectorUniform.h"));
				MetaData->SetValue(NewProp_MirrorFlags, TEXT("Category"), TEXT("DistributionVectorUniform"));
				MetaData->SetValue(NewProp_MirrorFlags, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/DistributionVectorUniform.h"));
				MetaData->SetValue(NewProp_LockedAxes, TEXT("Category"), TEXT("DistributionVectorUniform"));
				MetaData->SetValue(NewProp_LockedAxes, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/DistributionVectorUniform.h"));
				MetaData->SetValue(NewProp_bLockAxes, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/DistributionVectorUniform.h"));
				MetaData->SetValue(NewProp_bLockAxes, TEXT("ToolTip"), TEXT("If true, X == Y == Z ie. only one degree of freedom. If false, each axis is picked independently."));
				MetaData->SetValue(NewProp_Min, TEXT("Category"), TEXT("DistributionVectorUniform"));
				MetaData->SetValue(NewProp_Min, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/DistributionVectorUniform.h"));
				MetaData->SetValue(NewProp_Min, TEXT("ToolTip"), TEXT("Lower end of FVector magnitude range."));
				MetaData->SetValue(NewProp_Max, TEXT("Category"), TEXT("DistributionVectorUniform"));
				MetaData->SetValue(NewProp_Max, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/DistributionVectorUniform.h"));
				MetaData->SetValue(NewProp_Max, TEXT("ToolTip"), TEXT("Upper end of FVector magnitude range."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UDistributionVectorUniform(Z_Construct_UClass_UDistributionVectorUniform, TEXT("UDistributionVectorUniform"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UDistributionVectorUniform);
	UClass* Z_Construct_UClass_UDistributionVectorUniformCurve_NoRegister()
	{
		return UDistributionVectorUniformCurve::StaticClass();
	}
	UClass* Z_Construct_UClass_UDistributionVectorUniformCurve()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UDistributionVector();
			Z_Construct_UPackage_Engine();
			OuterClass = UDistributionVectorUniformCurve::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20283080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseExtremes, UDistributionVectorUniformCurve, uint8);
				UProperty* NewProp_bUseExtremes = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUseExtremes"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseExtremes, UDistributionVectorUniformCurve), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bUseExtremes, UDistributionVectorUniformCurve), sizeof(uint8), false);
				UProperty* NewProp_MirrorFlags = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MirrorFlags"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(MirrorFlags, UDistributionVectorUniformCurve), 0x0000000000000001, Z_Construct_UEnum_Engine_EDistributionVectorMirrorFlags());
				NewProp_MirrorFlags->ArrayDim = CPP_ARRAY_DIM(MirrorFlags, UDistributionVectorUniformCurve);
				UProperty* NewProp_LockedAxes = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LockedAxes"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(LockedAxes, UDistributionVectorUniformCurve), 0x0000000000000001, Z_Construct_UEnum_Engine_EDistributionVectorLockFlags());
				NewProp_LockedAxes->ArrayDim = CPP_ARRAY_DIM(LockedAxes, UDistributionVectorUniformCurve);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLockAxes2, UDistributionVectorUniformCurve, uint8);
				UProperty* NewProp_bLockAxes2 = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bLockAxes2"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLockAxes2, UDistributionVectorUniformCurve), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bLockAxes2, UDistributionVectorUniformCurve), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLockAxes1, UDistributionVectorUniformCurve, uint8);
				UProperty* NewProp_bLockAxes1 = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bLockAxes1"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLockAxes1, UDistributionVectorUniformCurve), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bLockAxes1, UDistributionVectorUniformCurve), sizeof(uint8), false);
				UProperty* NewProp_ConstantCurve = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConstantCurve"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ConstantCurve, UDistributionVectorUniformCurve), 0x0000000000000001, Z_Construct_UScriptStruct_FInterpCurveTwoVectors());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Distributions/DistributionVectorUniformCurve.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/DistributionVectorUniformCurve.h"));
				MetaData->SetValue(NewProp_bUseExtremes, TEXT("Category"), TEXT("DistributionVectorUniformCurve"));
				MetaData->SetValue(NewProp_bUseExtremes, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/DistributionVectorUniformCurve.h"));
				MetaData->SetValue(NewProp_MirrorFlags, TEXT("Category"), TEXT("DistributionVectorUniformCurve"));
				MetaData->SetValue(NewProp_MirrorFlags, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/DistributionVectorUniformCurve.h"));
				MetaData->SetValue(NewProp_LockedAxes, TEXT("Category"), TEXT("DistributionVectorUniformCurve"));
				MetaData->SetValue(NewProp_LockedAxes, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/DistributionVectorUniformCurve.h"));
				MetaData->SetValue(NewProp_bLockAxes2, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/DistributionVectorUniformCurve.h"));
				MetaData->SetValue(NewProp_bLockAxes1, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/DistributionVectorUniformCurve.h"));
				MetaData->SetValue(NewProp_bLockAxes1, TEXT("ToolTip"), TEXT("If true, X == Y == Z ie. only one degree of freedom. If false, each axis is picked independently."));
				MetaData->SetValue(NewProp_ConstantCurve, TEXT("Category"), TEXT("DistributionVectorUniformCurve"));
				MetaData->SetValue(NewProp_ConstantCurve, TEXT("ModuleRelativePath"), TEXT("Classes/Distributions/DistributionVectorUniformCurve.h"));
				MetaData->SetValue(NewProp_ConstantCurve, TEXT("ToolTip"), TEXT("Keyframe data for how output constant varies over time."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UDistributionVectorUniformCurve(Z_Construct_UClass_UDistributionVectorUniformCurve, TEXT("UDistributionVectorUniformCurve"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UDistributionVectorUniformCurve);
	UClass* Z_Construct_UClass_UDPICustomScalingRule_NoRegister()
	{
		return UDPICustomScalingRule::StaticClass();
	}
	UClass* Z_Construct_UClass_UDPICustomScalingRule()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UDPICustomScalingRule::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/DPICustomScalingRule.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DPICustomScalingRule.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Custom Scaling Rules for Slate and UMG Widgets can be implemented by sub-classing from this class\nand setting this rule to be used in your project settings."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UDPICustomScalingRule(Z_Construct_UClass_UDPICustomScalingRule, TEXT("UDPICustomScalingRule"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UDPICustomScalingRule);
	UClass* Z_Construct_UClass_UDynamicBlueprintBinding_NoRegister()
	{
		return UDynamicBlueprintBinding::StaticClass();
	}
	UClass* Z_Construct_UClass_UDynamicBlueprintBinding()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UDynamicBlueprintBinding::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/DynamicBlueprintBinding.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DynamicBlueprintBinding.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UDynamicBlueprintBinding(Z_Construct_UClass_UDynamicBlueprintBinding, TEXT("UDynamicBlueprintBinding"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UDynamicBlueprintBinding);
	UScriptStruct* Z_Construct_UScriptStruct_FBlueprintComponentDelegateBinding()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FBlueprintComponentDelegateBinding_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("BlueprintComponentDelegateBinding"), sizeof(FBlueprintComponentDelegateBinding), Get_Z_Construct_UScriptStruct_FBlueprintComponentDelegateBinding_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BlueprintComponentDelegateBinding"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FBlueprintComponentDelegateBinding>, EStructFlags(0x00000201));
			UProperty* NewProp_FunctionNameToBind = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("FunctionNameToBind"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(FunctionNameToBind, FBlueprintComponentDelegateBinding), 0x0000000000000000);
			UProperty* NewProp_DelegatePropertyName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DelegatePropertyName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(DelegatePropertyName, FBlueprintComponentDelegateBinding), 0x0000000000000000);
			UProperty* NewProp_ComponentPropertyName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ComponentPropertyName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(ComponentPropertyName, FBlueprintComponentDelegateBinding), 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/ComponentDelegateBinding.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Entry for a delegate to assign after a blueprint has been instanced"));
			MetaData->SetValue(NewProp_FunctionNameToBind, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/ComponentDelegateBinding.h"));
			MetaData->SetValue(NewProp_FunctionNameToBind, TEXT("ToolTip"), TEXT("Name of function that we want to bind to the delegate."));
			MetaData->SetValue(NewProp_DelegatePropertyName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/ComponentDelegateBinding.h"));
			MetaData->SetValue(NewProp_DelegatePropertyName, TEXT("ToolTip"), TEXT("Name of property on the component that we want to assign to."));
			MetaData->SetValue(NewProp_ComponentPropertyName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/ComponentDelegateBinding.h"));
			MetaData->SetValue(NewProp_ComponentPropertyName, TEXT("ToolTip"), TEXT("Name of component property that contains delegate we want to assign to."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FBlueprintComponentDelegateBinding_CRC() { return 418946608U; }
	UClass* Z_Construct_UClass_UComponentDelegateBinding_NoRegister()
	{
		return UComponentDelegateBinding::StaticClass();
	}
	UClass* Z_Construct_UClass_UComponentDelegateBinding()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UDynamicBlueprintBinding();
			Z_Construct_UPackage_Engine();
			OuterClass = UComponentDelegateBinding::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ComponentDelegateBindings = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ComponentDelegateBindings"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ComponentDelegateBindings, UComponentDelegateBinding), 0x0000000000000000);
				UProperty* NewProp_ComponentDelegateBindings_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ComponentDelegateBindings, TEXT("ComponentDelegateBindings"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FBlueprintComponentDelegateBinding());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/ComponentDelegateBinding.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/ComponentDelegateBinding.h"));
				MetaData->SetValue(NewProp_ComponentDelegateBindings, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/ComponentDelegateBinding.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UComponentDelegateBinding(Z_Construct_UClass_UComponentDelegateBinding, TEXT("UComponentDelegateBinding"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UComponentDelegateBinding);
	UScriptStruct* Z_Construct_UScriptStruct_FBlueprintInputDelegateBinding()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FBlueprintInputDelegateBinding_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("BlueprintInputDelegateBinding"), sizeof(FBlueprintInputDelegateBinding), Get_Z_Construct_UScriptStruct_FBlueprintInputDelegateBinding_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BlueprintInputDelegateBinding"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FBlueprintInputDelegateBinding>, EStructFlags(0x00000201));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverrideParentBinding, FBlueprintInputDelegateBinding, uint8);
			UProperty* NewProp_bOverrideParentBinding = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bOverrideParentBinding"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverrideParentBinding, FBlueprintInputDelegateBinding), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bOverrideParentBinding, FBlueprintInputDelegateBinding), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bExecuteWhenPaused, FBlueprintInputDelegateBinding, uint8);
			UProperty* NewProp_bExecuteWhenPaused = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bExecuteWhenPaused"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bExecuteWhenPaused, FBlueprintInputDelegateBinding), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bExecuteWhenPaused, FBlueprintInputDelegateBinding), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bConsumeInput, FBlueprintInputDelegateBinding, uint8);
			UProperty* NewProp_bConsumeInput = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bConsumeInput"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bConsumeInput, FBlueprintInputDelegateBinding), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bConsumeInput, FBlueprintInputDelegateBinding), sizeof(uint8), false);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/InputDelegateBinding.h"));
			MetaData->SetValue(NewProp_bOverrideParentBinding, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/InputDelegateBinding.h"));
			MetaData->SetValue(NewProp_bExecuteWhenPaused, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/InputDelegateBinding.h"));
			MetaData->SetValue(NewProp_bConsumeInput, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/InputDelegateBinding.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FBlueprintInputDelegateBinding_CRC() { return 1162735610U; }
	UClass* Z_Construct_UClass_UInputDelegateBinding_NoRegister()
	{
		return UInputDelegateBinding::StaticClass();
	}
	UClass* Z_Construct_UClass_UInputDelegateBinding()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UDynamicBlueprintBinding();
			Z_Construct_UPackage_Engine();
			OuterClass = UInputDelegateBinding::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/InputDelegateBinding.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/InputDelegateBinding.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UInputDelegateBinding(Z_Construct_UClass_UInputDelegateBinding, TEXT("UInputDelegateBinding"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UInputDelegateBinding);
	UScriptStruct* Z_Construct_UScriptStruct_FBlueprintInputActionDelegateBinding()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FBlueprintInputActionDelegateBinding_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("BlueprintInputActionDelegateBinding"), sizeof(FBlueprintInputActionDelegateBinding), Get_Z_Construct_UScriptStruct_FBlueprintInputActionDelegateBinding_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BlueprintInputActionDelegateBinding"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FBlueprintInputDelegateBinding(), new UScriptStruct::TCppStructOps<FBlueprintInputActionDelegateBinding>, EStructFlags(0x00000201));
			UProperty* NewProp_FunctionNameToBind = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("FunctionNameToBind"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(FunctionNameToBind, FBlueprintInputActionDelegateBinding), 0x0000000000000000);
			UProperty* NewProp_InputKeyEvent = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("InputKeyEvent"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(InputKeyEvent, FBlueprintInputActionDelegateBinding), 0x0000000000000000, Z_Construct_UEnum_Engine_EInputEvent());
			UProperty* NewProp_InputActionName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("InputActionName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(InputActionName, FBlueprintInputActionDelegateBinding), 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/InputActionDelegateBinding.h"));
			MetaData->SetValue(NewProp_FunctionNameToBind, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/InputActionDelegateBinding.h"));
			MetaData->SetValue(NewProp_InputKeyEvent, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/InputActionDelegateBinding.h"));
			MetaData->SetValue(NewProp_InputActionName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/InputActionDelegateBinding.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FBlueprintInputActionDelegateBinding_CRC() { return 112082856U; }
	UClass* Z_Construct_UClass_UInputActionDelegateBinding_NoRegister()
	{
		return UInputActionDelegateBinding::StaticClass();
	}
	UClass* Z_Construct_UClass_UInputActionDelegateBinding()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UInputDelegateBinding();
			Z_Construct_UPackage_Engine();
			OuterClass = UInputActionDelegateBinding::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_InputActionDelegateBindings = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InputActionDelegateBindings"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(InputActionDelegateBindings, UInputActionDelegateBinding), 0x0000000000000000);
				UProperty* NewProp_InputActionDelegateBindings_Inner = new(EC_InternalUseOnlyConstructor, NewProp_InputActionDelegateBindings, TEXT("InputActionDelegateBindings"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FBlueprintInputActionDelegateBinding());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/InputActionDelegateBinding.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/InputActionDelegateBinding.h"));
				MetaData->SetValue(NewProp_InputActionDelegateBindings, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/InputActionDelegateBinding.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UInputActionDelegateBinding(Z_Construct_UClass_UInputActionDelegateBinding, TEXT("UInputActionDelegateBinding"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UInputActionDelegateBinding);
	UScriptStruct* Z_Construct_UScriptStruct_FBlueprintInputAxisDelegateBinding()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FBlueprintInputAxisDelegateBinding_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("BlueprintInputAxisDelegateBinding"), sizeof(FBlueprintInputAxisDelegateBinding), Get_Z_Construct_UScriptStruct_FBlueprintInputAxisDelegateBinding_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BlueprintInputAxisDelegateBinding"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FBlueprintInputDelegateBinding(), new UScriptStruct::TCppStructOps<FBlueprintInputAxisDelegateBinding>, EStructFlags(0x00000201));
			UProperty* NewProp_FunctionNameToBind = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("FunctionNameToBind"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(FunctionNameToBind, FBlueprintInputAxisDelegateBinding), 0x0000000000000000);
			UProperty* NewProp_InputAxisName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("InputAxisName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(InputAxisName, FBlueprintInputAxisDelegateBinding), 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/InputAxisDelegateBinding.h"));
			MetaData->SetValue(NewProp_FunctionNameToBind, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/InputAxisDelegateBinding.h"));
			MetaData->SetValue(NewProp_InputAxisName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/InputAxisDelegateBinding.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FBlueprintInputAxisDelegateBinding_CRC() { return 1987844293U; }
	UClass* Z_Construct_UClass_UInputAxisDelegateBinding_NoRegister()
	{
		return UInputAxisDelegateBinding::StaticClass();
	}
	UClass* Z_Construct_UClass_UInputAxisDelegateBinding()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UInputDelegateBinding();
			Z_Construct_UPackage_Engine();
			OuterClass = UInputAxisDelegateBinding::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_InputAxisDelegateBindings = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InputAxisDelegateBindings"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(InputAxisDelegateBindings, UInputAxisDelegateBinding), 0x0000000000000000);
				UProperty* NewProp_InputAxisDelegateBindings_Inner = new(EC_InternalUseOnlyConstructor, NewProp_InputAxisDelegateBindings, TEXT("InputAxisDelegateBindings"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FBlueprintInputAxisDelegateBinding());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/InputAxisDelegateBinding.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/InputAxisDelegateBinding.h"));
				MetaData->SetValue(NewProp_InputAxisDelegateBindings, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/InputAxisDelegateBinding.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UInputAxisDelegateBinding(Z_Construct_UClass_UInputAxisDelegateBinding, TEXT("UInputAxisDelegateBinding"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UInputAxisDelegateBinding);
	UScriptStruct* Z_Construct_UScriptStruct_FBlueprintInputAxisKeyDelegateBinding()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FBlueprintInputAxisKeyDelegateBinding_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("BlueprintInputAxisKeyDelegateBinding"), sizeof(FBlueprintInputAxisKeyDelegateBinding), Get_Z_Construct_UScriptStruct_FBlueprintInputAxisKeyDelegateBinding_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BlueprintInputAxisKeyDelegateBinding"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FBlueprintInputDelegateBinding(), new UScriptStruct::TCppStructOps<FBlueprintInputAxisKeyDelegateBinding>, EStructFlags(0x00000201));
			UProperty* NewProp_FunctionNameToBind = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("FunctionNameToBind"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(FunctionNameToBind, FBlueprintInputAxisKeyDelegateBinding), 0x0000000000000000);
			UProperty* NewProp_AxisKey = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("AxisKey"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(AxisKey, FBlueprintInputAxisKeyDelegateBinding), 0x0000000000000000, Z_Construct_UScriptStruct_FKey());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/InputAxisKeyDelegateBinding.h"));
			MetaData->SetValue(NewProp_FunctionNameToBind, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/InputAxisKeyDelegateBinding.h"));
			MetaData->SetValue(NewProp_AxisKey, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/InputAxisKeyDelegateBinding.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FBlueprintInputAxisKeyDelegateBinding_CRC() { return 2240913458U; }
	UClass* Z_Construct_UClass_UInputAxisKeyDelegateBinding_NoRegister()
	{
		return UInputAxisKeyDelegateBinding::StaticClass();
	}
	UClass* Z_Construct_UClass_UInputAxisKeyDelegateBinding()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UInputDelegateBinding();
			Z_Construct_UPackage_Engine();
			OuterClass = UInputAxisKeyDelegateBinding::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_InputAxisKeyDelegateBindings = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InputAxisKeyDelegateBindings"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(InputAxisKeyDelegateBindings, UInputAxisKeyDelegateBinding), 0x0000000000000000);
				UProperty* NewProp_InputAxisKeyDelegateBindings_Inner = new(EC_InternalUseOnlyConstructor, NewProp_InputAxisKeyDelegateBindings, TEXT("InputAxisKeyDelegateBindings"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FBlueprintInputAxisKeyDelegateBinding());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/InputAxisKeyDelegateBinding.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/InputAxisKeyDelegateBinding.h"));
				MetaData->SetValue(NewProp_InputAxisKeyDelegateBindings, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/InputAxisKeyDelegateBinding.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UInputAxisKeyDelegateBinding(Z_Construct_UClass_UInputAxisKeyDelegateBinding, TEXT("UInputAxisKeyDelegateBinding"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UInputAxisKeyDelegateBinding);
	UClass* Z_Construct_UClass_UInputVectorAxisDelegateBinding_NoRegister()
	{
		return UInputVectorAxisDelegateBinding::StaticClass();
	}
	UClass* Z_Construct_UClass_UInputVectorAxisDelegateBinding()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UInputAxisKeyDelegateBinding();
			Z_Construct_UPackage_Engine();
			OuterClass = UInputVectorAxisDelegateBinding::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/InputVectorAxisDelegateBinding.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/InputVectorAxisDelegateBinding.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UInputVectorAxisDelegateBinding(Z_Construct_UClass_UInputVectorAxisDelegateBinding, TEXT("UInputVectorAxisDelegateBinding"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UInputVectorAxisDelegateBinding);
	UScriptStruct* Z_Construct_UScriptStruct_FBlueprintInputKeyDelegateBinding()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FBlueprintInputKeyDelegateBinding_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("BlueprintInputKeyDelegateBinding"), sizeof(FBlueprintInputKeyDelegateBinding), Get_Z_Construct_UScriptStruct_FBlueprintInputKeyDelegateBinding_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BlueprintInputKeyDelegateBinding"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FBlueprintInputDelegateBinding(), new UScriptStruct::TCppStructOps<FBlueprintInputKeyDelegateBinding>, EStructFlags(0x00000201));
			UProperty* NewProp_FunctionNameToBind = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("FunctionNameToBind"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(FunctionNameToBind, FBlueprintInputKeyDelegateBinding), 0x0000000000000000);
			UProperty* NewProp_InputKeyEvent = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("InputKeyEvent"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(InputKeyEvent, FBlueprintInputKeyDelegateBinding), 0x0000000000000000, Z_Construct_UEnum_Engine_EInputEvent());
			UProperty* NewProp_InputChord = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("InputChord"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InputChord, FBlueprintInputKeyDelegateBinding), 0x0000000000000000, Z_Construct_UScriptStruct_FInputChord());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/InputKeyDelegateBinding.h"));
			MetaData->SetValue(NewProp_FunctionNameToBind, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/InputKeyDelegateBinding.h"));
			MetaData->SetValue(NewProp_InputKeyEvent, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/InputKeyDelegateBinding.h"));
			MetaData->SetValue(NewProp_InputChord, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/InputKeyDelegateBinding.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FBlueprintInputKeyDelegateBinding_CRC() { return 1006032902U; }
	UClass* Z_Construct_UClass_UInputKeyDelegateBinding_NoRegister()
	{
		return UInputKeyDelegateBinding::StaticClass();
	}
	UClass* Z_Construct_UClass_UInputKeyDelegateBinding()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UInputDelegateBinding();
			Z_Construct_UPackage_Engine();
			OuterClass = UInputKeyDelegateBinding::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_InputKeyDelegateBindings = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InputKeyDelegateBindings"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(InputKeyDelegateBindings, UInputKeyDelegateBinding), 0x0000000000000000);
				UProperty* NewProp_InputKeyDelegateBindings_Inner = new(EC_InternalUseOnlyConstructor, NewProp_InputKeyDelegateBindings, TEXT("InputKeyDelegateBindings"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FBlueprintInputKeyDelegateBinding());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/InputKeyDelegateBinding.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/InputKeyDelegateBinding.h"));
				MetaData->SetValue(NewProp_InputKeyDelegateBindings, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/InputKeyDelegateBinding.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UInputKeyDelegateBinding(Z_Construct_UClass_UInputKeyDelegateBinding, TEXT("UInputKeyDelegateBinding"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UInputKeyDelegateBinding);
	UScriptStruct* Z_Construct_UScriptStruct_FBlueprintInputTouchDelegateBinding()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FBlueprintInputTouchDelegateBinding_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("BlueprintInputTouchDelegateBinding"), sizeof(FBlueprintInputTouchDelegateBinding), Get_Z_Construct_UScriptStruct_FBlueprintInputTouchDelegateBinding_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BlueprintInputTouchDelegateBinding"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FBlueprintInputDelegateBinding(), new UScriptStruct::TCppStructOps<FBlueprintInputTouchDelegateBinding>, EStructFlags(0x00000201));
			UProperty* NewProp_FunctionNameToBind = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("FunctionNameToBind"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(FunctionNameToBind, FBlueprintInputTouchDelegateBinding), 0x0000000000000000);
			UProperty* NewProp_InputKeyEvent = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("InputKeyEvent"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(InputKeyEvent, FBlueprintInputTouchDelegateBinding), 0x0000000000000000, Z_Construct_UEnum_Engine_EInputEvent());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/InputTouchDelegateBinding.h"));
			MetaData->SetValue(NewProp_FunctionNameToBind, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/InputTouchDelegateBinding.h"));
			MetaData->SetValue(NewProp_InputKeyEvent, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/InputTouchDelegateBinding.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FBlueprintInputTouchDelegateBinding_CRC() { return 2704206613U; }
	UClass* Z_Construct_UClass_UInputTouchDelegateBinding_NoRegister()
	{
		return UInputTouchDelegateBinding::StaticClass();
	}
	UClass* Z_Construct_UClass_UInputTouchDelegateBinding()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UInputDelegateBinding();
			Z_Construct_UPackage_Engine();
			OuterClass = UInputTouchDelegateBinding::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_InputTouchDelegateBindings = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InputTouchDelegateBindings"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(InputTouchDelegateBindings, UInputTouchDelegateBinding), 0x0000000000000000);
				UProperty* NewProp_InputTouchDelegateBindings_Inner = new(EC_InternalUseOnlyConstructor, NewProp_InputTouchDelegateBindings, TEXT("InputTouchDelegateBindings"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FBlueprintInputTouchDelegateBinding());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/InputTouchDelegateBinding.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/InputTouchDelegateBinding.h"));
				MetaData->SetValue(NewProp_InputTouchDelegateBindings, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/InputTouchDelegateBinding.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UInputTouchDelegateBinding(Z_Construct_UClass_UInputTouchDelegateBinding, TEXT("UInputTouchDelegateBinding"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UInputTouchDelegateBinding);
	UScriptStruct* Z_Construct_UScriptStruct_FGraphReference()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FGraphReference_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("GraphReference"), sizeof(FGraphReference), Get_Z_Construct_UScriptStruct_FGraphReference_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GraphReference"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FGraphReference>, EStructFlags(0x00000201));
			UProperty* NewProp_GraphGuid = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("GraphGuid"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(GraphGuid, FGraphReference), 0x0000080000000000, Z_Construct_UScriptStruct_FGuid());
			UProperty* NewProp_GraphBlueprint = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("GraphBlueprint"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(GraphBlueprint, FGraphReference), 0x0000080000000000, Z_Construct_UClass_UBlueprint_NoRegister());
			UProperty* NewProp_MacroGraph = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MacroGraph"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(MacroGraph, FGraphReference), 0x0000080000000000, Z_Construct_UClass_UEdGraph_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/EdGraph/EdGraph.h"));
			MetaData->SetValue(NewProp_GraphGuid, TEXT("ModuleRelativePath"), TEXT("Classes/EdGraph/EdGraph.h"));
			MetaData->SetValue(NewProp_GraphGuid, TEXT("ToolTip"), TEXT("The graph GUID so we can refind it if it has been renamed"));
			MetaData->SetValue(NewProp_GraphBlueprint, TEXT("ModuleRelativePath"), TEXT("Classes/EdGraph/EdGraph.h"));
			MetaData->SetValue(NewProp_GraphBlueprint, TEXT("ToolTip"), TEXT("The blueprint the graph is contained within"));
			MetaData->SetValue(NewProp_MacroGraph, TEXT("ModuleRelativePath"), TEXT("Classes/EdGraph/EdGraph.h"));
			MetaData->SetValue(NewProp_MacroGraph, TEXT("ToolTip"), TEXT("Reference to the actual graph"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FGraphReference_CRC() { return 109431882U; }
	UClass* Z_Construct_UClass_UEdGraph_NoRegister()
	{
		return UEdGraph::StaticClass();
	}
	UClass* Z_Construct_UClass_UEdGraph()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UEdGraph::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_InterfaceGuid = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InterfaceGuid"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InterfaceGuid, UEdGraph), 0x0000000800000000, Z_Construct_UScriptStruct_FGuid());
				UProperty* NewProp_GraphGuid = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GraphGuid"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(GraphGuid, UEdGraph), 0x0000000800000000, Z_Construct_UScriptStruct_FGuid());
				UProperty* NewProp_SubGraphs = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SubGraphs"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(SubGraphs, UEdGraph), 0x0000000800000000);
				UProperty* NewProp_SubGraphs_Inner = new(EC_InternalUseOnlyConstructor, NewProp_SubGraphs, TEXT("SubGraphs"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000800000000, Z_Construct_UClass_UEdGraph_NoRegister());
#endif // WITH_EDITORONLY_DATA
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAllowRenaming, UEdGraph, uint8);
				UProperty* NewProp_bAllowRenaming = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAllowRenaming"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAllowRenaming, UEdGraph), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bAllowRenaming, UEdGraph), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAllowDeletion, UEdGraph, uint8);
				UProperty* NewProp_bAllowDeletion = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAllowDeletion"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAllowDeletion, UEdGraph), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bAllowDeletion, UEdGraph), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEditable, UEdGraph, uint8);
				UProperty* NewProp_bEditable = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bEditable"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEditable, UEdGraph), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bEditable, UEdGraph), sizeof(uint8), false);
				UProperty* NewProp_Nodes = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Nodes"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Nodes, UEdGraph), 0x0000000000000000);
				UProperty* NewProp_Nodes_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Nodes, TEXT("Nodes"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UEdGraphNode_NoRegister());
				UProperty* NewProp_Schema = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Schema"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(Schema, UEdGraph), 0x0004000000000000, Z_Construct_UClass_UEdGraphSchema_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("EdGraph/EdGraph.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/EdGraph/EdGraph.h"));
				MetaData->SetValue(NewProp_InterfaceGuid, TEXT("ModuleRelativePath"), TEXT("Classes/EdGraph/EdGraph.h"));
				MetaData->SetValue(NewProp_InterfaceGuid, TEXT("ToolTip"), TEXT("Guid of interface graph this graph comes from (used for conforming)"));
				MetaData->SetValue(NewProp_GraphGuid, TEXT("ModuleRelativePath"), TEXT("Classes/EdGraph/EdGraph.h"));
				MetaData->SetValue(NewProp_GraphGuid, TEXT("ToolTip"), TEXT("Guid for this graph"));
				MetaData->SetValue(NewProp_SubGraphs, TEXT("ModuleRelativePath"), TEXT("Classes/EdGraph/EdGraph.h"));
				MetaData->SetValue(NewProp_SubGraphs, TEXT("ToolTip"), TEXT("Child graphs that are a part of this graph; the separation is purely visual"));
				MetaData->SetValue(NewProp_bAllowRenaming, TEXT("ModuleRelativePath"), TEXT("Classes/EdGraph/EdGraph.h"));
				MetaData->SetValue(NewProp_bAllowRenaming, TEXT("ToolTip"), TEXT("If true, graph can be renamed; Note: Graph can also be renamed if bAllowDeletion is true currently"));
				MetaData->SetValue(NewProp_bAllowDeletion, TEXT("ModuleRelativePath"), TEXT("Classes/EdGraph/EdGraph.h"));
				MetaData->SetValue(NewProp_bAllowDeletion, TEXT("ToolTip"), TEXT("If true, graph can be deleted from the whatever container it is in"));
				MetaData->SetValue(NewProp_bEditable, TEXT("ModuleRelativePath"), TEXT("Classes/EdGraph/EdGraph.h"));
				MetaData->SetValue(NewProp_bEditable, TEXT("ToolTip"), TEXT("If true, graph can be edited by the user"));
				MetaData->SetValue(NewProp_Nodes, TEXT("ModuleRelativePath"), TEXT("Classes/EdGraph/EdGraph.h"));
				MetaData->SetValue(NewProp_Nodes, TEXT("ToolTip"), TEXT("Set of all nodes in this graph"));
				MetaData->SetValue(NewProp_Schema, TEXT("ModuleRelativePath"), TEXT("Classes/EdGraph/EdGraph.h"));
				MetaData->SetValue(NewProp_Schema, TEXT("ToolTip"), TEXT("The schema that this graph obeys"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UEdGraph(Z_Construct_UClass_UEdGraph, TEXT("UEdGraph"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UEdGraph);
	UClass* Z_Construct_UClass_UEdGraphNode_Documentation_NoRegister()
	{
		return UEdGraphNode_Documentation::StaticClass();
	}
	UClass* Z_Construct_UClass_UEdGraphNode_Documentation()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UEdGraphNode();
			Z_Construct_UPackage_Engine();
			OuterClass = UEdGraphNode_Documentation::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Excerpt = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Excerpt"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Excerpt, UEdGraphNode_Documentation), 0x0000000000000000);
				UProperty* NewProp_Link = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Link"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Link, UEdGraphNode_Documentation), 0x0000000000000000);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("EdGraph/EdGraphNode_Documentation.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/EdGraph/EdGraphNode_Documentation.h"));
				MetaData->SetValue(NewProp_Excerpt, TEXT("DisplayName"), TEXT("Documentation Excerpt"));
				MetaData->SetValue(NewProp_Excerpt, TEXT("ModuleRelativePath"), TEXT("Classes/EdGraph/EdGraphNode_Documentation.h"));
				MetaData->SetValue(NewProp_Excerpt, TEXT("ToolTip"), TEXT("Documentation Excerpt"));
				MetaData->SetValue(NewProp_Link, TEXT("DisplayName"), TEXT("Documentation Link"));
				MetaData->SetValue(NewProp_Link, TEXT("ModuleRelativePath"), TEXT("Classes/EdGraph/EdGraphNode_Documentation.h"));
				MetaData->SetValue(NewProp_Link, TEXT("ToolTip"), TEXT("Documentation Link"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UEdGraphNode_Documentation(Z_Construct_UClass_UEdGraphNode_Documentation, TEXT("UEdGraphNode_Documentation"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UEdGraphNode_Documentation);
	UEnum* Z_Construct_UEnum_Engine_ECanCreateConnectionResponse()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_ECanCreateConnectionResponse_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ECanCreateConnectionResponse"), 0, Get_Z_Construct_UEnum_Engine_ECanCreateConnectionResponse_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ECanCreateConnectionResponse"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("CONNECT_RESPONSE_MAKE")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("CONNECT_RESPONSE_DISALLOW")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("CONNECT_RESPONSE_BREAK_OTHERS_A")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("CONNECT_RESPONSE_BREAK_OTHERS_B")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("CONNECT_RESPONSE_BREAK_OTHERS_AB")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("CONNECT_RESPONSE_MAKE_WITH_CONVERSION_NODE")), 5));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("CONNECT_RESPONSE_MAX")), 6));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("CONNECT_RESPONSE_BREAK_OTHERS_A.ToolTip"), TEXT("Break all existing connections on A and make the new connection (it's exclusive); display the message string as a warning/notice."));
			MetaData->SetValue(ReturnEnum, TEXT("CONNECT_RESPONSE_BREAK_OTHERS_AB.ToolTip"), TEXT("Break all existing connections on A and B, and make the new connection (it's exclusive); display the message string as a warning/notice."));
			MetaData->SetValue(ReturnEnum, TEXT("CONNECT_RESPONSE_BREAK_OTHERS_B.ToolTip"), TEXT("Break all existing connections on B and make the new connection (it's exclusive); display the message string as a warning/notice."));
			MetaData->SetValue(ReturnEnum, TEXT("CONNECT_RESPONSE_DISALLOW.ToolTip"), TEXT("Cannot make this connection; display the message string as an error."));
			MetaData->SetValue(ReturnEnum, TEXT("CONNECT_RESPONSE_MAKE.ToolTip"), TEXT("Make the connection; there are no issues (message string is displayed if not empty)."));
			MetaData->SetValue(ReturnEnum, TEXT("CONNECT_RESPONSE_MAKE_WITH_CONVERSION_NODE.ToolTip"), TEXT("Make the connection via an intermediate cast node, or some other conversion node."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/EdGraph/EdGraphSchema.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("This is the type of response the graph editor should take when making a connection"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_ECanCreateConnectionResponse_CRC() { return 1823566701U; }
	UEnum* Z_Construct_UEnum_Engine_EGraphType()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EGraphType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EGraphType"), 0, Get_Z_Construct_UEnum_Engine_EGraphType_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EGraphType"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("GT_Function")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("GT_Ubergraph")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("GT_Macro")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("GT_Animation")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("GT_StateMachine")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("GT_MAX")), 5));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/EdGraph/EdGraphSchema.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Distinguishes between different graph types. Graphs can have different properties; for example: functions have one entry point, ubergraphs can have multiples."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EGraphType_CRC() { return 3039473644U; }
	UScriptStruct* Z_Construct_UScriptStruct_FEdGraphSchemaAction_NewNode()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FEdGraphSchemaAction_NewNode_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("EdGraphSchemaAction_NewNode"), sizeof(FEdGraphSchemaAction_NewNode), Get_Z_Construct_UScriptStruct_FEdGraphSchemaAction_NewNode_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EdGraphSchemaAction_NewNode"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FEdGraphSchemaAction(), new UScriptStruct::TCppStructOps<FEdGraphSchemaAction_NewNode>, EStructFlags(0x00000201));
			UProperty* NewProp_NodeTemplate = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("NodeTemplate"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(NodeTemplate, FEdGraphSchemaAction_NewNode), 0x0000000000000000, Z_Construct_UClass_UEdGraphNode_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/EdGraph/EdGraphSchema.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Action to add a node to the graph"));
			MetaData->SetValue(NewProp_NodeTemplate, TEXT("ModuleRelativePath"), TEXT("Classes/EdGraph/EdGraphSchema.h"));
			MetaData->SetValue(NewProp_NodeTemplate, TEXT("ToolTip"), TEXT("Template of node we want to create"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FEdGraphSchemaAction_NewNode_CRC() { return 500125538U; }
	UScriptStruct* Z_Construct_UScriptStruct_FEdGraphSchemaAction()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FEdGraphSchemaAction_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("EdGraphSchemaAction"), sizeof(FEdGraphSchemaAction), Get_Z_Construct_UScriptStruct_FEdGraphSchemaAction_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EdGraphSchemaAction"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FEdGraphSchemaAction>, EStructFlags(0x00000201));
			UProperty* NewProp_SectionID = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SectionID"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(SectionID, FEdGraphSchemaAction), 0x0000000000000000);
			UProperty* NewProp_Grouping = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Grouping"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Grouping, FEdGraphSchemaAction), 0x0000000000000000);
			UProperty* NewProp_Keywords = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Keywords"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(Keywords, FEdGraphSchemaAction), 0x0000000000000000);
			UProperty* NewProp_Category = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Category"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(Category, FEdGraphSchemaAction), 0x0000000000000000);
			UProperty* NewProp_TooltipDescription = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TooltipDescription"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(TooltipDescription, FEdGraphSchemaAction), 0x0000000000000000);
			UProperty* NewProp_MenuDescription = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MenuDescription"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(MenuDescription, FEdGraphSchemaAction), 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/EdGraph/EdGraphSchema.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("This structure represents a context dependent action, with sufficient information for the schema to perform it."));
			MetaData->SetValue(NewProp_SectionID, TEXT("ModuleRelativePath"), TEXT("Classes/EdGraph/EdGraphSchema.h"));
			MetaData->SetValue(NewProp_SectionID, TEXT("ToolTip"), TEXT("Section ID of the action list in which this action belongs."));
			MetaData->SetValue(NewProp_Grouping, TEXT("ModuleRelativePath"), TEXT("Classes/EdGraph/EdGraphSchema.h"));
			MetaData->SetValue(NewProp_Grouping, TEXT("ToolTip"), TEXT("This is a priority number for overriding alphabetical order in the action list (higher value  == higher in the list)."));
			MetaData->SetValue(NewProp_Keywords, TEXT("ModuleRelativePath"), TEXT("Classes/EdGraph/EdGraphSchema.h"));
			MetaData->SetValue(NewProp_Keywords, TEXT("ToolTip"), TEXT("This is just an arbitrary dump of extra text that search will match on, in addition to the description and tooltip, e.g., Add might have the keyword Math."));
			MetaData->SetValue(NewProp_Category, TEXT("ModuleRelativePath"), TEXT("Classes/EdGraph/EdGraphSchema.h"));
			MetaData->SetValue(NewProp_Category, TEXT("ToolTip"), TEXT("This is the UI centric category the action fits in (e.g., Functions, Variables). Use this instead of the NodeType.NodeCategory because multiple NodeCategories might visually belong together."));
			MetaData->SetValue(NewProp_TooltipDescription, TEXT("ModuleRelativePath"), TEXT("Classes/EdGraph/EdGraphSchema.h"));
			MetaData->SetValue(NewProp_TooltipDescription, TEXT("ToolTip"), TEXT("The tooltip text that should be displayed for this node in the creation menu."));
			MetaData->SetValue(NewProp_MenuDescription, TEXT("ModuleRelativePath"), TEXT("Classes/EdGraph/EdGraphSchema.h"));
			MetaData->SetValue(NewProp_MenuDescription, TEXT("ToolTip"), TEXT("The menu text that should be displayed for this node in the creation menu."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FEdGraphSchemaAction_CRC() { return 229322106U; }
	UClass* Z_Construct_UClass_UEdGraphSchema_NoRegister()
	{
		return UEdGraphSchema::StaticClass();
	}
	UClass* Z_Construct_UClass_UEdGraphSchema()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UEdGraphSchema::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("EdGraph/EdGraphSchema.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/EdGraph/EdGraphSchema.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UEdGraphSchema(Z_Construct_UClass_UEdGraphSchema, TEXT("UEdGraphSchema"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UEdGraphSchema);
	UClass* Z_Construct_UClass_UImportantToggleSettingInterface_NoRegister()
	{
		return UImportantToggleSettingInterface::StaticClass();
	}
	UClass* Z_Construct_UClass_UImportantToggleSettingInterface()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			UInterface::StaticClass();
			Z_Construct_UPackage_Engine();
			OuterClass = UImportantToggleSettingInterface::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20084081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("CannotImplementInterfaceInBlueprint"), TEXT(""));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UImportantToggleSettingInterface(Z_Construct_UClass_UImportantToggleSettingInterface, TEXT("UImportantToggleSettingInterface"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UImportantToggleSettingInterface);
	UClass* Z_Construct_UClass_UEndUserSettings_NoRegister()
	{
		return UEndUserSettings::StaticClass();
	}
	UClass* Z_Construct_UClass_UEndUserSettings()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UEndUserSettings::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080086;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSendAnonymousUsageDataToEpic, UEndUserSettings, bool);
				UProperty* NewProp_bSendAnonymousUsageDataToEpic = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bSendAnonymousUsageDataToEpic"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSendAnonymousUsageDataToEpic, UEndUserSettings), 0x0000000000004001, CPP_BOOL_PROPERTY_BITMASK(bSendAnonymousUsageDataToEpic, UEndUserSettings), sizeof(bool), true);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->Interfaces.Add(FImplementedInterface(Z_Construct_UClass_UImportantToggleSettingInterface_NoRegister(), VTABLE_OFFSET(UEndUserSettings, IImportantToggleSettingInterface), false ));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/EndUserSettings.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/EndUserSettings.h"));
				MetaData->SetValue(NewProp_bSendAnonymousUsageDataToEpic, TEXT("Category"), TEXT("Privacy"));
				MetaData->SetValue(NewProp_bSendAnonymousUsageDataToEpic, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/EndUserSettings.h"));
				MetaData->SetValue(NewProp_bSendAnonymousUsageDataToEpic, TEXT("ToolTip"), TEXT("Determines whether the engine sends anonymous usage information about game sessions to Epic Games in order to improve Unreal Engine. Information will never be shared with 3rd parties."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UEndUserSettings(Z_Construct_UClass_UEndUserSettings, TEXT("UEndUserSettings"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UEndUserSettings);
	UEnum* Z_Construct_UEnum_Engine_EConsoleType()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EConsoleType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EConsoleType"), 0, Get_Z_Construct_UEnum_Engine_EConsoleType_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EConsoleType"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("CONSOLE_Any")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("CONSOLE_Mobile")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("CONSOLE_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EConsoleType_CRC() { return 2973505728U; }
	UEnum* Z_Construct_UEnum_Engine_ETransitionType()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_ETransitionType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ETransitionType"), 0, Get_Z_Construct_UEnum_Engine_ETransitionType_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ETransitionType"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TT_None")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TT_Paused")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TT_Loading")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TT_Saving")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TT_Connecting")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TT_Precaching")), 5));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TT_WaitingToConnect")), 6));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TT_MAX")), 7));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Enumerates transition types."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_ETransitionType_CRC() { return 2861862616U; }
	UEnum* Z_Construct_UEnum_Engine_EFullyLoadPackageType()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EFullyLoadPackageType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EFullyLoadPackageType"), 0, Get_Z_Construct_UEnum_Engine_EFullyLoadPackageType_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EFullyLoadPackageType"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("FULLYLOAD_Map")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("FULLYLOAD_Game_PreLoadClass")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("FULLYLOAD_Game_PostLoadClass")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("FULLYLOAD_Always")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("FULLYLOAD_Mutator")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("FULLYLOAD_MAX")), 5));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("FULLYLOAD_Always.ToolTip"), TEXT("Fully load the package as long as the DLC is loaded."));
			MetaData->SetValue(ReturnEnum, TEXT("FULLYLOAD_Game_PostLoadClass.ToolTip"), TEXT("Load the packages after the game class in Tag is loaded. Will work no matter how game is specified in UWorld::SetGameMode. Useful for modifying shipping gametypes by loading more packages (mutators, for instance)."));
			MetaData->SetValue(ReturnEnum, TEXT("FULLYLOAD_Game_PreLoadClass.ToolTip"), TEXT("Load the packages before the game class in Tag is loaded. The Game name MUST be specified in the URL (game=Package.GameName). Useful for loading packages needed to load the game type (a DLC game type, for instance)."));
			MetaData->SetValue(ReturnEnum, TEXT("FULLYLOAD_Map.ToolTip"), TEXT("Load the packages when the map in Tag is loaded."));
			MetaData->SetValue(ReturnEnum, TEXT("FULLYLOAD_Mutator.ToolTip"), TEXT("Load the package for a mutator that is active."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Enumerates types of fully loaded packages."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EFullyLoadPackageType_CRC() { return 1991980580U; }
	UScriptStruct* Z_Construct_UScriptStruct_FPluginRedirect()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FPluginRedirect_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("PluginRedirect"), sizeof(FPluginRedirect), Get_Z_Construct_UScriptStruct_FPluginRedirect_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PluginRedirect"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FPluginRedirect>, EStructFlags(0x00000001));
			UProperty* NewProp_NewPluginName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("NewPluginName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(NewPluginName, FPluginRedirect), 0x0000000000000000);
			UProperty* NewProp_OldPluginName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("OldPluginName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(OldPluginName, FPluginRedirect), 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
			MetaData->SetValue(NewProp_NewPluginName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
			MetaData->SetValue(NewProp_OldPluginName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FPluginRedirect_CRC() { return 3377788003U; }
	UScriptStruct* Z_Construct_UScriptStruct_FStructRedirect()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FStructRedirect_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("StructRedirect"), sizeof(FStructRedirect), Get_Z_Construct_UScriptStruct_FStructRedirect_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("StructRedirect"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FStructRedirect>, EStructFlags(0x00000001));
			UProperty* NewProp_NewStructName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("NewStructName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(NewStructName, FStructRedirect), 0x0000000000000000);
			UProperty* NewProp_OldStructName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("OldStructName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(OldStructName, FStructRedirect), 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
			MetaData->SetValue(NewProp_NewStructName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
			MetaData->SetValue(NewProp_OldStructName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FStructRedirect_CRC() { return 2018592033U; }
	UScriptStruct* Z_Construct_UScriptStruct_FClassRedirect()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FClassRedirect_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("ClassRedirect"), sizeof(FClassRedirect), Get_Z_Construct_UScriptStruct_FClassRedirect_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ClassRedirect"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FClassRedirect>, EStructFlags(0x00000001));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(InstanceOnly, FClassRedirect, bool);
			UProperty* NewProp_InstanceOnly = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("InstanceOnly"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(InstanceOnly, FClassRedirect), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(InstanceOnly, FClassRedirect), sizeof(bool), true);
			UProperty* NewProp_NewSubobjName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("NewSubobjName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(NewSubobjName, FClassRedirect), 0x0000000000000000);
			UProperty* NewProp_OldSubobjName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("OldSubobjName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(OldSubobjName, FClassRedirect), 0x0000000000000000);
			UProperty* NewProp_NewClassName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("NewClassName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(NewClassName, FClassRedirect), 0x0000000000000000);
			UProperty* NewProp_OldClassName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("OldClassName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(OldClassName, FClassRedirect), 0x0000000000000000);
			UProperty* NewProp_ObjectName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ObjectName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ObjectName, FClassRedirect), 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
			MetaData->SetValue(NewProp_InstanceOnly, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
			MetaData->SetValue(NewProp_NewSubobjName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
			MetaData->SetValue(NewProp_OldSubobjName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
			MetaData->SetValue(NewProp_NewClassName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
			MetaData->SetValue(NewProp_OldClassName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
			MetaData->SetValue(NewProp_ObjectName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FClassRedirect_CRC() { return 865693023U; }
	UScriptStruct* Z_Construct_UScriptStruct_FGameNameRedirect()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FGameNameRedirect_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("GameNameRedirect"), sizeof(FGameNameRedirect), Get_Z_Construct_UScriptStruct_FGameNameRedirect_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GameNameRedirect"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FGameNameRedirect>, EStructFlags(0x00000001));
			UProperty* NewProp_NewGameName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("NewGameName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(NewGameName, FGameNameRedirect), 0x0000000000000000);
			UProperty* NewProp_OldGameName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("OldGameName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(OldGameName, FGameNameRedirect), 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
			MetaData->SetValue(NewProp_NewGameName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
			MetaData->SetValue(NewProp_OldGameName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FGameNameRedirect_CRC() { return 818176266U; }
	UScriptStruct* Z_Construct_UScriptStruct_FScreenMessageString()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FScreenMessageString_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("ScreenMessageString"), sizeof(FScreenMessageString), Get_Z_Construct_UScriptStruct_FScreenMessageString_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ScreenMessageString"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FScreenMessageString>, EStructFlags(0x00000001));
			UProperty* NewProp_CurrentTimeDisplayed = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CurrentTimeDisplayed"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(CurrentTimeDisplayed, FScreenMessageString), 0x0000000000002000);
			UProperty* NewProp_TimeToDisplay = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TimeToDisplay"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(TimeToDisplay, FScreenMessageString), 0x0000000000002000);
			UProperty* NewProp_DisplayColor = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DisplayColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DisplayColor, FScreenMessageString), 0x0000000000002000, Z_Construct_UScriptStruct_FColor());
			UProperty* NewProp_ScreenMessage = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ScreenMessage"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ScreenMessage, FScreenMessageString), 0x0000000000002000);
			UProperty* NewProp_Key = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Key"), RF_Public|RF_Transient|RF_Native) UUInt64Property(CPP_PROPERTY_BASE(Key, FScreenMessageString), 0x0000000000002000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Helper struct for tracking on screen messages."));
			MetaData->SetValue(NewProp_CurrentTimeDisplayed, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
			MetaData->SetValue(NewProp_CurrentTimeDisplayed, TEXT("ToolTip"), TEXT("The number of frames it has been displayed so far."));
			MetaData->SetValue(NewProp_TimeToDisplay, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
			MetaData->SetValue(NewProp_TimeToDisplay, TEXT("ToolTip"), TEXT("The number of frames to display it."));
			MetaData->SetValue(NewProp_DisplayColor, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
			MetaData->SetValue(NewProp_DisplayColor, TEXT("ToolTip"), TEXT("The color to display the message in."));
			MetaData->SetValue(NewProp_ScreenMessage, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
			MetaData->SetValue(NewProp_ScreenMessage, TEXT("ToolTip"), TEXT("The message to display."));
			MetaData->SetValue(NewProp_Key, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
			MetaData->SetValue(NewProp_Key, TEXT("ToolTip"), TEXT("The 'key' for this message."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FScreenMessageString_CRC() { return 3885255575U; }
	UScriptStruct* Z_Construct_UScriptStruct_FDropNoteInfo()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FDropNoteInfo_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("DropNoteInfo"), sizeof(FDropNoteInfo), Get_Z_Construct_UScriptStruct_FDropNoteInfo_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DropNoteInfo"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FDropNoteInfo>, EStructFlags(0x00000001));
			UProperty* NewProp_Comment = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Comment"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Comment, FDropNoteInfo), 0x0000000000000000);
			UProperty* NewProp_Rotation = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Rotation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Rotation, FDropNoteInfo), 0x0000000000000000, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_Location = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Location"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Location, FDropNoteInfo), 0x0000000000000000, Z_Construct_UScriptStruct_FVector());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Info about one note dropped in the map during PIE."));
			MetaData->SetValue(NewProp_Comment, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
			MetaData->SetValue(NewProp_Comment, TEXT("ToolTip"), TEXT("Text to assign to Note actor in edited level."));
			MetaData->SetValue(NewProp_Rotation, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
			MetaData->SetValue(NewProp_Rotation, TEXT("ToolTip"), TEXT("Rotation to create Note actor in edited level."));
			MetaData->SetValue(NewProp_Location, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
			MetaData->SetValue(NewProp_Location, TEXT("ToolTip"), TEXT("Location to create Note actor in edited level."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FDropNoteInfo_CRC() { return 2141596392U; }
	UScriptStruct* Z_Construct_UScriptStruct_FStatColorMapping()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FStatColorMapping_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("StatColorMapping"), sizeof(FStatColorMapping), Get_Z_Construct_UScriptStruct_FStatColorMapping_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("StatColorMapping"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FStatColorMapping>, EStructFlags(0x00000001));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(DisableBlend, FStatColorMapping, uint8);
			UProperty* NewProp_DisableBlend = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DisableBlend"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(DisableBlend, FStatColorMapping), 0x0000000000044000, CPP_BOOL_PROPERTY_BITMASK(DisableBlend, FStatColorMapping), sizeof(uint8), false);
			UProperty* NewProp_ColorMap = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ColorMap"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ColorMap, FStatColorMapping), 0x0000000000044000);
			UProperty* NewProp_ColorMap_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ColorMap, TEXT("ColorMap"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000004000, Z_Construct_UScriptStruct_FStatColorMapEntry());
			UProperty* NewProp_StatName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("StatName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(StatName, FStatColorMapping), 0x0000000000044000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
			MetaData->SetValue(NewProp_DisableBlend, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
			MetaData->SetValue(NewProp_ColorMap, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
			MetaData->SetValue(NewProp_StatName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FStatColorMapping_CRC() { return 612431643U; }
	UScriptStruct* Z_Construct_UScriptStruct_FStatColorMapEntry()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FStatColorMapEntry_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("StatColorMapEntry"), sizeof(FStatColorMapEntry), Get_Z_Construct_UScriptStruct_FStatColorMapEntry_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("StatColorMapEntry"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FStatColorMapEntry>, EStructFlags(0x00000001));
			UProperty* NewProp_Out = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Out"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Out, FStatColorMapEntry), 0x0000000000044000, Z_Construct_UScriptStruct_FColor());
			UProperty* NewProp_In = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("In"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(In, FStatColorMapEntry), 0x0000000000044000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
			MetaData->SetValue(NewProp_Out, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
			MetaData->SetValue(NewProp_In, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FStatColorMapEntry_CRC() { return 191111564U; }
	UScriptStruct* Z_Construct_UScriptStruct_FWorldContext()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FWorldContext_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("WorldContext"), sizeof(FWorldContext), Get_Z_Construct_UScriptStruct_FWorldContext_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WorldContext"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FWorldContext>, EStructFlags(0x00000001));
			UProperty* NewProp_ActiveNetDrivers = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ActiveNetDrivers"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ActiveNetDrivers, FWorldContext), 0x0000000000002000);
			UProperty* NewProp_ActiveNetDrivers_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ActiveNetDrivers, TEXT("ActiveNetDrivers"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FNamedNetDriver());
			UProperty* NewProp_OwningGameInstance = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("OwningGameInstance"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(OwningGameInstance, FWorldContext), 0x0000000000000000, Z_Construct_UClass_UGameInstance_NoRegister());
			UProperty* NewProp_GameViewport = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("GameViewport"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(GameViewport, FWorldContext), 0x0000000000000000, Z_Construct_UClass_UGameViewportClient_NoRegister());
			UProperty* NewProp_PendingLevelStreamingStatusUpdates = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PendingLevelStreamingStatusUpdates"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(PendingLevelStreamingStatusUpdates, FWorldContext), 0x0000000000000000);
			UProperty* NewProp_PendingLevelStreamingStatusUpdates_Inner = new(EC_InternalUseOnlyConstructor, NewProp_PendingLevelStreamingStatusUpdates, TEXT("PendingLevelStreamingStatusUpdates"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FLevelStreamingStatus());
			UProperty* NewProp_ObjectReferencers = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ObjectReferencers"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ObjectReferencers, FWorldContext), 0x0000000000000000);
			UProperty* NewProp_ObjectReferencers_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ObjectReferencers, TEXT("ObjectReferencers"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UObjectReferencer_NoRegister());
			UProperty* NewProp_LoadedLevelsForPendingMapChange = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LoadedLevelsForPendingMapChange"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(LoadedLevelsForPendingMapChange, FWorldContext), 0x0000000000000000);
			UProperty* NewProp_LoadedLevelsForPendingMapChange_Inner = new(EC_InternalUseOnlyConstructor, NewProp_LoadedLevelsForPendingMapChange, TEXT("LoadedLevelsForPendingMapChange"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_ULevel_NoRegister());
			UProperty* NewProp_PackagesToFullyLoad = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PackagesToFullyLoad"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(PackagesToFullyLoad, FWorldContext), 0x0000000000000000);
			UProperty* NewProp_PackagesToFullyLoad_Inner = new(EC_InternalUseOnlyConstructor, NewProp_PackagesToFullyLoad, TEXT("PackagesToFullyLoad"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FFullyLoadedPackagesInfo());
			UProperty* NewProp_PendingNetGame = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PendingNetGame"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(PendingNetGame, FWorldContext), 0x0000000000000000, Z_Construct_UClass_UPendingNetGame_NoRegister());
			UProperty* NewProp_LastRemoteURL = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LastRemoteURL"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LastRemoteURL, FWorldContext), 0x0000000000000000, Z_Construct_UScriptStruct_FURL());
			UProperty* NewProp_LastURL = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LastURL"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LastURL, FWorldContext), 0x0000000000000000, Z_Construct_UScriptStruct_FURL());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("FWorldContext\n   A context for dealing with UWorlds at the engine level. As the engine brings up and destroys world, we need a way to keep straight\n   what world belongs to what.\n\n   WorldContexts can be thought of as a track. By default we have 1 track that we load and unload levels on. Adding a second context is adding\n   a second track; another track of progression for worlds to live on.\n\n   For the GameEngine, there will be one WorldContext until we decide to support multiple simultaneous worlds.\n   For the EditorEngine, there may be one WorldContext for the EditorWorld and one for the PIE World.\n\n   FWorldContext provides both a way to manage 'the current PIE UWorld*' as well as state that goes along with connecting/travelling to\nnew worlds.\n\n   FWorldContext should remain internal to the UEngine classes. Outside code should not keep pointers or try to manage FWorldContexts directly.\n   Outside code can steal deal with UWorld*, and pass UWorld*s into Engine level functions. The Engine code can look up the relevant context\n   for a given UWorld*.\n\nFor convenience, FWorldContext can maintain outside pointers to UWorld*s. For example, PIE can tie UWorld* UEditorEngine::PlayWorld to the PIE\n   world context. If the PIE UWorld changes, the UEditorEngine::PlayWorld pointer will be automatically updated. This is done with AddRef() and\nSetCurrentWorld()."));
			MetaData->SetValue(NewProp_ActiveNetDrivers, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
			MetaData->SetValue(NewProp_ActiveNetDrivers, TEXT("ToolTip"), TEXT("A list of active net drivers"));
			MetaData->SetValue(NewProp_OwningGameInstance, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
			MetaData->SetValue(NewProp_GameViewport, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
			MetaData->SetValue(NewProp_PendingLevelStreamingStatusUpdates, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
			MetaData->SetValue(NewProp_ObjectReferencers, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
			MetaData->SetValue(NewProp_ObjectReferencers, TEXT("ToolTip"), TEXT("Handles to object references; used by the engine to e.g. the prevent objects from being garbage collected."));
			MetaData->SetValue(NewProp_LoadedLevelsForPendingMapChange, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
			MetaData->SetValue(NewProp_LoadedLevelsForPendingMapChange, TEXT("ToolTip"), TEXT("Array of already loaded levels. The ordering is arbitrary and depends on what is already loaded and such."));
			MetaData->SetValue(NewProp_PackagesToFullyLoad, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
			MetaData->SetValue(NewProp_PackagesToFullyLoad, TEXT("ToolTip"), TEXT("A list of tag/array pairs that is used at LoadMap time to fully load packages that may be needed for the map/game with DLC, but we can't use DynamicLoadObject to load from the packages"));
			MetaData->SetValue(NewProp_PendingNetGame, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
			MetaData->SetValue(NewProp_LastRemoteURL, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
			MetaData->SetValue(NewProp_LastRemoteURL, TEXT("ToolTip"), TEXT("last server we connected to (for \"reconnect\" command)"));
			MetaData->SetValue(NewProp_LastURL, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
			MetaData->SetValue(NewProp_LastURL, TEXT("ToolTip"), TEXT("URL the last time we traveled"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FWorldContext_CRC() { return 3079751825U; }
	UScriptStruct* Z_Construct_UScriptStruct_FNamedNetDriver()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FNamedNetDriver_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("NamedNetDriver"), sizeof(FNamedNetDriver), Get_Z_Construct_UScriptStruct_FNamedNetDriver_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NamedNetDriver"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FNamedNetDriver>, EStructFlags(0x00000001));
			UProperty* NewProp_NetDriver = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("NetDriver"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(NetDriver, FNamedNetDriver), 0x0000000000002000, Z_Construct_UClass_UNetDriver_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Active and named net drivers instantiated from an FNetDriverDefinition\nThe net driver will remain instantiated on this struct until it is destroyed"));
			MetaData->SetValue(NewProp_NetDriver, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
			MetaData->SetValue(NewProp_NetDriver, TEXT("ToolTip"), TEXT("Instantiation of named net driver"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FNamedNetDriver_CRC() { return 3995044059U; }
	UScriptStruct* Z_Construct_UScriptStruct_FNetDriverDefinition()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FNetDriverDefinition_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("NetDriverDefinition"), sizeof(FNetDriverDefinition), Get_Z_Construct_UScriptStruct_FNetDriverDefinition_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NetDriverDefinition"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FNetDriverDefinition>, EStructFlags(0x00000001));
			UProperty* NewProp_DriverClassNameFallback = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DriverClassNameFallback"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(DriverClassNameFallback, FNetDriverDefinition), 0x0000000000000000);
			UProperty* NewProp_DriverClassName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DriverClassName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(DriverClassName, FNetDriverDefinition), 0x0000000000000000);
			UProperty* NewProp_DefName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DefName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(DefName, FNetDriverDefinition), 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Container for describing various types of netdrivers available to the engine\nThe engine will try to construct a netdriver of a given type and, failing that,\nthe fallback version."));
			MetaData->SetValue(NewProp_DriverClassNameFallback, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
			MetaData->SetValue(NewProp_DriverClassNameFallback, TEXT("ToolTip"), TEXT("Class name of the fallback net driver if the main net driver class fails to initialize"));
			MetaData->SetValue(NewProp_DriverClassName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
			MetaData->SetValue(NewProp_DriverClassName, TEXT("ToolTip"), TEXT("Class name of primary net driver"));
			MetaData->SetValue(NewProp_DefName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
			MetaData->SetValue(NewProp_DefName, TEXT("ToolTip"), TEXT("Unique name of this net driver definition"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FNetDriverDefinition_CRC() { return 313930459U; }
	UScriptStruct* Z_Construct_UScriptStruct_FLevelStreamingStatus()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FLevelStreamingStatus_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("LevelStreamingStatus"), sizeof(FLevelStreamingStatus), Get_Z_Construct_UScriptStruct_FLevelStreamingStatus_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LevelStreamingStatus"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FLevelStreamingStatus>, EStructFlags(0x00000001));
			UProperty* NewProp_LODIndex = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LODIndex"), RF_Public|RF_Transient|RF_Native) UUInt32Property(CPP_PROPERTY_BASE(LODIndex, FLevelStreamingStatus), 0x0000000000000000);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bShouldBeVisible, FLevelStreamingStatus, uint8);
			UProperty* NewProp_bShouldBeVisible = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bShouldBeVisible"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bShouldBeVisible, FLevelStreamingStatus), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bShouldBeVisible, FLevelStreamingStatus), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bShouldBeLoaded, FLevelStreamingStatus, uint8);
			UProperty* NewProp_bShouldBeLoaded = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bShouldBeLoaded"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bShouldBeLoaded, FLevelStreamingStatus), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bShouldBeLoaded, FLevelStreamingStatus), sizeof(uint8), false);
			UProperty* NewProp_PackageName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PackageName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(PackageName, FLevelStreamingStatus), 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("level streaming updates that should be applied immediately after committing the map change"));
			MetaData->SetValue(NewProp_LODIndex, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
			MetaData->SetValue(NewProp_bShouldBeVisible, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
			MetaData->SetValue(NewProp_bShouldBeLoaded, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
			MetaData->SetValue(NewProp_PackageName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FLevelStreamingStatus_CRC() { return 548832959U; }
	UScriptStruct* Z_Construct_UScriptStruct_FFullyLoadedPackagesInfo()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FFullyLoadedPackagesInfo_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("FullyLoadedPackagesInfo"), sizeof(FFullyLoadedPackagesInfo), Get_Z_Construct_UScriptStruct_FFullyLoadedPackagesInfo_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FullyLoadedPackagesInfo"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FFullyLoadedPackagesInfo>, EStructFlags(0x00000001));
			UProperty* NewProp_LoadedObjects = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LoadedObjects"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(LoadedObjects, FFullyLoadedPackagesInfo), 0x0000000000000000);
			UProperty* NewProp_LoadedObjects_Inner = new(EC_InternalUseOnlyConstructor, NewProp_LoadedObjects, TEXT("LoadedObjects"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UObject_NoRegister());
			UProperty* NewProp_PackagesToLoad = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PackagesToLoad"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(PackagesToLoad, FFullyLoadedPackagesInfo), 0x0000000000000000);
			UProperty* NewProp_PackagesToLoad_Inner = new(EC_InternalUseOnlyConstructor, NewProp_PackagesToLoad, TEXT("PackagesToLoad"), RF_Public|RF_Transient|RF_Native) UNameProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_Tag = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Tag"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Tag, FFullyLoadedPackagesInfo), 0x0000000000000000);
			UProperty* NewProp_FullyLoadType = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("FullyLoadType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(FullyLoadType, FFullyLoadedPackagesInfo), 0x0000000000000000, Z_Construct_UEnum_Engine_EFullyLoadPackageType());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Struct to help hold information about packages needing to be fully-loaded for DLC, etc."));
			MetaData->SetValue(NewProp_LoadedObjects, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
			MetaData->SetValue(NewProp_LoadedObjects, TEXT("ToolTip"), TEXT("List of objects that were loaded, for faster cleanup"));
			MetaData->SetValue(NewProp_PackagesToLoad, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
			MetaData->SetValue(NewProp_PackagesToLoad, TEXT("ToolTip"), TEXT("The list of packages that will be fully loaded when the above Map is loaded"));
			MetaData->SetValue(NewProp_Tag, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
			MetaData->SetValue(NewProp_Tag, TEXT("ToolTip"), TEXT("When this map or gametype is loaded, the packages in the following array will be loaded and added to root, then removed from root when map is unloaded"));
			MetaData->SetValue(NewProp_FullyLoadType, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
			MetaData->SetValue(NewProp_FullyLoadType, TEXT("ToolTip"), TEXT("When to load these packages"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FFullyLoadedPackagesInfo_CRC() { return 3732775941U; }
	UClass* Z_Construct_UClass_UEngine_NoRegister()
	{
		return UEngine::StaticClass();
	}
	UClass* Z_Construct_UClass_UEngine()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UEngine::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x2010008F;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_NextWorldContextHandle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NextWorldContextHandle"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(NextWorldContextHandle, UEngine), 0x0000080000000000);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bStartedLoadMapMovie, UEngine, uint8);
				UProperty* NewProp_bStartedLoadMapMovie = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bStartedLoadMapMovie"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bStartedLoadMapMovie, UEngine), 0x0000000000002000, CPP_BOOL_PROPERTY_BITMASK(bStartedLoadMapMovie, UEngine), sizeof(uint8), false);
				UProperty* NewProp_RuntimeServerActors = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RuntimeServerActors"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(RuntimeServerActors, UEngine), 0x0000000000000000);
				UProperty* NewProp_RuntimeServerActors_Inner = new(EC_InternalUseOnlyConstructor, NewProp_RuntimeServerActors, TEXT("RuntimeServerActors"), RF_Public|RF_Transient|RF_Native) UStrProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
				UProperty* NewProp_ServerActors = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ServerActors"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ServerActors, UEngine), 0x0000000000004000);
				UProperty* NewProp_ServerActors_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ServerActors, TEXT("ServerActors"), RF_Public|RF_Transient|RF_Native) UStrProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000004000);
				UProperty* NewProp_NetDriverDefinitions = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NetDriverDefinitions"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(NetDriverDefinitions, UEngine), 0x0000000000006000);
				UProperty* NewProp_NetDriverDefinitions_Inner = new(EC_InternalUseOnlyConstructor, NewProp_NetDriverDefinitions, TEXT("NetDriverDefinitions"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000004000, Z_Construct_UScriptStruct_FNetDriverDefinition());
				UProperty* NewProp_SelectionHighlightIntensityBillboards = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SelectionHighlightIntensityBillboards"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(SelectionHighlightIntensityBillboards, UEngine), 0x0000000000002000);
				UProperty* NewProp_HoverHighlightIntensity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HoverHighlightIntensity"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(HoverHighlightIntensity, UEngine), 0x0000000000002000);
				UProperty* NewProp_BSPSelectionHighlightIntensity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BSPSelectionHighlightIntensity"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(BSPSelectionHighlightIntensity, UEngine), 0x0000000000002000);
				UProperty* NewProp_SelectionHighlightIntensity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SelectionHighlightIntensity"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(SelectionHighlightIntensity, UEngine), 0x0000000000002000);
				UProperty* NewProp_ParticleEventManagerClassPath = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ParticleEventManagerClassPath"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ParticleEventManagerClassPath, UEngine), 0x0000000000044000);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLockReadOnlyLevels, UEngine, uint8);
				UProperty* NewProp_bLockReadOnlyLevels = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bLockReadOnlyLevels"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLockReadOnlyLevels, UEngine), 0x0000000000002000, CPP_BOOL_PROPERTY_BITMASK(bLockReadOnlyLevels, UEngine), sizeof(uint8), false);
				UProperty* NewProp_ScreenSaverInhibitorSemaphore = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ScreenSaverInhibitorSemaphore"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ScreenSaverInhibitorSemaphore, UEngine), 0x0000000000002000);
				UProperty* NewProp_bEnableVisualLogRecordingOnStart = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bEnableVisualLogRecordingOnStart"), RF_Public|RF_Transient|RF_Native) UUInt32Property(CPP_PROPERTY_BASE(bEnableVisualLogRecordingOnStart, UEngine), 0x0000000000044000);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDisableAILogging, UEngine, uint8);
				UProperty* NewProp_bDisableAILogging = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bDisableAILogging"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDisableAILogging, UEngine), 0x0000000000044000, CPP_BOOL_PROPERTY_BITMASK(bDisableAILogging, UEngine), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCookSeparateSharedMPGameContent, UEngine, uint8);
				UProperty* NewProp_bCookSeparateSharedMPGameContent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bCookSeparateSharedMPGameContent"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCookSeparateSharedMPGameContent, UEngine), 0x0000000000044000, CPP_BOOL_PROPERTY_BITMASK(bCookSeparateSharedMPGameContent, UEngine), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSuppressMapWarnings, UEngine, uint8);
				UProperty* NewProp_bSuppressMapWarnings = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bSuppressMapWarnings"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSuppressMapWarnings, UEngine), 0x0000000000044000, CPP_BOOL_PROPERTY_BITMASK(bSuppressMapWarnings, UEngine), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnableOnScreenDebugMessagesDisplay, UEngine, uint8);
				UProperty* NewProp_bEnableOnScreenDebugMessagesDisplay = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bEnableOnScreenDebugMessagesDisplay"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnableOnScreenDebugMessagesDisplay, UEngine), 0x0000000000002000, CPP_BOOL_PROPERTY_BITMASK(bEnableOnScreenDebugMessagesDisplay, UEngine), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnableOnScreenDebugMessages, UEngine, uint8);
				UProperty* NewProp_bEnableOnScreenDebugMessages = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bEnableOnScreenDebugMessages"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnableOnScreenDebugMessages, UEngine), 0x0000000000044000, CPP_BOOL_PROPERTY_BITMASK(bEnableOnScreenDebugMessages, UEngine), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsOverridingSelectedColor, UEngine, bool);
				UProperty* NewProp_bIsOverridingSelectedColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsOverridingSelectedColor"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsOverridingSelectedColor, UEngine), 0x0000000000002000, CPP_BOOL_PROPERTY_BITMASK(bIsOverridingSelectedColor, UEngine), sizeof(bool), true);
				UProperty* NewProp_SelectedMaterialColorOverride = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SelectedMaterialColorOverride"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SelectedMaterialColorOverride, UEngine), 0x0000000000002000, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_SubduedSelectionOutlineColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SubduedSelectionOutlineColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SubduedSelectionOutlineColor, UEngine), 0x0000000000002000, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_SelectionOutlineColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SelectionOutlineColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SelectionOutlineColor, UEngine), 0x0000000000002000, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_SelectedMaterialColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SelectedMaterialColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SelectedMaterialColor, UEngine), 0x0000000000002000, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_DefaultSelectedMaterialColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultSelectedMaterialColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DefaultSelectedMaterialColor, UEngine), 0x0000000000044000, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_MinDesiredFrameRate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MinDesiredFrameRate"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MinDesiredFrameRate, UEngine), 0x0000000000004001);
				UProperty* NewProp_DisplayGamma = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DisplayGamma"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DisplayGamma, UEngine), 0x0000000000004000);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bHasPendingGlobalReregister, UEngine, uint8);
				UProperty* NewProp_bHasPendingGlobalReregister = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bHasPendingGlobalReregister"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bHasPendingGlobalReregister, UEngine), 0x0000000000002000, CPP_BOOL_PROPERTY_BITMASK(bHasPendingGlobalReregister, UEngine), sizeof(uint8), false);
				UProperty* NewProp_NetClientTicksPerSecond = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NetClientTicksPerSecond"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(NetClientTicksPerSecond, UEngine), 0x0000000000044000);
				UProperty* NewProp_PhysicErrorCorrection = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PhysicErrorCorrection"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PhysicErrorCorrection, UEngine), 0x0000000000004000, Z_Construct_UScriptStruct_FRigidBodyErrorCorrection());
				UProperty* NewProp_PendingDroppedNotes = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PendingDroppedNotes"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(PendingDroppedNotes, UEngine), 0x0000000000002000);
				UProperty* NewProp_PendingDroppedNotes_Inner = new(EC_InternalUseOnlyConstructor, NewProp_PendingDroppedNotes, TEXT("PendingDroppedNotes"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FDropNoteInfo());
				UProperty* NewProp_MaxParticleResizeWarn = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxParticleResizeWarn"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MaxParticleResizeWarn, UEngine), 0x0000000000004000);
				UProperty* NewProp_MaxParticleResize = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxParticleResize"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MaxParticleResize, UEngine), 0x0000000000004000);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bPauseOnLossOfFocus, UEngine, uint8);
				UProperty* NewProp_bPauseOnLossOfFocus = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bPauseOnLossOfFocus"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bPauseOnLossOfFocus, UEngine), 0x0000000000004000, CPP_BOOL_PROPERTY_BITMASK(bPauseOnLossOfFocus, UEngine), sizeof(uint8), false);
				UProperty* NewProp_MaxOcclusionPixelsFraction = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxOcclusionPixelsFraction"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MaxOcclusionPixelsFraction, UEngine), 0x0000000000004000);
				UProperty* NewProp_PrimitiveProbablyVisibleTime = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PrimitiveProbablyVisibleTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(PrimitiveProbablyVisibleTime, UEngine), 0x0000000000004000);
				UProperty* NewProp_CameraTranslationThreshold = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CameraTranslationThreshold"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(CameraTranslationThreshold, UEngine), 0x0000000000004000);
				UProperty* NewProp_CameraRotationThreshold = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CameraRotationThreshold"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(CameraRotationThreshold, UEngine), 0x0000000000004000);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAllowMatureLanguage, UEngine, uint8);
				UProperty* NewProp_bAllowMatureLanguage = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAllowMatureLanguage"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAllowMatureLanguage, UEngine), 0x0000000000004000, CPP_BOOL_PROPERTY_BITMASK(bAllowMatureLanguage, UEngine), sizeof(uint8), false);
				UProperty* NewProp_MeshLODRange = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MeshLODRange"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MeshLODRange, UEngine), 0x0000000000004000);
				UProperty* NewProp_TransitionGameMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TransitionGameMode"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(TransitionGameMode, UEngine), 0x0000000000000000);
				UProperty* NewProp_TransitionDescription = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TransitionDescription"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(TransitionDescription, UEngine), 0x0000000000000000);
				UProperty* NewProp_TransitionType = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TransitionType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(TransitionType, UEngine), 0x0000000000000000, Z_Construct_UEnum_Engine_ETransitionType());
				UProperty* NewProp_StreamingDistanceFactor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StreamingDistanceFactor"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(StreamingDistanceFactor, UEngine), 0x0000040000000001);
				UProperty* NewProp_C_BrushShape = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("C_BrushShape"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(C_BrushShape, UEngine), 0x0000000000000000, Z_Construct_UScriptStruct_FColor());
				UProperty* NewProp_C_Volume = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("C_Volume"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(C_Volume, UEngine), 0x0000000000000000, Z_Construct_UScriptStruct_FColor());
				UProperty* NewProp_C_OrthoBackground = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("C_OrthoBackground"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(C_OrthoBackground, UEngine), 0x0000000000000000, Z_Construct_UScriptStruct_FColor());
				UProperty* NewProp_C_BSPCollision = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("C_BSPCollision"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(C_BSPCollision, UEngine), 0x0000000000000000, Z_Construct_UScriptStruct_FColor());
				UProperty* NewProp_C_VolumeCollision = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("C_VolumeCollision"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(C_VolumeCollision, UEngine), 0x0000000000000000, Z_Construct_UScriptStruct_FColor());
				UProperty* NewProp_C_ScaleBoxHi = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("C_ScaleBoxHi"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(C_ScaleBoxHi, UEngine), 0x0000000000000000, Z_Construct_UScriptStruct_FColor());
				UProperty* NewProp_C_WireBackground = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("C_WireBackground"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(C_WireBackground, UEngine), 0x0000000000000000, Z_Construct_UScriptStruct_FColor());
				UProperty* NewProp_C_NonSolidWire = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("C_NonSolidWire"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(C_NonSolidWire, UEngine), 0x0000000000000000, Z_Construct_UScriptStruct_FColor());
				UProperty* NewProp_C_SemiSolidWire = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("C_SemiSolidWire"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(C_SemiSolidWire, UEngine), 0x0000000000000000, Z_Construct_UScriptStruct_FColor());
				UProperty* NewProp_C_SubtractWire = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("C_SubtractWire"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(C_SubtractWire, UEngine), 0x0000000000000000, Z_Construct_UScriptStruct_FColor());
				UProperty* NewProp_C_AddWire = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("C_AddWire"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(C_AddWire, UEngine), 0x0000000000000000, Z_Construct_UScriptStruct_FColor());
				UProperty* NewProp_C_BrushWire = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("C_BrushWire"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(C_BrushWire, UEngine), 0x0000000000000000, Z_Construct_UScriptStruct_FColor());
				UProperty* NewProp_C_WorldBox = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("C_WorldBox"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(C_WorldBox, UEngine), 0x0000000000000000, Z_Construct_UScriptStruct_FColor());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bShouldGenerateLowQualityLightmaps, UEngine, uint8);
				UProperty* NewProp_bShouldGenerateLowQualityLightmaps = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bShouldGenerateLowQualityLightmaps"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bShouldGenerateLowQualityLightmaps, UEngine), 0x0000000000044000, CPP_BOOL_PROPERTY_BITMASK(bShouldGenerateLowQualityLightmaps, UEngine), sizeof(uint8), false);
				UProperty* NewProp_NumPawnsAllowedToBeSpawnedInAFrame = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NumPawnsAllowedToBeSpawnedInAFrame"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(NumPawnsAllowedToBeSpawnedInAFrame, UEngine), 0x0000000000004000);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCheckForMultiplePawnsSpawnedInAFrame, UEngine, uint8);
				UProperty* NewProp_bCheckForMultiplePawnsSpawnedInAFrame = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bCheckForMultiplePawnsSpawnedInAFrame"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCheckForMultiplePawnsSpawnedInAFrame, UEngine), 0x0000000000004000, CPP_BOOL_PROPERTY_BITMASK(bCheckForMultiplePawnsSpawnedInAFrame, UEngine), sizeof(uint8), false);
				UProperty* NewProp_SmoothedFrameRateRange = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SmoothedFrameRateRange"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SmoothedFrameRateRange, UEngine), 0x0000000000004001, Z_Construct_UScriptStruct_FFloatRange());
				UProperty* NewProp_FixedFrameRate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FixedFrameRate"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(FixedFrameRate, UEngine), 0x0000000000004001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseFixedFrameRate, UEngine, uint8);
				UProperty* NewProp_bUseFixedFrameRate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUseFixedFrameRate"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseFixedFrameRate, UEngine), 0x0000000000004001, CPP_BOOL_PROPERTY_BITMASK(bUseFixedFrameRate, UEngine), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSmoothFrameRate, UEngine, uint8);
				UProperty* NewProp_bSmoothFrameRate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bSmoothFrameRate"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSmoothFrameRate, UEngine), 0x0000000000004001, CPP_BOOL_PROPERTY_BITMASK(bSmoothFrameRate, UEngine), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnableEditorPSysRealtimeLOD, UEngine, uint8);
				UProperty* NewProp_bEnableEditorPSysRealtimeLOD = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bEnableEditorPSysRealtimeLOD"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnableEditorPSysRealtimeLOD, UEngine), 0x0000000000004000, CPP_BOOL_PROPERTY_BITMASK(bEnableEditorPSysRealtimeLOD, UEngine), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCanBlueprintsTickByDefault, UEngine, uint8);
				UProperty* NewProp_bCanBlueprintsTickByDefault = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bCanBlueprintsTickByDefault"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCanBlueprintsTickByDefault, UEngine), 0x0000000000004001, CPP_BOOL_PROPERTY_BITMASK(bCanBlueprintsTickByDefault, UEngine), sizeof(uint8), false);
				UProperty* NewProp_MaximumLoopIterationCount = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaximumLoopIterationCount"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MaximumLoopIterationCount, UEngine), 0x0000000000004001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSubtitlesForcedOff, UEngine, uint8);
				UProperty* NewProp_bSubtitlesForcedOff = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bSubtitlesForcedOff"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSubtitlesForcedOff, UEngine), 0x0000000000004001, CPP_BOOL_PROPERTY_BITMASK(bSubtitlesForcedOff, UEngine), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSubtitlesEnabled, UEngine, uint8);
				UProperty* NewProp_bSubtitlesEnabled = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bSubtitlesEnabled"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSubtitlesEnabled, UEngine), 0x0000000000004001, CPP_BOOL_PROPERTY_BITMASK(bSubtitlesEnabled, UEngine), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bHardwareSurveyEnabled_DEPRECATED, UEngine, uint8);
				UProperty* NewProp_bHardwareSurveyEnabled = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bHardwareSurveyEnabled"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bHardwareSurveyEnabled_DEPRECATED, UEngine), 0x0000000020000000, CPP_BOOL_PROPERTY_BITMASK(bHardwareSurveyEnabled_DEPRECATED, UEngine), sizeof(uint8), false);
				UProperty* NewProp_NearClipPlane = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NearClipPlane"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(NearClipPlane, UEngine), 0x0000000000004001);
				UProperty* NewProp_ClientCycles = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ClientCycles"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ClientCycles, UEngine), 0x0000000000000000);
				UProperty* NewProp_GameCycles = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GameCycles"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(GameCycles, UEngine), 0x0000000000000000);
				UProperty* NewProp_TickCycles = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TickCycles"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(TickCycles, UEngine), 0x0000000000000000);
				UProperty* NewProp_DeferredCommands = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DeferredCommands"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(DeferredCommands, UEngine), 0x0000000000000000);
				UProperty* NewProp_DeferredCommands_Inner = new(EC_InternalUseOnlyConstructor, NewProp_DeferredCommands, TEXT("DeferredCommands"), RF_Public|RF_Transient|RF_Native) UStrProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
				UProperty* NewProp_GameViewport = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GameViewport"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(GameViewport, UEngine), 0x0000000000000000, Z_Construct_UClass_UGameViewportClient_NoRegister());
				UProperty* NewProp_LightMapDensityTextureName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LightMapDensityTextureName"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LightMapDensityTextureName, UEngine), 0x0000000000044000, Z_Construct_UScriptStruct_FStringAssetReference());
				UProperty* NewProp_LightMapDensityTexture = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LightMapDensityTexture"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(LightMapDensityTexture, UEngine), 0x0000000000000000, Z_Construct_UClass_UTexture2D_NoRegister());
				UProperty* NewProp_WeightMapPlaceholderTextureName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WeightMapPlaceholderTextureName"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(WeightMapPlaceholderTextureName, UEngine), 0x0000000000044000, Z_Construct_UScriptStruct_FStringAssetReference());
				UProperty* NewProp_WeightMapPlaceholderTexture = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WeightMapPlaceholderTexture"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WeightMapPlaceholderTexture, UEngine), 0x0000000000000000, Z_Construct_UClass_UTexture_NoRegister());
				UProperty* NewProp_MiniFontTextureName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MiniFontTextureName"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MiniFontTextureName, UEngine), 0x0000000000044000, Z_Construct_UScriptStruct_FStringAssetReference());
				UProperty* NewProp_MiniFontTexture = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MiniFontTexture"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(MiniFontTexture, UEngine), 0x0000000000000000, Z_Construct_UClass_UTexture2D_NoRegister());
				UProperty* NewProp_PreIntegratedSkinBRDFTextureName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PreIntegratedSkinBRDFTextureName"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PreIntegratedSkinBRDFTextureName, UEngine), 0x0000000000044000, Z_Construct_UScriptStruct_FStringAssetReference());
				UProperty* NewProp_PreIntegratedSkinBRDFTexture = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PreIntegratedSkinBRDFTexture"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(PreIntegratedSkinBRDFTexture, UEngine), 0x0000000000000000, Z_Construct_UClass_UTexture2D_NoRegister());
				UProperty* NewProp_ActiveStructRedirects = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ActiveStructRedirects"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ActiveStructRedirects, UEngine), 0x0000000000004000);
				UProperty* NewProp_ActiveStructRedirects_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ActiveStructRedirects, TEXT("ActiveStructRedirects"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000004000, Z_Construct_UScriptStruct_FStructRedirect());
				UProperty* NewProp_ActivePluginRedirects = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ActivePluginRedirects"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ActivePluginRedirects, UEngine), 0x0000000000004000);
				UProperty* NewProp_ActivePluginRedirects_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ActivePluginRedirects, TEXT("ActivePluginRedirects"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000004000, Z_Construct_UScriptStruct_FPluginRedirect());
				UProperty* NewProp_ActiveClassRedirects = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ActiveClassRedirects"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ActiveClassRedirects, UEngine), 0x0000000000004000);
				UProperty* NewProp_ActiveClassRedirects_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ActiveClassRedirects, TEXT("ActiveClassRedirects"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000004000, Z_Construct_UScriptStruct_FClassRedirect());
				UProperty* NewProp_ActiveGameNameRedirects = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ActiveGameNameRedirects"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ActiveGameNameRedirects, UEngine), 0x0000000000004000);
				UProperty* NewProp_ActiveGameNameRedirects_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ActiveGameNameRedirects, TEXT("ActiveGameNameRedirects"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000004000, Z_Construct_UScriptStruct_FGameNameRedirect());
				UProperty* NewProp_DefaultPhysMaterialName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultPhysMaterialName"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DefaultPhysMaterialName, UEngine), 0x0000000000044000, Z_Construct_UScriptStruct_FStringAssetReference());
				UProperty* NewProp_DefaultPhysMaterial = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultPhysMaterial"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(DefaultPhysMaterial, UEngine), 0x0000000000000000, Z_Construct_UClass_UPhysicalMaterial_NoRegister());
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_EditorBrushMaterialName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EditorBrushMaterialName"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(EditorBrushMaterialName, UEngine), 0x0000000800044000, Z_Construct_UScriptStruct_FStringAssetReference());
				UProperty* NewProp_EditorBrushMaterial = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EditorBrushMaterial"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(EditorBrushMaterial, UEngine), 0x0000000800000000, Z_Construct_UClass_UMaterial_NoRegister());
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_StatColorMappings = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StatColorMappings"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(StatColorMappings, UEngine), 0x0000000000044000);
				UProperty* NewProp_StatColorMappings_Inner = new(EC_InternalUseOnlyConstructor, NewProp_StatColorMappings, TEXT("StatColorMappings"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000004000, Z_Construct_UScriptStruct_FStatColorMapping());
				UProperty* NewProp_LightMapDensitySelectedColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LightMapDensitySelectedColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LightMapDensitySelectedColor, UEngine), 0x0000000000044000, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_LightMapDensityVertexMappedColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LightMapDensityVertexMappedColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LightMapDensityVertexMappedColor, UEngine), 0x0000000000044000, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_RenderLightMapDensityColorScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RenderLightMapDensityColorScale"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(RenderLightMapDensityColorScale, UEngine), 0x0000000000044000);
				UProperty* NewProp_RenderLightMapDensityGrayscaleScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RenderLightMapDensityGrayscaleScale"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(RenderLightMapDensityGrayscaleScale, UEngine), 0x0000000000044000);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bRenderLightMapDensityGrayscale, UEngine, uint8);
				UProperty* NewProp_bRenderLightMapDensityGrayscale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bRenderLightMapDensityGrayscale"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bRenderLightMapDensityGrayscale, UEngine), 0x0000000000044000, CPP_BOOL_PROPERTY_BITMASK(bRenderLightMapDensityGrayscale, UEngine), sizeof(uint8), false);
				UProperty* NewProp_MaxLightMapDensity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxLightMapDensity"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MaxLightMapDensity, UEngine), 0x0000000000044000);
				UProperty* NewProp_IdealLightMapDensity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("IdealLightMapDensity"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(IdealLightMapDensity, UEngine), 0x0000000000044000);
				UProperty* NewProp_MinLightMapDensity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MinLightMapDensity"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MinLightMapDensity, UEngine), 0x0000000000044000);
				UProperty* NewProp_MaxES2PixelShaderAdditiveComplexityCount = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxES2PixelShaderAdditiveComplexityCount"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MaxES2PixelShaderAdditiveComplexityCount, UEngine), 0x0000000000044000);
				UProperty* NewProp_MaxPixelShaderAdditiveComplexityCount = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxPixelShaderAdditiveComplexityCount"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MaxPixelShaderAdditiveComplexityCount, UEngine), 0x0000000000044000);
				UProperty* NewProp_LODColorationColors = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LODColorationColors"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(LODColorationColors, UEngine), 0x0000000000044000);
				UProperty* NewProp_LODColorationColors_Inner = new(EC_InternalUseOnlyConstructor, NewProp_LODColorationColors, TEXT("LODColorationColors"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000004000, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_StationaryLightOverlapColors = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StationaryLightOverlapColors"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(StationaryLightOverlapColors, UEngine), 0x0000000000044000);
				UProperty* NewProp_StationaryLightOverlapColors_Inner = new(EC_InternalUseOnlyConstructor, NewProp_StationaryLightOverlapColors, TEXT("StationaryLightOverlapColors"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000004000, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_ShaderComplexityColors = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ShaderComplexityColors"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ShaderComplexityColors, UEngine), 0x0000000000044000);
				UProperty* NewProp_ShaderComplexityColors_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ShaderComplexityColors, TEXT("ShaderComplexityColors"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000004000, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_LightComplexityColors = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LightComplexityColors"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(LightComplexityColors, UEngine), 0x0000000000044000);
				UProperty* NewProp_LightComplexityColors_Inner = new(EC_InternalUseOnlyConstructor, NewProp_LightComplexityColors, TEXT("LightComplexityColors"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000004000, Z_Construct_UScriptStruct_FColor());
				UProperty* NewProp_LightingOnlyBrightness = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LightingOnlyBrightness"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LightingOnlyBrightness, UEngine), 0x0000000000044000, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_ArrowMaterialName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ArrowMaterialName"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ArrowMaterialName, UEngine), 0x0000000000044000, Z_Construct_UScriptStruct_FStringAssetReference());
				UProperty* NewProp_ArrowMaterial = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ArrowMaterial"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ArrowMaterial, UEngine), 0x0000000000000000, Z_Construct_UClass_UMaterial_NoRegister());
				UProperty* NewProp_PreviewShadowsIndicatorMaterialName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PreviewShadowsIndicatorMaterialName"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PreviewShadowsIndicatorMaterialName, UEngine), 0x0000000000044001, Z_Construct_UScriptStruct_FStringAssetReference());
				UProperty* NewProp_PreviewShadowsIndicatorMaterial = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PreviewShadowsIndicatorMaterial"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(PreviewShadowsIndicatorMaterial, UEngine), 0x0000000000000000, Z_Construct_UClass_UMaterial_NoRegister());
				UProperty* NewProp_InvalidLightmapSettingsMaterialName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InvalidLightmapSettingsMaterialName"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InvalidLightmapSettingsMaterialName, UEngine), 0x0000000000044000, Z_Construct_UScriptStruct_FStringAssetReference());
				UProperty* NewProp_InvalidLightmapSettingsMaterial = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InvalidLightmapSettingsMaterial"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(InvalidLightmapSettingsMaterial, UEngine), 0x0000000000000000, Z_Construct_UClass_UMaterial_NoRegister());
				UProperty* NewProp_ConstraintLimitMaterialName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConstraintLimitMaterialName"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ConstraintLimitMaterialName, UEngine), 0x0000000000044000, Z_Construct_UScriptStruct_FStringAssetReference());
				UProperty* NewProp_ConstraintLimitMaterialZ = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConstraintLimitMaterialZ"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ConstraintLimitMaterialZ, UEngine), 0x0000000000000000, Z_Construct_UClass_UMaterialInstanceDynamic_NoRegister());
				UProperty* NewProp_ConstraintLimitMaterialY = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConstraintLimitMaterialY"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ConstraintLimitMaterialY, UEngine), 0x0000000000000000, Z_Construct_UClass_UMaterialInstanceDynamic_NoRegister());
				UProperty* NewProp_ConstraintLimitMaterialX = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConstraintLimitMaterialX"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ConstraintLimitMaterialX, UEngine), 0x0000000000000000, Z_Construct_UClass_UMaterialInstanceDynamic_NoRegister());
				UProperty* NewProp_ConstraintLimitMaterial = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConstraintLimitMaterial"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ConstraintLimitMaterial, UEngine), 0x0000000000000000, Z_Construct_UClass_UMaterial_NoRegister());
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_BoneWeightMaterialName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BoneWeightMaterialName"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(BoneWeightMaterialName, UEngine), 0x0000000800044000, Z_Construct_UScriptStruct_FStringAssetReference());
				UProperty* NewProp_BoneWeightMaterial = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BoneWeightMaterial"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(BoneWeightMaterial, UEngine), 0x0000000800000000, Z_Construct_UClass_UMaterial_NoRegister());
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_VertexColorViewModeMaterialName_BlueOnly = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VertexColorViewModeMaterialName_BlueOnly"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(VertexColorViewModeMaterialName_BlueOnly, UEngine), 0x0000000000044000);
				UProperty* NewProp_VertexColorViewModeMaterial_BlueOnly = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VertexColorViewModeMaterial_BlueOnly"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(VertexColorViewModeMaterial_BlueOnly, UEngine), 0x0000000000000000, Z_Construct_UClass_UMaterial_NoRegister());
				UProperty* NewProp_VertexColorViewModeMaterialName_GreenOnly = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VertexColorViewModeMaterialName_GreenOnly"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(VertexColorViewModeMaterialName_GreenOnly, UEngine), 0x0000000000044000);
				UProperty* NewProp_VertexColorViewModeMaterial_GreenOnly = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VertexColorViewModeMaterial_GreenOnly"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(VertexColorViewModeMaterial_GreenOnly, UEngine), 0x0000000000000000, Z_Construct_UClass_UMaterial_NoRegister());
				UProperty* NewProp_VertexColorViewModeMaterialName_RedOnly = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VertexColorViewModeMaterialName_RedOnly"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(VertexColorViewModeMaterialName_RedOnly, UEngine), 0x0000000000044000);
				UProperty* NewProp_VertexColorViewModeMaterial_RedOnly = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VertexColorViewModeMaterial_RedOnly"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(VertexColorViewModeMaterial_RedOnly, UEngine), 0x0000000000000000, Z_Construct_UClass_UMaterial_NoRegister());
				UProperty* NewProp_VertexColorViewModeMaterialName_AlphaAsColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VertexColorViewModeMaterialName_AlphaAsColor"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(VertexColorViewModeMaterialName_AlphaAsColor, UEngine), 0x0000000000044000);
				UProperty* NewProp_VertexColorViewModeMaterial_AlphaAsColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VertexColorViewModeMaterial_AlphaAsColor"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(VertexColorViewModeMaterial_AlphaAsColor, UEngine), 0x0000000000000000, Z_Construct_UClass_UMaterial_NoRegister());
				UProperty* NewProp_VertexColorViewModeMaterialName_ColorOnly = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VertexColorViewModeMaterialName_ColorOnly"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(VertexColorViewModeMaterialName_ColorOnly, UEngine), 0x0000000000044000);
				UProperty* NewProp_VertexColorViewModeMaterial_ColorOnly = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VertexColorViewModeMaterial_ColorOnly"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(VertexColorViewModeMaterial_ColorOnly, UEngine), 0x0000000000000000, Z_Construct_UClass_UMaterial_NoRegister());
				UProperty* NewProp_VertexColorMaterialName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VertexColorMaterialName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(VertexColorMaterialName, UEngine), 0x0000000000044000);
				UProperty* NewProp_VertexColorMaterial = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VertexColorMaterial"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(VertexColorMaterial, UEngine), 0x0000000000000000, Z_Construct_UClass_UMaterial_NoRegister());
				UProperty* NewProp_RemoveSurfaceMaterialName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RemoveSurfaceMaterialName"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(RemoveSurfaceMaterialName, UEngine), 0x0000000000044000, Z_Construct_UScriptStruct_FStringAssetReference());
				UProperty* NewProp_RemoveSurfaceMaterial = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RemoveSurfaceMaterial"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(RemoveSurfaceMaterial, UEngine), 0x0000000000000000, Z_Construct_UClass_UMaterial_NoRegister());
				UProperty* NewProp_ShadedLevelColorationUnlitMaterialName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ShadedLevelColorationUnlitMaterialName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ShadedLevelColorationUnlitMaterialName, UEngine), 0x0000000000044000);
				UProperty* NewProp_ShadedLevelColorationUnlitMaterial = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ShadedLevelColorationUnlitMaterial"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ShadedLevelColorationUnlitMaterial, UEngine), 0x0000000000000000, Z_Construct_UClass_UMaterial_NoRegister());
				UProperty* NewProp_ShadedLevelColorationLitMaterialName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ShadedLevelColorationLitMaterialName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ShadedLevelColorationLitMaterialName, UEngine), 0x0000000000044000);
				UProperty* NewProp_ShadedLevelColorationLitMaterial = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ShadedLevelColorationLitMaterial"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ShadedLevelColorationLitMaterial, UEngine), 0x0000000000000000, Z_Construct_UClass_UMaterial_NoRegister());
				UProperty* NewProp_LightingTexelDensityName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LightingTexelDensityName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(LightingTexelDensityName, UEngine), 0x0000000000044000);
				UProperty* NewProp_LightingTexelDensityMaterial = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LightingTexelDensityMaterial"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(LightingTexelDensityMaterial, UEngine), 0x0000000000000000, Z_Construct_UClass_UMaterial_NoRegister());
				UProperty* NewProp_LevelColorationUnlitMaterialName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LevelColorationUnlitMaterialName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(LevelColorationUnlitMaterialName, UEngine), 0x0000000000044000);
				UProperty* NewProp_LevelColorationUnlitMaterial = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LevelColorationUnlitMaterial"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(LevelColorationUnlitMaterial, UEngine), 0x0000000000000000, Z_Construct_UClass_UMaterial_NoRegister());
				UProperty* NewProp_LevelColorationLitMaterialName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LevelColorationLitMaterialName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(LevelColorationLitMaterialName, UEngine), 0x0000000000044000);
				UProperty* NewProp_LevelColorationLitMaterial = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LevelColorationLitMaterial"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(LevelColorationLitMaterial, UEngine), 0x0000000000000000, Z_Construct_UClass_UMaterial_NoRegister());
				UProperty* NewProp_DebugMeshMaterialName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DebugMeshMaterialName"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DebugMeshMaterialName, UEngine), 0x0000000000044000, Z_Construct_UScriptStruct_FStringAssetReference());
				UProperty* NewProp_DebugMeshMaterial = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DebugMeshMaterial"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(DebugMeshMaterial, UEngine), 0x0000000000000000, Z_Construct_UClass_UMaterial_NoRegister());
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_GeomMaterialName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GeomMaterialName"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(GeomMaterialName, UEngine), 0x0000000800044000, Z_Construct_UScriptStruct_FStringAssetReference());
				UProperty* NewProp_GeomMaterial = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GeomMaterial"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(GeomMaterial, UEngine), 0x0000000800000000, Z_Construct_UClass_UMaterial_NoRegister());
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_WireframeMaterialName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WireframeMaterialName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(WireframeMaterialName, UEngine), 0x0000000000044000);
				UProperty* NewProp_WireframeMaterial = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WireframeMaterial"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WireframeMaterial, UEngine), 0x0000000000000000, Z_Construct_UClass_UMaterial_NoRegister());
				UProperty* NewProp_DefaultBokehTextureName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultBokehTextureName"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DefaultBokehTextureName, UEngine), 0x0000000000044000, Z_Construct_UScriptStruct_FStringAssetReference());
				UProperty* NewProp_DefaultBokehTexture = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultBokehTexture"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(DefaultBokehTexture, UEngine), 0x0000000000000000, Z_Construct_UClass_UTexture2D_NoRegister());
				UProperty* NewProp_HighFrequencyNoiseTextureName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HighFrequencyNoiseTextureName"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(HighFrequencyNoiseTextureName, UEngine), 0x0000000000044000, Z_Construct_UScriptStruct_FStringAssetReference());
				UProperty* NewProp_HighFrequencyNoiseTexture = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HighFrequencyNoiseTexture"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(HighFrequencyNoiseTexture, UEngine), 0x0000000000000000, Z_Construct_UClass_UTexture2D_NoRegister());
				UProperty* NewProp_DefaultBSPVertexTextureName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultBSPVertexTextureName"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DefaultBSPVertexTextureName, UEngine), 0x0000000000044000, Z_Construct_UScriptStruct_FStringAssetReference());
				UProperty* NewProp_DefaultBSPVertexTexture = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultBSPVertexTexture"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(DefaultBSPVertexTexture, UEngine), 0x0000000000000000, Z_Construct_UClass_UTexture2D_NoRegister());
				UProperty* NewProp_DefaultDiffuseTextureName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultDiffuseTextureName"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DefaultDiffuseTextureName, UEngine), 0x0000000000044000, Z_Construct_UScriptStruct_FStringAssetReference());
				UProperty* NewProp_DefaultDiffuseTexture = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultDiffuseTexture"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(DefaultDiffuseTexture, UEngine), 0x0000000000000000, Z_Construct_UClass_UTexture_NoRegister());
				UProperty* NewProp_DefaultTextureName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultTextureName"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DefaultTextureName, UEngine), 0x0000000000044000, Z_Construct_UScriptStruct_FStringAssetReference());
				UProperty* NewProp_DefaultTexture = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultTexture"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(DefaultTexture, UEngine), 0x0000000000000000, Z_Construct_UClass_UTexture2D_NoRegister());
				UProperty* NewProp_PlayOnConsoleSaveDir = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PlayOnConsoleSaveDir"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(PlayOnConsoleSaveDir, UEngine), 0x0000000000004000);
				UProperty* NewProp_DefaultPreviewPawnClassName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultPreviewPawnClassName"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DefaultPreviewPawnClassName, UEngine), 0x0000040002044001, Z_Construct_UScriptStruct_FStringClassReference());
				UProperty* NewProp_DefaultPreviewPawnClass = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultPreviewPawnClass"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(DefaultPreviewPawnClass, UEngine), 0x0004000000000000, Z_Construct_UClass_APawn_NoRegister());
				UProperty* NewProp_DefaultTireTypeName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultTireTypeName"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DefaultTireTypeName, UEngine), 0x0000040000044001, Z_Construct_UScriptStruct_FStringAssetReference());
				UProperty* NewProp_DefaultTireType = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultTireType"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(DefaultTireType, UEngine), 0x0000000000000000, Z_Construct_UClass_UTireType_NoRegister());
				UProperty* NewProp_GameSingleton = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GameSingleton"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(GameSingleton, UEngine), 0x0000000000000000, Z_Construct_UClass_UObject_NoRegister());
				UProperty* NewProp_GameSingletonClassName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GameSingletonClassName"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(GameSingletonClassName, UEngine), 0x0000040002044001, Z_Construct_UScriptStruct_FStringClassReference());
				UProperty* NewProp_DefaultBlueprintBaseClassName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultBlueprintBaseClassName"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DefaultBlueprintBaseClassName, UEngine), 0x0000040002044001, Z_Construct_UScriptStruct_FStringClassReference());
				UProperty* NewProp_LevelScriptActorClassName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LevelScriptActorClassName"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LevelScriptActorClassName, UEngine), 0x0000000002044001, Z_Construct_UScriptStruct_FStringClassReference());
				UProperty* NewProp_LevelScriptActorClass = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LevelScriptActorClass"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(LevelScriptActorClass, UEngine), 0x0004000000000000, Z_Construct_UClass_ALevelScriptActor_NoRegister());
				UProperty* NewProp_GameUserSettings = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GameUserSettings"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(GameUserSettings, UEngine), 0x0000000000000000, Z_Construct_UClass_UGameUserSettings_NoRegister());
				UProperty* NewProp_AIControllerClassName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AIControllerClassName"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(AIControllerClassName, UEngine), 0x0000000002044000, Z_Construct_UScriptStruct_FStringClassReference());
				UProperty* NewProp_GameUserSettingsClass = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GameUserSettingsClass"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(GameUserSettingsClass, UEngine), 0x0004000000000000, Z_Construct_UClass_UGameUserSettings_NoRegister());
				UProperty* NewProp_GameUserSettingsClassName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GameUserSettingsClassName"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(GameUserSettingsClassName, UEngine), 0x0000000002044000, Z_Construct_UScriptStruct_FStringClassReference());
				UProperty* NewProp_PhysicsCollisionHandlerClassName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PhysicsCollisionHandlerClassName"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PhysicsCollisionHandlerClassName, UEngine), 0x0000040002044001, Z_Construct_UScriptStruct_FStringClassReference());
				UProperty* NewProp_PhysicsCollisionHandlerClass = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PhysicsCollisionHandlerClass"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(PhysicsCollisionHandlerClass, UEngine), 0x0004000000000000, Z_Construct_UClass_UPhysicsCollisionHandler_NoRegister());
				UProperty* NewProp_AvoidanceManagerClass = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AvoidanceManagerClass"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(AvoidanceManagerClass, UEngine), 0x0004000000000000, Z_Construct_UClass_UAvoidanceManager_NoRegister());
				UProperty* NewProp_AvoidanceManagerClassName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AvoidanceManagerClassName"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(AvoidanceManagerClassName, UEngine), 0x0000000002044000, Z_Construct_UScriptStruct_FStringClassReference());
				UProperty* NewProp_NavigationSystemClass = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NavigationSystemClass"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(NavigationSystemClass, UEngine), 0x0004000000000000, Z_Construct_UClass_UNavigationSystem_NoRegister());
				UProperty* NewProp_NavigationSystemClassName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NavigationSystemClassName"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(NavigationSystemClassName, UEngine), 0x0000000002044000, Z_Construct_UScriptStruct_FStringClassReference());
				UProperty* NewProp_WorldSettingsClassName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WorldSettingsClassName"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(WorldSettingsClassName, UEngine), 0x0000000002044001, Z_Construct_UScriptStruct_FStringClassReference());
				UProperty* NewProp_WorldSettingsClass = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WorldSettingsClass"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(WorldSettingsClass, UEngine), 0x0004000000000000, Z_Construct_UClass_AWorldSettings_NoRegister());
				UProperty* NewProp_LocalPlayerClassName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LocalPlayerClassName"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LocalPlayerClassName, UEngine), 0x0000000002044001, Z_Construct_UScriptStruct_FStringClassReference());
				UProperty* NewProp_LocalPlayerClass = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LocalPlayerClass"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(LocalPlayerClass, UEngine), 0x0004000000000000, Z_Construct_UClass_ULocalPlayer_NoRegister());
				UProperty* NewProp_GameViewportClientClassName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GameViewportClientClassName"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(GameViewportClientClassName, UEngine), 0x0000000002044001, Z_Construct_UScriptStruct_FStringClassReference());
				UProperty* NewProp_GameViewportClientClass = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GameViewportClientClass"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(GameViewportClientClass, UEngine), 0x0004000000000000, Z_Construct_UClass_UGameViewportClient_NoRegister());
				UProperty* NewProp_ConsoleClassName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConsoleClassName"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ConsoleClassName, UEngine), 0x0000000002044001, Z_Construct_UScriptStruct_FStringClassReference());
				UProperty* NewProp_ConsoleClass = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConsoleClass"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(ConsoleClass, UEngine), 0x0004000000000000, Z_Construct_UClass_UConsole_NoRegister());
				UProperty* NewProp_AdditionalFontNames = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AdditionalFontNames"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(AdditionalFontNames, UEngine), 0x0000040000044001);
				UProperty* NewProp_AdditionalFontNames_Inner = new(EC_InternalUseOnlyConstructor, NewProp_AdditionalFontNames, TEXT("AdditionalFontNames"), RF_Public|RF_Transient|RF_Native) UStrProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000004000);
				UProperty* NewProp_AdditionalFonts = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AdditionalFonts"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(AdditionalFonts, UEngine), 0x0000000000000000);
				UProperty* NewProp_AdditionalFonts_Inner = new(EC_InternalUseOnlyConstructor, NewProp_AdditionalFonts, TEXT("AdditionalFonts"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UFont_NoRegister());
				UProperty* NewProp_SubtitleFontName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SubtitleFontName"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SubtitleFontName, UEngine), 0x0000040000044001, Z_Construct_UScriptStruct_FStringAssetReference());
				UProperty* NewProp_SubtitleFont = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SubtitleFont"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(SubtitleFont, UEngine), 0x0000000000000000, Z_Construct_UClass_UFont_NoRegister());
				UProperty* NewProp_LargeFontName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LargeFontName"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LargeFontName, UEngine), 0x0000000000044001, Z_Construct_UScriptStruct_FStringAssetReference());
				UProperty* NewProp_LargeFont = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LargeFont"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(LargeFont, UEngine), 0x0000000000000000, Z_Construct_UClass_UFont_NoRegister());
				UProperty* NewProp_MediumFontName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MediumFontName"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MediumFontName, UEngine), 0x0000000000044001, Z_Construct_UScriptStruct_FStringAssetReference());
				UProperty* NewProp_MediumFont = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MediumFont"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(MediumFont, UEngine), 0x0000000000000000, Z_Construct_UClass_UFont_NoRegister());
				UProperty* NewProp_SmallFontName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SmallFontName"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SmallFontName, UEngine), 0x0000000000044001, Z_Construct_UScriptStruct_FStringAssetReference());
				UProperty* NewProp_SmallFont = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SmallFont"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(SmallFont, UEngine), 0x0000000000000000, Z_Construct_UClass_UFont_NoRegister());
				UProperty* NewProp_TinyFontName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TinyFontName"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TinyFontName, UEngine), 0x0000000000044001, Z_Construct_UScriptStruct_FStringAssetReference());
				UProperty* NewProp_TinyFont = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TinyFont"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(TinyFont, UEngine), 0x0000000000000000, Z_Construct_UClass_UFont_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/Engine.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Abstract base class of all Engine classes, responsible for management of systems critical to editor or game systems.\nAlso defines default classes for certain engine systems."));
				MetaData->SetValue(NewProp_NextWorldContextHandle, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_bStartedLoadMapMovie, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_bStartedLoadMapMovie, TEXT("ToolTip"), TEXT("true if the loading movie was started during LoadMap()."));
				MetaData->SetValue(NewProp_RuntimeServerActors, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_RuntimeServerActors, TEXT("ToolTip"), TEXT("Runtime-modified list of server actors, allowing plugins to use serveractors, without permanently adding them to config files"));
				MetaData->SetValue(NewProp_ServerActors, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_ServerActors, TEXT("ToolTip"), TEXT("A configurable list of actors that are automatically spawned upon server startup (just prior to InitGame)"));
				MetaData->SetValue(NewProp_NetDriverDefinitions, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_NetDriverDefinitions, TEXT("ToolTip"), TEXT("A list of named UNetDriver definitions"));
				MetaData->SetValue(NewProp_SelectionHighlightIntensityBillboards, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_SelectionHighlightIntensityBillboards, TEXT("ToolTip"), TEXT("Used to alter the intensity level of the selection highlight on selected billboard objects"));
				MetaData->SetValue(NewProp_HoverHighlightIntensity, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_HoverHighlightIntensity, TEXT("ToolTip"), TEXT("Used to alter the intensity level of the selection highlight on hovered objects"));
				MetaData->SetValue(NewProp_BSPSelectionHighlightIntensity, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_BSPSelectionHighlightIntensity, TEXT("ToolTip"), TEXT("Used to alter the intensity level of the selection highlight on selected BSP surfaces"));
				MetaData->SetValue(NewProp_SelectionHighlightIntensity, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_SelectionHighlightIntensity, TEXT("ToolTip"), TEXT("Used to alter the intensity level of the selection highlight on selected objects"));
				MetaData->SetValue(NewProp_ParticleEventManagerClassPath, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_ParticleEventManagerClassPath, TEXT("ToolTip"), TEXT("Particle event manager *"));
				MetaData->SetValue(NewProp_bLockReadOnlyLevels, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_bLockReadOnlyLevels, TEXT("ToolTip"), TEXT("true if the the user cannot modify levels that are read only."));
				MetaData->SetValue(NewProp_ScreenSaverInhibitorSemaphore, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_ScreenSaverInhibitorSemaphore, TEXT("ToolTip"), TEXT("Semaphore to control screen saver inhibitor thread access."));
				MetaData->SetValue(NewProp_bEnableVisualLogRecordingOnStart, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_bDisableAILogging, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_bDisableAILogging, TEXT("ToolTip"), TEXT("determines whether AI logging should be processed or not"));
				MetaData->SetValue(NewProp_bCookSeparateSharedMPGameContent, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_bCookSeparateSharedMPGameContent, TEXT("ToolTip"), TEXT("if set, cook game classes into standalone packages (as defined in [Cooker.MPGameContentCookStandalone]) and load the appropriate\none at game time depending on the gametype specified on the URL\n(the game class should then not be referenced in the maps themselves)"));
				MetaData->SetValue(NewProp_bSuppressMapWarnings, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_bSuppressMapWarnings, TEXT("ToolTip"), TEXT("If true, then skip drawing map warnings on screen even in non (UE_BUILD_SHIPPING || UE_BUILD_TEST) builds"));
				MetaData->SetValue(NewProp_bEnableOnScreenDebugMessagesDisplay, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_bEnableOnScreenDebugMessagesDisplay, TEXT("ToolTip"), TEXT("If true, then disable the display of OnScreenDebug messages (used when running)"));
				MetaData->SetValue(NewProp_bEnableOnScreenDebugMessages, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_bEnableOnScreenDebugMessages, TEXT("ToolTip"), TEXT("If true, then disable OnScreenDebug messages. Can be toggled in real-time."));
				MetaData->SetValue(NewProp_bIsOverridingSelectedColor, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_bIsOverridingSelectedColor, TEXT("ToolTip"), TEXT("Whether or not selection color is being overriden"));
				MetaData->SetValue(NewProp_SelectedMaterialColorOverride, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_SelectedMaterialColorOverride, TEXT("ToolTip"), TEXT("An override to use in some cases instead of the selected material color"));
				MetaData->SetValue(NewProp_SubduedSelectionOutlineColor, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_SubduedSelectionOutlineColor, TEXT("ToolTip"), TEXT("Subdued version of the selection outline color. Used for indicating sub-selection of components vs actors"));
				MetaData->SetValue(NewProp_SelectionOutlineColor, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_SelectionOutlineColor, TEXT("ToolTip"), TEXT("Color of the selection outline color.  Generally the same as selected material color unless the selection material color is being overridden"));
				MetaData->SetValue(NewProp_SelectedMaterialColor, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_SelectedMaterialColor, TEXT("ToolTip"), TEXT("Color of selected objects in the level viewport (additive)"));
				MetaData->SetValue(NewProp_DefaultSelectedMaterialColor, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_DefaultSelectedMaterialColor, TEXT("ToolTip"), TEXT("Default color of selected objects in the level viewport (additive)"));
				MetaData->SetValue(NewProp_MinDesiredFrameRate, TEXT("Category"), TEXT("Framerate"));
				MetaData->SetValue(NewProp_MinDesiredFrameRate, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_MinDesiredFrameRate, TEXT("EditCondition"), TEXT("!bUseFixedFrameRate"));
				MetaData->SetValue(NewProp_MinDesiredFrameRate, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_MinDesiredFrameRate, TEXT("ToolTip"), TEXT("Minimum desired framerate setting"));
				MetaData->SetValue(NewProp_MinDesiredFrameRate, TEXT("UIMin"), TEXT("0"));
				MetaData->SetValue(NewProp_DisplayGamma, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_DisplayGamma, TEXT("ToolTip"), TEXT("Current display gamma setting"));
				MetaData->SetValue(NewProp_bHasPendingGlobalReregister, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_bHasPendingGlobalReregister, TEXT("ToolTip"), TEXT("true if the engine needs to perform a delayed global component reregister (really just for editor)"));
				MetaData->SetValue(NewProp_NetClientTicksPerSecond, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_NetClientTicksPerSecond, TEXT("ToolTip"), TEXT("Number of times to tick each client per second"));
				MetaData->SetValue(NewProp_PhysicErrorCorrection, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_PhysicErrorCorrection, TEXT("ToolTip"), TEXT("Error correction data for replicating simulated physics (rigid bodies)"));
				MetaData->SetValue(NewProp_PendingDroppedNotes, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_PendingDroppedNotes, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_MaxParticleResizeWarn, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_MaxParticleResizeWarn, TEXT("ToolTip"), TEXT("If the resize request is larger than this, spew out a warning to the log"));
				MetaData->SetValue(NewProp_MaxParticleResize, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_MaxParticleResize, TEXT("ToolTip"), TEXT("The maximum allowed size to a ParticleEmitterInstance::Resize call.\nIf larger, the function will return without resizing."));
				MetaData->SetValue(NewProp_bPauseOnLossOfFocus, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_bPauseOnLossOfFocus, TEXT("ToolTip"), TEXT("Whether to pause the game if focus is lost."));
				MetaData->SetValue(NewProp_MaxOcclusionPixelsFraction, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_MaxOcclusionPixelsFraction, TEXT("ToolTip"), TEXT("Max screen pixel fraction where retesting when unoccluded is worth the GPU time."));
				MetaData->SetValue(NewProp_PrimitiveProbablyVisibleTime, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_PrimitiveProbablyVisibleTime, TEXT("ToolTip"), TEXT("The amount of time a primitive is considered to be probably visible after it was last actually visible."));
				MetaData->SetValue(NewProp_CameraTranslationThreshold, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_CameraTranslationThreshold, TEXT("ToolTip"), TEXT("camera movement beyond which occlusion queries are ignored from previous frame (because they are likely not valid)"));
				MetaData->SetValue(NewProp_CameraRotationThreshold, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_CameraRotationThreshold, TEXT("ToolTip"), TEXT("camera rotation (deg) beyond which occlusion queries are ignored from previous frame (because they are likely not valid)"));
				MetaData->SetValue(NewProp_bAllowMatureLanguage, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_bAllowMatureLanguage, TEXT("ToolTip"), TEXT("whether mature language is allowed *"));
				MetaData->SetValue(NewProp_MeshLODRange, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_MeshLODRange, TEXT("ToolTip"), TEXT("Level of detail range control for meshes"));
				MetaData->SetValue(NewProp_TransitionGameMode, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_TransitionGameMode, TEXT("ToolTip"), TEXT("The gamemode for the destination map"));
				MetaData->SetValue(NewProp_TransitionDescription, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_TransitionDescription, TEXT("ToolTip"), TEXT("The current transition description text."));
				MetaData->SetValue(NewProp_TransitionType, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_TransitionType, TEXT("ToolTip"), TEXT("The current transition type."));
				MetaData->SetValue(NewProp_StreamingDistanceFactor, TEXT("Category"), TEXT("LevelStreaming"));
				MetaData->SetValue(NewProp_StreamingDistanceFactor, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_StreamingDistanceFactor, TEXT("ToolTip"), TEXT("Fudge factor for tweaking the distance based miplevel determination"));
				MetaData->SetValue(NewProp_C_BrushShape, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_C_BrushShape, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_C_Volume, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_C_Volume, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_C_OrthoBackground, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_C_OrthoBackground, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_C_BSPCollision, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_C_BSPCollision, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_C_VolumeCollision, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_C_VolumeCollision, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_C_ScaleBoxHi, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_C_ScaleBoxHi, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_C_WireBackground, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_C_WireBackground, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_C_NonSolidWire, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_C_NonSolidWire, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_C_SemiSolidWire, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_C_SemiSolidWire, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_C_SubtractWire, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_C_SubtractWire, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_C_AddWire, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_C_AddWire, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_C_BrushWire, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_C_BrushWire, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_C_WorldBox, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_C_WorldBox, TEXT("ToolTip"), TEXT("Color preferences."));
				MetaData->SetValue(NewProp_bShouldGenerateLowQualityLightmaps, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_bShouldGenerateLowQualityLightmaps, TEXT("ToolTip"), TEXT("Whether or not the LQ lightmaps should be generated during lighting rebuilds."));
				MetaData->SetValue(NewProp_NumPawnsAllowedToBeSpawnedInAFrame, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_NumPawnsAllowedToBeSpawnedInAFrame, TEXT("ToolTip"), TEXT("If bCheckForMultiplePawnsSpawnedInAFrame==true, then we will check to see that no more than this number of pawns are spawned in a frame. *"));
				MetaData->SetValue(NewProp_bCheckForMultiplePawnsSpawnedInAFrame, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_bCheckForMultiplePawnsSpawnedInAFrame, TEXT("ToolTip"), TEXT("Whether we should check for more than N pawns spawning in a single frame.\nBasically, spawning pawns and all of their attachments can be slow.  And on consoles it\ncan be really slow.  If this bool is true we will display a"));
				MetaData->SetValue(NewProp_SmoothedFrameRateRange, TEXT("Category"), TEXT("Framerate"));
				MetaData->SetValue(NewProp_SmoothedFrameRateRange, TEXT("EditCondition"), TEXT("!bUseFixedFrameRate"));
				MetaData->SetValue(NewProp_SmoothedFrameRateRange, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_SmoothedFrameRateRange, TEXT("ToolTip"), TEXT("Range of framerates in which smoothing will kick in"));
				MetaData->SetValue(NewProp_SmoothedFrameRateRange, TEXT("UIMax"), TEXT("200"));
				MetaData->SetValue(NewProp_SmoothedFrameRateRange, TEXT("UIMin"), TEXT("0"));
				MetaData->SetValue(NewProp_FixedFrameRate, TEXT("Category"), TEXT("Framerate"));
				MetaData->SetValue(NewProp_FixedFrameRate, TEXT("EditCondition"), TEXT("bUseFixedFrameRate"));
				MetaData->SetValue(NewProp_FixedFrameRate, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_FixedFrameRate, TEXT("ToolTip"), TEXT("The fixed framerate to use."));
				MetaData->SetValue(NewProp_bUseFixedFrameRate, TEXT("Category"), TEXT("Framerate"));
				MetaData->SetValue(NewProp_bUseFixedFrameRate, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_bUseFixedFrameRate, TEXT("ToolTip"), TEXT("Whether to use a fixed framerate."));
				MetaData->SetValue(NewProp_bSmoothFrameRate, TEXT("Category"), TEXT("Framerate"));
				MetaData->SetValue(NewProp_bSmoothFrameRate, TEXT("EditCondition"), TEXT("!bUseFixedFrameRate"));
				MetaData->SetValue(NewProp_bSmoothFrameRate, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_bSmoothFrameRate, TEXT("ToolTip"), TEXT("Whether to enable framerate smoothing."));
				MetaData->SetValue(NewProp_bEnableEditorPSysRealtimeLOD, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_bEnableEditorPSysRealtimeLOD, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_bCanBlueprintsTickByDefault, TEXT("Category"), TEXT("Blueprints"));
				MetaData->SetValue(NewProp_bCanBlueprintsTickByDefault, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_bCanBlueprintsTickByDefault, TEXT("ToolTip"), TEXT("Controls whether Blueprint subclasses of actors or components can tick by default.\n\nBlueprints that derive from native C++ classes that have bCanEverTick=true will always be able to tick\nBlueprints that derive from exactly AActor or UActorComponent will always be able to tick\nOtherwise, they can tick as long as the parent doesn't have meta=(ChildCannotTick) and either bCanBlueprintsTickByDefault is true or the parent has meta=(ChildCanTick)"));
				MetaData->SetValue(NewProp_MaximumLoopIterationCount, TEXT("Category"), TEXT("Blueprints"));
				MetaData->SetValue(NewProp_MaximumLoopIterationCount, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_MaximumLoopIterationCount, TEXT("ToolTip"), TEXT("Script maximum loop iteration count used as a threshold to warn users about script execution runaway"));
				MetaData->SetValue(NewProp_bSubtitlesForcedOff, TEXT("Category"), TEXT("Subtitles"));
				MetaData->SetValue(NewProp_bSubtitlesForcedOff, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_bSubtitlesForcedOff, TEXT("ToolTip"), TEXT("Flag for forcibly disabling subtitles even if you try to turn them back on they will be off"));
				MetaData->SetValue(NewProp_bSubtitlesEnabled, TEXT("Category"), TEXT("Subtitles"));
				MetaData->SetValue(NewProp_bSubtitlesEnabled, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_bSubtitlesEnabled, TEXT("ToolTip"), TEXT("Flag for completely disabling subtitles for localized sounds."));
				MetaData->SetValue(NewProp_bHardwareSurveyEnabled, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_bHardwareSurveyEnabled, TEXT("ToolTip"), TEXT("DEPRECATED - Can a runtime game/application report anonymous hardware survey statistics (such as display resolution and GPU model) back to Epic?"));
				MetaData->SetValue(NewProp_NearClipPlane, TEXT("Category"), TEXT("Settings"));
				MetaData->SetValue(NewProp_NearClipPlane, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_NearClipPlane, TEXT("ToolTip"), TEXT("The distance of the camera's near clipping plane."));
				MetaData->SetValue(NewProp_ClientCycles, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_ClientCycles, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_GameCycles, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_GameCycles, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_TickCycles, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_TickCycles, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_DeferredCommands, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_DeferredCommands, TEXT("ToolTip"), TEXT("Array of deferred command strings/ execs that get executed at the end of the frame"));
				MetaData->SetValue(NewProp_GameViewport, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_GameViewport, TEXT("ToolTip"), TEXT("The view port representing the current game instance. Can be 0 so don't use without checking."));
				MetaData->SetValue(NewProp_LightMapDensityTextureName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_LightMapDensityTextureName, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_LightMapDensityTexture, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_LightMapDensityTexture, TEXT("ToolTip"), TEXT("Texture used to display LightMapDensity"));
				MetaData->SetValue(NewProp_WeightMapPlaceholderTextureName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_WeightMapPlaceholderTextureName, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_WeightMapPlaceholderTexture, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_WeightMapPlaceholderTexture, TEXT("ToolTip"), TEXT("Texture used as a placeholder for terrain weight-maps to give the material the correct texture format."));
				MetaData->SetValue(NewProp_MiniFontTextureName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_MiniFontTextureName, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_MiniFontTexture, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_MiniFontTexture, TEXT("ToolTip"), TEXT("Texture used to do font rendering in shaders"));
				MetaData->SetValue(NewProp_PreIntegratedSkinBRDFTextureName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_PreIntegratedSkinBRDFTextureName, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_PreIntegratedSkinBRDFTexture, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_PreIntegratedSkinBRDFTexture, TEXT("ToolTip"), TEXT("Texture used for pre-integrated skin shading"));
				MetaData->SetValue(NewProp_ActiveStructRedirects, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_ActivePluginRedirects, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_ActiveClassRedirects, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_ActiveGameNameRedirects, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_DefaultPhysMaterialName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_DefaultPhysMaterialName, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_DefaultPhysMaterial, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_DefaultPhysMaterial, TEXT("ToolTip"), TEXT("PhysicalMaterial to use if none is defined for a particular object."));
				MetaData->SetValue(NewProp_EditorBrushMaterialName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_EditorBrushMaterialName, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_EditorBrushMaterial, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_EditorBrushMaterial, TEXT("ToolTip"), TEXT("A material used to render the sides of the builder brush/volumes/etc."));
				MetaData->SetValue(NewProp_StatColorMappings, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_StatColorMappings, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_LightMapDensitySelectedColor, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_LightMapDensitySelectedColor, TEXT("ToolTip"), TEXT("The color to render selected objects in for LightMap Density view mode."));
				MetaData->SetValue(NewProp_LightMapDensityVertexMappedColor, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_LightMapDensityVertexMappedColor, TEXT("ToolTip"), TEXT("The color to render vertex mapped objects in for LightMap Density view mode."));
				MetaData->SetValue(NewProp_RenderLightMapDensityColorScale, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_RenderLightMapDensityColorScale, TEXT("ToolTip"), TEXT("The scale factor when rendering color density."));
				MetaData->SetValue(NewProp_RenderLightMapDensityGrayscaleScale, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_RenderLightMapDensityGrayscaleScale, TEXT("ToolTip"), TEXT("The scale factor when rendering gray scale density."));
				MetaData->SetValue(NewProp_bRenderLightMapDensityGrayscale, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_bRenderLightMapDensityGrayscale, TEXT("ToolTip"), TEXT("If true, then render gray scale density."));
				MetaData->SetValue(NewProp_MaxLightMapDensity, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_MaxLightMapDensity, TEXT("ToolTip"), TEXT("Maximum lightmap density value for coloring."));
				MetaData->SetValue(NewProp_IdealLightMapDensity, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_IdealLightMapDensity, TEXT("ToolTip"), TEXT("Ideal lightmap density value for coloring."));
				MetaData->SetValue(NewProp_MinLightMapDensity, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_MinLightMapDensity, TEXT("ToolTip"), TEXT("Minimum lightmap density value for coloring."));
				MetaData->SetValue(NewProp_MaxES2PixelShaderAdditiveComplexityCount, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_MaxPixelShaderAdditiveComplexityCount, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_MaxPixelShaderAdditiveComplexityCount, TEXT("ToolTip"), TEXT("Complexity limits for the various complexity view mode combinations.\nThese limits are used to map instruction counts to ShaderComplexityColors."));
				MetaData->SetValue(NewProp_LODColorationColors, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_LODColorationColors, TEXT("ToolTip"), TEXT("The colors used to render LOD coloration."));
				MetaData->SetValue(NewProp_StationaryLightOverlapColors, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_StationaryLightOverlapColors, TEXT("ToolTip"), TEXT("The colors used to render stationary light overlap."));
				MetaData->SetValue(NewProp_ShaderComplexityColors, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_ShaderComplexityColors, TEXT("ToolTip"), TEXT("The colors used to render shader complexity."));
				MetaData->SetValue(NewProp_LightComplexityColors, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_LightComplexityColors, TEXT("ToolTip"), TEXT("The colors used to render light complexity."));
				MetaData->SetValue(NewProp_LightingOnlyBrightness, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_LightingOnlyBrightness, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_ArrowMaterialName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_ArrowMaterialName, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_ArrowMaterial, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_ArrowMaterial, TEXT("ToolTip"), TEXT("Material that 'fakes' lighting, used for arrows, widgets."));
				MetaData->SetValue(NewProp_PreviewShadowsIndicatorMaterialName, TEXT("AllowedClasses"), TEXT("Material"));
				MetaData->SetValue(NewProp_PreviewShadowsIndicatorMaterialName, TEXT("Category"), TEXT("DefaultMaterials"));
				MetaData->SetValue(NewProp_PreviewShadowsIndicatorMaterialName, TEXT("DisplayName"), TEXT("Preview Shadows Indicator Material"));
				MetaData->SetValue(NewProp_PreviewShadowsIndicatorMaterialName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_PreviewShadowsIndicatorMaterialName, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_PreviewShadowsIndicatorMaterial, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_PreviewShadowsIndicatorMaterial, TEXT("ToolTip"), TEXT("Material that renders a message about preview shadows being used."));
				MetaData->SetValue(NewProp_InvalidLightmapSettingsMaterialName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_InvalidLightmapSettingsMaterialName, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_InvalidLightmapSettingsMaterial, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_InvalidLightmapSettingsMaterial, TEXT("ToolTip"), TEXT("Material that renders a message about lightmap settings being invalid."));
				MetaData->SetValue(NewProp_ConstraintLimitMaterialName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_ConstraintLimitMaterialName, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_ConstraintLimitMaterialZ, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_ConstraintLimitMaterialY, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_ConstraintLimitMaterialX, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_ConstraintLimitMaterial, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_ConstraintLimitMaterial, TEXT("ToolTip"), TEXT("Material used to render constraint limits"));
				MetaData->SetValue(NewProp_BoneWeightMaterialName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_BoneWeightMaterialName, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_BoneWeightMaterial, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_BoneWeightMaterial, TEXT("ToolTip"), TEXT("Material used to render bone weights on skeletal meshes"));
				MetaData->SetValue(NewProp_VertexColorViewModeMaterialName_BlueOnly, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_VertexColorViewModeMaterialName_BlueOnly, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_VertexColorViewModeMaterial_BlueOnly, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_VertexColorViewModeMaterial_BlueOnly, TEXT("ToolTip"), TEXT("Material for visualizing vertex colors on meshes in the scene (blue only)"));
				MetaData->SetValue(NewProp_VertexColorViewModeMaterialName_GreenOnly, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_VertexColorViewModeMaterialName_GreenOnly, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_VertexColorViewModeMaterial_GreenOnly, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_VertexColorViewModeMaterial_GreenOnly, TEXT("ToolTip"), TEXT("Material for visualizing vertex colors on meshes in the scene (green only)"));
				MetaData->SetValue(NewProp_VertexColorViewModeMaterialName_RedOnly, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_VertexColorViewModeMaterialName_RedOnly, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_VertexColorViewModeMaterial_RedOnly, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_VertexColorViewModeMaterial_RedOnly, TEXT("ToolTip"), TEXT("Material for visualizing vertex colors on meshes in the scene (red only)"));
				MetaData->SetValue(NewProp_VertexColorViewModeMaterialName_AlphaAsColor, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_VertexColorViewModeMaterialName_AlphaAsColor, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_VertexColorViewModeMaterial_AlphaAsColor, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_VertexColorViewModeMaterial_AlphaAsColor, TEXT("ToolTip"), TEXT("Material for visualizing vertex colors on meshes in the scene (alpha channel as color)"));
				MetaData->SetValue(NewProp_VertexColorViewModeMaterialName_ColorOnly, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_VertexColorViewModeMaterialName_ColorOnly, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_VertexColorViewModeMaterial_ColorOnly, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_VertexColorViewModeMaterial_ColorOnly, TEXT("ToolTip"), TEXT("Material for visualizing vertex colors on meshes in the scene (color only, no alpha)"));
				MetaData->SetValue(NewProp_VertexColorMaterialName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_VertexColorMaterialName, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_VertexColorMaterial, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_VertexColorMaterial, TEXT("ToolTip"), TEXT("Material that renders vertex color as emmissive."));
				MetaData->SetValue(NewProp_RemoveSurfaceMaterialName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_RemoveSurfaceMaterialName, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_RemoveSurfaceMaterial, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_RemoveSurfaceMaterial, TEXT("ToolTip"), TEXT("Material used to indicate that the associated BSP surface should be removed."));
				MetaData->SetValue(NewProp_ShadedLevelColorationUnlitMaterialName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_ShadedLevelColorationUnlitMaterialName, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_ShadedLevelColorationUnlitMaterial, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_ShadedLevelColorationUnlitMaterial, TEXT("ToolTip"), TEXT("Material used for visualizing level membership in unlit view port modes.  Uses shading to show axis directions."));
				MetaData->SetValue(NewProp_ShadedLevelColorationLitMaterialName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_ShadedLevelColorationLitMaterialName, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_ShadedLevelColorationLitMaterial, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_ShadedLevelColorationLitMaterial, TEXT("ToolTip"), TEXT("Material used for visualizing level membership in lit view port modes. Uses shading to show axis directions."));
				MetaData->SetValue(NewProp_LightingTexelDensityName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_LightingTexelDensityName, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_LightingTexelDensityMaterial, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_LightingTexelDensityMaterial, TEXT("ToolTip"), TEXT("Material used for visualizing lighting only w/ lightmap texel density."));
				MetaData->SetValue(NewProp_LevelColorationUnlitMaterialName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_LevelColorationUnlitMaterialName, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_LevelColorationUnlitMaterial, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_LevelColorationUnlitMaterial, TEXT("ToolTip"), TEXT("Material used for visualizing level membership in unlit view port modes."));
				MetaData->SetValue(NewProp_LevelColorationLitMaterialName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_LevelColorationLitMaterialName, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_LevelColorationLitMaterial, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_LevelColorationLitMaterial, TEXT("ToolTip"), TEXT("Material used for visualizing level membership in lit view port modes."));
				MetaData->SetValue(NewProp_DebugMeshMaterialName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_DebugMeshMaterialName, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_DebugMeshMaterial, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_DebugMeshMaterial, TEXT("ToolTip"), TEXT("A material used to render debug meshes."));
				MetaData->SetValue(NewProp_GeomMaterialName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_GeomMaterialName, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_GeomMaterial, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_GeomMaterial, TEXT("ToolTip"), TEXT("A translucent material used to render things in geometry mode."));
				MetaData->SetValue(NewProp_WireframeMaterialName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_WireframeMaterialName, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_WireframeMaterial, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_WireframeMaterial, TEXT("ToolTip"), TEXT("The material used to render wireframe meshes."));
				MetaData->SetValue(NewProp_DefaultBokehTextureName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_DefaultBokehTextureName, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_DefaultBokehTexture, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_DefaultBokehTexture, TEXT("ToolTip"), TEXT("Texture used to blur out of focus content, mimics the Bokeh shape of actual cameras"));
				MetaData->SetValue(NewProp_HighFrequencyNoiseTextureName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_HighFrequencyNoiseTextureName, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_HighFrequencyNoiseTexture, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_HighFrequencyNoiseTexture, TEXT("ToolTip"), TEXT("Texture used to get random image grain values for post processing"));
				MetaData->SetValue(NewProp_DefaultBSPVertexTextureName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_DefaultBSPVertexTextureName, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_DefaultBSPVertexTexture, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_DefaultBSPVertexTexture, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_DefaultDiffuseTextureName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_DefaultDiffuseTextureName, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_DefaultDiffuseTexture, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_DefaultDiffuseTexture, TEXT("ToolTip"), TEXT("A global default diffuse texture."));
				MetaData->SetValue(NewProp_DefaultTextureName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_DefaultTextureName, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_DefaultTexture, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_DefaultTexture, TEXT("ToolTip"), TEXT("A global default texture."));
				MetaData->SetValue(NewProp_PlayOnConsoleSaveDir, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_PlayOnConsoleSaveDir, TEXT("ToolTip"), TEXT("Path that levels for play on console will be saved to (relative to FPaths::GameSavedDir())"));
				MetaData->SetValue(NewProp_DefaultPreviewPawnClassName, TEXT("Category"), TEXT("DefaultClasses"));
				MetaData->SetValue(NewProp_DefaultPreviewPawnClassName, TEXT("DisplayName"), TEXT("Default Preview Pawn Class"));
				MetaData->SetValue(NewProp_DefaultPreviewPawnClassName, TEXT("MetaClass"), TEXT("Pawn"));
				MetaData->SetValue(NewProp_DefaultPreviewPawnClassName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_DefaultPreviewPawnClassName, TEXT("ToolTip"), TEXT("The name of the class to use when previewing camera animations."));
				MetaData->SetValue(NewProp_DefaultPreviewPawnClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_DefaultPreviewPawnClass, TEXT("ToolTip"), TEXT("The class to use previewing camera animations."));
				MetaData->SetValue(NewProp_DefaultTireTypeName, TEXT("AllowedClasses"), TEXT("TireType"));
				MetaData->SetValue(NewProp_DefaultTireTypeName, TEXT("Category"), TEXT("DefaultClasses"));
				MetaData->SetValue(NewProp_DefaultTireTypeName, TEXT("DisplayName"), TEXT("Default Tire Type"));
				MetaData->SetValue(NewProp_DefaultTireTypeName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_DefaultTireTypeName, TEXT("ToolTip"), TEXT("Path to the default tire type"));
				MetaData->SetValue(NewProp_DefaultTireType, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_DefaultTireType, TEXT("ToolTip"), TEXT("The tire type used when no tire type is explicitly applied."));
				MetaData->SetValue(NewProp_GameSingleton, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_GameSingleton, TEXT("ToolTip"), TEXT("A UObject spawned at initialization time to handle game-specific data"));
				MetaData->SetValue(NewProp_GameSingletonClassName, TEXT("Category"), TEXT("DefaultClasses"));
				MetaData->SetValue(NewProp_GameSingletonClassName, TEXT("DisplayName"), TEXT("Game Singleton Class"));
				MetaData->SetValue(NewProp_GameSingletonClassName, TEXT("MetaClass"), TEXT("Object"));
				MetaData->SetValue(NewProp_GameSingletonClassName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_GameSingletonClassName, TEXT("ToolTip"), TEXT("Name of a singleton class to create at startup time, configurable per game"));
				MetaData->SetValue(NewProp_DefaultBlueprintBaseClassName, TEXT("AllowAbstract"), TEXT("true"));
				MetaData->SetValue(NewProp_DefaultBlueprintBaseClassName, TEXT("Category"), TEXT("DefaultClasses"));
				MetaData->SetValue(NewProp_DefaultBlueprintBaseClassName, TEXT("DisplayName"), TEXT("Default Blueprint Base Class"));
				MetaData->SetValue(NewProp_DefaultBlueprintBaseClassName, TEXT("IsBlueprintBaseOnly"), TEXT("true"));
				MetaData->SetValue(NewProp_DefaultBlueprintBaseClassName, TEXT("MetaClass"), TEXT("Object"));
				MetaData->SetValue(NewProp_DefaultBlueprintBaseClassName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_DefaultBlueprintBaseClassName, TEXT("ToolTip"), TEXT("Name of the base class to use for new blueprints, configurable on a per-game basis"));
				MetaData->SetValue(NewProp_LevelScriptActorClassName, TEXT("Category"), TEXT("DefaultClasses"));
				MetaData->SetValue(NewProp_LevelScriptActorClassName, TEXT("DisplayName"), TEXT("Level Script Actor Class"));
				MetaData->SetValue(NewProp_LevelScriptActorClassName, TEXT("MetaClass"), TEXT("LevelScriptActor"));
				MetaData->SetValue(NewProp_LevelScriptActorClassName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_LevelScriptActorClassName, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_LevelScriptActorClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_LevelScriptActorClass, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_GameUserSettings, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_GameUserSettings, TEXT("ToolTip"), TEXT("Global instance of the user game settings"));
				MetaData->SetValue(NewProp_AIControllerClassName, TEXT("DisplayName"), TEXT("Default AIController class for all Pawns"));
				MetaData->SetValue(NewProp_AIControllerClassName, TEXT("MetaClass"), TEXT("AI"));
				MetaData->SetValue(NewProp_AIControllerClassName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_AIControllerClassName, TEXT("ToolTip"), TEXT("name of Controller class to be used as default AIController class for pawns"));
				MetaData->SetValue(NewProp_GameUserSettingsClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_GameUserSettingsClassName, TEXT("DisplayName"), TEXT("Game User Settings Class"));
				MetaData->SetValue(NewProp_GameUserSettingsClassName, TEXT("MetaClass"), TEXT("GameUserSettings"));
				MetaData->SetValue(NewProp_GameUserSettingsClassName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_PhysicsCollisionHandlerClassName, TEXT("Category"), TEXT("DefaultClasses"));
				MetaData->SetValue(NewProp_PhysicsCollisionHandlerClassName, TEXT("DisplayName"), TEXT("Physics Collision Handler Class"));
				MetaData->SetValue(NewProp_PhysicsCollisionHandlerClassName, TEXT("MetaClass"), TEXT("PhysicsCollisionHandler"));
				MetaData->SetValue(NewProp_PhysicsCollisionHandlerClassName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_PhysicsCollisionHandlerClassName, TEXT("ToolTip"), TEXT("Name of PhysicsCollisionHandler class we should use by default."));
				MetaData->SetValue(NewProp_PhysicsCollisionHandlerClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_PhysicsCollisionHandlerClass, TEXT("ToolTip"), TEXT("PhysicsCollisionHandler class we should use by default *"));
				MetaData->SetValue(NewProp_AvoidanceManagerClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_AvoidanceManagerClass, TEXT("ToolTip"), TEXT("The class for behavior tree manager *"));
				MetaData->SetValue(NewProp_AvoidanceManagerClassName, TEXT("DisplayName"), TEXT("Avoidance Manager Class"));
				MetaData->SetValue(NewProp_AvoidanceManagerClassName, TEXT("MetaClass"), TEXT("AvoidanceManager"));
				MetaData->SetValue(NewProp_AvoidanceManagerClassName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_AvoidanceManagerClassName, TEXT("ToolTip"), TEXT("Name of behavior tree manager class"));
				MetaData->SetValue(NewProp_NavigationSystemClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_NavigationSystemClass, TEXT("ToolTip"), TEXT("The class for NavigationSystem *"));
				MetaData->SetValue(NewProp_NavigationSystemClassName, TEXT("DisplayName"), TEXT("Navigation System Class"));
				MetaData->SetValue(NewProp_NavigationSystemClassName, TEXT("MetaClass"), TEXT("NavigationSystem"));
				MetaData->SetValue(NewProp_NavigationSystemClassName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_NavigationSystemClassName, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_WorldSettingsClassName, TEXT("Category"), TEXT("DefaultClasses"));
				MetaData->SetValue(NewProp_WorldSettingsClassName, TEXT("DisplayName"), TEXT("World Settings Class"));
				MetaData->SetValue(NewProp_WorldSettingsClassName, TEXT("MetaClass"), TEXT("WorldSettings"));
				MetaData->SetValue(NewProp_WorldSettingsClassName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_WorldSettingsClassName, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_WorldSettingsClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_WorldSettingsClass, TEXT("ToolTip"), TEXT("The class for WorldSettings *"));
				MetaData->SetValue(NewProp_LocalPlayerClassName, TEXT("Category"), TEXT("DefaultClasses"));
				MetaData->SetValue(NewProp_LocalPlayerClassName, TEXT("DisplayName"), TEXT("Local Player Class"));
				MetaData->SetValue(NewProp_LocalPlayerClassName, TEXT("MetaClass"), TEXT("LocalPlayer"));
				MetaData->SetValue(NewProp_LocalPlayerClassName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_LocalPlayerClassName, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_LocalPlayerClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_LocalPlayerClass, TEXT("ToolTip"), TEXT("The class to use for local players."));
				MetaData->SetValue(NewProp_GameViewportClientClassName, TEXT("Category"), TEXT("DefaultClasses"));
				MetaData->SetValue(NewProp_GameViewportClientClassName, TEXT("DisplayName"), TEXT("Game Viewport Client Class"));
				MetaData->SetValue(NewProp_GameViewportClientClassName, TEXT("MetaClass"), TEXT("GameViewportClient"));
				MetaData->SetValue(NewProp_GameViewportClientClassName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_GameViewportClientClassName, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_GameViewportClientClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_GameViewportClientClass, TEXT("ToolTip"), TEXT("The class to use for the game viewport client."));
				MetaData->SetValue(NewProp_ConsoleClassName, TEXT("Category"), TEXT("DefaultClasses"));
				MetaData->SetValue(NewProp_ConsoleClassName, TEXT("DisplayName"), TEXT("Console Class"));
				MetaData->SetValue(NewProp_ConsoleClassName, TEXT("MetaClass"), TEXT("Console"));
				MetaData->SetValue(NewProp_ConsoleClassName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_ConsoleClassName, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_ConsoleClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_ConsoleClass, TEXT("ToolTip"), TEXT("The class to use for the game console."));
				MetaData->SetValue(NewProp_AdditionalFontNames, TEXT("Category"), TEXT("Fonts"));
				MetaData->SetValue(NewProp_AdditionalFontNames, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_AdditionalFontNames, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_AdditionalFonts, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_AdditionalFonts, TEXT("ToolTip"), TEXT("Any additional fonts that script may use without hard-referencing the font."));
				MetaData->SetValue(NewProp_SubtitleFontName, TEXT("AllowedClasses"), TEXT("Font"));
				MetaData->SetValue(NewProp_SubtitleFontName, TEXT("Category"), TEXT("Fonts"));
				MetaData->SetValue(NewProp_SubtitleFontName, TEXT("DisplayName"), TEXT("Subtitle Font"));
				MetaData->SetValue(NewProp_SubtitleFontName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_SubtitleFontName, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_SubtitleFont, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_SubtitleFont, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_LargeFontName, TEXT("AllowedClasses"), TEXT("Font"));
				MetaData->SetValue(NewProp_LargeFontName, TEXT("Category"), TEXT("Fonts"));
				MetaData->SetValue(NewProp_LargeFontName, TEXT("DisplayName"), TEXT("Large Font"));
				MetaData->SetValue(NewProp_LargeFontName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_LargeFontName, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_LargeFont, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_LargeFont, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_MediumFontName, TEXT("AllowedClasses"), TEXT("Font"));
				MetaData->SetValue(NewProp_MediumFontName, TEXT("Category"), TEXT("Fonts"));
				MetaData->SetValue(NewProp_MediumFontName, TEXT("DisplayName"), TEXT("Medium Font"));
				MetaData->SetValue(NewProp_MediumFontName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_MediumFontName, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_MediumFont, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_MediumFont, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_SmallFontName, TEXT("AllowedClasses"), TEXT("Font"));
				MetaData->SetValue(NewProp_SmallFontName, TEXT("Category"), TEXT("Fonts"));
				MetaData->SetValue(NewProp_SmallFontName, TEXT("DisplayName"), TEXT("Small Font"));
				MetaData->SetValue(NewProp_SmallFontName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_SmallFontName, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_SmallFont, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_SmallFont, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_TinyFontName, TEXT("AllowedClasses"), TEXT("Font"));
				MetaData->SetValue(NewProp_TinyFontName, TEXT("Category"), TEXT("Fonts"));
				MetaData->SetValue(NewProp_TinyFontName, TEXT("DisplayName"), TEXT("Tiny Font"));
				MetaData->SetValue(NewProp_TinyFontName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_TinyFontName, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_TinyFont, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Engine.h"));
				MetaData->SetValue(NewProp_TinyFont, TEXT("ToolTip"), TEXT("Fonts."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UEngine(Z_Construct_UClass_UEngine, TEXT("UEngine"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UEngine);
	UClass* Z_Construct_UClass_UGameEngine_NoRegister()
	{
		return UGameEngine::StaticClass();
	}
	UClass* Z_Construct_UClass_UGameEngine()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UEngine();
			Z_Construct_UPackage_Engine();
			OuterClass = UGameEngine::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x2010008E;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_GameInstance = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GameInstance"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(GameInstance, UGameEngine), 0x0000000000002000, Z_Construct_UClass_UGameInstance_NoRegister());
				UProperty* NewProp_ServerFlushLogInterval = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ServerFlushLogInterval"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ServerFlushLogInterval, UGameEngine), 0x0000000000004000);
				UProperty* NewProp_MaxDeltaTime = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxDeltaTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MaxDeltaTime, UGameEngine), 0x0000000000004000);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/GameEngine.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/GameEngine.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Engine that manages core systems that enable a game."));
				MetaData->SetValue(NewProp_GameInstance, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/GameEngine.h"));
				MetaData->SetValue(NewProp_ServerFlushLogInterval, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/GameEngine.h"));
				MetaData->SetValue(NewProp_ServerFlushLogInterval, TEXT("ToolTip"), TEXT("Maximium time (in seconds) between the flushes of the logs on the server (best effort). If 0, this will happen every tick."));
				MetaData->SetValue(NewProp_MaxDeltaTime, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/GameEngine.h"));
				MetaData->SetValue(NewProp_MaxDeltaTime, TEXT("ToolTip"), TEXT("Maximium delta time the engine uses to populate FApp::DeltaTime. If 0, unbound."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UGameEngine(Z_Construct_UClass_UGameEngine, TEXT("UGameEngine"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UGameEngine);
	UClass* Z_Construct_UClass_UExporter_NoRegister()
	{
		return UExporter::StaticClass();
	}
	UClass* Z_Construct_UClass_UExporter()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UExporter::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080089;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bForceFileOperations, UExporter, uint8);
				UProperty* NewProp_bForceFileOperations = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bForceFileOperations"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bForceFileOperations, UExporter), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bForceFileOperations, UExporter), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSelectedOnly, UExporter, uint8);
				UProperty* NewProp_bSelectedOnly = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bSelectedOnly"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSelectedOnly, UExporter), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bSelectedOnly, UExporter), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bText, UExporter, uint8);
				UProperty* NewProp_bText = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bText"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bText, UExporter), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bText, UExporter), sizeof(uint8), false);
				UProperty* NewProp_TextIndent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TextIndent"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(TextIndent, UExporter), 0x0000000000000000);
				UProperty* NewProp_PreferredFormatIndex = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PreferredFormatIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(PreferredFormatIndex, UExporter), 0x0000000000000000);
				UProperty* NewProp_FormatDescription = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FormatDescription"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(FormatDescription, UExporter), 0x0000000000000000);
				UProperty* NewProp_FormatDescription_Inner = new(EC_InternalUseOnlyConstructor, NewProp_FormatDescription, TEXT("FormatDescription"), RF_Public|RF_Transient|RF_Native) UStrProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
				UProperty* NewProp_FormatExtension = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FormatExtension"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(FormatExtension, UExporter), 0x0000000000000000);
				UProperty* NewProp_FormatExtension_Inner = new(EC_InternalUseOnlyConstructor, NewProp_FormatExtension, TEXT("FormatExtension"), RF_Public|RF_Transient|RF_Native) UStrProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
				UProperty* NewProp_ExportRootScope = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ExportRootScope"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ExportRootScope, UExporter), 0x0000000000002000, Z_Construct_UClass_UObject_NoRegister());
				UProperty* NewProp_SupportedClass = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SupportedClass"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(SupportedClass, UExporter), 0x0004000000000000, Z_Construct_UClass_UObject_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Exporters/Exporter.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Exporters/Exporter.h"));
				MetaData->SetValue(NewProp_bForceFileOperations, TEXT("ModuleRelativePath"), TEXT("Classes/Exporters/Exporter.h"));
				MetaData->SetValue(NewProp_bForceFileOperations, TEXT("ToolTip"), TEXT("If true, this will force the exporter code to create a file-based Ar (this can keep large output files from taking too much memory)"));
				MetaData->SetValue(NewProp_bSelectedOnly, TEXT("ModuleRelativePath"), TEXT("Classes/Exporters/Exporter.h"));
				MetaData->SetValue(NewProp_bSelectedOnly, TEXT("ToolTip"), TEXT("If true, this will export only the selected objects"));
				MetaData->SetValue(NewProp_bText, TEXT("ModuleRelativePath"), TEXT("Classes/Exporters/Exporter.h"));
				MetaData->SetValue(NewProp_bText, TEXT("ToolTip"), TEXT("If true, this will export the data as text"));
				MetaData->SetValue(NewProp_TextIndent, TEXT("ModuleRelativePath"), TEXT("Classes/Exporters/Exporter.h"));
				MetaData->SetValue(NewProp_TextIndent, TEXT("ToolTip"), TEXT("Current indentation of spaces of the exported text"));
				MetaData->SetValue(NewProp_PreferredFormatIndex, TEXT("ModuleRelativePath"), TEXT("Classes/Exporters/Exporter.h"));
				MetaData->SetValue(NewProp_PreferredFormatIndex, TEXT("ToolTip"), TEXT("Index into FormatExtension/FormatDescription of the preferred export format."));
				MetaData->SetValue(NewProp_FormatDescription, TEXT("ModuleRelativePath"), TEXT("Classes/Exporters/Exporter.h"));
				MetaData->SetValue(NewProp_FormatDescription, TEXT("ToolTip"), TEXT("Descriptiong of the export format"));
				MetaData->SetValue(NewProp_FormatExtension, TEXT("ModuleRelativePath"), TEXT("Classes/Exporters/Exporter.h"));
				MetaData->SetValue(NewProp_FormatExtension, TEXT("ToolTip"), TEXT("File extension to use for this exporter"));
				MetaData->SetValue(NewProp_ExportRootScope, TEXT("ModuleRelativePath"), TEXT("Classes/Exporters/Exporter.h"));
				MetaData->SetValue(NewProp_ExportRootScope, TEXT("ToolTip"), TEXT("The root scope of objects to be exported, only used if PPF_ExportsNotFullyQualfied is set\nObjects being exported that are contained within ExportRootScope will use just their name instead of a full path"));
				MetaData->SetValue(NewProp_SupportedClass, TEXT("ModuleRelativePath"), TEXT("Classes/Exporters/Exporter.h"));
				MetaData->SetValue(NewProp_SupportedClass, TEXT("ToolTip"), TEXT("Supported class of this exporter"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UExporter(Z_Construct_UClass_UExporter, TEXT("UExporter"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UExporter);
	UEnum* Z_Construct_UEnum_Engine_EFontImportCharacterSet()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EFontImportCharacterSet_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EFontImportCharacterSet"), 0, Get_Z_Construct_UEnum_Engine_EFontImportCharacterSet_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EFontImportCharacterSet"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("FontICS_Default")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("FontICS_Ansi")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("FontICS_Symbol")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("FontICS_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/FontImportOptions.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Font character set type for importing TrueType fonts."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EFontImportCharacterSet_CRC() { return 1711535413U; }
	UScriptStruct* Z_Construct_UScriptStruct_FFontImportOptionsData()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FFontImportOptionsData_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("FontImportOptionsData"), sizeof(FFontImportOptionsData), Get_Z_Construct_UScriptStruct_FFontImportOptionsData_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FontImportOptionsData"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FFontImportOptionsData>, EStructFlags(0x00000001));
			UProperty* NewProp_DistanceFieldScanRadiusScale = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DistanceFieldScanRadiusScale"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DistanceFieldScanRadiusScale, FFontImportOptionsData), 0x0000000000000001);
			UProperty* NewProp_DistanceFieldScaleFactor = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DistanceFieldScaleFactor"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(DistanceFieldScaleFactor, FFontImportOptionsData), 0x0000000000000001);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseDistanceFieldAlpha, FFontImportOptionsData, uint8);
			UProperty* NewProp_bUseDistanceFieldAlpha = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bUseDistanceFieldAlpha"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseDistanceFieldAlpha, FFontImportOptionsData), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bUseDistanceFieldAlpha, FFontImportOptionsData), sizeof(uint8), false);
			UProperty* NewProp_Kerning = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Kerning"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Kerning, FFontImportOptionsData), 0x0000000000000001);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnableLegacyMode, FFontImportOptionsData, uint8);
			UProperty* NewProp_bEnableLegacyMode = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bEnableLegacyMode"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnableLegacyMode, FFontImportOptionsData), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bEnableLegacyMode, FFontImportOptionsData), sizeof(uint8), false);
			UProperty* NewProp_ExtendBoxLeft = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ExtendBoxLeft"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ExtendBoxLeft, FFontImportOptionsData), 0x0000000000000001);
			UProperty* NewProp_ExtendBoxRight = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ExtendBoxRight"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ExtendBoxRight, FFontImportOptionsData), 0x0000000000000001);
			UProperty* NewProp_ExtendBoxBottom = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ExtendBoxBottom"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ExtendBoxBottom, FFontImportOptionsData), 0x0000000000000001);
			UProperty* NewProp_ExtendBoxTop = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ExtendBoxTop"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ExtendBoxTop, FFontImportOptionsData), 0x0000000000000001);
			UProperty* NewProp_YPadding = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("YPadding"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(YPadding, FFontImportOptionsData), 0x0000000000000001);
			UProperty* NewProp_XPadding = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("XPadding"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(XPadding, FFontImportOptionsData), 0x0000000000000001);
			UProperty* NewProp_TexturePageMaxHeight = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TexturePageMaxHeight"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(TexturePageMaxHeight, FFontImportOptionsData), 0x0000000000000001);
			UProperty* NewProp_TexturePageWidth = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TexturePageWidth"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(TexturePageWidth, FFontImportOptionsData), 0x0000000000000001);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnableDropShadow, FFontImportOptionsData, uint8);
			UProperty* NewProp_bEnableDropShadow = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bEnableDropShadow"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnableDropShadow, FFontImportOptionsData), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bEnableDropShadow, FFontImportOptionsData), sizeof(uint8), false);
			UProperty* NewProp_ForegroundColor = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ForegroundColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ForegroundColor, FFontImportOptionsData), 0x0000000000000001, Z_Construct_UScriptStruct_FLinearColor());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIncludeASCIIRange, FFontImportOptionsData, uint8);
			UProperty* NewProp_bIncludeASCIIRange = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bIncludeASCIIRange"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIncludeASCIIRange, FFontImportOptionsData), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bIncludeASCIIRange, FFontImportOptionsData), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCreatePrintableOnly, FFontImportOptionsData, uint8);
			UProperty* NewProp_bCreatePrintableOnly = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bCreatePrintableOnly"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCreatePrintableOnly, FFontImportOptionsData), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bCreatePrintableOnly, FFontImportOptionsData), sizeof(uint8), false);
			UProperty* NewProp_CharsFileWildcard = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CharsFileWildcard"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(CharsFileWildcard, FFontImportOptionsData), 0x0000000000000001);
			UProperty* NewProp_CharsFilePath = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CharsFilePath"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(CharsFilePath, FFontImportOptionsData), 0x0000000000000001);
			UProperty* NewProp_UnicodeRange = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UnicodeRange"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(UnicodeRange, FFontImportOptionsData), 0x0000000000000001);
			UProperty* NewProp_Chars = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Chars"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Chars, FFontImportOptionsData), 0x0000000000000001);
			UProperty* NewProp_CharacterSet = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CharacterSet"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(CharacterSet, FFontImportOptionsData), 0x0000000000000001, Z_Construct_UEnum_Engine_EFontImportCharacterSet());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAlphaOnly, FFontImportOptionsData, uint8);
			UProperty* NewProp_bAlphaOnly = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bAlphaOnly"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAlphaOnly, FFontImportOptionsData), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bAlphaOnly, FFontImportOptionsData), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnableUnderline, FFontImportOptionsData, uint8);
			UProperty* NewProp_bEnableUnderline = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bEnableUnderline"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnableUnderline, FFontImportOptionsData), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bEnableUnderline, FFontImportOptionsData), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnableItalic, FFontImportOptionsData, uint8);
			UProperty* NewProp_bEnableItalic = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bEnableItalic"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnableItalic, FFontImportOptionsData), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bEnableItalic, FFontImportOptionsData), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnableBold, FFontImportOptionsData, uint8);
			UProperty* NewProp_bEnableBold = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bEnableBold"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnableBold, FFontImportOptionsData), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bEnableBold, FFontImportOptionsData), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnableAntialiasing, FFontImportOptionsData, uint8);
			UProperty* NewProp_bEnableAntialiasing = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bEnableAntialiasing"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnableAntialiasing, FFontImportOptionsData), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bEnableAntialiasing, FFontImportOptionsData), sizeof(uint8), false);
			UProperty* NewProp_Height = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Height"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Height, FFontImportOptionsData), 0x0000000000000001);
			UProperty* NewProp_FontName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("FontName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(FontName, FFontImportOptionsData), 0x0000000000000001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/FontImportOptions.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Font import options"));
			MetaData->SetValue(NewProp_DistanceFieldScanRadiusScale, TEXT("Category"), TEXT("FontImportOptionsData"));
			MetaData->SetValue(NewProp_DistanceFieldScanRadiusScale, TEXT("ClampMax"), TEXT("4.0"));
			MetaData->SetValue(NewProp_DistanceFieldScanRadiusScale, TEXT("ClampMin"), TEXT("0.0"));
			MetaData->SetValue(NewProp_DistanceFieldScanRadiusScale, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/FontImportOptions.h"));
			MetaData->SetValue(NewProp_DistanceFieldScanRadiusScale, TEXT("ToolTip"), TEXT("Shrinks or expands the scan radius used to determine the silhouette of the font edges."));
			MetaData->SetValue(NewProp_DistanceFieldScaleFactor, TEXT("Category"), TEXT("FontImportOptionsData"));
			MetaData->SetValue(NewProp_DistanceFieldScaleFactor, TEXT("editcondition"), TEXT("bUseDistanceFieldAlpha"));
			MetaData->SetValue(NewProp_DistanceFieldScaleFactor, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/FontImportOptions.h"));
			MetaData->SetValue(NewProp_DistanceFieldScaleFactor, TEXT("ToolTip"), TEXT("Scale factor determines how big to scale the font bitmap during import when generating distance field values\nNote that higher values give better quality but importing will take much longer."));
			MetaData->SetValue(NewProp_bUseDistanceFieldAlpha, TEXT("Category"), TEXT("FontImportOptionsData"));
			MetaData->SetValue(NewProp_bUseDistanceFieldAlpha, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/FontImportOptions.h"));
			MetaData->SetValue(NewProp_bUseDistanceFieldAlpha, TEXT("ToolTip"), TEXT("If true then the alpha channel of the font textures will store a distance field instead of a color mask"));
			MetaData->SetValue(NewProp_Kerning, TEXT("Category"), TEXT("FontImportOptionsData"));
			MetaData->SetValue(NewProp_Kerning, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/FontImportOptions.h"));
			MetaData->SetValue(NewProp_Kerning, TEXT("ToolTip"), TEXT("The initial horizontal spacing adjustment between rendered characters.  This setting will be copied directly into the generated Font object's properties."));
			MetaData->SetValue(NewProp_bEnableLegacyMode, TEXT("Category"), TEXT("FontImportOptionsData"));
			MetaData->SetValue(NewProp_bEnableLegacyMode, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/FontImportOptions.h"));
			MetaData->SetValue(NewProp_bEnableLegacyMode, TEXT("ToolTip"), TEXT("Enables legacy font import mode.  This results in lower quality antialiasing and larger glyph bounds, but may be useful when debugging problems"));
			MetaData->SetValue(NewProp_ExtendBoxLeft, TEXT("Category"), TEXT("FontImportOptionsData"));
			MetaData->SetValue(NewProp_ExtendBoxLeft, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/FontImportOptions.h"));
			MetaData->SetValue(NewProp_ExtendBoxLeft, TEXT("ToolTip"), TEXT("How much to extend the left of the UV coordinate rectangle for each character in pixels"));
			MetaData->SetValue(NewProp_ExtendBoxRight, TEXT("Category"), TEXT("FontImportOptionsData"));
			MetaData->SetValue(NewProp_ExtendBoxRight, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/FontImportOptions.h"));
			MetaData->SetValue(NewProp_ExtendBoxRight, TEXT("ToolTip"), TEXT("How much to extend the right of the UV coordinate rectangle for each character in pixels"));
			MetaData->SetValue(NewProp_ExtendBoxBottom, TEXT("Category"), TEXT("FontImportOptionsData"));
			MetaData->SetValue(NewProp_ExtendBoxBottom, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/FontImportOptions.h"));
			MetaData->SetValue(NewProp_ExtendBoxBottom, TEXT("ToolTip"), TEXT("How much to extend the bottom of the UV coordinate rectangle for each character in pixels"));
			MetaData->SetValue(NewProp_ExtendBoxTop, TEXT("Category"), TEXT("FontImportOptionsData"));
			MetaData->SetValue(NewProp_ExtendBoxTop, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/FontImportOptions.h"));
			MetaData->SetValue(NewProp_ExtendBoxTop, TEXT("ToolTip"), TEXT("How much to extend the top of the UV coordinate rectangle for each character in pixels"));
			MetaData->SetValue(NewProp_YPadding, TEXT("Category"), TEXT("FontImportOptionsData"));
			MetaData->SetValue(NewProp_YPadding, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/FontImportOptions.h"));
			MetaData->SetValue(NewProp_YPadding, TEXT("ToolTip"), TEXT("Vertical padding between each font character on the texture page in pixels"));
			MetaData->SetValue(NewProp_XPadding, TEXT("Category"), TEXT("FontImportOptionsData"));
			MetaData->SetValue(NewProp_XPadding, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/FontImportOptions.h"));
			MetaData->SetValue(NewProp_XPadding, TEXT("ToolTip"), TEXT("Horizontal padding between each font character on the texture page in pixels"));
			MetaData->SetValue(NewProp_TexturePageMaxHeight, TEXT("Category"), TEXT("FontImportOptionsData"));
			MetaData->SetValue(NewProp_TexturePageMaxHeight, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/FontImportOptions.h"));
			MetaData->SetValue(NewProp_TexturePageMaxHeight, TEXT("ToolTip"), TEXT("The maximum vertical size of a texture page for this font in pixels.  The actual height of a texture page may be less than this if the font can fit within a smaller sized texture page."));
			MetaData->SetValue(NewProp_TexturePageWidth, TEXT("Category"), TEXT("FontImportOptionsData"));
			MetaData->SetValue(NewProp_TexturePageWidth, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/FontImportOptions.h"));
			MetaData->SetValue(NewProp_TexturePageWidth, TEXT("ToolTip"), TEXT("Horizontal size of each texture page for this font in pixels"));
			MetaData->SetValue(NewProp_bEnableDropShadow, TEXT("Category"), TEXT("FontImportOptionsData"));
			MetaData->SetValue(NewProp_bEnableDropShadow, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/FontImportOptions.h"));
			MetaData->SetValue(NewProp_bEnableDropShadow, TEXT("ToolTip"), TEXT("Enables a very simple, 1-pixel, black colored drop shadow for the generated font"));
			MetaData->SetValue(NewProp_ForegroundColor, TEXT("Category"), TEXT("FontImportOptionsData"));
			MetaData->SetValue(NewProp_ForegroundColor, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/FontImportOptions.h"));
			MetaData->SetValue(NewProp_ForegroundColor, TEXT("ToolTip"), TEXT("Color of the foreground font pixels.  Usually you should leave this white and instead use the UI Styles editor to change the color of the font on the fly"));
			MetaData->SetValue(NewProp_bIncludeASCIIRange, TEXT("Category"), TEXT("FontImportOptionsData"));
			MetaData->SetValue(NewProp_bIncludeASCIIRange, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/FontImportOptions.h"));
			MetaData->SetValue(NewProp_bIncludeASCIIRange, TEXT("ToolTip"), TEXT("When specifying a range of characters and this is enabled, forces ASCII characters (0 thru 255) to be included as well"));
			MetaData->SetValue(NewProp_bCreatePrintableOnly, TEXT("Category"), TEXT("FontImportOptionsData"));
			MetaData->SetValue(NewProp_bCreatePrintableOnly, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/FontImportOptions.h"));
			MetaData->SetValue(NewProp_bCreatePrintableOnly, TEXT("ToolTip"), TEXT("Skips generation of glyphs for any characters that are not considered 'printable'"));
			MetaData->SetValue(NewProp_CharsFileWildcard, TEXT("Category"), TEXT("FontImportOptionsData"));
			MetaData->SetValue(NewProp_CharsFileWildcard, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/FontImportOptions.h"));
			MetaData->SetValue(NewProp_CharsFileWildcard, TEXT("ToolTip"), TEXT("File mask wildcard that specifies which files within the CharsFilePath to scan for characters in include in the font"));
			MetaData->SetValue(NewProp_CharsFilePath, TEXT("Category"), TEXT("FontImportOptionsData"));
			MetaData->SetValue(NewProp_CharsFilePath, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/FontImportOptions.h"));
			MetaData->SetValue(NewProp_CharsFilePath, TEXT("ToolTip"), TEXT("Path on disk to a folder where files that contain a list of characters to include in the font"));
			MetaData->SetValue(NewProp_UnicodeRange, TEXT("Category"), TEXT("FontImportOptionsData"));
			MetaData->SetValue(NewProp_UnicodeRange, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/FontImportOptions.h"));
			MetaData->SetValue(NewProp_UnicodeRange, TEXT("ToolTip"), TEXT("Range of Unicode character values to include in the font.  You can specify ranges using hyphens and/or commas (e.g. '400-900')"));
			MetaData->SetValue(NewProp_Chars, TEXT("Category"), TEXT("FontImportOptionsData"));
			MetaData->SetValue(NewProp_Chars, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/FontImportOptions.h"));
			MetaData->SetValue(NewProp_Chars, TEXT("ToolTip"), TEXT("Explicit list of characters to include in the font"));
			MetaData->SetValue(NewProp_CharacterSet, TEXT("Category"), TEXT("FontImportOptionsData"));
			MetaData->SetValue(NewProp_CharacterSet, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/FontImportOptions.h"));
			MetaData->SetValue(NewProp_CharacterSet, TEXT("ToolTip"), TEXT("Character set for this font"));
			MetaData->SetValue(NewProp_bAlphaOnly, TEXT("Category"), TEXT("FontImportOptionsData"));
			MetaData->SetValue(NewProp_bAlphaOnly, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/FontImportOptions.h"));
			MetaData->SetValue(NewProp_bAlphaOnly, TEXT("ToolTip"), TEXT("if true then forces PF_G8 and only maintains Alpha value and discards color"));
			MetaData->SetValue(NewProp_bEnableUnderline, TEXT("Category"), TEXT("FontImportOptionsData"));
			MetaData->SetValue(NewProp_bEnableUnderline, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/FontImportOptions.h"));
			MetaData->SetValue(NewProp_bEnableUnderline, TEXT("ToolTip"), TEXT("Whether the font should be generated with an underline or not"));
			MetaData->SetValue(NewProp_bEnableItalic, TEXT("Category"), TEXT("FontImportOptionsData"));
			MetaData->SetValue(NewProp_bEnableItalic, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/FontImportOptions.h"));
			MetaData->SetValue(NewProp_bEnableItalic, TEXT("ToolTip"), TEXT("Whether the font should be generated in italics or not"));
			MetaData->SetValue(NewProp_bEnableBold, TEXT("Category"), TEXT("FontImportOptionsData"));
			MetaData->SetValue(NewProp_bEnableBold, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/FontImportOptions.h"));
			MetaData->SetValue(NewProp_bEnableBold, TEXT("ToolTip"), TEXT("Whether the font should be generated in bold or not"));
			MetaData->SetValue(NewProp_bEnableAntialiasing, TEXT("Category"), TEXT("FontImportOptionsData"));
			MetaData->SetValue(NewProp_bEnableAntialiasing, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/FontImportOptions.h"));
			MetaData->SetValue(NewProp_bEnableAntialiasing, TEXT("ToolTip"), TEXT("Whether the font should be antialiased or not.  Usually you should leave this enabled."));
			MetaData->SetValue(NewProp_Height, TEXT("Category"), TEXT("FontImportOptionsData"));
			MetaData->SetValue(NewProp_Height, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/FontImportOptions.h"));
			MetaData->SetValue(NewProp_Height, TEXT("ToolTip"), TEXT("Height of font (point size)"));
			MetaData->SetValue(NewProp_FontName, TEXT("Category"), TEXT("FontImportOptionsData"));
			MetaData->SetValue(NewProp_FontName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/FontImportOptions.h"));
			MetaData->SetValue(NewProp_FontName, TEXT("ToolTip"), TEXT("Name of the typeface for the font to import"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FFontImportOptionsData_CRC() { return 2033828019U; }
	UClass* Z_Construct_UClass_UFontImportOptions_NoRegister()
	{
		return UFontImportOptions::StaticClass();
	}
	UClass* Z_Construct_UClass_UFontImportOptions()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UFontImportOptions::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080088;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Data = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Data"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Data, UFontImportOptions), 0x0000000000000001, Z_Construct_UScriptStruct_FFontImportOptionsData());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/FontImportOptions.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/FontImportOptions.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Holds options for importing fonts."));
				MetaData->SetValue(NewProp_Data, TEXT("Category"), TEXT("FontImportOptions"));
				MetaData->SetValue(NewProp_Data, TEXT("FullyExpand"), TEXT("true"));
				MetaData->SetValue(NewProp_Data, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/FontImportOptions.h"));
				MetaData->SetValue(NewProp_Data, TEXT("ToolTip"), TEXT("The actual data for this object.  We wrap it in a struct so that we can copy it around between objects."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UFontImportOptions(Z_Construct_UClass_UFontImportOptions, TEXT("UFontImportOptions"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UFontImportOptions);
	UEnum* Z_Construct_UEnum_Engine_EFontCacheType()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EFontCacheType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EFontCacheType"), 0, Get_Z_Construct_UEnum_Engine_EFontCacheType_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EFontCacheType"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EFontCacheType::Offline")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EFontCacheType::Runtime")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EFontCacheType::EFontCacheType_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Font.h"));
			MetaData->SetValue(ReturnEnum, TEXT("Offline.ToolTip"), TEXT("The font is using offline caching (this is how UFont traditionally worked)."));
			MetaData->SetValue(ReturnEnum, TEXT("Runtime.ToolTip"), TEXT("The font is using runtime caching (this is how Slate fonts work)."));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Enumerates supported font caching types."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EFontCacheType_CRC() { return 3091542574U; }
	UScriptStruct* Z_Construct_UScriptStruct_FFontCharacter()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FFontCharacter_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("FontCharacter"), sizeof(FFontCharacter), Get_Z_Construct_UScriptStruct_FFontCharacter_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FontCharacter"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FFontCharacter>, EStructFlags(0x00000001));
			UProperty* NewProp_VerticalOffset = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("VerticalOffset"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(VerticalOffset, FFontCharacter), 0x0000000000000001);
			UProperty* NewProp_TextureIndex = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TextureIndex"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(TextureIndex, FFontCharacter), 0x0000000000000001);
			UProperty* NewProp_VSize = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("VSize"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(VSize, FFontCharacter), 0x0000000000000001);
			UProperty* NewProp_USize = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("USize"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(USize, FFontCharacter), 0x0000000000000001);
			UProperty* NewProp_StartV = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("StartV"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(StartV, FFontCharacter), 0x0000000000000001);
			UProperty* NewProp_StartU = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("StartU"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(StartU, FFontCharacter), 0x0000000000000001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Font.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("This struct is serialized using native serialization so any changes to it require a package version bump."));
			MetaData->SetValue(NewProp_VerticalOffset, TEXT("Category"), TEXT("FontCharacter"));
			MetaData->SetValue(NewProp_VerticalOffset, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Font.h"));
			MetaData->SetValue(NewProp_TextureIndex, TEXT("Category"), TEXT("FontCharacter"));
			MetaData->SetValue(NewProp_TextureIndex, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Font.h"));
			MetaData->SetValue(NewProp_VSize, TEXT("Category"), TEXT("FontCharacter"));
			MetaData->SetValue(NewProp_VSize, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Font.h"));
			MetaData->SetValue(NewProp_USize, TEXT("Category"), TEXT("FontCharacter"));
			MetaData->SetValue(NewProp_USize, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Font.h"));
			MetaData->SetValue(NewProp_StartV, TEXT("Category"), TEXT("FontCharacter"));
			MetaData->SetValue(NewProp_StartV, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Font.h"));
			MetaData->SetValue(NewProp_StartU, TEXT("Category"), TEXT("FontCharacter"));
			MetaData->SetValue(NewProp_StartU, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Font.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FFontCharacter_CRC() { return 581135900U; }
	UClass* Z_Construct_UClass_UFont_NoRegister()
	{
		return UFont::StaticClass();
	}
	UClass* Z_Construct_UClass_UFont()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UFont::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_CompositeFont = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CompositeFont"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(CompositeFont, UFont), 0x0000000000000000, Z_Construct_UScriptStruct_FCompositeFont());
				UProperty* NewProp_LegacyFontName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LegacyFontName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(LegacyFontName, UFont), 0x0000000000000001);
				UProperty* NewProp_LegacyFontSize = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LegacyFontSize"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(LegacyFontSize, UFont), 0x0000000000000001);
				UProperty* NewProp_ScalingFactor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ScalingFactor"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ScalingFactor, UFont), 0x0000000000000001);
				UProperty* NewProp_MaxCharHeight = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxCharHeight"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(MaxCharHeight, UFont), 0x0000000000002000);
				UProperty* NewProp_MaxCharHeight_Inner = new(EC_InternalUseOnlyConstructor, NewProp_MaxCharHeight, TEXT("MaxCharHeight"), RF_Public|RF_Transient|RF_Native) UIntProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
				UProperty* NewProp_NumCharacters = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NumCharacters"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(NumCharacters, UFont), 0x0000000000002000);
				UProperty* NewProp_ImportOptions = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ImportOptions"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ImportOptions, UFont), 0x0000000000000001, Z_Construct_UScriptStruct_FFontImportOptionsData());
				UProperty* NewProp_Kerning = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Kerning"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Kerning, UFont), 0x0000000000000001);
				UProperty* NewProp_Leading = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Leading"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Leading, UFont), 0x0000000000000001);
				UProperty* NewProp_Descent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Descent"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Descent, UFont), 0x0000000000000001);
				UProperty* NewProp_Ascent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Ascent"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Ascent, UFont), 0x0000000000000001);
				UProperty* NewProp_EmScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EmScale"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(EmScale, UFont), 0x0000000000000001);
				UProperty* NewProp_IsRemapped = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("IsRemapped"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(IsRemapped, UFont), 0x0000000000000000);
				UProperty* NewProp_Textures = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Textures"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Textures, UFont), 0x0000000000000000);
				UProperty* NewProp_Textures_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Textures, TEXT("Textures"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UTexture2D_NoRegister());
				UProperty* NewProp_Characters = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Characters"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Characters, UFont), 0x0000000000000001);
				UProperty* NewProp_Characters_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Characters, TEXT("Characters"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FFontCharacter());
				UProperty* NewProp_FontCacheType = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FontCacheType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(FontCacheType, UFont), 0x0000000000000001, Z_Construct_UEnum_Engine_EFontCacheType());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->Interfaces.Add(FImplementedInterface(Z_Construct_UClass_UFontProviderInterface_NoRegister(), VTABLE_OFFSET(UFont, IFontProviderInterface), false ));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("AutoExpandCategories"), TEXT("Font"));
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/Font.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Font.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("A font object, for use by Slate, UMG, and Canvas.\n\nA font can either be:\n  \x25cf Runtime cached - The font contains a series of TTF files that combine to form a composite font. The glyphs are cached on demand when required at runtime.\n  \x25cf Offline cached - The font contains a series of textures containing pre-baked cached glyphs and their associated texture coordinates."));
				MetaData->SetValue(NewProp_CompositeFont, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Font.h"));
				MetaData->SetValue(NewProp_CompositeFont, TEXT("ToolTip"), TEXT("Embedded composite font data"));
				MetaData->SetValue(NewProp_LegacyFontName, TEXT("Category"), TEXT("RuntimeFont"));
				MetaData->SetValue(NewProp_LegacyFontName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Font.h"));
				MetaData->SetValue(NewProp_LegacyFontName, TEXT("ToolTip"), TEXT("The default font name to use for legacy Canvas APIs that don't specify a font name"));
				MetaData->SetValue(NewProp_LegacyFontSize, TEXT("Category"), TEXT("RuntimeFont"));
				MetaData->SetValue(NewProp_LegacyFontSize, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Font.h"));
				MetaData->SetValue(NewProp_LegacyFontSize, TEXT("ToolTip"), TEXT("The default size of the font used for legacy Canvas APIs that don't specify a font size"));
				MetaData->SetValue(NewProp_ScalingFactor, TEXT("Category"), TEXT("OfflineFont"));
				MetaData->SetValue(NewProp_ScalingFactor, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Font.h"));
				MetaData->SetValue(NewProp_ScalingFactor, TEXT("ToolTip"), TEXT("Scale to apply to the font."));
				MetaData->SetValue(NewProp_MaxCharHeight, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Font.h"));
				MetaData->SetValue(NewProp_MaxCharHeight, TEXT("ToolTip"), TEXT("The maximum height of a character in this font.  For multi-fonts, this array will contain a maximum\n              character height for each multi-font, otherwise the array will contain only a single element.  This is\n              cached at load-time or creation time, and is never serialized."));
				MetaData->SetValue(NewProp_NumCharacters, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Font.h"));
				MetaData->SetValue(NewProp_NumCharacters, TEXT("ToolTip"), TEXT("Number of characters in the font, not including multiple instances of the same character (for multi-fonts).\n              This is cached at load-time or creation time, and is never serialized."));
				MetaData->SetValue(NewProp_ImportOptions, TEXT("Category"), TEXT("OfflineFont"));
				MetaData->SetValue(NewProp_ImportOptions, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Font.h"));
				MetaData->SetValue(NewProp_ImportOptions, TEXT("ToolTip"), TEXT("Options used when importing this font"));
				MetaData->SetValue(NewProp_Kerning, TEXT("Category"), TEXT("OfflineFont"));
				MetaData->SetValue(NewProp_Kerning, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Font.h"));
				MetaData->SetValue(NewProp_Kerning, TEXT("ToolTip"), TEXT("Default horizontal spacing between characters when rendering text with this font"));
				MetaData->SetValue(NewProp_Leading, TEXT("Category"), TEXT("OfflineFont"));
				MetaData->SetValue(NewProp_Leading, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Font.h"));
				MetaData->SetValue(NewProp_Leading, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_Descent, TEXT("Category"), TEXT("OfflineFont"));
				MetaData->SetValue(NewProp_Descent, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Font.h"));
				MetaData->SetValue(NewProp_Descent, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_Ascent, TEXT("Category"), TEXT("OfflineFont"));
				MetaData->SetValue(NewProp_Ascent, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Font.h"));
				MetaData->SetValue(NewProp_Ascent, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_EmScale, TEXT("Category"), TEXT("OfflineFont"));
				MetaData->SetValue(NewProp_EmScale, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Font.h"));
				MetaData->SetValue(NewProp_EmScale, TEXT("ToolTip"), TEXT("Font metrics."));
				MetaData->SetValue(NewProp_IsRemapped, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Font.h"));
				MetaData->SetValue(NewProp_IsRemapped, TEXT("ToolTip"), TEXT("True if font is 'remapped'.  That is, the character array is not a direct mapping to unicode values.  Instead,\n              all characters are indexed indirectly through the CharRemap array"));
				MetaData->SetValue(NewProp_Textures, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Font.h"));
				MetaData->SetValue(NewProp_Textures, TEXT("ToolTip"), TEXT("Textures that store this font's glyph image data //NOTE: Do not expose this to the editor as it has nasty crash potential"));
				MetaData->SetValue(NewProp_Characters, TEXT("Category"), TEXT("OfflineFont"));
				MetaData->SetValue(NewProp_Characters, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Font.h"));
				MetaData->SetValue(NewProp_Characters, TEXT("ToolTip"), TEXT("List of characters in the font.  For a MultiFont, this will include all characters in all sub-fonts!  Thus,\n              the number of characters in this array isn't necessary the number of characters available in the font"));
				MetaData->SetValue(NewProp_FontCacheType, TEXT("Category"), TEXT("Font"));
				MetaData->SetValue(NewProp_FontCacheType, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Font.h"));
				MetaData->SetValue(NewProp_FontCacheType, TEXT("ToolTip"), TEXT("What kind of font caching should we use? This controls which options we see"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UFont(Z_Construct_UClass_UFont, TEXT("UFont"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UFont);
	UClass* Z_Construct_UClass_UGameUserSettings_NoRegister()
	{
		return UGameUserSettings::StaticClass();
	}
	UClass* Z_Construct_UClass_UGameUserSettings()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UGameUserSettings::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x60100084;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_AudioQualityLevel = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AudioQualityLevel"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(AudioQualityLevel, UGameUserSettings), 0x0000080000004000);
				UProperty* NewProp_Version = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Version"), RF_Public|RF_Transient|RF_Native) UUInt32Property(CPP_PROPERTY_BASE(Version, UGameUserSettings), 0x0000080000004000);
				UProperty* NewProp_LastConfirmedFullscreenMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LastConfirmedFullscreenMode"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(LastConfirmedFullscreenMode, UGameUserSettings), 0x0000080000004000);
				UProperty* NewProp_FullscreenMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FullscreenMode"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(FullscreenMode, UGameUserSettings), 0x0000080000004000);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseDesktopResolutionForFullscreen, UGameUserSettings, bool);
				UProperty* NewProp_bUseDesktopResolutionForFullscreen = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUseDesktopResolutionForFullscreen"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseDesktopResolutionForFullscreen, UGameUserSettings), 0x0000080000004000, CPP_BOOL_PROPERTY_BITMASK(bUseDesktopResolutionForFullscreen, UGameUserSettings), sizeof(bool), true);
				UProperty* NewProp_WindowPosY = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WindowPosY"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(WindowPosY, UGameUserSettings), 0x0000080000004000);
				UProperty* NewProp_WindowPosX = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WindowPosX"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(WindowPosX, UGameUserSettings), 0x0000080000004000);
				UProperty* NewProp_LastUserConfirmedResolutionSizeY = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LastUserConfirmedResolutionSizeY"), RF_Public|RF_Transient|RF_Native) UUInt32Property(CPP_PROPERTY_BASE(LastUserConfirmedResolutionSizeY, UGameUserSettings), 0x0000080000004000);
				UProperty* NewProp_LastUserConfirmedResolutionSizeX = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LastUserConfirmedResolutionSizeX"), RF_Public|RF_Transient|RF_Native) UUInt32Property(CPP_PROPERTY_BASE(LastUserConfirmedResolutionSizeX, UGameUserSettings), 0x0000080000004000);
				UProperty* NewProp_ResolutionSizeY = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ResolutionSizeY"), RF_Public|RF_Transient|RF_Native) UUInt32Property(CPP_PROPERTY_BASE(ResolutionSizeY, UGameUserSettings), 0x0000080000004000);
				UProperty* NewProp_ResolutionSizeX = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ResolutionSizeX"), RF_Public|RF_Transient|RF_Native) UUInt32Property(CPP_PROPERTY_BASE(ResolutionSizeX, UGameUserSettings), 0x0000080000004000);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseVSync, UGameUserSettings, bool);
				UProperty* NewProp_bUseVSync = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUseVSync"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseVSync, UGameUserSettings), 0x0000000000004000, CPP_BOOL_PROPERTY_BITMASK(bUseVSync, UGameUserSettings), sizeof(bool), true);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("GameUserSettings"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("GameFramework/GameUserSettings.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/GameUserSettings.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Stores user settings for a game (for example graphics and sound settings), with the ability to save and load to and from a file."));
				MetaData->SetValue(NewProp_AudioQualityLevel, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/GameUserSettings.h"));
				MetaData->SetValue(NewProp_Version, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/GameUserSettings.h"));
				MetaData->SetValue(NewProp_Version, TEXT("ToolTip"), TEXT("All settings will be wiped and set to default if the serialized version differs from UE_GAMEUSERSETTINGS_VERSION."));
				MetaData->SetValue(NewProp_LastConfirmedFullscreenMode, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/GameUserSettings.h"));
				MetaData->SetValue(NewProp_LastConfirmedFullscreenMode, TEXT("ToolTip"), TEXT("Last user confirmed fullscreen mode setting."));
				MetaData->SetValue(NewProp_FullscreenMode, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/GameUserSettings.h"));
				MetaData->SetValue(NewProp_FullscreenMode, TEXT("ToolTip"), TEXT("Game window fullscreen mode\n     0 = Fullscreen\n     1 = Windowed fullscreen\n     2 = Windowed\n     3 = WindowedMirror"));
				MetaData->SetValue(NewProp_bUseDesktopResolutionForFullscreen, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/GameUserSettings.h"));
				MetaData->SetValue(NewProp_bUseDesktopResolutionForFullscreen, TEXT("ToolTip"), TEXT("Whether or not to use the desktop resolution.\nThis value only applies if ResolutionX and ResolutionY have not been set yet and only on desktop platforms"));
				MetaData->SetValue(NewProp_WindowPosY, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/GameUserSettings.h"));
				MetaData->SetValue(NewProp_WindowPosY, TEXT("ToolTip"), TEXT("Window PosY"));
				MetaData->SetValue(NewProp_WindowPosX, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/GameUserSettings.h"));
				MetaData->SetValue(NewProp_WindowPosX, TEXT("ToolTip"), TEXT("Window PosX"));
				MetaData->SetValue(NewProp_LastUserConfirmedResolutionSizeY, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/GameUserSettings.h"));
				MetaData->SetValue(NewProp_LastUserConfirmedResolutionSizeY, TEXT("ToolTip"), TEXT("Game screen resolution height, in pixels."));
				MetaData->SetValue(NewProp_LastUserConfirmedResolutionSizeX, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/GameUserSettings.h"));
				MetaData->SetValue(NewProp_LastUserConfirmedResolutionSizeX, TEXT("ToolTip"), TEXT("Game screen resolution width, in pixels."));
				MetaData->SetValue(NewProp_ResolutionSizeY, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/GameUserSettings.h"));
				MetaData->SetValue(NewProp_ResolutionSizeY, TEXT("ToolTip"), TEXT("Game screen resolution height, in pixels."));
				MetaData->SetValue(NewProp_ResolutionSizeX, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/GameUserSettings.h"));
				MetaData->SetValue(NewProp_ResolutionSizeX, TEXT("ToolTip"), TEXT("Game screen resolution width, in pixels."));
				MetaData->SetValue(NewProp_bUseVSync, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/GameUserSettings.h"));
				MetaData->SetValue(NewProp_bUseVSync, TEXT("ToolTip"), TEXT("Whether to use VSync or not. (public to allow UI to connect to it)"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UGameUserSettings(Z_Construct_UClass_UGameUserSettings, TEXT("UGameUserSettings"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UGameUserSettings);
	UScriptStruct* Z_Construct_UScriptStruct_FActiveHapticFeedbackEffect()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FActiveHapticFeedbackEffect_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("ActiveHapticFeedbackEffect"), sizeof(FActiveHapticFeedbackEffect), Get_Z_Construct_UScriptStruct_FActiveHapticFeedbackEffect_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ActiveHapticFeedbackEffect"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FActiveHapticFeedbackEffect>, EStructFlags(0x00000001));
			UProperty* NewProp_HapticEffect = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("HapticEffect"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(HapticEffect, FActiveHapticFeedbackEffect), 0x0000000000000000, Z_Construct_UClass_UHapticFeedbackEffect_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/HapticFeedbackEffect.h"));
			MetaData->SetValue(NewProp_HapticEffect, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/HapticFeedbackEffect.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FActiveHapticFeedbackEffect_CRC() { return 2249850459U; }
	UScriptStruct* Z_Construct_UScriptStruct_FHapticFeedbackDetails()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FHapticFeedbackDetails_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("HapticFeedbackDetails"), sizeof(FHapticFeedbackDetails), Get_Z_Construct_UScriptStruct_FHapticFeedbackDetails_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("HapticFeedbackDetails"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FHapticFeedbackDetails>, EStructFlags(0x00000001));
			UProperty* NewProp_Amplitude = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Amplitude"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Amplitude, FHapticFeedbackDetails), 0x0000000000000001, Z_Construct_UScriptStruct_FRuntimeFloatCurve());
			UProperty* NewProp_Frequency = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Frequency"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Frequency, FHapticFeedbackDetails), 0x0000000000000001, Z_Construct_UScriptStruct_FRuntimeFloatCurve());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/HapticFeedbackEffect.h"));
			MetaData->SetValue(NewProp_Amplitude, TEXT("Category"), TEXT("HapticDetails"));
			MetaData->SetValue(NewProp_Amplitude, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/HapticFeedbackEffect.h"));
			MetaData->SetValue(NewProp_Amplitude, TEXT("ToolTip"), TEXT("The amplitude to vibrate the haptic device at.  Amplitudes are normalized over the range [0.0, 1.0], with 1.0 being the max setting of the device"));
			MetaData->SetValue(NewProp_Frequency, TEXT("Category"), TEXT("HapticDetails"));
			MetaData->SetValue(NewProp_Frequency, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/HapticFeedbackEffect.h"));
			MetaData->SetValue(NewProp_Frequency, TEXT("ToolTip"), TEXT("The frequency to vibrate the haptic device at.  Frequency ranges vary by device!"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FHapticFeedbackDetails_CRC() { return 4260608600U; }
	UClass* Z_Construct_UClass_UHapticFeedbackEffect_NoRegister()
	{
		return UHapticFeedbackEffect::StaticClass();
	}
	UClass* Z_Construct_UClass_UHapticFeedbackEffect()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UHapticFeedbackEffect::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_HapticDetails = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HapticDetails"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(HapticDetails, UHapticFeedbackEffect), 0x0000000000000001, Z_Construct_UScriptStruct_FHapticFeedbackDetails());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("GameFramework/HapticFeedbackEffect.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/HapticFeedbackEffect.h"));
				MetaData->SetValue(NewProp_HapticDetails, TEXT("Category"), TEXT("HapticFeedbackEffect"));
				MetaData->SetValue(NewProp_HapticDetails, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/HapticFeedbackEffect.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UHapticFeedbackEffect(Z_Construct_UClass_UHapticFeedbackEffect, TEXT("UHapticFeedbackEffect"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UHapticFeedbackEffect);
	UScriptStruct* Z_Construct_UScriptStruct_FComponentOverrideRecord()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FComponentOverrideRecord_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("ComponentOverrideRecord"), sizeof(FComponentOverrideRecord), Get_Z_Construct_UScriptStruct_FComponentOverrideRecord_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ComponentOverrideRecord"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FComponentOverrideRecord>, EStructFlags(0x00000005));
			UProperty* NewProp_ComponentKey = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ComponentKey"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ComponentKey, FComponentOverrideRecord), 0x0000000000000000, Z_Construct_UScriptStruct_FComponentKey());
			UProperty* NewProp_ComponentTemplate = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ComponentTemplate"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ComponentTemplate, FComponentOverrideRecord), 0x0000000000080008, Z_Construct_UClass_UActorComponent_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/InheritableComponentHandler.h"));
			MetaData->SetValue(NewProp_ComponentKey, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/InheritableComponentHandler.h"));
			MetaData->SetValue(NewProp_ComponentTemplate, TEXT("EditInline"), TEXT("true"));
			MetaData->SetValue(NewProp_ComponentTemplate, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/InheritableComponentHandler.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FComponentOverrideRecord_CRC() { return 3344328999U; }
	UScriptStruct* Z_Construct_UScriptStruct_FComponentKey()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FComponentKey_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("ComponentKey"), sizeof(FComponentKey), Get_Z_Construct_UScriptStruct_FComponentKey_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ComponentKey"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FComponentKey>, EStructFlags(0x00000201));
			UProperty* NewProp_AssociatedGuid = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("AssociatedGuid"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(AssociatedGuid, FComponentKey), 0x0000000000000000, Z_Construct_UScriptStruct_FGuid());
			UProperty* NewProp_SCSVariableName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SCSVariableName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(SCSVariableName, FComponentKey), 0x0000000000000000);
			UProperty* NewProp_OwnerClass = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("OwnerClass"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(OwnerClass, FComponentKey), 0x0000000000000000, Z_Construct_UClass_UObject_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/InheritableComponentHandler.h"));
			MetaData->SetValue(NewProp_AssociatedGuid, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/InheritableComponentHandler.h"));
			MetaData->SetValue(NewProp_SCSVariableName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/InheritableComponentHandler.h"));
			MetaData->SetValue(NewProp_OwnerClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/InheritableComponentHandler.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FComponentKey_CRC() { return 3763662981U; }
	UClass* Z_Construct_UClass_UInheritableComponentHandler_NoRegister()
	{
		return UInheritableComponentHandler::StaticClass();
	}
	UClass* Z_Construct_UClass_UInheritableComponentHandler()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UInheritableComponentHandler::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Records = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Records"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Records, UInheritableComponentHandler), 0x0000008000000000);
				UProperty* NewProp_Records_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Records, TEXT("Records"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000008000000000, Z_Construct_UScriptStruct_FComponentOverrideRecord());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/InheritableComponentHandler.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/InheritableComponentHandler.h"));
				MetaData->SetValue(NewProp_Records, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/InheritableComponentHandler.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UInheritableComponentHandler(Z_Construct_UClass_UInheritableComponentHandler, TEXT("UInheritableComponentHandler"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UInheritableComponentHandler);
	UScriptStruct* Z_Construct_UScriptStruct_FInputAxisKeyMapping()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FInputAxisKeyMapping_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("InputAxisKeyMapping"), sizeof(FInputAxisKeyMapping), Get_Z_Construct_UScriptStruct_FInputAxisKeyMapping_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("InputAxisKeyMapping"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FInputAxisKeyMapping>, EStructFlags(0x00000001));
			UProperty* NewProp_Scale = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Scale"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Scale, FInputAxisKeyMapping), 0x0000000000000001);
			UProperty* NewProp_Key = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Key"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Key, FInputAxisKeyMapping), 0x0000000000000001, Z_Construct_UScriptStruct_FKey());
			UProperty* NewProp_AxisName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("AxisName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(AxisName, FInputAxisKeyMapping), 0x0000000000000001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/PlayerInput.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Defines a mapping between an axis and key\n\n@see https://docs.unrealengine.com/latest/INT/Gameplay/Input/index.html"));
			MetaData->SetValue(NewProp_Scale, TEXT("Category"), TEXT("Input"));
			MetaData->SetValue(NewProp_Scale, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/PlayerInput.h"));
			MetaData->SetValue(NewProp_Scale, TEXT("ToolTip"), TEXT("Multiplier to use for the mapping when accumulating the axis value"));
			MetaData->SetValue(NewProp_Key, TEXT("Category"), TEXT("Input"));
			MetaData->SetValue(NewProp_Key, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/PlayerInput.h"));
			MetaData->SetValue(NewProp_Key, TEXT("ToolTip"), TEXT("Key to bind it to."));
			MetaData->SetValue(NewProp_AxisName, TEXT("Category"), TEXT("Input"));
			MetaData->SetValue(NewProp_AxisName, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/PlayerInput.h"));
			MetaData->SetValue(NewProp_AxisName, TEXT("ToolTip"), TEXT("Friendly name of axis, e.g \"MoveForward\""));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FInputAxisKeyMapping_CRC() { return 1105251478U; }
	UScriptStruct* Z_Construct_UScriptStruct_FInputActionKeyMapping()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FInputActionKeyMapping_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("InputActionKeyMapping"), sizeof(FInputActionKeyMapping), Get_Z_Construct_UScriptStruct_FInputActionKeyMapping_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("InputActionKeyMapping"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FInputActionKeyMapping>, EStructFlags(0x00000001));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCmd, FInputActionKeyMapping, uint8);
			UProperty* NewProp_bCmd = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bCmd"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCmd, FInputActionKeyMapping), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bCmd, FInputActionKeyMapping), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAlt, FInputActionKeyMapping, uint8);
			UProperty* NewProp_bAlt = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bAlt"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAlt, FInputActionKeyMapping), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bAlt, FInputActionKeyMapping), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCtrl, FInputActionKeyMapping, uint8);
			UProperty* NewProp_bCtrl = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bCtrl"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCtrl, FInputActionKeyMapping), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bCtrl, FInputActionKeyMapping), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bShift, FInputActionKeyMapping, uint8);
			UProperty* NewProp_bShift = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bShift"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bShift, FInputActionKeyMapping), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bShift, FInputActionKeyMapping), sizeof(uint8), false);
			UProperty* NewProp_Key = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Key"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Key, FInputActionKeyMapping), 0x0000000000000001, Z_Construct_UScriptStruct_FKey());
			UProperty* NewProp_ActionName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ActionName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(ActionName, FInputActionKeyMapping), 0x0000000000000001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/PlayerInput.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Defines a mapping between an action and key\n\n@see https://docs.unrealengine.com/latest/INT/Gameplay/Input/index.html"));
			MetaData->SetValue(NewProp_bCmd, TEXT("Category"), TEXT("Input"));
			MetaData->SetValue(NewProp_bCmd, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/PlayerInput.h"));
			MetaData->SetValue(NewProp_bCmd, TEXT("ToolTip"), TEXT("true if one of the Cmd keys must be down when the KeyEvent is received to be acknowledged"));
			MetaData->SetValue(NewProp_bAlt, TEXT("Category"), TEXT("Input"));
			MetaData->SetValue(NewProp_bAlt, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/PlayerInput.h"));
			MetaData->SetValue(NewProp_bAlt, TEXT("ToolTip"), TEXT("true if one of the Alt keys must be down when the KeyEvent is received to be acknowledged"));
			MetaData->SetValue(NewProp_bCtrl, TEXT("Category"), TEXT("Input"));
			MetaData->SetValue(NewProp_bCtrl, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/PlayerInput.h"));
			MetaData->SetValue(NewProp_bCtrl, TEXT("ToolTip"), TEXT("true if one of the Ctrl keys must be down when the KeyEvent is received to be acknowledged"));
			MetaData->SetValue(NewProp_bShift, TEXT("Category"), TEXT("Input"));
			MetaData->SetValue(NewProp_bShift, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/PlayerInput.h"));
			MetaData->SetValue(NewProp_bShift, TEXT("ToolTip"), TEXT("true if one of the Shift keys must be down when the KeyEvent is received to be acknowledged"));
			MetaData->SetValue(NewProp_Key, TEXT("Category"), TEXT("Input"));
			MetaData->SetValue(NewProp_Key, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/PlayerInput.h"));
			MetaData->SetValue(NewProp_Key, TEXT("ToolTip"), TEXT("Key to bind it to."));
			MetaData->SetValue(NewProp_ActionName, TEXT("Category"), TEXT("Input"));
			MetaData->SetValue(NewProp_ActionName, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/PlayerInput.h"));
			MetaData->SetValue(NewProp_ActionName, TEXT("ToolTip"), TEXT("Friendly name of action, e.g \"jump\""));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FInputActionKeyMapping_CRC() { return 2759945009U; }
	UScriptStruct* Z_Construct_UScriptStruct_FInputAxisConfigEntry()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FInputAxisConfigEntry_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("InputAxisConfigEntry"), sizeof(FInputAxisConfigEntry), Get_Z_Construct_UScriptStruct_FInputAxisConfigEntry_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("InputAxisConfigEntry"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FInputAxisConfigEntry>, EStructFlags(0x00000001));
			UProperty* NewProp_AxisProperties = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("AxisProperties"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(AxisProperties, FInputAxisConfigEntry), 0x0000000000000001, Z_Construct_UScriptStruct_FInputAxisProperties());
			UProperty* NewProp_AxisKeyName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("AxisKeyName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(AxisKeyName, FInputAxisConfigEntry), 0x0000000000020001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/PlayerInput.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Configurable properties for control axes."));
			MetaData->SetValue(NewProp_AxisProperties, TEXT("Category"), TEXT("Input"));
			MetaData->SetValue(NewProp_AxisProperties, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/PlayerInput.h"));
			MetaData->SetValue(NewProp_AxisProperties, TEXT("ToolTip"), TEXT("Properties for the Axis Key"));
			MetaData->SetValue(NewProp_AxisKeyName, TEXT("Category"), TEXT("Input"));
			MetaData->SetValue(NewProp_AxisKeyName, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/PlayerInput.h"));
			MetaData->SetValue(NewProp_AxisKeyName, TEXT("ToolTip"), TEXT("Axis Key these properties apply to"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FInputAxisConfigEntry_CRC() { return 1755242797U; }
	UScriptStruct* Z_Construct_UScriptStruct_FInputAxisProperties()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FInputAxisProperties_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("InputAxisProperties"), sizeof(FInputAxisProperties), Get_Z_Construct_UScriptStruct_FInputAxisProperties_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("InputAxisProperties"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FInputAxisProperties>, EStructFlags(0x00000001));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bInvert, FInputAxisProperties, uint8);
			UProperty* NewProp_bInvert = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bInvert"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bInvert, FInputAxisProperties), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bInvert, FInputAxisProperties), sizeof(uint8), false);
			UProperty* NewProp_Exponent = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Exponent"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Exponent, FInputAxisProperties), 0x0000000000000001);
			UProperty* NewProp_Sensitivity = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Sensitivity"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Sensitivity, FInputAxisProperties), 0x0000000000000001);
			UProperty* NewProp_DeadZone = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DeadZone"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DeadZone, FInputAxisProperties), 0x0000000000000001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/PlayerInput.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Configurable properties for control axes, used to transform raw input into game ready values."));
			MetaData->SetValue(NewProp_bInvert, TEXT("Category"), TEXT("Input"));
			MetaData->SetValue(NewProp_bInvert, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/PlayerInput.h"));
			MetaData->SetValue(NewProp_bInvert, TEXT("ToolTip"), TEXT("Inverts reported values for this axis"));
			MetaData->SetValue(NewProp_Exponent, TEXT("Category"), TEXT("Input"));
			MetaData->SetValue(NewProp_Exponent, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/PlayerInput.h"));
			MetaData->SetValue(NewProp_Exponent, TEXT("ToolTip"), TEXT("For applying curves to [0..1] axes, e.g. analog sticks"));
			MetaData->SetValue(NewProp_Sensitivity, TEXT("Category"), TEXT("Input"));
			MetaData->SetValue(NewProp_Sensitivity, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/PlayerInput.h"));
			MetaData->SetValue(NewProp_Sensitivity, TEXT("ToolTip"), TEXT("Scaling factor to multiply raw value by."));
			MetaData->SetValue(NewProp_DeadZone, TEXT("Category"), TEXT("Input"));
			MetaData->SetValue(NewProp_DeadZone, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/PlayerInput.h"));
			MetaData->SetValue(NewProp_DeadZone, TEXT("ToolTip"), TEXT("What the dead zone of the axis is.  For control axes such as analog sticks."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FInputAxisProperties_CRC() { return 4179053971U; }
	UScriptStruct* Z_Construct_UScriptStruct_FKeyBind()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FKeyBind_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("KeyBind"), sizeof(FKeyBind), Get_Z_Construct_UScriptStruct_FKeyBind_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("KeyBind"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FKeyBind>, EStructFlags(0x00000001));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIgnoreCmd, FKeyBind, uint8);
			UProperty* NewProp_bIgnoreCmd = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bIgnoreCmd"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIgnoreCmd, FKeyBind), 0x0000000000004000, CPP_BOOL_PROPERTY_BITMASK(bIgnoreCmd, FKeyBind), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIgnoreAlt, FKeyBind, uint8);
			UProperty* NewProp_bIgnoreAlt = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bIgnoreAlt"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIgnoreAlt, FKeyBind), 0x0000000000004000, CPP_BOOL_PROPERTY_BITMASK(bIgnoreAlt, FKeyBind), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIgnoreShift, FKeyBind, uint8);
			UProperty* NewProp_bIgnoreShift = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bIgnoreShift"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIgnoreShift, FKeyBind), 0x0000000000004000, CPP_BOOL_PROPERTY_BITMASK(bIgnoreShift, FKeyBind), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIgnoreCtrl, FKeyBind, uint8);
			UProperty* NewProp_bIgnoreCtrl = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bIgnoreCtrl"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIgnoreCtrl, FKeyBind), 0x0000000000004000, CPP_BOOL_PROPERTY_BITMASK(bIgnoreCtrl, FKeyBind), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(Cmd, FKeyBind, uint8);
			UProperty* NewProp_Cmd = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Cmd"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Cmd, FKeyBind), 0x0000000000004000, CPP_BOOL_PROPERTY_BITMASK(Cmd, FKeyBind), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(Alt, FKeyBind, uint8);
			UProperty* NewProp_Alt = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Alt"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Alt, FKeyBind), 0x0000000000004000, CPP_BOOL_PROPERTY_BITMASK(Alt, FKeyBind), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(Shift, FKeyBind, uint8);
			UProperty* NewProp_Shift = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Shift"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Shift, FKeyBind), 0x0000000000004000, CPP_BOOL_PROPERTY_BITMASK(Shift, FKeyBind), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(Control, FKeyBind, uint8);
			UProperty* NewProp_Control = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Control"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Control, FKeyBind), 0x0000000000004000, CPP_BOOL_PROPERTY_BITMASK(Control, FKeyBind), sizeof(uint8), false);
			UProperty* NewProp_Command = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Command"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Command, FKeyBind), 0x0000000000004000);
			UProperty* NewProp_Key = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Key"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Key, FKeyBind), 0x0000000000004000, Z_Construct_UScriptStruct_FKey());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/PlayerInput.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Struct containing mappings for legacy method of binding keys to exec commands."));
			MetaData->SetValue(NewProp_bIgnoreCmd, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/PlayerInput.h"));
			MetaData->SetValue(NewProp_bIgnoreCmd, TEXT("ToolTip"), TEXT("Whether the command key must not be held when the key event occurs"));
			MetaData->SetValue(NewProp_bIgnoreAlt, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/PlayerInput.h"));
			MetaData->SetValue(NewProp_bIgnoreAlt, TEXT("ToolTip"), TEXT("Whether the alt key must not be held when the key event occurs"));
			MetaData->SetValue(NewProp_bIgnoreShift, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/PlayerInput.h"));
			MetaData->SetValue(NewProp_bIgnoreShift, TEXT("ToolTip"), TEXT("Whether the shift key must not be held when the key event occurs"));
			MetaData->SetValue(NewProp_bIgnoreCtrl, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/PlayerInput.h"));
			MetaData->SetValue(NewProp_bIgnoreCtrl, TEXT("ToolTip"), TEXT("Whether the control key must not be held when the key event occurs"));
			MetaData->SetValue(NewProp_Cmd, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/PlayerInput.h"));
			MetaData->SetValue(NewProp_Cmd, TEXT("ToolTip"), TEXT("Whether the command key needs to be held when the key event occurs"));
			MetaData->SetValue(NewProp_Alt, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/PlayerInput.h"));
			MetaData->SetValue(NewProp_Alt, TEXT("ToolTip"), TEXT("Whether the alt key needs to be held when the key event occurs"));
			MetaData->SetValue(NewProp_Shift, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/PlayerInput.h"));
			MetaData->SetValue(NewProp_Shift, TEXT("ToolTip"), TEXT("Whether the shift key needs to be held when the key event occurs"));
			MetaData->SetValue(NewProp_Control, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/PlayerInput.h"));
			MetaData->SetValue(NewProp_Control, TEXT("ToolTip"), TEXT("Whether the control key needs to be held when the key event occurs"));
			MetaData->SetValue(NewProp_Command, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/PlayerInput.h"));
			MetaData->SetValue(NewProp_Command, TEXT("ToolTip"), TEXT("The command to execute when the key is pressed/released"));
			MetaData->SetValue(NewProp_Key, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/PlayerInput.h"));
			MetaData->SetValue(NewProp_Key, TEXT("ToolTip"), TEXT("The key to be bound to the command"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FKeyBind_CRC() { return 3204764057U; }
	UFunction* Z_Construct_UFunction_UPlayerInput_ClearSmoothing()
	{
		UObject* Outer=Z_Construct_UClass_UPlayerInput();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ClearSmoothing"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020601, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/PlayerInput.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Exec function to reset mouse smoothing values"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPlayerInput_InvertAxis()
	{
		struct PlayerInput_eventInvertAxis_Parms
		{
			FName AxisName;
		};
		UObject* Outer=Z_Construct_UClass_UPlayerInput();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("InvertAxis"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020601, 65535, sizeof(PlayerInput_eventInvertAxis_Parms));
			UProperty* NewProp_AxisName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AxisName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(AxisName, PlayerInput_eventInvertAxis_Parms), 0x0000000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/PlayerInput.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Exec function to invert an axis mapping"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPlayerInput_InvertAxisKey()
	{
		struct PlayerInput_eventInvertAxisKey_Parms
		{
			FKey AxisKey;
		};
		UObject* Outer=Z_Construct_UClass_UPlayerInput();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("InvertAxisKey"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020601, 65535, sizeof(PlayerInput_eventInvertAxisKey_Parms));
			UProperty* NewProp_AxisKey = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AxisKey"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(AxisKey, PlayerInput_eventInvertAxisKey_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FKey());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/PlayerInput.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Exec function to invert an axis key"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPlayerInput_SetBind()
	{
		struct PlayerInput_eventSetBind_Parms
		{
			FName BindName;
			FString Command;
		};
		UObject* Outer=Z_Construct_UClass_UPlayerInput();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetBind"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020601, 65535, sizeof(PlayerInput_eventSetBind_Parms));
			UProperty* NewProp_Command = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Command"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Command, PlayerInput_eventSetBind_Parms), 0x0000000000000080);
			UProperty* NewProp_BindName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("BindName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(BindName, PlayerInput_eventSetBind_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/PlayerInput.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Exec function to add a debug exec command"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPlayerInput_SetMouseSensitivity()
	{
		struct PlayerInput_eventSetMouseSensitivity_Parms
		{
			float Sensitivity;
		};
		UObject* Outer=Z_Construct_UClass_UPlayerInput();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetMouseSensitivity"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020601, 65535, sizeof(PlayerInput_eventSetMouseSensitivity_Parms));
			UProperty* NewProp_Sensitivity = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Sensitivity"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Sensitivity, PlayerInput_eventSetMouseSensitivity_Parms), 0x0000000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/PlayerInput.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Exec function to change the mouse sensitivity"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UPlayerInput_NoRegister()
	{
		return UPlayerInput::StaticClass();
	}
	UClass* Z_Construct_UClass_UPlayerInput()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UPlayerInput::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x2010008C;

				OuterClass->LinkChild(Z_Construct_UFunction_UPlayerInput_ClearSmoothing());
				OuterClass->LinkChild(Z_Construct_UFunction_UPlayerInput_InvertAxis());
				OuterClass->LinkChild(Z_Construct_UFunction_UPlayerInput_InvertAxisKey());
				OuterClass->LinkChild(Z_Construct_UFunction_UPlayerInput_SetBind());
				OuterClass->LinkChild(Z_Construct_UFunction_UPlayerInput_SetMouseSensitivity());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_InvertedAxis = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InvertedAxis"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(InvertedAxis, UPlayerInput), 0x0000000000004000);
				UProperty* NewProp_InvertedAxis_Inner = new(EC_InternalUseOnlyConstructor, NewProp_InvertedAxis, TEXT("InvertedAxis"), RF_Public|RF_Transient|RF_Native) UNameProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000004000);
				UProperty* NewProp_DebugExecBindings = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DebugExecBindings"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(DebugExecBindings, UPlayerInput), 0x0000000000004000);
				UProperty* NewProp_DebugExecBindings_Inner = new(EC_InternalUseOnlyConstructor, NewProp_DebugExecBindings, TEXT("DebugExecBindings"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000004000, Z_Construct_UScriptStruct_FKeyBind());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UPlayerInput_ClearSmoothing()); // 494101375
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UPlayerInput_InvertAxis()); // 1625291286
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UPlayerInput_InvertAxisKey()); // 461608743
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UPlayerInput_SetBind()); // 1217811826
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UPlayerInput_SetMouseSensitivity()); // 15892981
				OuterClass->ClassConfigName = FName(TEXT("Input"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("GameFramework/PlayerInput.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/PlayerInput.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Object within PlayerController that processes player input.\nOnly exists on the client in network games.\n\n@see https://docs.unrealengine.com/latest/INT/Gameplay/Input/index.html"));
				MetaData->SetValue(NewProp_InvertedAxis, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/PlayerInput.h"));
				MetaData->SetValue(NewProp_InvertedAxis, TEXT("ToolTip"), TEXT("List of Axis Mappings that have been inverted"));
				MetaData->SetValue(NewProp_DebugExecBindings, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/PlayerInput.h"));
				MetaData->SetValue(NewProp_DebugExecBindings, TEXT("ToolTip"), TEXT("Generic bindings of keys to Exec()-compatible strings for development purposes only"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UPlayerInput(Z_Construct_UClass_UPlayerInput, TEXT("UPlayerInput"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UPlayerInput);
	UClass* Z_Construct_UClass_UInputSettings_NoRegister()
	{
		return UInputSettings::StaticClass();
	}
	UClass* Z_Construct_UClass_UInputSettings()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UInputSettings::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100086;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ConsoleKeys = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConsoleKeys"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ConsoleKeys, UInputSettings), 0x0000000000004001);
				UProperty* NewProp_ConsoleKeys_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ConsoleKeys, TEXT("ConsoleKeys"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000004000, Z_Construct_UScriptStruct_FKey());
				UProperty* NewProp_ConsoleKey = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConsoleKey"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ConsoleKey_DEPRECATED, UInputSettings), 0x0000000020004000, Z_Construct_UScriptStruct_FKey());
				UProperty* NewProp_DefaultTouchInterface = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultTouchInterface"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DefaultTouchInterface, UInputSettings), 0x0000000000004001, Z_Construct_UScriptStruct_FStringAssetReference());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bShowConsoleOnFourFingerTap, UInputSettings, bool);
				UProperty* NewProp_bShowConsoleOnFourFingerTap = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bShowConsoleOnFourFingerTap"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bShowConsoleOnFourFingerTap, UInputSettings), 0x0000000000004001, CPP_BOOL_PROPERTY_BITMASK(bShowConsoleOnFourFingerTap, UInputSettings), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAlwaysShowTouchInterface, UInputSettings, bool);
				UProperty* NewProp_bAlwaysShowTouchInterface = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAlwaysShowTouchInterface"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAlwaysShowTouchInterface, UInputSettings), 0x0000000000004001, CPP_BOOL_PROPERTY_BITMASK(bAlwaysShowTouchInterface, UInputSettings), sizeof(bool), true);
				UProperty* NewProp_AxisMappings = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AxisMappings"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(AxisMappings, UInputSettings), 0x0000000000004001);
				UProperty* NewProp_AxisMappings_Inner = new(EC_InternalUseOnlyConstructor, NewProp_AxisMappings, TEXT("AxisMappings"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000004000, Z_Construct_UScriptStruct_FInputAxisKeyMapping());
				UProperty* NewProp_ActionMappings = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ActionMappings"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ActionMappings, UInputSettings), 0x0000000000004001);
				UProperty* NewProp_ActionMappings_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ActionMappings, TEXT("ActionMappings"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000004000, Z_Construct_UScriptStruct_FInputActionKeyMapping());
				UProperty* NewProp_DoubleClickTime = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DoubleClickTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DoubleClickTime, UInputSettings), 0x0000040000004001);
				UProperty* NewProp_FOVScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FOVScale"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(FOVScale, UInputSettings), 0x0000040000004001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnableFOVScaling, UInputSettings, uint8);
				UProperty* NewProp_bEnableFOVScaling = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bEnableFOVScaling"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnableFOVScaling, UInputSettings), 0x0000040000004001, CPP_BOOL_PROPERTY_BITMASK(bEnableFOVScaling, UInputSettings), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnableMouseSmoothing, UInputSettings, uint8);
				UProperty* NewProp_bEnableMouseSmoothing = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bEnableMouseSmoothing"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnableMouseSmoothing, UInputSettings), 0x0000040000004001, CPP_BOOL_PROPERTY_BITMASK(bEnableMouseSmoothing, UInputSettings), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseMouseForTouch, UInputSettings, uint8);
				UProperty* NewProp_bUseMouseForTouch = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUseMouseForTouch"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseMouseForTouch, UInputSettings), 0x0000000000004001, CPP_BOOL_PROPERTY_BITMASK(bUseMouseForTouch, UInputSettings), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAltEnterTogglesFullscreen, UInputSettings, uint8);
				UProperty* NewProp_bAltEnterTogglesFullscreen = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAltEnterTogglesFullscreen"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAltEnterTogglesFullscreen, UInputSettings), 0x0000040000004001, CPP_BOOL_PROPERTY_BITMASK(bAltEnterTogglesFullscreen, UInputSettings), sizeof(uint8), false);
				UProperty* NewProp_AxisConfig = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AxisConfig"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(AxisConfig, UInputSettings), 0x0000040000004041);
				UProperty* NewProp_AxisConfig_Inner = new(EC_InternalUseOnlyConstructor, NewProp_AxisConfig, TEXT("AxisConfig"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000004000, Z_Construct_UScriptStruct_FInputAxisConfigEntry());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("Input"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("GameFramework/InputSettings.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/InputSettings.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Project wide settings for input handling\n\n@see https://docs.unrealengine.com/latest/INT/Gameplay/Input/index.html"));
				MetaData->SetValue(NewProp_ConsoleKeys, TEXT("Category"), TEXT("Console"));
				MetaData->SetValue(NewProp_ConsoleKeys, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/InputSettings.h"));
				MetaData->SetValue(NewProp_ConsoleKeys, TEXT("ToolTip"), TEXT("The keys which open the console."));
				MetaData->SetValue(NewProp_ConsoleKey, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/InputSettings.h"));
				MetaData->SetValue(NewProp_ConsoleKey, TEXT("ToolTip"), TEXT("The key which opens the console."));
				MetaData->SetValue(NewProp_DefaultTouchInterface, TEXT("AllowedClasses"), TEXT("TouchInterface"));
				MetaData->SetValue(NewProp_DefaultTouchInterface, TEXT("Category"), TEXT("Mobile"));
				MetaData->SetValue(NewProp_DefaultTouchInterface, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/InputSettings.h"));
				MetaData->SetValue(NewProp_DefaultTouchInterface, TEXT("ToolTip"), TEXT("The default on-screen touch input interface for the game (can be null to disable the onscreen interface)"));
				MetaData->SetValue(NewProp_bShowConsoleOnFourFingerTap, TEXT("Category"), TEXT("Mobile"));
				MetaData->SetValue(NewProp_bShowConsoleOnFourFingerTap, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/InputSettings.h"));
				MetaData->SetValue(NewProp_bShowConsoleOnFourFingerTap, TEXT("ToolTip"), TEXT("Whether or not to show the console on 4 finger tap, on mobile platforms"));
				MetaData->SetValue(NewProp_bAlwaysShowTouchInterface, TEXT("Category"), TEXT("Mobile"));
				MetaData->SetValue(NewProp_bAlwaysShowTouchInterface, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/InputSettings.h"));
				MetaData->SetValue(NewProp_bAlwaysShowTouchInterface, TEXT("ToolTip"), TEXT("Should the touch input interface be shown always, or only when the platform has a touch screen?"));
				MetaData->SetValue(NewProp_AxisMappings, TEXT("Category"), TEXT("Bindings"));
				MetaData->SetValue(NewProp_AxisMappings, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/InputSettings.h"));
				MetaData->SetValue(NewProp_AxisMappings, TEXT("ToolTip"), TEXT("List of Axis Mappings"));
				MetaData->SetValue(NewProp_ActionMappings, TEXT("Category"), TEXT("Bindings"));
				MetaData->SetValue(NewProp_ActionMappings, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/InputSettings.h"));
				MetaData->SetValue(NewProp_ActionMappings, TEXT("ToolTip"), TEXT("List of Action Mappings"));
				MetaData->SetValue(NewProp_DoubleClickTime, TEXT("Category"), TEXT("MouseProperties"));
				MetaData->SetValue(NewProp_DoubleClickTime, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/InputSettings.h"));
				MetaData->SetValue(NewProp_DoubleClickTime, TEXT("ToolTip"), TEXT("If a key is pressed twice in this amount of time it is considered a \"double click\""));
				MetaData->SetValue(NewProp_FOVScale, TEXT("Category"), TEXT("MouseProperties"));
				MetaData->SetValue(NewProp_FOVScale, TEXT("editcondition"), TEXT("bEnableFOVScaling"));
				MetaData->SetValue(NewProp_FOVScale, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/InputSettings.h"));
				MetaData->SetValue(NewProp_FOVScale, TEXT("ToolTip"), TEXT("The scaling value to multiply the field of view by"));
				MetaData->SetValue(NewProp_bEnableFOVScaling, TEXT("Category"), TEXT("MouseProperties"));
				MetaData->SetValue(NewProp_bEnableFOVScaling, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/InputSettings.h"));
				MetaData->SetValue(NewProp_bEnableFOVScaling, TEXT("ToolTip"), TEXT("Scale the mouse based on the player camera manager's field of view"));
				MetaData->SetValue(NewProp_bEnableMouseSmoothing, TEXT("Category"), TEXT("MouseProperties"));
				MetaData->SetValue(NewProp_bEnableMouseSmoothing, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/InputSettings.h"));
				MetaData->SetValue(NewProp_bEnableMouseSmoothing, TEXT("ToolTip"), TEXT("Mouse smoothing control"));
				MetaData->SetValue(NewProp_bUseMouseForTouch, TEXT("Category"), TEXT("MouseProperties"));
				MetaData->SetValue(NewProp_bUseMouseForTouch, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/InputSettings.h"));
				MetaData->SetValue(NewProp_bUseMouseForTouch, TEXT("ToolTip"), TEXT("Allow mouse to be used for touch"));
				MetaData->SetValue(NewProp_bAltEnterTogglesFullscreen, TEXT("Category"), TEXT("Bindings"));
				MetaData->SetValue(NewProp_bAltEnterTogglesFullscreen, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/InputSettings.h"));
				MetaData->SetValue(NewProp_AxisConfig, TEXT("Category"), TEXT("Bindings"));
				MetaData->SetValue(NewProp_AxisConfig, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/InputSettings.h"));
				MetaData->SetValue(NewProp_AxisConfig, TEXT("ToolTip"), TEXT("List of Axis Properties"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UInputSettings(Z_Construct_UClass_UInputSettings, TEXT("UInputSettings"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UInputSettings);
	UScriptStruct* Z_Construct_UScriptStruct_FCurveEdTab()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FCurveEdTab_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("CurveEdTab"), sizeof(FCurveEdTab), Get_Z_Construct_UScriptStruct_FCurveEdTab_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CurveEdTab"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FCurveEdTab>, EStructFlags(0x00000001));
			UProperty* NewProp_ViewEndOutput = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ViewEndOutput"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ViewEndOutput, FCurveEdTab), 0x0000000000000000);
			UProperty* NewProp_ViewStartOutput = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ViewStartOutput"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ViewStartOutput, FCurveEdTab), 0x0000000000000000);
			UProperty* NewProp_ViewEndInput = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ViewEndInput"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ViewEndInput, FCurveEdTab), 0x0000000000000000);
			UProperty* NewProp_ViewStartInput = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ViewStartInput"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ViewStartInput, FCurveEdTab), 0x0000000000000000);
			UProperty* NewProp_Curves = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Curves"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Curves, FCurveEdTab), 0x0000000000000000);
			UProperty* NewProp_Curves_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Curves, TEXT("Curves"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FCurveEdEntry());
			UProperty* NewProp_TabName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TabName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(TabName, FCurveEdTab), 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/InterpCurveEdSetup.h"));
			MetaData->SetValue(NewProp_ViewEndOutput, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/InterpCurveEdSetup.h"));
			MetaData->SetValue(NewProp_ViewStartOutput, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/InterpCurveEdSetup.h"));
			MetaData->SetValue(NewProp_ViewEndInput, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/InterpCurveEdSetup.h"));
			MetaData->SetValue(NewProp_ViewStartInput, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/InterpCurveEdSetup.h"));
			MetaData->SetValue(NewProp_ViewStartInput, TEXT("ToolTip"), TEXT("Remember the view setting for each tab."));
			MetaData->SetValue(NewProp_Curves, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/InterpCurveEdSetup.h"));
			MetaData->SetValue(NewProp_TabName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/InterpCurveEdSetup.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FCurveEdTab_CRC() { return 2028381491U; }
	UScriptStruct* Z_Construct_UScriptStruct_FCurveEdEntry()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FCurveEdEntry_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("CurveEdEntry"), sizeof(FCurveEdEntry), Get_Z_Construct_UScriptStruct_FCurveEdEntry_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CurveEdEntry"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FCurveEdEntry>, EStructFlags(0x00000001));
			UProperty* NewProp_ClampHigh = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ClampHigh"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ClampHigh, FCurveEdEntry), 0x0000000000000000);
			UProperty* NewProp_ClampLow = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ClampLow"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ClampLow, FCurveEdEntry), 0x0000000000000000);
			UProperty* NewProp_bClamp = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bClamp"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(bClamp, FCurveEdEntry), 0x0000000000000000);
			UProperty* NewProp_bFloatingPointColorCurve = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bFloatingPointColorCurve"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(bFloatingPointColorCurve, FCurveEdEntry), 0x0000000000000000);
			UProperty* NewProp_bColorCurve = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bColorCurve"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(bColorCurve, FCurveEdEntry), 0x0000000000000000);
			UProperty* NewProp_bHideCurve = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bHideCurve"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(bHideCurve, FCurveEdEntry), 0x0000000000000000);
			UProperty* NewProp_CurveName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CurveName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(CurveName, FCurveEdEntry), 0x0000000000000000);
			UProperty* NewProp_CurveColor = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CurveColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(CurveColor, FCurveEdEntry), 0x0000000000000000, Z_Construct_UScriptStruct_FColor());
			UProperty* NewProp_CurveObject = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CurveObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(CurveObject, FCurveEdEntry), 0x0000000000000000, Z_Construct_UClass_UObject_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/InterpCurveEdSetup.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Information about a particule curve being viewed.\nProperty could be an FInterpCurve, a DistributionFloat or a DistributionVector"));
			MetaData->SetValue(NewProp_ClampHigh, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/InterpCurveEdSetup.h"));
			MetaData->SetValue(NewProp_ClampLow, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/InterpCurveEdSetup.h"));
			MetaData->SetValue(NewProp_bClamp, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/InterpCurveEdSetup.h"));
			MetaData->SetValue(NewProp_bFloatingPointColorCurve, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/InterpCurveEdSetup.h"));
			MetaData->SetValue(NewProp_bColorCurve, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/InterpCurveEdSetup.h"));
			MetaData->SetValue(NewProp_bHideCurve, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/InterpCurveEdSetup.h"));
			MetaData->SetValue(NewProp_CurveName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/InterpCurveEdSetup.h"));
			MetaData->SetValue(NewProp_CurveColor, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/InterpCurveEdSetup.h"));
			MetaData->SetValue(NewProp_CurveObject, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/InterpCurveEdSetup.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FCurveEdEntry_CRC() { return 3101474433U; }
	UClass* Z_Construct_UClass_UInterpCurveEdSetup_NoRegister()
	{
		return UInterpCurveEdSetup::StaticClass();
	}
	UClass* Z_Construct_UClass_UInterpCurveEdSetup()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UInterpCurveEdSetup::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ActiveTab = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ActiveTab"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ActiveTab, UInterpCurveEdSetup), 0x0000000000000000);
				UProperty* NewProp_Tabs = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Tabs"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Tabs, UInterpCurveEdSetup), 0x0000000000000000);
				UProperty* NewProp_Tabs_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Tabs, TEXT("Tabs"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FCurveEdTab());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/InterpCurveEdSetup.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/InterpCurveEdSetup.h"));
				MetaData->SetValue(NewProp_ActiveTab, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/InterpCurveEdSetup.h"));
				MetaData->SetValue(NewProp_Tabs, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/InterpCurveEdSetup.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UInterpCurveEdSetup(Z_Construct_UClass_UInterpCurveEdSetup, TEXT("UInterpCurveEdSetup"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UInterpCurveEdSetup);
	UClass* Z_Construct_UClass_UInterpData_NoRegister()
	{
		return UInterpData::StaticClass();
	}
	UClass* Z_Construct_UClass_UInterpData()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UInterpData::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_AllEventNames = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AllEventNames"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(AllEventNames, UInterpData), 0x0000000000000000);
				UProperty* NewProp_AllEventNames_Inner = new(EC_InternalUseOnlyConstructor, NewProp_AllEventNames, TEXT("AllEventNames"), RF_Public|RF_Transient|RF_Native) UNameProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
				UProperty* NewProp_CachedDirectorGroup = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CachedDirectorGroup"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(CachedDirectorGroup, UInterpData), 0x0000000000002000, Z_Construct_UClass_UInterpGroupDirector_NoRegister());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bShouldBakeAndPrune, UInterpData, uint8);
				UProperty* NewProp_bShouldBakeAndPrune = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bShouldBakeAndPrune"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bShouldBakeAndPrune, UInterpData), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bShouldBakeAndPrune, UInterpData), sizeof(uint8), false);
				UProperty* NewProp_EdSectionEnd = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EdSectionEnd"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(EdSectionEnd, UInterpData), 0x0000000000000000);
				UProperty* NewProp_EdSectionStart = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EdSectionStart"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(EdSectionStart, UInterpData), 0x0000000000000000);
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_DefaultFilters = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultFilters"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(DefaultFilters, UInterpData), 0x0000000800002000);
				UProperty* NewProp_DefaultFilters_Inner = new(EC_InternalUseOnlyConstructor, NewProp_DefaultFilters, TEXT("DefaultFilters"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000800000000, Z_Construct_UClass_UInterpFilter_NoRegister());
				UProperty* NewProp_SelectedFilter = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SelectedFilter"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(SelectedFilter, UInterpData), 0x0000000800000000, Z_Construct_UClass_UInterpFilter_NoRegister());
				UProperty* NewProp_InterpFilters = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InterpFilters"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(InterpFilters, UInterpData), 0x0000000800000000);
				UProperty* NewProp_InterpFilters_Inner = new(EC_InternalUseOnlyConstructor, NewProp_InterpFilters, TEXT("InterpFilters"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000800000000, Z_Construct_UClass_UInterpFilter_NoRegister());
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_CurveEdSetup = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CurveEdSetup"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(CurveEdSetup, UInterpData), 0x0000000000000008, Z_Construct_UClass_UInterpCurveEdSetup_NoRegister());
				UProperty* NewProp_InterpGroups = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InterpGroups"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(InterpGroups, UInterpData), 0x0000000000000008);
				UProperty* NewProp_InterpGroups_Inner = new(EC_InternalUseOnlyConstructor, NewProp_InterpGroups, TEXT("InterpGroups"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000008, Z_Construct_UClass_UInterpGroup_NoRegister());
				UProperty* NewProp_PathBuildTime = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PathBuildTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(PathBuildTime, UInterpData), 0x0000000000000000);
				UProperty* NewProp_InterpLength = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InterpLength"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InterpLength, UInterpData), 0x0000000000000000);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Matinee/InterpData.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpData.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Interpolation data, containing keyframe tracks, event tracks etc.\nThis does not contain any  AActor  references or state, so can safely be stored in\npackages, shared between multiple MatineeActors etc."));
				MetaData->SetValue(NewProp_AllEventNames, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpData.h"));
				MetaData->SetValue(NewProp_AllEventNames, TEXT("ToolTip"), TEXT("Unique names of all events contained across all event tracks"));
				MetaData->SetValue(NewProp_CachedDirectorGroup, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpData.h"));
				MetaData->SetValue(NewProp_CachedDirectorGroup, TEXT("ToolTip"), TEXT("Cached version of the director group, if any, for easy access while in game"));
				MetaData->SetValue(NewProp_bShouldBakeAndPrune, TEXT("Category"), TEXT("InterpData"));
				MetaData->SetValue(NewProp_bShouldBakeAndPrune, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpData.h"));
				MetaData->SetValue(NewProp_bShouldBakeAndPrune, TEXT("ToolTip"), TEXT("If true, then the matinee should be baked and pruned at cook time."));
				MetaData->SetValue(NewProp_EdSectionEnd, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpData.h"));
				MetaData->SetValue(NewProp_EdSectionEnd, TEXT("ToolTip"), TEXT("Used in editor for defining sections to loop, stretch etc."));
				MetaData->SetValue(NewProp_EdSectionStart, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpData.h"));
				MetaData->SetValue(NewProp_EdSectionStart, TEXT("ToolTip"), TEXT("Used in editor for defining sections to loop, stretch etc."));
				MetaData->SetValue(NewProp_DefaultFilters, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpData.h"));
				MetaData->SetValue(NewProp_DefaultFilters, TEXT("ToolTip"), TEXT("Array of default filters."));
				MetaData->SetValue(NewProp_SelectedFilter, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpData.h"));
				MetaData->SetValue(NewProp_SelectedFilter, TEXT("ToolTip"), TEXT("The currently selected filter."));
				MetaData->SetValue(NewProp_InterpFilters, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpData.h"));
				MetaData->SetValue(NewProp_InterpFilters, TEXT("ToolTip"), TEXT("Used for filtering which tracks are currently visible."));
				MetaData->SetValue(NewProp_CurveEdSetup, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpData.h"));
				MetaData->SetValue(NewProp_CurveEdSetup, TEXT("ToolTip"), TEXT("Used for curve editor to remember curve-editing setup. Only loaded in editor."));
				MetaData->SetValue(NewProp_InterpGroups, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpData.h"));
				MetaData->SetValue(NewProp_InterpGroups, TEXT("ToolTip"), TEXT("Actual interpolation data. Groups of InterpTracks."));
				MetaData->SetValue(NewProp_PathBuildTime, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpData.h"));
				MetaData->SetValue(NewProp_PathBuildTime, TEXT("ToolTip"), TEXT("Position in Interp to move things to for path-building in editor."));
				MetaData->SetValue(NewProp_InterpLength, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpData.h"));
				MetaData->SetValue(NewProp_InterpLength, TEXT("ToolTip"), TEXT("Duration of interpolation sequence - in seconds."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UInterpData(Z_Construct_UClass_UInterpData, TEXT("UInterpData"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UInterpData);
	UClass* Z_Construct_UClass_UInterpFilter_NoRegister()
	{
		return UInterpFilter::StaticClass();
	}
	UClass* Z_Construct_UClass_UInterpFilter()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UInterpFilter::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Caption = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Caption"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Caption, UInterpFilter), 0x0000000000000000);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Matinee/InterpFilter.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpFilter.h"));
				MetaData->SetValue(NewProp_Caption, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpFilter.h"));
				MetaData->SetValue(NewProp_Caption, TEXT("ToolTip"), TEXT("Caption for this filter."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UInterpFilter(Z_Construct_UClass_UInterpFilter, TEXT("UInterpFilter"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UInterpFilter);
	UClass* Z_Construct_UClass_UInterpFilter_Classes_NoRegister()
	{
		return UInterpFilter_Classes::StaticClass();
	}
	UClass* Z_Construct_UClass_UInterpFilter_Classes()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UInterpFilter();
			Z_Construct_UPackage_Engine();
			OuterClass = UInterpFilter_Classes::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_TrackClasses = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TrackClasses"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(TrackClasses, UInterpFilter_Classes), 0x0004000800000000);
				UProperty* NewProp_TrackClasses_Inner = new(EC_InternalUseOnlyConstructor, NewProp_TrackClasses, TEXT("TrackClasses"), RF_Public|RF_Transient|RF_Native) UClassProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0004000800000000, Z_Construct_UClass_UObject_NoRegister());
				UProperty* NewProp_ClassToFilterBy = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ClassToFilterBy"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(ClassToFilterBy, UInterpFilter_Classes), 0x0004000800000000, Z_Construct_UClass_UObject_NoRegister());
#endif // WITH_EDITORONLY_DATA
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Matinee/InterpFilter_Classes.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpFilter_Classes.h"));
				MetaData->SetValue(NewProp_TrackClasses, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpFilter_Classes.h"));
				MetaData->SetValue(NewProp_TrackClasses, TEXT("ToolTip"), TEXT("List of allowed track classes.  If empty, then all track classes will be included.  Only groups that\n              contain at least one of these types of tracks will be displayed."));
				MetaData->SetValue(NewProp_ClassToFilterBy, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpFilter_Classes.h"));
				MetaData->SetValue(NewProp_ClassToFilterBy, TEXT("ToolTip"), TEXT("Which class to filter groups by."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UInterpFilter_Classes(Z_Construct_UClass_UInterpFilter_Classes, TEXT("UInterpFilter_Classes"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UInterpFilter_Classes);
	UClass* Z_Construct_UClass_UInterpFilter_Custom_NoRegister()
	{
		return UInterpFilter_Custom::StaticClass();
	}
	UClass* Z_Construct_UClass_UInterpFilter_Custom()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UInterpFilter();
			Z_Construct_UPackage_Engine();
			OuterClass = UInterpFilter_Custom::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_GroupsToInclude = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GroupsToInclude"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(GroupsToInclude, UInterpFilter_Custom), 0x0000000800000000);
				UProperty* NewProp_GroupsToInclude_Inner = new(EC_InternalUseOnlyConstructor, NewProp_GroupsToInclude, TEXT("GroupsToInclude"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000800000000, Z_Construct_UClass_UInterpGroup_NoRegister());
#endif // WITH_EDITORONLY_DATA
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Matinee/InterpFilter_Custom.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpFilter_Custom.h"));
				MetaData->SetValue(NewProp_GroupsToInclude, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpFilter_Custom.h"));
				MetaData->SetValue(NewProp_GroupsToInclude, TEXT("ToolTip"), TEXT("Which groups are included in this filter."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UInterpFilter_Custom(Z_Construct_UClass_UInterpFilter_Custom, TEXT("UInterpFilter_Custom"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UInterpFilter_Custom);
	UScriptStruct* Z_Construct_UScriptStruct_FInterpEdSelKey()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FInterpEdSelKey_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("InterpEdSelKey"), sizeof(FInterpEdSelKey), Get_Z_Construct_UScriptStruct_FInterpEdSelKey_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("InterpEdSelKey"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FInterpEdSelKey>, EStructFlags(0x00000001));
			UProperty* NewProp_UnsnappedPosition = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UnsnappedPosition"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(UnsnappedPosition, FInterpEdSelKey), 0x0000000000000000);
			UProperty* NewProp_KeyIndex = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("KeyIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(KeyIndex, FInterpEdSelKey), 0x0000000000000000);
			UProperty* NewProp_Track = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Track"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Track, FInterpEdSelKey), 0x0000000000000000, Z_Construct_UClass_UInterpTrack_NoRegister());
			UProperty* NewProp_Group = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Group"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Group, FInterpEdSelKey), 0x0000000000000000, Z_Construct_UClass_UInterpGroup_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpGroup.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("A group, associated with a particular  AActor  or set of Actors, which contains a set of InterpTracks for interpolating\nproperties of the  AActor  over time.\nThe Outer of an UInterpGroup is an InterpData."));
			MetaData->SetValue(NewProp_UnsnappedPosition, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpGroup.h"));
			MetaData->SetValue(NewProp_KeyIndex, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpGroup.h"));
			MetaData->SetValue(NewProp_Track, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpGroup.h"));
			MetaData->SetValue(NewProp_Group, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpGroup.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FInterpEdSelKey_CRC() { return 2653976690U; }
	UClass* Z_Construct_UClass_UInterpGroup_NoRegister()
	{
		return UInterpGroup::StaticClass();
	}
	UClass* Z_Construct_UClass_UInterpGroup()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UInterpGroup::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsSelected, UInterpGroup, uint8);
				UProperty* NewProp_bIsSelected = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsSelected"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsSelected, UInterpGroup), 0x0000000000002000, CPP_BOOL_PROPERTY_BITMASK(bIsSelected, UInterpGroup), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsParented, UInterpGroup, uint8);
				UProperty* NewProp_bIsParented = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsParented"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsParented, UInterpGroup), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bIsParented, UInterpGroup), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsFolder, UInterpGroup, uint8);
				UProperty* NewProp_bIsFolder = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsFolder"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsFolder, UInterpGroup), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bIsFolder, UInterpGroup), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bVisible, UInterpGroup, uint8);
				UProperty* NewProp_bVisible = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bVisible"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bVisible, UInterpGroup), 0x0000000000002000, CPP_BOOL_PROPERTY_BITMASK(bVisible, UInterpGroup), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCollapsed, UInterpGroup, uint8);
				UProperty* NewProp_bCollapsed = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bCollapsed"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCollapsed, UInterpGroup), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bCollapsed, UInterpGroup), sizeof(uint8), false);
				UProperty* NewProp_GroupColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GroupColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(GroupColor, UInterpGroup), 0x0000000000000001, Z_Construct_UScriptStruct_FColor());
				UProperty* NewProp_GroupName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GroupName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(GroupName, UInterpGroup), 0x0000000000000000);
				UProperty* NewProp_InterpTracks = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InterpTracks"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(InterpTracks, UInterpGroup), 0x0000000000000008);
				UProperty* NewProp_InterpTracks_Inner = new(EC_InternalUseOnlyConstructor, NewProp_InterpTracks, TEXT("InterpTracks"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000008, Z_Construct_UClass_UInterpTrack_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Matinee/InterpGroup.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpGroup.h"));
				MetaData->SetValue(NewProp_bIsSelected, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpGroup.h"));
				MetaData->SetValue(NewProp_bIsSelected, TEXT("ToolTip"), TEXT("When enabled, this group will be selected in the interp editor."));
				MetaData->SetValue(NewProp_bIsParented, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpGroup.h"));
				MetaData->SetValue(NewProp_bIsParented, TEXT("ToolTip"), TEXT("When true, this group is considered a 'visual child' of another group.  This doesn't at all affect the behavior of the group, it's only for visual organization.  Also, it's implied that the parent is the next prior group in the array that doesn't have a parent."));
				MetaData->SetValue(NewProp_bIsFolder, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpGroup.h"));
				MetaData->SetValue(NewProp_bIsFolder, TEXT("ToolTip"), TEXT("When enabled, this group is treated like a folder in the editor, which should only be used for organization.  Folders are never associated with actors and don't have a presence in the Kismet graph."));
				MetaData->SetValue(NewProp_bVisible, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpGroup.h"));
				MetaData->SetValue(NewProp_bVisible, TEXT("ToolTip"), TEXT("Whether or not this group is visible in the editor."));
				MetaData->SetValue(NewProp_bCollapsed, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpGroup.h"));
				MetaData->SetValue(NewProp_bCollapsed, TEXT("ToolTip"), TEXT("Whether or not this group is folded away in the editor."));
				MetaData->SetValue(NewProp_GroupColor, TEXT("Category"), TEXT("InterpGroup"));
				MetaData->SetValue(NewProp_GroupColor, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpGroup.h"));
				MetaData->SetValue(NewProp_GroupColor, TEXT("ToolTip"), TEXT("Colour used for drawing tracks etc. related to this group."));
				MetaData->SetValue(NewProp_GroupName, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpGroup.h"));
				MetaData->SetValue(NewProp_GroupName, TEXT("ToolTip"), TEXT("Within an InterpData, all GroupNames must be unique.\nUsed for naming Variable connectors on the Action in Kismet and finding each groups object."));
				MetaData->SetValue(NewProp_InterpTracks, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpGroup.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UInterpGroup(Z_Construct_UClass_UInterpGroup, TEXT("UInterpGroup"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UInterpGroup);
	UScriptStruct* Z_Construct_UScriptStruct_FCameraPreviewInfo()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FCameraPreviewInfo_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("CameraPreviewInfo"), sizeof(FCameraPreviewInfo), Get_Z_Construct_UScriptStruct_FCameraPreviewInfo_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CameraPreviewInfo"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FCameraPreviewInfo>, EStructFlags(0x00000001));
			UProperty* NewProp_PawnInst = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PawnInst"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(PawnInst, FCameraPreviewInfo), 0x0000000000002000, Z_Construct_UClass_APawn_NoRegister());
			UProperty* NewProp_Rotation = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Rotation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Rotation, FCameraPreviewInfo), 0x0000000000020001, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_Location = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Location"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Location, FCameraPreviewInfo), 0x0000000000020001, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_AnimSeq = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("AnimSeq"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(AnimSeq, FCameraPreviewInfo), 0x0000000000000001, Z_Construct_UClass_UAnimSequence_NoRegister());
			UProperty* NewProp_PawnClass = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PawnClass"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(PawnClass, FCameraPreviewInfo), 0x0004000000000001, Z_Construct_UClass_APawn_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpGroupCamera.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Preview APawn class for this track"));
			MetaData->SetValue(NewProp_PawnInst, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpGroupCamera.h"));
			MetaData->SetValue(NewProp_PawnInst, TEXT("ToolTip"), TEXT("APawn Inst - CameraAnimInst doesn't really exist in editor *"));
			MetaData->SetValue(NewProp_Rotation, TEXT("Category"), TEXT("CameraPreviewInfo"));
			MetaData->SetValue(NewProp_Rotation, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpGroupCamera.h"));
			MetaData->SetValue(NewProp_Location, TEXT("Category"), TEXT("CameraPreviewInfo"));
			MetaData->SetValue(NewProp_Location, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpGroupCamera.h"));
			MetaData->SetValue(NewProp_Location, TEXT("ToolTip"), TEXT("for now this is read-only. It has maintenance issue to be resolved if I enable this."));
			MetaData->SetValue(NewProp_AnimSeq, TEXT("Category"), TEXT("CameraPreviewInfo"));
			MetaData->SetValue(NewProp_AnimSeq, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpGroupCamera.h"));
			MetaData->SetValue(NewProp_PawnClass, TEXT("Category"), TEXT("CameraPreviewInfo"));
			MetaData->SetValue(NewProp_PawnClass, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpGroupCamera.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FCameraPreviewInfo_CRC() { return 2179685651U; }
	UClass* Z_Construct_UClass_UInterpGroupCamera_NoRegister()
	{
		return UInterpGroupCamera::StaticClass();
	}
	UClass* Z_Construct_UClass_UInterpGroupCamera()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UInterpGroup();
			Z_Construct_UPackage_Engine();
			OuterClass = UInterpGroupCamera::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_CompressTolerance = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CompressTolerance"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(CompressTolerance, UInterpGroupCamera), 0x0000000000000001);
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_Target = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Target"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Target, UInterpGroupCamera), 0x0000000800000001, Z_Construct_UScriptStruct_FCameraPreviewInfo());
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_CameraAnimInst = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CameraAnimInst"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(CameraAnimInst, UInterpGroupCamera), 0x0000000000002000, Z_Construct_UClass_UCameraAnim_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Matinee/InterpGroupCamera.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpGroupCamera.h"));
				MetaData->SetValue(NewProp_CompressTolerance, TEXT("Category"), TEXT("InterpGroupCamera"));
				MetaData->SetValue(NewProp_CompressTolerance, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpGroupCamera.h"));
				MetaData->SetValue(NewProp_CompressTolerance, TEXT("ToolTip"), TEXT("When compress, tolerance option *"));
				MetaData->SetValue(NewProp_Target, TEXT("Category"), TEXT("InterpGroupCamera"));
				MetaData->SetValue(NewProp_Target, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpGroupCamera.h"));
				MetaData->SetValue(NewProp_Target, TEXT("ToolTip"), TEXT("this is interaction property info for CameraAnim\nthis information isn't really saved with it"));
				MetaData->SetValue(NewProp_CameraAnimInst, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpGroupCamera.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UInterpGroupCamera(Z_Construct_UClass_UInterpGroupCamera, TEXT("UInterpGroupCamera"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UInterpGroupCamera);
	UClass* Z_Construct_UClass_UInterpGroupDirector_NoRegister()
	{
		return UInterpGroupDirector::StaticClass();
	}
	UClass* Z_Construct_UClass_UInterpGroupDirector()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UInterpGroup();
			Z_Construct_UPackage_Engine();
			OuterClass = UInterpGroupDirector::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Matinee/InterpGroupDirector.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpGroupDirector.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UInterpGroupDirector(Z_Construct_UClass_UInterpGroupDirector, TEXT("UInterpGroupDirector"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UInterpGroupDirector);
	UClass* Z_Construct_UClass_UInterpGroupInst_NoRegister()
	{
		return UInterpGroupInst::StaticClass();
	}
	UClass* Z_Construct_UClass_UInterpGroupInst()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UInterpGroupInst::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_TrackInst = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TrackInst"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(TrackInst, UInterpGroupInst), 0x0000000000000000);
				UProperty* NewProp_TrackInst_Inner = new(EC_InternalUseOnlyConstructor, NewProp_TrackInst, TEXT("TrackInst"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UInterpTrackInst_NoRegister());
				UProperty* NewProp_GroupActor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GroupActor"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(GroupActor, UInterpGroupInst), 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
				UProperty* NewProp_Group = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Group"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Group, UInterpGroupInst), 0x0000000000000000, Z_Construct_UClass_UInterpGroup_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Matinee/InterpGroupInst.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpGroupInst.h"));
				MetaData->SetValue(NewProp_TrackInst, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpGroupInst.h"));
				MetaData->SetValue(NewProp_TrackInst, TEXT("ToolTip"), TEXT("Array if InterpTrack instances. TrackInst.Num() == UInterpGroup.InterpTrack.Num() must be true."));
				MetaData->SetValue(NewProp_GroupActor, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpGroupInst.h"));
				MetaData->SetValue(NewProp_GroupActor, TEXT("ToolTip"), TEXT("Actor that this Group instance is acting upon.\nNB: that this may be set to NULL at any time as a result of the  AActor  being destroyed."));
				MetaData->SetValue(NewProp_Group, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpGroupInst.h"));
				MetaData->SetValue(NewProp_Group, TEXT("ToolTip"), TEXT("UInterpGroup within the InterpData that this is an instance of."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UInterpGroupInst(Z_Construct_UClass_UInterpGroupInst, TEXT("UInterpGroupInst"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UInterpGroupInst);
	UClass* Z_Construct_UClass_UInterpGroupInstCamera_NoRegister()
	{
		return UInterpGroupInstCamera::StaticClass();
	}
	UClass* Z_Construct_UClass_UInterpGroupInstCamera()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UInterpGroupInst();
			Z_Construct_UPackage_Engine();
			OuterClass = UInterpGroupInstCamera::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Matinee/InterpGroupInstCamera.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpGroupInstCamera.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UInterpGroupInstCamera(Z_Construct_UClass_UInterpGroupInstCamera, TEXT("UInterpGroupInstCamera"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UInterpGroupInstCamera);
	UClass* Z_Construct_UClass_UInterpGroupInstDirector_NoRegister()
	{
		return UInterpGroupInstDirector::StaticClass();
	}
	UClass* Z_Construct_UClass_UInterpGroupInstDirector()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UInterpGroupInst();
			Z_Construct_UPackage_Engine();
			OuterClass = UInterpGroupInstDirector::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Matinee/InterpGroupInstDirector.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpGroupInstDirector.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UInterpGroupInstDirector(Z_Construct_UClass_UInterpGroupInstDirector, TEXT("UInterpGroupInstDirector"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UInterpGroupInstDirector);
	UEnum* Z_Construct_UEnum_Engine_ETrackActiveCondition()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_ETrackActiveCondition_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ETrackActiveCondition"), 0, Get_Z_Construct_UEnum_Engine_ETrackActiveCondition_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ETrackActiveCondition"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ETAC_Always")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ETAC_GoreEnabled")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ETAC_GoreDisabled")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ETAC_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ETAC_Always.ToolTip"), TEXT("Track is always active"));
			MetaData->SetValue(ReturnEnum, TEXT("ETAC_GoreDisabled.ToolTip"), TEXT("Track is active when extreme content (gore) is disabled"));
			MetaData->SetValue(ReturnEnum, TEXT("ETAC_GoreEnabled.ToolTip"), TEXT("Track is active when extreme content (gore) is enabled"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrack.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Required condition for this track to be enabled"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_ETrackActiveCondition_CRC() { return 701021893U; }
	UScriptStruct* Z_Construct_UScriptStruct_FSubTrackGroup()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FSubTrackGroup_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("SubTrackGroup"), sizeof(FSubTrackGroup), Get_Z_Construct_UScriptStruct_FSubTrackGroup_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SubTrackGroup"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FSubTrackGroup>, EStructFlags(0x00000001));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsSelected, FSubTrackGroup, uint8);
			UProperty* NewProp_bIsSelected = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bIsSelected"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsSelected, FSubTrackGroup), 0x0000000000002000, CPP_BOOL_PROPERTY_BITMASK(bIsSelected, FSubTrackGroup), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsCollapsed, FSubTrackGroup, uint8);
			UProperty* NewProp_bIsCollapsed = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bIsCollapsed"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsCollapsed, FSubTrackGroup), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bIsCollapsed, FSubTrackGroup), sizeof(uint8), false);
			UProperty* NewProp_TrackIndices = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TrackIndices"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(TrackIndices, FSubTrackGroup), 0x0000000000000000);
			UProperty* NewProp_TrackIndices_Inner = new(EC_InternalUseOnlyConstructor, NewProp_TrackIndices, TEXT("TrackIndices"), RF_Public|RF_Transient|RF_Native) UIntProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_GroupName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("GroupName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(GroupName, FSubTrackGroup), 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrack.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("A small structure holding data for grouping subtracks. (For UI drawing purposes)"));
			MetaData->SetValue(NewProp_bIsSelected, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrack.h"));
			MetaData->SetValue(NewProp_bIsSelected, TEXT("ToolTip"), TEXT("If this group is selected"));
			MetaData->SetValue(NewProp_bIsCollapsed, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrack.h"));
			MetaData->SetValue(NewProp_bIsCollapsed, TEXT("ToolTip"), TEXT("If this group is collapsed"));
			MetaData->SetValue(NewProp_TrackIndices, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrack.h"));
			MetaData->SetValue(NewProp_TrackIndices, TEXT("ToolTip"), TEXT("Indices to tracks in the parent track subtrack array."));
			MetaData->SetValue(NewProp_GroupName, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrack.h"));
			MetaData->SetValue(NewProp_GroupName, TEXT("ToolTip"), TEXT("Name of the subtrack  group"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FSubTrackGroup_CRC() { return 3624552888U; }
	UScriptStruct* Z_Construct_UScriptStruct_FSupportedSubTrackInfo()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FSupportedSubTrackInfo_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("SupportedSubTrackInfo"), sizeof(FSupportedSubTrackInfo), Get_Z_Construct_UScriptStruct_FSupportedSubTrackInfo_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SupportedSubTrackInfo"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FSupportedSubTrackInfo>, EStructFlags(0x00000001));
			UProperty* NewProp_GroupIndex = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("GroupIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(GroupIndex, FSupportedSubTrackInfo), 0x0000000000000000);
			UProperty* NewProp_SubTrackName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SubTrackName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(SubTrackName, FSupportedSubTrackInfo), 0x0000000000000000);
			UProperty* NewProp_SupportedClass = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SupportedClass"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(SupportedClass, FSupportedSubTrackInfo), 0x0004000000000000, Z_Construct_UClass_UInterpTrack_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrack.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Helper struct for creating sub tracks supported by this track"));
			MetaData->SetValue(NewProp_GroupIndex, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrack.h"));
			MetaData->SetValue(NewProp_GroupIndex, TEXT("ToolTip"), TEXT("Index into the any subtrack group this subtrack belongs to (can be -1 for no group)"));
			MetaData->SetValue(NewProp_SubTrackName, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrack.h"));
			MetaData->SetValue(NewProp_SubTrackName, TEXT("ToolTip"), TEXT("The name of the subtrack"));
			MetaData->SetValue(NewProp_SupportedClass, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrack.h"));
			MetaData->SetValue(NewProp_SupportedClass, TEXT("ToolTip"), TEXT("The sub track class which is supported by this track"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FSupportedSubTrackInfo_CRC() { return 3950957257U; }
	UClass* Z_Construct_UClass_UInterpTrack_NoRegister()
	{
		return UInterpTrack::StaticClass();
	}
	UClass* Z_Construct_UClass_UInterpTrack()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UInterpTrack::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082081;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
#if WITH_EDITORONLY_DATA
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsCollapsed, UInterpTrack, uint8);
				UProperty* NewProp_bIsCollapsed = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsCollapsed"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsCollapsed, UInterpTrack), 0x0000000800000000, CPP_BOOL_PROPERTY_BITMASK(bIsCollapsed, UInterpTrack), sizeof(uint8), false);
#endif // WITH_EDITORONLY_DATA
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsRecording, UInterpTrack, uint8);
				UProperty* NewProp_bIsRecording = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsRecording"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsRecording, UInterpTrack), 0x0000000000002000, CPP_BOOL_PROPERTY_BITMASK(bIsRecording, UInterpTrack), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bVisible, UInterpTrack, uint8);
				UProperty* NewProp_bVisible = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bVisible"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bVisible, UInterpTrack), 0x0000000000002000, CPP_BOOL_PROPERTY_BITMASK(bVisible, UInterpTrack), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSubTrackOnly, UInterpTrack, uint8);
				UProperty* NewProp_bSubTrackOnly = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bSubTrackOnly"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSubTrackOnly, UInterpTrack), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bSubTrackOnly, UInterpTrack), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsAnimControlTrack, UInterpTrack, uint8);
				UProperty* NewProp_bIsAnimControlTrack = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsAnimControlTrack"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsAnimControlTrack, UInterpTrack), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bIsAnimControlTrack, UInterpTrack), sizeof(uint8), false);
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_TrackIcon = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TrackIcon"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(TrackIcon, UInterpTrack), 0x0000000800002000, Z_Construct_UClass_UTexture2D_NoRegister());
#endif // WITH_EDITORONLY_DATA
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsSelected, UInterpTrack, uint8);
				UProperty* NewProp_bIsSelected = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsSelected"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsSelected, UInterpTrack), 0x0000000000002000, CPP_BOOL_PROPERTY_BITMASK(bIsSelected, UInterpTrack), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDisableTrack, UInterpTrack, uint8);
				UProperty* NewProp_bDisableTrack = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bDisableTrack"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDisableTrack, UInterpTrack), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bDisableTrack, UInterpTrack), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDirGroupOnly, UInterpTrack, uint8);
				UProperty* NewProp_bDirGroupOnly = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bDirGroupOnly"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDirGroupOnly, UInterpTrack), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bDirGroupOnly, UInterpTrack), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOnePerGroup, UInterpTrack, uint8);
				UProperty* NewProp_bOnePerGroup = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bOnePerGroup"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOnePerGroup, UInterpTrack), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bOnePerGroup, UInterpTrack), sizeof(uint8), false);
				UProperty* NewProp_TrackTitle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TrackTitle"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(TrackTitle, UInterpTrack), 0x0000000000000000);
				UProperty* NewProp_ActiveCondition = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ActiveCondition"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(ActiveCondition, UInterpTrack), 0x0000000000000001, Z_Construct_UEnum_Engine_ETrackActiveCondition());
				UProperty* NewProp_TrackInstClass = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TrackInstClass"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(TrackInstClass, UInterpTrack), 0x0004000000000000, Z_Construct_UClass_UInterpTrackInst_NoRegister());
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_SupportedSubTracks = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SupportedSubTracks"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(SupportedSubTracks, UInterpTrack), 0x0000000800002000);
				UProperty* NewProp_SupportedSubTracks_Inner = new(EC_InternalUseOnlyConstructor, NewProp_SupportedSubTracks, TEXT("SupportedSubTracks"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000800000000, Z_Construct_UScriptStruct_FSupportedSubTrackInfo());
				UProperty* NewProp_SubTrackGroups = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SubTrackGroups"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(SubTrackGroups, UInterpTrack), 0x0000000800000000);
				UProperty* NewProp_SubTrackGroups_Inner = new(EC_InternalUseOnlyConstructor, NewProp_SubTrackGroups, TEXT("SubTrackGroups"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000800000000, Z_Construct_UScriptStruct_FSubTrackGroup());
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_SubTracks = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SubTracks"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(SubTracks, UInterpTrack), 0x0000000000000000);
				UProperty* NewProp_SubTracks_Inner = new(EC_InternalUseOnlyConstructor, NewProp_SubTracks, TEXT("SubTracks"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UInterpTrack_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Matinee/InterpTrack.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrack.h"));
				MetaData->SetValue(NewProp_bIsCollapsed, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrack.h"));
				MetaData->SetValue(NewProp_bIsCollapsed, TEXT("ToolTip"), TEXT("If this track is collapsed. (Only applies  to tracks with subtracks)."));
				MetaData->SetValue(NewProp_bIsRecording, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrack.h"));
				MetaData->SetValue(NewProp_bIsRecording, TEXT("ToolTip"), TEXT("Whether or not this track is recording in the editor."));
				MetaData->SetValue(NewProp_bVisible, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrack.h"));
				MetaData->SetValue(NewProp_bVisible, TEXT("ToolTip"), TEXT("Whether or not this track is visible in the editor."));
				MetaData->SetValue(NewProp_bSubTrackOnly, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrack.h"));
				MetaData->SetValue(NewProp_bSubTrackOnly, TEXT("ToolTip"), TEXT("If this track can only exist as a sub track."));
				MetaData->SetValue(NewProp_bIsAnimControlTrack, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrack.h"));
				MetaData->SetValue(NewProp_bIsAnimControlTrack, TEXT("ToolTip"), TEXT("If true, the  AActor  this track is working on will have BeginAnimControl/FinishAnimControl called on it."));
				MetaData->SetValue(NewProp_TrackIcon, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrack.h"));
				MetaData->SetValue(NewProp_bIsSelected, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrack.h"));
				MetaData->SetValue(NewProp_bIsSelected, TEXT("ToolTip"), TEXT("Whether or not this track is selected in the editor."));
				MetaData->SetValue(NewProp_bDisableTrack, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrack.h"));
				MetaData->SetValue(NewProp_bDisableTrack, TEXT("ToolTip"), TEXT("Whether or not this track should actually update the target actor."));
				MetaData->SetValue(NewProp_bDirGroupOnly, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrack.h"));
				MetaData->SetValue(NewProp_bDirGroupOnly, TEXT("ToolTip"), TEXT("If this track can only exist inside the Director group."));
				MetaData->SetValue(NewProp_bOnePerGroup, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrack.h"));
				MetaData->SetValue(NewProp_bOnePerGroup, TEXT("ToolTip"), TEXT("Whether there may only be one of this track in an UInterpGroup."));
				MetaData->SetValue(NewProp_TrackTitle, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrack.h"));
				MetaData->SetValue(NewProp_TrackTitle, TEXT("ToolTip"), TEXT("Title of track type."));
				MetaData->SetValue(NewProp_ActiveCondition, TEXT("Category"), TEXT("InterpTrack"));
				MetaData->SetValue(NewProp_ActiveCondition, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrack.h"));
				MetaData->SetValue(NewProp_ActiveCondition, TEXT("ToolTip"), TEXT("Sets the condition that must be met for this track to be enabled"));
				MetaData->SetValue(NewProp_TrackInstClass, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrack.h"));
				MetaData->SetValue(NewProp_SupportedSubTracks, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrack.h"));
				MetaData->SetValue(NewProp_SupportedSubTracks, TEXT("ToolTip"), TEXT("A list of supported tracks that can be a subtrack of this track."));
				MetaData->SetValue(NewProp_SubTrackGroups, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrack.h"));
				MetaData->SetValue(NewProp_SubTrackGroups, TEXT("ToolTip"), TEXT("A list of subtrack groups (for editor UI organization only)"));
				MetaData->SetValue(NewProp_SubTracks, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrack.h"));
				MetaData->SetValue(NewProp_SubTracks, TEXT("ToolTip"), TEXT("A list of subtracks that belong to this track"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UInterpTrack(Z_Construct_UClass_UInterpTrack, TEXT("UInterpTrack"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UInterpTrack);
	UScriptStruct* Z_Construct_UScriptStruct_FBoolTrackKey()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FBoolTrackKey_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("BoolTrackKey"), sizeof(FBoolTrackKey), Get_Z_Construct_UScriptStruct_FBoolTrackKey_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BoolTrackKey"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FBoolTrackKey>, EStructFlags(0x00000001));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(Value, FBoolTrackKey, uint8);
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Value"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Value, FBoolTrackKey), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(Value, FBoolTrackKey), sizeof(uint8), false);
			UProperty* NewProp_Time = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Time"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Time, FBoolTrackKey), 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackBoolProp.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Information for one event in the track."));
			MetaData->SetValue(NewProp_Value, TEXT("Category"), TEXT("BoolTrackKey"));
			MetaData->SetValue(NewProp_Value, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackBoolProp.h"));
			MetaData->SetValue(NewProp_Time, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackBoolProp.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FBoolTrackKey_CRC() { return 993005448U; }
	UClass* Z_Construct_UClass_UInterpTrackBoolProp_NoRegister()
	{
		return UInterpTrackBoolProp::StaticClass();
	}
	UClass* Z_Construct_UClass_UInterpTrackBoolProp()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UInterpTrack();
			Z_Construct_UPackage_Engine();
			OuterClass = UInterpTrackBoolProp::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_PropertyName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PropertyName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(PropertyName, UInterpTrackBoolProp), 0x0000000000020001);
				UProperty* NewProp_BoolTrack = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BoolTrack"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(BoolTrack, UInterpTrackBoolProp), 0x0000000000000000);
				UProperty* NewProp_BoolTrack_Inner = new(EC_InternalUseOnlyConstructor, NewProp_BoolTrack, TEXT("BoolTrack"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FBoolTrackKey());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Bool Property Track"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Matinee/InterpTrackBoolProp.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackBoolProp.h"));
				MetaData->SetValue(NewProp_PropertyName, TEXT("Category"), TEXT("InterpTrackBoolProp"));
				MetaData->SetValue(NewProp_PropertyName, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackBoolProp.h"));
				MetaData->SetValue(NewProp_PropertyName, TEXT("ToolTip"), TEXT("Name of property in Group  AActor  which this track will modify over time."));
				MetaData->SetValue(NewProp_BoolTrack, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackBoolProp.h"));
				MetaData->SetValue(NewProp_BoolTrack, TEXT("ToolTip"), TEXT("Array of booleans to set."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UInterpTrackBoolProp(Z_Construct_UClass_UInterpTrackBoolProp, TEXT("UInterpTrackBoolProp"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UInterpTrackBoolProp);
	UScriptStruct* Z_Construct_UScriptStruct_FDirectorTrackCut()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FDirectorTrackCut_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("DirectorTrackCut"), sizeof(FDirectorTrackCut), Get_Z_Construct_UScriptStruct_FDirectorTrackCut_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DirectorTrackCut"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FDirectorTrackCut>, EStructFlags(0x00000001));
			UProperty* NewProp_ShotNumber = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ShotNumber"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ShotNumber, FDirectorTrackCut), 0x0000000000000000);
			UProperty* NewProp_TargetCamGroup = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TargetCamGroup"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(TargetCamGroup, FDirectorTrackCut), 0x0000000000000001);
			UProperty* NewProp_TransitionTime = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TransitionTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(TransitionTime, FDirectorTrackCut), 0x0000000000000000);
			UProperty* NewProp_Time = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Time"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Time, FDirectorTrackCut), 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackDirector.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Information for one cut in this track."));
			MetaData->SetValue(NewProp_ShotNumber, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackDirector.h"));
			MetaData->SetValue(NewProp_ShotNumber, TEXT("ToolTip"), TEXT("Shot number for developer reference"));
			MetaData->SetValue(NewProp_TargetCamGroup, TEXT("Category"), TEXT("DirectorTrackCut"));
			MetaData->SetValue(NewProp_TargetCamGroup, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackDirector.h"));
			MetaData->SetValue(NewProp_TargetCamGroup, TEXT("ToolTip"), TEXT("GroupName of UInterpGroup to cut viewpoint to."));
			MetaData->SetValue(NewProp_TransitionTime, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackDirector.h"));
			MetaData->SetValue(NewProp_TransitionTime, TEXT("ToolTip"), TEXT("Time taken to move view to new camera."));
			MetaData->SetValue(NewProp_Time, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackDirector.h"));
			MetaData->SetValue(NewProp_Time, TEXT("ToolTip"), TEXT("Time to perform the cut."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FDirectorTrackCut_CRC() { return 3729841583U; }
	UClass* Z_Construct_UClass_UInterpTrackDirector_NoRegister()
	{
		return UInterpTrackDirector::StaticClass();
	}
	UClass* Z_Construct_UClass_UInterpTrackDirector()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UInterpTrack();
			Z_Construct_UPackage_Engine();
			OuterClass = UInterpTrackDirector::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_PreviewCamera = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PreviewCamera"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(PreviewCamera, UInterpTrackDirector), 0x0000000800002000, Z_Construct_UClass_ACameraActor_NoRegister());
#endif // WITH_EDITORONLY_DATA
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSimulateCameraCutsOnClients, UInterpTrackDirector, uint8);
				UProperty* NewProp_bSimulateCameraCutsOnClients = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bSimulateCameraCutsOnClients"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSimulateCameraCutsOnClients, UInterpTrackDirector), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bSimulateCameraCutsOnClients, UInterpTrackDirector), sizeof(uint8), false);
				UProperty* NewProp_CutTrack = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CutTrack"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(CutTrack, UInterpTrackDirector), 0x0000000000000000);
				UProperty* NewProp_CutTrack_Inner = new(EC_InternalUseOnlyConstructor, NewProp_CutTrack, TEXT("CutTrack"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FDirectorTrackCut());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Director Track"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Matinee/InterpTrackDirector.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackDirector.h"));
				MetaData->SetValue(NewProp_PreviewCamera, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackDirector.h"));
				MetaData->SetValue(NewProp_PreviewCamera, TEXT("ToolTip"), TEXT("The camera actor which the track is currently focused on. Only valid if this track or it's group is selected"));
				MetaData->SetValue(NewProp_bSimulateCameraCutsOnClients, TEXT("Category"), TEXT("InterpTrackDirector"));
				MetaData->SetValue(NewProp_bSimulateCameraCutsOnClients, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackDirector.h"));
				MetaData->SetValue(NewProp_bSimulateCameraCutsOnClients, TEXT("ToolTip"), TEXT("True to allow clients to simulate their own camera cuts.  Can help with latency-induced timing issues."));
				MetaData->SetValue(NewProp_CutTrack, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackDirector.h"));
				MetaData->SetValue(NewProp_CutTrack, TEXT("ToolTip"), TEXT("Array of cuts between cameras."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UInterpTrackDirector(Z_Construct_UClass_UInterpTrackDirector, TEXT("UInterpTrackDirector"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UInterpTrackDirector);
	UScriptStruct* Z_Construct_UScriptStruct_FEventTrackKey()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FEventTrackKey_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("EventTrackKey"), sizeof(FEventTrackKey), Get_Z_Construct_UScriptStruct_FEventTrackKey_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EventTrackKey"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FEventTrackKey>, EStructFlags(0x00000001));
			UProperty* NewProp_EventName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("EventName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(EventName, FEventTrackKey), 0x0000000000000001);
			UProperty* NewProp_Time = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Time"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Time, FEventTrackKey), 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackEvent.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Information for one event in the track."));
			MetaData->SetValue(NewProp_EventName, TEXT("Category"), TEXT("EventTrackKey"));
			MetaData->SetValue(NewProp_EventName, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackEvent.h"));
			MetaData->SetValue(NewProp_Time, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackEvent.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FEventTrackKey_CRC() { return 4057464217U; }
	UClass* Z_Construct_UClass_UInterpTrackEvent_NoRegister()
	{
		return UInterpTrackEvent::StaticClass();
	}
	UClass* Z_Construct_UClass_UInterpTrackEvent()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UInterpTrack();
			Z_Construct_UPackage_Engine();
			OuterClass = UInterpTrackEvent::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseCustomEventName, UInterpTrackEvent, uint8);
				UProperty* NewProp_bUseCustomEventName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUseCustomEventName"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseCustomEventName, UInterpTrackEvent), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bUseCustomEventName, UInterpTrackEvent), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bFireEventsWhenJumpingForwards, UInterpTrackEvent, uint8);
				UProperty* NewProp_bFireEventsWhenJumpingForwards = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bFireEventsWhenJumpingForwards"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bFireEventsWhenJumpingForwards, UInterpTrackEvent), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bFireEventsWhenJumpingForwards, UInterpTrackEvent), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bFireEventsWhenBackwards, UInterpTrackEvent, uint8);
				UProperty* NewProp_bFireEventsWhenBackwards = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bFireEventsWhenBackwards"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bFireEventsWhenBackwards, UInterpTrackEvent), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bFireEventsWhenBackwards, UInterpTrackEvent), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bFireEventsWhenForwards, UInterpTrackEvent, uint8);
				UProperty* NewProp_bFireEventsWhenForwards = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bFireEventsWhenForwards"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bFireEventsWhenForwards, UInterpTrackEvent), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bFireEventsWhenForwards, UInterpTrackEvent), sizeof(uint8), false);
				UProperty* NewProp_EventTrack = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EventTrack"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(EventTrack, UInterpTrackEvent), 0x0000000000000000);
				UProperty* NewProp_EventTrack_Inner = new(EC_InternalUseOnlyConstructor, NewProp_EventTrack, TEXT("EventTrack"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FEventTrackKey());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Event Track"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Matinee/InterpTrackEvent.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackEvent.h"));
				MetaData->SetValue(NewProp_bUseCustomEventName, TEXT("Category"), TEXT("InterpTrackEvent"));
				MetaData->SetValue(NewProp_bUseCustomEventName, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackEvent.h"));
				MetaData->SetValue(NewProp_bUseCustomEventName, TEXT("ToolTip"), TEXT("If checked each key's event name is the exact name of the custom event function in level script that will be called"));
				MetaData->SetValue(NewProp_bFireEventsWhenJumpingForwards, TEXT("Category"), TEXT("InterpTrackEvent"));
				MetaData->SetValue(NewProp_bFireEventsWhenJumpingForwards, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackEvent.h"));
				MetaData->SetValue(NewProp_bFireEventsWhenJumpingForwards, TEXT("ToolTip"), TEXT("If true, events on this track are fired even when jumping forwads through a sequence - for example, skipping a cinematic."));
				MetaData->SetValue(NewProp_bFireEventsWhenBackwards, TEXT("Category"), TEXT("InterpTrackEvent"));
				MetaData->SetValue(NewProp_bFireEventsWhenBackwards, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackEvent.h"));
				MetaData->SetValue(NewProp_bFireEventsWhenBackwards, TEXT("ToolTip"), TEXT("If events should be fired when passed playing the sequence backwards."));
				MetaData->SetValue(NewProp_bFireEventsWhenForwards, TEXT("Category"), TEXT("InterpTrackEvent"));
				MetaData->SetValue(NewProp_bFireEventsWhenForwards, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackEvent.h"));
				MetaData->SetValue(NewProp_bFireEventsWhenForwards, TEXT("ToolTip"), TEXT("If events should be fired when passed playing the sequence forwards."));
				MetaData->SetValue(NewProp_EventTrack, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackEvent.h"));
				MetaData->SetValue(NewProp_EventTrack, TEXT("ToolTip"), TEXT("Array of events to fire off."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UInterpTrackEvent(Z_Construct_UClass_UInterpTrackEvent, TEXT("UInterpTrackEvent"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UInterpTrackEvent);
	UClass* Z_Construct_UClass_UInterpTrackFloatBase_NoRegister()
	{
		return UInterpTrackFloatBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UInterpTrackFloatBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UInterpTrack();
			Z_Construct_UPackage_Engine();
			OuterClass = UInterpTrackFloatBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20102081;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_CurveTension = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CurveTension"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(CurveTension, UInterpTrackFloatBase), 0x0000000000000001);
				UProperty* NewProp_FloatTrack = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FloatTrack"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(FloatTrack, UInterpTrackFloatBase), 0x0000000000000000, Z_Construct_UScriptStruct_FInterpCurveFloat());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Matinee/InterpTrackFloatBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackFloatBase.h"));
				MetaData->SetValue(NewProp_CurveTension, TEXT("Category"), TEXT("InterpTrackFloatBase"));
				MetaData->SetValue(NewProp_CurveTension, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackFloatBase.h"));
				MetaData->SetValue(NewProp_CurveTension, TEXT("ToolTip"), TEXT("Tension of curve, used for keypoints using automatic tangents."));
				MetaData->SetValue(NewProp_FloatTrack, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackFloatBase.h"));
				MetaData->SetValue(NewProp_FloatTrack, TEXT("ToolTip"), TEXT("Actually track data containing keyframes of float as it varies over time."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UInterpTrackFloatBase(Z_Construct_UClass_UInterpTrackFloatBase, TEXT("UInterpTrackFloatBase"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UInterpTrackFloatBase);
	UScriptStruct* Z_Construct_UScriptStruct_FAnimControlTrackKey()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimControlTrackKey_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("AnimControlTrackKey"), sizeof(FAnimControlTrackKey), Get_Z_Construct_UScriptStruct_FAnimControlTrackKey_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimControlTrackKey"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FAnimControlTrackKey>, EStructFlags(0x00000001));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bReverse, FAnimControlTrackKey, uint8);
			UProperty* NewProp_bReverse = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bReverse"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bReverse, FAnimControlTrackKey), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bReverse, FAnimControlTrackKey), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLooping, FAnimControlTrackKey, uint8);
			UProperty* NewProp_bLooping = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bLooping"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLooping, FAnimControlTrackKey), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bLooping, FAnimControlTrackKey), sizeof(uint8), false);
			UProperty* NewProp_AnimPlayRate = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("AnimPlayRate"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(AnimPlayRate, FAnimControlTrackKey), 0x0000000000000000);
			UProperty* NewProp_AnimEndOffset = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("AnimEndOffset"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(AnimEndOffset, FAnimControlTrackKey), 0x0000000000000000);
			UProperty* NewProp_AnimStartOffset = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("AnimStartOffset"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(AnimStartOffset, FAnimControlTrackKey), 0x0000000000000000);
			UProperty* NewProp_AnimSeq = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("AnimSeq"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(AnimSeq, FAnimControlTrackKey), 0x0000000000000000, Z_Construct_UClass_UAnimSequence_NoRegister());
			UProperty* NewProp_StartTime = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("StartTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(StartTime, FAnimControlTrackKey), 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackAnimControl.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Structure used for holding information for one animation played on the Anim Control track."));
			MetaData->SetValue(NewProp_bReverse, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackAnimControl.h"));
			MetaData->SetValue(NewProp_bReverse, TEXT("ToolTip"), TEXT("Whether to play the animation in reverse or not."));
			MetaData->SetValue(NewProp_bLooping, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackAnimControl.h"));
			MetaData->SetValue(NewProp_bLooping, TEXT("ToolTip"), TEXT("Should this animation loop."));
			MetaData->SetValue(NewProp_AnimPlayRate, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackAnimControl.h"));
			MetaData->SetValue(NewProp_AnimPlayRate, TEXT("ToolTip"), TEXT("Playback speed of this animation."));
			MetaData->SetValue(NewProp_AnimEndOffset, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackAnimControl.h"));
			MetaData->SetValue(NewProp_AnimEndOffset, TEXT("ToolTip"), TEXT("Time to end playing the AnimSequence at."));
			MetaData->SetValue(NewProp_AnimStartOffset, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackAnimControl.h"));
			MetaData->SetValue(NewProp_AnimStartOffset, TEXT("ToolTip"), TEXT("Time to start playing AnimSequence at."));
			MetaData->SetValue(NewProp_AnimSeq, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackAnimControl.h"));
			MetaData->SetValue(NewProp_AnimSeq, TEXT("ToolTip"), TEXT("Animation Sequence to play"));
			MetaData->SetValue(NewProp_StartTime, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackAnimControl.h"));
			MetaData->SetValue(NewProp_StartTime, TEXT("ToolTip"), TEXT("Position in the Matinee sequence to start playing this animation."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimControlTrackKey_CRC() { return 491158303U; }
	UClass* Z_Construct_UClass_UInterpTrackAnimControl_NoRegister()
	{
		return UInterpTrackAnimControl::StaticClass();
	}
	UClass* Z_Construct_UClass_UInterpTrackAnimControl()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UInterpTrackFloatBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UInterpTrackAnimControl::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSkipAnimNotifiers, UInterpTrackAnimControl, uint8);
				UProperty* NewProp_bSkipAnimNotifiers = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bSkipAnimNotifiers"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSkipAnimNotifiers, UInterpTrackAnimControl), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bSkipAnimNotifiers, UInterpTrackAnimControl), sizeof(uint8), false);
				UProperty* NewProp_AnimSeqs = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AnimSeqs"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(AnimSeqs, UInterpTrackAnimControl), 0x0000000000000000);
				UProperty* NewProp_AnimSeqs_Inner = new(EC_InternalUseOnlyConstructor, NewProp_AnimSeqs, TEXT("AnimSeqs"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FAnimControlTrackKey());
				UProperty* NewProp_SlotName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SlotName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(SlotName, UInterpTrackAnimControl), 0x0000000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Animation Track"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Matinee/InterpTrackAnimControl.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackAnimControl.h"));
				MetaData->SetValue(NewProp_bSkipAnimNotifiers, TEXT("Category"), TEXT("InterpTrackAnimControl"));
				MetaData->SetValue(NewProp_bSkipAnimNotifiers, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackAnimControl.h"));
				MetaData->SetValue(NewProp_bSkipAnimNotifiers, TEXT("ToolTip"), TEXT("Skip all anim notifiers *"));
				MetaData->SetValue(NewProp_AnimSeqs, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackAnimControl.h"));
				MetaData->SetValue(NewProp_AnimSeqs, TEXT("ToolTip"), TEXT("Track of different animations to play and when to start playing them."));
				MetaData->SetValue(NewProp_SlotName, TEXT("Category"), TEXT("InterpTrackAnimControl"));
				MetaData->SetValue(NewProp_SlotName, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackAnimControl.h"));
				MetaData->SetValue(NewProp_SlotName, TEXT("ToolTip"), TEXT("Name of slot to use when playing animation. Passed to Actor.\nWhen multiple tracks use the same slot name, they are each given a different ChannelIndex when SetAnimPosition is called."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UInterpTrackAnimControl(Z_Construct_UClass_UInterpTrackAnimControl, TEXT("UInterpTrackAnimControl"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UInterpTrackAnimControl);
	UClass* Z_Construct_UClass_UInterpTrackFade_NoRegister()
	{
		return UInterpTrackFade::StaticClass();
	}
	UClass* Z_Construct_UClass_UInterpTrackFade()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UInterpTrackFloatBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UInterpTrackFade::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_FadeColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FadeColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(FadeColor, UInterpTrackFade), 0x0000000000000001, Z_Construct_UScriptStruct_FLinearColor());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bFadeAudio, UInterpTrackFade, uint8);
				UProperty* NewProp_bFadeAudio = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bFadeAudio"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bFadeAudio, UInterpTrackFade), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bFadeAudio, UInterpTrackFade), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bPersistFade, UInterpTrackFade, uint8);
				UProperty* NewProp_bPersistFade = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bPersistFade"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bPersistFade, UInterpTrackFade), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bPersistFade, UInterpTrackFade), sizeof(uint8), false);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Fade Track"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Matinee/InterpTrackFade.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackFade.h"));
				MetaData->SetValue(NewProp_FadeColor, TEXT("Category"), TEXT("InterpTrackFade"));
				MetaData->SetValue(NewProp_FadeColor, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackFade.h"));
				MetaData->SetValue(NewProp_FadeColor, TEXT("ToolTip"), TEXT("Color to fade to."));
				MetaData->SetValue(NewProp_bFadeAudio, TEXT("Category"), TEXT("InterpTrackFade"));
				MetaData->SetValue(NewProp_bFadeAudio, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackFade.h"));
				MetaData->SetValue(NewProp_bFadeAudio, TEXT("ToolTip"), TEXT("True to set master audio volume along with the visual fade."));
				MetaData->SetValue(NewProp_bPersistFade, TEXT("Category"), TEXT("InterpTrackFade"));
				MetaData->SetValue(NewProp_bPersistFade, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackFade.h"));
				MetaData->SetValue(NewProp_bPersistFade, TEXT("ToolTip"), TEXT("InterpTrackFade\n\nSpecial float property track that controls camera fading over time.\nShould live in a Director group."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UInterpTrackFade(Z_Construct_UClass_UInterpTrackFade, TEXT("UInterpTrackFade"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UInterpTrackFade);
	UClass* Z_Construct_UClass_UInterpTrackFloatAnimBPParam_NoRegister()
	{
		return UInterpTrackFloatAnimBPParam::StaticClass();
	}
	UClass* Z_Construct_UClass_UInterpTrackFloatAnimBPParam()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UInterpTrackFloatBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UInterpTrackFloatAnimBPParam::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ParamName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ParamName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(ParamName, UInterpTrackFloatAnimBPParam), 0x0000000000000001);
				UProperty* NewProp_AnimBlueprintClass = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AnimBlueprintClass"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(AnimBlueprintClass, UInterpTrackFloatAnimBPParam), 0x0000000000000001, Z_Construct_UClass_UObject_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Float Anim BP Parameter Track"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Matinee/InterpTrackFloatAnimBPParam.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackFloatAnimBPParam.h"));
				MetaData->SetValue(NewProp_ParamName, TEXT("Category"), TEXT("InterpTrackFloatAnimBPParam"));
				MetaData->SetValue(NewProp_ParamName, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackFloatAnimBPParam.h"));
				MetaData->SetValue(NewProp_ParamName, TEXT("ToolTip"), TEXT("Name of parameter in the MaterialInstance which this track will modify over time."));
				MetaData->SetValue(NewProp_AnimBlueprintClass, TEXT("Category"), TEXT("InterpTrackFloatAnimBPParam"));
				MetaData->SetValue(NewProp_AnimBlueprintClass, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackFloatAnimBPParam.h"));
				MetaData->SetValue(NewProp_AnimBlueprintClass, TEXT("ToolTip"), TEXT("Materials whose parameters we want to change and the references to those materials."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UInterpTrackFloatAnimBPParam(Z_Construct_UClass_UInterpTrackFloatAnimBPParam, TEXT("UInterpTrackFloatAnimBPParam"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UInterpTrackFloatAnimBPParam);
	UClass* Z_Construct_UClass_UInterpTrackFloatMaterialParam_NoRegister()
	{
		return UInterpTrackFloatMaterialParam::StaticClass();
	}
	UClass* Z_Construct_UClass_UInterpTrackFloatMaterialParam()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UInterpTrackFloatBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UInterpTrackFloatMaterialParam::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ParamName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ParamName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(ParamName, UInterpTrackFloatMaterialParam), 0x0000000000000001);
				UProperty* NewProp_TargetMaterials = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TargetMaterials"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(TargetMaterials, UInterpTrackFloatMaterialParam), 0x0000000000000001);
				UProperty* NewProp_TargetMaterials_Inner = new(EC_InternalUseOnlyConstructor, NewProp_TargetMaterials, TEXT("TargetMaterials"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UMaterialInterface_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Float Material Parameter Track"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Matinee/InterpTrackFloatMaterialParam.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackFloatMaterialParam.h"));
				MetaData->SetValue(NewProp_ParamName, TEXT("Category"), TEXT("InterpTrackFloatMaterialParam"));
				MetaData->SetValue(NewProp_ParamName, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackFloatMaterialParam.h"));
				MetaData->SetValue(NewProp_ParamName, TEXT("ToolTip"), TEXT("Name of parameter in the MaterialInstance which this track will modify over time."));
				MetaData->SetValue(NewProp_TargetMaterials, TEXT("Category"), TEXT("InterpTrackFloatMaterialParam"));
				MetaData->SetValue(NewProp_TargetMaterials, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackFloatMaterialParam.h"));
				MetaData->SetValue(NewProp_TargetMaterials, TEXT("ToolTip"), TEXT("Materials whose parameters we want to change and the references to those materials."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UInterpTrackFloatMaterialParam(Z_Construct_UClass_UInterpTrackFloatMaterialParam, TEXT("UInterpTrackFloatMaterialParam"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UInterpTrackFloatMaterialParam);
	UClass* Z_Construct_UClass_UInterpTrackFloatParticleParam_NoRegister()
	{
		return UInterpTrackFloatParticleParam::StaticClass();
	}
	UClass* Z_Construct_UClass_UInterpTrackFloatParticleParam()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UInterpTrackFloatBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UInterpTrackFloatParticleParam::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ParamName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ParamName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(ParamName, UInterpTrackFloatParticleParam), 0x0000000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Float Particle Param Track"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Matinee/InterpTrackFloatParticleParam.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackFloatParticleParam.h"));
				MetaData->SetValue(NewProp_ParamName, TEXT("Category"), TEXT("InterpTrackFloatParticleParam"));
				MetaData->SetValue(NewProp_ParamName, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackFloatParticleParam.h"));
				MetaData->SetValue(NewProp_ParamName, TEXT("ToolTip"), TEXT("Name of property in the Emitter which this track mill modify over time."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UInterpTrackFloatParticleParam(Z_Construct_UClass_UInterpTrackFloatParticleParam, TEXT("UInterpTrackFloatParticleParam"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UInterpTrackFloatParticleParam);
	UClass* Z_Construct_UClass_UInterpTrackFloatProp_NoRegister()
	{
		return UInterpTrackFloatProp::StaticClass();
	}
	UClass* Z_Construct_UClass_UInterpTrackFloatProp()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UInterpTrackFloatBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UInterpTrackFloatProp::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_PropertyName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PropertyName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(PropertyName, UInterpTrackFloatProp), 0x0000000000020001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Float Property Track"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Matinee/InterpTrackFloatProp.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackFloatProp.h"));
				MetaData->SetValue(NewProp_PropertyName, TEXT("Category"), TEXT("InterpTrackFloatProp"));
				MetaData->SetValue(NewProp_PropertyName, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackFloatProp.h"));
				MetaData->SetValue(NewProp_PropertyName, TEXT("ToolTip"), TEXT("Name of property in Group  AActor  which this track mill modify over time."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UInterpTrackFloatProp(Z_Construct_UClass_UInterpTrackFloatProp, TEXT("UInterpTrackFloatProp"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UInterpTrackFloatProp);
	UEnum* Z_Construct_UEnum_Engine_EInterpTrackMoveRotMode()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EInterpTrackMoveRotMode_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EInterpTrackMoveRotMode"), 0, Get_Z_Construct_UEnum_Engine_EInterpTrackMoveRotMode_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EInterpTrackMoveRotMode"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("IMR_Keyframed")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("IMR_LookAtGroup")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("IMR_Ignore")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("IMR_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("IMR_Ignore.ToolTip"), TEXT("Do not change rotation. Ignore it."));
			MetaData->SetValue(ReturnEnum, TEXT("IMR_Keyframed.ToolTip"), TEXT("Should take orientation from the keyframe."));
			MetaData->SetValue(ReturnEnum, TEXT("IMR_LookAtGroup.ToolTip"), TEXT("Point the X-Axis of the controlled Actor at the group specified by LookAtGroupName."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackMove.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EInterpTrackMoveRotMode_CRC() { return 2534469843U; }
	UScriptStruct* Z_Construct_UScriptStruct_FInterpLookupTrack()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FInterpLookupTrack_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("InterpLookupTrack"), sizeof(FInterpLookupTrack), Get_Z_Construct_UScriptStruct_FInterpLookupTrack_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("InterpLookupTrack"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FInterpLookupTrack>, EStructFlags(0x00000001));
			UProperty* NewProp_Points = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Points"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Points, FInterpLookupTrack), 0x0000000000000000);
			UProperty* NewProp_Points_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Points, TEXT("Points"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FInterpLookupPoint());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackMove.h"));
			MetaData->SetValue(NewProp_Points, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackMove.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FInterpLookupTrack_CRC() { return 2257104412U; }
	UScriptStruct* Z_Construct_UScriptStruct_FInterpLookupPoint()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FInterpLookupPoint_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("InterpLookupPoint"), sizeof(FInterpLookupPoint), Get_Z_Construct_UScriptStruct_FInterpLookupPoint_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("InterpLookupPoint"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FInterpLookupPoint>, EStructFlags(0x00000001));
			UProperty* NewProp_Time = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Time"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Time, FInterpLookupPoint), 0x0000000000000000);
			UProperty* NewProp_GroupName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("GroupName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(GroupName, FInterpLookupPoint), 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackMove.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Array of group names to retrieve position and rotation data from instead of using the data stored in the keyframe.\nA value of NAME_None means to use the PosTrack and EulerTrack data for the keyframe.\nThere needs to be the same amount of elements in this array as there are keyframes."));
			MetaData->SetValue(NewProp_Time, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackMove.h"));
			MetaData->SetValue(NewProp_GroupName, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackMove.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FInterpLookupPoint_CRC() { return 1678408705U; }
	UClass* Z_Construct_UClass_UInterpTrackMove_NoRegister()
	{
		return UInterpTrackMove::StaticClass();
	}
	UClass* Z_Construct_UClass_UInterpTrackMove()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UInterpTrack();
			Z_Construct_UPackage_Engine();
			OuterClass = UInterpTrackMove::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_RotMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RotMode"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(RotMode, UInterpTrackMove), 0x0000000000000001, Z_Construct_UEnum_Engine_EInterpTrackMoveRotMode());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bHide3DTrack, UInterpTrackMove, uint8);
				UProperty* NewProp_bHide3DTrack = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bHide3DTrack"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bHide3DTrack, UInterpTrackMove), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bHide3DTrack, UInterpTrackMove), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bShowRotationOnCurveEd, UInterpTrackMove, uint8);
				UProperty* NewProp_bShowRotationOnCurveEd = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bShowRotationOnCurveEd"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bShowRotationOnCurveEd, UInterpTrackMove), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bShowRotationOnCurveEd, UInterpTrackMove), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bShowTranslationOnCurveEd, UInterpTrackMove, uint8);
				UProperty* NewProp_bShowTranslationOnCurveEd = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bShowTranslationOnCurveEd"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bShowTranslationOnCurveEd, UInterpTrackMove), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bShowTranslationOnCurveEd, UInterpTrackMove), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDisableMovement, UInterpTrackMove, uint8);
				UProperty* NewProp_bDisableMovement = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bDisableMovement"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDisableMovement, UInterpTrackMove), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bDisableMovement, UInterpTrackMove), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bShowArrowAtKeys, UInterpTrackMove, uint8);
				UProperty* NewProp_bShowArrowAtKeys = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bShowArrowAtKeys"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bShowArrowAtKeys, UInterpTrackMove), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bShowArrowAtKeys, UInterpTrackMove), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseQuatInterpolation, UInterpTrackMove, uint8);
				UProperty* NewProp_bUseQuatInterpolation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUseQuatInterpolation"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseQuatInterpolation, UInterpTrackMove), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bUseQuatInterpolation, UInterpTrackMove), sizeof(uint8), false);
				UProperty* NewProp_AngCurveTension = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AngCurveTension"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(AngCurveTension, UInterpTrackMove), 0x0000000000000001);
				UProperty* NewProp_LinCurveTension = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LinCurveTension"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(LinCurveTension, UInterpTrackMove), 0x0000000000000001);
				UProperty* NewProp_LookAtGroupName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LookAtGroupName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(LookAtGroupName, UInterpTrackMove), 0x0000000000000001);
				UProperty* NewProp_LookupTrack = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LookupTrack"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LookupTrack, UInterpTrackMove), 0x0000000000000000, Z_Construct_UScriptStruct_FInterpLookupTrack());
				UProperty* NewProp_EulerTrack = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EulerTrack"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(EulerTrack, UInterpTrackMove), 0x0000000000000000, Z_Construct_UScriptStruct_FInterpCurveVector());
				UProperty* NewProp_PosTrack = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PosTrack"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PosTrack, UInterpTrackMove), 0x0000000000000000, Z_Construct_UScriptStruct_FInterpCurveVector());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Movement Track"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Matinee/InterpTrackMove.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackMove.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Track containing data for moving an actor around over time."));
				MetaData->SetValue(NewProp_RotMode, TEXT("Category"), TEXT("InterpTrackMove"));
				MetaData->SetValue(NewProp_RotMode, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackMove.h"));
				MetaData->SetValue(NewProp_bHide3DTrack, TEXT("Category"), TEXT("InterpTrackMove"));
				MetaData->SetValue(NewProp_bHide3DTrack, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackMove.h"));
				MetaData->SetValue(NewProp_bHide3DTrack, TEXT("ToolTip"), TEXT("If true, 3D representation of this track in the 3D viewport is disabled."));
				MetaData->SetValue(NewProp_bShowRotationOnCurveEd, TEXT("Category"), TEXT("InterpTrackMove"));
				MetaData->SetValue(NewProp_bShowRotationOnCurveEd, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackMove.h"));
				MetaData->SetValue(NewProp_bShowRotationOnCurveEd, TEXT("ToolTip"), TEXT("If false, when this track is displayed on the Curve Editor in Matinee, do not show the Rotation tracks."));
				MetaData->SetValue(NewProp_bShowTranslationOnCurveEd, TEXT("Category"), TEXT("InterpTrackMove"));
				MetaData->SetValue(NewProp_bShowTranslationOnCurveEd, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackMove.h"));
				MetaData->SetValue(NewProp_bShowTranslationOnCurveEd, TEXT("ToolTip"), TEXT("If false, when this track is displayed on the Curve Editor in Matinee, do not show the Translation tracks."));
				MetaData->SetValue(NewProp_bDisableMovement, TEXT("Category"), TEXT("InterpTrackMove"));
				MetaData->SetValue(NewProp_bDisableMovement, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackMove.h"));
				MetaData->SetValue(NewProp_bDisableMovement, TEXT("ToolTip"), TEXT("Disable previewing of this track - will always position  AActor  at Time=0.0. Useful when keyframing an object relative to this group."));
				MetaData->SetValue(NewProp_bShowArrowAtKeys, TEXT("Category"), TEXT("InterpTrackMove"));
				MetaData->SetValue(NewProp_bShowArrowAtKeys, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackMove.h"));
				MetaData->SetValue(NewProp_bShowArrowAtKeys, TEXT("ToolTip"), TEXT("In the editor, show a small arrow at each keyframe indicating the rotation at that key."));
				MetaData->SetValue(NewProp_bUseQuatInterpolation, TEXT("Category"), TEXT("InterpTrackMove"));
				MetaData->SetValue(NewProp_bUseQuatInterpolation, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackMove.h"));
				MetaData->SetValue(NewProp_bUseQuatInterpolation, TEXT("ToolTip"), TEXT("Use a Quaternion linear interpolation between keys.\nThis is robust and will find the 'shortest' distance between keys, but does not support ease in/out."));
				MetaData->SetValue(NewProp_AngCurveTension, TEXT("Category"), TEXT("InterpTrackMove"));
				MetaData->SetValue(NewProp_AngCurveTension, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackMove.h"));
				MetaData->SetValue(NewProp_AngCurveTension, TEXT("ToolTip"), TEXT("Controls the tightness of the curve for the rotation path."));
				MetaData->SetValue(NewProp_LinCurveTension, TEXT("Category"), TEXT("InterpTrackMove"));
				MetaData->SetValue(NewProp_LinCurveTension, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackMove.h"));
				MetaData->SetValue(NewProp_LinCurveTension, TEXT("ToolTip"), TEXT("Controls the tightness of the curve for the translation path."));
				MetaData->SetValue(NewProp_LookAtGroupName, TEXT("Category"), TEXT("InterpTrackMove"));
				MetaData->SetValue(NewProp_LookAtGroupName, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackMove.h"));
				MetaData->SetValue(NewProp_LookAtGroupName, TEXT("ToolTip"), TEXT("When using IMR_LookAtGroup, specifies the Group which this track should always point its actor at."));
				MetaData->SetValue(NewProp_LookupTrack, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackMove.h"));
				MetaData->SetValue(NewProp_EulerTrack, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackMove.h"));
				MetaData->SetValue(NewProp_EulerTrack, TEXT("ToolTip"), TEXT("Actual rotation keyframe data, stored as Euler angles in degrees, for easy editing on curve."));
				MetaData->SetValue(NewProp_PosTrack, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackMove.h"));
				MetaData->SetValue(NewProp_PosTrack, TEXT("ToolTip"), TEXT("Actual position keyframe data."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UInterpTrackMove(Z_Construct_UClass_UInterpTrackMove, TEXT("UInterpTrackMove"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UInterpTrackMove);
	UEnum* Z_Construct_UEnum_Engine_EInterpMoveAxis()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EInterpMoveAxis_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EInterpMoveAxis"), 0, Get_Z_Construct_UEnum_Engine_EInterpMoveAxis_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EInterpMoveAxis"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("AXIS_TranslationX")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("AXIS_TranslationY")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("AXIS_TranslationZ")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("AXIS_RotationX")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("AXIS_RotationY")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("AXIS_RotationZ")), 5));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("AXIS_MAX")), 6));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackMoveAxis.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("List of axies this track can use"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EInterpMoveAxis_CRC() { return 2597741730U; }
	UClass* Z_Construct_UClass_UInterpTrackMoveAxis_NoRegister()
	{
		return UInterpTrackMoveAxis::StaticClass();
	}
	UClass* Z_Construct_UClass_UInterpTrackMoveAxis()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UInterpTrackFloatBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UInterpTrackMoveAxis::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_LookupTrack = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LookupTrack"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LookupTrack, UInterpTrackMoveAxis), 0x0000000000000000, Z_Construct_UScriptStruct_FInterpLookupTrack());
				UProperty* NewProp_MoveAxis = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MoveAxis"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(MoveAxis, UInterpTrackMoveAxis), 0x0000000000000000, Z_Construct_UEnum_Engine_EInterpMoveAxis());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Move Axis Track"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Matinee/InterpTrackMoveAxis.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackMoveAxis.h"));
				MetaData->SetValue(NewProp_LookupTrack, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackMoveAxis.h"));
				MetaData->SetValue(NewProp_LookupTrack, TEXT("ToolTip"), TEXT("Lookup track to use when looking at different groups for transform information"));
				MetaData->SetValue(NewProp_MoveAxis, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackMoveAxis.h"));
				MetaData->SetValue(NewProp_MoveAxis, TEXT("ToolTip"), TEXT("The axis which this track will use when transforming an actor"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UInterpTrackMoveAxis(Z_Construct_UClass_UInterpTrackMoveAxis, TEXT("UInterpTrackMoveAxis"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UInterpTrackMoveAxis);
	UClass* Z_Construct_UClass_UInterpTrackSlomo_NoRegister()
	{
		return UInterpTrackSlomo::StaticClass();
	}
	UClass* Z_Construct_UClass_UInterpTrackSlomo()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UInterpTrackFloatBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UInterpTrackSlomo::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Slomo Track"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Matinee/InterpTrackSlomo.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackSlomo.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UInterpTrackSlomo(Z_Construct_UClass_UInterpTrackSlomo, TEXT("UInterpTrackSlomo"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UInterpTrackSlomo);
	UClass* Z_Construct_UClass_UInterpTrackLinearColorBase_NoRegister()
	{
		return UInterpTrackLinearColorBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UInterpTrackLinearColorBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UInterpTrack();
			Z_Construct_UPackage_Engine();
			OuterClass = UInterpTrackLinearColorBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082081;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_CurveTension = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CurveTension"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(CurveTension, UInterpTrackLinearColorBase), 0x0000000000000001);
				UProperty* NewProp_LinearColorTrack = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LinearColorTrack"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LinearColorTrack, UInterpTrackLinearColorBase), 0x0000000000000000, Z_Construct_UScriptStruct_FInterpCurveLinearColor());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Matinee/InterpTrackLinearColorBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackLinearColorBase.h"));
				MetaData->SetValue(NewProp_CurveTension, TEXT("Category"), TEXT("InterpTrackLinearColorBase"));
				MetaData->SetValue(NewProp_CurveTension, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackLinearColorBase.h"));
				MetaData->SetValue(NewProp_CurveTension, TEXT("ToolTip"), TEXT("Tension of curve, used for keypoints using automatic tangents."));
				MetaData->SetValue(NewProp_LinearColorTrack, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackLinearColorBase.h"));
				MetaData->SetValue(NewProp_LinearColorTrack, TEXT("ToolTip"), TEXT("Actually track data containing keyframes of a FVector as it varies over time."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UInterpTrackLinearColorBase(Z_Construct_UClass_UInterpTrackLinearColorBase, TEXT("UInterpTrackLinearColorBase"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UInterpTrackLinearColorBase);
	UClass* Z_Construct_UClass_UInterpTrackLinearColorProp_NoRegister()
	{
		return UInterpTrackLinearColorProp::StaticClass();
	}
	UClass* Z_Construct_UClass_UInterpTrackLinearColorProp()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UInterpTrackLinearColorBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UInterpTrackLinearColorProp::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_PropertyName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PropertyName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(PropertyName, UInterpTrackLinearColorProp), 0x0000000000020001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("LinearColor Property Track"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Matinee/InterpTrackLinearColorProp.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackLinearColorProp.h"));
				MetaData->SetValue(NewProp_PropertyName, TEXT("Category"), TEXT("InterpTrackLinearColorProp"));
				MetaData->SetValue(NewProp_PropertyName, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackLinearColorProp.h"));
				MetaData->SetValue(NewProp_PropertyName, TEXT("ToolTip"), TEXT("Name of property in Group  AActor  which this track mill modify over time."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UInterpTrackLinearColorProp(Z_Construct_UClass_UInterpTrackLinearColorProp, TEXT("UInterpTrackLinearColorProp"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UInterpTrackLinearColorProp);
	UScriptStruct* Z_Construct_UScriptStruct_FParticleReplayTrackKey()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FParticleReplayTrackKey_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("ParticleReplayTrackKey"), sizeof(FParticleReplayTrackKey), Get_Z_Construct_UScriptStruct_FParticleReplayTrackKey_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ParticleReplayTrackKey"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FParticleReplayTrackKey>, EStructFlags(0x00000001));
			UProperty* NewProp_ClipIDNumber = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ClipIDNumber"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ClipIDNumber, FParticleReplayTrackKey), 0x0000000000000005);
			UProperty* NewProp_Duration = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Duration"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Duration, FParticleReplayTrackKey), 0x0000000000000005);
			UProperty* NewProp_Time = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Time"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Time, FParticleReplayTrackKey), 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackParticleReplay.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Data for a single key in this track"));
			MetaData->SetValue(NewProp_ClipIDNumber, TEXT("Category"), TEXT("ParticleReplayTrackKey"));
			MetaData->SetValue(NewProp_ClipIDNumber, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackParticleReplay.h"));
			MetaData->SetValue(NewProp_ClipIDNumber, TEXT("ToolTip"), TEXT("Replay clip ID number that identifies the clip we should capture to or playback from"));
			MetaData->SetValue(NewProp_Duration, TEXT("Category"), TEXT("ParticleReplayTrackKey"));
			MetaData->SetValue(NewProp_Duration, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackParticleReplay.h"));
			MetaData->SetValue(NewProp_Duration, TEXT("ToolTip"), TEXT("Time length this clip should be captured/played for"));
			MetaData->SetValue(NewProp_Time, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackParticleReplay.h"));
			MetaData->SetValue(NewProp_Time, TEXT("ToolTip"), TEXT("Position along timeline"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FParticleReplayTrackKey_CRC() { return 3300492418U; }
	UClass* Z_Construct_UClass_UInterpTrackParticleReplay_NoRegister()
	{
		return UInterpTrackParticleReplay::StaticClass();
	}
	UClass* Z_Construct_UClass_UInterpTrackParticleReplay()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UInterpTrack();
			Z_Construct_UPackage_Engine();
			OuterClass = UInterpTrackParticleReplay::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_FixedTimeStep = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FixedTimeStep"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(FixedTimeStep, UInterpTrackParticleReplay), 0x0000000800002000);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsCapturingReplay, UInterpTrackParticleReplay, uint8);
				UProperty* NewProp_bIsCapturingReplay = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsCapturingReplay"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsCapturingReplay, UInterpTrackParticleReplay), 0x0000000800002000, CPP_BOOL_PROPERTY_BITMASK(bIsCapturingReplay, UInterpTrackParticleReplay), sizeof(uint8), false);
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_TrackKeys = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TrackKeys"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(TrackKeys, UInterpTrackParticleReplay), 0x0000000000000000);
				UProperty* NewProp_TrackKeys_Inner = new(EC_InternalUseOnlyConstructor, NewProp_TrackKeys, TEXT("TrackKeys"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FParticleReplayTrackKey());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Particle Replay Track"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Matinee/InterpTrackParticleReplay.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackParticleReplay.h"));
				MetaData->SetValue(NewProp_FixedTimeStep, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackParticleReplay.h"));
				MetaData->SetValue(NewProp_FixedTimeStep, TEXT("ToolTip"), TEXT("Current replay fixed time quantum between frames (one over frame rate)"));
				MetaData->SetValue(NewProp_bIsCapturingReplay, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackParticleReplay.h"));
				MetaData->SetValue(NewProp_bIsCapturingReplay, TEXT("ToolTip"), TEXT("True in the editor if track should be used to capture replay frames instead of play them back"));
				MetaData->SetValue(NewProp_TrackKeys, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackParticleReplay.h"));
				MetaData->SetValue(NewProp_TrackKeys, TEXT("ToolTip"), TEXT("Array of keys"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UInterpTrackParticleReplay(Z_Construct_UClass_UInterpTrackParticleReplay, TEXT("UInterpTrackParticleReplay"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UInterpTrackParticleReplay);
	UEnum* Z_Construct_UEnum_Engine_ETrackToggleAction()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_ETrackToggleAction_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ETrackToggleAction"), 0, Get_Z_Construct_UEnum_Engine_ETrackToggleAction_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ETrackToggleAction"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ETTA_Off")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ETTA_On")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ETTA_Toggle")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ETTA_Trigger")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ETTA_MAX")), 4));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackToggle.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Enumeration indicating toggle action"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_ETrackToggleAction_CRC() { return 2127748723U; }
	UScriptStruct* Z_Construct_UScriptStruct_FToggleTrackKey()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FToggleTrackKey_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("ToggleTrackKey"), sizeof(FToggleTrackKey), Get_Z_Construct_UScriptStruct_FToggleTrackKey_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ToggleTrackKey"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FToggleTrackKey>, EStructFlags(0x00000001));
			UProperty* NewProp_ToggleAction = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ToggleAction"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(ToggleAction, FToggleTrackKey), 0x0000000000000001, Z_Construct_UEnum_Engine_ETrackToggleAction());
			UProperty* NewProp_Time = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Time"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Time, FToggleTrackKey), 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackToggle.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Information for one toggle in the track."));
			MetaData->SetValue(NewProp_ToggleAction, TEXT("Category"), TEXT("ToggleTrackKey"));
			MetaData->SetValue(NewProp_ToggleAction, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackToggle.h"));
			MetaData->SetValue(NewProp_Time, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackToggle.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FToggleTrackKey_CRC() { return 4198130319U; }
	UClass* Z_Construct_UClass_UInterpTrackToggle_NoRegister()
	{
		return UInterpTrackToggle::StaticClass();
	}
	UClass* Z_Construct_UClass_UInterpTrackToggle()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UInterpTrack();
			Z_Construct_UPackage_Engine();
			OuterClass = UInterpTrackToggle::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bFireEventsWhenJumpingForwards, UInterpTrackToggle, uint8);
				UProperty* NewProp_bFireEventsWhenJumpingForwards = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bFireEventsWhenJumpingForwards"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bFireEventsWhenJumpingForwards, UInterpTrackToggle), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bFireEventsWhenJumpingForwards, UInterpTrackToggle), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bFireEventsWhenBackwards, UInterpTrackToggle, uint8);
				UProperty* NewProp_bFireEventsWhenBackwards = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bFireEventsWhenBackwards"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bFireEventsWhenBackwards, UInterpTrackToggle), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bFireEventsWhenBackwards, UInterpTrackToggle), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bFireEventsWhenForwards, UInterpTrackToggle, uint8);
				UProperty* NewProp_bFireEventsWhenForwards = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bFireEventsWhenForwards"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bFireEventsWhenForwards, UInterpTrackToggle), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bFireEventsWhenForwards, UInterpTrackToggle), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bActivateWithJustAttachedFlag, UInterpTrackToggle, uint8);
				UProperty* NewProp_bActivateWithJustAttachedFlag = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bActivateWithJustAttachedFlag"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bActivateWithJustAttachedFlag, UInterpTrackToggle), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bActivateWithJustAttachedFlag, UInterpTrackToggle), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bActivateSystemEachUpdate, UInterpTrackToggle, uint8);
				UProperty* NewProp_bActivateSystemEachUpdate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bActivateSystemEachUpdate"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bActivateSystemEachUpdate, UInterpTrackToggle), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bActivateSystemEachUpdate, UInterpTrackToggle), sizeof(uint8), false);
				UProperty* NewProp_ToggleTrack = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ToggleTrack"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ToggleTrack, UInterpTrackToggle), 0x0000000000000000);
				UProperty* NewProp_ToggleTrack_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ToggleTrack, TEXT("ToggleTrack"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FToggleTrackKey());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Toggle Track"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Matinee/InterpTrackToggle.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackToggle.h"));
				MetaData->SetValue(NewProp_bFireEventsWhenJumpingForwards, TEXT("Category"), TEXT("InterpTrackToggle"));
				MetaData->SetValue(NewProp_bFireEventsWhenJumpingForwards, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackToggle.h"));
				MetaData->SetValue(NewProp_bFireEventsWhenJumpingForwards, TEXT("ToolTip"), TEXT("If true, events on this track are fired even when jumping forwads through a sequence - for example, skipping a cinematic."));
				MetaData->SetValue(NewProp_bFireEventsWhenBackwards, TEXT("Category"), TEXT("InterpTrackToggle"));
				MetaData->SetValue(NewProp_bFireEventsWhenBackwards, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackToggle.h"));
				MetaData->SetValue(NewProp_bFireEventsWhenBackwards, TEXT("ToolTip"), TEXT("If events should be fired when passed playing the sequence backwards."));
				MetaData->SetValue(NewProp_bFireEventsWhenForwards, TEXT("Category"), TEXT("InterpTrackToggle"));
				MetaData->SetValue(NewProp_bFireEventsWhenForwards, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackToggle.h"));
				MetaData->SetValue(NewProp_bFireEventsWhenForwards, TEXT("ToolTip"), TEXT("If events should be fired when passed playing the sequence forwards."));
				MetaData->SetValue(NewProp_bActivateWithJustAttachedFlag, TEXT("Category"), TEXT("InterpTrackToggle"));
				MetaData->SetValue(NewProp_bActivateWithJustAttachedFlag, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackToggle.h"));
				MetaData->SetValue(NewProp_bActivateWithJustAttachedFlag, TEXT("ToolTip"), TEXT("If true, the track will activate the system w/ the 'Just Attached' flag."));
				MetaData->SetValue(NewProp_bActivateSystemEachUpdate, TEXT("Category"), TEXT("InterpTrackToggle"));
				MetaData->SetValue(NewProp_bActivateSystemEachUpdate, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackToggle.h"));
				MetaData->SetValue(NewProp_bActivateSystemEachUpdate, TEXT("ToolTip"), TEXT("If true, the track will call ActivateSystem on the emitter each update (the old 'incorrect' behavior).\nIf false (the default), the System will only be activated if it was previously inactive."));
				MetaData->SetValue(NewProp_ToggleTrack, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackToggle.h"));
				MetaData->SetValue(NewProp_ToggleTrack, TEXT("ToolTip"), TEXT("Array of events to fire off."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UInterpTrackToggle(Z_Construct_UClass_UInterpTrackToggle, TEXT("UInterpTrackToggle"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UInterpTrackToggle);
	UClass* Z_Construct_UClass_UInterpTrackVectorBase_NoRegister()
	{
		return UInterpTrackVectorBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UInterpTrackVectorBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UInterpTrack();
			Z_Construct_UPackage_Engine();
			OuterClass = UInterpTrackVectorBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20102081;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_CurveTension = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CurveTension"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(CurveTension, UInterpTrackVectorBase), 0x0000000000000001);
				UProperty* NewProp_VectorTrack = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VectorTrack"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(VectorTrack, UInterpTrackVectorBase), 0x0000000000000000, Z_Construct_UScriptStruct_FInterpCurveVector());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Matinee/InterpTrackVectorBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackVectorBase.h"));
				MetaData->SetValue(NewProp_CurveTension, TEXT("Category"), TEXT("InterpTrackVectorBase"));
				MetaData->SetValue(NewProp_CurveTension, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackVectorBase.h"));
				MetaData->SetValue(NewProp_CurveTension, TEXT("ToolTip"), TEXT("Tension of curve, used for keypoints using automatic tangents."));
				MetaData->SetValue(NewProp_VectorTrack, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackVectorBase.h"));
				MetaData->SetValue(NewProp_VectorTrack, TEXT("ToolTip"), TEXT("Actually track data containing keyframes of a FVector as it varies over time."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UInterpTrackVectorBase(Z_Construct_UClass_UInterpTrackVectorBase, TEXT("UInterpTrackVectorBase"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UInterpTrackVectorBase);
	UClass* Z_Construct_UClass_UInterpTrackAudioMaster_NoRegister()
	{
		return UInterpTrackAudioMaster::StaticClass();
	}
	UClass* Z_Construct_UClass_UInterpTrackAudioMaster()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UInterpTrackVectorBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UInterpTrackAudioMaster::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Audio Master Track"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Matinee/InterpTrackAudioMaster.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackAudioMaster.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UInterpTrackAudioMaster(Z_Construct_UClass_UInterpTrackAudioMaster, TEXT("UInterpTrackAudioMaster"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UInterpTrackAudioMaster);
	UClass* Z_Construct_UClass_UInterpTrackColorProp_NoRegister()
	{
		return UInterpTrackColorProp::StaticClass();
	}
	UClass* Z_Construct_UClass_UInterpTrackColorProp()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UInterpTrackVectorBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UInterpTrackColorProp::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_PropertyName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PropertyName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(PropertyName, UInterpTrackColorProp), 0x0000000000020001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Color Property Track"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Matinee/InterpTrackColorProp.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackColorProp.h"));
				MetaData->SetValue(NewProp_PropertyName, TEXT("Category"), TEXT("InterpTrackColorProp"));
				MetaData->SetValue(NewProp_PropertyName, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackColorProp.h"));
				MetaData->SetValue(NewProp_PropertyName, TEXT("ToolTip"), TEXT("Name of property in Group  AActor  which this track mill modify over time."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UInterpTrackColorProp(Z_Construct_UClass_UInterpTrackColorProp, TEXT("UInterpTrackColorProp"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UInterpTrackColorProp);
	UClass* Z_Construct_UClass_UInterpTrackColorScale_NoRegister()
	{
		return UInterpTrackColorScale::StaticClass();
	}
	UClass* Z_Construct_UClass_UInterpTrackColorScale()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UInterpTrackVectorBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UInterpTrackColorScale::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Color Scale Track"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Matinee/InterpTrackColorScale.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackColorScale.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UInterpTrackColorScale(Z_Construct_UClass_UInterpTrackColorScale, TEXT("UInterpTrackColorScale"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UInterpTrackColorScale);
	UScriptStruct* Z_Construct_UScriptStruct_FSoundTrackKey()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FSoundTrackKey_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("SoundTrackKey"), sizeof(FSoundTrackKey), Get_Z_Construct_UScriptStruct_FSoundTrackKey_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SoundTrackKey"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FSoundTrackKey>, EStructFlags(0x00000001));
			UProperty* NewProp_Sound = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Sound"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Sound, FSoundTrackKey), 0x0000000000000001, Z_Construct_UClass_USoundBase_NoRegister());
			UProperty* NewProp_Pitch = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Pitch"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Pitch, FSoundTrackKey), 0x0000000000000000);
			UProperty* NewProp_Volume = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Volume"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Volume, FSoundTrackKey), 0x0000000000000000);
			UProperty* NewProp_Time = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Time"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Time, FSoundTrackKey), 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackSound.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Information for one sound in the track."));
			MetaData->SetValue(NewProp_Sound, TEXT("Category"), TEXT("SoundTrackKey"));
			MetaData->SetValue(NewProp_Sound, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackSound.h"));
			MetaData->SetValue(NewProp_Pitch, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackSound.h"));
			MetaData->SetValue(NewProp_Volume, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackSound.h"));
			MetaData->SetValue(NewProp_Time, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackSound.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FSoundTrackKey_CRC() { return 1527142489U; }
	UClass* Z_Construct_UClass_UInterpTrackSound_NoRegister()
	{
		return UInterpTrackSound::StaticClass();
	}
	UClass* Z_Construct_UClass_UInterpTrackSound()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UInterpTrackVectorBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UInterpTrackSound::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAttach, UInterpTrackSound, uint8);
				UProperty* NewProp_bAttach = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAttach"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAttach, UInterpTrackSound), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bAttach, UInterpTrackSound), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTreatAsDialogue, UInterpTrackSound, uint8);
				UProperty* NewProp_bTreatAsDialogue = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bTreatAsDialogue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTreatAsDialogue, UInterpTrackSound), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bTreatAsDialogue, UInterpTrackSound), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSuppressSubtitles, UInterpTrackSound, uint8);
				UProperty* NewProp_bSuppressSubtitles = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bSuppressSubtitles"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSuppressSubtitles, UInterpTrackSound), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bSuppressSubtitles, UInterpTrackSound), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bContinueSoundOnMatineeEnd, UInterpTrackSound, uint8);
				UProperty* NewProp_bContinueSoundOnMatineeEnd = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bContinueSoundOnMatineeEnd"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bContinueSoundOnMatineeEnd, UInterpTrackSound), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bContinueSoundOnMatineeEnd, UInterpTrackSound), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bPlayOnReverse, UInterpTrackSound, uint8);
				UProperty* NewProp_bPlayOnReverse = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bPlayOnReverse"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bPlayOnReverse, UInterpTrackSound), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bPlayOnReverse, UInterpTrackSound), sizeof(uint8), false);
				UProperty* NewProp_Sounds = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Sounds"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Sounds, UInterpTrackSound), 0x0000000000000000);
				UProperty* NewProp_Sounds_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Sounds, TEXT("Sounds"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FSoundTrackKey());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Sound Track"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Matinee/InterpTrackSound.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackSound.h"));
				MetaData->SetValue(NewProp_bAttach, TEXT("Category"), TEXT("InterpTrackSound"));
				MetaData->SetValue(NewProp_bAttach, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackSound.h"));
				MetaData->SetValue(NewProp_bTreatAsDialogue, TEXT("Category"), TEXT("InterpTrackSound"));
				MetaData->SetValue(NewProp_bTreatAsDialogue, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackSound.h"));
				MetaData->SetValue(NewProp_bTreatAsDialogue, TEXT("ToolTip"), TEXT("If true and track is controlling a pawn, makes the pawn \"speak\" the given audio."));
				MetaData->SetValue(NewProp_bSuppressSubtitles, TEXT("Category"), TEXT("InterpTrackSound"));
				MetaData->SetValue(NewProp_bSuppressSubtitles, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackSound.h"));
				MetaData->SetValue(NewProp_bSuppressSubtitles, TEXT("ToolTip"), TEXT("If true, don't show subtitles for sounds played by this track."));
				MetaData->SetValue(NewProp_bContinueSoundOnMatineeEnd, TEXT("Category"), TEXT("InterpTrackSound"));
				MetaData->SetValue(NewProp_bContinueSoundOnMatineeEnd, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackSound.h"));
				MetaData->SetValue(NewProp_bContinueSoundOnMatineeEnd, TEXT("ToolTip"), TEXT("If true, sounds on this track will not be forced to finish when the matinee sequence finishes."));
				MetaData->SetValue(NewProp_bPlayOnReverse, TEXT("Category"), TEXT("InterpTrackSound"));
				MetaData->SetValue(NewProp_bPlayOnReverse, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackSound.h"));
				MetaData->SetValue(NewProp_bPlayOnReverse, TEXT("ToolTip"), TEXT("if set, sound plays only when playing the matinee in reverse instead of when the matinee plays forward"));
				MetaData->SetValue(NewProp_Sounds, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackSound.h"));
				MetaData->SetValue(NewProp_Sounds, TEXT("ToolTip"), TEXT("Array of sounds to play at specific times."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UInterpTrackSound(Z_Construct_UClass_UInterpTrackSound, TEXT("UInterpTrackSound"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UInterpTrackSound);
	UClass* Z_Construct_UClass_UInterpTrackVectorMaterialParam_NoRegister()
	{
		return UInterpTrackVectorMaterialParam::StaticClass();
	}
	UClass* Z_Construct_UClass_UInterpTrackVectorMaterialParam()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UInterpTrackVectorBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UInterpTrackVectorMaterialParam::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ParamName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ParamName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(ParamName, UInterpTrackVectorMaterialParam), 0x0000000000000001);
				UProperty* NewProp_TargetMaterials = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TargetMaterials"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(TargetMaterials, UInterpTrackVectorMaterialParam), 0x0000000000000001);
				UProperty* NewProp_TargetMaterials_Inner = new(EC_InternalUseOnlyConstructor, NewProp_TargetMaterials, TEXT("TargetMaterials"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UMaterialInterface_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Vector Material Parameter Track"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Matinee/InterpTrackVectorMaterialParam.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackVectorMaterialParam.h"));
				MetaData->SetValue(NewProp_ParamName, TEXT("Category"), TEXT("InterpTrackVectorMaterialParam"));
				MetaData->SetValue(NewProp_ParamName, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackVectorMaterialParam.h"));
				MetaData->SetValue(NewProp_ParamName, TEXT("ToolTip"), TEXT("Name of parameter in the MaterialInstance which this track will modify over time."));
				MetaData->SetValue(NewProp_TargetMaterials, TEXT("Category"), TEXT("InterpTrackVectorMaterialParam"));
				MetaData->SetValue(NewProp_TargetMaterials, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackVectorMaterialParam.h"));
				MetaData->SetValue(NewProp_TargetMaterials, TEXT("ToolTip"), TEXT("Materials whose parameters we want to change and the references to those materials."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UInterpTrackVectorMaterialParam(Z_Construct_UClass_UInterpTrackVectorMaterialParam, TEXT("UInterpTrackVectorMaterialParam"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UInterpTrackVectorMaterialParam);
	UClass* Z_Construct_UClass_UInterpTrackVectorProp_NoRegister()
	{
		return UInterpTrackVectorProp::StaticClass();
	}
	UClass* Z_Construct_UClass_UInterpTrackVectorProp()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UInterpTrackVectorBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UInterpTrackVectorProp::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_PropertyName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PropertyName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(PropertyName, UInterpTrackVectorProp), 0x0000000000020001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Vector Property Track"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Matinee/InterpTrackVectorProp.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackVectorProp.h"));
				MetaData->SetValue(NewProp_PropertyName, TEXT("Category"), TEXT("InterpTrackVectorProp"));
				MetaData->SetValue(NewProp_PropertyName, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackVectorProp.h"));
				MetaData->SetValue(NewProp_PropertyName, TEXT("ToolTip"), TEXT("Name of property in Group  AActor  which this track mill modify over time."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UInterpTrackVectorProp(Z_Construct_UClass_UInterpTrackVectorProp, TEXT("UInterpTrackVectorProp"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UInterpTrackVectorProp);
	UEnum* Z_Construct_UEnum_Engine_EVisibilityTrackCondition()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EVisibilityTrackCondition_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EVisibilityTrackCondition"), 0, Get_Z_Construct_UEnum_Engine_EVisibilityTrackCondition_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EVisibilityTrackCondition"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EVTC_Always")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EVTC_GoreEnabled")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EVTC_GoreDisabled")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EVTC_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("EVTC_Always.ToolTip"), TEXT("Always play this event"));
			MetaData->SetValue(ReturnEnum, TEXT("EVTC_GoreDisabled.ToolTip"), TEXT("Only play this event when extreme content (gore) is disabled"));
			MetaData->SetValue(ReturnEnum, TEXT("EVTC_GoreEnabled.ToolTip"), TEXT("Only play this event when extreme content (gore) is enabled"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackVisibility.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Required condition for firing this event"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EVisibilityTrackCondition_CRC() { return 2670102861U; }
	UEnum* Z_Construct_UEnum_Engine_EVisibilityTrackAction()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EVisibilityTrackAction_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EVisibilityTrackAction"), 0, Get_Z_Construct_UEnum_Engine_EVisibilityTrackAction_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EVisibilityTrackAction"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EVTA_Hide")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EVTA_Show")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EVTA_Toggle")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EVTA_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("EVTA_Hide.ToolTip"), TEXT("Hides the object"));
			MetaData->SetValue(ReturnEnum, TEXT("EVTA_Show.ToolTip"), TEXT("Shows the object"));
			MetaData->SetValue(ReturnEnum, TEXT("EVTA_Toggle.ToolTip"), TEXT("Toggles visibility of the object"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackVisibility.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Visibility track actions"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EVisibilityTrackAction_CRC() { return 885603768U; }
	UScriptStruct* Z_Construct_UScriptStruct_FVisibilityTrackKey()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FVisibilityTrackKey_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("VisibilityTrackKey"), sizeof(FVisibilityTrackKey), Get_Z_Construct_UScriptStruct_FVisibilityTrackKey_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VisibilityTrackKey"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FVisibilityTrackKey>, EStructFlags(0x00000001));
			UProperty* NewProp_ActiveCondition = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ActiveCondition"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(ActiveCondition, FVisibilityTrackKey), 0x0000000000000000, Z_Construct_UEnum_Engine_EVisibilityTrackCondition());
			UProperty* NewProp_Action = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Action"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(Action, FVisibilityTrackKey), 0x0000000000000005, Z_Construct_UEnum_Engine_EVisibilityTrackAction());
			UProperty* NewProp_Time = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Time"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Time, FVisibilityTrackKey), 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackVisibility.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Information for one toggle in the track."));
			MetaData->SetValue(NewProp_ActiveCondition, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackVisibility.h"));
			MetaData->SetValue(NewProp_ActiveCondition, TEXT("ToolTip"), TEXT("Condition that must be satisfied for this key event to fire"));
			MetaData->SetValue(NewProp_Action, TEXT("Category"), TEXT("VisibilityTrackKey"));
			MetaData->SetValue(NewProp_Action, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackVisibility.h"));
			MetaData->SetValue(NewProp_Time, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackVisibility.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FVisibilityTrackKey_CRC() { return 1743788308U; }
	UClass* Z_Construct_UClass_UInterpTrackVisibility_NoRegister()
	{
		return UInterpTrackVisibility::StaticClass();
	}
	UClass* Z_Construct_UClass_UInterpTrackVisibility()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UInterpTrack();
			Z_Construct_UPackage_Engine();
			OuterClass = UInterpTrackVisibility::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bFireEventsWhenJumpingForwards, UInterpTrackVisibility, uint8);
				UProperty* NewProp_bFireEventsWhenJumpingForwards = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bFireEventsWhenJumpingForwards"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bFireEventsWhenJumpingForwards, UInterpTrackVisibility), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bFireEventsWhenJumpingForwards, UInterpTrackVisibility), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bFireEventsWhenBackwards, UInterpTrackVisibility, uint8);
				UProperty* NewProp_bFireEventsWhenBackwards = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bFireEventsWhenBackwards"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bFireEventsWhenBackwards, UInterpTrackVisibility), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bFireEventsWhenBackwards, UInterpTrackVisibility), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bFireEventsWhenForwards, UInterpTrackVisibility, uint8);
				UProperty* NewProp_bFireEventsWhenForwards = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bFireEventsWhenForwards"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bFireEventsWhenForwards, UInterpTrackVisibility), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bFireEventsWhenForwards, UInterpTrackVisibility), sizeof(uint8), false);
				UProperty* NewProp_VisibilityTrack = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VisibilityTrack"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(VisibilityTrack, UInterpTrackVisibility), 0x0000000000000000);
				UProperty* NewProp_VisibilityTrack_Inner = new(EC_InternalUseOnlyConstructor, NewProp_VisibilityTrack, TEXT("VisibilityTrack"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FVisibilityTrackKey());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Visibility Track"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Matinee/InterpTrackVisibility.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackVisibility.h"));
				MetaData->SetValue(NewProp_bFireEventsWhenJumpingForwards, TEXT("Category"), TEXT("InterpTrackVisibility"));
				MetaData->SetValue(NewProp_bFireEventsWhenJumpingForwards, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackVisibility.h"));
				MetaData->SetValue(NewProp_bFireEventsWhenJumpingForwards, TEXT("ToolTip"), TEXT("If true, events on this track are fired even when jumping forwads through a sequence - for example, skipping a cinematic."));
				MetaData->SetValue(NewProp_bFireEventsWhenBackwards, TEXT("Category"), TEXT("InterpTrackVisibility"));
				MetaData->SetValue(NewProp_bFireEventsWhenBackwards, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackVisibility.h"));
				MetaData->SetValue(NewProp_bFireEventsWhenBackwards, TEXT("ToolTip"), TEXT("If events should be fired when passed playing the sequence backwards."));
				MetaData->SetValue(NewProp_bFireEventsWhenForwards, TEXT("Category"), TEXT("InterpTrackVisibility"));
				MetaData->SetValue(NewProp_bFireEventsWhenForwards, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackVisibility.h"));
				MetaData->SetValue(NewProp_bFireEventsWhenForwards, TEXT("ToolTip"), TEXT("If events should be fired when passed playing the sequence forwards."));
				MetaData->SetValue(NewProp_VisibilityTrack, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackVisibility.h"));
				MetaData->SetValue(NewProp_VisibilityTrack, TEXT("ToolTip"), TEXT("Array of events to fire off."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UInterpTrackVisibility(Z_Construct_UClass_UInterpTrackVisibility, TEXT("UInterpTrackVisibility"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UInterpTrackVisibility);
	UClass* Z_Construct_UClass_UInterpTrackInst_NoRegister()
	{
		return UInterpTrackInst::StaticClass();
	}
	UClass* Z_Construct_UClass_UInterpTrackInst()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UInterpTrackInst::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Matinee/InterpTrackInst.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackInst.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UInterpTrackInst(Z_Construct_UClass_UInterpTrackInst, TEXT("UInterpTrackInst"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UInterpTrackInst);
	UClass* Z_Construct_UClass_UInterpTrackInstAnimControl_NoRegister()
	{
		return UInterpTrackInstAnimControl::StaticClass();
	}
	UClass* Z_Construct_UClass_UInterpTrackInstAnimControl()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UInterpTrackInst();
			Z_Construct_UPackage_Engine();
			OuterClass = UInterpTrackInstAnimControl::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_InitRotation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InitRotation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InitRotation, UInterpTrackInstAnimControl), 0x0000000800002000, Z_Construct_UScriptStruct_FRotator());
				UProperty* NewProp_InitPosition = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InitPosition"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InitPosition, UInterpTrackInstAnimControl), 0x0000000800002000, Z_Construct_UScriptStruct_FVector());
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_LastUpdatePosition = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LastUpdatePosition"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(LastUpdatePosition, UInterpTrackInstAnimControl), 0x0000000000002000);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Matinee/InterpTrackInstAnimControl.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackInstAnimControl.h"));
				MetaData->SetValue(NewProp_InitRotation, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackInstAnimControl.h"));
				MetaData->SetValue(NewProp_InitPosition, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackInstAnimControl.h"));
				MetaData->SetValue(NewProp_LastUpdatePosition, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackInstAnimControl.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UInterpTrackInstAnimControl(Z_Construct_UClass_UInterpTrackInstAnimControl, TEXT("UInterpTrackInstAnimControl"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UInterpTrackInstAnimControl);
	UClass* Z_Construct_UClass_UInterpTrackInstAudioMaster_NoRegister()
	{
		return UInterpTrackInstAudioMaster::StaticClass();
	}
	UClass* Z_Construct_UClass_UInterpTrackInstAudioMaster()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UInterpTrackInst();
			Z_Construct_UPackage_Engine();
			OuterClass = UInterpTrackInstAudioMaster::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Matinee/InterpTrackInstAudioMaster.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackInstAudioMaster.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UInterpTrackInstAudioMaster(Z_Construct_UClass_UInterpTrackInstAudioMaster, TEXT("UInterpTrackInstAudioMaster"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UInterpTrackInstAudioMaster);
	UClass* Z_Construct_UClass_UInterpTrackInstColorScale_NoRegister()
	{
		return UInterpTrackInstColorScale::StaticClass();
	}
	UClass* Z_Construct_UClass_UInterpTrackInstColorScale()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UInterpTrackInst();
			Z_Construct_UPackage_Engine();
			OuterClass = UInterpTrackInstColorScale::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Matinee/InterpTrackInstColorScale.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackInstColorScale.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UInterpTrackInstColorScale(Z_Construct_UClass_UInterpTrackInstColorScale, TEXT("UInterpTrackInstColorScale"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UInterpTrackInstColorScale);
	UClass* Z_Construct_UClass_UInterpTrackInstDirector_NoRegister()
	{
		return UInterpTrackInstDirector::StaticClass();
	}
	UClass* Z_Construct_UClass_UInterpTrackInstDirector()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UInterpTrackInst();
			Z_Construct_UPackage_Engine();
			OuterClass = UInterpTrackInstDirector::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_OldViewTarget = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OldViewTarget"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(OldViewTarget, UInterpTrackInstDirector), 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Matinee/InterpTrackInstDirector.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackInstDirector.h"));
				MetaData->SetValue(NewProp_OldViewTarget, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackInstDirector.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UInterpTrackInstDirector(Z_Construct_UClass_UInterpTrackInstDirector, TEXT("UInterpTrackInstDirector"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UInterpTrackInstDirector);
	UClass* Z_Construct_UClass_UInterpTrackInstEvent_NoRegister()
	{
		return UInterpTrackInstEvent::StaticClass();
	}
	UClass* Z_Construct_UClass_UInterpTrackInstEvent()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UInterpTrackInst();
			Z_Construct_UPackage_Engine();
			OuterClass = UInterpTrackInstEvent::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_LastUpdatePosition = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LastUpdatePosition"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(LastUpdatePosition, UInterpTrackInstEvent), 0x0000000000000000);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Matinee/InterpTrackInstEvent.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackInstEvent.h"));
				MetaData->SetValue(NewProp_LastUpdatePosition, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackInstEvent.h"));
				MetaData->SetValue(NewProp_LastUpdatePosition, TEXT("ToolTip"), TEXT("Position we were in last time we evaluated Events.\nDuring UpdateTrack, events between this time and the current time will be fired."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UInterpTrackInstEvent(Z_Construct_UClass_UInterpTrackInstEvent, TEXT("UInterpTrackInstEvent"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UInterpTrackInstEvent);
	UClass* Z_Construct_UClass_UInterpTrackInstFade_NoRegister()
	{
		return UInterpTrackInstFade::StaticClass();
	}
	UClass* Z_Construct_UClass_UInterpTrackInstFade()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UInterpTrackInst();
			Z_Construct_UPackage_Engine();
			OuterClass = UInterpTrackInstFade::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Matinee/InterpTrackInstFade.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackInstFade.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UInterpTrackInstFade(Z_Construct_UClass_UInterpTrackInstFade, TEXT("UInterpTrackInstFade"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UInterpTrackInstFade);
	UClass* Z_Construct_UClass_UInterpTrackInstFloatAnimBPParam_NoRegister()
	{
		return UInterpTrackInstFloatAnimBPParam::StaticClass();
	}
	UClass* Z_Construct_UClass_UInterpTrackInstFloatAnimBPParam()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UInterpTrackInst();
			Z_Construct_UPackage_Engine();
			OuterClass = UInterpTrackInstFloatAnimBPParam::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ResetFloat = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ResetFloat"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ResetFloat, UInterpTrackInstFloatAnimBPParam), 0x0000000000002000);
				UProperty* NewProp_AnimScriptInstance = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AnimScriptInstance"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(AnimScriptInstance, UInterpTrackInstFloatAnimBPParam), 0x0000000000002000, Z_Construct_UClass_UAnimInstance_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Matinee/InterpTrackInstFloatAnimBPParam.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackInstFloatAnimBPParam.h"));
				MetaData->SetValue(NewProp_ResetFloat, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackInstFloatAnimBPParam.h"));
				MetaData->SetValue(NewProp_ResetFloat, TEXT("ToolTip"), TEXT("Saved values for restoring state when exiting Matinee."));
				MetaData->SetValue(NewProp_AnimScriptInstance, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackInstFloatAnimBPParam.h"));
				MetaData->SetValue(NewProp_AnimScriptInstance, TEXT("ToolTip"), TEXT("MIDs we're using to set the desired parameter."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UInterpTrackInstFloatAnimBPParam(Z_Construct_UClass_UInterpTrackInstFloatAnimBPParam, TEXT("UInterpTrackInstFloatAnimBPParam"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UInterpTrackInstFloatAnimBPParam);
	UClass* Z_Construct_UClass_UInterpTrackInstFloatMaterialParam_NoRegister()
	{
		return UInterpTrackInstFloatMaterialParam::StaticClass();
	}
	UClass* Z_Construct_UClass_UInterpTrackInstFloatMaterialParam()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UInterpTrackInst();
			Z_Construct_UPackage_Engine();
			OuterClass = UInterpTrackInstFloatMaterialParam::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20800080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_InstancedTrack = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InstancedTrack"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(InstancedTrack, UInterpTrackInstFloatMaterialParam), 0x0000000000000000, Z_Construct_UClass_UInterpTrackFloatMaterialParam_NoRegister());
				UProperty* NewProp_PrimitiveMaterialRefs = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PrimitiveMaterialRefs"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(PrimitiveMaterialRefs, UInterpTrackInstFloatMaterialParam), 0x0000008000000000);
				UProperty* NewProp_PrimitiveMaterialRefs_Inner = new(EC_InternalUseOnlyConstructor, NewProp_PrimitiveMaterialRefs, TEXT("PrimitiveMaterialRefs"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000008000000000, Z_Construct_UScriptStruct_FPrimitiveMaterialRef());
				UProperty* NewProp_ResetFloats = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ResetFloats"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ResetFloats, UInterpTrackInstFloatMaterialParam), 0x0000000000000000);
				UProperty* NewProp_ResetFloats_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ResetFloats, TEXT("ResetFloats"), RF_Public|RF_Transient|RF_Native) UFloatProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
				UProperty* NewProp_MaterialInstances = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaterialInstances"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(MaterialInstances, UInterpTrackInstFloatMaterialParam), 0x0000000000000000);
				UProperty* NewProp_MaterialInstances_Inner = new(EC_InternalUseOnlyConstructor, NewProp_MaterialInstances, TEXT("MaterialInstances"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UMaterialInstanceDynamic_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Matinee/InterpTrackInstFloatMaterialParam.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackInstFloatMaterialParam.h"));
				MetaData->SetValue(NewProp_InstancedTrack, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackInstFloatMaterialParam.h"));
				MetaData->SetValue(NewProp_InstancedTrack, TEXT("ToolTip"), TEXT("track we are an instance of - used in the editor to propagate changes to the track's Materials array immediately"));
				MetaData->SetValue(NewProp_PrimitiveMaterialRefs, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackInstFloatMaterialParam.h"));
				MetaData->SetValue(NewProp_PrimitiveMaterialRefs, TEXT("ToolTip"), TEXT("Primitive components on which materials have been overridden."));
				MetaData->SetValue(NewProp_ResetFloats, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackInstFloatMaterialParam.h"));
				MetaData->SetValue(NewProp_ResetFloats, TEXT("ToolTip"), TEXT("Saved values for restoring state when exiting Matinee."));
				MetaData->SetValue(NewProp_MaterialInstances, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackInstFloatMaterialParam.h"));
				MetaData->SetValue(NewProp_MaterialInstances, TEXT("ToolTip"), TEXT("MIDs we're using to set the desired parameter."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UInterpTrackInstFloatMaterialParam(Z_Construct_UClass_UInterpTrackInstFloatMaterialParam, TEXT("UInterpTrackInstFloatMaterialParam"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UInterpTrackInstFloatMaterialParam);
	UClass* Z_Construct_UClass_UInterpTrackInstFloatParticleParam_NoRegister()
	{
		return UInterpTrackInstFloatParticleParam::StaticClass();
	}
	UClass* Z_Construct_UClass_UInterpTrackInstFloatParticleParam()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UInterpTrackInst();
			Z_Construct_UPackage_Engine();
			OuterClass = UInterpTrackInstFloatParticleParam::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ResetFloat = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ResetFloat"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ResetFloat, UInterpTrackInstFloatParticleParam), 0x0000000000000000);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Matinee/InterpTrackInstFloatParticleParam.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackInstFloatParticleParam.h"));
				MetaData->SetValue(NewProp_ResetFloat, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackInstFloatParticleParam.h"));
				MetaData->SetValue(NewProp_ResetFloat, TEXT("ToolTip"), TEXT("Saved value for restoring state when exiting Matinee."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UInterpTrackInstFloatParticleParam(Z_Construct_UClass_UInterpTrackInstFloatParticleParam, TEXT("UInterpTrackInstFloatParticleParam"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UInterpTrackInstFloatParticleParam);
	UClass* Z_Construct_UClass_UInterpTrackInstMove_NoRegister()
	{
		return UInterpTrackInstMove::StaticClass();
	}
	UClass* Z_Construct_UClass_UInterpTrackInstMove()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UInterpTrackInst();
			Z_Construct_UPackage_Engine();
			OuterClass = UInterpTrackInstMove::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ResetRotation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ResetRotation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ResetRotation, UInterpTrackInstMove), 0x0000000000000000, Z_Construct_UScriptStruct_FRotator());
				UProperty* NewProp_ResetLocation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ResetLocation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ResetLocation, UInterpTrackInstMove), 0x0000000000000000, Z_Construct_UScriptStruct_FVector());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Matinee/InterpTrackInstMove.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackInstMove.h"));
				MetaData->SetValue(NewProp_ResetRotation, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackInstMove.h"));
				MetaData->SetValue(NewProp_ResetRotation, TEXT("ToolTip"), TEXT("Saved rotation. Used in editor for resetting when quitting Matinee."));
				MetaData->SetValue(NewProp_ResetLocation, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackInstMove.h"));
				MetaData->SetValue(NewProp_ResetLocation, TEXT("ToolTip"), TEXT("Saved position. Used in editor for resetting when quitting Matinee."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UInterpTrackInstMove(Z_Construct_UClass_UInterpTrackInstMove, TEXT("UInterpTrackInstMove"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UInterpTrackInstMove);
	UClass* Z_Construct_UClass_UInterpTrackInstParticleReplay_NoRegister()
	{
		return UInterpTrackInstParticleReplay::StaticClass();
	}
	UClass* Z_Construct_UClass_UInterpTrackInstParticleReplay()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UInterpTrackInst();
			Z_Construct_UPackage_Engine();
			OuterClass = UInterpTrackInstParticleReplay::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_LastUpdatePosition = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LastUpdatePosition"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(LastUpdatePosition, UInterpTrackInstParticleReplay), 0x0000000000000000);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Matinee/InterpTrackInstParticleReplay.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackInstParticleReplay.h"));
				MetaData->SetValue(NewProp_LastUpdatePosition, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackInstParticleReplay.h"));
				MetaData->SetValue(NewProp_LastUpdatePosition, TEXT("ToolTip"), TEXT("Position we were in last time we evaluated.\nDuring UpdateTrack, events between this time and the current time will be processed."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UInterpTrackInstParticleReplay(Z_Construct_UClass_UInterpTrackInstParticleReplay, TEXT("UInterpTrackInstParticleReplay"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UInterpTrackInstParticleReplay);
	UClass* Z_Construct_UClass_UInterpTrackInstProperty_NoRegister()
	{
		return UInterpTrackInstProperty::StaticClass();
	}
	UClass* Z_Construct_UClass_UInterpTrackInstProperty()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UInterpTrackInst();
			Z_Construct_UPackage_Engine();
			OuterClass = UInterpTrackInstProperty::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_PropertyOuterObjectInst = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PropertyOuterObjectInst"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(PropertyOuterObjectInst, UInterpTrackInstProperty), 0x0000000000000000, Z_Construct_UClass_UObject_NoRegister());
				UProperty* NewProp_InterpProperty = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InterpProperty"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(InterpProperty, UInterpTrackInstProperty), 0x0000000000000000, UProperty::StaticClass());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Matinee/InterpTrackInstProperty.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackInstProperty.h"));
				MetaData->SetValue(NewProp_PropertyOuterObjectInst, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackInstProperty.h"));
				MetaData->SetValue(NewProp_PropertyOuterObjectInst, TEXT("ToolTip"), TEXT("Pointer to the UObject instance that is the outer of the color property we are interpolating on, this is used to process the property update callback."));
				MetaData->SetValue(NewProp_InterpProperty, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackInstProperty.h"));
				MetaData->SetValue(NewProp_InterpProperty, TEXT("ToolTip"), TEXT("Function to call after updating the value of the color property."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UInterpTrackInstProperty(Z_Construct_UClass_UInterpTrackInstProperty, TEXT("UInterpTrackInstProperty"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UInterpTrackInstProperty);
	UClass* Z_Construct_UClass_UInterpTrackInstBoolProp_NoRegister()
	{
		return UInterpTrackInstBoolProp::StaticClass();
	}
	UClass* Z_Construct_UClass_UInterpTrackInstBoolProp()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UInterpTrackInstProperty();
			Z_Construct_UPackage_Engine();
			OuterClass = UInterpTrackInstBoolProp::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(ResetBool, UInterpTrackInstBoolProp, bool);
				UProperty* NewProp_ResetBool = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ResetBool"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ResetBool, UInterpTrackInstBoolProp), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(ResetBool, UInterpTrackInstBoolProp), sizeof(bool), true);
				UProperty* NewProp_BoolProperty = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BoolProperty"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(BoolProperty, UInterpTrackInstBoolProp), 0x0000000000002000, UBoolProperty::StaticClass());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Matinee/InterpTrackInstBoolProp.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackInstBoolProp.h"));
				MetaData->SetValue(NewProp_ResetBool, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackInstBoolProp.h"));
				MetaData->SetValue(NewProp_ResetBool, TEXT("ToolTip"), TEXT("Saved value for restoring state when exiting Matinee."));
				MetaData->SetValue(NewProp_BoolProperty, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackInstBoolProp.h"));
				MetaData->SetValue(NewProp_BoolProperty, TEXT("ToolTip"), TEXT("Mask that indicates which bit the boolean property actually uses of the value pointed to by BoolProp."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UInterpTrackInstBoolProp(Z_Construct_UClass_UInterpTrackInstBoolProp, TEXT("UInterpTrackInstBoolProp"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UInterpTrackInstBoolProp);
	UClass* Z_Construct_UClass_UInterpTrackInstColorProp_NoRegister()
	{
		return UInterpTrackInstColorProp::StaticClass();
	}
	UClass* Z_Construct_UClass_UInterpTrackInstColorProp()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UInterpTrackInstProperty();
			Z_Construct_UPackage_Engine();
			OuterClass = UInterpTrackInstColorProp::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ResetColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ResetColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ResetColor, UInterpTrackInstColorProp), 0x0000000000000000, Z_Construct_UScriptStruct_FColor());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Matinee/InterpTrackInstColorProp.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackInstColorProp.h"));
				MetaData->SetValue(NewProp_ResetColor, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackInstColorProp.h"));
				MetaData->SetValue(NewProp_ResetColor, TEXT("ToolTip"), TEXT("Saved value for restoring state when exiting Matinee."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UInterpTrackInstColorProp(Z_Construct_UClass_UInterpTrackInstColorProp, TEXT("UInterpTrackInstColorProp"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UInterpTrackInstColorProp);
	UClass* Z_Construct_UClass_UInterpTrackInstFloatProp_NoRegister()
	{
		return UInterpTrackInstFloatProp::StaticClass();
	}
	UClass* Z_Construct_UClass_UInterpTrackInstFloatProp()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UInterpTrackInstProperty();
			Z_Construct_UPackage_Engine();
			OuterClass = UInterpTrackInstFloatProp::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ResetFloat = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ResetFloat"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ResetFloat, UInterpTrackInstFloatProp), 0x0000000000000000);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Matinee/InterpTrackInstFloatProp.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackInstFloatProp.h"));
				MetaData->SetValue(NewProp_ResetFloat, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackInstFloatProp.h"));
				MetaData->SetValue(NewProp_ResetFloat, TEXT("ToolTip"), TEXT("Saved value for restoring state when exiting Matinee."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UInterpTrackInstFloatProp(Z_Construct_UClass_UInterpTrackInstFloatProp, TEXT("UInterpTrackInstFloatProp"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UInterpTrackInstFloatProp);
	UClass* Z_Construct_UClass_UInterpTrackInstLinearColorProp_NoRegister()
	{
		return UInterpTrackInstLinearColorProp::StaticClass();
	}
	UClass* Z_Construct_UClass_UInterpTrackInstLinearColorProp()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UInterpTrackInstProperty();
			Z_Construct_UPackage_Engine();
			OuterClass = UInterpTrackInstLinearColorProp::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ResetColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ResetColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ResetColor, UInterpTrackInstLinearColorProp), 0x0000000000000000, Z_Construct_UScriptStruct_FLinearColor());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Matinee/InterpTrackInstLinearColorProp.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackInstLinearColorProp.h"));
				MetaData->SetValue(NewProp_ResetColor, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackInstLinearColorProp.h"));
				MetaData->SetValue(NewProp_ResetColor, TEXT("ToolTip"), TEXT("Saved value for restoring state when exiting Matinee."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UInterpTrackInstLinearColorProp(Z_Construct_UClass_UInterpTrackInstLinearColorProp, TEXT("UInterpTrackInstLinearColorProp"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UInterpTrackInstLinearColorProp);
	UClass* Z_Construct_UClass_UInterpTrackInstVectorProp_NoRegister()
	{
		return UInterpTrackInstVectorProp::StaticClass();
	}
	UClass* Z_Construct_UClass_UInterpTrackInstVectorProp()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UInterpTrackInstProperty();
			Z_Construct_UPackage_Engine();
			OuterClass = UInterpTrackInstVectorProp::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ResetVector = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ResetVector"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ResetVector, UInterpTrackInstVectorProp), 0x0000000000000000, Z_Construct_UScriptStruct_FVector());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Matinee/InterpTrackInstVectorProp.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackInstVectorProp.h"));
				MetaData->SetValue(NewProp_ResetVector, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackInstVectorProp.h"));
				MetaData->SetValue(NewProp_ResetVector, TEXT("ToolTip"), TEXT("Saved value for restoring state when exiting Matinee."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UInterpTrackInstVectorProp(Z_Construct_UClass_UInterpTrackInstVectorProp, TEXT("UInterpTrackInstVectorProp"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UInterpTrackInstVectorProp);
	UClass* Z_Construct_UClass_UInterpTrackInstSlomo_NoRegister()
	{
		return UInterpTrackInstSlomo::StaticClass();
	}
	UClass* Z_Construct_UClass_UInterpTrackInstSlomo()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UInterpTrackInst();
			Z_Construct_UPackage_Engine();
			OuterClass = UInterpTrackInstSlomo::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_OldTimeDilation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OldTimeDilation"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(OldTimeDilation, UInterpTrackInstSlomo), 0x0000000000000000);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Matinee/InterpTrackInstSlomo.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackInstSlomo.h"));
				MetaData->SetValue(NewProp_OldTimeDilation, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackInstSlomo.h"));
				MetaData->SetValue(NewProp_OldTimeDilation, TEXT("ToolTip"), TEXT("Backup of initial LevelInfo MatineeTimeDilation setting when interpolation started."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UInterpTrackInstSlomo(Z_Construct_UClass_UInterpTrackInstSlomo, TEXT("UInterpTrackInstSlomo"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UInterpTrackInstSlomo);
	UClass* Z_Construct_UClass_UInterpTrackInstSound_NoRegister()
	{
		return UInterpTrackInstSound::StaticClass();
	}
	UClass* Z_Construct_UClass_UInterpTrackInstSound()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UInterpTrackInst();
			Z_Construct_UPackage_Engine();
			OuterClass = UInterpTrackInstSound::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20800080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_PlayAudioComp = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PlayAudioComp"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(PlayAudioComp, UInterpTrackInstSound), 0x0000000000082008, Z_Construct_UClass_UAudioComponent_NoRegister());
				UProperty* NewProp_LastUpdatePosition = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LastUpdatePosition"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(LastUpdatePosition, UInterpTrackInstSound), 0x0000000000000000);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Matinee/InterpTrackInstSound.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackInstSound.h"));
				MetaData->SetValue(NewProp_PlayAudioComp, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_PlayAudioComp, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackInstSound.h"));
				MetaData->SetValue(NewProp_LastUpdatePosition, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackInstSound.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UInterpTrackInstSound(Z_Construct_UClass_UInterpTrackInstSound, TEXT("UInterpTrackInstSound"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UInterpTrackInstSound);
	UClass* Z_Construct_UClass_UInterpTrackInstToggle_NoRegister()
	{
		return UInterpTrackInstToggle::StaticClass();
	}
	UClass* Z_Construct_UClass_UInterpTrackInstToggle()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UInterpTrackInst();
			Z_Construct_UPackage_Engine();
			OuterClass = UInterpTrackInstToggle::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSavedActiveState, UInterpTrackInstToggle, uint8);
				UProperty* NewProp_bSavedActiveState = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bSavedActiveState"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSavedActiveState, UInterpTrackInstToggle), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bSavedActiveState, UInterpTrackInstToggle), sizeof(uint8), false);
				UProperty* NewProp_LastUpdatePosition = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LastUpdatePosition"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(LastUpdatePosition, UInterpTrackInstToggle), 0x0000000000000000);
				UProperty* NewProp_Action = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Action"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(Action, UInterpTrackInstToggle), 0x0000000000000001, Z_Construct_UEnum_Engine_ETrackToggleAction());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Matinee/InterpTrackInstToggle.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackInstToggle.h"));
				MetaData->SetValue(NewProp_bSavedActiveState, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackInstToggle.h"));
				MetaData->SetValue(NewProp_bSavedActiveState, TEXT("ToolTip"), TEXT("Cached 'active' state for the toggleable actor before we possessed it; restored when Matinee exits"));
				MetaData->SetValue(NewProp_LastUpdatePosition, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackInstToggle.h"));
				MetaData->SetValue(NewProp_LastUpdatePosition, TEXT("ToolTip"), TEXT("Position we were in last time we evaluated.\nDuring UpdateTrack, toggles between this time and the current time will be processed."));
				MetaData->SetValue(NewProp_Action, TEXT("Category"), TEXT("InterpTrackInstToggle"));
				MetaData->SetValue(NewProp_Action, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackInstToggle.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UInterpTrackInstToggle(Z_Construct_UClass_UInterpTrackInstToggle, TEXT("UInterpTrackInstToggle"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UInterpTrackInstToggle);
	UClass* Z_Construct_UClass_UInterpTrackInstVectorMaterialParam_NoRegister()
	{
		return UInterpTrackInstVectorMaterialParam::StaticClass();
	}
	UClass* Z_Construct_UClass_UInterpTrackInstVectorMaterialParam()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UInterpTrackInst();
			Z_Construct_UPackage_Engine();
			OuterClass = UInterpTrackInstVectorMaterialParam::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20800080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_InstancedTrack = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InstancedTrack"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(InstancedTrack, UInterpTrackInstVectorMaterialParam), 0x0000000000000000, Z_Construct_UClass_UInterpTrackVectorMaterialParam_NoRegister());
				UProperty* NewProp_PrimitiveMaterialRefs = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PrimitiveMaterialRefs"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(PrimitiveMaterialRefs, UInterpTrackInstVectorMaterialParam), 0x0000008000000000);
				UProperty* NewProp_PrimitiveMaterialRefs_Inner = new(EC_InternalUseOnlyConstructor, NewProp_PrimitiveMaterialRefs, TEXT("PrimitiveMaterialRefs"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000008000000000, Z_Construct_UScriptStruct_FPrimitiveMaterialRef());
				UProperty* NewProp_ResetVectors = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ResetVectors"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ResetVectors, UInterpTrackInstVectorMaterialParam), 0x0000000000000000);
				UProperty* NewProp_ResetVectors_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ResetVectors, TEXT("ResetVectors"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_MaterialInstances = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaterialInstances"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(MaterialInstances, UInterpTrackInstVectorMaterialParam), 0x0000000000000000);
				UProperty* NewProp_MaterialInstances_Inner = new(EC_InternalUseOnlyConstructor, NewProp_MaterialInstances, TEXT("MaterialInstances"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UMaterialInstanceDynamic_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Matinee/InterpTrackInstVectorMaterialParam.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackInstVectorMaterialParam.h"));
				MetaData->SetValue(NewProp_InstancedTrack, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackInstVectorMaterialParam.h"));
				MetaData->SetValue(NewProp_InstancedTrack, TEXT("ToolTip"), TEXT("Track we are an instance of - used in the editor to propagate changes to the track's Materials array immediately."));
				MetaData->SetValue(NewProp_PrimitiveMaterialRefs, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackInstVectorMaterialParam.h"));
				MetaData->SetValue(NewProp_PrimitiveMaterialRefs, TEXT("ToolTip"), TEXT("Primitive components on which materials have been overridden."));
				MetaData->SetValue(NewProp_ResetVectors, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackInstVectorMaterialParam.h"));
				MetaData->SetValue(NewProp_ResetVectors, TEXT("ToolTip"), TEXT("Saved values for restoring state when exiting Matinee."));
				MetaData->SetValue(NewProp_MaterialInstances, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackInstVectorMaterialParam.h"));
				MetaData->SetValue(NewProp_MaterialInstances, TEXT("ToolTip"), TEXT("MIDs we're using to set the desired parameter."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UInterpTrackInstVectorMaterialParam(Z_Construct_UClass_UInterpTrackInstVectorMaterialParam, TEXT("UInterpTrackInstVectorMaterialParam"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UInterpTrackInstVectorMaterialParam);
	UClass* Z_Construct_UClass_UInterpTrackInstVisibility_NoRegister()
	{
		return UInterpTrackInstVisibility::StaticClass();
	}
	UClass* Z_Construct_UClass_UInterpTrackInstVisibility()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UInterpTrackInst();
			Z_Construct_UPackage_Engine();
			OuterClass = UInterpTrackInstVisibility::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_LastUpdatePosition = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LastUpdatePosition"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(LastUpdatePosition, UInterpTrackInstVisibility), 0x0000000000000000);
				UProperty* NewProp_Action = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Action"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(Action, UInterpTrackInstVisibility), 0x0000000000000001, Z_Construct_UEnum_Engine_EVisibilityTrackAction());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Matinee/InterpTrackInstVisibility.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackInstVisibility.h"));
				MetaData->SetValue(NewProp_LastUpdatePosition, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackInstVisibility.h"));
				MetaData->SetValue(NewProp_LastUpdatePosition, TEXT("ToolTip"), TEXT("Position we were in last time we evaluated.\nDuring UpdateTrack, events between this time and the current time will be processed."));
				MetaData->SetValue(NewProp_Action, TEXT("Category"), TEXT("InterpTrackInstVisibility"));
				MetaData->SetValue(NewProp_Action, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/InterpTrackInstVisibility.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UInterpTrackInstVisibility(Z_Construct_UClass_UInterpTrackInstVisibility, TEXT("UInterpTrackInstVisibility"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UInterpTrackInstVisibility);
	UClass* Z_Construct_UClass_UIntSerialization_NoRegister()
	{
		return UIntSerialization::StaticClass();
	}
	UClass* Z_Construct_UClass_UIntSerialization()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UIntSerialization::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_SignedInt32Variable = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SignedInt32Variable"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(SignedInt32Variable, UIntSerialization), 0x0000000000000000);
				UProperty* NewProp_UnsignedInt8Variable = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UnsignedInt8Variable"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(UnsignedInt8Variable, UIntSerialization), 0x0000000000000000);
				UProperty* NewProp_SignedInt64Variable = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SignedInt64Variable"), RF_Public|RF_Transient|RF_Native) UInt64Property(CPP_PROPERTY_BASE(SignedInt64Variable, UIntSerialization), 0x0000000000000000);
				UProperty* NewProp_SignedInt16Variable = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SignedInt16Variable"), RF_Public|RF_Transient|RF_Native) UInt16Property(CPP_PROPERTY_BASE(SignedInt16Variable, UIntSerialization), 0x0000000000000000);
				UProperty* NewProp_SignedInt8Variable = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SignedInt8Variable"), RF_Public|RF_Transient|RF_Native) UInt8Property(CPP_PROPERTY_BASE(SignedInt8Variable, UIntSerialization), 0x0000000000000000);
				UProperty* NewProp_UnsignedInt64Variable = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UnsignedInt64Variable"), RF_Public|RF_Transient|RF_Native) UUInt64Property(CPP_PROPERTY_BASE(UnsignedInt64Variable, UIntSerialization), 0x0000000000000000);
				UProperty* NewProp_UnsignedInt32Variable = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UnsignedInt32Variable"), RF_Public|RF_Transient|RF_Native) UUInt32Property(CPP_PROPERTY_BASE(UnsignedInt32Variable, UIntSerialization), 0x0000000000000000);
				UProperty* NewProp_UnsignedInt16Variable = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UnsignedInt16Variable"), RF_Public|RF_Transient|RF_Native) UUInt16Property(CPP_PROPERTY_BASE(UnsignedInt16Variable, UIntSerialization), 0x0000000000000000);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/IntSerialization.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/IntSerialization.h"));
				MetaData->SetValue(NewProp_SignedInt32Variable, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/IntSerialization.h"));
				MetaData->SetValue(NewProp_UnsignedInt8Variable, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/IntSerialization.h"));
				MetaData->SetValue(NewProp_UnsignedInt8Variable, TEXT("ToolTip"), TEXT("Existing types"));
				MetaData->SetValue(NewProp_SignedInt64Variable, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/IntSerialization.h"));
				MetaData->SetValue(NewProp_SignedInt16Variable, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/IntSerialization.h"));
				MetaData->SetValue(NewProp_SignedInt8Variable, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/IntSerialization.h"));
				MetaData->SetValue(NewProp_UnsignedInt64Variable, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/IntSerialization.h"));
				MetaData->SetValue(NewProp_UnsignedInt32Variable, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/IntSerialization.h"));
				MetaData->SetValue(NewProp_UnsignedInt16Variable, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/IntSerialization.h"));
				MetaData->SetValue(NewProp_UnsignedInt16Variable, TEXT("ToolTip"), TEXT("New types"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UIntSerialization(Z_Construct_UClass_UIntSerialization, TEXT("UIntSerialization"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UIntSerialization);
	UScriptStruct* Z_Construct_UScriptStruct_FLayerActorStats()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FLayerActorStats_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("LayerActorStats"), sizeof(FLayerActorStats), Get_Z_Construct_UScriptStruct_FLayerActorStats_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LayerActorStats"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FLayerActorStats>, EStructFlags(0x00000001));
			UProperty* NewProp_Total = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Total"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Total, FLayerActorStats), 0x0000000000000000);
			UProperty* NewProp_Type = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Type"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(Type, FLayerActorStats), 0x0000000000000000, Z_Construct_UClass_UObject_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Layers/Layer.h"));
			MetaData->SetValue(NewProp_Total, TEXT("ModuleRelativePath"), TEXT("Classes/Layers/Layer.h"));
			MetaData->SetValue(NewProp_Total, TEXT("ToolTip"), TEXT("The total number of Actors of Type assigned to the Layer"));
			MetaData->SetValue(NewProp_Type, TEXT("ModuleRelativePath"), TEXT("Classes/Layers/Layer.h"));
			MetaData->SetValue(NewProp_Type, TEXT("ToolTip"), TEXT("A Type of Actor currently associated with the Layer"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FLayerActorStats_CRC() { return 4220734766U; }
	UClass* Z_Construct_UClass_ULayer_NoRegister()
	{
		return ULayer::StaticClass();
	}
	UClass* Z_Construct_UClass_ULayer()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = ULayer::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ActorStats = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ActorStats"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ActorStats, ULayer), 0x0000000000002000);
				UProperty* NewProp_ActorStats_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ActorStats, TEXT("ActorStats"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FLayerActorStats());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsVisible, ULayer, uint8);
				UProperty* NewProp_bIsVisible = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsVisible"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsVisible, ULayer), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bIsVisible, ULayer), sizeof(uint8), false);
				UProperty* NewProp_LayerName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LayerName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(LayerName, ULayer), 0x0000000000000000);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Layers/Layer.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Layers/Layer.h"));
				MetaData->SetValue(NewProp_ActorStats, TEXT("ModuleRelativePath"), TEXT("Classes/Layers/Layer.h"));
				MetaData->SetValue(NewProp_ActorStats, TEXT("ToolTip"), TEXT("Basic stats regarding the number of Actors and their types currently assigned to the Layer"));
				MetaData->SetValue(NewProp_bIsVisible, TEXT("ModuleRelativePath"), TEXT("Classes/Layers/Layer.h"));
				MetaData->SetValue(NewProp_bIsVisible, TEXT("ToolTip"), TEXT("Whether actors associated with the layer are visible in the viewport"));
				MetaData->SetValue(NewProp_LayerName, TEXT("ModuleRelativePath"), TEXT("Classes/Layers/Layer.h"));
				MetaData->SetValue(NewProp_LayerName, TEXT("ToolTip"), TEXT("The display name of the layer"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ULayer(Z_Construct_UClass_ULayer, TEXT("ULayer"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(ULayer);
	UFunction* Z_Construct_UDelegateFunction_Engine_LevelStreamingVisibilityStatus__DelegateSignature()
	{
		UObject* Outer=Z_Construct_UPackage_Engine();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LevelStreamingVisibilityStatus__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/LevelStreaming.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UDelegateFunction_Engine_LevelStreamingLoadedStatus__DelegateSignature()
	{
		UObject* Outer=Z_Construct_UPackage_Engine();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LevelStreamingLoadedStatus__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/LevelStreaming.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Delegate signatures"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULevelStreaming_CreateInstance()
	{
		struct LevelStreaming_eventCreateInstance_Parms
		{
			FString UniqueInstanceName;
			ULevelStreaming* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULevelStreaming();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CreateInstance"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(LevelStreaming_eventCreateInstance_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, LevelStreaming_eventCreateInstance_Parms), 0x0000000000000580, Z_Construct_UClass_ULevelStreaming_NoRegister());
			UProperty* NewProp_UniqueInstanceName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UniqueInstanceName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(UniqueInstanceName, LevelStreaming_eventCreateInstance_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Game"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/LevelStreaming.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Creates a new instance of this streaming level with a provided unique instance name"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULevelStreaming_GetLevelScriptActor()
	{
		struct LevelStreaming_eventGetLevelScriptActor_Parms
		{
			ALevelScriptActor* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULevelStreaming();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetLevelScriptActor"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14020401, 65535, sizeof(LevelStreaming_eventGetLevelScriptActor_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, LevelStreaming_eventGetLevelScriptActor_Parms), 0x0000000000000580, Z_Construct_UClass_ALevelScriptActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/LevelStreaming.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the Level Script Actor of the level if the level is loaded and valid"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULevelStreaming_IsLevelLoaded()
	{
		struct LevelStreaming_eventIsLevelLoaded_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULevelStreaming();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsLevelLoaded"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(LevelStreaming_eventIsLevelLoaded_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, LevelStreaming_eventIsLevelLoaded_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, LevelStreaming_eventIsLevelLoaded_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, LevelStreaming_eventIsLevelLoaded_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Game"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/LevelStreaming.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns whether streaming level is loaded"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULevelStreaming_IsLevelVisible()
	{
		struct LevelStreaming_eventIsLevelVisible_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULevelStreaming();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsLevelVisible"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(LevelStreaming_eventIsLevelVisible_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, LevelStreaming_eventIsLevelVisible_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, LevelStreaming_eventIsLevelVisible_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, LevelStreaming_eventIsLevelVisible_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Game"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/LevelStreaming.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns whether streaming level is visible"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULevelStreaming_IsStreamingStatePending()
	{
		struct LevelStreaming_eventIsStreamingStatePending_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULevelStreaming();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsStreamingStatePending"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(LevelStreaming_eventIsStreamingStatePending_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, LevelStreaming_eventIsStreamingStatePending_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, LevelStreaming_eventIsStreamingStatePending_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, LevelStreaming_eventIsStreamingStatePending_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Game"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/LevelStreaming.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns whether level has streaming state change pending"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_ULevelStreaming_NoRegister()
	{
		return ULevelStreaming::StaticClass();
	}
	UClass* Z_Construct_UClass_ULevelStreaming()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = ULevelStreaming::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881081;

				OuterClass->LinkChild(Z_Construct_UFunction_ULevelStreaming_CreateInstance());
				OuterClass->LinkChild(Z_Construct_UFunction_ULevelStreaming_GetLevelScriptActor());
				OuterClass->LinkChild(Z_Construct_UFunction_ULevelStreaming_IsLevelLoaded());
				OuterClass->LinkChild(Z_Construct_UFunction_ULevelStreaming_IsLevelVisible());
				OuterClass->LinkChild(Z_Construct_UFunction_ULevelStreaming_IsStreamingStatePending());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_PendingUnloadLevel = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PendingUnloadLevel"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(PendingUnloadLevel, ULevelStreaming), 0x0000000000002000, Z_Construct_UClass_ULevel_NoRegister());
				UProperty* NewProp_LoadedLevel = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LoadedLevel"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(LoadedLevel, ULevelStreaming), 0x0000000000002000, Z_Construct_UClass_ULevel_NoRegister());
				UProperty* NewProp_OnLevelHidden = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnLevelHidden"), RF_Public|RF_Transient|RF_Native) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnLevelHidden, ULevelStreaming), 0x0000000010080000, Z_Construct_UDelegateFunction_Engine_LevelStreamingVisibilityStatus__DelegateSignature());
				UProperty* NewProp_OnLevelShown = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnLevelShown"), RF_Public|RF_Transient|RF_Native) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnLevelShown, ULevelStreaming), 0x0000000010080000, Z_Construct_UDelegateFunction_Engine_LevelStreamingVisibilityStatus__DelegateSignature());
				UProperty* NewProp_OnLevelUnloaded = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnLevelUnloaded"), RF_Public|RF_Transient|RF_Native) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnLevelUnloaded, ULevelStreaming), 0x0000000010080000, Z_Construct_UDelegateFunction_Engine_LevelStreamingLoadedStatus__DelegateSignature());
				UProperty* NewProp_OnLevelLoaded = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnLevelLoaded"), RF_Public|RF_Transient|RF_Native) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnLevelLoaded, ULevelStreaming), 0x0000000010080000, Z_Construct_UDelegateFunction_Engine_LevelStreamingLoadedStatus__DelegateSignature());
				UProperty* NewProp_Keywords = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Keywords"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Keywords, ULevelStreaming), 0x0000000000000000);
				UProperty* NewProp_Keywords_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Keywords, TEXT("Keywords"), RF_Public|RF_Transient|RF_Native) UStrProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
				UProperty* NewProp_MinTimeBetweenVolumeUnloadRequests = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MinTimeBetweenVolumeUnloadRequests"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MinTimeBetweenVolumeUnloadRequests, ULevelStreaming), 0x0000040000000001);
				UProperty* NewProp_EditorStreamingVolumes = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EditorStreamingVolumes"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(EditorStreamingVolumes, ULevelStreaming), 0x0000000000000001);
				UProperty* NewProp_EditorStreamingVolumes_Inner = new(EC_InternalUseOnlyConstructor, NewProp_EditorStreamingVolumes, TEXT("EditorStreamingVolumes"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_ALevelStreamingVolume_NoRegister());
				UProperty* NewProp_LevelColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LevelColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LevelColor, ULevelStreaming), 0x0000000000000001, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_DrawColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DrawColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DrawColor_DEPRECATED, ULevelStreaming), 0x0000000020000000, Z_Construct_UScriptStruct_FColor());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDrawOnLevelStatusMap, ULevelStreaming, uint8);
				UProperty* NewProp_bDrawOnLevelStatusMap = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bDrawOnLevelStatusMap"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDrawOnLevelStatusMap, ULevelStreaming), 0x0000040000000001, CPP_BOOL_PROPERTY_BITMASK(bDrawOnLevelStatusMap, ULevelStreaming), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDisableDistanceStreaming, ULevelStreaming, uint8);
				UProperty* NewProp_bDisableDistanceStreaming = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bDisableDistanceStreaming"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDisableDistanceStreaming, ULevelStreaming), 0x0000000000002004, CPP_BOOL_PROPERTY_BITMASK(bDisableDistanceStreaming, ULevelStreaming), sizeof(uint8), false);
				UProperty* NewProp_LevelLODIndex = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LevelLODIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(LevelLODIndex, ULevelStreaming), 0x0000000000002004);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bShouldBlockOnLoad, ULevelStreaming, uint8);
				UProperty* NewProp_bShouldBlockOnLoad = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bShouldBlockOnLoad"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bShouldBlockOnLoad, ULevelStreaming), 0x0000000000000004, CPP_BOOL_PROPERTY_BITMASK(bShouldBlockOnLoad, ULevelStreaming), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bShouldBeVisible, ULevelStreaming, uint8);
				UProperty* NewProp_bShouldBeVisible = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bShouldBeVisible"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bShouldBeVisible, ULevelStreaming), 0x0000000000000004, CPP_BOOL_PROPERTY_BITMASK(bShouldBeVisible, ULevelStreaming), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bShouldBeLoaded, ULevelStreaming, uint8);
				UProperty* NewProp_bShouldBeLoaded = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bShouldBeLoaded"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bShouldBeLoaded, ULevelStreaming), 0x0000000000000004, CPP_BOOL_PROPERTY_BITMASK(bShouldBeLoaded, ULevelStreaming), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLocked, ULevelStreaming, uint8);
				UProperty* NewProp_bLocked = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bLocked"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLocked, ULevelStreaming), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bLocked, ULevelStreaming), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bShouldBeVisibleInEditor, ULevelStreaming, uint8);
				UProperty* NewProp_bShouldBeVisibleInEditor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bShouldBeVisibleInEditor"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bShouldBeVisibleInEditor, ULevelStreaming), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bShouldBeVisibleInEditor, ULevelStreaming), sizeof(uint8), false);
				UProperty* NewProp_LevelTransform = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LevelTransform"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LevelTransform, ULevelStreaming), 0x0000000000000005, Z_Construct_UScriptStruct_FTransform());
				UProperty* NewProp_LODPackageNames = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LODPackageNames"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(LODPackageNames, ULevelStreaming), 0x0000000000000000);
				UProperty* NewProp_LODPackageNames_Inner = new(EC_InternalUseOnlyConstructor, NewProp_LODPackageNames, TEXT("LODPackageNames"), RF_Public|RF_Transient|RF_Native) UNameProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
				UProperty* NewProp_PackageNameToLoad = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PackageNameToLoad"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(PackageNameToLoad, ULevelStreaming), 0x0000000000000000);
				UProperty* NewProp_WorldAsset = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WorldAsset"), RF_Public|RF_Transient|RF_Native) UAssetObjectProperty(CPP_PROPERTY_BASE(WorldAsset, ULevelStreaming), 0x0004000000020015, Z_Construct_UClass_UWorld_NoRegister());
				UProperty* NewProp_PackageName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PackageName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(PackageName_DEPRECATED, ULevelStreaming), 0x0000000020000000);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULevelStreaming_CreateInstance()); // 637244213
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULevelStreaming_GetLevelScriptActor()); // 2872577128
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULevelStreaming_IsLevelLoaded()); // 1139131741
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULevelStreaming_IsLevelVisible()); // 199524984
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULevelStreaming_IsStreamingStatePending()); // 2532237065
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/LevelStreaming.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/LevelStreaming.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Abstract base class of container object encapsulating data required for streaming and providing\ninterface for when a level should be streamed in and out of memory."));
				MetaData->SetValue(NewProp_PendingUnloadLevel, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/LevelStreaming.h"));
				MetaData->SetValue(NewProp_PendingUnloadLevel, TEXT("ToolTip"), TEXT("Pointer to a Level object that was previously active and was replaced with a new LoadedLevel (for LOD switching)"));
				MetaData->SetValue(NewProp_LoadedLevel, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/LevelStreaming.h"));
				MetaData->SetValue(NewProp_LoadedLevel, TEXT("ToolTip"), TEXT("Pointer to Level object if currently loaded/ streamed in."));
				MetaData->SetValue(NewProp_OnLevelHidden, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/LevelStreaming.h"));
				MetaData->SetValue(NewProp_OnLevelHidden, TEXT("ToolTip"), TEXT("Called when level is removed from the world"));
				MetaData->SetValue(NewProp_OnLevelShown, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/LevelStreaming.h"));
				MetaData->SetValue(NewProp_OnLevelShown, TEXT("ToolTip"), TEXT("Called when level is added to the world"));
				MetaData->SetValue(NewProp_OnLevelUnloaded, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/LevelStreaming.h"));
				MetaData->SetValue(NewProp_OnLevelUnloaded, TEXT("ToolTip"), TEXT("Called when level is streamed out"));
				MetaData->SetValue(NewProp_OnLevelLoaded, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/LevelStreaming.h"));
				MetaData->SetValue(NewProp_OnLevelLoaded, TEXT("ToolTip"), TEXT("Called when level is streamed in"));
				MetaData->SetValue(NewProp_Keywords, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/LevelStreaming.h"));
				MetaData->SetValue(NewProp_Keywords, TEXT("ToolTip"), TEXT("List of keywords to filter on in the level browser"));
				MetaData->SetValue(NewProp_MinTimeBetweenVolumeUnloadRequests, TEXT("Category"), TEXT("LevelStreaming"));
				MetaData->SetValue(NewProp_MinTimeBetweenVolumeUnloadRequests, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_MinTimeBetweenVolumeUnloadRequests, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/LevelStreaming.h"));
				MetaData->SetValue(NewProp_MinTimeBetweenVolumeUnloadRequests, TEXT("ToolTip"), TEXT("Cooldown time in seconds between volume-based unload requests.  Used in preventing spurious unload requests."));
				MetaData->SetValue(NewProp_MinTimeBetweenVolumeUnloadRequests, TEXT("UIMax"), TEXT("10"));
				MetaData->SetValue(NewProp_MinTimeBetweenVolumeUnloadRequests, TEXT("UIMin"), TEXT("0"));
				MetaData->SetValue(NewProp_EditorStreamingVolumes, TEXT("Category"), TEXT("LevelStreaming"));
				MetaData->SetValue(NewProp_EditorStreamingVolumes, TEXT("DisplayName"), TEXT("Streaming Volumes"));
				MetaData->SetValue(NewProp_EditorStreamingVolumes, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/LevelStreaming.h"));
				MetaData->SetValue(NewProp_EditorStreamingVolumes, TEXT("NoElementDuplicate"), TEXT(""));
				MetaData->SetValue(NewProp_EditorStreamingVolumes, TEXT("ToolTip"), TEXT("The level streaming volumes bound to this level."));
				MetaData->SetValue(NewProp_LevelColor, TEXT("Category"), TEXT("LevelStreaming"));
				MetaData->SetValue(NewProp_LevelColor, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/LevelStreaming.h"));
				MetaData->SetValue(NewProp_LevelColor, TEXT("ToolTip"), TEXT("The level color used for visualization. (Show -> Advanced -> Level Coloration)"));
				MetaData->SetValue(NewProp_DrawColor, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/LevelStreaming.h"));
				MetaData->SetValue(NewProp_DrawColor, TEXT("ToolTip"), TEXT("Deprecated level color used for visualization."));
				MetaData->SetValue(NewProp_bDrawOnLevelStatusMap, TEXT("Category"), TEXT("LevelStreaming"));
				MetaData->SetValue(NewProp_bDrawOnLevelStatusMap, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/LevelStreaming.h"));
				MetaData->SetValue(NewProp_bDrawOnLevelStatusMap, TEXT("ToolTip"), TEXT("If true, will be drawn on the 'level streaming status' map (STAT LEVELMAP console command)"));
				MetaData->SetValue(NewProp_bDisableDistanceStreaming, TEXT("Category"), TEXT("LevelStreaming"));
				MetaData->SetValue(NewProp_bDisableDistanceStreaming, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/LevelStreaming.h"));
				MetaData->SetValue(NewProp_bDisableDistanceStreaming, TEXT("ToolTip"), TEXT("Whether this level streaming object should be ignored by world composition distance streaming,\nso streaming state can be controlled by other systems (ex: in blueprints)"));
				MetaData->SetValue(NewProp_LevelLODIndex, TEXT("Category"), TEXT("LevelStreaming"));
				MetaData->SetValue(NewProp_LevelLODIndex, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/LevelStreaming.h"));
				MetaData->SetValue(NewProp_LevelLODIndex, TEXT("ToolTip"), TEXT("Requested LOD. Non LOD sub-levels have Index = -1"));
				MetaData->SetValue(NewProp_bShouldBlockOnLoad, TEXT("Category"), TEXT("LevelStreaming"));
				MetaData->SetValue(NewProp_bShouldBlockOnLoad, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/LevelStreaming.h"));
				MetaData->SetValue(NewProp_bShouldBlockOnLoad, TEXT("ToolTip"), TEXT("Whether we want to force a blocking load"));
				MetaData->SetValue(NewProp_bShouldBeVisible, TEXT("Category"), TEXT("LevelStreaming"));
				MetaData->SetValue(NewProp_bShouldBeVisible, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/LevelStreaming.h"));
				MetaData->SetValue(NewProp_bShouldBeVisible, TEXT("ToolTip"), TEXT("Whether the level should be visible if it is loaded"));
				MetaData->SetValue(NewProp_bShouldBeLoaded, TEXT("Category"), TEXT("LevelStreaming"));
				MetaData->SetValue(NewProp_bShouldBeLoaded, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/LevelStreaming.h"));
				MetaData->SetValue(NewProp_bShouldBeLoaded, TEXT("ToolTip"), TEXT("Whether the level should be loaded"));
				MetaData->SetValue(NewProp_bLocked, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/LevelStreaming.h"));
				MetaData->SetValue(NewProp_bLocked, TEXT("ToolTip"), TEXT("Whether this level is locked; that is, its actors are read-only."));
				MetaData->SetValue(NewProp_bShouldBeVisibleInEditor, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/LevelStreaming.h"));
				MetaData->SetValue(NewProp_bShouldBeVisibleInEditor, TEXT("ToolTip"), TEXT("Whether this level should be visible in the Editor"));
				MetaData->SetValue(NewProp_LevelTransform, TEXT("Category"), TEXT("LevelStreaming"));
				MetaData->SetValue(NewProp_LevelTransform, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/LevelStreaming.h"));
				MetaData->SetValue(NewProp_LevelTransform, TEXT("ToolTip"), TEXT("Transform applied to actors after loading."));
				MetaData->SetValue(NewProp_LODPackageNames, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/LevelStreaming.h"));
				MetaData->SetValue(NewProp_LODPackageNames, TEXT("ToolTip"), TEXT("LOD versions of this level"));
				MetaData->SetValue(NewProp_PackageNameToLoad, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/LevelStreaming.h"));
				MetaData->SetValue(NewProp_PackageNameToLoad, TEXT("ToolTip"), TEXT("If this isn't Name_None, then we load from this package on disk to the new package named PackageName"));
				MetaData->SetValue(NewProp_WorldAsset, TEXT("Category"), TEXT("LevelStreaming"));
				MetaData->SetValue(NewProp_WorldAsset, TEXT("DisplayName"), TEXT("Level"));
				MetaData->SetValue(NewProp_WorldAsset, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/LevelStreaming.h"));
				MetaData->SetValue(NewProp_WorldAsset, TEXT("ToolTip"), TEXT("The reference to the world containing the level to load"));
				MetaData->SetValue(NewProp_PackageName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/LevelStreaming.h"));
				MetaData->SetValue(NewProp_PackageName, TEXT("ToolTip"), TEXT("Deprecated name of the package containing the level to load. Use WorldAsset or GetWorldAssetPackageFName instead."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ULevelStreaming(Z_Construct_UClass_ULevelStreaming, TEXT("ULevelStreaming"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(ULevelStreaming);
	UClass* Z_Construct_UClass_ULevelStreamingAlwaysLoaded_NoRegister()
	{
		return ULevelStreamingAlwaysLoaded::StaticClass();
	}
	UClass* Z_Construct_UClass_ULevelStreamingAlwaysLoaded()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_ULevelStreaming();
			Z_Construct_UPackage_Engine();
			OuterClass = ULevelStreamingAlwaysLoaded::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/LevelStreamingAlwaysLoaded.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/LevelStreamingAlwaysLoaded.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ULevelStreamingAlwaysLoaded(Z_Construct_UClass_ULevelStreamingAlwaysLoaded, TEXT("ULevelStreamingAlwaysLoaded"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(ULevelStreamingAlwaysLoaded);
	UClass* Z_Construct_UClass_ULevelStreamingKismet_NoRegister()
	{
		return ULevelStreamingKismet::StaticClass();
	}
	UClass* Z_Construct_UClass_ULevelStreamingKismet()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_ULevelStreaming();
			Z_Construct_UPackage_Engine();
			OuterClass = ULevelStreamingKismet::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bInitiallyVisible, ULevelStreamingKismet, uint8);
				UProperty* NewProp_bInitiallyVisible = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bInitiallyVisible"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bInitiallyVisible, ULevelStreamingKismet), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bInitiallyVisible, ULevelStreamingKismet), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bInitiallyLoaded, ULevelStreamingKismet, uint8);
				UProperty* NewProp_bInitiallyLoaded = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bInitiallyLoaded"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bInitiallyLoaded, ULevelStreamingKismet), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bInitiallyLoaded, ULevelStreamingKismet), sizeof(uint8), false);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/LevelStreamingKismet.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/LevelStreamingKismet.h"));
				MetaData->SetValue(NewProp_bInitiallyVisible, TEXT("Category"), TEXT("LevelStreaming"));
				MetaData->SetValue(NewProp_bInitiallyVisible, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/LevelStreamingKismet.h"));
				MetaData->SetValue(NewProp_bInitiallyVisible, TEXT("ToolTip"), TEXT("Whether the level should be visible at startup if it is loaded"));
				MetaData->SetValue(NewProp_bInitiallyLoaded, TEXT("Category"), TEXT("LevelStreaming"));
				MetaData->SetValue(NewProp_bInitiallyLoaded, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/LevelStreamingKismet.h"));
				MetaData->SetValue(NewProp_bInitiallyLoaded, TEXT("ToolTip"), TEXT("Whether the level should be loaded at startup"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ULevelStreamingKismet(Z_Construct_UClass_ULevelStreamingKismet, TEXT("ULevelStreamingKismet"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(ULevelStreamingKismet);
	UClass* Z_Construct_UClass_ULevelStreamingPersistent_NoRegister()
	{
		return ULevelStreamingPersistent::StaticClass();
	}
	UClass* Z_Construct_UClass_ULevelStreamingPersistent()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_ULevelStreaming();
			Z_Construct_UPackage_Engine();
			OuterClass = ULevelStreamingPersistent::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20801088;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/LevelStreamingPersistent.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/LevelStreamingPersistent.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ULevelStreamingPersistent(Z_Construct_UClass_ULevelStreamingPersistent, TEXT("ULevelStreamingPersistent"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(ULevelStreamingPersistent);
	UClass* Z_Construct_UClass_ULightmappedSurfaceCollection_NoRegister()
	{
		return ULightmappedSurfaceCollection::StaticClass();
	}
	UClass* Z_Construct_UClass_ULightmappedSurfaceCollection()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = ULightmappedSurfaceCollection::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20081080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Surfaces = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Surfaces"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Surfaces, ULightmappedSurfaceCollection), 0x0000000000000001);
				UProperty* NewProp_Surfaces_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Surfaces, TEXT("Surfaces"), RF_Public|RF_Transient|RF_Native) UIntProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
				UProperty* NewProp_SourceModel = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SourceModel"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(SourceModel, ULightmappedSurfaceCollection), 0x0000000000000001, UModel::StaticClass());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Lightmass/LightmappedSurfaceCollection.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Lightmass/LightmappedSurfaceCollection.h"));
				MetaData->SetValue(NewProp_Surfaces, TEXT("Category"), TEXT("LightmappedSurfaceCollection"));
				MetaData->SetValue(NewProp_Surfaces, TEXT("ModuleRelativePath"), TEXT("Classes/Lightmass/LightmappedSurfaceCollection.h"));
				MetaData->SetValue(NewProp_Surfaces, TEXT("ToolTip"), TEXT("An array of the surface indices grouped into a single static lighting mapping."));
				MetaData->SetValue(NewProp_SourceModel, TEXT("Category"), TEXT("LightmappedSurfaceCollection"));
				MetaData->SetValue(NewProp_SourceModel, TEXT("ModuleRelativePath"), TEXT("Classes/Lightmass/LightmappedSurfaceCollection.h"));
				MetaData->SetValue(NewProp_SourceModel, TEXT("ToolTip"), TEXT("The UModel these surfaces come from."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ULightmappedSurfaceCollection(Z_Construct_UClass_ULightmappedSurfaceCollection, TEXT("ULightmappedSurfaceCollection"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(ULightmappedSurfaceCollection);
	UClass* Z_Construct_UClass_ULightmassPrimitiveSettingsObject_NoRegister()
	{
		return ULightmassPrimitiveSettingsObject::StaticClass();
	}
	UClass* Z_Construct_UClass_ULightmassPrimitiveSettingsObject()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = ULightmassPrimitiveSettingsObject::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20083080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_LightmassSettings = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LightmassSettings"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LightmassSettings, ULightmassPrimitiveSettingsObject), 0x0000000000000001, Z_Construct_UScriptStruct_FLightmassPrimitiveSettings());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Lightmass/LightmassPrimitiveSettingsObject.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Lightmass/LightmassPrimitiveSettingsObject.h"));
				MetaData->SetValue(NewProp_LightmassSettings, TEXT("Category"), TEXT("Lightmass"));
				MetaData->SetValue(NewProp_LightmassSettings, TEXT("ModuleRelativePath"), TEXT("Classes/Lightmass/LightmassPrimitiveSettingsObject.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ULightmassPrimitiveSettingsObject(Z_Construct_UClass_ULightmassPrimitiveSettingsObject, TEXT("ULightmassPrimitiveSettingsObject"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(ULightmassPrimitiveSettingsObject);
	UScriptStruct* Z_Construct_UScriptStruct_FClientReceiveData()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FClientReceiveData_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("ClientReceiveData"), sizeof(FClientReceiveData), Get_Z_Construct_UScriptStruct_FClientReceiveData_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ClientReceiveData"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FClientReceiveData>, EStructFlags(0x00000201));
			UProperty* NewProp_OptionalObject = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("OptionalObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(OptionalObject, FClientReceiveData), 0x0000000000000000, Z_Construct_UClass_UObject_NoRegister());
			UProperty* NewProp_RelatedPlayerState_2 = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RelatedPlayerState_2"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(RelatedPlayerState_2, FClientReceiveData), 0x0000000000000000, Z_Construct_UClass_APlayerState_NoRegister());
			UProperty* NewProp_RelatedPlayerState_1 = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RelatedPlayerState_1"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(RelatedPlayerState_1, FClientReceiveData), 0x0000000000000000, Z_Construct_UClass_APlayerState_NoRegister());
			UProperty* NewProp_MessageString = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MessageString"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(MessageString, FClientReceiveData), 0x0000000000000000);
			UProperty* NewProp_MessageIndex = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MessageIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MessageIndex, FClientReceiveData), 0x0000000000000000);
			UProperty* NewProp_MessageType = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MessageType"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(MessageType, FClientReceiveData), 0x0000000000000000);
			UProperty* NewProp_LocalPC = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LocalPC"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(LocalPC, FClientReceiveData), 0x0000000000000000, Z_Construct_UClass_APlayerController_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/LocalMessage.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Handles the many pieces of data passed into Client Receive"));
			MetaData->SetValue(NewProp_OptionalObject, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/LocalMessage.h"));
			MetaData->SetValue(NewProp_RelatedPlayerState_2, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/LocalMessage.h"));
			MetaData->SetValue(NewProp_RelatedPlayerState_1, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/LocalMessage.h"));
			MetaData->SetValue(NewProp_MessageString, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/LocalMessage.h"));
			MetaData->SetValue(NewProp_MessageIndex, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/LocalMessage.h"));
			MetaData->SetValue(NewProp_MessageType, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/LocalMessage.h"));
			MetaData->SetValue(NewProp_LocalPC, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/LocalMessage.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FClientReceiveData_CRC() { return 1256533001U; }
	UClass* Z_Construct_UClass_ULocalMessage_NoRegister()
	{
		return ULocalMessage::StaticClass();
	}
	UClass* Z_Construct_UClass_ULocalMessage()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = ULocalMessage::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("GameFramework/LocalMessage.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/LocalMessage.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ULocalMessage(Z_Construct_UClass_ULocalMessage, TEXT("ULocalMessage"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(ULocalMessage);
	UClass* Z_Construct_UClass_UEngineMessage_NoRegister()
	{
		return UEngineMessage::StaticClass();
	}
	UClass* Z_Construct_UClass_UEngineMessage()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_ULocalMessage();
			Z_Construct_UPackage_Engine();
			OuterClass = UEngineMessage::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080081;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_NewSpecMessage = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NewSpecMessage"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(NewSpecMessage, UEngineMessage), 0x0000000000000000);
				UProperty* NewProp_NewPlayerMessage = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NewPlayerMessage"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(NewPlayerMessage, UEngineMessage), 0x0000000000000000);
				UProperty* NewProp_SpecEnteredMessage = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SpecEnteredMessage"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(SpecEnteredMessage, UEngineMessage), 0x0000000000000000);
				UProperty* NewProp_GlobalNameChange = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GlobalNameChange"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(GlobalNameChange, UEngineMessage), 0x0000000000000000);
				UProperty* NewProp_LeftMessage = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LeftMessage"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(LeftMessage, UEngineMessage), 0x0000000000000000);
				UProperty* NewProp_EnteredMessage = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EnteredMessage"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(EnteredMessage, UEngineMessage), 0x0000000000000000);
				UProperty* NewProp_MaxedOutMessage = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxedOutMessage"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(MaxedOutMessage, UEngineMessage), 0x0000000000000000);
				UProperty* NewProp_FailedPlaceMessage = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FailedPlaceMessage"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(FailedPlaceMessage, UEngineMessage), 0x0000000000000000);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("GameFramework/EngineMessage.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/EngineMessage.h"));
				MetaData->SetValue(NewProp_NewSpecMessage, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/EngineMessage.h"));
				MetaData->SetValue(NewProp_NewSpecMessage, TEXT("ToolTip"), TEXT("Message when a new spectator enters the server (if spectator is unnamed)."));
				MetaData->SetValue(NewProp_NewPlayerMessage, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/EngineMessage.h"));
				MetaData->SetValue(NewProp_NewPlayerMessage, TEXT("ToolTip"), TEXT("Message when a new player enters the server (if player is unnamed)."));
				MetaData->SetValue(NewProp_SpecEnteredMessage, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/EngineMessage.h"));
				MetaData->SetValue(NewProp_SpecEnteredMessage, TEXT("ToolTip"), TEXT("Message when a new spectator enters the server (if spectator has a player name)."));
				MetaData->SetValue(NewProp_GlobalNameChange, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/EngineMessage.h"));
				MetaData->SetValue(NewProp_GlobalNameChange, TEXT("ToolTip"), TEXT("Message when a player changes his name."));
				MetaData->SetValue(NewProp_LeftMessage, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/EngineMessage.h"));
				MetaData->SetValue(NewProp_LeftMessage, TEXT("ToolTip"), TEXT("Message when a player leaves the game."));
				MetaData->SetValue(NewProp_EnteredMessage, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/EngineMessage.h"));
				MetaData->SetValue(NewProp_EnteredMessage, TEXT("ToolTip"), TEXT("Message when a new player enters the game."));
				MetaData->SetValue(NewProp_MaxedOutMessage, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/EngineMessage.h"));
				MetaData->SetValue(NewProp_MaxedOutMessage, TEXT("ToolTip"), TEXT("Message when player join attempt is refused because the server is at capacity."));
				MetaData->SetValue(NewProp_FailedPlaceMessage, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/EngineMessage.h"));
				MetaData->SetValue(NewProp_FailedPlaceMessage, TEXT("ToolTip"), TEXT("Message displayed in message dialog when player pawn fails to spawn because no playerstart was available."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UEngineMessage(Z_Construct_UClass_UEngineMessage, TEXT("UEngineMessage"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UEngineMessage);
	UScriptStruct* Z_Construct_UScriptStruct_FExpressionOutput()
	{
		struct FExpressionOutput
		{
			FString OutputName;
			int32 Mask;
			int32 MaskR;
			int32 MaskG;
			int32 MaskB;
			int32 MaskA;
		};

		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FExpressionOutput_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("ExpressionOutput"), sizeof(FExpressionOutput), Get_Z_Construct_UScriptStruct_FExpressionOutput_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ExpressionOutput"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, NULL, EStructFlags(0x00000008), sizeof(FExpressionOutput), ALIGNOF(FExpressionOutput));
			UProperty* NewProp_MaskA = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MaskA"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MaskA, FExpressionOutput), 0x0000000000000000);
			UProperty* NewProp_MaskB = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MaskB"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MaskB, FExpressionOutput), 0x0000000000000000);
			UProperty* NewProp_MaskG = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MaskG"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MaskG, FExpressionOutput), 0x0000000000000000);
			UProperty* NewProp_MaskR = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MaskR"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MaskR, FExpressionOutput), 0x0000000000000000);
			UProperty* NewProp_Mask = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Mask"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Mask, FExpressionOutput), 0x0000000000000000);
			UProperty* NewProp_OutputName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("OutputName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(OutputName, FExpressionOutput), 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Struct that represents an expression's output."));
			MetaData->SetValue(NewProp_MaskA, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
			MetaData->SetValue(NewProp_MaskB, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
			MetaData->SetValue(NewProp_MaskG, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
			MetaData->SetValue(NewProp_MaskR, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
			MetaData->SetValue(NewProp_Mask, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
			MetaData->SetValue(NewProp_OutputName, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FExpressionOutput_CRC() { return 2604691302U; }
	UScriptStruct* Z_Construct_UScriptStruct_FMaterialAttributesInput()
	{
		struct FExpressionInput
		{
			UMaterialExpression* Expression;
			int32 OutputIndex;
			FString InputName;
			int32 Mask;
			int32 MaskR;
			int32 MaskG;
			int32 MaskB;
			int32 MaskA;
			int32 GCC64_Padding;
		};

		struct FMaterialAttributesInput : public FExpressionInput
		{
		};

		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FMaterialAttributesInput_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("MaterialAttributesInput"), sizeof(FMaterialAttributesInput), Get_Z_Construct_UScriptStruct_FMaterialAttributesInput_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MaterialAttributesInput"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FExpressionInput(), NULL, EStructFlags(0x00000008), sizeof(FMaterialAttributesInput), ALIGNOF(FMaterialAttributesInput));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FMaterialAttributesInput_CRC() { return 3731953292U; }
	UScriptStruct* Z_Construct_UScriptStruct_FExpressionInput()
	{
		struct FExpressionInput
		{
			UMaterialExpression* Expression;
			int32 OutputIndex;
			FString InputName;
			int32 Mask;
			int32 MaskR;
			int32 MaskG;
			int32 MaskB;
			int32 MaskA;
			int32 GCC64_Padding;
		};

		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FExpressionInput_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("ExpressionInput"), sizeof(FExpressionInput), Get_Z_Construct_UScriptStruct_FExpressionInput_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ExpressionInput"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, NULL, EStructFlags(0x00000008), sizeof(FExpressionInput), ALIGNOF(FExpressionInput));
			UProperty* NewProp_GCC64_Padding = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("GCC64_Padding"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(GCC64_Padding, FExpressionInput), 0x0000000000000000);
			UProperty* NewProp_MaskA = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MaskA"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MaskA, FExpressionInput), 0x0000000000000000);
			UProperty* NewProp_MaskB = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MaskB"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MaskB, FExpressionInput), 0x0000000000000000);
			UProperty* NewProp_MaskG = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MaskG"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MaskG, FExpressionInput), 0x0000000000000000);
			UProperty* NewProp_MaskR = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MaskR"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MaskR, FExpressionInput), 0x0000000000000000);
			UProperty* NewProp_Mask = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Mask"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Mask, FExpressionInput), 0x0000000000000000);
			UProperty* NewProp_InputName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("InputName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(InputName, FExpressionInput), 0x0000000000000000);
			UProperty* NewProp_OutputIndex = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("OutputIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(OutputIndex, FExpressionInput), 0x0000000000000000);
			UProperty* NewProp_Expression = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Expression"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Expression, FExpressionInput), 0x0000000000000000, Z_Construct_UClass_UMaterialExpression_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("@warning: FExpressionInput is mirrored in MaterialShared.h and manually \"subclassed\" in Material.h (FMaterialInput)"));
			MetaData->SetValue(NewProp_GCC64_Padding, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
			MetaData->SetValue(NewProp_MaskA, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
			MetaData->SetValue(NewProp_MaskB, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
			MetaData->SetValue(NewProp_MaskG, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
			MetaData->SetValue(NewProp_MaskR, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
			MetaData->SetValue(NewProp_Mask, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
			MetaData->SetValue(NewProp_InputName, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
			MetaData->SetValue(NewProp_InputName, TEXT("ToolTip"), TEXT("optional FName of the input.\nNote that this is the only member which is not derived from the output currently connected."));
			MetaData->SetValue(NewProp_OutputIndex, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
			MetaData->SetValue(NewProp_OutputIndex, TEXT("ToolTip"), TEXT("Index into Expression's outputs array that this input is connected to."));
			MetaData->SetValue(NewProp_Expression, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
			MetaData->SetValue(NewProp_Expression, TEXT("ToolTip"), TEXT("UMaterial expression that this input is connected to, or NULL if not connected."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FExpressionInput_CRC() { return 2308625586U; }
	UClass* Z_Construct_UClass_UMaterialExpression_NoRegister()
	{
		return UMaterialExpression::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpression()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpression::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100081;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Outputs = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Outputs"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Outputs, UMaterialExpression), 0x0000000000000000);
				UProperty* NewProp_Outputs_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Outputs, TEXT("Outputs"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionOutput());
				UProperty* NewProp_MenuCategories = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MenuCategories"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(MenuCategories, UMaterialExpression), 0x0000000000000000);
				UProperty* NewProp_MenuCategories_Inner = new(EC_InternalUseOnlyConstructor, NewProp_MenuCategories, TEXT("MenuCategories"), RF_Public|RF_Transient|RF_Native) UTextProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bShowOutputs, UMaterialExpression, uint8);
				UProperty* NewProp_bShowOutputs = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bShowOutputs"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bShowOutputs, UMaterialExpression), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bShowOutputs, UMaterialExpression), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bShowInputs, UMaterialExpression, uint8);
				UProperty* NewProp_bShowInputs = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bShowInputs"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bShowInputs, UMaterialExpression), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bShowInputs, UMaterialExpression), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bShaderInputData, UMaterialExpression, uint8);
				UProperty* NewProp_bShaderInputData = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bShaderInputData"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bShaderInputData, UMaterialExpression), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bShaderInputData, UMaterialExpression), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCollapsed, UMaterialExpression, uint8);
				UProperty* NewProp_bCollapsed = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bCollapsed"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCollapsed, UMaterialExpression), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bCollapsed, UMaterialExpression), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bHidePreviewWindow, UMaterialExpression, uint8);
				UProperty* NewProp_bHidePreviewWindow = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bHidePreviewWindow"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bHidePreviewWindow, UMaterialExpression), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bHidePreviewWindow, UMaterialExpression), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bShowOutputNameOnPin, UMaterialExpression, uint8);
				UProperty* NewProp_bShowOutputNameOnPin = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bShowOutputNameOnPin"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bShowOutputNameOnPin, UMaterialExpression), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bShowOutputNameOnPin, UMaterialExpression), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCommentBubbleVisible, UMaterialExpression, uint8);
				UProperty* NewProp_bCommentBubbleVisible = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bCommentBubbleVisible"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCommentBubbleVisible, UMaterialExpression), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bCommentBubbleVisible, UMaterialExpression), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsParameterExpression, UMaterialExpression, uint8);
				UProperty* NewProp_bIsParameterExpression = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsParameterExpression"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsParameterExpression, UMaterialExpression), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bIsParameterExpression, UMaterialExpression), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bNeedToUpdatePreview, UMaterialExpression, uint8);
				UProperty* NewProp_bNeedToUpdatePreview = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bNeedToUpdatePreview"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bNeedToUpdatePreview, UMaterialExpression), 0x0000000000002000, CPP_BOOL_PROPERTY_BITMASK(bNeedToUpdatePreview, UMaterialExpression), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bRealtimePreview, UMaterialExpression, uint8);
				UProperty* NewProp_bRealtimePreview = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bRealtimePreview"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bRealtimePreview, UMaterialExpression), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bRealtimePreview, UMaterialExpression), sizeof(uint8), false);
				UProperty* NewProp_BorderColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BorderColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(BorderColor, UMaterialExpression), 0x0000000000000000, Z_Construct_UScriptStruct_FColor());
				UProperty* NewProp_Desc = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Desc"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Desc, UMaterialExpression), 0x0000000000000001);
				UProperty* NewProp_Function = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Function"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Function, UMaterialExpression), 0x0000000000000000, Z_Construct_UClass_UMaterialFunction_NoRegister());
				UProperty* NewProp_Material = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Material"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Material, UMaterialExpression), 0x0000000000000000, Z_Construct_UClass_UMaterial_NoRegister());
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_MaterialExpressionGuid = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaterialExpressionGuid"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MaterialExpressionGuid, UMaterialExpression), 0x0000000800000000, Z_Construct_UScriptStruct_FGuid());
				UProperty* NewProp_MaterialExpressionEditorY = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaterialExpressionEditorY"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MaterialExpressionEditorY, UMaterialExpression), 0x0000000800000000);
				UProperty* NewProp_MaterialExpressionEditorX = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaterialExpressionEditorX"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MaterialExpressionEditorX, UMaterialExpression), 0x0000000800000000);
#endif // WITH_EDITORONLY_DATA
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpression.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
				MetaData->SetValue(NewProp_Outputs, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
				MetaData->SetValue(NewProp_Outputs, TEXT("ToolTip"), TEXT("The expression's outputs, which are set in default properties by derived classes."));
				MetaData->SetValue(NewProp_MenuCategories, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
				MetaData->SetValue(NewProp_MenuCategories, TEXT("ToolTip"), TEXT("Localized categories to sort this expression into..."));
				MetaData->SetValue(NewProp_bShowOutputs, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
				MetaData->SetValue(NewProp_bShowOutputs, TEXT("ToolTip"), TEXT("Whether to draw the expression's outputs."));
				MetaData->SetValue(NewProp_bShowInputs, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
				MetaData->SetValue(NewProp_bShowInputs, TEXT("ToolTip"), TEXT("Whether to draw the expression's inputs."));
				MetaData->SetValue(NewProp_bShaderInputData, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
				MetaData->SetValue(NewProp_bShaderInputData, TEXT("ToolTip"), TEXT("Whether the node represents an input to the shader or not.  Used to color the node's background."));
				MetaData->SetValue(NewProp_bCollapsed, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
				MetaData->SetValue(NewProp_bCollapsed, TEXT("ToolTip"), TEXT("If true, show a collapsed version of the node"));
				MetaData->SetValue(NewProp_bHidePreviewWindow, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
				MetaData->SetValue(NewProp_bHidePreviewWindow, TEXT("ToolTip"), TEXT("If true, do not render the preview window for the expression"));
				MetaData->SetValue(NewProp_bShowOutputNameOnPin, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
				MetaData->SetValue(NewProp_bShowOutputNameOnPin, TEXT("ToolTip"), TEXT("If true, use the output name as the label for the pin"));
				MetaData->SetValue(NewProp_bCommentBubbleVisible, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
				MetaData->SetValue(NewProp_bCommentBubbleVisible, TEXT("ToolTip"), TEXT("If true, the comment bubble will be visible in the graph editor"));
				MetaData->SetValue(NewProp_bIsParameterExpression, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
				MetaData->SetValue(NewProp_bIsParameterExpression, TEXT("ToolTip"), TEXT("Indicates that this is a 'parameter' type of expression and should always be loaded (ie not cooked away) because we might want the default parameter."));
				MetaData->SetValue(NewProp_bNeedToUpdatePreview, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
				MetaData->SetValue(NewProp_bNeedToUpdatePreview, TEXT("ToolTip"), TEXT("If true, we should update the preview next render. This is set when changing bRealtimePreview."));
				MetaData->SetValue(NewProp_bRealtimePreview, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
				MetaData->SetValue(NewProp_bRealtimePreview, TEXT("ToolTip"), TEXT("Set to true by RecursiveUpdateRealtimePreview() if the expression's preview needs to be updated in realtime in the material editor."));
				MetaData->SetValue(NewProp_BorderColor, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
				MetaData->SetValue(NewProp_BorderColor, TEXT("ToolTip"), TEXT("Color of the expression's border outline."));
				MetaData->SetValue(NewProp_Desc, TEXT("Category"), TEXT("MaterialExpression"));
				MetaData->SetValue(NewProp_Desc, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
				MetaData->SetValue(NewProp_Desc, TEXT("MultiLine"), TEXT("TRUE"));
				MetaData->SetValue(NewProp_Desc, TEXT("ToolTip"), TEXT("A description that level designers can add (shows in the material editor UI)."));
				MetaData->SetValue(NewProp_Function, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
				MetaData->SetValue(NewProp_Function, TEXT("ToolTip"), TEXT("The material function that this expression is being used with, if any.\nThis will be NULL if the expression belongs to a function that is currently being edited,"));
				MetaData->SetValue(NewProp_Material, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
				MetaData->SetValue(NewProp_Material, TEXT("ToolTip"), TEXT("The material that this expression is currently being compiled in.\nThis is not necessarily the object which owns this expression, for example a preview material compiling a material function's expressions."));
				MetaData->SetValue(NewProp_MaterialExpressionGuid, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
				MetaData->SetValue(NewProp_MaterialExpressionGuid, TEXT("ToolTip"), TEXT("GUID to uniquely identify this node, to help the tutorials out"));
				MetaData->SetValue(NewProp_MaterialExpressionEditorY, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
				MetaData->SetValue(NewProp_MaterialExpressionEditorX, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpression(Z_Construct_UClass_UMaterialExpression, TEXT("UMaterialExpression"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpression);
	UClass* Z_Construct_UClass_UMaterialExpressionAbs_NoRegister()
	{
		return UMaterialExpressionAbs::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionAbs()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionAbs::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Input"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Input, UMaterialExpressionAbs), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionAbs.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionAbs.h"));
				MetaData->SetValue(NewProp_Input, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionAbs.h"));
				MetaData->SetValue(NewProp_Input, TEXT("ToolTip"), TEXT("Link to the input expression to be evaluated"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionAbs(Z_Construct_UClass_UMaterialExpressionAbs, TEXT("UMaterialExpressionAbs"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionAbs);
	UClass* Z_Construct_UClass_UMaterialExpressionActorPositionWS_NoRegister()
	{
		return UMaterialExpressionActorPositionWS::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionActorPositionWS()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionActorPositionWS::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionActorPositionWS.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionActorPositionWS.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionActorPositionWS(Z_Construct_UClass_UMaterialExpressionActorPositionWS, TEXT("UMaterialExpressionActorPositionWS"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionActorPositionWS);
	UClass* Z_Construct_UClass_UMaterialExpressionAdd_NoRegister()
	{
		return UMaterialExpressionAdd::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionAdd()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionAdd::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ConstB = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConstB"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ConstB, UMaterialExpressionAdd), 0x0000000000000001);
				UProperty* NewProp_ConstA = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConstA"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ConstA, UMaterialExpressionAdd), 0x0000000000000001);
				UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(B, UMaterialExpressionAdd), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, UMaterialExpressionAdd), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionAdd.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionAdd.h"));
				MetaData->SetValue(NewProp_ConstB, TEXT("Category"), TEXT("MaterialExpressionAdd"));
				MetaData->SetValue(NewProp_ConstB, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionAdd.h"));
				MetaData->SetValue(NewProp_ConstB, TEXT("OverridingInputProperty"), TEXT("B"));
				MetaData->SetValue(NewProp_ConstB, TEXT("ToolTip"), TEXT("only used if B is not hooked up"));
				MetaData->SetValue(NewProp_ConstA, TEXT("Category"), TEXT("MaterialExpressionAdd"));
				MetaData->SetValue(NewProp_ConstA, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionAdd.h"));
				MetaData->SetValue(NewProp_ConstA, TEXT("OverridingInputProperty"), TEXT("A"));
				MetaData->SetValue(NewProp_ConstA, TEXT("ToolTip"), TEXT("only used if A is not hooked up"));
				MetaData->SetValue(NewProp_B, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionAdd.h"));
				MetaData->SetValue(NewProp_B, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_B, TEXT("ToolTip"), TEXT("Defaults to 'ConstB' if not specified"));
				MetaData->SetValue(NewProp_A, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionAdd.h"));
				MetaData->SetValue(NewProp_A, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_A, TEXT("ToolTip"), TEXT("Defaults to 'ConstA' if not specified"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionAdd(Z_Construct_UClass_UMaterialExpressionAdd, TEXT("UMaterialExpressionAdd"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionAdd);
	UClass* Z_Construct_UClass_UMaterialExpressionAppendVector_NoRegister()
	{
		return UMaterialExpressionAppendVector::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionAppendVector()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionAppendVector::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(B, UMaterialExpressionAppendVector), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, UMaterialExpressionAppendVector), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionAppendVector.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionAppendVector.h"));
				MetaData->SetValue(NewProp_B, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionAppendVector.h"));
				MetaData->SetValue(NewProp_A, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionAppendVector.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionAppendVector(Z_Construct_UClass_UMaterialExpressionAppendVector, TEXT("UMaterialExpressionAppendVector"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionAppendVector);
	UClass* Z_Construct_UClass_UMaterialExpressionAtmosphericFogColor_NoRegister()
	{
		return UMaterialExpressionAtmosphericFogColor::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionAtmosphericFogColor()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionAtmosphericFogColor::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_WorldPosition = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WorldPosition"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(WorldPosition, UMaterialExpressionAtmosphericFogColor), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionAtmosphericFogColor.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionAtmosphericFogColor.h"));
				MetaData->SetValue(NewProp_WorldPosition, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionAtmosphericFogColor.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionAtmosphericFogColor(Z_Construct_UClass_UMaterialExpressionAtmosphericFogColor, TEXT("UMaterialExpressionAtmosphericFogColor"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionAtmosphericFogColor);
	UClass* Z_Construct_UClass_UMaterialExpressionBlackBody_NoRegister()
	{
		return UMaterialExpressionBlackBody::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionBlackBody()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionBlackBody::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Temp = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Temp"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Temp, UMaterialExpressionBlackBody), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionBlackBody.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionBlackBody.h"));
				MetaData->SetValue(NewProp_Temp, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionBlackBody.h"));
				MetaData->SetValue(NewProp_Temp, TEXT("ToolTip"), TEXT("Temperature"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionBlackBody(Z_Construct_UClass_UMaterialExpressionBlackBody, TEXT("UMaterialExpressionBlackBody"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionBlackBody);
	UClass* Z_Construct_UClass_UMaterialExpressionBreakMaterialAttributes_NoRegister()
	{
		return UMaterialExpressionBreakMaterialAttributes::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionBreakMaterialAttributes()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionBreakMaterialAttributes::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_MaterialAttributes = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaterialAttributes"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MaterialAttributes, UMaterialExpressionBreakMaterialAttributes), 0x0000000000000000, Z_Construct_UScriptStruct_FMaterialAttributesInput());
				UProperty* NewProp_Struct = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Struct"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Struct, UMaterialExpressionBreakMaterialAttributes), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionBreakMaterialAttributes.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionBreakMaterialAttributes.h"));
				MetaData->SetValue(NewProp_MaterialAttributes, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionBreakMaterialAttributes.h"));
				MetaData->SetValue(NewProp_Struct, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionBreakMaterialAttributes.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionBreakMaterialAttributes(Z_Construct_UClass_UMaterialExpressionBreakMaterialAttributes, TEXT("UMaterialExpressionBreakMaterialAttributes"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionBreakMaterialAttributes);
	UClass* Z_Construct_UClass_UMaterialExpressionBumpOffset_NoRegister()
	{
		return UMaterialExpressionBumpOffset::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionBumpOffset()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionBumpOffset::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ConstCoordinate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConstCoordinate"), RF_Public|RF_Transient|RF_Native) UUInt32Property(CPP_PROPERTY_BASE(ConstCoordinate, UMaterialExpressionBumpOffset), 0x0000000000000001);
				UProperty* NewProp_ReferencePlane = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ReferencePlane"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReferencePlane, UMaterialExpressionBumpOffset), 0x0000000000000001);
				UProperty* NewProp_HeightRatio = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HeightRatio"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(HeightRatio, UMaterialExpressionBumpOffset), 0x0000000000000001);
				UProperty* NewProp_HeightRatioInput = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HeightRatioInput"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(HeightRatioInput, UMaterialExpressionBumpOffset), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_Height = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Height"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Height, UMaterialExpressionBumpOffset), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_Coordinate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Coordinate"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Coordinate, UMaterialExpressionBumpOffset), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionBumpOffset.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionBumpOffset.h"));
				MetaData->SetValue(NewProp_ConstCoordinate, TEXT("Category"), TEXT("MaterialExpressionBumpOffset"));
				MetaData->SetValue(NewProp_ConstCoordinate, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionBumpOffset.h"));
				MetaData->SetValue(NewProp_ConstCoordinate, TEXT("ToolTip"), TEXT("only used if Coordinate is not hooked up"));
				MetaData->SetValue(NewProp_ReferencePlane, TEXT("Category"), TEXT("MaterialExpressionBumpOffset"));
				MetaData->SetValue(NewProp_ReferencePlane, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionBumpOffset.h"));
				MetaData->SetValue(NewProp_ReferencePlane, TEXT("ToolTip"), TEXT("Perceived height as a fraction of width."));
				MetaData->SetValue(NewProp_HeightRatio, TEXT("Category"), TEXT("MaterialExpressionBumpOffset"));
				MetaData->SetValue(NewProp_HeightRatio, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionBumpOffset.h"));
				MetaData->SetValue(NewProp_HeightRatio, TEXT("OverridingInputProperty"), TEXT("HeightRatioInput"));
				MetaData->SetValue(NewProp_HeightRatioInput, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionBumpOffset.h"));
				MetaData->SetValue(NewProp_HeightRatioInput, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_Height, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionBumpOffset.h"));
				MetaData->SetValue(NewProp_Coordinate, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionBumpOffset.h"));
				MetaData->SetValue(NewProp_Coordinate, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_Coordinate, TEXT("ToolTip"), TEXT("Defaults to 'ConstCoordinate' if not specified"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionBumpOffset(Z_Construct_UClass_UMaterialExpressionBumpOffset, TEXT("UMaterialExpressionBumpOffset"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionBumpOffset);
	UClass* Z_Construct_UClass_UMaterialExpressionCameraPositionWS_NoRegister()
	{
		return UMaterialExpressionCameraPositionWS::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionCameraPositionWS()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionCameraPositionWS::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionCameraPositionWS.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionCameraPositionWS.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionCameraPositionWS(Z_Construct_UClass_UMaterialExpressionCameraPositionWS, TEXT("UMaterialExpressionCameraPositionWS"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionCameraPositionWS);
	UClass* Z_Construct_UClass_UMaterialExpressionCameraVectorWS_NoRegister()
	{
		return UMaterialExpressionCameraVectorWS::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionCameraVectorWS()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionCameraVectorWS::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionCameraVectorWS.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionCameraVectorWS.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionCameraVectorWS(Z_Construct_UClass_UMaterialExpressionCameraVectorWS, TEXT("UMaterialExpressionCameraVectorWS"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionCameraVectorWS);
	UClass* Z_Construct_UClass_UMaterialExpressionCeil_NoRegister()
	{
		return UMaterialExpressionCeil::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionCeil()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionCeil::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Input"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Input, UMaterialExpressionCeil), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionCeil.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionCeil.h"));
				MetaData->SetValue(NewProp_Input, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionCeil.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionCeil(Z_Construct_UClass_UMaterialExpressionCeil, TEXT("UMaterialExpressionCeil"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionCeil);
	UEnum* Z_Construct_UEnum_Engine_EClampMode()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EClampMode_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EClampMode"), 0, Get_Z_Construct_UEnum_Engine_EClampMode_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EClampMode"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("CMODE_Clamp")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("CMODE_ClampMin")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("CMODE_ClampMax")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("CMODE_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionClamp.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EClampMode_CRC() { return 1636907705U; }
	UClass* Z_Construct_UClass_UMaterialExpressionClamp_NoRegister()
	{
		return UMaterialExpressionClamp::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionClamp()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionClamp::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_MaxDefault = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxDefault"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MaxDefault, UMaterialExpressionClamp), 0x0000000000000001);
				UProperty* NewProp_MinDefault = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MinDefault"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MinDefault, UMaterialExpressionClamp), 0x0000000000000001);
				UProperty* NewProp_ClampMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ClampMode"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(ClampMode, UMaterialExpressionClamp), 0x0000000000000001, Z_Construct_UEnum_Engine_EClampMode());
				UProperty* NewProp_Max = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Max"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Max, UMaterialExpressionClamp), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_Min = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Min"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Min, UMaterialExpressionClamp), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Input"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Input, UMaterialExpressionClamp), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionClamp.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionClamp.h"));
				MetaData->SetValue(NewProp_MaxDefault, TEXT("Category"), TEXT("MaterialExpressionClamp"));
				MetaData->SetValue(NewProp_MaxDefault, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionClamp.h"));
				MetaData->SetValue(NewProp_MaxDefault, TEXT("OverridingInputProperty"), TEXT("Max"));
				MetaData->SetValue(NewProp_MinDefault, TEXT("Category"), TEXT("MaterialExpressionClamp"));
				MetaData->SetValue(NewProp_MinDefault, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionClamp.h"));
				MetaData->SetValue(NewProp_MinDefault, TEXT("OverridingInputProperty"), TEXT("Min"));
				MetaData->SetValue(NewProp_ClampMode, TEXT("Category"), TEXT("MaterialExpressionClamp"));
				MetaData->SetValue(NewProp_ClampMode, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionClamp.h"));
				MetaData->SetValue(NewProp_Max, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionClamp.h"));
				MetaData->SetValue(NewProp_Max, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_Max, TEXT("ToolTip"), TEXT("Defaults to 'MaxDefault' if not specified"));
				MetaData->SetValue(NewProp_Min, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionClamp.h"));
				MetaData->SetValue(NewProp_Min, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_Min, TEXT("ToolTip"), TEXT("Defaults to 'MinDefault' if not specified"));
				MetaData->SetValue(NewProp_Input, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionClamp.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionClamp(Z_Construct_UClass_UMaterialExpressionClamp, TEXT("UMaterialExpressionClamp"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionClamp);
	UClass* Z_Construct_UClass_UMaterialExpressionCollectionParameter_NoRegister()
	{
		return UMaterialExpressionCollectionParameter::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionCollectionParameter()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionCollectionParameter::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ParameterId = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ParameterId"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ParameterId, UMaterialExpressionCollectionParameter), 0x0000000000000000, Z_Construct_UScriptStruct_FGuid());
				UProperty* NewProp_ParameterName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ParameterName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(ParameterName, UMaterialExpressionCollectionParameter), 0x0000000000000001);
				UProperty* NewProp_Collection = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Collection"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Collection, UMaterialExpressionCollectionParameter), 0x0000000000000001, Z_Construct_UClass_UMaterialParameterCollection_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionCollectionParameter.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionCollectionParameter.h"));
				MetaData->SetValue(NewProp_ParameterId, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionCollectionParameter.h"));
				MetaData->SetValue(NewProp_ParameterId, TEXT("ToolTip"), TEXT("Id that is set from the name, and used to handle renaming of collection parameters."));
				MetaData->SetValue(NewProp_ParameterName, TEXT("Category"), TEXT("MaterialExpressionCollectionParameter"));
				MetaData->SetValue(NewProp_ParameterName, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionCollectionParameter.h"));
				MetaData->SetValue(NewProp_ParameterName, TEXT("ToolTip"), TEXT("Name of the parameter being referenced."));
				MetaData->SetValue(NewProp_Collection, TEXT("Category"), TEXT("MaterialExpressionCollectionParameter"));
				MetaData->SetValue(NewProp_Collection, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionCollectionParameter.h"));
				MetaData->SetValue(NewProp_Collection, TEXT("ToolTip"), TEXT("The Parameter Collection to use."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionCollectionParameter(Z_Construct_UClass_UMaterialExpressionCollectionParameter, TEXT("UMaterialExpressionCollectionParameter"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionCollectionParameter);
	UClass* Z_Construct_UClass_UMaterialExpressionComment_NoRegister()
	{
		return UMaterialExpressionComment::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionComment()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionComment::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_CommentColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CommentColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(CommentColor, UMaterialExpressionComment), 0x0000000000000001, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_Text = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Text"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Text, UMaterialExpressionComment), 0x0000000000000001);
				UProperty* NewProp_SizeY = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SizeY"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(SizeY, UMaterialExpressionComment), 0x0000000000000000);
				UProperty* NewProp_SizeX = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SizeX"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(SizeX, UMaterialExpressionComment), 0x0000000000000000);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionComment.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionComment.h"));
				MetaData->SetValue(NewProp_CommentColor, TEXT("Category"), TEXT("MaterialExpressionComment"));
				MetaData->SetValue(NewProp_CommentColor, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionComment.h"));
				MetaData->SetValue(NewProp_CommentColor, TEXT("ToolTip"), TEXT("Color to style comment with"));
				MetaData->SetValue(NewProp_Text, TEXT("Category"), TEXT("MaterialExpressionComment"));
				MetaData->SetValue(NewProp_Text, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionComment.h"));
				MetaData->SetValue(NewProp_Text, TEXT("MultiLine"), TEXT("TRUE"));
				MetaData->SetValue(NewProp_SizeY, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionComment.h"));
				MetaData->SetValue(NewProp_SizeX, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionComment.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionComment(Z_Construct_UClass_UMaterialExpressionComment, TEXT("UMaterialExpressionComment"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionComment);
	UClass* Z_Construct_UClass_UMaterialExpressionComponentMask_NoRegister()
	{
		return UMaterialExpressionComponentMask::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionComponentMask()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionComponentMask::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(A, UMaterialExpressionComponentMask, uint8);
				UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("A"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(A, UMaterialExpressionComponentMask), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(A, UMaterialExpressionComponentMask), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(B, UMaterialExpressionComponentMask, uint8);
				UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("B"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(B, UMaterialExpressionComponentMask), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(B, UMaterialExpressionComponentMask), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(G, UMaterialExpressionComponentMask, uint8);
				UProperty* NewProp_G = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("G"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(G, UMaterialExpressionComponentMask), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(G, UMaterialExpressionComponentMask), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(R, UMaterialExpressionComponentMask, uint8);
				UProperty* NewProp_R = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("R"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(R, UMaterialExpressionComponentMask), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(R, UMaterialExpressionComponentMask), sizeof(uint8), false);
				UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Input"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Input, UMaterialExpressionComponentMask), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionComponentMask.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionComponentMask.h"));
				MetaData->SetValue(NewProp_A, TEXT("Category"), TEXT("MaterialExpressionComponentMask"));
				MetaData->SetValue(NewProp_A, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionComponentMask.h"));
				MetaData->SetValue(NewProp_B, TEXT("Category"), TEXT("MaterialExpressionComponentMask"));
				MetaData->SetValue(NewProp_B, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionComponentMask.h"));
				MetaData->SetValue(NewProp_G, TEXT("Category"), TEXT("MaterialExpressionComponentMask"));
				MetaData->SetValue(NewProp_G, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionComponentMask.h"));
				MetaData->SetValue(NewProp_R, TEXT("Category"), TEXT("MaterialExpressionComponentMask"));
				MetaData->SetValue(NewProp_R, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionComponentMask.h"));
				MetaData->SetValue(NewProp_Input, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionComponentMask.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionComponentMask(Z_Construct_UClass_UMaterialExpressionComponentMask, TEXT("UMaterialExpressionComponentMask"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionComponentMask);
	UClass* Z_Construct_UClass_UMaterialExpressionConstant_NoRegister()
	{
		return UMaterialExpressionConstant::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionConstant()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionConstant::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_R = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("R"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(R, UMaterialExpressionConstant), 0x0000000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionConstant.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionConstant.h"));
				MetaData->SetValue(NewProp_R, TEXT("Category"), TEXT("MaterialExpressionConstant"));
				MetaData->SetValue(NewProp_R, TEXT("DisplayName"), TEXT("Value"));
				MetaData->SetValue(NewProp_R, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionConstant.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionConstant(Z_Construct_UClass_UMaterialExpressionConstant, TEXT("UMaterialExpressionConstant"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionConstant);
	UClass* Z_Construct_UClass_UMaterialExpressionConstant2Vector_NoRegister()
	{
		return UMaterialExpressionConstant2Vector::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionConstant2Vector()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionConstant2Vector::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_G = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("G"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(G, UMaterialExpressionConstant2Vector), 0x0000000000000001);
				UProperty* NewProp_R = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("R"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(R, UMaterialExpressionConstant2Vector), 0x0000000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionConstant2Vector.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionConstant2Vector.h"));
				MetaData->SetValue(NewProp_G, TEXT("Category"), TEXT("MaterialExpressionConstant2Vector"));
				MetaData->SetValue(NewProp_G, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionConstant2Vector.h"));
				MetaData->SetValue(NewProp_R, TEXT("Category"), TEXT("MaterialExpressionConstant2Vector"));
				MetaData->SetValue(NewProp_R, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionConstant2Vector.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionConstant2Vector(Z_Construct_UClass_UMaterialExpressionConstant2Vector, TEXT("UMaterialExpressionConstant2Vector"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionConstant2Vector);
	UClass* Z_Construct_UClass_UMaterialExpressionConstant3Vector_NoRegister()
	{
		return UMaterialExpressionConstant3Vector::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionConstant3Vector()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionConstant3Vector::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Constant = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Constant"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Constant, UMaterialExpressionConstant3Vector), 0x0000000000000001, Z_Construct_UScriptStruct_FLinearColor());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionConstant3Vector.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionConstant3Vector.h"));
				MetaData->SetValue(NewProp_Constant, TEXT("Category"), TEXT("MaterialExpressionConstant3Vector"));
				MetaData->SetValue(NewProp_Constant, TEXT("HideAlphaChannel"), TEXT(""));
				MetaData->SetValue(NewProp_Constant, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionConstant3Vector.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionConstant3Vector(Z_Construct_UClass_UMaterialExpressionConstant3Vector, TEXT("UMaterialExpressionConstant3Vector"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionConstant3Vector);
	UClass* Z_Construct_UClass_UMaterialExpressionConstant4Vector_NoRegister()
	{
		return UMaterialExpressionConstant4Vector::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionConstant4Vector()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionConstant4Vector::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Constant = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Constant"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Constant, UMaterialExpressionConstant4Vector), 0x0000000000000001, Z_Construct_UScriptStruct_FLinearColor());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionConstant4Vector.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionConstant4Vector.h"));
				MetaData->SetValue(NewProp_Constant, TEXT("Category"), TEXT("MaterialExpressionConstant4Vector"));
				MetaData->SetValue(NewProp_Constant, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionConstant4Vector.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionConstant4Vector(Z_Construct_UClass_UMaterialExpressionConstant4Vector, TEXT("UMaterialExpressionConstant4Vector"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionConstant4Vector);
	UClass* Z_Construct_UClass_UMaterialExpressionConstantBiasScale_NoRegister()
	{
		return UMaterialExpressionConstantBiasScale::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionConstantBiasScale()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionConstantBiasScale::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Scale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Scale"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Scale, UMaterialExpressionConstantBiasScale), 0x0000000000000001);
				UProperty* NewProp_Bias = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Bias"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Bias, UMaterialExpressionConstantBiasScale), 0x0000000000000001);
				UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Input"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Input, UMaterialExpressionConstantBiasScale), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionConstantBiasScale.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionConstantBiasScale.h"));
				MetaData->SetValue(NewProp_Scale, TEXT("Category"), TEXT("MaterialExpressionConstantBiasScale"));
				MetaData->SetValue(NewProp_Scale, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionConstantBiasScale.h"));
				MetaData->SetValue(NewProp_Bias, TEXT("Category"), TEXT("MaterialExpressionConstantBiasScale"));
				MetaData->SetValue(NewProp_Bias, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionConstantBiasScale.h"));
				MetaData->SetValue(NewProp_Input, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionConstantBiasScale.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionConstantBiasScale(Z_Construct_UClass_UMaterialExpressionConstantBiasScale, TEXT("UMaterialExpressionConstantBiasScale"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionConstantBiasScale);
	UClass* Z_Construct_UClass_UMaterialExpressionCosine_NoRegister()
	{
		return UMaterialExpressionCosine::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionCosine()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionCosine::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Period = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Period"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Period, UMaterialExpressionCosine), 0x0000000000000001);
				UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Input"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Input, UMaterialExpressionCosine), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionCosine.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionCosine.h"));
				MetaData->SetValue(NewProp_Period, TEXT("Category"), TEXT("MaterialExpressionCosine"));
				MetaData->SetValue(NewProp_Period, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionCosine.h"));
				MetaData->SetValue(NewProp_Input, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionCosine.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionCosine(Z_Construct_UClass_UMaterialExpressionCosine, TEXT("UMaterialExpressionCosine"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionCosine);
	UClass* Z_Construct_UClass_UMaterialExpressionCrossProduct_NoRegister()
	{
		return UMaterialExpressionCrossProduct::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionCrossProduct()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionCrossProduct::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(B, UMaterialExpressionCrossProduct), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, UMaterialExpressionCrossProduct), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionCrossProduct.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionCrossProduct.h"));
				MetaData->SetValue(NewProp_B, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionCrossProduct.h"));
				MetaData->SetValue(NewProp_A, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionCrossProduct.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionCrossProduct(Z_Construct_UClass_UMaterialExpressionCrossProduct, TEXT("UMaterialExpressionCrossProduct"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionCrossProduct);
	UEnum* Z_Construct_UEnum_Engine_ECustomMaterialOutputType()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_ECustomMaterialOutputType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ECustomMaterialOutputType"), 0, Get_Z_Construct_UEnum_Engine_ECustomMaterialOutputType_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ECustomMaterialOutputType"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("CMOT_Float1")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("CMOT_Float2")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("CMOT_Float3")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("CMOT_Float4")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("CMOT_MAX")), 4));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionCustom.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_ECustomMaterialOutputType_CRC() { return 3404321401U; }
	UScriptStruct* Z_Construct_UScriptStruct_FCustomInput()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FCustomInput_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("CustomInput"), sizeof(FCustomInput), Get_Z_Construct_UScriptStruct_FCustomInput_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CustomInput"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FCustomInput>, EStructFlags(0x00000001));
			UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Input"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Input, FCustomInput), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
			UProperty* NewProp_InputName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("InputName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(InputName, FCustomInput), 0x0000000000000001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionCustom.h"));
			MetaData->SetValue(NewProp_Input, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionCustom.h"));
			MetaData->SetValue(NewProp_InputName, TEXT("Category"), TEXT("CustomInput"));
			MetaData->SetValue(NewProp_InputName, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionCustom.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FCustomInput_CRC() { return 1390065261U; }
	UClass* Z_Construct_UClass_UMaterialExpressionCustom_NoRegister()
	{
		return UMaterialExpressionCustom::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionCustom()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionCustom::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Inputs = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Inputs"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Inputs, UMaterialExpressionCustom), 0x0000000000000001);
				UProperty* NewProp_Inputs_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Inputs, TEXT("Inputs"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FCustomInput());
				UProperty* NewProp_Description = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Description"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Description, UMaterialExpressionCustom), 0x0000000000000001);
				UProperty* NewProp_OutputType = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OutputType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(OutputType, UMaterialExpressionCustom), 0x0000000000000001, Z_Construct_UEnum_Engine_ECustomMaterialOutputType());
				UProperty* NewProp_Code = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Code"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Code, UMaterialExpressionCustom), 0x0000000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionCustom.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionCustom.h"));
				MetaData->SetValue(NewProp_Inputs, TEXT("Category"), TEXT("MaterialExpressionCustom"));
				MetaData->SetValue(NewProp_Inputs, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionCustom.h"));
				MetaData->SetValue(NewProp_Description, TEXT("Category"), TEXT("MaterialExpressionCustom"));
				MetaData->SetValue(NewProp_Description, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionCustom.h"));
				MetaData->SetValue(NewProp_OutputType, TEXT("Category"), TEXT("MaterialExpressionCustom"));
				MetaData->SetValue(NewProp_OutputType, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionCustom.h"));
				MetaData->SetValue(NewProp_Code, TEXT("Category"), TEXT("MaterialExpressionCustom"));
				MetaData->SetValue(NewProp_Code, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionCustom.h"));
				MetaData->SetValue(NewProp_Code, TEXT("MultiLine"), TEXT("TRUE"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionCustom(Z_Construct_UClass_UMaterialExpressionCustom, TEXT("UMaterialExpressionCustom"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionCustom);
	UClass* Z_Construct_UClass_UMaterialExpressionCustomOutput_NoRegister()
	{
		return UMaterialExpressionCustomOutput::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionCustomOutput()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionCustomOutput::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionCustomOutput.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionCustomOutput.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionCustomOutput(Z_Construct_UClass_UMaterialExpressionCustomOutput, TEXT("UMaterialExpressionCustomOutput"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionCustomOutput);
	UClass* Z_Construct_UClass_UMaterialExpressionDDX_NoRegister()
	{
		return UMaterialExpressionDDX::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionDDX()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionDDX::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Value"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Value, UMaterialExpressionDDX), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionDDX.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDDX.h"));
				MetaData->SetValue(NewProp_Value, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDDX.h"));
				MetaData->SetValue(NewProp_Value, TEXT("ToolTip"), TEXT("The value we want to compute ddx/ddy from"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionDDX(Z_Construct_UClass_UMaterialExpressionDDX, TEXT("UMaterialExpressionDDX"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionDDX);
	UClass* Z_Construct_UClass_UMaterialExpressionDDY_NoRegister()
	{
		return UMaterialExpressionDDY::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionDDY()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionDDY::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Value"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Value, UMaterialExpressionDDY), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionDDY.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDDY.h"));
				MetaData->SetValue(NewProp_Value, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDDY.h"));
				MetaData->SetValue(NewProp_Value, TEXT("ToolTip"), TEXT("The value we want to compute ddx/ddy from"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionDDY(Z_Construct_UClass_UMaterialExpressionDDY, TEXT("UMaterialExpressionDDY"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionDDY);
	UClass* Z_Construct_UClass_UMaterialExpressionDecalMipmapLevel_NoRegister()
	{
		return UMaterialExpressionDecalMipmapLevel::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionDecalMipmapLevel()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionDecalMipmapLevel::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ConstHeight = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConstHeight"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ConstHeight, UMaterialExpressionDecalMipmapLevel), 0x0000000000000001);
				UProperty* NewProp_ConstWidth = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConstWidth"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ConstWidth, UMaterialExpressionDecalMipmapLevel), 0x0000000000000001);
				UProperty* NewProp_TextureSize = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TextureSize"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TextureSize, UMaterialExpressionDecalMipmapLevel), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionDecalMipmapLevel.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDecalMipmapLevel.h"));
				MetaData->SetValue(NewProp_ConstHeight, TEXT("Category"), TEXT("MaterialExpressionDecalMipmapLevel"));
				MetaData->SetValue(NewProp_ConstHeight, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDecalMipmapLevel.h"));
				MetaData->SetValue(NewProp_ConstHeight, TEXT("OverridingInputProperty"), TEXT("TextureSize"));
				MetaData->SetValue(NewProp_ConstWidth, TEXT("Category"), TEXT("MaterialExpressionDecalMipmapLevel"));
				MetaData->SetValue(NewProp_ConstWidth, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDecalMipmapLevel.h"));
				MetaData->SetValue(NewProp_ConstWidth, TEXT("OverridingInputProperty"), TEXT("TextureSize"));
				MetaData->SetValue(NewProp_ConstWidth, TEXT("ToolTip"), TEXT("only used if TextureSize is not hooked up"));
				MetaData->SetValue(NewProp_TextureSize, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDecalMipmapLevel.h"));
				MetaData->SetValue(NewProp_TextureSize, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_TextureSize, TEXT("ToolTip"), TEXT("Defaults to '(Const Width, Const Height)' if not specified"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionDecalMipmapLevel(Z_Construct_UClass_UMaterialExpressionDecalMipmapLevel, TEXT("UMaterialExpressionDecalMipmapLevel"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionDecalMipmapLevel);
	UClass* Z_Construct_UClass_UMaterialExpressionDepthFade_NoRegister()
	{
		return UMaterialExpressionDepthFade::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionDepthFade()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionDepthFade::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_FadeDistanceDefault = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FadeDistanceDefault"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(FadeDistanceDefault, UMaterialExpressionDepthFade), 0x0000000000000001);
				UProperty* NewProp_OpacityDefault = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OpacityDefault"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(OpacityDefault, UMaterialExpressionDepthFade), 0x0000000000000001);
				UProperty* NewProp_FadeDistance = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FadeDistance"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(FadeDistance, UMaterialExpressionDepthFade), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_InOpacity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InOpacity"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InOpacity, UMaterialExpressionDepthFade), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionDepthFade.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDepthFade.h"));
				MetaData->SetValue(NewProp_FadeDistanceDefault, TEXT("Category"), TEXT("MaterialExpressionDepthFade"));
				MetaData->SetValue(NewProp_FadeDistanceDefault, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDepthFade.h"));
				MetaData->SetValue(NewProp_FadeDistanceDefault, TEXT("OverridingInputProperty"), TEXT("FadeDistance"));
				MetaData->SetValue(NewProp_FadeDistanceDefault, TEXT("ToolTip"), TEXT("World space distance over which the fade should take place.  This is used when FadeDistance is unconnected."));
				MetaData->SetValue(NewProp_OpacityDefault, TEXT("Category"), TEXT("MaterialExpressionDepthFade"));
				MetaData->SetValue(NewProp_OpacityDefault, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDepthFade.h"));
				MetaData->SetValue(NewProp_OpacityDefault, TEXT("OverridingInputProperty"), TEXT("InOpacity"));
				MetaData->SetValue(NewProp_OpacityDefault, TEXT("ToolTip"), TEXT("Opacity which will be scaled by the result of the fade.  This is used when InOpacity is unconnected."));
				MetaData->SetValue(NewProp_FadeDistance, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDepthFade.h"));
				MetaData->SetValue(NewProp_FadeDistance, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_FadeDistance, TEXT("ToolTip"), TEXT("Defaults to 'FadeDistanceDefault' if not specified"));
				MetaData->SetValue(NewProp_InOpacity, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDepthFade.h"));
				MetaData->SetValue(NewProp_InOpacity, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_InOpacity, TEXT("ToolTip"), TEXT("Defaults to 'OpacityDefault' if not specified"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionDepthFade(Z_Construct_UClass_UMaterialExpressionDepthFade, TEXT("UMaterialExpressionDepthFade"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionDepthFade);
	UEnum* Z_Construct_UEnum_Engine_EDepthOfFieldFunctionValue()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EDepthOfFieldFunctionValue_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EDepthOfFieldFunctionValue"), 0, Get_Z_Construct_UEnum_Engine_EDepthOfFieldFunctionValue_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EDepthOfFieldFunctionValue"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TDOF_NearAndFarMask")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TDOF_NearMask")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TDOF_FarMask")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TDOF_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDepthOfFieldFunction.h"));
			MetaData->SetValue(ReturnEnum, TEXT("TDOF_FarMask.ToolTip"), TEXT("0:in Focus or Near .. 1:Far."));
			MetaData->SetValue(ReturnEnum, TEXT("TDOF_NearAndFarMask.ToolTip"), TEXT("0:in Focus .. 1:Near or Far."));
			MetaData->SetValue(ReturnEnum, TEXT("TDOF_NearMask.ToolTip"), TEXT("0:in Focus or Far .. 1:Near."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EDepthOfFieldFunctionValue_CRC() { return 2418602906U; }
	UClass* Z_Construct_UClass_UMaterialExpressionDepthOfFieldFunction_NoRegister()
	{
		return UMaterialExpressionDepthOfFieldFunction::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionDepthOfFieldFunction()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionDepthOfFieldFunction::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Depth = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Depth"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Depth, UMaterialExpressionDepthOfFieldFunction), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_FunctionValue = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FunctionValue"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(FunctionValue, UMaterialExpressionDepthOfFieldFunction), 0x0000000000000001, Z_Construct_UEnum_Engine_EDepthOfFieldFunctionValue());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionDepthOfFieldFunction.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDepthOfFieldFunction.h"));
				MetaData->SetValue(NewProp_Depth, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDepthOfFieldFunction.h"));
				MetaData->SetValue(NewProp_Depth, TEXT("ToolTip"), TEXT("usually nothing or PixelDepth"));
				MetaData->SetValue(NewProp_FunctionValue, TEXT("Category"), TEXT("MaterialExpressionDepthOfFieldFunction"));
				MetaData->SetValue(NewProp_FunctionValue, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDepthOfFieldFunction.h"));
				MetaData->SetValue(NewProp_FunctionValue, TEXT("ToolTip"), TEXT("Determines the mapping place to use on the terrain."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionDepthOfFieldFunction(Z_Construct_UClass_UMaterialExpressionDepthOfFieldFunction, TEXT("UMaterialExpressionDepthOfFieldFunction"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionDepthOfFieldFunction);
	UClass* Z_Construct_UClass_UMaterialExpressionDeriveNormalZ_NoRegister()
	{
		return UMaterialExpressionDeriveNormalZ::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionDeriveNormalZ()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionDeriveNormalZ::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_InXY = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InXY"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InXY, UMaterialExpressionDeriveNormalZ), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionDeriveNormalZ.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDeriveNormalZ.h"));
				MetaData->SetValue(NewProp_InXY, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDeriveNormalZ.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionDeriveNormalZ(Z_Construct_UClass_UMaterialExpressionDeriveNormalZ, TEXT("UMaterialExpressionDeriveNormalZ"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionDeriveNormalZ);
	UClass* Z_Construct_UClass_UMaterialExpressionDesaturation_NoRegister()
	{
		return UMaterialExpressionDesaturation::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionDesaturation()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionDesaturation::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_LuminanceFactors = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LuminanceFactors"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LuminanceFactors, UMaterialExpressionDesaturation), 0x0000000000000001, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_Fraction = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Fraction"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Fraction, UMaterialExpressionDesaturation), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Input"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Input, UMaterialExpressionDesaturation), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionDesaturation.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDesaturation.h"));
				MetaData->SetValue(NewProp_LuminanceFactors, TEXT("Category"), TEXT("MaterialExpressionDesaturation"));
				MetaData->SetValue(NewProp_LuminanceFactors, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDesaturation.h"));
				MetaData->SetValue(NewProp_Fraction, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDesaturation.h"));
				MetaData->SetValue(NewProp_Input, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDesaturation.h"));
				MetaData->SetValue(NewProp_Input, TEXT("ToolTip"), TEXT("Outputs: Lerp(Input,dot(Input,LuminanceFactors)),Fraction)"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionDesaturation(Z_Construct_UClass_UMaterialExpressionDesaturation, TEXT("UMaterialExpressionDesaturation"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionDesaturation);
	UClass* Z_Construct_UClass_UMaterialExpressionDistance_NoRegister()
	{
		return UMaterialExpressionDistance::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionDistance()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionDistance::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(B, UMaterialExpressionDistance), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, UMaterialExpressionDistance), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionDistance.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDistance.h"));
				MetaData->SetValue(NewProp_B, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDistance.h"));
				MetaData->SetValue(NewProp_A, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDistance.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionDistance(Z_Construct_UClass_UMaterialExpressionDistance, TEXT("UMaterialExpressionDistance"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionDistance);
	UClass* Z_Construct_UClass_UMaterialExpressionDistanceCullFade_NoRegister()
	{
		return UMaterialExpressionDistanceCullFade::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionDistanceCullFade()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionDistanceCullFade::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionDistanceCullFade.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDistanceCullFade.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionDistanceCullFade(Z_Construct_UClass_UMaterialExpressionDistanceCullFade, TEXT("UMaterialExpressionDistanceCullFade"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionDistanceCullFade);
	UClass* Z_Construct_UClass_UMaterialExpressionDistanceFieldGradient_NoRegister()
	{
		return UMaterialExpressionDistanceFieldGradient::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionDistanceFieldGradient()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionDistanceFieldGradient::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Position = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Position"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Position, UMaterialExpressionDistanceFieldGradient), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionDistanceFieldGradient.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDistanceFieldGradient.h"));
				MetaData->SetValue(NewProp_Position, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDistanceFieldGradient.h"));
				MetaData->SetValue(NewProp_Position, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_Position, TEXT("ToolTip"), TEXT("Defaults to current world position if not specified"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionDistanceFieldGradient(Z_Construct_UClass_UMaterialExpressionDistanceFieldGradient, TEXT("UMaterialExpressionDistanceFieldGradient"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionDistanceFieldGradient);
	UClass* Z_Construct_UClass_UMaterialExpressionDistanceToNearestSurface_NoRegister()
	{
		return UMaterialExpressionDistanceToNearestSurface::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionDistanceToNearestSurface()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionDistanceToNearestSurface::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Position = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Position"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Position, UMaterialExpressionDistanceToNearestSurface), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionDistanceToNearestSurface.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDistanceToNearestSurface.h"));
				MetaData->SetValue(NewProp_Position, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDistanceToNearestSurface.h"));
				MetaData->SetValue(NewProp_Position, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_Position, TEXT("ToolTip"), TEXT("Defaults to current world position if not specified"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionDistanceToNearestSurface(Z_Construct_UClass_UMaterialExpressionDistanceToNearestSurface, TEXT("UMaterialExpressionDistanceToNearestSurface"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionDistanceToNearestSurface);
	UClass* Z_Construct_UClass_UMaterialExpressionDivide_NoRegister()
	{
		return UMaterialExpressionDivide::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionDivide()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionDivide::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ConstB = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConstB"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ConstB, UMaterialExpressionDivide), 0x0000000000000001);
				UProperty* NewProp_ConstA = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConstA"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ConstA, UMaterialExpressionDivide), 0x0000000000000001);
				UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(B, UMaterialExpressionDivide), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, UMaterialExpressionDivide), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionDivide.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDivide.h"));
				MetaData->SetValue(NewProp_ConstB, TEXT("Category"), TEXT("MaterialExpressionDivide"));
				MetaData->SetValue(NewProp_ConstB, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDivide.h"));
				MetaData->SetValue(NewProp_ConstB, TEXT("OverridingInputProperty"), TEXT("B"));
				MetaData->SetValue(NewProp_ConstB, TEXT("ToolTip"), TEXT("only used if B is not hooked up"));
				MetaData->SetValue(NewProp_ConstA, TEXT("Category"), TEXT("MaterialExpressionDivide"));
				MetaData->SetValue(NewProp_ConstA, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDivide.h"));
				MetaData->SetValue(NewProp_ConstA, TEXT("OverridingInputProperty"), TEXT("A"));
				MetaData->SetValue(NewProp_ConstA, TEXT("ToolTip"), TEXT("only used if A is not hooked up"));
				MetaData->SetValue(NewProp_B, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDivide.h"));
				MetaData->SetValue(NewProp_B, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_B, TEXT("ToolTip"), TEXT("Defaults to 'ConstB' if not specified"));
				MetaData->SetValue(NewProp_A, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDivide.h"));
				MetaData->SetValue(NewProp_A, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_A, TEXT("ToolTip"), TEXT("Defaults to 'ConstA' if not specified"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionDivide(Z_Construct_UClass_UMaterialExpressionDivide, TEXT("UMaterialExpressionDivide"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionDivide);
	UClass* Z_Construct_UClass_UMaterialExpressionDotProduct_NoRegister()
	{
		return UMaterialExpressionDotProduct::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionDotProduct()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionDotProduct::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(B, UMaterialExpressionDotProduct), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, UMaterialExpressionDotProduct), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionDotProduct.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDotProduct.h"));
				MetaData->SetValue(NewProp_B, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDotProduct.h"));
				MetaData->SetValue(NewProp_A, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDotProduct.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionDotProduct(Z_Construct_UClass_UMaterialExpressionDotProduct, TEXT("UMaterialExpressionDotProduct"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionDotProduct);
	UClass* Z_Construct_UClass_UMaterialExpressionDynamicParameter_NoRegister()
	{
		return UMaterialExpressionDynamicParameter::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionDynamicParameter()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionDynamicParameter::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_DefaultValue = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DefaultValue, UMaterialExpressionDynamicParameter), 0x0000000000000001, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_ParamNames = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ParamNames"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ParamNames, UMaterialExpressionDynamicParameter), 0x0000000000000041);
				UProperty* NewProp_ParamNames_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ParamNames, TEXT("ParamNames"), RF_Public|RF_Transient|RF_Native) UStrProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionDynamicParameter.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDynamicParameter.h"));
				MetaData->SetValue(NewProp_DefaultValue, TEXT("Category"), TEXT("MaterialExpressionDynamicParameter"));
				MetaData->SetValue(NewProp_DefaultValue, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDynamicParameter.h"));
				MetaData->SetValue(NewProp_ParamNames, TEXT("Category"), TEXT("MaterialExpressionDynamicParameter"));
				MetaData->SetValue(NewProp_ParamNames, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDynamicParameter.h"));
				MetaData->SetValue(NewProp_ParamNames, TEXT("ToolTip"), TEXT("The names of the parameters.\nThese will show up in Cascade when editing a particle system\nthat uses the material it is in..."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionDynamicParameter(Z_Construct_UClass_UMaterialExpressionDynamicParameter, TEXT("UMaterialExpressionDynamicParameter"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionDynamicParameter);
	UClass* Z_Construct_UClass_UMaterialExpressionEyeAdaptation_NoRegister()
	{
		return UMaterialExpressionEyeAdaptation::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionEyeAdaptation()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionEyeAdaptation::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionEyeAdaptation.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionEyeAdaptation.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Provides access to the EyeAdaptation render target."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionEyeAdaptation(Z_Construct_UClass_UMaterialExpressionEyeAdaptation, TEXT("UMaterialExpressionEyeAdaptation"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionEyeAdaptation);
	UClass* Z_Construct_UClass_UMaterialExpressionFeatureLevelSwitch_NoRegister()
	{
		return UMaterialExpressionFeatureLevelSwitch::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionFeatureLevelSwitch()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionFeatureLevelSwitch::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Inputs = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Inputs"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Inputs, UMaterialExpressionFeatureLevelSwitch), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				NewProp_Inputs->ArrayDim = CPP_ARRAY_DIM(Inputs, UMaterialExpressionFeatureLevelSwitch);
				UProperty* NewProp_Default = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Default"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Default, UMaterialExpressionFeatureLevelSwitch), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionFeatureLevelSwitch.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFeatureLevelSwitch.h"));
				MetaData->SetValue(NewProp_Inputs, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFeatureLevelSwitch.h"));
				MetaData->SetValue(NewProp_Default, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFeatureLevelSwitch.h"));
				MetaData->SetValue(NewProp_Default, TEXT("ToolTip"), TEXT("Default connection, used when a certain feature level doesn't have an override."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionFeatureLevelSwitch(Z_Construct_UClass_UMaterialExpressionFeatureLevelSwitch, TEXT("UMaterialExpressionFeatureLevelSwitch"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionFeatureLevelSwitch);
	UClass* Z_Construct_UClass_UMaterialExpressionFloor_NoRegister()
	{
		return UMaterialExpressionFloor::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionFloor()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionFloor::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Input"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Input, UMaterialExpressionFloor), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionFloor.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFloor.h"));
				MetaData->SetValue(NewProp_Input, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFloor.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionFloor(Z_Construct_UClass_UMaterialExpressionFloor, TEXT("UMaterialExpressionFloor"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionFloor);
	UClass* Z_Construct_UClass_UMaterialExpressionFmod_NoRegister()
	{
		return UMaterialExpressionFmod::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionFmod()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionFmod::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(B, UMaterialExpressionFmod), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, UMaterialExpressionFmod), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionFmod.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFmod.h"));
				MetaData->SetValue(NewProp_B, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFmod.h"));
				MetaData->SetValue(NewProp_A, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFmod.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionFmod(Z_Construct_UClass_UMaterialExpressionFmod, TEXT("UMaterialExpressionFmod"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionFmod);
	UClass* Z_Construct_UClass_UMaterialExpressionFontSample_NoRegister()
	{
		return UMaterialExpressionFontSample::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionFontSample()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionFontSample::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_FontTexturePage = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FontTexturePage"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(FontTexturePage, UMaterialExpressionFontSample), 0x0000000000000001);
				UProperty* NewProp_Font = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Font"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Font, UMaterialExpressionFontSample), 0x0000000000000001, Z_Construct_UClass_UFont_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionFontSample.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFontSample.h"));
				MetaData->SetValue(NewProp_FontTexturePage, TEXT("Category"), TEXT("MaterialExpressionFontSample"));
				MetaData->SetValue(NewProp_FontTexturePage, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFontSample.h"));
				MetaData->SetValue(NewProp_FontTexturePage, TEXT("ToolTip"), TEXT("allow access to the various font pages"));
				MetaData->SetValue(NewProp_Font, TEXT("Category"), TEXT("MaterialExpressionFontSample"));
				MetaData->SetValue(NewProp_Font, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFontSample.h"));
				MetaData->SetValue(NewProp_Font, TEXT("ToolTip"), TEXT("font resource that will be sampled"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionFontSample(Z_Construct_UClass_UMaterialExpressionFontSample, TEXT("UMaterialExpressionFontSample"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionFontSample);
	UClass* Z_Construct_UClass_UMaterialExpressionFontSampleParameter_NoRegister()
	{
		return UMaterialExpressionFontSampleParameter::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionFontSampleParameter()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpressionFontSample();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionFontSampleParameter::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Group = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Group"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(Group, UMaterialExpressionFontSampleParameter), 0x0000000000000001);
				UProperty* NewProp_ExpressionGUID = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ExpressionGUID"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ExpressionGUID, UMaterialExpressionFontSampleParameter), 0x0000000000000000, Z_Construct_UScriptStruct_FGuid());
				UProperty* NewProp_ParameterName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ParameterName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(ParameterName, UMaterialExpressionFontSampleParameter), 0x0000000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionFontSampleParameter.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFontSampleParameter.h"));
				MetaData->SetValue(NewProp_Group, TEXT("Category"), TEXT("MaterialExpressionFontSampleParameter"));
				MetaData->SetValue(NewProp_Group, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFontSampleParameter.h"));
				MetaData->SetValue(NewProp_Group, TEXT("ToolTip"), TEXT("The name of the parameter Group to display in MaterialInstance Editor. Default is None group"));
				MetaData->SetValue(NewProp_ExpressionGUID, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFontSampleParameter.h"));
				MetaData->SetValue(NewProp_ExpressionGUID, TEXT("ToolTip"), TEXT("GUID that should be unique within the material, this is used for parameter renaming."));
				MetaData->SetValue(NewProp_ParameterName, TEXT("Category"), TEXT("MaterialExpressionFontSampleParameter"));
				MetaData->SetValue(NewProp_ParameterName, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFontSampleParameter.h"));
				MetaData->SetValue(NewProp_ParameterName, TEXT("ToolTip"), TEXT("name to be referenced when we want to find and set thsi parameter"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionFontSampleParameter(Z_Construct_UClass_UMaterialExpressionFontSampleParameter, TEXT("UMaterialExpressionFontSampleParameter"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionFontSampleParameter);
	UClass* Z_Construct_UClass_UMaterialExpressionFrac_NoRegister()
	{
		return UMaterialExpressionFrac::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionFrac()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionFrac::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Input"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Input, UMaterialExpressionFrac), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionFrac.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFrac.h"));
				MetaData->SetValue(NewProp_Input, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFrac.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionFrac(Z_Construct_UClass_UMaterialExpressionFrac, TEXT("UMaterialExpressionFrac"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionFrac);
	UClass* Z_Construct_UClass_UMaterialExpressionFresnel_NoRegister()
	{
		return UMaterialExpressionFresnel::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionFresnel()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionFresnel::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Normal = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Normal"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Normal, UMaterialExpressionFresnel), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_BaseReflectFraction = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BaseReflectFraction"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(BaseReflectFraction, UMaterialExpressionFresnel), 0x0000000000000001);
				UProperty* NewProp_BaseReflectFractionIn = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BaseReflectFractionIn"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(BaseReflectFractionIn, UMaterialExpressionFresnel), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_Exponent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Exponent"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Exponent, UMaterialExpressionFresnel), 0x0000000000000001);
				UProperty* NewProp_ExponentIn = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ExponentIn"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ExponentIn, UMaterialExpressionFresnel), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionFresnel.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFresnel.h"));
				MetaData->SetValue(NewProp_Normal, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFresnel.h"));
				MetaData->SetValue(NewProp_Normal, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_Normal, TEXT("ToolTip"), TEXT("Defaults to Pixel World Normal if not specified"));
				MetaData->SetValue(NewProp_BaseReflectFraction, TEXT("Category"), TEXT("MaterialExpressionFresnel"));
				MetaData->SetValue(NewProp_BaseReflectFraction, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFresnel.h"));
				MetaData->SetValue(NewProp_BaseReflectFraction, TEXT("OverridingInputProperty"), TEXT("BaseReflectFractionIn"));
				MetaData->SetValue(NewProp_BaseReflectFraction, TEXT("ToolTip"), TEXT("Specifies the fraction of specular reflection when the surfaces is viewed from straight on.\nA value of 1 effectively disables Fresnel."));
				MetaData->SetValue(NewProp_BaseReflectFractionIn, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFresnel.h"));
				MetaData->SetValue(NewProp_BaseReflectFractionIn, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_BaseReflectFractionIn, TEXT("ToolTip"), TEXT("Defaults to 'BaseReflectFraction' if not specified"));
				MetaData->SetValue(NewProp_Exponent, TEXT("Category"), TEXT("MaterialExpressionFresnel"));
				MetaData->SetValue(NewProp_Exponent, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFresnel.h"));
				MetaData->SetValue(NewProp_Exponent, TEXT("OverridingInputProperty"), TEXT("ExponentIn"));
				MetaData->SetValue(NewProp_Exponent, TEXT("ToolTip"), TEXT("The exponent to pass into the pow() function"));
				MetaData->SetValue(NewProp_ExponentIn, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFresnel.h"));
				MetaData->SetValue(NewProp_ExponentIn, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_ExponentIn, TEXT("ToolTip"), TEXT("Defaults to 'Exponent' if not specified"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionFresnel(Z_Construct_UClass_UMaterialExpressionFresnel, TEXT("UMaterialExpressionFresnel"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionFresnel);
	UEnum* Z_Construct_UEnum_Engine_EFunctionInputType()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EFunctionInputType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EFunctionInputType"), 0, Get_Z_Construct_UEnum_Engine_EFunctionInputType_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EFunctionInputType"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("FunctionInput_Scalar")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("FunctionInput_Vector2")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("FunctionInput_Vector3")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("FunctionInput_Vector4")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("FunctionInput_Texture2D")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("FunctionInput_TextureCube")), 5));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("FunctionInput_StaticBool")), 6));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("FunctionInput_MaterialAttributes")), 7));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("FunctionInput_MAX")), 8));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFunctionInput.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Supported input types"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EFunctionInputType_CRC() { return 1160844046U; }
	UClass* Z_Construct_UClass_UMaterialExpressionFunctionInput_NoRegister()
	{
		return UMaterialExpressionFunctionInput::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionFunctionInput()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionFunctionInput::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCompilingFunctionPreview, UMaterialExpressionFunctionInput, uint8);
				UProperty* NewProp_bCompilingFunctionPreview = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bCompilingFunctionPreview"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCompilingFunctionPreview, UMaterialExpressionFunctionInput), 0x0000000000002000, CPP_BOOL_PROPERTY_BITMASK(bCompilingFunctionPreview, UMaterialExpressionFunctionInput), sizeof(uint8), false);
				UProperty* NewProp_SortPriority = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SortPriority"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(SortPriority, UMaterialExpressionFunctionInput), 0x0000000000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUsePreviewValueAsDefault, UMaterialExpressionFunctionInput, uint8);
				UProperty* NewProp_bUsePreviewValueAsDefault = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUsePreviewValueAsDefault"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUsePreviewValueAsDefault, UMaterialExpressionFunctionInput), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bUsePreviewValueAsDefault, UMaterialExpressionFunctionInput), sizeof(uint8), false);
				UProperty* NewProp_PreviewValue = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PreviewValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PreviewValue, UMaterialExpressionFunctionInput), 0x0000000000000001, Z_Construct_UScriptStruct_FVector4());
				UProperty* NewProp_InputType = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InputType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(InputType, UMaterialExpressionFunctionInput), 0x0000000000000001, Z_Construct_UEnum_Engine_EFunctionInputType());
				UProperty* NewProp_Id = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Id"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Id, UMaterialExpressionFunctionInput), 0x0000000000000000, Z_Construct_UScriptStruct_FGuid());
				UProperty* NewProp_Description = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Description"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Description, UMaterialExpressionFunctionInput), 0x0000000000000001);
				UProperty* NewProp_InputName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InputName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(InputName, UMaterialExpressionFunctionInput), 0x0000000000000001);
				UProperty* NewProp_Preview = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Preview"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Preview, UMaterialExpressionFunctionInput), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionFunctionInput.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFunctionInput.h"));
				MetaData->SetValue(NewProp_bCompilingFunctionPreview, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFunctionInput.h"));
				MetaData->SetValue(NewProp_bCompilingFunctionPreview, TEXT("ToolTip"), TEXT("true when this expression is being compiled in a function preview,\nfalse when this expression is being compiled into a material that uses the function.\nOnly valid in Compile()"));
				MetaData->SetValue(NewProp_SortPriority, TEXT("Category"), TEXT("MaterialExpressionFunctionInput"));
				MetaData->SetValue(NewProp_SortPriority, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFunctionInput.h"));
				MetaData->SetValue(NewProp_SortPriority, TEXT("ToolTip"), TEXT("Controls where the input is displayed relative to the other inputs."));
				MetaData->SetValue(NewProp_bUsePreviewValueAsDefault, TEXT("Category"), TEXT("MaterialExpressionFunctionInput"));
				MetaData->SetValue(NewProp_bUsePreviewValueAsDefault, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFunctionInput.h"));
				MetaData->SetValue(NewProp_bUsePreviewValueAsDefault, TEXT("ToolTip"), TEXT("Whether to use the preview value or texture as the default value for this input."));
				MetaData->SetValue(NewProp_PreviewValue, TEXT("Category"), TEXT("MaterialExpressionFunctionInput"));
				MetaData->SetValue(NewProp_PreviewValue, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFunctionInput.h"));
				MetaData->SetValue(NewProp_PreviewValue, TEXT("OverridingInputProperty"), TEXT("Preview"));
				MetaData->SetValue(NewProp_PreviewValue, TEXT("ToolTip"), TEXT("Value used to preview this input when editing the material function."));
				MetaData->SetValue(NewProp_InputType, TEXT("Category"), TEXT("MaterialExpressionFunctionInput"));
				MetaData->SetValue(NewProp_InputType, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFunctionInput.h"));
				MetaData->SetValue(NewProp_InputType, TEXT("ToolTip"), TEXT("Type of this input.\nInput code chunks will be cast to this type, and a compiler error will be emitted if the cast fails."));
				MetaData->SetValue(NewProp_Id, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFunctionInput.h"));
				MetaData->SetValue(NewProp_Id, TEXT("ToolTip"), TEXT("Id of this input, used to maintain references through name changes."));
				MetaData->SetValue(NewProp_Description, TEXT("Category"), TEXT("MaterialExpressionFunctionInput"));
				MetaData->SetValue(NewProp_Description, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFunctionInput.h"));
				MetaData->SetValue(NewProp_Description, TEXT("ToolTip"), TEXT("The input's description, which will be used as a tooltip on the connector in function call expressions that use this function."));
				MetaData->SetValue(NewProp_InputName, TEXT("Category"), TEXT("MaterialExpressionFunctionInput"));
				MetaData->SetValue(NewProp_InputName, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFunctionInput.h"));
				MetaData->SetValue(NewProp_InputName, TEXT("ToolTip"), TEXT("The input's name, which will be drawn on the connector in function call expressions that use this function."));
				MetaData->SetValue(NewProp_Preview, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFunctionInput.h"));
				MetaData->SetValue(NewProp_Preview, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_Preview, TEXT("ToolTip"), TEXT("Used for previewing when editing the function, also temporarily used to connect to the outside material when compiling that material."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionFunctionInput(Z_Construct_UClass_UMaterialExpressionFunctionInput, TEXT("UMaterialExpressionFunctionInput"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionFunctionInput);
	UClass* Z_Construct_UClass_UMaterialExpressionFunctionOutput_NoRegister()
	{
		return UMaterialExpressionFunctionOutput::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionFunctionOutput()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionFunctionOutput::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Id = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Id"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Id, UMaterialExpressionFunctionOutput), 0x0000000000000000, Z_Construct_UScriptStruct_FGuid());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLastPreviewed, UMaterialExpressionFunctionOutput, uint8);
				UProperty* NewProp_bLastPreviewed = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bLastPreviewed"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLastPreviewed, UMaterialExpressionFunctionOutput), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bLastPreviewed, UMaterialExpressionFunctionOutput), sizeof(uint8), false);
				UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, UMaterialExpressionFunctionOutput), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_SortPriority = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SortPriority"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(SortPriority, UMaterialExpressionFunctionOutput), 0x0000000000000001);
				UProperty* NewProp_Description = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Description"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Description, UMaterialExpressionFunctionOutput), 0x0000000000000001);
				UProperty* NewProp_OutputName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OutputName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(OutputName, UMaterialExpressionFunctionOutput), 0x0000000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionFunctionOutput.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFunctionOutput.h"));
				MetaData->SetValue(NewProp_Id, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFunctionOutput.h"));
				MetaData->SetValue(NewProp_Id, TEXT("ToolTip"), TEXT("Id of this input, used to maintain references through name changes."));
				MetaData->SetValue(NewProp_bLastPreviewed, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFunctionOutput.h"));
				MetaData->SetValue(NewProp_bLastPreviewed, TEXT("ToolTip"), TEXT("Whether this output was previewed the last time this function was edited."));
				MetaData->SetValue(NewProp_A, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFunctionOutput.h"));
				MetaData->SetValue(NewProp_A, TEXT("ToolTip"), TEXT("Stores the expression in the material function connected to this output."));
				MetaData->SetValue(NewProp_SortPriority, TEXT("Category"), TEXT("MaterialExpressionFunctionOutput"));
				MetaData->SetValue(NewProp_SortPriority, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFunctionOutput.h"));
				MetaData->SetValue(NewProp_SortPriority, TEXT("ToolTip"), TEXT("Controls where the output is displayed relative to the other outputs."));
				MetaData->SetValue(NewProp_Description, TEXT("Category"), TEXT("MaterialExpressionFunctionOutput"));
				MetaData->SetValue(NewProp_Description, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFunctionOutput.h"));
				MetaData->SetValue(NewProp_Description, TEXT("MultiLine"), TEXT("TRUE"));
				MetaData->SetValue(NewProp_Description, TEXT("ToolTip"), TEXT("The output's description, which will be used as a tooltip on the connector in function call expressions that use this function."));
				MetaData->SetValue(NewProp_OutputName, TEXT("Category"), TEXT("MaterialExpressionFunctionOutput"));
				MetaData->SetValue(NewProp_OutputName, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFunctionOutput.h"));
				MetaData->SetValue(NewProp_OutputName, TEXT("ToolTip"), TEXT("The output's name, which will be drawn on the connector in function call expressions that use this function."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionFunctionOutput(Z_Construct_UClass_UMaterialExpressionFunctionOutput, TEXT("UMaterialExpressionFunctionOutput"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionFunctionOutput);
	UClass* Z_Construct_UClass_UMaterialExpressionGIReplace_NoRegister()
	{
		return UMaterialExpressionGIReplace::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionGIReplace()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionGIReplace::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_DynamicIndirect = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DynamicIndirect"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DynamicIndirect, UMaterialExpressionGIReplace), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_StaticIndirect = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StaticIndirect"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(StaticIndirect, UMaterialExpressionGIReplace), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_Default = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Default"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Default, UMaterialExpressionGIReplace), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionGIReplace.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionGIReplace.h"));
				MetaData->SetValue(NewProp_DynamicIndirect, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionGIReplace.h"));
				MetaData->SetValue(NewProp_DynamicIndirect, TEXT("ToolTip"), TEXT("Used for dynamic indirect lighting e.g. Light Propagation Volumes"));
				MetaData->SetValue(NewProp_StaticIndirect, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionGIReplace.h"));
				MetaData->SetValue(NewProp_StaticIndirect, TEXT("ToolTip"), TEXT("Used for baked indirect lighting e.g. Lightmass"));
				MetaData->SetValue(NewProp_Default, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionGIReplace.h"));
				MetaData->SetValue(NewProp_Default, TEXT("ToolTip"), TEXT("Used for direct lighting computations e.g. real-time shaders"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionGIReplace(Z_Construct_UClass_UMaterialExpressionGIReplace, TEXT("UMaterialExpressionGIReplace"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionGIReplace);
	UClass* Z_Construct_UClass_UMaterialExpressionIf_NoRegister()
	{
		return UMaterialExpressionIf::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionIf()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionIf::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ConstAEqualsB = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConstAEqualsB"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ConstAEqualsB_DEPRECATED, UMaterialExpressionIf), 0x0000000020000000);
				UProperty* NewProp_ConstB = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConstB"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ConstB, UMaterialExpressionIf), 0x0000000000000001);
				UProperty* NewProp_EqualsThreshold = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EqualsThreshold"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(EqualsThreshold, UMaterialExpressionIf), 0x0000000000000001);
				UProperty* NewProp_ALessThanB = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ALessThanB"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ALessThanB, UMaterialExpressionIf), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_AEqualsB = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AEqualsB"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(AEqualsB, UMaterialExpressionIf), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_AGreaterThanB = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AGreaterThanB"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(AGreaterThanB, UMaterialExpressionIf), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(B, UMaterialExpressionIf), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, UMaterialExpressionIf), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionIf.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionIf.h"));
				MetaData->SetValue(NewProp_ConstAEqualsB, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionIf.h"));
				MetaData->SetValue(NewProp_ConstB, TEXT("Category"), TEXT("MaterialExpressionIf"));
				MetaData->SetValue(NewProp_ConstB, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionIf.h"));
				MetaData->SetValue(NewProp_ConstB, TEXT("ToolTip"), TEXT("only used if B is not hooked up"));
				MetaData->SetValue(NewProp_EqualsThreshold, TEXT("Category"), TEXT("MaterialExpressionIf"));
				MetaData->SetValue(NewProp_EqualsThreshold, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionIf.h"));
				MetaData->SetValue(NewProp_ALessThanB, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionIf.h"));
				MetaData->SetValue(NewProp_AEqualsB, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionIf.h"));
				MetaData->SetValue(NewProp_AEqualsB, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_AGreaterThanB, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionIf.h"));
				MetaData->SetValue(NewProp_B, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionIf.h"));
				MetaData->SetValue(NewProp_B, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_B, TEXT("ToolTip"), TEXT("Defaults to 'ConstB' if not specified"));
				MetaData->SetValue(NewProp_A, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionIf.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionIf(Z_Construct_UClass_UMaterialExpressionIf, TEXT("UMaterialExpressionIf"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionIf);
	UClass* Z_Construct_UClass_UMaterialExpressionLightmapUVs_NoRegister()
	{
		return UMaterialExpressionLightmapUVs::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionLightmapUVs()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionLightmapUVs::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionLightmapUVs.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionLightmapUVs.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionLightmapUVs(Z_Construct_UClass_UMaterialExpressionLightmapUVs, TEXT("UMaterialExpressionLightmapUVs"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionLightmapUVs);
	UClass* Z_Construct_UClass_UMaterialExpressionLightmassReplace_NoRegister()
	{
		return UMaterialExpressionLightmassReplace::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionLightmassReplace()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionLightmassReplace::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Lightmass = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Lightmass"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Lightmass, UMaterialExpressionLightmassReplace), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_Realtime = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Realtime"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Realtime, UMaterialExpressionLightmassReplace), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionLightmassReplace.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionLightmassReplace.h"));
				MetaData->SetValue(NewProp_Lightmass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionLightmassReplace.h"));
				MetaData->SetValue(NewProp_Realtime, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionLightmassReplace.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionLightmassReplace(Z_Construct_UClass_UMaterialExpressionLightmassReplace, TEXT("UMaterialExpressionLightmassReplace"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionLightmassReplace);
	UClass* Z_Construct_UClass_UMaterialExpressionLightVector_NoRegister()
	{
		return UMaterialExpressionLightVector::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionLightVector()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionLightVector::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionLightVector.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionLightVector.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionLightVector(Z_Construct_UClass_UMaterialExpressionLightVector, TEXT("UMaterialExpressionLightVector"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionLightVector);
	UClass* Z_Construct_UClass_UMaterialExpressionLinearInterpolate_NoRegister()
	{
		return UMaterialExpressionLinearInterpolate::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionLinearInterpolate()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionLinearInterpolate::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ConstAlpha = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConstAlpha"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ConstAlpha, UMaterialExpressionLinearInterpolate), 0x0000000000000001);
				UProperty* NewProp_ConstB = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConstB"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ConstB, UMaterialExpressionLinearInterpolate), 0x0000000000000001);
				UProperty* NewProp_ConstA = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConstA"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ConstA, UMaterialExpressionLinearInterpolate), 0x0000000000000001);
				UProperty* NewProp_Alpha = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Alpha"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Alpha, UMaterialExpressionLinearInterpolate), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(B, UMaterialExpressionLinearInterpolate), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, UMaterialExpressionLinearInterpolate), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionLinearInterpolate.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionLinearInterpolate.h"));
				MetaData->SetValue(NewProp_ConstAlpha, TEXT("Category"), TEXT("MaterialExpressionLinearInterpolate"));
				MetaData->SetValue(NewProp_ConstAlpha, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionLinearInterpolate.h"));
				MetaData->SetValue(NewProp_ConstAlpha, TEXT("OverridingInputProperty"), TEXT("Alpha"));
				MetaData->SetValue(NewProp_ConstAlpha, TEXT("ToolTip"), TEXT("only used if Alpha is not hooked up"));
				MetaData->SetValue(NewProp_ConstB, TEXT("Category"), TEXT("MaterialExpressionLinearInterpolate"));
				MetaData->SetValue(NewProp_ConstB, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionLinearInterpolate.h"));
				MetaData->SetValue(NewProp_ConstB, TEXT("OverridingInputProperty"), TEXT("B"));
				MetaData->SetValue(NewProp_ConstB, TEXT("ToolTip"), TEXT("only used if B is not hooked up"));
				MetaData->SetValue(NewProp_ConstA, TEXT("Category"), TEXT("MaterialExpressionLinearInterpolate"));
				MetaData->SetValue(NewProp_ConstA, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionLinearInterpolate.h"));
				MetaData->SetValue(NewProp_ConstA, TEXT("OverridingInputProperty"), TEXT("A"));
				MetaData->SetValue(NewProp_ConstA, TEXT("ToolTip"), TEXT("only used if A is not hooked up"));
				MetaData->SetValue(NewProp_Alpha, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionLinearInterpolate.h"));
				MetaData->SetValue(NewProp_Alpha, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_Alpha, TEXT("ToolTip"), TEXT("Defaults to 'ConstAlpha' if not specified"));
				MetaData->SetValue(NewProp_B, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionLinearInterpolate.h"));
				MetaData->SetValue(NewProp_B, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_B, TEXT("ToolTip"), TEXT("Defaults to 'ConstB' if not specified"));
				MetaData->SetValue(NewProp_A, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionLinearInterpolate.h"));
				MetaData->SetValue(NewProp_A, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_A, TEXT("ToolTip"), TEXT("Defaults to 'ConstA' if not specified"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionLinearInterpolate(Z_Construct_UClass_UMaterialExpressionLinearInterpolate, TEXT("UMaterialExpressionLinearInterpolate"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionLinearInterpolate);
	UClass* Z_Construct_UClass_UMaterialExpressionLogarithm2_NoRegister()
	{
		return UMaterialExpressionLogarithm2::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionLogarithm2()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionLogarithm2::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_X = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("X"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(X, UMaterialExpressionLogarithm2), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionLogarithm2.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionLogarithm2.h"));
				MetaData->SetValue(NewProp_X, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionLogarithm2.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionLogarithm2(Z_Construct_UClass_UMaterialExpressionLogarithm2, TEXT("UMaterialExpressionLogarithm2"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionLogarithm2);
	UClass* Z_Construct_UClass_UMaterialExpressionMakeMaterialAttributes_NoRegister()
	{
		return UMaterialExpressionMakeMaterialAttributes::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionMakeMaterialAttributes()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionMakeMaterialAttributes::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_PixelDepthOffset = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PixelDepthOffset"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PixelDepthOffset, UMaterialExpressionMakeMaterialAttributes), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_CustomizedUVs = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CustomizedUVs"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(CustomizedUVs, UMaterialExpressionMakeMaterialAttributes), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				NewProp_CustomizedUVs->ArrayDim = CPP_ARRAY_DIM(CustomizedUVs, UMaterialExpressionMakeMaterialAttributes);
				UProperty* NewProp_Refraction = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Refraction"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Refraction, UMaterialExpressionMakeMaterialAttributes), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_AmbientOcclusion = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AmbientOcclusion"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(AmbientOcclusion, UMaterialExpressionMakeMaterialAttributes), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_ClearCoatRoughness = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ClearCoatRoughness"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ClearCoatRoughness, UMaterialExpressionMakeMaterialAttributes), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_ClearCoat = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ClearCoat"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ClearCoat, UMaterialExpressionMakeMaterialAttributes), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_SubsurfaceColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SubsurfaceColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SubsurfaceColor, UMaterialExpressionMakeMaterialAttributes), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_TessellationMultiplier = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TessellationMultiplier"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TessellationMultiplier, UMaterialExpressionMakeMaterialAttributes), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_WorldDisplacement = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WorldDisplacement"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(WorldDisplacement, UMaterialExpressionMakeMaterialAttributes), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_WorldPositionOffset = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WorldPositionOffset"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(WorldPositionOffset, UMaterialExpressionMakeMaterialAttributes), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_Normal = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Normal"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Normal, UMaterialExpressionMakeMaterialAttributes), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_OpacityMask = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OpacityMask"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(OpacityMask, UMaterialExpressionMakeMaterialAttributes), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_Opacity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Opacity"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Opacity, UMaterialExpressionMakeMaterialAttributes), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_EmissiveColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EmissiveColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(EmissiveColor, UMaterialExpressionMakeMaterialAttributes), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_Roughness = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Roughness"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Roughness, UMaterialExpressionMakeMaterialAttributes), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_Specular = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Specular"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Specular, UMaterialExpressionMakeMaterialAttributes), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_Metallic = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Metallic"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Metallic, UMaterialExpressionMakeMaterialAttributes), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_BaseColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BaseColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(BaseColor, UMaterialExpressionMakeMaterialAttributes), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionMakeMaterialAttributes.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMakeMaterialAttributes.h"));
				MetaData->SetValue(NewProp_PixelDepthOffset, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMakeMaterialAttributes.h"));
				MetaData->SetValue(NewProp_CustomizedUVs, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMakeMaterialAttributes.h"));
				MetaData->SetValue(NewProp_Refraction, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMakeMaterialAttributes.h"));
				MetaData->SetValue(NewProp_AmbientOcclusion, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMakeMaterialAttributes.h"));
				MetaData->SetValue(NewProp_ClearCoatRoughness, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMakeMaterialAttributes.h"));
				MetaData->SetValue(NewProp_ClearCoat, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMakeMaterialAttributes.h"));
				MetaData->SetValue(NewProp_SubsurfaceColor, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMakeMaterialAttributes.h"));
				MetaData->SetValue(NewProp_TessellationMultiplier, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMakeMaterialAttributes.h"));
				MetaData->SetValue(NewProp_WorldDisplacement, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMakeMaterialAttributes.h"));
				MetaData->SetValue(NewProp_WorldPositionOffset, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMakeMaterialAttributes.h"));
				MetaData->SetValue(NewProp_Normal, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMakeMaterialAttributes.h"));
				MetaData->SetValue(NewProp_OpacityMask, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMakeMaterialAttributes.h"));
				MetaData->SetValue(NewProp_Opacity, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMakeMaterialAttributes.h"));
				MetaData->SetValue(NewProp_EmissiveColor, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMakeMaterialAttributes.h"));
				MetaData->SetValue(NewProp_Roughness, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMakeMaterialAttributes.h"));
				MetaData->SetValue(NewProp_Specular, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMakeMaterialAttributes.h"));
				MetaData->SetValue(NewProp_Metallic, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMakeMaterialAttributes.h"));
				MetaData->SetValue(NewProp_BaseColor, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMakeMaterialAttributes.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionMakeMaterialAttributes(Z_Construct_UClass_UMaterialExpressionMakeMaterialAttributes, TEXT("UMaterialExpressionMakeMaterialAttributes"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionMakeMaterialAttributes);
	UScriptStruct* Z_Construct_UScriptStruct_FFunctionExpressionOutput()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FFunctionExpressionOutput_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("FunctionExpressionOutput"), sizeof(FFunctionExpressionOutput), Get_Z_Construct_UScriptStruct_FFunctionExpressionOutput_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FunctionExpressionOutput"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FFunctionExpressionOutput>, EStructFlags(0x00000001));
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Output"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Output, FFunctionExpressionOutput), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionOutput());
			UProperty* NewProp_ExpressionOutputId = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ExpressionOutputId"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ExpressionOutputId, FFunctionExpressionOutput), 0x0000000000000000, Z_Construct_UScriptStruct_FGuid());
			UProperty* NewProp_ExpressionOutput = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ExpressionOutput"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ExpressionOutput, FFunctionExpressionOutput), 0x0000000000002000, Z_Construct_UClass_UMaterialExpressionFunctionOutput_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMaterialFunctionCall.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Struct that stores information about a function output which is needed to maintain connections and implement the function call."));
			MetaData->SetValue(NewProp_Output, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMaterialFunctionCall.h"));
			MetaData->SetValue(NewProp_Output, TEXT("ToolTip"), TEXT("Actual output struct which stores information about how this output is connected in the material."));
			MetaData->SetValue(NewProp_ExpressionOutputId, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMaterialFunctionCall.h"));
			MetaData->SetValue(NewProp_ExpressionOutputId, TEXT("ToolTip"), TEXT("Id of the FunctionOutput, used to link ExpressionOutput."));
			MetaData->SetValue(NewProp_ExpressionOutput, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMaterialFunctionCall.h"));
			MetaData->SetValue(NewProp_ExpressionOutput, TEXT("ToolTip"), TEXT("Reference to the FunctionOutput in the material function.\nThis is a reference to a private object so it can't be saved, and must be generated by UpdateFromFunctionResource or SetMaterialFunction."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FFunctionExpressionOutput_CRC() { return 3605288803U; }
	UScriptStruct* Z_Construct_UScriptStruct_FFunctionExpressionInput()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FFunctionExpressionInput_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("FunctionExpressionInput"), sizeof(FFunctionExpressionInput), Get_Z_Construct_UScriptStruct_FFunctionExpressionInput_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FunctionExpressionInput"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FFunctionExpressionInput>, EStructFlags(0x00000001));
			UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Input"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Input, FFunctionExpressionInput), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
			UProperty* NewProp_ExpressionInputId = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ExpressionInputId"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ExpressionInputId, FFunctionExpressionInput), 0x0000000000000000, Z_Construct_UScriptStruct_FGuid());
			UProperty* NewProp_ExpressionInput = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ExpressionInput"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ExpressionInput, FFunctionExpressionInput), 0x0000000000002000, Z_Construct_UClass_UMaterialExpressionFunctionInput_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMaterialFunctionCall.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Struct that stores information about a function input which is needed to maintain connections and implement the function call."));
			MetaData->SetValue(NewProp_Input, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMaterialFunctionCall.h"));
			MetaData->SetValue(NewProp_Input, TEXT("ToolTip"), TEXT("Actual input struct which stores information about how this input is connected in the material."));
			MetaData->SetValue(NewProp_ExpressionInputId, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMaterialFunctionCall.h"));
			MetaData->SetValue(NewProp_ExpressionInputId, TEXT("ToolTip"), TEXT("Id of the FunctionInput, used to link ExpressionInput."));
			MetaData->SetValue(NewProp_ExpressionInput, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMaterialFunctionCall.h"));
			MetaData->SetValue(NewProp_ExpressionInput, TEXT("ToolTip"), TEXT("Reference to the FunctionInput in the material function.\nThis is a reference to a private object so it can't be saved, and must be generated by UpdateFromFunctionResource or SetMaterialFunction."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FFunctionExpressionInput_CRC() { return 844822475U; }
	UClass* Z_Construct_UClass_UMaterialExpressionMaterialFunctionCall_NoRegister()
	{
		return UMaterialExpressionMaterialFunctionCall::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionMaterialFunctionCall()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionMaterialFunctionCall::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_FunctionOutputs = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FunctionOutputs"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(FunctionOutputs, UMaterialExpressionMaterialFunctionCall), 0x0000000000000000);
				UProperty* NewProp_FunctionOutputs_Inner = new(EC_InternalUseOnlyConstructor, NewProp_FunctionOutputs, TEXT("FunctionOutputs"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FFunctionExpressionOutput());
				UProperty* NewProp_FunctionInputs = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FunctionInputs"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(FunctionInputs, UMaterialExpressionMaterialFunctionCall), 0x0000000000000000);
				UProperty* NewProp_FunctionInputs_Inner = new(EC_InternalUseOnlyConstructor, NewProp_FunctionInputs, TEXT("FunctionInputs"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FFunctionExpressionInput());
				UProperty* NewProp_MaterialFunction = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaterialFunction"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(MaterialFunction, UMaterialExpressionMaterialFunctionCall), 0x0000000000000001, Z_Construct_UClass_UMaterialFunction_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionMaterialFunctionCall.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMaterialFunctionCall.h"));
				MetaData->SetValue(NewProp_FunctionOutputs, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMaterialFunctionCall.h"));
				MetaData->SetValue(NewProp_FunctionOutputs, TEXT("ToolTip"), TEXT("Array of all the function outputs that this function exposes."));
				MetaData->SetValue(NewProp_FunctionInputs, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMaterialFunctionCall.h"));
				MetaData->SetValue(NewProp_FunctionInputs, TEXT("ToolTip"), TEXT("Array of all the function inputs that this function exposes."));
				MetaData->SetValue(NewProp_MaterialFunction, TEXT("Category"), TEXT("MaterialExpressionMaterialFunctionCall"));
				MetaData->SetValue(NewProp_MaterialFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMaterialFunctionCall.h"));
				MetaData->SetValue(NewProp_MaterialFunction, TEXT("ToolTip"), TEXT("The function to call."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionMaterialFunctionCall(Z_Construct_UClass_UMaterialExpressionMaterialFunctionCall, TEXT("UMaterialExpressionMaterialFunctionCall"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionMaterialFunctionCall);
	UClass* Z_Construct_UClass_UMaterialExpressionMax_NoRegister()
	{
		return UMaterialExpressionMax::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionMax()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionMax::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ConstB = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConstB"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ConstB, UMaterialExpressionMax), 0x0000000000000001);
				UProperty* NewProp_ConstA = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConstA"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ConstA, UMaterialExpressionMax), 0x0000000000000001);
				UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(B, UMaterialExpressionMax), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, UMaterialExpressionMax), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionMax.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMax.h"));
				MetaData->SetValue(NewProp_ConstB, TEXT("Category"), TEXT("MaterialExpressionMax"));
				MetaData->SetValue(NewProp_ConstB, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMax.h"));
				MetaData->SetValue(NewProp_ConstB, TEXT("OverridingInputProperty"), TEXT("B"));
				MetaData->SetValue(NewProp_ConstB, TEXT("ToolTip"), TEXT("only used if B is not hooked up"));
				MetaData->SetValue(NewProp_ConstA, TEXT("Category"), TEXT("MaterialExpressionMax"));
				MetaData->SetValue(NewProp_ConstA, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMax.h"));
				MetaData->SetValue(NewProp_ConstA, TEXT("OverridingInputProperty"), TEXT("A"));
				MetaData->SetValue(NewProp_ConstA, TEXT("ToolTip"), TEXT("only used if A is not hooked up"));
				MetaData->SetValue(NewProp_B, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMax.h"));
				MetaData->SetValue(NewProp_B, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_B, TEXT("ToolTip"), TEXT("Defaults to 'ConstB' if not specified"));
				MetaData->SetValue(NewProp_A, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMax.h"));
				MetaData->SetValue(NewProp_A, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_A, TEXT("ToolTip"), TEXT("Defaults to 'ConstA' if not specified"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionMax(Z_Construct_UClass_UMaterialExpressionMax, TEXT("UMaterialExpressionMax"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionMax);
	UClass* Z_Construct_UClass_UMaterialExpressionMin_NoRegister()
	{
		return UMaterialExpressionMin::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionMin()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionMin::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ConstB = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConstB"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ConstB, UMaterialExpressionMin), 0x0000000000000001);
				UProperty* NewProp_ConstA = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConstA"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ConstA, UMaterialExpressionMin), 0x0000000000000001);
				UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(B, UMaterialExpressionMin), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, UMaterialExpressionMin), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionMin.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMin.h"));
				MetaData->SetValue(NewProp_ConstB, TEXT("Category"), TEXT("MaterialExpressionMin"));
				MetaData->SetValue(NewProp_ConstB, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMin.h"));
				MetaData->SetValue(NewProp_ConstB, TEXT("OverridingInputProperty"), TEXT("B"));
				MetaData->SetValue(NewProp_ConstB, TEXT("ToolTip"), TEXT("only used if B is not hooked up"));
				MetaData->SetValue(NewProp_ConstA, TEXT("Category"), TEXT("MaterialExpressionMin"));
				MetaData->SetValue(NewProp_ConstA, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMin.h"));
				MetaData->SetValue(NewProp_ConstA, TEXT("OverridingInputProperty"), TEXT("A"));
				MetaData->SetValue(NewProp_ConstA, TEXT("ToolTip"), TEXT("only used if A is not hooked up"));
				MetaData->SetValue(NewProp_B, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMin.h"));
				MetaData->SetValue(NewProp_B, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_B, TEXT("ToolTip"), TEXT("Defaults to 'ConstB' if not specified"));
				MetaData->SetValue(NewProp_A, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMin.h"));
				MetaData->SetValue(NewProp_A, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_A, TEXT("ToolTip"), TEXT("Defaults to 'ConstA' if not specified"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionMin(Z_Construct_UClass_UMaterialExpressionMin, TEXT("UMaterialExpressionMin"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionMin);
	UClass* Z_Construct_UClass_UMaterialExpressionMultiply_NoRegister()
	{
		return UMaterialExpressionMultiply::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionMultiply()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionMultiply::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ConstB = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConstB"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ConstB, UMaterialExpressionMultiply), 0x0000000000000001);
				UProperty* NewProp_ConstA = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConstA"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ConstA, UMaterialExpressionMultiply), 0x0000000000000001);
				UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(B, UMaterialExpressionMultiply), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, UMaterialExpressionMultiply), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionMultiply.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMultiply.h"));
				MetaData->SetValue(NewProp_ConstB, TEXT("Category"), TEXT("MaterialExpressionMultiply"));
				MetaData->SetValue(NewProp_ConstB, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMultiply.h"));
				MetaData->SetValue(NewProp_ConstB, TEXT("OverridingInputProperty"), TEXT("B"));
				MetaData->SetValue(NewProp_ConstB, TEXT("ToolTip"), TEXT("only used if B is not hooked up"));
				MetaData->SetValue(NewProp_ConstA, TEXT("Category"), TEXT("MaterialExpressionMultiply"));
				MetaData->SetValue(NewProp_ConstA, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMultiply.h"));
				MetaData->SetValue(NewProp_ConstA, TEXT("OverridingInputProperty"), TEXT("A"));
				MetaData->SetValue(NewProp_ConstA, TEXT("ToolTip"), TEXT("only used if A is not hooked up"));
				MetaData->SetValue(NewProp_B, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMultiply.h"));
				MetaData->SetValue(NewProp_B, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_B, TEXT("ToolTip"), TEXT("Defaults to 'ConstB' if not specified"));
				MetaData->SetValue(NewProp_A, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMultiply.h"));
				MetaData->SetValue(NewProp_A, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_A, TEXT("ToolTip"), TEXT("Defaults to 'ConstA' if not specified"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionMultiply(Z_Construct_UClass_UMaterialExpressionMultiply, TEXT("UMaterialExpressionMultiply"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionMultiply);
	UEnum* Z_Construct_UEnum_Engine_ENoiseFunction()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_ENoiseFunction_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ENoiseFunction"), 0, Get_Z_Construct_UEnum_Engine_ENoiseFunction_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ENoiseFunction"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("NOISEFUNCTION_Simplex")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("NOISEFUNCTION_Perlin")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("NOISEFUNCTION_Gradient")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("NOISEFUNCTION_FastGradient")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("NOISEFUNCTION_MAX")), 4));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionNoise.h"));
			MetaData->SetValue(ReturnEnum, TEXT("NOISEFUNCTION_FastGradient.DisplayName"), TEXT("FastGradient"));
			MetaData->SetValue(ReturnEnum, TEXT("NOISEFUNCTION_FastGradient.ToolTip"), TEXT("Very fast (1 texture lookup, ~33 instructions per level), need to test more on every hardware, requires high quality texture filtering for bump mapping."));
			MetaData->SetValue(ReturnEnum, TEXT("NOISEFUNCTION_Gradient.DisplayName"), TEXT("Gradient"));
			MetaData->SetValue(ReturnEnum, TEXT("NOISEFUNCTION_Gradient.ToolTip"), TEXT("Very slow (~393 instructions per level)."));
			MetaData->SetValue(ReturnEnum, TEXT("NOISEFUNCTION_Perlin.DisplayName"), TEXT("Perlin"));
			MetaData->SetValue(ReturnEnum, TEXT("NOISEFUNCTION_Perlin.ToolTip"), TEXT("Fast (~77 instructions per level) but low quality."));
			MetaData->SetValue(ReturnEnum, TEXT("NOISEFUNCTION_Simplex.DisplayName"), TEXT("Simplex"));
			MetaData->SetValue(ReturnEnum, TEXT("NOISEFUNCTION_Simplex.ToolTip"), TEXT("Fast (~94 instructions per level)."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_ENoiseFunction_CRC() { return 1708631119U; }
	UClass* Z_Construct_UClass_UMaterialExpressionNoise_NoRegister()
	{
		return UMaterialExpressionNoise::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionNoise()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionNoise::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_LevelScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LevelScale"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(LevelScale, UMaterialExpressionNoise), 0x0000000000000001);
				UProperty* NewProp_OutputMax = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OutputMax"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(OutputMax, UMaterialExpressionNoise), 0x0000000000000001);
				UProperty* NewProp_OutputMin = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OutputMin"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(OutputMin, UMaterialExpressionNoise), 0x0000000000000001);
				UProperty* NewProp_Levels = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Levels"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Levels, UMaterialExpressionNoise), 0x0000000000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTurbulence, UMaterialExpressionNoise, uint8);
				UProperty* NewProp_bTurbulence = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bTurbulence"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTurbulence, UMaterialExpressionNoise), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bTurbulence, UMaterialExpressionNoise), sizeof(uint8), false);
				UProperty* NewProp_NoiseFunction = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NoiseFunction"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(NoiseFunction, UMaterialExpressionNoise), 0x0000000000000001, Z_Construct_UEnum_Engine_ENoiseFunction());
				UProperty* NewProp_Quality = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Quality"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Quality, UMaterialExpressionNoise), 0x0000000000000001);
				UProperty* NewProp_Scale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Scale"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Scale, UMaterialExpressionNoise), 0x0000000000000001);
				UProperty* NewProp_FilterWidth = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FilterWidth"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(FilterWidth, UMaterialExpressionNoise), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_Position = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Position"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Position, UMaterialExpressionNoise), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionNoise.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionNoise.h"));
				MetaData->SetValue(NewProp_LevelScale, TEXT("Category"), TEXT("MaterialExpressionNoise"));
				MetaData->SetValue(NewProp_LevelScale, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionNoise.h"));
				MetaData->SetValue(NewProp_LevelScale, TEXT("ToolTip"), TEXT("usually 2 but higher values allow efficient use of few levels"));
				MetaData->SetValue(NewProp_LevelScale, TEXT("UIMax"), TEXT("8"));
				MetaData->SetValue(NewProp_LevelScale, TEXT("UIMin"), TEXT("2"));
				MetaData->SetValue(NewProp_OutputMax, TEXT("Category"), TEXT("MaterialExpressionNoise"));
				MetaData->SetValue(NewProp_OutputMax, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionNoise.h"));
				MetaData->SetValue(NewProp_OutputMin, TEXT("Category"), TEXT("MaterialExpressionNoise"));
				MetaData->SetValue(NewProp_OutputMin, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionNoise.h"));
				MetaData->SetValue(NewProp_Levels, TEXT("Category"), TEXT("MaterialExpressionNoise"));
				MetaData->SetValue(NewProp_Levels, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionNoise.h"));
				MetaData->SetValue(NewProp_Levels, TEXT("ToolTip"), TEXT("1 = fast but little detail, .. larger numbers cost more performance, only used for turbulence"));
				MetaData->SetValue(NewProp_Levels, TEXT("UIMax"), TEXT("10"));
				MetaData->SetValue(NewProp_Levels, TEXT("UIMin"), TEXT("1"));
				MetaData->SetValue(NewProp_bTurbulence, TEXT("Category"), TEXT("MaterialExpressionNoise"));
				MetaData->SetValue(NewProp_bTurbulence, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionNoise.h"));
				MetaData->SetValue(NewProp_bTurbulence, TEXT("ToolTip"), TEXT("How multiple frequencies are getting combined"));
				MetaData->SetValue(NewProp_NoiseFunction, TEXT("Category"), TEXT("MaterialExpressionNoise"));
				MetaData->SetValue(NewProp_NoiseFunction, TEXT("DisplayName"), TEXT("Function"));
				MetaData->SetValue(NewProp_NoiseFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionNoise.h"));
				MetaData->SetValue(NewProp_NoiseFunction, TEXT("ToolTip"), TEXT("Noise function, affects performance and look"));
				MetaData->SetValue(NewProp_Quality, TEXT("Category"), TEXT("MaterialExpressionNoise"));
				MetaData->SetValue(NewProp_Quality, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionNoise.h"));
				MetaData->SetValue(NewProp_Quality, TEXT("ToolTip"), TEXT("0 = fast, allows to pick a different implementation, can affect performance and look"));
				MetaData->SetValue(NewProp_Quality, TEXT("UIMax"), TEXT("10"));
				MetaData->SetValue(NewProp_Quality, TEXT("UIMin"), TEXT("1"));
				MetaData->SetValue(NewProp_Scale, TEXT("Category"), TEXT("MaterialExpressionNoise"));
				MetaData->SetValue(NewProp_Scale, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionNoise.h"));
				MetaData->SetValue(NewProp_Scale, TEXT("ToolTip"), TEXT("can also be done with a multiply on the Position"));
				MetaData->SetValue(NewProp_FilterWidth, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionNoise.h"));
				MetaData->SetValue(NewProp_FilterWidth, TEXT("ToolTip"), TEXT("scalar, to clamp the Levels at pixel level, can be computed like this: max(length(ddx(Position)), length(ddy(Position))"));
				MetaData->SetValue(NewProp_Position, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionNoise.h"));
				MetaData->SetValue(NewProp_Position, TEXT("ToolTip"), TEXT("2 to 3 dimensional vector"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionNoise(Z_Construct_UClass_UMaterialExpressionNoise, TEXT("UMaterialExpressionNoise"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionNoise);
	UClass* Z_Construct_UClass_UMaterialExpressionNormalize_NoRegister()
	{
		return UMaterialExpressionNormalize::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionNormalize()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionNormalize::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_VectorInput = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VectorInput"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(VectorInput, UMaterialExpressionNormalize), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionNormalize.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionNormalize.h"));
				MetaData->SetValue(NewProp_VectorInput, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionNormalize.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionNormalize(Z_Construct_UClass_UMaterialExpressionNormalize, TEXT("UMaterialExpressionNormalize"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionNormalize);
	UClass* Z_Construct_UClass_UMaterialExpressionObjectBounds_NoRegister()
	{
		return UMaterialExpressionObjectBounds::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionObjectBounds()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionObjectBounds::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionObjectBounds.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionObjectBounds.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionObjectBounds(Z_Construct_UClass_UMaterialExpressionObjectBounds, TEXT("UMaterialExpressionObjectBounds"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionObjectBounds);
	UClass* Z_Construct_UClass_UMaterialExpressionObjectOrientation_NoRegister()
	{
		return UMaterialExpressionObjectOrientation::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionObjectOrientation()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionObjectOrientation::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionObjectOrientation.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionObjectOrientation.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionObjectOrientation(Z_Construct_UClass_UMaterialExpressionObjectOrientation, TEXT("UMaterialExpressionObjectOrientation"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionObjectOrientation);
	UClass* Z_Construct_UClass_UMaterialExpressionObjectPositionWS_NoRegister()
	{
		return UMaterialExpressionObjectPositionWS::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionObjectPositionWS()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionObjectPositionWS::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionObjectPositionWS.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionObjectPositionWS.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionObjectPositionWS(Z_Construct_UClass_UMaterialExpressionObjectPositionWS, TEXT("UMaterialExpressionObjectPositionWS"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionObjectPositionWS);
	UClass* Z_Construct_UClass_UMaterialExpressionObjectRadius_NoRegister()
	{
		return UMaterialExpressionObjectRadius::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionObjectRadius()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionObjectRadius::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionObjectRadius.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionObjectRadius.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionObjectRadius(Z_Construct_UClass_UMaterialExpressionObjectRadius, TEXT("UMaterialExpressionObjectRadius"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionObjectRadius);
	UClass* Z_Construct_UClass_UMaterialExpressionOneMinus_NoRegister()
	{
		return UMaterialExpressionOneMinus::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionOneMinus()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionOneMinus::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Input"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Input, UMaterialExpressionOneMinus), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionOneMinus.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionOneMinus.h"));
				MetaData->SetValue(NewProp_Input, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionOneMinus.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionOneMinus(Z_Construct_UClass_UMaterialExpressionOneMinus, TEXT("UMaterialExpressionOneMinus"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionOneMinus);
	UClass* Z_Construct_UClass_UMaterialExpressionPanner_NoRegister()
	{
		return UMaterialExpressionPanner::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionPanner()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionPanner::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bFractionalPart, UMaterialExpressionPanner, bool);
				UProperty* NewProp_bFractionalPart = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bFractionalPart"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bFractionalPart, UMaterialExpressionPanner), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bFractionalPart, UMaterialExpressionPanner), sizeof(bool), true);
				UProperty* NewProp_ConstCoordinate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConstCoordinate"), RF_Public|RF_Transient|RF_Native) UUInt32Property(CPP_PROPERTY_BASE(ConstCoordinate, UMaterialExpressionPanner), 0x0000000000000001);
				UProperty* NewProp_SpeedY = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SpeedY"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(SpeedY, UMaterialExpressionPanner), 0x0000000000000001);
				UProperty* NewProp_SpeedX = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SpeedX"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(SpeedX, UMaterialExpressionPanner), 0x0000000000000001);
				UProperty* NewProp_Time = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Time"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Time, UMaterialExpressionPanner), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_Coordinate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Coordinate"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Coordinate, UMaterialExpressionPanner), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionPanner.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionPanner.h"));
				MetaData->SetValue(NewProp_bFractionalPart, TEXT("Category"), TEXT("MaterialExpressionPanner"));
				MetaData->SetValue(NewProp_bFractionalPart, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionPanner.h"));
				MetaData->SetValue(NewProp_bFractionalPart, TEXT("ToolTip"), TEXT("Output only the fractional part of the pan calculation for greater precision.\nOutput is greater than or equal to 0 and less than 1."));
				MetaData->SetValue(NewProp_ConstCoordinate, TEXT("Category"), TEXT("MaterialExpressionPanner"));
				MetaData->SetValue(NewProp_ConstCoordinate, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionPanner.h"));
				MetaData->SetValue(NewProp_ConstCoordinate, TEXT("ToolTip"), TEXT("only used if Coordinate is not hooked up"));
				MetaData->SetValue(NewProp_SpeedY, TEXT("Category"), TEXT("MaterialExpressionPanner"));
				MetaData->SetValue(NewProp_SpeedY, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionPanner.h"));
				MetaData->SetValue(NewProp_SpeedX, TEXT("Category"), TEXT("MaterialExpressionPanner"));
				MetaData->SetValue(NewProp_SpeedX, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionPanner.h"));
				MetaData->SetValue(NewProp_Time, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionPanner.h"));
				MetaData->SetValue(NewProp_Time, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_Time, TEXT("ToolTip"), TEXT("Defaults to Game Time if not specified"));
				MetaData->SetValue(NewProp_Coordinate, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionPanner.h"));
				MetaData->SetValue(NewProp_Coordinate, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_Coordinate, TEXT("ToolTip"), TEXT("Defaults to 'ConstCoordinate' if not specified"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionPanner(Z_Construct_UClass_UMaterialExpressionPanner, TEXT("UMaterialExpressionPanner"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionPanner);
	UClass* Z_Construct_UClass_UMaterialExpressionParameter_NoRegister()
	{
		return UMaterialExpressionParameter::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionParameter()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionParameter::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Group = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Group"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(Group, UMaterialExpressionParameter), 0x0000000000000001);
				UProperty* NewProp_ExpressionGUID = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ExpressionGUID"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ExpressionGUID, UMaterialExpressionParameter), 0x0000000000000000, Z_Construct_UScriptStruct_FGuid());
				UProperty* NewProp_ParameterName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ParameterName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(ParameterName, UMaterialExpressionParameter), 0x0000000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionParameter.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionParameter.h"));
				MetaData->SetValue(NewProp_Group, TEXT("Category"), TEXT("MaterialExpressionParameter"));
				MetaData->SetValue(NewProp_Group, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionParameter.h"));
				MetaData->SetValue(NewProp_Group, TEXT("ToolTip"), TEXT("The name of the parameter Group to display in MaterialInstance Editor. Default is None group"));
				MetaData->SetValue(NewProp_ExpressionGUID, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionParameter.h"));
				MetaData->SetValue(NewProp_ExpressionGUID, TEXT("ToolTip"), TEXT("GUID that should be unique within the material, this is used for parameter renaming."));
				MetaData->SetValue(NewProp_ParameterName, TEXT("Category"), TEXT("MaterialExpressionParameter"));
				MetaData->SetValue(NewProp_ParameterName, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionParameter.h"));
				MetaData->SetValue(NewProp_ParameterName, TEXT("ToolTip"), TEXT("The name of the parameter"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionParameter(Z_Construct_UClass_UMaterialExpressionParameter, TEXT("UMaterialExpressionParameter"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionParameter);
	UClass* Z_Construct_UClass_UMaterialExpressionScalarParameter_NoRegister()
	{
		return UMaterialExpressionScalarParameter::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionScalarParameter()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpressionParameter();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionScalarParameter::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_SliderMax = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SliderMax"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(SliderMax, UMaterialExpressionScalarParameter), 0x0000000000000001);
				UProperty* NewProp_SliderMin = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SliderMin"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(SliderMin, UMaterialExpressionScalarParameter), 0x0000000000000001);
				UProperty* NewProp_DefaultValue = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DefaultValue, UMaterialExpressionScalarParameter), 0x0000000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionScalarParameter.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionScalarParameter.h"));
				MetaData->SetValue(NewProp_SliderMax, TEXT("Category"), TEXT("MaterialExpressionScalarParameter"));
				MetaData->SetValue(NewProp_SliderMax, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionScalarParameter.h"));
				MetaData->SetValue(NewProp_SliderMax, TEXT("ToolTip"), TEXT("Sets the upper bound for the slider on this parameter in the material instance editor.\nThe slider will be disabled if SliderMax <= SliderMin."));
				MetaData->SetValue(NewProp_SliderMin, TEXT("Category"), TEXT("MaterialExpressionScalarParameter"));
				MetaData->SetValue(NewProp_SliderMin, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionScalarParameter.h"));
				MetaData->SetValue(NewProp_SliderMin, TEXT("ToolTip"), TEXT("Sets the lower bound for the slider on this parameter in the material instance editor."));
				MetaData->SetValue(NewProp_DefaultValue, TEXT("Category"), TEXT("MaterialExpressionScalarParameter"));
				MetaData->SetValue(NewProp_DefaultValue, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionScalarParameter.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionScalarParameter(Z_Construct_UClass_UMaterialExpressionScalarParameter, TEXT("UMaterialExpressionScalarParameter"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionScalarParameter);
	UClass* Z_Construct_UClass_UMaterialExpressionStaticBoolParameter_NoRegister()
	{
		return UMaterialExpressionStaticBoolParameter::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionStaticBoolParameter()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpressionParameter();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionStaticBoolParameter::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(DefaultValue, UMaterialExpressionStaticBoolParameter, uint8);
				UProperty* NewProp_DefaultValue = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(DefaultValue, UMaterialExpressionStaticBoolParameter), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(DefaultValue, UMaterialExpressionStaticBoolParameter), sizeof(uint8), false);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionStaticBoolParameter.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionStaticBoolParameter.h"));
				MetaData->SetValue(NewProp_DefaultValue, TEXT("Category"), TEXT("MaterialExpressionStaticBoolParameter"));
				MetaData->SetValue(NewProp_DefaultValue, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionStaticBoolParameter.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionStaticBoolParameter(Z_Construct_UClass_UMaterialExpressionStaticBoolParameter, TEXT("UMaterialExpressionStaticBoolParameter"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionStaticBoolParameter);
	UClass* Z_Construct_UClass_UMaterialExpressionStaticSwitchParameter_NoRegister()
	{
		return UMaterialExpressionStaticSwitchParameter::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionStaticSwitchParameter()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpressionStaticBoolParameter();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionStaticSwitchParameter::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(B, UMaterialExpressionStaticSwitchParameter), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, UMaterialExpressionStaticSwitchParameter), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionStaticSwitchParameter.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionStaticSwitchParameter.h"));
				MetaData->SetValue(NewProp_B, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionStaticSwitchParameter.h"));
				MetaData->SetValue(NewProp_A, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionStaticSwitchParameter.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionStaticSwitchParameter(Z_Construct_UClass_UMaterialExpressionStaticSwitchParameter, TEXT("UMaterialExpressionStaticSwitchParameter"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionStaticSwitchParameter);
	UClass* Z_Construct_UClass_UMaterialExpressionStaticComponentMaskParameter_NoRegister()
	{
		return UMaterialExpressionStaticComponentMaskParameter::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionStaticComponentMaskParameter()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpressionParameter();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionStaticComponentMaskParameter::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(DefaultA, UMaterialExpressionStaticComponentMaskParameter, uint8);
				UProperty* NewProp_DefaultA = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultA"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(DefaultA, UMaterialExpressionStaticComponentMaskParameter), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(DefaultA, UMaterialExpressionStaticComponentMaskParameter), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(DefaultB, UMaterialExpressionStaticComponentMaskParameter, uint8);
				UProperty* NewProp_DefaultB = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultB"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(DefaultB, UMaterialExpressionStaticComponentMaskParameter), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(DefaultB, UMaterialExpressionStaticComponentMaskParameter), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(DefaultG, UMaterialExpressionStaticComponentMaskParameter, uint8);
				UProperty* NewProp_DefaultG = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultG"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(DefaultG, UMaterialExpressionStaticComponentMaskParameter), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(DefaultG, UMaterialExpressionStaticComponentMaskParameter), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(DefaultR, UMaterialExpressionStaticComponentMaskParameter, uint8);
				UProperty* NewProp_DefaultR = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultR"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(DefaultR, UMaterialExpressionStaticComponentMaskParameter), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(DefaultR, UMaterialExpressionStaticComponentMaskParameter), sizeof(uint8), false);
				UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Input"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Input, UMaterialExpressionStaticComponentMaskParameter), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionStaticComponentMaskParameter.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionStaticComponentMaskParameter.h"));
				MetaData->SetValue(NewProp_DefaultA, TEXT("Category"), TEXT("MaterialExpressionStaticComponentMaskParameter"));
				MetaData->SetValue(NewProp_DefaultA, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionStaticComponentMaskParameter.h"));
				MetaData->SetValue(NewProp_DefaultB, TEXT("Category"), TEXT("MaterialExpressionStaticComponentMaskParameter"));
				MetaData->SetValue(NewProp_DefaultB, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionStaticComponentMaskParameter.h"));
				MetaData->SetValue(NewProp_DefaultG, TEXT("Category"), TEXT("MaterialExpressionStaticComponentMaskParameter"));
				MetaData->SetValue(NewProp_DefaultG, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionStaticComponentMaskParameter.h"));
				MetaData->SetValue(NewProp_DefaultR, TEXT("Category"), TEXT("MaterialExpressionStaticComponentMaskParameter"));
				MetaData->SetValue(NewProp_DefaultR, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionStaticComponentMaskParameter.h"));
				MetaData->SetValue(NewProp_Input, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionStaticComponentMaskParameter.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionStaticComponentMaskParameter(Z_Construct_UClass_UMaterialExpressionStaticComponentMaskParameter, TEXT("UMaterialExpressionStaticComponentMaskParameter"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionStaticComponentMaskParameter);
	UClass* Z_Construct_UClass_UMaterialExpressionVectorParameter_NoRegister()
	{
		return UMaterialExpressionVectorParameter::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionVectorParameter()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpressionParameter();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionVectorParameter::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_DefaultValue = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DefaultValue, UMaterialExpressionVectorParameter), 0x0000000000000001, Z_Construct_UScriptStruct_FLinearColor());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionVectorParameter.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionVectorParameter.h"));
				MetaData->SetValue(NewProp_DefaultValue, TEXT("Category"), TEXT("MaterialExpressionVectorParameter"));
				MetaData->SetValue(NewProp_DefaultValue, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionVectorParameter.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionVectorParameter(Z_Construct_UClass_UMaterialExpressionVectorParameter, TEXT("UMaterialExpressionVectorParameter"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionVectorParameter);
	UClass* Z_Construct_UClass_UMaterialExpressionParticleColor_NoRegister()
	{
		return UMaterialExpressionParticleColor::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionParticleColor()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionParticleColor::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionParticleColor.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionParticleColor.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionParticleColor(Z_Construct_UClass_UMaterialExpressionParticleColor, TEXT("UMaterialExpressionParticleColor"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionParticleColor);
	UClass* Z_Construct_UClass_UMaterialExpressionParticleDirection_NoRegister()
	{
		return UMaterialExpressionParticleDirection::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionParticleDirection()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionParticleDirection::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionParticleDirection.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionParticleDirection.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionParticleDirection(Z_Construct_UClass_UMaterialExpressionParticleDirection, TEXT("UMaterialExpressionParticleDirection"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionParticleDirection);
	UClass* Z_Construct_UClass_UMaterialExpressionParticleMacroUV_NoRegister()
	{
		return UMaterialExpressionParticleMacroUV::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionParticleMacroUV()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionParticleMacroUV::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionParticleMacroUV.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionParticleMacroUV.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionParticleMacroUV(Z_Construct_UClass_UMaterialExpressionParticleMacroUV, TEXT("UMaterialExpressionParticleMacroUV"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionParticleMacroUV);
	UClass* Z_Construct_UClass_UMaterialExpressionParticleMotionBlurFade_NoRegister()
	{
		return UMaterialExpressionParticleMotionBlurFade::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionParticleMotionBlurFade()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionParticleMotionBlurFade::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionParticleMotionBlurFade.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionParticleMotionBlurFade.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionParticleMotionBlurFade(Z_Construct_UClass_UMaterialExpressionParticleMotionBlurFade, TEXT("UMaterialExpressionParticleMotionBlurFade"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionParticleMotionBlurFade);
	UClass* Z_Construct_UClass_UMaterialExpressionParticlePositionWS_NoRegister()
	{
		return UMaterialExpressionParticlePositionWS::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionParticlePositionWS()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionParticlePositionWS::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionParticlePositionWS.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionParticlePositionWS.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionParticlePositionWS(Z_Construct_UClass_UMaterialExpressionParticlePositionWS, TEXT("UMaterialExpressionParticlePositionWS"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionParticlePositionWS);
	UClass* Z_Construct_UClass_UMaterialExpressionParticleRadius_NoRegister()
	{
		return UMaterialExpressionParticleRadius::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionParticleRadius()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionParticleRadius::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionParticleRadius.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionParticleRadius.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionParticleRadius(Z_Construct_UClass_UMaterialExpressionParticleRadius, TEXT("UMaterialExpressionParticleRadius"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionParticleRadius);
	UClass* Z_Construct_UClass_UMaterialExpressionParticleRelativeTime_NoRegister()
	{
		return UMaterialExpressionParticleRelativeTime::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionParticleRelativeTime()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionParticleRelativeTime::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionParticleRelativeTime.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionParticleRelativeTime.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionParticleRelativeTime(Z_Construct_UClass_UMaterialExpressionParticleRelativeTime, TEXT("UMaterialExpressionParticleRelativeTime"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionParticleRelativeTime);
	UClass* Z_Construct_UClass_UMaterialExpressionParticleSize_NoRegister()
	{
		return UMaterialExpressionParticleSize::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionParticleSize()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionParticleSize::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionParticleSize.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionParticleSize.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionParticleSize(Z_Construct_UClass_UMaterialExpressionParticleSize, TEXT("UMaterialExpressionParticleSize"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionParticleSize);
	UClass* Z_Construct_UClass_UMaterialExpressionParticleSpeed_NoRegister()
	{
		return UMaterialExpressionParticleSpeed::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionParticleSpeed()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionParticleSpeed::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionParticleSpeed.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionParticleSpeed.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionParticleSpeed(Z_Construct_UClass_UMaterialExpressionParticleSpeed, TEXT("UMaterialExpressionParticleSpeed"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionParticleSpeed);
	UClass* Z_Construct_UClass_UMaterialExpressionPerInstanceFadeAmount_NoRegister()
	{
		return UMaterialExpressionPerInstanceFadeAmount::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionPerInstanceFadeAmount()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionPerInstanceFadeAmount::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionPerInstanceFadeAmount.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionPerInstanceFadeAmount.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionPerInstanceFadeAmount(Z_Construct_UClass_UMaterialExpressionPerInstanceFadeAmount, TEXT("UMaterialExpressionPerInstanceFadeAmount"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionPerInstanceFadeAmount);
	UClass* Z_Construct_UClass_UMaterialExpressionPerInstanceRandom_NoRegister()
	{
		return UMaterialExpressionPerInstanceRandom::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionPerInstanceRandom()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionPerInstanceRandom::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionPerInstanceRandom.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionPerInstanceRandom.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionPerInstanceRandom(Z_Construct_UClass_UMaterialExpressionPerInstanceRandom, TEXT("UMaterialExpressionPerInstanceRandom"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionPerInstanceRandom);
	UClass* Z_Construct_UClass_UMaterialExpressionPixelDepth_NoRegister()
	{
		return UMaterialExpressionPixelDepth::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionPixelDepth()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionPixelDepth::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionPixelDepth.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionPixelDepth.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionPixelDepth(Z_Construct_UClass_UMaterialExpressionPixelDepth, TEXT("UMaterialExpressionPixelDepth"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionPixelDepth);
	UClass* Z_Construct_UClass_UMaterialExpressionPixelNormalWS_NoRegister()
	{
		return UMaterialExpressionPixelNormalWS::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionPixelNormalWS()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionPixelNormalWS::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionPixelNormalWS.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionPixelNormalWS.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionPixelNormalWS(Z_Construct_UClass_UMaterialExpressionPixelNormalWS, TEXT("UMaterialExpressionPixelNormalWS"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionPixelNormalWS);
	UClass* Z_Construct_UClass_UMaterialExpressionPower_NoRegister()
	{
		return UMaterialExpressionPower::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionPower()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionPower::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ConstExponent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConstExponent"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ConstExponent, UMaterialExpressionPower), 0x0000000000000001);
				UProperty* NewProp_Exponent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Exponent"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Exponent, UMaterialExpressionPower), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_Base = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Base"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Base, UMaterialExpressionPower), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionPower.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionPower.h"));
				MetaData->SetValue(NewProp_ConstExponent, TEXT("Category"), TEXT("MaterialExpressionPower"));
				MetaData->SetValue(NewProp_ConstExponent, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionPower.h"));
				MetaData->SetValue(NewProp_ConstExponent, TEXT("OverridingInputProperty"), TEXT("Exponent"));
				MetaData->SetValue(NewProp_ConstExponent, TEXT("ToolTip"), TEXT("only used if Exponent is not hooked up"));
				MetaData->SetValue(NewProp_Exponent, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionPower.h"));
				MetaData->SetValue(NewProp_Exponent, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_Exponent, TEXT("ToolTip"), TEXT("Defaults to 'ConstExponent' if not specified"));
				MetaData->SetValue(NewProp_Base, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionPower.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionPower(Z_Construct_UClass_UMaterialExpressionPower, TEXT("UMaterialExpressionPower"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionPower);
	UClass* Z_Construct_UClass_UMaterialExpressionPrecomputedAOMask_NoRegister()
	{
		return UMaterialExpressionPrecomputedAOMask::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionPrecomputedAOMask()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionPrecomputedAOMask::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionPrecomputedAOMask.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionPrecomputedAOMask.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionPrecomputedAOMask(Z_Construct_UClass_UMaterialExpressionPrecomputedAOMask, TEXT("UMaterialExpressionPrecomputedAOMask"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionPrecomputedAOMask);
	UClass* Z_Construct_UClass_UMaterialExpressionQualitySwitch_NoRegister()
	{
		return UMaterialExpressionQualitySwitch::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionQualitySwitch()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionQualitySwitch::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Inputs = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Inputs"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Inputs, UMaterialExpressionQualitySwitch), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				NewProp_Inputs->ArrayDim = CPP_ARRAY_DIM(Inputs, UMaterialExpressionQualitySwitch);
				UProperty* NewProp_Default = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Default"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Default, UMaterialExpressionQualitySwitch), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionQualitySwitch.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionQualitySwitch.h"));
				MetaData->SetValue(NewProp_Inputs, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionQualitySwitch.h"));
				MetaData->SetValue(NewProp_Default, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionQualitySwitch.h"));
				MetaData->SetValue(NewProp_Default, TEXT("ToolTip"), TEXT("Default connection, used when a specific quality level input is missing."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionQualitySwitch(Z_Construct_UClass_UMaterialExpressionQualitySwitch, TEXT("UMaterialExpressionQualitySwitch"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionQualitySwitch);
	UClass* Z_Construct_UClass_UMaterialExpressionReflectionVectorWS_NoRegister()
	{
		return UMaterialExpressionReflectionVectorWS::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionReflectionVectorWS()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionReflectionVectorWS::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bNormalizeCustomWorldNormal, UMaterialExpressionReflectionVectorWS, uint8);
				UProperty* NewProp_bNormalizeCustomWorldNormal = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bNormalizeCustomWorldNormal"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bNormalizeCustomWorldNormal, UMaterialExpressionReflectionVectorWS), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bNormalizeCustomWorldNormal, UMaterialExpressionReflectionVectorWS), sizeof(uint8), false);
				UProperty* NewProp_CustomWorldNormal = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CustomWorldNormal"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(CustomWorldNormal, UMaterialExpressionReflectionVectorWS), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionReflectionVectorWS.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionReflectionVectorWS.h"));
				MetaData->SetValue(NewProp_bNormalizeCustomWorldNormal, TEXT("Category"), TEXT("UMaterialExpressionReflectionVectorWS"));
				MetaData->SetValue(NewProp_bNormalizeCustomWorldNormal, TEXT("DisplayName"), TEXT("Normalize custom world normal"));
				MetaData->SetValue(NewProp_bNormalizeCustomWorldNormal, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionReflectionVectorWS.h"));
				MetaData->SetValue(NewProp_bNormalizeCustomWorldNormal, TEXT("ToolTip"), TEXT("(true): The specified world normal will be normalized. (false): WorldNormal will just be used as is, faster but possible artifacts if normal length isn't 1"));
				MetaData->SetValue(NewProp_CustomWorldNormal, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionReflectionVectorWS.h"));
				MetaData->SetValue(NewProp_CustomWorldNormal, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_CustomWorldNormal, TEXT("ToolTip"), TEXT("Defaults to Reflection Vector if not specified"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionReflectionVectorWS(Z_Construct_UClass_UMaterialExpressionReflectionVectorWS, TEXT("UMaterialExpressionReflectionVectorWS"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionReflectionVectorWS);
	UClass* Z_Construct_UClass_UMaterialExpressionRotateAboutAxis_NoRegister()
	{
		return UMaterialExpressionRotateAboutAxis::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionRotateAboutAxis()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionRotateAboutAxis::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Period = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Period"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Period, UMaterialExpressionRotateAboutAxis), 0x0000000000000001);
				UProperty* NewProp_Position = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Position"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Position, UMaterialExpressionRotateAboutAxis), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_PivotPoint = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PivotPoint"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PivotPoint, UMaterialExpressionRotateAboutAxis), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_RotationAngle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RotationAngle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(RotationAngle, UMaterialExpressionRotateAboutAxis), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_NormalizedRotationAxis = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NormalizedRotationAxis"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(NormalizedRotationAxis, UMaterialExpressionRotateAboutAxis), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionRotateAboutAxis.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionRotateAboutAxis.h"));
				MetaData->SetValue(NewProp_Period, TEXT("Category"), TEXT("MaterialExpressionRotateAboutAxis"));
				MetaData->SetValue(NewProp_Period, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionRotateAboutAxis.h"));
				MetaData->SetValue(NewProp_Position, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionRotateAboutAxis.h"));
				MetaData->SetValue(NewProp_PivotPoint, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionRotateAboutAxis.h"));
				MetaData->SetValue(NewProp_RotationAngle, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionRotateAboutAxis.h"));
				MetaData->SetValue(NewProp_NormalizedRotationAxis, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionRotateAboutAxis.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionRotateAboutAxis(Z_Construct_UClass_UMaterialExpressionRotateAboutAxis, TEXT("UMaterialExpressionRotateAboutAxis"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionRotateAboutAxis);
	UClass* Z_Construct_UClass_UMaterialExpressionRotator_NoRegister()
	{
		return UMaterialExpressionRotator::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionRotator()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionRotator::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ConstCoordinate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConstCoordinate"), RF_Public|RF_Transient|RF_Native) UUInt32Property(CPP_PROPERTY_BASE(ConstCoordinate, UMaterialExpressionRotator), 0x0000000000000001);
				UProperty* NewProp_Speed = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Speed"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Speed, UMaterialExpressionRotator), 0x0000000000000001);
				UProperty* NewProp_CenterY = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CenterY"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(CenterY, UMaterialExpressionRotator), 0x0000000000000001);
				UProperty* NewProp_CenterX = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CenterX"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(CenterX, UMaterialExpressionRotator), 0x0000000000000001);
				UProperty* NewProp_Time = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Time"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Time, UMaterialExpressionRotator), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_Coordinate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Coordinate"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Coordinate, UMaterialExpressionRotator), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionRotator.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionRotator.h"));
				MetaData->SetValue(NewProp_ConstCoordinate, TEXT("Category"), TEXT("MaterialExpressionRotator"));
				MetaData->SetValue(NewProp_ConstCoordinate, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionRotator.h"));
				MetaData->SetValue(NewProp_ConstCoordinate, TEXT("ToolTip"), TEXT("only used if Coordinate is not hooked up"));
				MetaData->SetValue(NewProp_Speed, TEXT("Category"), TEXT("MaterialExpressionRotator"));
				MetaData->SetValue(NewProp_Speed, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionRotator.h"));
				MetaData->SetValue(NewProp_CenterY, TEXT("Category"), TEXT("MaterialExpressionRotator"));
				MetaData->SetValue(NewProp_CenterY, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionRotator.h"));
				MetaData->SetValue(NewProp_CenterX, TEXT("Category"), TEXT("MaterialExpressionRotator"));
				MetaData->SetValue(NewProp_CenterX, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionRotator.h"));
				MetaData->SetValue(NewProp_Time, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionRotator.h"));
				MetaData->SetValue(NewProp_Time, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_Time, TEXT("ToolTip"), TEXT("Defaults to Game Time if not specified"));
				MetaData->SetValue(NewProp_Coordinate, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionRotator.h"));
				MetaData->SetValue(NewProp_Coordinate, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_Coordinate, TEXT("ToolTip"), TEXT("Defaults to 'ConstCoordinate' if not specified"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionRotator(Z_Construct_UClass_UMaterialExpressionRotator, TEXT("UMaterialExpressionRotator"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionRotator);
	UEnum* Z_Construct_UEnum_Engine_EMaterialSceneAttributeInputMode()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EMaterialSceneAttributeInputMode_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EMaterialSceneAttributeInputMode"), 0, Get_Z_Construct_UEnum_Engine_EMaterialSceneAttributeInputMode_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EMaterialSceneAttributeInputMode"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EMaterialSceneAttributeInputMode::Coordinates")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EMaterialSceneAttributeInputMode::OffsetFraction")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EMaterialSceneAttributeInputMode::EMaterialSceneAttributeInputMode_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSceneColor.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EMaterialSceneAttributeInputMode_CRC() { return 1530695442U; }
	UClass* Z_Construct_UClass_UMaterialExpressionSceneColor_NoRegister()
	{
		return UMaterialExpressionSceneColor::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionSceneColor()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionSceneColor::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ConstInput = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConstInput"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ConstInput, UMaterialExpressionSceneColor), 0x0000000000000001, Z_Construct_UScriptStruct_FVector2D());
				UProperty* NewProp_OffsetFraction = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OffsetFraction"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(OffsetFraction_DEPRECATED, UMaterialExpressionSceneColor), 0x0000000020000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Input"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Input, UMaterialExpressionSceneColor), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_InputMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InputMode"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(InputMode, UMaterialExpressionSceneColor), 0x0000000000000001, Z_Construct_UEnum_Engine_EMaterialSceneAttributeInputMode());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionSceneColor.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSceneColor.h"));
				MetaData->SetValue(NewProp_ConstInput, TEXT("Category"), TEXT("MaterialExpressionSceneColor"));
				MetaData->SetValue(NewProp_ConstInput, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSceneColor.h"));
				MetaData->SetValue(NewProp_ConstInput, TEXT("ToolTip"), TEXT("only used if Input is not hooked up"));
				MetaData->SetValue(NewProp_OffsetFraction, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSceneColor.h"));
				MetaData->SetValue(NewProp_Input, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSceneColor.h"));
				MetaData->SetValue(NewProp_Input, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_Input, TEXT("ToolTip"), TEXT("Defaults to 'ConstInput' if not specified"));
				MetaData->SetValue(NewProp_InputMode, TEXT("Category"), TEXT("MaterialExpressionSceneColor"));
				MetaData->SetValue(NewProp_InputMode, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSceneColor.h"));
				MetaData->SetValue(NewProp_InputMode, TEXT("ToolTip"), TEXT("Coordinates - UV coordinates to apply to the scene color lookup.\nOffsetFraction -      An offset to apply to the scene color lookup in a 2d fraction of the screen."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionSceneColor(Z_Construct_UClass_UMaterialExpressionSceneColor, TEXT("UMaterialExpressionSceneColor"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionSceneColor);
	UClass* Z_Construct_UClass_UMaterialExpressionSceneDepth_NoRegister()
	{
		return UMaterialExpressionSceneDepth::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionSceneDepth()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionSceneDepth::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ConstInput = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConstInput"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ConstInput, UMaterialExpressionSceneDepth), 0x0000000000000001, Z_Construct_UScriptStruct_FVector2D());
				UProperty* NewProp_Coordinates = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Coordinates"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Coordinates_DEPRECATED, UMaterialExpressionSceneDepth), 0x0000000020000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Input"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Input, UMaterialExpressionSceneDepth), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_InputMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InputMode"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(InputMode, UMaterialExpressionSceneDepth), 0x0000000000000001, Z_Construct_UEnum_Engine_EMaterialSceneAttributeInputMode());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionSceneDepth.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSceneDepth.h"));
				MetaData->SetValue(NewProp_ConstInput, TEXT("Category"), TEXT("MaterialExpressionSceneDepth"));
				MetaData->SetValue(NewProp_ConstInput, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSceneDepth.h"));
				MetaData->SetValue(NewProp_ConstInput, TEXT("ToolTip"), TEXT("only used if Input is not hooked up"));
				MetaData->SetValue(NewProp_Coordinates, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSceneDepth.h"));
				MetaData->SetValue(NewProp_Input, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSceneDepth.h"));
				MetaData->SetValue(NewProp_Input, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_Input, TEXT("ToolTip"), TEXT("Defaults to 'ConstInput' if not specified"));
				MetaData->SetValue(NewProp_InputMode, TEXT("Category"), TEXT("MaterialExpressionSceneDepth"));
				MetaData->SetValue(NewProp_InputMode, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSceneDepth.h"));
				MetaData->SetValue(NewProp_InputMode, TEXT("ToolTip"), TEXT("Coordinates - UV coordinates to apply to the scene depth lookup.\nOffsetFraction - An offset to apply to the scene depth lookup in a 2d fraction of the screen."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionSceneDepth(Z_Construct_UClass_UMaterialExpressionSceneDepth, TEXT("UMaterialExpressionSceneDepth"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionSceneDepth);
	UClass* Z_Construct_UClass_UMaterialExpressionSceneTexelSize_NoRegister()
	{
		return UMaterialExpressionSceneTexelSize::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionSceneTexelSize()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionSceneTexelSize::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionSceneTexelSize.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSceneTexelSize.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionSceneTexelSize(Z_Construct_UClass_UMaterialExpressionSceneTexelSize, TEXT("UMaterialExpressionSceneTexelSize"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionSceneTexelSize);
	UEnum* Z_Construct_UEnum_Engine_ESceneTextureId()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_ESceneTextureId_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ESceneTextureId"), 0, Get_Z_Construct_UEnum_Engine_ESceneTextureId_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ESceneTextureId"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PPI_SceneColor")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PPI_SceneDepth")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PPI_DiffuseColor")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PPI_SpecularColor")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PPI_SubsurfaceColor")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PPI_BaseColor")), 5));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PPI_Specular")), 6));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PPI_Metallic")), 7));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PPI_WorldNormal")), 8));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PPI_SeparateTranslucency")), 9));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PPI_Opacity")), 10));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PPI_Roughness")), 11));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PPI_MaterialAO")), 12));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PPI_CustomDepth")), 13));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PPI_PostProcessInput0")), 14));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PPI_PostProcessInput1")), 15));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PPI_PostProcessInput2")), 16));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PPI_PostProcessInput3")), 17));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PPI_PostProcessInput4")), 18));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PPI_PostProcessInput5")), 19));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PPI_PostProcessInput6")), 20));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PPI_DecalMask")), 21));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PPI_ShadingModel")), 22));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PPI_AmbientOcclusion")), 23));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PPI_CustomStencil")), 24));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PPI_MAX")), 25));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSceneTexture.h"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_AmbientOcclusion.DisplayName"), TEXT("Ambient Occlusion"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_AmbientOcclusion.ToolTip"), TEXT("Ambient Occlusion, single channel"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_BaseColor.DisplayName"), TEXT("BaseColor"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_BaseColor.ToolTip"), TEXT("Material base, RGB color (GBuffer)"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_CustomDepth.DisplayName"), TEXT("CustomDepth"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_CustomDepth.ToolTip"), TEXT("Scene depth, single channel, contains the linear depth of the opaque objects rendered with CustomDepth (mesh property)"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_CustomStencil.DisplayName"), TEXT("CustomStencil"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_CustomStencil.ToolTip"), TEXT("Scene stencil, contains CustomStencil mesh property of the opaque objects rendered with CustomDepth"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_DecalMask.DisplayName"), TEXT("Decal Mask"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_DecalMask.ToolTip"), TEXT("Decal Mask, single bit"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_DiffuseColor.DisplayName"), TEXT("DiffuseColor"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_DiffuseColor.ToolTip"), TEXT("Material diffuse, RGB color (GBuffer)"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_MaterialAO.DisplayName"), TEXT("MaterialAO"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_MaterialAO.ToolTip"), TEXT("Material ambient occlusion, single channel (GBuffer)"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_Metallic.DisplayName"), TEXT("Metallic"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_Metallic.ToolTip"), TEXT("Material metallic, single channel (GBuffer)"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_Opacity.DisplayName"), TEXT("Opacity"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_Opacity.ToolTip"), TEXT("Material opacity, single channel (GBuffer)"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_PostProcessInput0.DisplayName"), TEXT("PostProcessInput0"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_PostProcessInput0.ToolTip"), TEXT("Input #0 of this postprocess pass, usually the only one hooked up"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_PostProcessInput1.DisplayName"), TEXT("PostProcessInput1"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_PostProcessInput1.ToolTip"), TEXT("Input #1 of this postprocess pass, usually not used"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_PostProcessInput2.DisplayName"), TEXT("PostProcessInput2"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_PostProcessInput2.ToolTip"), TEXT("Input #2 of this postprocess pass, usually not used"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_PostProcessInput3.DisplayName"), TEXT("PostProcessInput3"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_PostProcessInput3.ToolTip"), TEXT("Input #3 of this postprocess pass, usually not used"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_PostProcessInput4.DisplayName"), TEXT("PostProcessInput4"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_PostProcessInput4.ToolTip"), TEXT("Input #4 of this postprocess pass, usually not used"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_PostProcessInput5.DisplayName"), TEXT("PostProcessInput5"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_PostProcessInput5.ToolTip"), TEXT("Input #5 of this postprocess pass, usually not used"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_PostProcessInput6.DisplayName"), TEXT("PostProcessInput6"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_PostProcessInput6.ToolTip"), TEXT("Input #6 of this postprocess pass, usually not used"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_Roughness.DisplayName"), TEXT("Roughness"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_Roughness.ToolTip"), TEXT("Material roughness, single channel (GBuffer)"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_SceneColor.DisplayName"), TEXT("SceneColor"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_SceneColor.ToolTip"), TEXT("Scene color, normal post process passes should use PostProcessInput0"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_SceneDepth.DisplayName"), TEXT("SceneDepth"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_SceneDepth.ToolTip"), TEXT("Scene depth, single channel, contains the linear depth of the opaque objects"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_SeparateTranslucency.DisplayName"), TEXT("SeparateTranslucency"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_SeparateTranslucency.ToolTip"), TEXT("Not yet supported"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_ShadingModel.DisplayName"), TEXT("Shading Model"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_ShadingModel.ToolTip"), TEXT("Shading model"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_Specular.DisplayName"), TEXT("Specular"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_Specular.ToolTip"), TEXT("Material specular, single channel (GBuffer)"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_SpecularColor.DisplayName"), TEXT("SpecularColor"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_SpecularColor.ToolTip"), TEXT("Material specular, RGB color (GBuffer)"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_SubsurfaceColor.DisplayName"), TEXT("SubsurfaceColor"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_SubsurfaceColor.ToolTip"), TEXT("Material subsurface, RGB color (GBuffer)"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_WorldNormal.DisplayName"), TEXT("WorldNormal"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_WorldNormal.ToolTip"), TEXT("Normal, RGB in -1..1 range, not normalized (GBuffer)"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("like EPassInputId but can expose more e.g. GBuffer"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_ESceneTextureId_CRC() { return 3919012043U; }
	UClass* Z_Construct_UClass_UMaterialExpressionSceneTexture_NoRegister()
	{
		return UMaterialExpressionSceneTexture::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionSceneTexture()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionSceneTexture::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bFiltered, UMaterialExpressionSceneTexture, bool);
				UProperty* NewProp_bFiltered = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bFiltered"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bFiltered, UMaterialExpressionSceneTexture), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bFiltered, UMaterialExpressionSceneTexture), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bClampUVs, UMaterialExpressionSceneTexture, bool);
				UProperty* NewProp_bClampUVs = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bClampUVs"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bClampUVs, UMaterialExpressionSceneTexture), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bClampUVs, UMaterialExpressionSceneTexture), sizeof(bool), true);
				UProperty* NewProp_SceneTextureId = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SceneTextureId"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(SceneTextureId, UMaterialExpressionSceneTexture), 0x0000000000000001, Z_Construct_UEnum_Engine_ESceneTextureId());
				UProperty* NewProp_Coordinates = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Coordinates"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Coordinates, UMaterialExpressionSceneTexture), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionSceneTexture.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSceneTexture.h"));
				MetaData->SetValue(NewProp_bFiltered, TEXT("Category"), TEXT("UMaterialExpressionSceneTexture"));
				MetaData->SetValue(NewProp_bFiltered, TEXT("DisplayName"), TEXT("Filtered"));
				MetaData->SetValue(NewProp_bFiltered, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSceneTexture.h"));
				MetaData->SetValue(NewProp_bFiltered, TEXT("ToolTip"), TEXT("Whether to use point sampled texture lookup (default) or using [bi-linear] filtered (can be slower, avoid faceted lock with distortions), some SceneTextures cannot be filtered"));
				MetaData->SetValue(NewProp_bClampUVs, TEXT("Category"), TEXT("UMaterialExpressionSceneTexture"));
				MetaData->SetValue(NewProp_bClampUVs, TEXT("DisplayName"), TEXT("Clamp UVs"));
				MetaData->SetValue(NewProp_bClampUVs, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSceneTexture.h"));
				MetaData->SetValue(NewProp_bClampUVs, TEXT("ToolTip"), TEXT("Clamps texture coordinates to the range 0 to 1. Incurs a performance cost."));
				MetaData->SetValue(NewProp_SceneTextureId, TEXT("Category"), TEXT("UMaterialExpressionSceneTexture"));
				MetaData->SetValue(NewProp_SceneTextureId, TEXT("DisplayName"), TEXT("Scene Texture Id"));
				MetaData->SetValue(NewProp_SceneTextureId, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSceneTexture.h"));
				MetaData->SetValue(NewProp_SceneTextureId, TEXT("ToolTip"), TEXT("Which scene texture (screen aligned texture) we want to make a lookup into"));
				MetaData->SetValue(NewProp_Coordinates, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSceneTexture.h"));
				MetaData->SetValue(NewProp_Coordinates, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_Coordinates, TEXT("ToolTip"), TEXT("Ignored if not specified"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionSceneTexture(Z_Construct_UClass_UMaterialExpressionSceneTexture, TEXT("UMaterialExpressionSceneTexture"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionSceneTexture);
	UClass* Z_Construct_UClass_UMaterialExpressionScreenPosition_NoRegister()
	{
		return UMaterialExpressionScreenPosition::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionScreenPosition()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionScreenPosition::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionScreenPosition.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionScreenPosition.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionScreenPosition(Z_Construct_UClass_UMaterialExpressionScreenPosition, TEXT("UMaterialExpressionScreenPosition"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionScreenPosition);
	UClass* Z_Construct_UClass_UMaterialExpressionSine_NoRegister()
	{
		return UMaterialExpressionSine::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionSine()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionSine::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Period = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Period"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Period, UMaterialExpressionSine), 0x0000000000000001);
				UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Input"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Input, UMaterialExpressionSine), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionSine.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSine.h"));
				MetaData->SetValue(NewProp_Period, TEXT("Category"), TEXT("MaterialExpressionSine"));
				MetaData->SetValue(NewProp_Period, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSine.h"));
				MetaData->SetValue(NewProp_Input, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSine.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionSine(Z_Construct_UClass_UMaterialExpressionSine, TEXT("UMaterialExpressionSine"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionSine);
	UEnum* Z_Construct_UEnum_Engine_ESpeedTreeLODType()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_ESpeedTreeLODType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ESpeedTreeLODType"), 0, Get_Z_Construct_UEnum_Engine_ESpeedTreeLODType_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ESpeedTreeLODType"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("STLOD_Pop")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("STLOD_Smooth")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("STLOD_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSpeedTree.h"));
			MetaData->SetValue(ReturnEnum, TEXT("STLOD_Pop.DisplayName"), TEXT("Pop"));
			MetaData->SetValue(ReturnEnum, TEXT("STLOD_Smooth.DisplayName"), TEXT("Smooth"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_ESpeedTreeLODType_CRC() { return 4180164643U; }
	UEnum* Z_Construct_UEnum_Engine_ESpeedTreeWindType()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_ESpeedTreeWindType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ESpeedTreeWindType"), 0, Get_Z_Construct_UEnum_Engine_ESpeedTreeWindType_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ESpeedTreeWindType"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("STW_None")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("STW_Fastest")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("STW_Fast")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("STW_Better")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("STW_Best")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("STW_Palm")), 5));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("STW_BestPlus")), 6));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("STW_MAX")), 7));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSpeedTree.h"));
			MetaData->SetValue(ReturnEnum, TEXT("STW_Best.DisplayName"), TEXT("Best"));
			MetaData->SetValue(ReturnEnum, TEXT("STW_BestPlus.DisplayName"), TEXT("BestPlus"));
			MetaData->SetValue(ReturnEnum, TEXT("STW_Better.DisplayName"), TEXT("Better"));
			MetaData->SetValue(ReturnEnum, TEXT("STW_Fast.DisplayName"), TEXT("Fast"));
			MetaData->SetValue(ReturnEnum, TEXT("STW_Fastest.DisplayName"), TEXT("Fastest"));
			MetaData->SetValue(ReturnEnum, TEXT("STW_None.DisplayName"), TEXT("None"));
			MetaData->SetValue(ReturnEnum, TEXT("STW_Palm.DisplayName"), TEXT("Palm"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_ESpeedTreeWindType_CRC() { return 140158547U; }
	UEnum* Z_Construct_UEnum_Engine_ESpeedTreeGeometryType()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_ESpeedTreeGeometryType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ESpeedTreeGeometryType"), 0, Get_Z_Construct_UEnum_Engine_ESpeedTreeGeometryType_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ESpeedTreeGeometryType"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("STG_Branch")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("STG_Frond")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("STG_Leaf")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("STG_FacingLeaf")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("STG_Billboard")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("STG_MAX")), 5));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSpeedTree.h"));
			MetaData->SetValue(ReturnEnum, TEXT("STG_Billboard.DisplayName"), TEXT("Billboard"));
			MetaData->SetValue(ReturnEnum, TEXT("STG_Branch.DisplayName"), TEXT("Branch"));
			MetaData->SetValue(ReturnEnum, TEXT("STG_FacingLeaf.DisplayName"), TEXT("Facing Leaf"));
			MetaData->SetValue(ReturnEnum, TEXT("STG_Frond.DisplayName"), TEXT("Frond"));
			MetaData->SetValue(ReturnEnum, TEXT("STG_Leaf.DisplayName"), TEXT("Leaf"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_ESpeedTreeGeometryType_CRC() { return 583839843U; }
	UClass* Z_Construct_UClass_UMaterialExpressionSpeedTree_NoRegister()
	{
		return UMaterialExpressionSpeedTree::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionSpeedTree()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionSpeedTree::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAccurateWindVelocities, UMaterialExpressionSpeedTree, bool);
				UProperty* NewProp_bAccurateWindVelocities = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAccurateWindVelocities"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAccurateWindVelocities, UMaterialExpressionSpeedTree), 0x0000040000000001, CPP_BOOL_PROPERTY_BITMASK(bAccurateWindVelocities, UMaterialExpressionSpeedTree), sizeof(bool), true);
				UProperty* NewProp_BillboardThreshold = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BillboardThreshold"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(BillboardThreshold, UMaterialExpressionSpeedTree), 0x0000000000000001);
				UProperty* NewProp_LODType = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LODType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(LODType, UMaterialExpressionSpeedTree), 0x0000000000000001, Z_Construct_UEnum_Engine_ESpeedTreeLODType());
				UProperty* NewProp_WindType = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WindType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(WindType, UMaterialExpressionSpeedTree), 0x0000000000000001, Z_Construct_UEnum_Engine_ESpeedTreeWindType());
				UProperty* NewProp_GeometryType = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GeometryType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(GeometryType, UMaterialExpressionSpeedTree), 0x0000000000000001, Z_Construct_UEnum_Engine_ESpeedTreeGeometryType());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionSpeedTree.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSpeedTree.h"));
				MetaData->SetValue(NewProp_bAccurateWindVelocities, TEXT("Category"), TEXT("MaterialExpressionSpeedTree"));
				MetaData->SetValue(NewProp_bAccurateWindVelocities, TEXT("DisplayName"), TEXT("Accurate Wind Velocities"));
				MetaData->SetValue(NewProp_bAccurateWindVelocities, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSpeedTree.h"));
				MetaData->SetValue(NewProp_bAccurateWindVelocities, TEXT("ToolTip"), TEXT("Support accurate velocities from wind. This will incur extra cost per vertex."));
				MetaData->SetValue(NewProp_BillboardThreshold, TEXT("Category"), TEXT("MaterialExpressionSpeedTree"));
				MetaData->SetValue(NewProp_BillboardThreshold, TEXT("ClampMax"), TEXT("1.0"));
				MetaData->SetValue(NewProp_BillboardThreshold, TEXT("ClampMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_BillboardThreshold, TEXT("DisplayName"), TEXT("Billboard Threshold"));
				MetaData->SetValue(NewProp_BillboardThreshold, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSpeedTree.h"));
				MetaData->SetValue(NewProp_BillboardThreshold, TEXT("ToolTip"), TEXT("The threshold for triangles to be removed from the bilboard mesh when not facing the camera (0 = none pass, 1 = all pass)."));
				MetaData->SetValue(NewProp_BillboardThreshold, TEXT("UIMax"), TEXT("1.0"));
				MetaData->SetValue(NewProp_BillboardThreshold, TEXT("UIMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_LODType, TEXT("Category"), TEXT("MaterialExpressionSpeedTree"));
				MetaData->SetValue(NewProp_LODType, TEXT("DisplayName"), TEXT("LOD Type"));
				MetaData->SetValue(NewProp_LODType, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSpeedTree.h"));
				MetaData->SetValue(NewProp_LODType, TEXT("ToolTip"), TEXT("The type of LOD to use"));
				MetaData->SetValue(NewProp_WindType, TEXT("Category"), TEXT("MaterialExpressionSpeedTree"));
				MetaData->SetValue(NewProp_WindType, TEXT("DisplayName"), TEXT("Wind Type"));
				MetaData->SetValue(NewProp_WindType, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSpeedTree.h"));
				MetaData->SetValue(NewProp_WindType, TEXT("ToolTip"), TEXT("The type of wind effect used on this tree. This can only go as high as it was in the SpeedTree Modeler, but you can set it to a lower option for lower quality wind and faster rendering."));
				MetaData->SetValue(NewProp_GeometryType, TEXT("Category"), TEXT("MaterialExpressionSpeedTree"));
				MetaData->SetValue(NewProp_GeometryType, TEXT("DisplayName"), TEXT("Geometry Type"));
				MetaData->SetValue(NewProp_GeometryType, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSpeedTree.h"));
				MetaData->SetValue(NewProp_GeometryType, TEXT("ToolTip"), TEXT("The type of SpeedTree geometry on which this material will be used"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionSpeedTree(Z_Construct_UClass_UMaterialExpressionSpeedTree, TEXT("UMaterialExpressionSpeedTree"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionSpeedTree);
	UClass* Z_Construct_UClass_UMaterialExpressionSphereMask_NoRegister()
	{
		return UMaterialExpressionSphereMask::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionSphereMask()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionSphereMask::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_HardnessPercent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HardnessPercent"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(HardnessPercent, UMaterialExpressionSphereMask), 0x0000000000000001);
				UProperty* NewProp_AttenuationRadius = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AttenuationRadius"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(AttenuationRadius, UMaterialExpressionSphereMask), 0x0000000000000001);
				UProperty* NewProp_Hardness = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Hardness"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Hardness, UMaterialExpressionSphereMask), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_Radius = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Radius"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Radius, UMaterialExpressionSphereMask), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(B, UMaterialExpressionSphereMask), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, UMaterialExpressionSphereMask), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionSphereMask.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSphereMask.h"));
				MetaData->SetValue(NewProp_HardnessPercent, TEXT("Category"), TEXT("MaterialExpressionSphereMask"));
				MetaData->SetValue(NewProp_HardnessPercent, TEXT("ClampMax"), TEXT("100.0"));
				MetaData->SetValue(NewProp_HardnessPercent, TEXT("ClampMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_HardnessPercent, TEXT("DisplayName"), TEXT("Hardness"));
				MetaData->SetValue(NewProp_HardnessPercent, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSphereMask.h"));
				MetaData->SetValue(NewProp_HardnessPercent, TEXT("OverridingInputProperty"), TEXT("Hardness"));
				MetaData->SetValue(NewProp_HardnessPercent, TEXT("ToolTip"), TEXT("in percent 0%=soft .. 100%=hard"));
				MetaData->SetValue(NewProp_HardnessPercent, TEXT("UIMax"), TEXT("100.0"));
				MetaData->SetValue(NewProp_HardnessPercent, TEXT("UIMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_AttenuationRadius, TEXT("Category"), TEXT("MaterialExpressionSphereMask"));
				MetaData->SetValue(NewProp_AttenuationRadius, TEXT("DisplayName"), TEXT("Radius"));
				MetaData->SetValue(NewProp_AttenuationRadius, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSphereMask.h"));
				MetaData->SetValue(NewProp_AttenuationRadius, TEXT("OverridingInputProperty"), TEXT("Radius"));
				MetaData->SetValue(NewProp_AttenuationRadius, TEXT("ToolTip"), TEXT("in the unit that A and B are measured"));
				MetaData->SetValue(NewProp_Hardness, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSphereMask.h"));
				MetaData->SetValue(NewProp_Hardness, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_Hardness, TEXT("ToolTip"), TEXT("Defaults to 'HardnessPercent' if not specified"));
				MetaData->SetValue(NewProp_Radius, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSphereMask.h"));
				MetaData->SetValue(NewProp_Radius, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_Radius, TEXT("ToolTip"), TEXT("Defaults to 'AttenuationRadius' if not specified"));
				MetaData->SetValue(NewProp_B, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSphereMask.h"));
				MetaData->SetValue(NewProp_B, TEXT("ToolTip"), TEXT("1 to 4 dimensional vector, should be the same type as A"));
				MetaData->SetValue(NewProp_A, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSphereMask.h"));
				MetaData->SetValue(NewProp_A, TEXT("ToolTip"), TEXT("1 to 4 dimensional vector, should be the same type as B"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionSphereMask(Z_Construct_UClass_UMaterialExpressionSphereMask, TEXT("UMaterialExpressionSphereMask"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionSphereMask);
	UClass* Z_Construct_UClass_UMaterialExpressionSphericalParticleOpacity_NoRegister()
	{
		return UMaterialExpressionSphericalParticleOpacity::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionSphericalParticleOpacity()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionSphericalParticleOpacity::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ConstantDensity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConstantDensity"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ConstantDensity, UMaterialExpressionSphericalParticleOpacity), 0x0000000000000001);
				UProperty* NewProp_Density = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Density"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Density, UMaterialExpressionSphericalParticleOpacity), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionSphericalParticleOpacity.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSphericalParticleOpacity.h"));
				MetaData->SetValue(NewProp_ConstantDensity, TEXT("Category"), TEXT("MaterialExpressionSphericalParticleOpacity"));
				MetaData->SetValue(NewProp_ConstantDensity, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSphericalParticleOpacity.h"));
				MetaData->SetValue(NewProp_ConstantDensity, TEXT("OverridingInputProperty"), TEXT("Density"));
				MetaData->SetValue(NewProp_ConstantDensity, TEXT("ToolTip"), TEXT("Constant density of the particle sphere.  Will be overridden if Density is connected."));
				MetaData->SetValue(NewProp_Density, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSphericalParticleOpacity.h"));
				MetaData->SetValue(NewProp_Density, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_Density, TEXT("ToolTip"), TEXT("Defaults to 'ConstantDensity' if not specified"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionSphericalParticleOpacity(Z_Construct_UClass_UMaterialExpressionSphericalParticleOpacity, TEXT("UMaterialExpressionSphericalParticleOpacity"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionSphericalParticleOpacity);
	UClass* Z_Construct_UClass_UMaterialExpressionSquareRoot_NoRegister()
	{
		return UMaterialExpressionSquareRoot::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionSquareRoot()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionSquareRoot::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Input"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Input, UMaterialExpressionSquareRoot), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionSquareRoot.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSquareRoot.h"));
				MetaData->SetValue(NewProp_Input, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSquareRoot.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionSquareRoot(Z_Construct_UClass_UMaterialExpressionSquareRoot, TEXT("UMaterialExpressionSquareRoot"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionSquareRoot);
	UClass* Z_Construct_UClass_UMaterialExpressionStaticBool_NoRegister()
	{
		return UMaterialExpressionStaticBool::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionStaticBool()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionStaticBool::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(Value, UMaterialExpressionStaticBool, uint8);
				UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Value"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Value, UMaterialExpressionStaticBool), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(Value, UMaterialExpressionStaticBool), sizeof(uint8), false);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionStaticBool.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionStaticBool.h"));
				MetaData->SetValue(NewProp_Value, TEXT("Category"), TEXT("MaterialExpressionStaticBool"));
				MetaData->SetValue(NewProp_Value, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionStaticBool.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionStaticBool(Z_Construct_UClass_UMaterialExpressionStaticBool, TEXT("UMaterialExpressionStaticBool"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionStaticBool);
	UClass* Z_Construct_UClass_UMaterialExpressionStaticSwitch_NoRegister()
	{
		return UMaterialExpressionStaticSwitch::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionStaticSwitch()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionStaticSwitch::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Value"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Value, UMaterialExpressionStaticSwitch), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(B, UMaterialExpressionStaticSwitch), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, UMaterialExpressionStaticSwitch), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(DefaultValue, UMaterialExpressionStaticSwitch, uint8);
				UProperty* NewProp_DefaultValue = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(DefaultValue, UMaterialExpressionStaticSwitch), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(DefaultValue, UMaterialExpressionStaticSwitch), sizeof(uint8), false);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionStaticSwitch.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionStaticSwitch.h"));
				MetaData->SetValue(NewProp_Value, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionStaticSwitch.h"));
				MetaData->SetValue(NewProp_Value, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_Value, TEXT("ToolTip"), TEXT("Ignored if not specified"));
				MetaData->SetValue(NewProp_B, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionStaticSwitch.h"));
				MetaData->SetValue(NewProp_A, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionStaticSwitch.h"));
				MetaData->SetValue(NewProp_DefaultValue, TEXT("Category"), TEXT("MaterialExpressionStaticSwitch"));
				MetaData->SetValue(NewProp_DefaultValue, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionStaticSwitch.h"));
				MetaData->SetValue(NewProp_DefaultValue, TEXT("OverridingInputProperty"), TEXT("Value"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionStaticSwitch(Z_Construct_UClass_UMaterialExpressionStaticSwitch, TEXT("UMaterialExpressionStaticSwitch"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionStaticSwitch);
	UClass* Z_Construct_UClass_UMaterialExpressionSubtract_NoRegister()
	{
		return UMaterialExpressionSubtract::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionSubtract()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionSubtract::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ConstB = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConstB"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ConstB, UMaterialExpressionSubtract), 0x0000000000000001);
				UProperty* NewProp_ConstA = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConstA"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ConstA, UMaterialExpressionSubtract), 0x0000000000000001);
				UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(B, UMaterialExpressionSubtract), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, UMaterialExpressionSubtract), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionSubtract.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSubtract.h"));
				MetaData->SetValue(NewProp_ConstB, TEXT("Category"), TEXT("MaterialExpressionSubtract"));
				MetaData->SetValue(NewProp_ConstB, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSubtract.h"));
				MetaData->SetValue(NewProp_ConstB, TEXT("OverridingInputProperty"), TEXT("B"));
				MetaData->SetValue(NewProp_ConstB, TEXT("ToolTip"), TEXT("only used if B is not hooked up"));
				MetaData->SetValue(NewProp_ConstA, TEXT("Category"), TEXT("MaterialExpressionSubtract"));
				MetaData->SetValue(NewProp_ConstA, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSubtract.h"));
				MetaData->SetValue(NewProp_ConstA, TEXT("OverridingInputProperty"), TEXT("A"));
				MetaData->SetValue(NewProp_ConstA, TEXT("ToolTip"), TEXT("only used if A is not hooked up"));
				MetaData->SetValue(NewProp_B, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSubtract.h"));
				MetaData->SetValue(NewProp_B, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_B, TEXT("ToolTip"), TEXT("Defaults to 'ConstB' if not specified"));
				MetaData->SetValue(NewProp_A, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSubtract.h"));
				MetaData->SetValue(NewProp_A, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_A, TEXT("ToolTip"), TEXT("Defaults to 'ConstA' if not specified"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionSubtract(Z_Construct_UClass_UMaterialExpressionSubtract, TEXT("UMaterialExpressionSubtract"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionSubtract);
	UClass* Z_Construct_UClass_UMaterialExpressionTextureBase_NoRegister()
	{
		return UMaterialExpressionTextureBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionTextureBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionTextureBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100081;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsDefaultMeshpaintTexture, UMaterialExpressionTextureBase, uint8);
				UProperty* NewProp_IsDefaultMeshpaintTexture = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("IsDefaultMeshpaintTexture"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsDefaultMeshpaintTexture, UMaterialExpressionTextureBase), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(IsDefaultMeshpaintTexture, UMaterialExpressionTextureBase), sizeof(uint8), false);
				UProperty* NewProp_SamplerType = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SamplerType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(SamplerType, UMaterialExpressionTextureBase), 0x0000000000000001, Z_Construct_UEnum_Engine_EMaterialSamplerType());
				UProperty* NewProp_Texture = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Texture"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Texture, UMaterialExpressionTextureBase), 0x0000000000000001, Z_Construct_UClass_UTexture_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionTextureBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTextureBase.h"));
				MetaData->SetValue(NewProp_IsDefaultMeshpaintTexture, TEXT("Category"), TEXT("MaterialExpressionTextureBase"));
				MetaData->SetValue(NewProp_IsDefaultMeshpaintTexture, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTextureBase.h"));
				MetaData->SetValue(NewProp_IsDefaultMeshpaintTexture, TEXT("ToolTip"), TEXT("Is default selected texture when using mesh paint mode texture painting"));
				MetaData->SetValue(NewProp_SamplerType, TEXT("Category"), TEXT("MaterialExpressionTextureBase"));
				MetaData->SetValue(NewProp_SamplerType, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTextureBase.h"));
				MetaData->SetValue(NewProp_Texture, TEXT("Category"), TEXT("MaterialExpressionTextureBase"));
				MetaData->SetValue(NewProp_Texture, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTextureBase.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionTextureBase(Z_Construct_UClass_UMaterialExpressionTextureBase, TEXT("UMaterialExpressionTextureBase"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionTextureBase);
	UClass* Z_Construct_UClass_UMaterialExpressionTextureObject_NoRegister()
	{
		return UMaterialExpressionTextureObject::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionTextureObject()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpressionTextureBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionTextureObject::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionTextureObject.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTextureObject.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionTextureObject(Z_Construct_UClass_UMaterialExpressionTextureObject, TEXT("UMaterialExpressionTextureObject"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionTextureObject);
	UEnum* Z_Construct_UEnum_Engine_ETextureMipValueMode()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_ETextureMipValueMode_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ETextureMipValueMode"), 0, Get_Z_Construct_UEnum_Engine_ETextureMipValueMode_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ETextureMipValueMode"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TMVM_None")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TMVM_MipLevel")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TMVM_MipBias")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TMVM_Derivative")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TMVM_MAX")), 4));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTextureSample.h"));
			MetaData->SetValue(ReturnEnum, TEXT("TMVM_Derivative.DisplayName"), TEXT("Derivative (explicit derivative to compute mip level)"));
			MetaData->SetValue(ReturnEnum, TEXT("TMVM_Derivative.ToolTip"), TEXT("Explicitly compute the sample's DDX and DDY for anisotropic filtering."));
			MetaData->SetValue(ReturnEnum, TEXT("TMVM_MipBias.DisplayName"), TEXT("MipBias (relative to the computed mip level)"));
			MetaData->SetValue(ReturnEnum, TEXT("TMVM_MipBias.ToolTip"), TEXT("Bias the hardware computed sample's mip level. Disables anisotropic filtering."));
			MetaData->SetValue(ReturnEnum, TEXT("TMVM_MipLevel.DisplayName"), TEXT("MipLevel (absolute, 0 is full resolution)"));
			MetaData->SetValue(ReturnEnum, TEXT("TMVM_MipLevel.ToolTip"), TEXT("Explicitly compute the sample's mip level. Disables anisotropic filtering."));
			MetaData->SetValue(ReturnEnum, TEXT("TMVM_None.DisplayName"), TEXT("None (use computed mip level)"));
			MetaData->SetValue(ReturnEnum, TEXT("TMVM_None.ToolTip"), TEXT("Use hardware computed sample's mip level with automatic anisotropic filtering support."));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("defines how MipValue is used"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_ETextureMipValueMode_CRC() { return 2648505715U; }
	UClass* Z_Construct_UClass_UMaterialExpressionTextureSample_NoRegister()
	{
		return UMaterialExpressionTextureSample::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionTextureSample()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpressionTextureBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionTextureSample::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20102080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ConstMipValue = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConstMipValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ConstMipValue, UMaterialExpressionTextureSample), 0x0000000000000001);
				UProperty* NewProp_ConstCoordinate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConstCoordinate"), RF_Public|RF_Transient|RF_Native) UUInt32Property(CPP_PROPERTY_BASE(ConstCoordinate, UMaterialExpressionTextureSample), 0x0000000000000001);
				UProperty* NewProp_SamplerSource = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SamplerSource"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(SamplerSource, UMaterialExpressionTextureSample), 0x0000000000000001, Z_Construct_UEnum_Engine_ESamplerSourceMode());
				UProperty* NewProp_MipValueMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MipValueMode"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(MipValueMode, UMaterialExpressionTextureSample), 0x0000000000000001, Z_Construct_UEnum_Engine_ETextureMipValueMode());
				UProperty* NewProp_CoordinatesDY = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CoordinatesDY"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(CoordinatesDY, UMaterialExpressionTextureSample), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_CoordinatesDX = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CoordinatesDX"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(CoordinatesDX, UMaterialExpressionTextureSample), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_MipValue = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MipValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MipValue, UMaterialExpressionTextureSample), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_TextureObject = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TextureObject"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TextureObject, UMaterialExpressionTextureSample), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_Coordinates = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Coordinates"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Coordinates, UMaterialExpressionTextureSample), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionTextureSample.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTextureSample.h"));
				MetaData->SetValue(NewProp_ConstMipValue, TEXT("Category"), TEXT("MaterialExpressionTextureSample"));
				MetaData->SetValue(NewProp_ConstMipValue, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTextureSample.h"));
				MetaData->SetValue(NewProp_ConstMipValue, TEXT("ToolTip"), TEXT("only used if MipValue is not hooked up"));
				MetaData->SetValue(NewProp_ConstCoordinate, TEXT("Category"), TEXT("MaterialExpressionTextureSample"));
				MetaData->SetValue(NewProp_ConstCoordinate, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTextureSample.h"));
				MetaData->SetValue(NewProp_ConstCoordinate, TEXT("ToolTip"), TEXT("only used if Coordinates is not hooked up"));
				MetaData->SetValue(NewProp_SamplerSource, TEXT("Category"), TEXT("MaterialExpressionTextureSample"));
				MetaData->SetValue(NewProp_SamplerSource, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTextureSample.h"));
				MetaData->SetValue(NewProp_SamplerSource, TEXT("ToolTip"), TEXT("Controls where the sampler for this texture lookup will come from.\nChoose 'from texture asset' to make use of the UTexture addressing settings,\nOtherwise use one of the global samplers, which will not consume a sampler slot.\nThis allows materials to use more than 16 unique textures on SM5 platforms."));
				MetaData->SetValue(NewProp_MipValueMode, TEXT("Category"), TEXT("MaterialExpressionTextureSample"));
				MetaData->SetValue(NewProp_MipValueMode, TEXT("DisplayName"), TEXT("MipValueMode"));
				MetaData->SetValue(NewProp_MipValueMode, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTextureSample.h"));
				MetaData->SetValue(NewProp_MipValueMode, TEXT("ToolTip"), TEXT("Defines how the MipValue property is applied to the texture lookup"));
				MetaData->SetValue(NewProp_CoordinatesDY, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTextureSample.h"));
				MetaData->SetValue(NewProp_CoordinatesDY, TEXT("RequiredInput"), TEXT("true"));
				MetaData->SetValue(NewProp_CoordinatesDY, TEXT("ToolTip"), TEXT("Coordinates derivative over the Y axis"));
				MetaData->SetValue(NewProp_CoordinatesDX, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTextureSample.h"));
				MetaData->SetValue(NewProp_CoordinatesDX, TEXT("RequiredInput"), TEXT("true"));
				MetaData->SetValue(NewProp_CoordinatesDX, TEXT("ToolTip"), TEXT("Coordinates derivative over the X axis"));
				MetaData->SetValue(NewProp_MipValue, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTextureSample.h"));
				MetaData->SetValue(NewProp_MipValue, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_MipValue, TEXT("ToolTip"), TEXT("Defaults to 'ConstMipValue' if not specified"));
				MetaData->SetValue(NewProp_TextureObject, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTextureSample.h"));
				MetaData->SetValue(NewProp_TextureObject, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_TextureObject, TEXT("ToolTip"), TEXT("Defaults to 'Texture' if not specified"));
				MetaData->SetValue(NewProp_Coordinates, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTextureSample.h"));
				MetaData->SetValue(NewProp_Coordinates, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_Coordinates, TEXT("ToolTip"), TEXT("Defaults to 'ConstCoordinate' if not specified"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionTextureSample(Z_Construct_UClass_UMaterialExpressionTextureSample, TEXT("UMaterialExpressionTextureSample"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionTextureSample);
	UClass* Z_Construct_UClass_UMaterialExpressionParticleSubUV_NoRegister()
	{
		return UMaterialExpressionParticleSubUV::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionParticleSubUV()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpressionTextureSample();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionParticleSubUV::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bBlend, UMaterialExpressionParticleSubUV, uint8);
				UProperty* NewProp_bBlend = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bBlend"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bBlend, UMaterialExpressionParticleSubUV), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bBlend, UMaterialExpressionParticleSubUV), sizeof(uint8), false);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionParticleSubUV.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionParticleSubUV.h"));
				MetaData->SetValue(NewProp_bBlend, TEXT("Category"), TEXT("MaterialExpressionParticleSubUV"));
				MetaData->SetValue(NewProp_bBlend, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionParticleSubUV.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionParticleSubUV(Z_Construct_UClass_UMaterialExpressionParticleSubUV, TEXT("UMaterialExpressionParticleSubUV"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionParticleSubUV);
	UClass* Z_Construct_UClass_UMaterialExpressionTextureSampleParameter_NoRegister()
	{
		return UMaterialExpressionTextureSampleParameter::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionTextureSampleParameter()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpressionTextureSample();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionTextureSampleParameter::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20102081;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Group = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Group"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(Group, UMaterialExpressionTextureSampleParameter), 0x0000000000000001);
				UProperty* NewProp_ExpressionGUID = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ExpressionGUID"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ExpressionGUID, UMaterialExpressionTextureSampleParameter), 0x0000000000000000, Z_Construct_UScriptStruct_FGuid());
				UProperty* NewProp_ParameterName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ParameterName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(ParameterName, UMaterialExpressionTextureSampleParameter), 0x0000000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionTextureSampleParameter.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTextureSampleParameter.h"));
				MetaData->SetValue(NewProp_Group, TEXT("Category"), TEXT("MaterialExpressionTextureSampleParameter"));
				MetaData->SetValue(NewProp_Group, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTextureSampleParameter.h"));
				MetaData->SetValue(NewProp_Group, TEXT("ToolTip"), TEXT("The name of the parameter Group to display in MaterialInstance Editor. Default is None group"));
				MetaData->SetValue(NewProp_ExpressionGUID, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTextureSampleParameter.h"));
				MetaData->SetValue(NewProp_ExpressionGUID, TEXT("ToolTip"), TEXT("GUID that should be unique within the material, this is used for parameter renaming."));
				MetaData->SetValue(NewProp_ParameterName, TEXT("Category"), TEXT("MaterialExpressionTextureSampleParameter"));
				MetaData->SetValue(NewProp_ParameterName, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTextureSampleParameter.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionTextureSampleParameter(Z_Construct_UClass_UMaterialExpressionTextureSampleParameter, TEXT("UMaterialExpressionTextureSampleParameter"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionTextureSampleParameter);
	UClass* Z_Construct_UClass_UMaterialExpressionTextureObjectParameter_NoRegister()
	{
		return UMaterialExpressionTextureObjectParameter::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionTextureObjectParameter()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpressionTextureSampleParameter();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionTextureObjectParameter::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionTextureObjectParameter.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTextureObjectParameter.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionTextureObjectParameter(Z_Construct_UClass_UMaterialExpressionTextureObjectParameter, TEXT("UMaterialExpressionTextureObjectParameter"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionTextureObjectParameter);
	UClass* Z_Construct_UClass_UMaterialExpressionTextureSampleParameter2D_NoRegister()
	{
		return UMaterialExpressionTextureSampleParameter2D::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionTextureSampleParameter2D()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpressionTextureSampleParameter();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionTextureSampleParameter2D::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20102080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionTextureSampleParameter2D.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTextureSampleParameter2D.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionTextureSampleParameter2D(Z_Construct_UClass_UMaterialExpressionTextureSampleParameter2D, TEXT("UMaterialExpressionTextureSampleParameter2D"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionTextureSampleParameter2D);
	UEnum* Z_Construct_UEnum_Engine_ETextureColorChannel()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_ETextureColorChannel_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ETextureColorChannel"), 0, Get_Z_Construct_UEnum_Engine_ETextureColorChannel_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ETextureColorChannel"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TCC_Red")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TCC_Green")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TCC_Blue")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TCC_Alpha")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TCC_MAX")), 4));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionAntialiasedTextureMask.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_ETextureColorChannel_CRC() { return 1349117813U; }
	UClass* Z_Construct_UClass_UMaterialExpressionAntialiasedTextureMask_NoRegister()
	{
		return UMaterialExpressionAntialiasedTextureMask::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionAntialiasedTextureMask()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpressionTextureSampleParameter2D();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionAntialiasedTextureMask::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Channel = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Channel"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(Channel, UMaterialExpressionAntialiasedTextureMask), 0x0000000000000001, Z_Construct_UEnum_Engine_ETextureColorChannel());
				UProperty* NewProp_Threshold = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Threshold"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Threshold, UMaterialExpressionAntialiasedTextureMask), 0x0000000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionAntialiasedTextureMask.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionAntialiasedTextureMask.h"));
				MetaData->SetValue(NewProp_Channel, TEXT("Category"), TEXT("MaterialExpressionAntialiasedTextureMask"));
				MetaData->SetValue(NewProp_Channel, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionAntialiasedTextureMask.h"));
				MetaData->SetValue(NewProp_Threshold, TEXT("Category"), TEXT("MaterialExpressionAntialiasedTextureMask"));
				MetaData->SetValue(NewProp_Threshold, TEXT("ClampMax"), TEXT("1.0"));
				MetaData->SetValue(NewProp_Threshold, TEXT("ClampMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_Threshold, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionAntialiasedTextureMask.h"));
				MetaData->SetValue(NewProp_Threshold, TEXT("UIMax"), TEXT("1.0"));
				MetaData->SetValue(NewProp_Threshold, TEXT("UIMin"), TEXT("0.0"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionAntialiasedTextureMask(Z_Construct_UClass_UMaterialExpressionAntialiasedTextureMask, TEXT("UMaterialExpressionAntialiasedTextureMask"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionAntialiasedTextureMask);
	UClass* Z_Construct_UClass_UMaterialExpressionTextureSampleParameterSubUV_NoRegister()
	{
		return UMaterialExpressionTextureSampleParameterSubUV::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionTextureSampleParameterSubUV()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpressionTextureSampleParameter2D();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionTextureSampleParameterSubUV::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bBlend, UMaterialExpressionTextureSampleParameterSubUV, uint8);
				UProperty* NewProp_bBlend = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bBlend"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bBlend, UMaterialExpressionTextureSampleParameterSubUV), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bBlend, UMaterialExpressionTextureSampleParameterSubUV), sizeof(uint8), false);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionTextureSampleParameterSubUV.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTextureSampleParameterSubUV.h"));
				MetaData->SetValue(NewProp_bBlend, TEXT("Category"), TEXT("MaterialExpressionTextureSampleParameterSubUV"));
				MetaData->SetValue(NewProp_bBlend, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTextureSampleParameterSubUV.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionTextureSampleParameterSubUV(Z_Construct_UClass_UMaterialExpressionTextureSampleParameterSubUV, TEXT("UMaterialExpressionTextureSampleParameterSubUV"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionTextureSampleParameterSubUV);
	UClass* Z_Construct_UClass_UMaterialExpressionTextureSampleParameterCube_NoRegister()
	{
		return UMaterialExpressionTextureSampleParameterCube::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionTextureSampleParameterCube()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpressionTextureSampleParameter();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionTextureSampleParameterCube::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionTextureSampleParameterCube.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTextureSampleParameterCube.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionTextureSampleParameterCube(Z_Construct_UClass_UMaterialExpressionTextureSampleParameterCube, TEXT("UMaterialExpressionTextureSampleParameterCube"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionTextureSampleParameterCube);
	UClass* Z_Construct_UClass_UMaterialExpressionTextureCoordinate_NoRegister()
	{
		return UMaterialExpressionTextureCoordinate::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionTextureCoordinate()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionTextureCoordinate::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(UnMirrorV, UMaterialExpressionTextureCoordinate, uint8);
				UProperty* NewProp_UnMirrorV = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UnMirrorV"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(UnMirrorV, UMaterialExpressionTextureCoordinate), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(UnMirrorV, UMaterialExpressionTextureCoordinate), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(UnMirrorU, UMaterialExpressionTextureCoordinate, uint8);
				UProperty* NewProp_UnMirrorU = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UnMirrorU"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(UnMirrorU, UMaterialExpressionTextureCoordinate), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(UnMirrorU, UMaterialExpressionTextureCoordinate), sizeof(uint8), false);
				UProperty* NewProp_VTiling = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VTiling"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(VTiling, UMaterialExpressionTextureCoordinate), 0x0000000000000001);
				UProperty* NewProp_UTiling = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UTiling"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(UTiling, UMaterialExpressionTextureCoordinate), 0x0000000000000001);
				UProperty* NewProp_CoordinateIndex = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CoordinateIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(CoordinateIndex, UMaterialExpressionTextureCoordinate), 0x0000000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionTextureCoordinate.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTextureCoordinate.h"));
				MetaData->SetValue(NewProp_UnMirrorV, TEXT("Category"), TEXT("MaterialExpressionTextureCoordinate"));
				MetaData->SetValue(NewProp_UnMirrorV, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTextureCoordinate.h"));
				MetaData->SetValue(NewProp_UnMirrorU, TEXT("Category"), TEXT("MaterialExpressionTextureCoordinate"));
				MetaData->SetValue(NewProp_UnMirrorU, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTextureCoordinate.h"));
				MetaData->SetValue(NewProp_UnMirrorU, TEXT("ToolTip"), TEXT("Would like to unmirror U or V\n- if the texture is mirrored and if you would like to undo mirroring for this texture sample, use this to unmirror"));
				MetaData->SetValue(NewProp_VTiling, TEXT("Category"), TEXT("MaterialExpressionTextureCoordinate"));
				MetaData->SetValue(NewProp_VTiling, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTextureCoordinate.h"));
				MetaData->SetValue(NewProp_VTiling, TEXT("ToolTip"), TEXT("Controls how much the texture tiles vertically, by scaling the V component of the vertex UVs by the specified amount."));
				MetaData->SetValue(NewProp_UTiling, TEXT("Category"), TEXT("MaterialExpressionTextureCoordinate"));
				MetaData->SetValue(NewProp_UTiling, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTextureCoordinate.h"));
				MetaData->SetValue(NewProp_UTiling, TEXT("ToolTip"), TEXT("Controls how much the texture tiles horizontally, by scaling the U component of the vertex UVs by the specified amount."));
				MetaData->SetValue(NewProp_CoordinateIndex, TEXT("Category"), TEXT("MaterialExpressionTextureCoordinate"));
				MetaData->SetValue(NewProp_CoordinateIndex, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTextureCoordinate.h"));
				MetaData->SetValue(NewProp_CoordinateIndex, TEXT("ToolTip"), TEXT("Texture coordinate index"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionTextureCoordinate(Z_Construct_UClass_UMaterialExpressionTextureCoordinate, TEXT("UMaterialExpressionTextureCoordinate"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionTextureCoordinate);
	UClass* Z_Construct_UClass_UMaterialExpressionTime_NoRegister()
	{
		return UMaterialExpressionTime::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionTime()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionTime::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Period = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Period"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Period, UMaterialExpressionTime), 0x0000000000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverride_Period, UMaterialExpressionTime, uint8);
				UProperty* NewProp_bOverride_Period = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bOverride_Period"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverride_Period, UMaterialExpressionTime), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bOverride_Period, UMaterialExpressionTime), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIgnorePause, UMaterialExpressionTime, uint8);
				UProperty* NewProp_bIgnorePause = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIgnorePause"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIgnorePause, UMaterialExpressionTime), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bIgnorePause, UMaterialExpressionTime), sizeof(uint8), false);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionTime.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTime.h"));
				MetaData->SetValue(NewProp_Period, TEXT("Category"), TEXT("MaterialExpressionTime"));
				MetaData->SetValue(NewProp_Period, TEXT("ClampMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_Period, TEXT("editcondition"), TEXT("bOverride_Period"));
				MetaData->SetValue(NewProp_Period, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTime.h"));
				MetaData->SetValue(NewProp_Period, TEXT("ToolTip"), TEXT("Period at which to wrap around time"));
				MetaData->SetValue(NewProp_bOverride_Period, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTime.h"));
				MetaData->SetValue(NewProp_bOverride_Period, TEXT("ToolTip"), TEXT("Enables or disables the Period value."));
				MetaData->SetValue(NewProp_bIgnorePause, TEXT("Category"), TEXT("MaterialExpressionTime"));
				MetaData->SetValue(NewProp_bIgnorePause, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTime.h"));
				MetaData->SetValue(NewProp_bIgnorePause, TEXT("ToolTip"), TEXT("This time continues advancing regardless of whether the game is paused."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionTime(Z_Construct_UClass_UMaterialExpressionTime, TEXT("UMaterialExpressionTime"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionTime);
	UEnum* Z_Construct_UEnum_Engine_EMaterialVectorCoordTransform()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EMaterialVectorCoordTransform_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EMaterialVectorCoordTransform"), 0, Get_Z_Construct_UEnum_Engine_EMaterialVectorCoordTransform_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EMaterialVectorCoordTransform"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TRANSFORM_Tangent")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TRANSFORM_Local")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TRANSFORM_World")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TRANSFORM_View")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TRANSFORM_MAX")), 4));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTransform.h"));
			MetaData->SetValue(ReturnEnum, TEXT("TRANSFORM_Local.DisplayName"), TEXT("Local Space"));
			MetaData->SetValue(ReturnEnum, TEXT("TRANSFORM_Local.ToolTip"), TEXT("Local space"));
			MetaData->SetValue(ReturnEnum, TEXT("TRANSFORM_Tangent.DisplayName"), TEXT("Tangent Space"));
			MetaData->SetValue(ReturnEnum, TEXT("TRANSFORM_Tangent.ToolTip"), TEXT("Tangent space"));
			MetaData->SetValue(ReturnEnum, TEXT("TRANSFORM_View.DisplayName"), TEXT("View Space"));
			MetaData->SetValue(ReturnEnum, TEXT("TRANSFORM_View.ToolTip"), TEXT("View space"));
			MetaData->SetValue(ReturnEnum, TEXT("TRANSFORM_World.DisplayName"), TEXT("World Space"));
			MetaData->SetValue(ReturnEnum, TEXT("TRANSFORM_World.ToolTip"), TEXT("World space"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EMaterialVectorCoordTransform_CRC() { return 3977029417U; }
	UEnum* Z_Construct_UEnum_Engine_EMaterialVectorCoordTransformSource()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EMaterialVectorCoordTransformSource_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EMaterialVectorCoordTransformSource"), 0, Get_Z_Construct_UEnum_Engine_EMaterialVectorCoordTransformSource_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EMaterialVectorCoordTransformSource"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TRANSFORMSOURCE_Tangent")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TRANSFORMSOURCE_Local")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TRANSFORMSOURCE_World")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TRANSFORMSOURCE_View")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TRANSFORMSOURCE_MAX")), 4));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTransform.h"));
			MetaData->SetValue(ReturnEnum, TEXT("TRANSFORMSOURCE_Local.DisplayName"), TEXT("Local Space"));
			MetaData->SetValue(ReturnEnum, TEXT("TRANSFORMSOURCE_Local.ToolTip"), TEXT("Local space"));
			MetaData->SetValue(ReturnEnum, TEXT("TRANSFORMSOURCE_Tangent.DisplayName"), TEXT("Tangent Space"));
			MetaData->SetValue(ReturnEnum, TEXT("TRANSFORMSOURCE_Tangent.ToolTip"), TEXT("Tangent space"));
			MetaData->SetValue(ReturnEnum, TEXT("TRANSFORMSOURCE_View.DisplayName"), TEXT("View Space"));
			MetaData->SetValue(ReturnEnum, TEXT("TRANSFORMSOURCE_View.ToolTip"), TEXT("View space"));
			MetaData->SetValue(ReturnEnum, TEXT("TRANSFORMSOURCE_World.DisplayName"), TEXT("World Space"));
			MetaData->SetValue(ReturnEnum, TEXT("TRANSFORMSOURCE_World.ToolTip"), TEXT("World space"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EMaterialVectorCoordTransformSource_CRC() { return 3490159110U; }
	UClass* Z_Construct_UClass_UMaterialExpressionTransform_NoRegister()
	{
		return UMaterialExpressionTransform::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionTransform()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionTransform::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_TransformType = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TransformType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(TransformType, UMaterialExpressionTransform), 0x0000000000000001, Z_Construct_UEnum_Engine_EMaterialVectorCoordTransform());
				UProperty* NewProp_TransformSourceType = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TransformSourceType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(TransformSourceType, UMaterialExpressionTransform), 0x0000000000000001, Z_Construct_UEnum_Engine_EMaterialVectorCoordTransformSource());
				UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Input"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Input, UMaterialExpressionTransform), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionTransform.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTransform.h"));
				MetaData->SetValue(NewProp_TransformType, TEXT("Category"), TEXT("MaterialExpressionTransform"));
				MetaData->SetValue(NewProp_TransformType, TEXT("DisplayName"), TEXT("Destination"));
				MetaData->SetValue(NewProp_TransformType, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTransform.h"));
				MetaData->SetValue(NewProp_TransformType, TEXT("ToolTip"), TEXT("Destination coordinate space of the FVector"));
				MetaData->SetValue(NewProp_TransformSourceType, TEXT("Category"), TEXT("MaterialExpressionTransform"));
				MetaData->SetValue(NewProp_TransformSourceType, TEXT("DisplayName"), TEXT("Source"));
				MetaData->SetValue(NewProp_TransformSourceType, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTransform.h"));
				MetaData->SetValue(NewProp_TransformSourceType, TEXT("ToolTip"), TEXT("Source coordinate space of the FVector"));
				MetaData->SetValue(NewProp_Input, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTransform.h"));
				MetaData->SetValue(NewProp_Input, TEXT("ToolTip"), TEXT("input expression for this transform"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionTransform(Z_Construct_UClass_UMaterialExpressionTransform, TEXT("UMaterialExpressionTransform"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionTransform);
	UEnum* Z_Construct_UEnum_Engine_EMaterialPositionTransformSource()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EMaterialPositionTransformSource_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EMaterialPositionTransformSource"), 0, Get_Z_Construct_UEnum_Engine_EMaterialPositionTransformSource_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EMaterialPositionTransformSource"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TRANSFORMPOSSOURCE_Local")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TRANSFORMPOSSOURCE_World")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TRANSFORMPOSSOURCE_TranslatedWorld")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TRANSFORMPOSSOURCE_View")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TRANSFORMPOSSOURCE_MAX")), 4));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTransformPosition.h"));
			MetaData->SetValue(ReturnEnum, TEXT("TRANSFORMPOSSOURCE_Local.DisplayName"), TEXT("Local Space"));
			MetaData->SetValue(ReturnEnum, TEXT("TRANSFORMPOSSOURCE_Local.ToolTip"), TEXT("Local Space"));
			MetaData->SetValue(ReturnEnum, TEXT("TRANSFORMPOSSOURCE_TranslatedWorld.DisplayName"), TEXT("Camera Relative World Space"));
			MetaData->SetValue(ReturnEnum, TEXT("TRANSFORMPOSSOURCE_TranslatedWorld.ToolTip"), TEXT("Camera Relative World Space"));
			MetaData->SetValue(ReturnEnum, TEXT("TRANSFORMPOSSOURCE_View.DisplayName"), TEXT("View Space"));
			MetaData->SetValue(ReturnEnum, TEXT("TRANSFORMPOSSOURCE_View.ToolTip"), TEXT("View Space"));
			MetaData->SetValue(ReturnEnum, TEXT("TRANSFORMPOSSOURCE_World.DisplayName"), TEXT("Absolute World Space"));
			MetaData->SetValue(ReturnEnum, TEXT("TRANSFORMPOSSOURCE_World.ToolTip"), TEXT("Absolute World Space"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EMaterialPositionTransformSource_CRC() { return 3501956950U; }
	UClass* Z_Construct_UClass_UMaterialExpressionTransformPosition_NoRegister()
	{
		return UMaterialExpressionTransformPosition::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionTransformPosition()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionTransformPosition::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_TransformType = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TransformType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(TransformType, UMaterialExpressionTransformPosition), 0x0000000000000001, Z_Construct_UEnum_Engine_EMaterialPositionTransformSource());
				UProperty* NewProp_TransformSourceType = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TransformSourceType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(TransformSourceType, UMaterialExpressionTransformPosition), 0x0000000000000001, Z_Construct_UEnum_Engine_EMaterialPositionTransformSource());
				UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Input"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Input, UMaterialExpressionTransformPosition), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionTransformPosition.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTransformPosition.h"));
				MetaData->SetValue(NewProp_TransformType, TEXT("Category"), TEXT("MaterialExpressionTransformPosition"));
				MetaData->SetValue(NewProp_TransformType, TEXT("DisplayName"), TEXT("Destination"));
				MetaData->SetValue(NewProp_TransformType, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTransformPosition.h"));
				MetaData->SetValue(NewProp_TransformType, TEXT("ToolTip"), TEXT("type of transform to apply to the input expression"));
				MetaData->SetValue(NewProp_TransformSourceType, TEXT("Category"), TEXT("MaterialExpressionTransformPosition"));
				MetaData->SetValue(NewProp_TransformSourceType, TEXT("DisplayName"), TEXT("Source"));
				MetaData->SetValue(NewProp_TransformSourceType, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTransformPosition.h"));
				MetaData->SetValue(NewProp_TransformSourceType, TEXT("ToolTip"), TEXT("source format of the position that will be transformed"));
				MetaData->SetValue(NewProp_Input, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTransformPosition.h"));
				MetaData->SetValue(NewProp_Input, TEXT("ToolTip"), TEXT("input expression for this transform"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionTransformPosition(Z_Construct_UClass_UMaterialExpressionTransformPosition, TEXT("UMaterialExpressionTransformPosition"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionTransformPosition);
	UClass* Z_Construct_UClass_UMaterialExpressionTwoSidedSign_NoRegister()
	{
		return UMaterialExpressionTwoSidedSign::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionTwoSidedSign()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionTwoSidedSign::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionTwoSidedSign.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTwoSidedSign.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionTwoSidedSign(Z_Construct_UClass_UMaterialExpressionTwoSidedSign, TEXT("UMaterialExpressionTwoSidedSign"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionTwoSidedSign);
	UClass* Z_Construct_UClass_UMaterialExpressionVertexColor_NoRegister()
	{
		return UMaterialExpressionVertexColor::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionVertexColor()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionVertexColor::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionVertexColor.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionVertexColor.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionVertexColor(Z_Construct_UClass_UMaterialExpressionVertexColor, TEXT("UMaterialExpressionVertexColor"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionVertexColor);
	UClass* Z_Construct_UClass_UMaterialExpressionVertexNormalWS_NoRegister()
	{
		return UMaterialExpressionVertexNormalWS::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionVertexNormalWS()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionVertexNormalWS::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionVertexNormalWS.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionVertexNormalWS.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionVertexNormalWS(Z_Construct_UClass_UMaterialExpressionVertexNormalWS, TEXT("UMaterialExpressionVertexNormalWS"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionVertexNormalWS);
	UEnum* Z_Construct_UEnum_Engine_EMaterialExposedViewProperty()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EMaterialExposedViewProperty_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EMaterialExposedViewProperty"), 0, Get_Z_Construct_UEnum_Engine_EMaterialExposedViewProperty_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EMaterialExposedViewProperty"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("MEVP_BufferSize")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("MEVP_FieldOfView")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("MEVP_TanHalfFieldOfView")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("MEVP_ViewSize")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("MEVP_WorldSpaceCameraPosition")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("MEVP_MAX")), 5));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("MEVP_BufferSize.DisplayName"), TEXT("RenderTargetSize"));
			MetaData->SetValue(ReturnEnum, TEXT("MEVP_BufferSize.ToolTip"), TEXT("Horizontal and vertical size of the view's buffer in pixels"));
			MetaData->SetValue(ReturnEnum, TEXT("MEVP_FieldOfView.DisplayName"), TEXT("FieldOfView"));
			MetaData->SetValue(ReturnEnum, TEXT("MEVP_FieldOfView.ToolTip"), TEXT("Horizontal and vertical field of view angles in radian"));
			MetaData->SetValue(ReturnEnum, TEXT("MEVP_TanHalfFieldOfView.DisplayName"), TEXT("TanHalfFieldOfView"));
			MetaData->SetValue(ReturnEnum, TEXT("MEVP_TanHalfFieldOfView.ToolTip"), TEXT("Tan(FieldOfView * 0.5)"));
			MetaData->SetValue(ReturnEnum, TEXT("MEVP_ViewSize.DisplayName"), TEXT("ViewSize"));
			MetaData->SetValue(ReturnEnum, TEXT("MEVP_ViewSize.ToolTip"), TEXT("Horizontal and vertical size of the view in pixels"));
			MetaData->SetValue(ReturnEnum, TEXT("MEVP_WorldSpaceCameraPosition.DisplayName"), TEXT("CameraPosition (Absolute World Space)"));
			MetaData->SetValue(ReturnEnum, TEXT("MEVP_WorldSpaceCameraPosition.ToolTip"), TEXT("Absolute world space camera position"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionViewProperty.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EMaterialExposedViewProperty_CRC() { return 3900144038U; }
	UClass* Z_Construct_UClass_UMaterialExpressionViewProperty_NoRegister()
	{
		return UMaterialExpressionViewProperty::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionViewProperty()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionViewProperty::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Property = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Property"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(Property, UMaterialExpressionViewProperty), 0x0000000000000001, Z_Construct_UEnum_Engine_EMaterialExposedViewProperty());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionViewProperty.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionViewProperty.h"));
				MetaData->SetValue(NewProp_Property, TEXT("Category"), TEXT("UMaterialExpressionViewProperty"));
				MetaData->SetValue(NewProp_Property, TEXT("DisplayName"), TEXT("View Property"));
				MetaData->SetValue(NewProp_Property, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionViewProperty.h"));
				MetaData->SetValue(NewProp_Property, TEXT("ToolTip"), TEXT("View input property to be accessed"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionViewProperty(Z_Construct_UClass_UMaterialExpressionViewProperty, TEXT("UMaterialExpressionViewProperty"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionViewProperty);
	UClass* Z_Construct_UClass_UMaterialExpressionViewSize_NoRegister()
	{
		return UMaterialExpressionViewSize::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionViewSize()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionViewSize::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionViewSize.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionViewSize.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionViewSize(Z_Construct_UClass_UMaterialExpressionViewSize, TEXT("UMaterialExpressionViewSize"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionViewSize);
	UEnum* Z_Construct_UEnum_Engine_EWorldPositionIncludedOffsets()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EWorldPositionIncludedOffsets_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EWorldPositionIncludedOffsets"), 0, Get_Z_Construct_UEnum_Engine_EWorldPositionIncludedOffsets_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EWorldPositionIncludedOffsets"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("WPT_Default")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("WPT_ExcludeAllShaderOffsets")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("WPT_CameraRelative")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("WPT_CameraRelativeNoOffsets")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("WPT_MAX")), 4));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionWorldPosition.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Specifies which shader generated offsets should included in the world position (displacement/WPO etc.)"));
			MetaData->SetValue(ReturnEnum, TEXT("WPT_CameraRelative.DisplayName"), TEXT("Camera Relative World Position (Including Material Shader Offsets)"));
			MetaData->SetValue(ReturnEnum, TEXT("WPT_CameraRelative.ToolTip"), TEXT("Camera relative world position with all material shader offsets applied"));
			MetaData->SetValue(ReturnEnum, TEXT("WPT_CameraRelativeNoOffsets.DisplayName"), TEXT("Camera Relative World Position (Excluding Material Shader Offsets)"));
			MetaData->SetValue(ReturnEnum, TEXT("WPT_CameraRelativeNoOffsets.ToolTip"), TEXT("Camera relative world position with no material shader offsets applied"));
			MetaData->SetValue(ReturnEnum, TEXT("WPT_Default.DisplayName"), TEXT("Absolute World Position (Including Material Shader Offsets)"));
			MetaData->SetValue(ReturnEnum, TEXT("WPT_Default.ToolTip"), TEXT("Absolute world position with all material shader offsets applied"));
			MetaData->SetValue(ReturnEnum, TEXT("WPT_ExcludeAllShaderOffsets.DisplayName"), TEXT("Absolute World Position (Excluding Material Shader Offsets)"));
			MetaData->SetValue(ReturnEnum, TEXT("WPT_ExcludeAllShaderOffsets.ToolTip"), TEXT("Absolute world position with no material shader offsets applied"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EWorldPositionIncludedOffsets_CRC() { return 2896095069U; }
	UClass* Z_Construct_UClass_UMaterialExpressionWorldPosition_NoRegister()
	{
		return UMaterialExpressionWorldPosition::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionWorldPosition()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialExpressionWorldPosition::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_WorldPositionShaderOffset = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WorldPositionShaderOffset"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(WorldPositionShaderOffset, UMaterialExpressionWorldPosition), 0x0000000000000001, Z_Construct_UEnum_Engine_EWorldPositionIncludedOffsets());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionWorldPosition.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionWorldPosition.h"));
				MetaData->SetValue(NewProp_WorldPositionShaderOffset, TEXT("Category"), TEXT("UMaterialExpressionWorldPosition"));
				MetaData->SetValue(NewProp_WorldPositionShaderOffset, TEXT("DisplayName"), TEXT("Shader Offsets"));
				MetaData->SetValue(NewProp_WorldPositionShaderOffset, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionWorldPosition.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionWorldPosition(Z_Construct_UClass_UMaterialExpressionWorldPosition, TEXT("UMaterialExpressionWorldPosition"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionWorldPosition);
	UClass* Z_Construct_UClass_UMaterialFunction_NoRegister()
	{
		return UMaterialFunction::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialFunction()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialFunction::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_ThumbnailInfo = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ThumbnailInfo"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ThumbnailInfo, UMaterialFunction), 0x00020008000a0009, Z_Construct_UClass_UThumbnailInfo_NoRegister());
				UProperty* NewProp_CombinedOutputTypes = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CombinedOutputTypes"), RF_Public|RF_Transient|RF_Native) UUInt32Property(CPP_PROPERTY_BASE(CombinedOutputTypes, UMaterialFunction), 0x0000010800000000);
				UProperty* NewProp_CombinedInputTypes = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CombinedInputTypes"), RF_Public|RF_Transient|RF_Native) UUInt32Property(CPP_PROPERTY_BASE(CombinedInputTypes, UMaterialFunction), 0x0000010800000000);
#endif // WITH_EDITORONLY_DATA
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bReentrantFlag, UMaterialFunction, uint8);
				UProperty* NewProp_bReentrantFlag = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bReentrantFlag"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bReentrantFlag, UMaterialFunction), 0x0000000000002000, CPP_BOOL_PROPERTY_BITMASK(bReentrantFlag, UMaterialFunction), sizeof(uint8), false);
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_PreviewMaterial = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PreviewMaterial"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(PreviewMaterial, UMaterialFunction), 0x0000000800002000, Z_Construct_UClass_UMaterial_NoRegister());
				UProperty* NewProp_FunctionEditorComments = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FunctionEditorComments"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(FunctionEditorComments, UMaterialFunction), 0x0000000800000000);
				UProperty* NewProp_FunctionEditorComments_Inner = new(EC_InternalUseOnlyConstructor, NewProp_FunctionEditorComments, TEXT("FunctionEditorComments"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000800000000, Z_Construct_UClass_UMaterialExpressionComment_NoRegister());
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_FunctionExpressions = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FunctionExpressions"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(FunctionExpressions, UMaterialFunction), 0x0000000000000000);
				UProperty* NewProp_FunctionExpressions_Inner = new(EC_InternalUseOnlyConstructor, NewProp_FunctionExpressions, TEXT("FunctionExpressions"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UMaterialExpression_NoRegister());
				UProperty* NewProp_LibraryCategoriesText = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LibraryCategoriesText"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(LibraryCategoriesText, UMaterialFunction), 0x0000010000000001);
				UProperty* NewProp_LibraryCategoriesText_Inner = new(EC_InternalUseOnlyConstructor, NewProp_LibraryCategoriesText, TEXT("LibraryCategoriesText"), RF_Public|RF_Transient|RF_Native) UTextProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
				UProperty* NewProp_LibraryCategories = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LibraryCategories"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(LibraryCategories_DEPRECATED, UMaterialFunction), 0x0000010020000000);
				UProperty* NewProp_LibraryCategories_Inner = new(EC_InternalUseOnlyConstructor, NewProp_LibraryCategories, TEXT("LibraryCategories"), RF_Public|RF_Transient|RF_Native) UStrProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000020000000);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bExposeToLibrary, UMaterialFunction, uint8);
				UProperty* NewProp_bExposeToLibrary = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bExposeToLibrary"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bExposeToLibrary, UMaterialFunction), 0x0000010000000001, CPP_BOOL_PROPERTY_BITMASK(bExposeToLibrary, UMaterialFunction), sizeof(uint8), false);
				UProperty* NewProp_Description = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Description"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Description, UMaterialFunction), 0x0000010000000001);
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_ParentFunction = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ParentFunction"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ParentFunction, UMaterialFunction), 0x0000000800002000, Z_Construct_UClass_UMaterialFunction_NoRegister());
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_StateId = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StateId"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(StateId, UMaterialFunction), 0x0000000000200000, Z_Construct_UScriptStruct_FGuid());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialFunction.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialFunction.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("A Material Function is a collection of material expressions that can be reused in different materials"));
				MetaData->SetValue(NewProp_ThumbnailInfo, TEXT("Category"), TEXT("Thumbnail"));
				MetaData->SetValue(NewProp_ThumbnailInfo, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_ThumbnailInfo, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialFunction.h"));
				MetaData->SetValue(NewProp_ThumbnailInfo, TEXT("ToolTip"), TEXT("Information for thumbnail rendering"));
				MetaData->SetValue(NewProp_CombinedOutputTypes, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialFunction.h"));
				MetaData->SetValue(NewProp_CombinedInputTypes, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialFunction.h"));
				MetaData->SetValue(NewProp_bReentrantFlag, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialFunction.h"));
				MetaData->SetValue(NewProp_bReentrantFlag, TEXT("ToolTip"), TEXT("Transient flag used to track re-entrance in recursive functions like IsDependent."));
				MetaData->SetValue(NewProp_PreviewMaterial, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialFunction.h"));
				MetaData->SetValue(NewProp_FunctionEditorComments, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialFunction.h"));
				MetaData->SetValue(NewProp_FunctionEditorComments, TEXT("ToolTip"), TEXT("Array of comments associated with this material; viewed in the material editor."));
				MetaData->SetValue(NewProp_FunctionExpressions, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialFunction.h"));
				MetaData->SetValue(NewProp_FunctionExpressions, TEXT("ToolTip"), TEXT("Array of material expressions, excluding Comments.  Used by the material editor."));
				MetaData->SetValue(NewProp_LibraryCategoriesText, TEXT("Category"), TEXT("MaterialFunction"));
				MetaData->SetValue(NewProp_LibraryCategoriesText, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialFunction.h"));
				MetaData->SetValue(NewProp_LibraryCategoriesText, TEXT("ToolTip"), TEXT("Categories that this function belongs to in the material function library.\nIdeally categories should be chosen carefully so that there are not too many."));
				MetaData->SetValue(NewProp_LibraryCategories, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialFunction.h"));
				MetaData->SetValue(NewProp_LibraryCategories, TEXT("ToolTip"), TEXT("Categories that this function belongs to in the material function library.\nIdeally categories should be chosen carefully so that there are not too many."));
				MetaData->SetValue(NewProp_bExposeToLibrary, TEXT("Category"), TEXT("MaterialFunction"));
				MetaData->SetValue(NewProp_bExposeToLibrary, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialFunction.h"));
				MetaData->SetValue(NewProp_bExposeToLibrary, TEXT("ToolTip"), TEXT("Whether to list this function in the material function library, which is a window in the material editor that lists categorized functions."));
				MetaData->SetValue(NewProp_Description, TEXT("Category"), TEXT("MaterialFunction"));
				MetaData->SetValue(NewProp_Description, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialFunction.h"));
				MetaData->SetValue(NewProp_Description, TEXT("ToolTip"), TEXT("Description of the function which will be displayed as a tooltip wherever the function is used."));
				MetaData->SetValue(NewProp_ParentFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialFunction.h"));
				MetaData->SetValue(NewProp_ParentFunction, TEXT("ToolTip"), TEXT("Used in the material editor, points to the function asset being edited, which this function is just a preview for."));
				MetaData->SetValue(NewProp_StateId, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialFunction.h"));
				MetaData->SetValue(NewProp_StateId, TEXT("ToolTip"), TEXT("Used by materials using this function to know when to recompile."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialFunction(Z_Construct_UClass_UMaterialFunction, TEXT("UMaterialFunction"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialFunction);
	UEnum* Z_Construct_UEnum_Engine_EMaterialDecalResponse()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EMaterialDecalResponse_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EMaterialDecalResponse"), 0, Get_Z_Construct_UEnum_Engine_EMaterialDecalResponse_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EMaterialDecalResponse"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("MDR_None")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("MDR_ColorNormalRoughness")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("MDR_Color")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("MDR_ColorNormal")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("MDR_ColorRoughness")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("MDR_Normal")), 5));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("MDR_NormalRoughness")), 6));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("MDR_Roughness")), 7));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("MDR_MAX")), 8));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("MDR_Color.DisplayName"), TEXT("Color"));
			MetaData->SetValue(ReturnEnum, TEXT("MDR_Color.ToolTip"), TEXT("Receive Decals, applies color DBuffer channels, assumes the decal is non metal and mask the subsurface scattering."));
			MetaData->SetValue(ReturnEnum, TEXT("MDR_ColorNormal.DisplayName"), TEXT("Color Normal"));
			MetaData->SetValue(ReturnEnum, TEXT("MDR_ColorNormal.ToolTip"), TEXT("Receive Decals, applies all DBuffer channels, assumes the decal is non metal and mask the subsurface scattering."));
			MetaData->SetValue(ReturnEnum, TEXT("MDR_ColorNormalRoughness.DisplayName"), TEXT("Color Normal Roughness"));
			MetaData->SetValue(ReturnEnum, TEXT("MDR_ColorNormalRoughness.ToolTip"), TEXT("Receive Decals, applies all DBuffer channels, assumes the decal is non metal and mask the subsurface scattering."));
			MetaData->SetValue(ReturnEnum, TEXT("MDR_ColorRoughness.DisplayName"), TEXT("Color Roughness"));
			MetaData->SetValue(ReturnEnum, TEXT("MDR_ColorRoughness.ToolTip"), TEXT("Receive Decals, applies all DBuffer channels, assumes the decal is non metal and mask the subsurface scattering."));
			MetaData->SetValue(ReturnEnum, TEXT("MDR_None.DisplayName"), TEXT("None"));
			MetaData->SetValue(ReturnEnum, TEXT("MDR_None.ToolTip"), TEXT("Do not receive decals (Later we still can read the DBuffer channels to customize the effect, this frees up some interpolators)."));
			MetaData->SetValue(ReturnEnum, TEXT("MDR_Normal.DisplayName"), TEXT("Normal"));
			MetaData->SetValue(ReturnEnum, TEXT("MDR_Normal.ToolTip"), TEXT("Receive Decals, applies all DBuffer channels, assumes the decal is non metal and mask the subsurface scattering."));
			MetaData->SetValue(ReturnEnum, TEXT("MDR_NormalRoughness.DisplayName"), TEXT("Normal Roughness"));
			MetaData->SetValue(ReturnEnum, TEXT("MDR_NormalRoughness.ToolTip"), TEXT("Receive Decals, applies all DBuffer channels, assumes the decal is non metal and mask the subsurface scattering."));
			MetaData->SetValue(ReturnEnum, TEXT("MDR_Roughness.DisplayName"), TEXT("Roughness"));
			MetaData->SetValue(ReturnEnum, TEXT("MDR_Roughness.ToolTip"), TEXT("Receive Decals, applies all DBuffer channels, assumes the decal is non metal and mask the subsurface scattering."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Defines how the material reacts on DBuffer decals, later we can expose more variants between None and Default."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EMaterialDecalResponse_CRC() { return 1503894790U; }
	UEnum* Z_Construct_UEnum_Engine_EMaterialDomain()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EMaterialDomain_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EMaterialDomain"), 0, Get_Z_Construct_UEnum_Engine_EMaterialDomain_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EMaterialDomain"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("MD_Surface")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("MD_DeferredDecal")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("MD_LightFunction")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("MD_PostProcess")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("MD_UI")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("MD_MAX")), 5));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("MD_DeferredDecal.DisplayName"), TEXT("Deferred Decal"));
			MetaData->SetValue(ReturnEnum, TEXT("MD_DeferredDecal.ToolTip"), TEXT("The material's attributes describe a deferred decal, and will be mapped onto the decal's frustum."));
			MetaData->SetValue(ReturnEnum, TEXT("MD_LightFunction.DisplayName"), TEXT("Light Function"));
			MetaData->SetValue(ReturnEnum, TEXT("MD_LightFunction.ToolTip"), TEXT("The material's attributes describe a light's distribution."));
			MetaData->SetValue(ReturnEnum, TEXT("MD_PostProcess.DisplayName"), TEXT("Post Process"));
			MetaData->SetValue(ReturnEnum, TEXT("MD_PostProcess.ToolTip"), TEXT("The material will be used in a custom post process pass."));
			MetaData->SetValue(ReturnEnum, TEXT("MD_Surface.DisplayName"), TEXT("Surface"));
			MetaData->SetValue(ReturnEnum, TEXT("MD_Surface.ToolTip"), TEXT("The material's attributes describe a 3d surface."));
			MetaData->SetValue(ReturnEnum, TEXT("MD_UI.DisplayName"), TEXT("User Interface"));
			MetaData->SetValue(ReturnEnum, TEXT("MD_UI.ToolTip"), TEXT("The material will be used for UMG or Slate UI"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Defines the domain of a material."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EMaterialDomain_CRC() { return 2758166739U; }
	UEnum* Z_Construct_UEnum_Engine_EDecalBlendMode()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EDecalBlendMode_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EDecalBlendMode"), 0, Get_Z_Construct_UEnum_Engine_EDecalBlendMode_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EDecalBlendMode"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("DBM_Translucent")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("DBM_Stain")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("DBM_Normal")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("DBM_Emissive")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("DBM_DBuffer_ColorNormalRoughness")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("DBM_DBuffer_Color")), 5));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("DBM_DBuffer_ColorNormal")), 6));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("DBM_DBuffer_ColorRoughness")), 7));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("DBM_DBuffer_Normal")), 8));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("DBM_DBuffer_NormalRoughness")), 9));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("DBM_DBuffer_Roughness")), 10));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("DBM_Volumetric_DistanceFunction")), 11));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("DBM_MAX")), 12));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("DBM_DBuffer_Color.DisplayName"), TEXT("DBuffer Translucent Color"));
			MetaData->SetValue(ReturnEnum, TEXT("DBM_DBuffer_Color.ToolTip"), TEXT("Non metal, put into DBuffer to work for baked lighting as well."));
			MetaData->SetValue(ReturnEnum, TEXT("DBM_DBuffer_ColorNormal.DisplayName"), TEXT("DBuffer Translucent Color,Normal"));
			MetaData->SetValue(ReturnEnum, TEXT("DBM_DBuffer_ColorNormal.ToolTip"), TEXT("Non metal, put into DBuffer to work for baked lighting as well (becomes DBM_DBuffer_Color if normal is not hooked up)."));
			MetaData->SetValue(ReturnEnum, TEXT("DBM_DBuffer_ColorNormalRoughness.DisplayName"), TEXT("DBuffer Translucent Color,Normal,Roughness"));
			MetaData->SetValue(ReturnEnum, TEXT("DBM_DBuffer_ColorNormalRoughness.ToolTip"), TEXT("Non metal, put into DBuffer to work for baked lighting as well (becomes DBM_TranslucentNormal if normal is not hooked up)."));
			MetaData->SetValue(ReturnEnum, TEXT("DBM_DBuffer_ColorRoughness.DisplayName"), TEXT("DBuffer Translucent Color,Roughness"));
			MetaData->SetValue(ReturnEnum, TEXT("DBM_DBuffer_ColorRoughness.ToolTip"), TEXT("Non metal, put into DBuffer to work for baked lighting as well."));
			MetaData->SetValue(ReturnEnum, TEXT("DBM_DBuffer_Normal.DisplayName"), TEXT("DBuffer Translucent Normal"));
			MetaData->SetValue(ReturnEnum, TEXT("DBM_DBuffer_Normal.ToolTip"), TEXT("Non metal, put into DBuffer to work for baked lighting as well."));
			MetaData->SetValue(ReturnEnum, TEXT("DBM_DBuffer_NormalRoughness.DisplayName"), TEXT("DBuffer Translucent Normal,Roughness"));
			MetaData->SetValue(ReturnEnum, TEXT("DBM_DBuffer_NormalRoughness.ToolTip"), TEXT("Non metal, put into DBuffer to work for baked lighting as well (becomes DBM_DBuffer_Roughness if normal is not hooked up)."));
			MetaData->SetValue(ReturnEnum, TEXT("DBM_DBuffer_Roughness.DisplayName"), TEXT("DBuffer Translucent Roughness"));
			MetaData->SetValue(ReturnEnum, TEXT("DBM_DBuffer_Roughness.ToolTip"), TEXT("Non metal, put into DBuffer to work for baked lighting as well."));
			MetaData->SetValue(ReturnEnum, TEXT("DBM_Emissive.DisplayName"), TEXT("Emissive"));
			MetaData->SetValue(ReturnEnum, TEXT("DBM_Emissive.ToolTip"), TEXT("Additive emissive only."));
			MetaData->SetValue(ReturnEnum, TEXT("DBM_Normal.DisplayName"), TEXT("Normal"));
			MetaData->SetValue(ReturnEnum, TEXT("DBM_Normal.ToolTip"), TEXT("Only blend normal, updating the GBuffer, does not work for baked lighting."));
			MetaData->SetValue(ReturnEnum, TEXT("DBM_Stain.DisplayName"), TEXT("Stain"));
			MetaData->SetValue(ReturnEnum, TEXT("DBM_Stain.ToolTip"), TEXT("Modulate BaseColor, blend rest, updating the GBuffer, does not work for baked lighting."));
			MetaData->SetValue(ReturnEnum, TEXT("DBM_Translucent.DisplayName"), TEXT("Translucent"));
			MetaData->SetValue(ReturnEnum, TEXT("DBM_Translucent.ToolTip"), TEXT("Blend full material, updating the GBuffer, does not work for baked lighting."));
			MetaData->SetValue(ReturnEnum, TEXT("DBM_Volumetric_DistanceFunction.DisplayName"), TEXT("Volumetric Distance Function (experimental)"));
			MetaData->SetValue(ReturnEnum, TEXT("DBM_Volumetric_DistanceFunction.ToolTip"), TEXT("Output signed distance in Opacity depending on LightVector. Note: Can be costly, no shadow casting but receiving, no per pixel normal yet, no quality settings yet"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Defines how the GBuffer channels are getting manipulated by a decal material pass. Actual index is used to control shader parameters so don't change order."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EDecalBlendMode_CRC() { return 2566719991U; }
	UScriptStruct* Z_Construct_UScriptStruct_FMaterialParameterCollectionInfo()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FMaterialParameterCollectionInfo_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("MaterialParameterCollectionInfo"), sizeof(FMaterialParameterCollectionInfo), Get_Z_Construct_UScriptStruct_FMaterialParameterCollectionInfo_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MaterialParameterCollectionInfo"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FMaterialParameterCollectionInfo>, EStructFlags(0x00000001));
			UProperty* NewProp_ParameterCollection = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ParameterCollection"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ParameterCollection, FMaterialParameterCollectionInfo), 0x0000000000000000, Z_Construct_UClass_UMaterialParameterCollection_NoRegister());
			UProperty* NewProp_StateId = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("StateId"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(StateId, FMaterialParameterCollectionInfo), 0x0000000000000000, Z_Construct_UScriptStruct_FGuid());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Stores information about a parameter collection that this material references, used to know when the material needs to be recompiled."));
			MetaData->SetValue(NewProp_ParameterCollection, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
			MetaData->SetValue(NewProp_ParameterCollection, TEXT("ToolTip"), TEXT("The collection which this material has a dependency on."));
			MetaData->SetValue(NewProp_StateId, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
			MetaData->SetValue(NewProp_StateId, TEXT("ToolTip"), TEXT("Id that the collection had when this material was last compiled."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FMaterialParameterCollectionInfo_CRC() { return 2938132793U; }
	UScriptStruct* Z_Construct_UScriptStruct_FMaterialFunctionInfo()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FMaterialFunctionInfo_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("MaterialFunctionInfo"), sizeof(FMaterialFunctionInfo), Get_Z_Construct_UScriptStruct_FMaterialFunctionInfo_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MaterialFunctionInfo"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FMaterialFunctionInfo>, EStructFlags(0x00000001));
			UProperty* NewProp_Function = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Function"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Function, FMaterialFunctionInfo), 0x0000000000000000, Z_Construct_UClass_UMaterialFunction_NoRegister());
			UProperty* NewProp_StateId = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("StateId"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(StateId, FMaterialFunctionInfo), 0x0000000000000000, Z_Construct_UScriptStruct_FGuid());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Stores information about a function that this material references, used to know when the material needs to be recompiled."));
			MetaData->SetValue(NewProp_Function, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
			MetaData->SetValue(NewProp_Function, TEXT("ToolTip"), TEXT("The function which this material has a dependency on."));
			MetaData->SetValue(NewProp_StateId, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
			MetaData->SetValue(NewProp_StateId, TEXT("ToolTip"), TEXT("Id that the function had when this material was last compiled."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FMaterialFunctionInfo_CRC() { return 3520232436U; }
	UScriptStruct* Z_Construct_UScriptStruct_FVector2MaterialInput()
	{
		struct FMaterialInput
		{
			UMaterialExpression* Expression;
			int32 OutputIndex;
			FString InputName;
			int32 Mask;
			int32 MaskR;
			int32 MaskG;
			int32 MaskB;
			int32 MaskA;
			int32 GCC64_Padding;
		};

		struct FVector2MaterialInput : public FMaterialInput
		{
			uint8 UseConstant:1;
			float ConstantX;
			float ConstantY;
		};

		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FVector2MaterialInput_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("Vector2MaterialInput"), sizeof(FVector2MaterialInput), Get_Z_Construct_UScriptStruct_FVector2MaterialInput_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Vector2MaterialInput"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FMaterialInput(), NULL, EStructFlags(0x00000008), sizeof(FVector2MaterialInput), ALIGNOF(FVector2MaterialInput));
			UProperty* NewProp_ConstantY = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ConstantY"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ConstantY, FVector2MaterialInput), 0x0000000000000000);
			UProperty* NewProp_ConstantX = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ConstantX"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ConstantX, FVector2MaterialInput), 0x0000000000000000);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(UseConstant, FVector2MaterialInput, uint8);
			UProperty* NewProp_UseConstant = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UseConstant"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(UseConstant, FVector2MaterialInput), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(UseConstant, FVector2MaterialInput), sizeof(uint8), false);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
			MetaData->SetValue(NewProp_ConstantY, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
			MetaData->SetValue(NewProp_ConstantX, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
			MetaData->SetValue(NewProp_UseConstant, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FVector2MaterialInput_CRC() { return 3416973667U; }
	UScriptStruct* Z_Construct_UScriptStruct_FVectorMaterialInput()
	{
		struct FMaterialInput
		{
			UMaterialExpression* Expression;
			int32 OutputIndex;
			FString InputName;
			int32 Mask;
			int32 MaskR;
			int32 MaskG;
			int32 MaskB;
			int32 MaskA;
			int32 GCC64_Padding;
		};

		struct FVectorMaterialInput : public FMaterialInput
		{
			uint8 UseConstant:1;
			FVector Constant;
		};

		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FVectorMaterialInput_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("VectorMaterialInput"), sizeof(FVectorMaterialInput), Get_Z_Construct_UScriptStruct_FVectorMaterialInput_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VectorMaterialInput"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FMaterialInput(), NULL, EStructFlags(0x00000008), sizeof(FVectorMaterialInput), ALIGNOF(FVectorMaterialInput));
			UProperty* NewProp_Constant = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Constant"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Constant, FVectorMaterialInput), 0x0000000000000000, Z_Construct_UScriptStruct_FVector());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(UseConstant, FVectorMaterialInput, uint8);
			UProperty* NewProp_UseConstant = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UseConstant"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(UseConstant, FVectorMaterialInput), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(UseConstant, FVectorMaterialInput), sizeof(uint8), false);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
			MetaData->SetValue(NewProp_Constant, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
			MetaData->SetValue(NewProp_UseConstant, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FVectorMaterialInput_CRC() { return 1259044651U; }
	UScriptStruct* Z_Construct_UScriptStruct_FScalarMaterialInput()
	{
		struct FMaterialInput
		{
			UMaterialExpression* Expression;
			int32 OutputIndex;
			FString InputName;
			int32 Mask;
			int32 MaskR;
			int32 MaskG;
			int32 MaskB;
			int32 MaskA;
			int32 GCC64_Padding;
		};

		struct FScalarMaterialInput : public FMaterialInput
		{
			uint8 UseConstant:1;
			float Constant;
		};

		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FScalarMaterialInput_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("ScalarMaterialInput"), sizeof(FScalarMaterialInput), Get_Z_Construct_UScriptStruct_FScalarMaterialInput_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ScalarMaterialInput"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FMaterialInput(), NULL, EStructFlags(0x00000008), sizeof(FScalarMaterialInput), ALIGNOF(FScalarMaterialInput));
			UProperty* NewProp_Constant = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Constant"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Constant, FScalarMaterialInput), 0x0000000000000000);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(UseConstant, FScalarMaterialInput, uint8);
			UProperty* NewProp_UseConstant = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UseConstant"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(UseConstant, FScalarMaterialInput), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(UseConstant, FScalarMaterialInput), sizeof(uint8), false);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
			MetaData->SetValue(NewProp_Constant, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
			MetaData->SetValue(NewProp_UseConstant, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FScalarMaterialInput_CRC() { return 2512863545U; }
	UScriptStruct* Z_Construct_UScriptStruct_FColorMaterialInput()
	{
		struct FMaterialInput
		{
			UMaterialExpression* Expression;
			int32 OutputIndex;
			FString InputName;
			int32 Mask;
			int32 MaskR;
			int32 MaskG;
			int32 MaskB;
			int32 MaskA;
			int32 GCC64_Padding;
		};

		struct FColorMaterialInput : public FMaterialInput
		{
			uint8 UseConstant:1;
			FColor Constant;
		};

		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FColorMaterialInput_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("ColorMaterialInput"), sizeof(FColorMaterialInput), Get_Z_Construct_UScriptStruct_FColorMaterialInput_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ColorMaterialInput"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FMaterialInput(), NULL, EStructFlags(0x00000008), sizeof(FColorMaterialInput), ALIGNOF(FColorMaterialInput));
			UProperty* NewProp_Constant = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Constant"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Constant, FColorMaterialInput), 0x0000000000000000, Z_Construct_UScriptStruct_FColor());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(UseConstant, FColorMaterialInput, uint8);
			UProperty* NewProp_UseConstant = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UseConstant"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(UseConstant, FColorMaterialInput), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(UseConstant, FColorMaterialInput), sizeof(uint8), false);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
			MetaData->SetValue(NewProp_Constant, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
			MetaData->SetValue(NewProp_UseConstant, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FColorMaterialInput_CRC() { return 4179716925U; }
	UScriptStruct* Z_Construct_UScriptStruct_FMaterialInput()
	{
		struct FMaterialInput
		{
			UMaterialExpression* Expression;
			int32 OutputIndex;
			FString InputName;
			int32 Mask;
			int32 MaskR;
			int32 MaskG;
			int32 MaskB;
			int32 MaskA;
			int32 GCC64_Padding;
		};

		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FMaterialInput_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("MaterialInput"), sizeof(FMaterialInput), Get_Z_Construct_UScriptStruct_FMaterialInput_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MaterialInput"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, NULL, EStructFlags(0x00000008), sizeof(FMaterialInput), ALIGNOF(FMaterialInput));
			UProperty* NewProp_GCC64_Padding = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("GCC64_Padding"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(GCC64_Padding, FMaterialInput), 0x0000000000000000);
			UProperty* NewProp_MaskA = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MaskA"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MaskA, FMaterialInput), 0x0000000000000000);
			UProperty* NewProp_MaskB = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MaskB"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MaskB, FMaterialInput), 0x0000000000000000);
			UProperty* NewProp_MaskG = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MaskG"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MaskG, FMaterialInput), 0x0000000000000000);
			UProperty* NewProp_MaskR = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MaskR"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MaskR, FMaterialInput), 0x0000000000000000);
			UProperty* NewProp_Mask = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Mask"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Mask, FMaterialInput), 0x0000000000000000);
			UProperty* NewProp_InputName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("InputName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(InputName, FMaterialInput), 0x0000000000000000);
			UProperty* NewProp_OutputIndex = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("OutputIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(OutputIndex, FMaterialInput), 0x0000000000000000);
			UProperty* NewProp_Expression = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Expression"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Expression, FMaterialInput), 0x0000000000000000, Z_Construct_UClass_UMaterialExpression_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Material input structs.\n@warning: manually mirrored in MaterialShared.h"));
			MetaData->SetValue(NewProp_GCC64_Padding, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
			MetaData->SetValue(NewProp_MaskA, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
			MetaData->SetValue(NewProp_MaskB, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
			MetaData->SetValue(NewProp_MaskG, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
			MetaData->SetValue(NewProp_MaskR, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
			MetaData->SetValue(NewProp_Mask, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
			MetaData->SetValue(NewProp_InputName, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
			MetaData->SetValue(NewProp_InputName, TEXT("ToolTip"), TEXT("Optional name of the input.\nNote that this is the only member which is not derived from the output currently connected."));
			MetaData->SetValue(NewProp_OutputIndex, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
			MetaData->SetValue(NewProp_OutputIndex, TEXT("ToolTip"), TEXT("Index into Expression's outputs array that this input is connected to."));
			MetaData->SetValue(NewProp_Expression, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
			MetaData->SetValue(NewProp_Expression, TEXT("ToolTip"), TEXT("Material expression that this input is connected to, or NULL if not connected."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FMaterialInput_CRC() { return 3115650739U; }
	UClass* Z_Construct_UClass_UMaterial_NoRegister()
	{
		return UMaterial::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterial()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialInterface();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterial::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_ReferencedTextureGuids = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ReferencedTextureGuids"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ReferencedTextureGuids, UMaterial), 0x0000000800000000);
				UProperty* NewProp_ReferencedTextureGuids_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ReferencedTextureGuids, TEXT("ReferencedTextureGuids"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000800000000, Z_Construct_UScriptStruct_FGuid());
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_ExpressionTextureReferences = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ExpressionTextureReferences"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ExpressionTextureReferences, UMaterial), 0x0000000000002000);
				UProperty* NewProp_ExpressionTextureReferences_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ExpressionTextureReferences, TEXT("ExpressionTextureReferences"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UTexture_NoRegister());
				UProperty* NewProp_StateId = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StateId"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(StateId, UMaterial), 0x0000000000000000, Z_Construct_UScriptStruct_FGuid());
				UProperty* NewProp_RefractionDepthBias = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RefractionDepthBias"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(RefractionDepthBias, UMaterial), 0x0000040000000001);
				UProperty* NewProp_BlendablePriority = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BlendablePriority"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(BlendablePriority, UMaterial), 0x0000000000000005);
				UProperty* NewProp_BlendableLocation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BlendableLocation"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(BlendableLocation, UMaterial), 0x0000000000000005, Z_Construct_UEnum_Engine_EBlendableLocation());
				UProperty* NewProp_UsageFlagWarnings = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UsageFlagWarnings"), RF_Public|RF_Transient|RF_Native) UUInt32Property(CPP_PROPERTY_BASE(UsageFlagWarnings, UMaterial), 0x0000000000202000);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsMaterialEditorStatsMaterial, UMaterial, uint8);
				UProperty* NewProp_bIsMaterialEditorStatsMaterial = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsMaterialEditorStatsMaterial"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsMaterialEditorStatsMaterial, UMaterial), 0x0000000000202000, CPP_BOOL_PROPERTY_BITMASK(bIsMaterialEditorStatsMaterial, UMaterial), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAllowDevelopmentShaderCompile, UMaterial, uint8);
				UProperty* NewProp_bAllowDevelopmentShaderCompile = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAllowDevelopmentShaderCompile"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAllowDevelopmentShaderCompile, UMaterial), 0x0000000000202000, CPP_BOOL_PROPERTY_BITMASK(bAllowDevelopmentShaderCompile, UMaterial), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseTranslucencyVertexFog, UMaterial, uint8);
				UProperty* NewProp_bUseTranslucencyVertexFog = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUseTranslucencyVertexFog"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseTranslucencyVertexFog, UMaterial), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bUseTranslucencyVertexFog, UMaterial), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseMaterialAttributes, UMaterial, uint8);
				UProperty* NewProp_bUseMaterialAttributes = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUseMaterialAttributes"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseMaterialAttributes, UMaterial), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bUseMaterialAttributes, UMaterial), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsPreviewMaterial, UMaterial, uint8);
				UProperty* NewProp_bIsPreviewMaterial = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsPreviewMaterial"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsPreviewMaterial, UMaterial), 0x0000000000202000, CPP_BOOL_PROPERTY_BITMASK(bIsPreviewMaterial, UMaterial), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsMasked_DEPRECATED, UMaterial, uint8);
				UProperty* NewProp_bIsMasked = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsMasked"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsMasked_DEPRECATED, UMaterial), 0x0000000020000000, CPP_BOOL_PROPERTY_BITMASK(bIsMasked_DEPRECATED, UMaterial), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCanMaskedBeAssumedOpaque, UMaterial, uint8);
				UProperty* NewProp_bCanMaskedBeAssumedOpaque = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bCanMaskedBeAssumedOpaque"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCanMaskedBeAssumedOpaque, UMaterial), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bCanMaskedBeAssumedOpaque, UMaterial), sizeof(uint8), false);
				UProperty* NewProp_MaterialParameterCollectionInfos = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaterialParameterCollectionInfos"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(MaterialParameterCollectionInfos, UMaterial), 0x0000000000000000);
				UProperty* NewProp_MaterialParameterCollectionInfos_Inner = new(EC_InternalUseOnlyConstructor, NewProp_MaterialParameterCollectionInfos, TEXT("MaterialParameterCollectionInfos"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FMaterialParameterCollectionInfo());
				UProperty* NewProp_MaterialFunctionInfos = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaterialFunctionInfos"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(MaterialFunctionInfos, UMaterial), 0x0000000000000000);
				UProperty* NewProp_MaterialFunctionInfos_Inner = new(EC_InternalUseOnlyConstructor, NewProp_MaterialFunctionInfos, TEXT("MaterialFunctionInfos"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FMaterialFunctionInfo());
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_EditorComments = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EditorComments"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(EditorComments, UMaterial), 0x0000000800000000);
				UProperty* NewProp_EditorComments_Inner = new(EC_InternalUseOnlyConstructor, NewProp_EditorComments, TEXT("EditorComments"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000800000000, Z_Construct_UClass_UMaterialExpressionComment_NoRegister());
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_Expressions = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Expressions"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Expressions, UMaterial), 0x0000000000000000);
				UProperty* NewProp_Expressions_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Expressions, TEXT("Expressions"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UMaterialExpression_NoRegister());
				UProperty* NewProp_EditorYaw = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EditorYaw"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(EditorYaw, UMaterial), 0x0000000000000000);
				UProperty* NewProp_EditorPitch = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EditorPitch"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(EditorPitch, UMaterial), 0x0000000000000000);
				UProperty* NewProp_EditorY = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EditorY"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(EditorY, UMaterial), 0x0000000000000000);
				UProperty* NewProp_EditorX = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EditorX"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(EditorX, UMaterial), 0x0000000000000000);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOutputVelocityOnBasePass, UMaterial, uint8);
				UProperty* NewProp_bOutputVelocityOnBasePass = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bOutputVelocityOnBasePass"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOutputVelocityOnBasePass, UMaterial), 0x0000040000000001, CPP_BOOL_PROPERTY_BITMASK(bOutputVelocityOnBasePass, UMaterial), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(Wireframe, UMaterial, uint8);
				UProperty* NewProp_Wireframe = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Wireframe"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Wireframe, UMaterial), 0x0000040000000001, CPP_BOOL_PROPERTY_BITMASK(Wireframe, UMaterial), sizeof(uint8), false);
				UProperty* NewProp_MaxDisplacement = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxDisplacement"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MaxDisplacement, UMaterial), 0x0000000000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnableAdaptiveTessellation, UMaterial, uint8);
				UProperty* NewProp_bEnableAdaptiveTessellation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bEnableAdaptiveTessellation"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnableAdaptiveTessellation, UMaterial), 0x0000000000000015, CPP_BOOL_PROPERTY_BITMASK(bEnableAdaptiveTessellation, UMaterial), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnableCrackFreeDisplacement, UMaterial, uint8);
				UProperty* NewProp_bEnableCrackFreeDisplacement = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bEnableCrackFreeDisplacement"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnableCrackFreeDisplacement, UMaterial), 0x0000000000000015, CPP_BOOL_PROPERTY_BITMASK(bEnableCrackFreeDisplacement, UMaterial), sizeof(uint8), false);
				UProperty* NewProp_D3D11TessellationMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("D3D11TessellationMode"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(D3D11TessellationMode, UMaterial), 0x0000000000000015, Z_Construct_UEnum_Engine_EMaterialTessellationMode());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseLightmapDirectionality, UMaterial, uint8);
				UProperty* NewProp_bUseLightmapDirectionality = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUseLightmapDirectionality"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseLightmapDirectionality, UMaterial), 0x0000000000000015, CPP_BOOL_PROPERTY_BITMASK(bUseLightmapDirectionality, UMaterial), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bFullyRough, UMaterial, uint8);
				UProperty* NewProp_bFullyRough = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bFullyRough"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bFullyRough, UMaterial), 0x0000000000000015, CPP_BOOL_PROPERTY_BITMASK(bFullyRough, UMaterial), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAutomaticallySetUsageInEditor, UMaterial, uint8);
				UProperty* NewProp_bAutomaticallySetUsageInEditor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAutomaticallySetUsageInEditor"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAutomaticallySetUsageInEditor, UMaterial), 0x0000040000000015, CPP_BOOL_PROPERTY_BITMASK(bAutomaticallySetUsageInEditor, UMaterial), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUsedWithUI_DEPRECATED, UMaterial, uint8);
				UProperty* NewProp_bUsedWithUI = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUsedWithUI"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUsedWithUI_DEPRECATED, UMaterial), 0x0000000020000000, CPP_BOOL_PROPERTY_BITMASK(bUsedWithUI_DEPRECATED, UMaterial), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUsedWithClothing, UMaterial, uint8);
				UProperty* NewProp_bUsedWithClothing = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUsedWithClothing"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUsedWithClothing, UMaterial), 0x0000000000000015, CPP_BOOL_PROPERTY_BITMASK(bUsedWithClothing, UMaterial), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUsesDistortion, UMaterial, uint8);
				UProperty* NewProp_bUsesDistortion = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUsesDistortion"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUsesDistortion, UMaterial), 0x0000000000000015, CPP_BOOL_PROPERTY_BITMASK(bUsesDistortion, UMaterial), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUsedWithInstancedStaticMeshes, UMaterial, uint8);
				UProperty* NewProp_bUsedWithInstancedStaticMeshes = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUsedWithInstancedStaticMeshes"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUsedWithInstancedStaticMeshes, UMaterial), 0x0000000000000015, CPP_BOOL_PROPERTY_BITMASK(bUsedWithInstancedStaticMeshes, UMaterial), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUsedWithSplineMeshes, UMaterial, uint8);
				UProperty* NewProp_bUsedWithSplineMeshes = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUsedWithSplineMeshes"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUsedWithSplineMeshes, UMaterial), 0x0000000000000015, CPP_BOOL_PROPERTY_BITMASK(bUsedWithSplineMeshes, UMaterial), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUsedWithMorphTargets, UMaterial, uint8);
				UProperty* NewProp_bUsedWithMorphTargets = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUsedWithMorphTargets"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUsedWithMorphTargets, UMaterial), 0x0000000000000015, CPP_BOOL_PROPERTY_BITMASK(bUsedWithMorphTargets, UMaterial), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUsedWithFluidSurfaces, UMaterial, uint8);
				UProperty* NewProp_bUsedWithFluidSurfaces = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUsedWithFluidSurfaces"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUsedWithFluidSurfaces, UMaterial), 0x0000000000000015, CPP_BOOL_PROPERTY_BITMASK(bUsedWithFluidSurfaces, UMaterial), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUsedWithStaticLighting, UMaterial, uint8);
				UProperty* NewProp_bUsedWithStaticLighting = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUsedWithStaticLighting"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUsedWithStaticLighting, UMaterial), 0x0000000000000015, CPP_BOOL_PROPERTY_BITMASK(bUsedWithStaticLighting, UMaterial), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUsedWithMeshParticles, UMaterial, uint8);
				UProperty* NewProp_bUsedWithMeshParticles = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUsedWithMeshParticles"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUsedWithMeshParticles, UMaterial), 0x0000000000000015, CPP_BOOL_PROPERTY_BITMASK(bUsedWithMeshParticles, UMaterial), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUsedWithBeamTrails, UMaterial, uint8);
				UProperty* NewProp_bUsedWithBeamTrails = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUsedWithBeamTrails"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUsedWithBeamTrails, UMaterial), 0x0000000000000015, CPP_BOOL_PROPERTY_BITMASK(bUsedWithBeamTrails, UMaterial), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUsedWithParticleSprites, UMaterial, uint8);
				UProperty* NewProp_bUsedWithParticleSprites = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUsedWithParticleSprites"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUsedWithParticleSprites, UMaterial), 0x0000000000000015, CPP_BOOL_PROPERTY_BITMASK(bUsedWithParticleSprites, UMaterial), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUsedWithLandscape, UMaterial, uint8);
				UProperty* NewProp_bUsedWithLandscape = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUsedWithLandscape"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUsedWithLandscape, UMaterial), 0x0000000000000015, CPP_BOOL_PROPERTY_BITMASK(bUsedWithLandscape, UMaterial), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUsedWithEditorCompositing, UMaterial, uint8);
				UProperty* NewProp_bUsedWithEditorCompositing = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUsedWithEditorCompositing"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUsedWithEditorCompositing, UMaterial), 0x0000000000000015, CPP_BOOL_PROPERTY_BITMASK(bUsedWithEditorCompositing, UMaterial), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUsedWithSkeletalMesh, UMaterial, uint8);
				UProperty* NewProp_bUsedWithSkeletalMesh = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUsedWithSkeletalMesh"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUsedWithSkeletalMesh, UMaterial), 0x0000000000000015, CPP_BOOL_PROPERTY_BITMASK(bUsedWithSkeletalMesh, UMaterial), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUsedAsSpecialEngineMaterial, UMaterial, uint8);
				UProperty* NewProp_bUsedAsSpecialEngineMaterial = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUsedAsSpecialEngineMaterial"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUsedAsSpecialEngineMaterial, UMaterial), 0x0000000000200000, CPP_BOOL_PROPERTY_BITMASK(bUsedAsSpecialEngineMaterial, UMaterial), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bBlockGI, UMaterial, uint8);
				UProperty* NewProp_bBlockGI = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bBlockGI"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bBlockGI, UMaterial), 0x0000040000000005, CPP_BOOL_PROPERTY_BITMASK(bBlockGI, UMaterial), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseEmissiveForDynamicAreaLighting, UMaterial, uint8);
				UProperty* NewProp_bUseEmissiveForDynamicAreaLighting = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUseEmissiveForDynamicAreaLighting"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseEmissiveForDynamicAreaLighting, UMaterial), 0x0000040000000005, CPP_BOOL_PROPERTY_BITMASK(bUseEmissiveForDynamicAreaLighting, UMaterial), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTangentSpaceNormal, UMaterial, uint8);
				UProperty* NewProp_bTangentSpaceNormal = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bTangentSpaceNormal"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTangentSpaceNormal, UMaterial), 0x0000040000000001, CPP_BOOL_PROPERTY_BITMASK(bTangentSpaceNormal, UMaterial), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bGenerateSphericalParticleNormals, UMaterial, uint8);
				UProperty* NewProp_bGenerateSphericalParticleNormals = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bGenerateSphericalParticleNormals"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bGenerateSphericalParticleNormals, UMaterial), 0x0000040000000001, CPP_BOOL_PROPERTY_BITMASK(bGenerateSphericalParticleNormals, UMaterial), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDisableDepthTest, UMaterial, uint8);
				UProperty* NewProp_bDisableDepthTest = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bDisableDepthTest"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDisableDepthTest, UMaterial), 0x0000040000000001, CPP_BOOL_PROPERTY_BITMASK(bDisableDepthTest, UMaterial), sizeof(uint8), false);
				UProperty* NewProp_TranslucentShadowStartOffset = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TranslucentShadowStartOffset"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(TranslucentShadowStartOffset, UMaterial), 0x0000000000000001);
				UProperty* NewProp_TranslucentMultipleScatteringExtinction = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TranslucentMultipleScatteringExtinction"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TranslucentMultipleScatteringExtinction, UMaterial), 0x0000000000000001, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_TranslucentBackscatteringExponent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TranslucentBackscatteringExponent"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(TranslucentBackscatteringExponent, UMaterial), 0x0000000000000001);
				UProperty* NewProp_TranslucentSelfShadowSecondOpacity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TranslucentSelfShadowSecondOpacity"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(TranslucentSelfShadowSecondOpacity, UMaterial), 0x0000000000000001);
				UProperty* NewProp_TranslucentSelfShadowSecondDensityScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TranslucentSelfShadowSecondDensityScale"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(TranslucentSelfShadowSecondDensityScale, UMaterial), 0x0000000000000001);
				UProperty* NewProp_TranslucentSelfShadowDensityScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TranslucentSelfShadowDensityScale"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(TranslucentSelfShadowDensityScale, UMaterial), 0x0000000000000001);
				UProperty* NewProp_TranslucentShadowDensityScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TranslucentShadowDensityScale"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(TranslucentShadowDensityScale, UMaterial), 0x0000000000000001);
				UProperty* NewProp_TranslucencyDirectionalLightingIntensity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TranslucencyDirectionalLightingIntensity"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(TranslucencyDirectionalLightingIntensity, UMaterial), 0x0000000000000001);
				UProperty* NewProp_TranslucencyLightingMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TranslucencyLightingMode"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(TranslucencyLightingMode, UMaterial), 0x0000000000000001, Z_Construct_UEnum_Engine_ETranslucencyLightingMode());
				UProperty* NewProp_NumCustomizedUVs = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NumCustomizedUVs"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(NumCustomizedUVs, UMaterial), 0x0000040000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(DitheredLODTransition, UMaterial, uint8);
				UProperty* NewProp_DitheredLODTransition = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DitheredLODTransition"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(DitheredLODTransition, UMaterial), 0x0000040000000001, CPP_BOOL_PROPERTY_BITMASK(DitheredLODTransition, UMaterial), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(TwoSided, UMaterial, uint8);
				UProperty* NewProp_TwoSided = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TwoSided"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(TwoSided, UMaterial), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(TwoSided, UMaterial), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bScreenSpaceReflections, UMaterial, uint8);
				UProperty* NewProp_bScreenSpaceReflections = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bScreenSpaceReflections"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bScreenSpaceReflections, UMaterial), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bScreenSpaceReflections, UMaterial), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnableResponsiveAA, UMaterial, uint8);
				UProperty* NewProp_bEnableResponsiveAA = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bEnableResponsiveAA"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnableResponsiveAA, UMaterial), 0x0000040000000001, CPP_BOOL_PROPERTY_BITMASK(bEnableResponsiveAA, UMaterial), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnableSeparateTranslucency, UMaterial, uint8);
				UProperty* NewProp_bEnableSeparateTranslucency = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bEnableSeparateTranslucency"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnableSeparateTranslucency, UMaterial), 0x0000040000000001, CPP_BOOL_PROPERTY_BITMASK(bEnableSeparateTranslucency, UMaterial), sizeof(uint8), false);
				UProperty* NewProp_PixelDepthOffset = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PixelDepthOffset"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PixelDepthOffset, UMaterial), 0x0000000000000000, Z_Construct_UScriptStruct_FScalarMaterialInput());
				UProperty* NewProp_MaterialAttributes = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaterialAttributes"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MaterialAttributes, UMaterial), 0x0000000000000000, Z_Construct_UScriptStruct_FMaterialAttributesInput());
				UProperty* NewProp_CustomizedUVs = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CustomizedUVs"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(CustomizedUVs, UMaterial), 0x0000000000000000, Z_Construct_UScriptStruct_FVector2MaterialInput());
				NewProp_CustomizedUVs->ArrayDim = CPP_ARRAY_DIM(CustomizedUVs, UMaterial);
				UProperty* NewProp_Refraction = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Refraction"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Refraction, UMaterial), 0x0000000000000000, Z_Construct_UScriptStruct_FScalarMaterialInput());
				UProperty* NewProp_AmbientOcclusion = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AmbientOcclusion"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(AmbientOcclusion, UMaterial), 0x0000000000000000, Z_Construct_UScriptStruct_FScalarMaterialInput());
				UProperty* NewProp_ClearCoatRoughness = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ClearCoatRoughness"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ClearCoatRoughness, UMaterial), 0x0000000000000000, Z_Construct_UScriptStruct_FScalarMaterialInput());
				UProperty* NewProp_ClearCoat = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ClearCoat"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ClearCoat, UMaterial), 0x0000000000000000, Z_Construct_UScriptStruct_FScalarMaterialInput());
				UProperty* NewProp_SubsurfaceColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SubsurfaceColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SubsurfaceColor, UMaterial), 0x0000000000000000, Z_Construct_UScriptStruct_FColorMaterialInput());
				UProperty* NewProp_TessellationMultiplier = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TessellationMultiplier"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TessellationMultiplier, UMaterial), 0x0000000000000000, Z_Construct_UScriptStruct_FScalarMaterialInput());
				UProperty* NewProp_WorldDisplacement = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WorldDisplacement"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(WorldDisplacement, UMaterial), 0x0000000000000000, Z_Construct_UScriptStruct_FVectorMaterialInput());
				UProperty* NewProp_WorldPositionOffset = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WorldPositionOffset"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(WorldPositionOffset, UMaterial), 0x0000000000000000, Z_Construct_UScriptStruct_FVectorMaterialInput());
				UProperty* NewProp_OpacityMaskClipValue = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OpacityMaskClipValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(OpacityMaskClipValue, UMaterial), 0x0000040000000001);
				UProperty* NewProp_ShadingModel = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ShadingModel"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(ShadingModel, UMaterial), 0x0000010000000001, Z_Construct_UEnum_Engine_EMaterialShadingModel());
				UProperty* NewProp_MaterialDecalResponse = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaterialDecalResponse"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(MaterialDecalResponse, UMaterial), 0x0000050000000015, Z_Construct_UEnum_Engine_EMaterialDecalResponse());
				UProperty* NewProp_DecalBlendMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DecalBlendMode"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(DecalBlendMode, UMaterial), 0x0000000000000001, Z_Construct_UEnum_Engine_EDecalBlendMode());
				UProperty* NewProp_BlendMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BlendMode"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(BlendMode, UMaterial), 0x0000010000000015, Z_Construct_UEnum_Engine_EBlendMode());
				UProperty* NewProp_MaterialDomain = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaterialDomain"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(MaterialDomain, UMaterial), 0x0000010000000015, Z_Construct_UEnum_Engine_EMaterialDomain());
				UProperty* NewProp_OpacityMask = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OpacityMask"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(OpacityMask, UMaterial), 0x0000000000000000, Z_Construct_UScriptStruct_FScalarMaterialInput());
				UProperty* NewProp_Opacity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Opacity"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Opacity, UMaterial), 0x0000000000000000, Z_Construct_UScriptStruct_FScalarMaterialInput());
				UProperty* NewProp_EmissiveColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EmissiveColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(EmissiveColor, UMaterial), 0x0000000000000000, Z_Construct_UScriptStruct_FColorMaterialInput());
				UProperty* NewProp_Normal = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Normal"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Normal, UMaterial), 0x0000000000000000, Z_Construct_UScriptStruct_FVectorMaterialInput());
				UProperty* NewProp_Roughness = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Roughness"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Roughness, UMaterial), 0x0000000000000000, Z_Construct_UScriptStruct_FScalarMaterialInput());
				UProperty* NewProp_Specular = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Specular"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Specular, UMaterial), 0x0000000000000000, Z_Construct_UScriptStruct_FScalarMaterialInput());
				UProperty* NewProp_Metallic = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Metallic"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Metallic, UMaterial), 0x0000000000000000, Z_Construct_UScriptStruct_FScalarMaterialInput());
				UProperty* NewProp_BaseColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BaseColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(BaseColor, UMaterial), 0x0000000000000000, Z_Construct_UScriptStruct_FColorMaterialInput());
				UProperty* NewProp_SpecularColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SpecularColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SpecularColor_DEPRECATED, UMaterial), 0x0000000020000000, Z_Construct_UScriptStruct_FColorMaterialInput());
				UProperty* NewProp_DiffuseColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DiffuseColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DiffuseColor_DEPRECATED, UMaterial), 0x0000000020000000, Z_Construct_UScriptStruct_FColorMaterialInput());
				UProperty* NewProp_PhysMaterial = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PhysMaterial"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(PhysMaterial, UMaterial), 0x0000000000000001, Z_Construct_UClass_UPhysicalMaterial_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/Material.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("A Material is an asset which can be applied to a mesh to control the visual look of the scene. In general,\nwhen light from the scene hits the surface, the shading model of the material is used to calculate how\nthat light interacts with the surface."));
				MetaData->SetValue(NewProp_ReferencedTextureGuids, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_ExpressionTextureReferences, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_ExpressionTextureReferences, TEXT("ToolTip"), TEXT("Cached texture references from all expressions in the material (including nested functions).\nThis is used to link uniform texture expressions which were stored in the DDC with the UTextures that they reference."));
				MetaData->SetValue(NewProp_StateId, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_StateId, TEXT("ToolTip"), TEXT("Guid that uniquely identifies this material.\nAny changes to the state of the material that do not appear separately in the shadermap DDC keys must cause this guid to be regenerated!\nFor example, a modification to the Expressions array.\nCode changes that cause the guid to be regenerated on load should be avoided, as that requires a resave of the content to stop recompiling every load."));
				MetaData->SetValue(NewProp_RefractionDepthBias, TEXT("Category"), TEXT("Material"));
				MetaData->SetValue(NewProp_RefractionDepthBias, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_RefractionDepthBias, TEXT("ToolTip"), TEXT("This is the refraction depth bias, larger values offset distortion to prevent closer objects from rendering into the distorted surface at acute viewing angles but increases the disconnect between surface and where the refraction starts."));
				MetaData->SetValue(NewProp_BlendablePriority, TEXT("Category"), TEXT("PostProcessMaterial"));
				MetaData->SetValue(NewProp_BlendablePriority, TEXT("DisplayName"), TEXT("Blendable Priority"));
				MetaData->SetValue(NewProp_BlendablePriority, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_BlendablePriority, TEXT("ToolTip"), TEXT("If multiple nodes with the same  type are inserted at the same point, this defined order and if they get combined, only used if domain is PostProcess"));
				MetaData->SetValue(NewProp_BlendableLocation, TEXT("Category"), TEXT("PostProcessMaterial"));
				MetaData->SetValue(NewProp_BlendableLocation, TEXT("DisplayName"), TEXT("Blendable Location"));
				MetaData->SetValue(NewProp_BlendableLocation, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_BlendableLocation, TEXT("ToolTip"), TEXT("Where the node is inserted in the (post processing) graph, only used if domain is PostProcess"));
				MetaData->SetValue(NewProp_UsageFlagWarnings, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_UsageFlagWarnings, TEXT("ToolTip"), TEXT("true if we have printed a warning about material usage for a given usage flag."));
				MetaData->SetValue(NewProp_bIsMaterialEditorStatsMaterial, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bIsMaterialEditorStatsMaterial, TEXT("ToolTip"), TEXT("true if this is a special material used for stats by the material editor."));
				MetaData->SetValue(NewProp_bAllowDevelopmentShaderCompile, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bAllowDevelopmentShaderCompile, TEXT("ToolTip"), TEXT("If true the compilation environment will be changed to remove the global COMPILE_SHADERS_FOR_DEVELOPMENT flag."));
				MetaData->SetValue(NewProp_bUseTranslucencyVertexFog, TEXT("Category"), TEXT("Translucency"));
				MetaData->SetValue(NewProp_bUseTranslucencyVertexFog, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bUseTranslucencyVertexFog, TEXT("ToolTip"), TEXT("When true, translucent materials are fogged. Defaults to true."));
				MetaData->SetValue(NewProp_bUseMaterialAttributes, TEXT("Category"), TEXT("Material"));
				MetaData->SetValue(NewProp_bUseMaterialAttributes, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bUseMaterialAttributes, TEXT("ToolTip"), TEXT("when true, the material attributes pin is used instead of the regular pins."));
				MetaData->SetValue(NewProp_bIsPreviewMaterial, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bIsPreviewMaterial, TEXT("ToolTip"), TEXT("true if Material is the preview material used in the material editor."));
				MetaData->SetValue(NewProp_bIsMasked, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bIsMasked, TEXT("ToolTip"), TEXT("true if Material is masked and uses custom opacity"));
				MetaData->SetValue(NewProp_bCanMaskedBeAssumedOpaque, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bCanMaskedBeAssumedOpaque, TEXT("ToolTip"), TEXT("true if this Material can be assumed Opaque when set to masked."));
				MetaData->SetValue(NewProp_MaterialParameterCollectionInfos, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_MaterialParameterCollectionInfos, TEXT("ToolTip"), TEXT("Array of all parameter collections this material depends on."));
				MetaData->SetValue(NewProp_MaterialFunctionInfos, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_MaterialFunctionInfos, TEXT("ToolTip"), TEXT("Array of all functions this material depends on."));
				MetaData->SetValue(NewProp_EditorComments, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_EditorComments, TEXT("ToolTip"), TEXT("Array of comments associated with this material; viewed in the material editor."));
				MetaData->SetValue(NewProp_Expressions, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_Expressions, TEXT("ToolTip"), TEXT("Array of material expressions, excluding Comments.  Used by the material editor."));
				MetaData->SetValue(NewProp_EditorYaw, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_EditorPitch, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_EditorY, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_EditorX, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bOutputVelocityOnBasePass, TEXT("Category"), TEXT("Material"));
				MetaData->SetValue(NewProp_bOutputVelocityOnBasePass, TEXT("DisplayName"), TEXT("Support accurate velocities from Vertex Deformation"));
				MetaData->SetValue(NewProp_bOutputVelocityOnBasePass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bOutputVelocityOnBasePass, TEXT("ToolTip"), TEXT("Skips outputting velocity during the base pass."));
				MetaData->SetValue(NewProp_Wireframe, TEXT("Category"), TEXT("Material"));
				MetaData->SetValue(NewProp_Wireframe, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_Wireframe, TEXT("ToolTip"), TEXT("Enables a wireframe view of the mesh the material is applied to."));
				MetaData->SetValue(NewProp_MaxDisplacement, TEXT("Category"), TEXT("Tessellation"));
				MetaData->SetValue(NewProp_MaxDisplacement, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bEnableAdaptiveTessellation, TEXT("Category"), TEXT("Tessellation"));
				MetaData->SetValue(NewProp_bEnableAdaptiveTessellation, TEXT("DisplayName"), TEXT("Adaptive Tessellation"));
				MetaData->SetValue(NewProp_bEnableAdaptiveTessellation, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bEnableAdaptiveTessellation, TEXT("ToolTip"), TEXT("Enables adaptive tessellation, which tries to maintain a uniform number of pixels per triangle."));
				MetaData->SetValue(NewProp_bEnableCrackFreeDisplacement, TEXT("Category"), TEXT("Tessellation"));
				MetaData->SetValue(NewProp_bEnableCrackFreeDisplacement, TEXT("DisplayName"), TEXT("Crack Free Displacement"));
				MetaData->SetValue(NewProp_bEnableCrackFreeDisplacement, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bEnableCrackFreeDisplacement, TEXT("ToolTip"), TEXT("Prevents cracks in the surface of the mesh when using tessellation."));
				MetaData->SetValue(NewProp_D3D11TessellationMode, TEXT("Category"), TEXT("Tessellation"));
				MetaData->SetValue(NewProp_D3D11TessellationMode, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_D3D11TessellationMode, TEXT("ToolTip"), TEXT("The type of tessellation to apply to this object.  Note D3D11 required for anything except MTM_NoTessellation."));
				MetaData->SetValue(NewProp_bUseLightmapDirectionality, TEXT("Category"), TEXT("Mobile"));
				MetaData->SetValue(NewProp_bUseLightmapDirectionality, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bUseLightmapDirectionality, TEXT("ToolTip"), TEXT("Use lightmap directionality and per pixel normals. If disabled, lighting from lightmaps will be flat but cheaper."));
				MetaData->SetValue(NewProp_bFullyRough, TEXT("Category"), TEXT("Mobile"));
				MetaData->SetValue(NewProp_bFullyRough, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bFullyRough, TEXT("ToolTip"), TEXT("Forces the material to be completely rough. Saves a number of instructions and one sampler."));
				MetaData->SetValue(NewProp_bAutomaticallySetUsageInEditor, TEXT("Category"), TEXT("Usage"));
				MetaData->SetValue(NewProp_bAutomaticallySetUsageInEditor, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bAutomaticallySetUsageInEditor, TEXT("ToolTip"), TEXT("Whether to automatically set usage flags based on what the material is applied to in the editor.\nIt can be useful to disable this on a base material with many instances, where adding another usage flag accidentally (eg bUsedWithSkeletalMeshes) can add a lot of shader permutations."));
				MetaData->SetValue(NewProp_bUsedWithUI, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bUsedWithUI, TEXT("ToolTip"), TEXT("Indicates that the material and its instances can be use with Slate UI and UMG\nThis will result in the shaders required to support UI materials being compiled which will increase shader compile time and memory usage."));
				MetaData->SetValue(NewProp_bUsedWithClothing, TEXT("Category"), TEXT("Usage"));
				MetaData->SetValue(NewProp_bUsedWithClothing, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bUsedWithClothing, TEXT("ToolTip"), TEXT("Indicates that the material and its instances can be use with clothing\nThis will result in the shaders required to support clothing being compiled which will increase shader compile time and memory usage."));
				MetaData->SetValue(NewProp_bUsesDistortion, TEXT("Category"), TEXT("Usage"));
				MetaData->SetValue(NewProp_bUsesDistortion, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bUsesDistortion, TEXT("ToolTip"), TEXT("Indicates that the material and its instances can be use with distortion\nThis will result in the shaders required to support distortion being compiled which will increase shader compile time and memory usage."));
				MetaData->SetValue(NewProp_bUsedWithInstancedStaticMeshes, TEXT("Category"), TEXT("Usage"));
				MetaData->SetValue(NewProp_bUsedWithInstancedStaticMeshes, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bUsedWithInstancedStaticMeshes, TEXT("ToolTip"), TEXT("Indicates that the material and its instances can be use with instanced static meshes\nThis will result in the shaders required to support instanced static meshes being compiled which will increase shader compile time and memory usage."));
				MetaData->SetValue(NewProp_bUsedWithSplineMeshes, TEXT("Category"), TEXT("Usage"));
				MetaData->SetValue(NewProp_bUsedWithSplineMeshes, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bUsedWithSplineMeshes, TEXT("ToolTip"), TEXT("Indicates that the material and its instances can be use with spline meshes\nThis will result in the shaders required to support spline meshes being compiled which will increase shader compile time and memory usage."));
				MetaData->SetValue(NewProp_bUsedWithMorphTargets, TEXT("Category"), TEXT("Usage"));
				MetaData->SetValue(NewProp_bUsedWithMorphTargets, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bUsedWithMorphTargets, TEXT("ToolTip"), TEXT("Indicates that the material and its instances can be use with morph targets\nThis will result in the shaders required to support morph targets being compiled which will increase shader compile time and memory usage."));
				MetaData->SetValue(NewProp_bUsedWithFluidSurfaces, TEXT("Category"), TEXT("Usage"));
				MetaData->SetValue(NewProp_bUsedWithFluidSurfaces, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bUsedWithFluidSurfaces, TEXT("ToolTip"), TEXT("Indicates that the material and its instances can be use with fluid surfaces\nThis will result in the shaders required to support fluid surfaces being compiled which will increase shader compile time and memory usage."));
				MetaData->SetValue(NewProp_bUsedWithStaticLighting, TEXT("Category"), TEXT("Usage"));
				MetaData->SetValue(NewProp_bUsedWithStaticLighting, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bUsedWithStaticLighting, TEXT("ToolTip"), TEXT("Indicates that the material and its instances can be use with static lighting\nThis will result in the shaders required to support static lighting being compiled which will increase shader compile time and memory usage."));
				MetaData->SetValue(NewProp_bUsedWithMeshParticles, TEXT("Category"), TEXT("Usage"));
				MetaData->SetValue(NewProp_bUsedWithMeshParticles, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bUsedWithMeshParticles, TEXT("ToolTip"), TEXT("Indicates that the material and its instances can be use with mesh particles\nThis will result in the shaders required to support mesh particles being compiled which will increase shader compile time and memory usage."));
				MetaData->SetValue(NewProp_bUsedWithBeamTrails, TEXT("Category"), TEXT("Usage"));
				MetaData->SetValue(NewProp_bUsedWithBeamTrails, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bUsedWithBeamTrails, TEXT("ToolTip"), TEXT("Indicates that the material and its instances can be use with beam trails\nThis will result in the shaders required to support beam trails being compiled which will increase shader compile time and memory usage."));
				MetaData->SetValue(NewProp_bUsedWithParticleSprites, TEXT("Category"), TEXT("Usage"));
				MetaData->SetValue(NewProp_bUsedWithParticleSprites, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bUsedWithParticleSprites, TEXT("ToolTip"), TEXT("Indicates that the material and its instances can be use with particle sprites\nThis will result in the shaders required to support particle sprites being compiled which will increase shader compile time and memory usage."));
				MetaData->SetValue(NewProp_bUsedWithLandscape, TEXT("Category"), TEXT("Usage"));
				MetaData->SetValue(NewProp_bUsedWithLandscape, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bUsedWithLandscape, TEXT("ToolTip"), TEXT("Indicates that the material and its instances can be use with landscapes\nThis will result in the shaders required to support landscapes being compiled which will increase shader compile time and memory usage."));
				MetaData->SetValue(NewProp_bUsedWithEditorCompositing, TEXT("Category"), TEXT("Usage"));
				MetaData->SetValue(NewProp_bUsedWithEditorCompositing, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bUsedWithEditorCompositing, TEXT("ToolTip"), TEXT("Indicates that the material and its instances can be use with editor compositing\nThis will result in the shaders required to support editor compositing being compiled which will increase shader compile time and memory usage."));
				MetaData->SetValue(NewProp_bUsedWithSkeletalMesh, TEXT("Category"), TEXT("Usage"));
				MetaData->SetValue(NewProp_bUsedWithSkeletalMesh, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bUsedWithSkeletalMesh, TEXT("ToolTip"), TEXT("Indicates that the material and its instances can be use with skeletal meshes.\nThis will result in the shaders required to support skeletal meshes being compiled which will increase shader compile time and memory usage."));
				MetaData->SetValue(NewProp_bUsedAsSpecialEngineMaterial, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bUsedAsSpecialEngineMaterial, TEXT("ToolTip"), TEXT("This is a special usage flag that allows a material to be assignable to any primitive type.\nThis is useful for materials used by code to implement certain viewmodes, for example the default material or lighting only material.\nThe cost is that nearly 20x more shaders will be compiled for the material than the average material, which will greatly increase shader compile time and memory usage.\nThis flag should only be enabled when absolutely necessary, and is purposefully not exposed to the UI to prevent abuse."));
				MetaData->SetValue(NewProp_bBlockGI, TEXT("Category"), TEXT("Material"));
				MetaData->SetValue(NewProp_bBlockGI, TEXT("DisplayName"), TEXT("Block Global Illumination"));
				MetaData->SetValue(NewProp_bBlockGI, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bBlockGI, TEXT("ToolTip"), TEXT("If enabled, the material's opacity defines how much GI is blocked when using the LightPropagationVolume feature"));
				MetaData->SetValue(NewProp_bUseEmissiveForDynamicAreaLighting, TEXT("Category"), TEXT("Material"));
				MetaData->SetValue(NewProp_bUseEmissiveForDynamicAreaLighting, TEXT("DisplayName"), TEXT("Emissive (Dynamic Area Light)"));
				MetaData->SetValue(NewProp_bUseEmissiveForDynamicAreaLighting, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bUseEmissiveForDynamicAreaLighting, TEXT("ToolTip"), TEXT("If enabled, the material's emissive colour is injected into the LightPropagationVolume"));
				MetaData->SetValue(NewProp_bTangentSpaceNormal, TEXT("Category"), TEXT("Material"));
				MetaData->SetValue(NewProp_bTangentSpaceNormal, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bTangentSpaceNormal, TEXT("ToolTip"), TEXT("Whether the material takes a tangent space normal or a world space normal as input.\n(TangentSpace requires extra instructions but is often more convenient)."));
				MetaData->SetValue(NewProp_bGenerateSphericalParticleNormals, TEXT("Category"), TEXT("Material"));
				MetaData->SetValue(NewProp_bGenerateSphericalParticleNormals, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bGenerateSphericalParticleNormals, TEXT("ToolTip"), TEXT("Whether to generate spherical normals for particles that use this material."));
				MetaData->SetValue(NewProp_bDisableDepthTest, TEXT("Category"), TEXT("Translucency"));
				MetaData->SetValue(NewProp_bDisableDepthTest, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bDisableDepthTest, TEXT("ToolTip"), TEXT("Whether to draw on top of opaque pixels even if behind them. This only has meaning for translucency."));
				MetaData->SetValue(NewProp_TranslucentShadowStartOffset, TEXT("Category"), TEXT("TranslucencySelfShadowing"));
				MetaData->SetValue(NewProp_TranslucentShadowStartOffset, TEXT("DisplayName"), TEXT("Start Offset"));
				MetaData->SetValue(NewProp_TranslucentShadowStartOffset, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_TranslucentShadowStartOffset, TEXT("ToolTip"), TEXT("Local space distance to bias the translucent shadow.  Positive values move the shadow away from the light."));
				MetaData->SetValue(NewProp_TranslucentMultipleScatteringExtinction, TEXT("Category"), TEXT("TranslucencySelfShadowing"));
				MetaData->SetValue(NewProp_TranslucentMultipleScatteringExtinction, TEXT("DisplayName"), TEXT("Multiple Scattering Extinction"));
				MetaData->SetValue(NewProp_TranslucentMultipleScatteringExtinction, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_TranslucentMultipleScatteringExtinction, TEXT("ToolTip"), TEXT("Colored extinction factor used to approximate multiple scattering in dense volumes.\nThis is only used when the object is casting a volumetric translucent shadow."));
				MetaData->SetValue(NewProp_TranslucentBackscatteringExponent, TEXT("Category"), TEXT("TranslucencySelfShadowing"));
				MetaData->SetValue(NewProp_TranslucentBackscatteringExponent, TEXT("DisplayName"), TEXT("Backscattering Exponent"));
				MetaData->SetValue(NewProp_TranslucentBackscatteringExponent, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_TranslucentBackscatteringExponent, TEXT("ToolTip"), TEXT("Controls how diffuse the material's backscattering is when using the MSM_Subsurface shading model.\nLarger exponents give a less diffuse look (smaller, brighter backscattering highlight).\nThis is only used when the object is casting a volumetric translucent shadow from a directional light."));
				MetaData->SetValue(NewProp_TranslucentSelfShadowSecondOpacity, TEXT("Category"), TEXT("TranslucencySelfShadowing"));
				MetaData->SetValue(NewProp_TranslucentSelfShadowSecondOpacity, TEXT("DisplayName"), TEXT("Second Opacity"));
				MetaData->SetValue(NewProp_TranslucentSelfShadowSecondOpacity, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_TranslucentSelfShadowSecondOpacity, TEXT("ToolTip"), TEXT("Controls the strength of the second self shadow gradient."));
				MetaData->SetValue(NewProp_TranslucentSelfShadowSecondDensityScale, TEXT("Category"), TEXT("TranslucencySelfShadowing"));
				MetaData->SetValue(NewProp_TranslucentSelfShadowSecondDensityScale, TEXT("DisplayName"), TEXT("Second Density Scale"));
				MetaData->SetValue(NewProp_TranslucentSelfShadowSecondDensityScale, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_TranslucentSelfShadowSecondDensityScale, TEXT("ToolTip"), TEXT("Used to make a second self shadow gradient, to add interesting shading in the shadow of the first."));
				MetaData->SetValue(NewProp_TranslucentSelfShadowDensityScale, TEXT("Category"), TEXT("TranslucencySelfShadowing"));
				MetaData->SetValue(NewProp_TranslucentSelfShadowDensityScale, TEXT("DisplayName"), TEXT("Density Scale"));
				MetaData->SetValue(NewProp_TranslucentSelfShadowDensityScale, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_TranslucentSelfShadowDensityScale, TEXT("ToolTip"), TEXT("Scale used to make translucent self-shadowing more or less opaque than the material's shadow on other objects.\nThis is only used when the object is casting a volumetric translucent shadow."));
				MetaData->SetValue(NewProp_TranslucentShadowDensityScale, TEXT("Category"), TEXT("TranslucencySelfShadowing"));
				MetaData->SetValue(NewProp_TranslucentShadowDensityScale, TEXT("DisplayName"), TEXT("Density Scale"));
				MetaData->SetValue(NewProp_TranslucentShadowDensityScale, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_TranslucentShadowDensityScale, TEXT("ToolTip"), TEXT("Scale used to make translucent shadows more or less opaque than the material's actual opacity."));
				MetaData->SetValue(NewProp_TranslucencyDirectionalLightingIntensity, TEXT("Category"), TEXT("Translucency"));
				MetaData->SetValue(NewProp_TranslucencyDirectionalLightingIntensity, TEXT("DisplayName"), TEXT("Directional Lighting Intensity"));
				MetaData->SetValue(NewProp_TranslucencyDirectionalLightingIntensity, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_TranslucencyDirectionalLightingIntensity, TEXT("ToolTip"), TEXT("Useful for artificially increasing the influence of the normal on the lighting result for translucency.\nA value larger than 1 increases the influence of the normal, a value smaller than 1 makes the lighting more ambient."));
				MetaData->SetValue(NewProp_TranslucencyLightingMode, TEXT("Category"), TEXT("Translucency"));
				MetaData->SetValue(NewProp_TranslucencyLightingMode, TEXT("DisplayName"), TEXT("Lighting Mode"));
				MetaData->SetValue(NewProp_TranslucencyLightingMode, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_TranslucencyLightingMode, TEXT("ToolTip"), TEXT("Sets the lighting mode that will be used on this material if it is translucent."));
				MetaData->SetValue(NewProp_NumCustomizedUVs, TEXT("Category"), TEXT("Material"));
				MetaData->SetValue(NewProp_NumCustomizedUVs, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_NumCustomizedUVs, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_NumCustomizedUVs, TEXT("ToolTip"), TEXT("Number of customized UV inputs to display.  Unconnected customized UV inputs will just pass through the vertex UVs."));
				MetaData->SetValue(NewProp_DitheredLODTransition, TEXT("Category"), TEXT("Material"));
				MetaData->SetValue(NewProp_DitheredLODTransition, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_DitheredLODTransition, TEXT("ToolTip"), TEXT("Whether the material should support a dithered LOD transition when used with the foliage system."));
				MetaData->SetValue(NewProp_TwoSided, TEXT("Category"), TEXT("Material"));
				MetaData->SetValue(NewProp_TwoSided, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_TwoSided, TEXT("ToolTip"), TEXT("Indicates that the material should be rendered without backface culling and the normal should be flipped for backfaces."));
				MetaData->SetValue(NewProp_bScreenSpaceReflections, TEXT("Category"), TEXT("Translucency"));
				MetaData->SetValue(NewProp_bScreenSpaceReflections, TEXT("DisplayName"), TEXT("Screen Space Reflections"));
				MetaData->SetValue(NewProp_bScreenSpaceReflections, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bScreenSpaceReflections, TEXT("ToolTip"), TEXT("SSR on translucency"));
				MetaData->SetValue(NewProp_bEnableResponsiveAA, TEXT("Category"), TEXT("Translucency"));
				MetaData->SetValue(NewProp_bEnableResponsiveAA, TEXT("DisplayName"), TEXT("Responsive AA"));
				MetaData->SetValue(NewProp_bEnableResponsiveAA, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bEnableResponsiveAA, TEXT("ToolTip"), TEXT("Indicates that the material should be rendered using responsive anti-aliasing. Improves sharpness of small moving particles such as sparks.\nOnly use for small moving features because it will cause aliasing of the background."));
				MetaData->SetValue(NewProp_bEnableSeparateTranslucency, TEXT("Category"), TEXT("Translucency"));
				MetaData->SetValue(NewProp_bEnableSeparateTranslucency, TEXT("DisplayName"), TEXT("Separate Translucency"));
				MetaData->SetValue(NewProp_bEnableSeparateTranslucency, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bEnableSeparateTranslucency, TEXT("ToolTip"), TEXT("Indicates that the material should be rendered in the SeparateTranslucency Pass (not affected by DOF, requires bAllowSeparateTranslucency to be set in .ini)."));
				MetaData->SetValue(NewProp_PixelDepthOffset, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_MaterialAttributes, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_CustomizedUVs, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_CustomizedUVs, TEXT("ToolTip"), TEXT("These inputs are evaluated in the vertex shader and allow artists to do arbitrary vertex shader operations and access them in the pixel shader.\nWhen unconnected or hidden they default to passing through the vertex UVs."));
				MetaData->SetValue(NewProp_Refraction, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_Refraction, TEXT("ToolTip"), TEXT("output refraction index for translucent rendering\nAir:1.0 Water:1.333 Ice:1.3 Glass:~1.6 Diamond:2.42"));
				MetaData->SetValue(NewProp_AmbientOcclusion, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_AmbientOcclusion, TEXT("ToolTip"), TEXT("output ambient occlusion to the GBuffer"));
				MetaData->SetValue(NewProp_ClearCoatRoughness, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_ClearCoat, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_SubsurfaceColor, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_SubsurfaceColor, TEXT("ToolTip"), TEXT("Inner material color, only used for ShadingModel=Subsurface"));
				MetaData->SetValue(NewProp_TessellationMultiplier, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_TessellationMultiplier, TEXT("ToolTip"), TEXT("Multiplies the tessellation factors applied when a tessellation mode is set."));
				MetaData->SetValue(NewProp_WorldDisplacement, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_WorldDisplacement, TEXT("ToolTip"), TEXT("Offset in world space applied to tessellated vertices."));
				MetaData->SetValue(NewProp_WorldPositionOffset, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_WorldPositionOffset, TEXT("ToolTip"), TEXT("Adds to world position in the vertex shader."));
				MetaData->SetValue(NewProp_OpacityMaskClipValue, TEXT("Category"), TEXT("Material"));
				MetaData->SetValue(NewProp_OpacityMaskClipValue, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_OpacityMaskClipValue, TEXT("ToolTip"), TEXT("If BlendMode is BLEND_Masked, the surface is not rendered where OpacityMask < OpacityMaskClipValue."));
				MetaData->SetValue(NewProp_ShadingModel, TEXT("Category"), TEXT("Material"));
				MetaData->SetValue(NewProp_ShadingModel, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_ShadingModel, TEXT("ToolTip"), TEXT("Determines how inputs are combined to create the material's final color."));
				MetaData->SetValue(NewProp_MaterialDecalResponse, TEXT("Category"), TEXT("Material"));
				MetaData->SetValue(NewProp_MaterialDecalResponse, TEXT("DisplayName"), TEXT("Decal Response (DBuffer)"));
				MetaData->SetValue(NewProp_MaterialDecalResponse, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_MaterialDecalResponse, TEXT("ToolTip"), TEXT("Defines how the material reacts on DBuffer decals (Affects look, performance and texture/sample usage).\nNon DBuffer Decals can be disabled on the primitive (e.g. static mesh)"));
				MetaData->SetValue(NewProp_DecalBlendMode, TEXT("Category"), TEXT("Material"));
				MetaData->SetValue(NewProp_DecalBlendMode, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_DecalBlendMode, TEXT("ToolTip"), TEXT("Defines how the GBuffer chanels are getting manipulated by a decal material pass. (only with MaterialDomain == MD_DeferredDecal)"));
				MetaData->SetValue(NewProp_BlendMode, TEXT("Category"), TEXT("Material"));
				MetaData->SetValue(NewProp_BlendMode, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_BlendMode, TEXT("ToolTip"), TEXT("Determines how the material's color is blended with background colors."));
				MetaData->SetValue(NewProp_MaterialDomain, TEXT("Category"), TEXT("Material"));
				MetaData->SetValue(NewProp_MaterialDomain, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_MaterialDomain, TEXT("ToolTip"), TEXT("The domain that the material's attributes will be evaluated in.\nCertain pieces of material functionality are only valid in certain domains, for example vertex normal is only valid on a surface."));
				MetaData->SetValue(NewProp_OpacityMask, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_Opacity, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_Opacity, TEXT("ToolTip"), TEXT("Transmission."));
				MetaData->SetValue(NewProp_EmissiveColor, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_EmissiveColor, TEXT("ToolTip"), TEXT("Emission."));
				MetaData->SetValue(NewProp_Normal, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_Roughness, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_Specular, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_Metallic, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_BaseColor, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_SpecularColor, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_DiffuseColor, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_DiffuseColor, TEXT("ToolTip"), TEXT("Reflection."));
				MetaData->SetValue(NewProp_PhysMaterial, TEXT("Category"), TEXT("PhysicalMaterial"));
				MetaData->SetValue(NewProp_PhysMaterial, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_PhysMaterial, TEXT("ToolTip"), TEXT("Physical material to use for this graphics material. Used for sounds, effects etc."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterial(Z_Construct_UClass_UMaterial, TEXT("UMaterial"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterial);
	UScriptStruct* Z_Construct_UScriptStruct_FMaterialInstanceBasePropertyOverrides()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FMaterialInstanceBasePropertyOverrides_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("MaterialInstanceBasePropertyOverrides"), sizeof(FMaterialInstanceBasePropertyOverrides), Get_Z_Construct_UScriptStruct_FMaterialInstanceBasePropertyOverrides_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MaterialInstanceBasePropertyOverrides"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FMaterialInstanceBasePropertyOverrides>, EStructFlags(0x00000201));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(DitheredLODTransition, FMaterialInstanceBasePropertyOverrides, uint8);
			UProperty* NewProp_DitheredLODTransition = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DitheredLODTransition"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(DitheredLODTransition, FMaterialInstanceBasePropertyOverrides), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(DitheredLODTransition, FMaterialInstanceBasePropertyOverrides), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(TwoSided, FMaterialInstanceBasePropertyOverrides, uint8);
			UProperty* NewProp_TwoSided = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TwoSided"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(TwoSided, FMaterialInstanceBasePropertyOverrides), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(TwoSided, FMaterialInstanceBasePropertyOverrides), sizeof(uint8), false);
			UProperty* NewProp_ShadingModel = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ShadingModel"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(ShadingModel, FMaterialInstanceBasePropertyOverrides), 0x0000000000000001, Z_Construct_UEnum_Engine_EMaterialShadingModel());
			UProperty* NewProp_BlendMode = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BlendMode"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(BlendMode, FMaterialInstanceBasePropertyOverrides), 0x0000000000000001, Z_Construct_UEnum_Engine_EBlendMode());
			UProperty* NewProp_OpacityMaskClipValue = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("OpacityMaskClipValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(OpacityMaskClipValue, FMaterialInstanceBasePropertyOverrides), 0x0000000000000001);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverride_TwoSided, FMaterialInstanceBasePropertyOverrides, bool);
			UProperty* NewProp_bOverride_TwoSided = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bOverride_TwoSided"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverride_TwoSided, FMaterialInstanceBasePropertyOverrides), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bOverride_TwoSided, FMaterialInstanceBasePropertyOverrides), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverride_DitheredLODTransition, FMaterialInstanceBasePropertyOverrides, bool);
			UProperty* NewProp_bOverride_DitheredLODTransition = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bOverride_DitheredLODTransition"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverride_DitheredLODTransition, FMaterialInstanceBasePropertyOverrides), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bOverride_DitheredLODTransition, FMaterialInstanceBasePropertyOverrides), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverride_ShadingModel, FMaterialInstanceBasePropertyOverrides, bool);
			UProperty* NewProp_bOverride_ShadingModel = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bOverride_ShadingModel"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverride_ShadingModel, FMaterialInstanceBasePropertyOverrides), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bOverride_ShadingModel, FMaterialInstanceBasePropertyOverrides), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverride_BlendMode, FMaterialInstanceBasePropertyOverrides, bool);
			UProperty* NewProp_bOverride_BlendMode = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bOverride_BlendMode"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverride_BlendMode, FMaterialInstanceBasePropertyOverrides), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bOverride_BlendMode, FMaterialInstanceBasePropertyOverrides), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverride_OpacityMaskClipValue, FMaterialInstanceBasePropertyOverrides, bool);
			UProperty* NewProp_bOverride_OpacityMaskClipValue = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bOverride_OpacityMaskClipValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverride_OpacityMaskClipValue, FMaterialInstanceBasePropertyOverrides), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bOverride_OpacityMaskClipValue, FMaterialInstanceBasePropertyOverrides), sizeof(bool), true);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstanceBasePropertyOverrides.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Properties from the base material that can be overridden in material instances."));
			MetaData->SetValue(NewProp_DitheredLODTransition, TEXT("Category"), TEXT("Material"));
			MetaData->SetValue(NewProp_DitheredLODTransition, TEXT("editcondition"), TEXT("bOverride_DitheredLODTransition"));
			MetaData->SetValue(NewProp_DitheredLODTransition, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstanceBasePropertyOverrides.h"));
			MetaData->SetValue(NewProp_DitheredLODTransition, TEXT("ToolTip"), TEXT("Whether the material should support a dithered LOD transition when used with the foliage system."));
			MetaData->SetValue(NewProp_TwoSided, TEXT("Category"), TEXT("Material"));
			MetaData->SetValue(NewProp_TwoSided, TEXT("editcondition"), TEXT("bOverride_TwoSided"));
			MetaData->SetValue(NewProp_TwoSided, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstanceBasePropertyOverrides.h"));
			MetaData->SetValue(NewProp_TwoSided, TEXT("ToolTip"), TEXT("Indicates that the material should be rendered without backface culling and the normal should be flipped for backfaces."));
			MetaData->SetValue(NewProp_ShadingModel, TEXT("Category"), TEXT("Material"));
			MetaData->SetValue(NewProp_ShadingModel, TEXT("editcondition"), TEXT("bOverride_ShadingModel"));
			MetaData->SetValue(NewProp_ShadingModel, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstanceBasePropertyOverrides.h"));
			MetaData->SetValue(NewProp_ShadingModel, TEXT("ToolTip"), TEXT("The shading model"));
			MetaData->SetValue(NewProp_BlendMode, TEXT("Category"), TEXT("Material"));
			MetaData->SetValue(NewProp_BlendMode, TEXT("editcondition"), TEXT("bOverride_BlendMode"));
			MetaData->SetValue(NewProp_BlendMode, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstanceBasePropertyOverrides.h"));
			MetaData->SetValue(NewProp_BlendMode, TEXT("ToolTip"), TEXT("The blend mode"));
			MetaData->SetValue(NewProp_OpacityMaskClipValue, TEXT("Category"), TEXT("Material"));
			MetaData->SetValue(NewProp_OpacityMaskClipValue, TEXT("editcondition"), TEXT("bOverride_OpacityMaskClipValue"));
			MetaData->SetValue(NewProp_OpacityMaskClipValue, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstanceBasePropertyOverrides.h"));
			MetaData->SetValue(NewProp_OpacityMaskClipValue, TEXT("NoSpinbox"), TEXT("TRUE"));
			MetaData->SetValue(NewProp_OpacityMaskClipValue, TEXT("ToolTip"), TEXT("If BlendMode is BLEND_Masked, the surface is not rendered where OpacityMask < OpacityMaskClipValue."));
			MetaData->SetValue(NewProp_bOverride_TwoSided, TEXT("Category"), TEXT("Material"));
			MetaData->SetValue(NewProp_bOverride_TwoSided, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstanceBasePropertyOverrides.h"));
			MetaData->SetValue(NewProp_bOverride_TwoSided, TEXT("ToolTip"), TEXT("Enables override of the two sided property."));
			MetaData->SetValue(NewProp_bOverride_DitheredLODTransition, TEXT("Category"), TEXT("Material"));
			MetaData->SetValue(NewProp_bOverride_DitheredLODTransition, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstanceBasePropertyOverrides.h"));
			MetaData->SetValue(NewProp_bOverride_DitheredLODTransition, TEXT("ToolTip"), TEXT("Enables override of the two sided property."));
			MetaData->SetValue(NewProp_bOverride_ShadingModel, TEXT("Category"), TEXT("Material"));
			MetaData->SetValue(NewProp_bOverride_ShadingModel, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstanceBasePropertyOverrides.h"));
			MetaData->SetValue(NewProp_bOverride_ShadingModel, TEXT("ToolTip"), TEXT("Enables override of the shading model."));
			MetaData->SetValue(NewProp_bOverride_BlendMode, TEXT("Category"), TEXT("Material"));
			MetaData->SetValue(NewProp_bOverride_BlendMode, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstanceBasePropertyOverrides.h"));
			MetaData->SetValue(NewProp_bOverride_BlendMode, TEXT("ToolTip"), TEXT("Enables override of the blend mode."));
			MetaData->SetValue(NewProp_bOverride_OpacityMaskClipValue, TEXT("Category"), TEXT("Material"));
			MetaData->SetValue(NewProp_bOverride_OpacityMaskClipValue, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstanceBasePropertyOverrides.h"));
			MetaData->SetValue(NewProp_bOverride_OpacityMaskClipValue, TEXT("ToolTip"), TEXT("Enables override of the opacity mask clip value."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FMaterialInstanceBasePropertyOverrides_CRC() { return 1822922030U; }
	UScriptStruct* Z_Construct_UScriptStruct_FVectorParameterValue()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FVectorParameterValue_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("VectorParameterValue"), sizeof(FVectorParameterValue), Get_Z_Construct_UScriptStruct_FVectorParameterValue_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VectorParameterValue"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FVectorParameterValue>, EStructFlags(0x00000001));
			UProperty* NewProp_ExpressionGUID = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ExpressionGUID"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ExpressionGUID, FVectorParameterValue), 0x0000000000000000, Z_Construct_UScriptStruct_FGuid());
			UProperty* NewProp_ParameterValue = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ParameterValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ParameterValue, FVectorParameterValue), 0x0000000000000005, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_ParameterName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ParameterName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(ParameterName, FVectorParameterValue), 0x0000000000000005);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstance.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Editable vector parameter."));
			MetaData->SetValue(NewProp_ExpressionGUID, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstance.h"));
			MetaData->SetValue(NewProp_ParameterValue, TEXT("Category"), TEXT("VectorParameterValue"));
			MetaData->SetValue(NewProp_ParameterValue, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstance.h"));
			MetaData->SetValue(NewProp_ParameterName, TEXT("Category"), TEXT("VectorParameterValue"));
			MetaData->SetValue(NewProp_ParameterName, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstance.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FVectorParameterValue_CRC() { return 474876702U; }
	UScriptStruct* Z_Construct_UScriptStruct_FTextureParameterValue()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FTextureParameterValue_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("TextureParameterValue"), sizeof(FTextureParameterValue), Get_Z_Construct_UScriptStruct_FTextureParameterValue_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TextureParameterValue"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FTextureParameterValue>, EStructFlags(0x00000001));
			UProperty* NewProp_ExpressionGUID = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ExpressionGUID"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ExpressionGUID, FTextureParameterValue), 0x0000000000000000, Z_Construct_UScriptStruct_FGuid());
			UProperty* NewProp_ParameterValue = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ParameterValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ParameterValue, FTextureParameterValue), 0x0000000000000005, Z_Construct_UClass_UTexture_NoRegister());
			UProperty* NewProp_ParameterName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ParameterName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(ParameterName, FTextureParameterValue), 0x0000000000000005);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstance.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Editable texture parameter."));
			MetaData->SetValue(NewProp_ExpressionGUID, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstance.h"));
			MetaData->SetValue(NewProp_ParameterValue, TEXT("Category"), TEXT("TextureParameterValue"));
			MetaData->SetValue(NewProp_ParameterValue, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstance.h"));
			MetaData->SetValue(NewProp_ParameterName, TEXT("Category"), TEXT("TextureParameterValue"));
			MetaData->SetValue(NewProp_ParameterName, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstance.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FTextureParameterValue_CRC() { return 222164800U; }
	UScriptStruct* Z_Construct_UScriptStruct_FScalarParameterValue()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FScalarParameterValue_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("ScalarParameterValue"), sizeof(FScalarParameterValue), Get_Z_Construct_UScriptStruct_FScalarParameterValue_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ScalarParameterValue"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FScalarParameterValue>, EStructFlags(0x00000001));
			UProperty* NewProp_ExpressionGUID = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ExpressionGUID"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ExpressionGUID, FScalarParameterValue), 0x0000000000000000, Z_Construct_UScriptStruct_FGuid());
			UProperty* NewProp_ParameterValue = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ParameterValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ParameterValue, FScalarParameterValue), 0x0000000000000005);
			UProperty* NewProp_ParameterName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ParameterName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(ParameterName, FScalarParameterValue), 0x0000000000000005);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstance.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Editable scalar parameter."));
			MetaData->SetValue(NewProp_ExpressionGUID, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstance.h"));
			MetaData->SetValue(NewProp_ParameterValue, TEXT("Category"), TEXT("ScalarParameterValue"));
			MetaData->SetValue(NewProp_ParameterValue, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstance.h"));
			MetaData->SetValue(NewProp_ParameterName, TEXT("Category"), TEXT("ScalarParameterValue"));
			MetaData->SetValue(NewProp_ParameterName, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstance.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FScalarParameterValue_CRC() { return 2850934679U; }
	UScriptStruct* Z_Construct_UScriptStruct_FFontParameterValue()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FFontParameterValue_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("FontParameterValue"), sizeof(FFontParameterValue), Get_Z_Construct_UScriptStruct_FFontParameterValue_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FontParameterValue"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FFontParameterValue>, EStructFlags(0x00000001));
			UProperty* NewProp_ExpressionGUID = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ExpressionGUID"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ExpressionGUID, FFontParameterValue), 0x0000000000000000, Z_Construct_UScriptStruct_FGuid());
			UProperty* NewProp_FontPage = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("FontPage"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(FontPage, FFontParameterValue), 0x0000000000000005);
			UProperty* NewProp_FontValue = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("FontValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(FontValue, FFontParameterValue), 0x0000000000000005, Z_Construct_UClass_UFont_NoRegister());
			UProperty* NewProp_ParameterName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ParameterName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(ParameterName, FFontParameterValue), 0x0000000000000005);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstance.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Editable font parameter."));
			MetaData->SetValue(NewProp_ExpressionGUID, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstance.h"));
			MetaData->SetValue(NewProp_FontPage, TEXT("Category"), TEXT("FontParameterValue"));
			MetaData->SetValue(NewProp_FontPage, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstance.h"));
			MetaData->SetValue(NewProp_FontValue, TEXT("Category"), TEXT("FontParameterValue"));
			MetaData->SetValue(NewProp_FontValue, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstance.h"));
			MetaData->SetValue(NewProp_ParameterName, TEXT("Category"), TEXT("FontParameterValue"));
			MetaData->SetValue(NewProp_ParameterName, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstance.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FFontParameterValue_CRC() { return 3793323021U; }
	UClass* Z_Construct_UClass_UMaterialInstance_NoRegister()
	{
		return UMaterialInstance::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialInstance()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialInterface();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialInstance::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880081;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_ReferencedTextureGuids = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ReferencedTextureGuids"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ReferencedTextureGuids, UMaterialInstance), 0x0000000800000000);
				UProperty* NewProp_ReferencedTextureGuids_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ReferencedTextureGuids, TEXT("ReferencedTextureGuids"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000800000000, Z_Construct_UScriptStruct_FGuid());
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_BasePropertyOverrides = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BasePropertyOverrides"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(BasePropertyOverrides, UMaterialInstance), 0x0000000000000015, Z_Construct_UScriptStruct_FMaterialInstanceBasePropertyOverrides());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverrideBaseProperties_DEPRECATED, UMaterialInstance, bool);
				UProperty* NewProp_bOverrideBaseProperties = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bOverrideBaseProperties"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverrideBaseProperties_DEPRECATED, UMaterialInstance), 0x0000000020000000, CPP_BOOL_PROPERTY_BITMASK(bOverrideBaseProperties_DEPRECATED, UMaterialInstance), sizeof(bool), true);
				UProperty* NewProp_VectorParameterValues = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VectorParameterValues"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(VectorParameterValues, UMaterialInstance), 0x0000000000000015);
				UProperty* NewProp_VectorParameterValues_Inner = new(EC_InternalUseOnlyConstructor, NewProp_VectorParameterValues, TEXT("VectorParameterValues"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FVectorParameterValue());
				UProperty* NewProp_TextureParameterValues = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TextureParameterValues"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(TextureParameterValues, UMaterialInstance), 0x0000000000000015);
				UProperty* NewProp_TextureParameterValues_Inner = new(EC_InternalUseOnlyConstructor, NewProp_TextureParameterValues, TEXT("TextureParameterValues"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FTextureParameterValue());
				UProperty* NewProp_ScalarParameterValues = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ScalarParameterValues"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ScalarParameterValues, UMaterialInstance), 0x0000000000000015);
				UProperty* NewProp_ScalarParameterValues_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ScalarParameterValues, TEXT("ScalarParameterValues"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FScalarParameterValue());
				UProperty* NewProp_FontParameterValues = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FontParameterValues"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(FontParameterValues, UMaterialInstance), 0x0000000000000015);
				UProperty* NewProp_FontParameterValues_Inner = new(EC_InternalUseOnlyConstructor, NewProp_FontParameterValues, TEXT("FontParameterValues"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FFontParameterValue());
				UProperty* NewProp_ParentLightingGuid = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ParentLightingGuid"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ParentLightingGuid, UMaterialInstance), 0x0000000000000000, Z_Construct_UScriptStruct_FGuid());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverrideSubsurfaceProfile, UMaterialInstance, uint8);
				UProperty* NewProp_bOverrideSubsurfaceProfile = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bOverrideSubsurfaceProfile"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverrideSubsurfaceProfile, UMaterialInstance), 0x0000000000000015, CPP_BOOL_PROPERTY_BITMASK(bOverrideSubsurfaceProfile, UMaterialInstance), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bHasStaticPermutationResource, UMaterialInstance, uint8);
				UProperty* NewProp_bHasStaticPermutationResource = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bHasStaticPermutationResource"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bHasStaticPermutationResource, UMaterialInstance), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bHasStaticPermutationResource, UMaterialInstance), sizeof(uint8), false);
				UProperty* NewProp_Parent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Parent"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Parent, UMaterialInstance), 0x0000010000000015, Z_Construct_UClass_UMaterialInterface_NoRegister());
				UProperty* NewProp_PhysMaterial = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PhysMaterial"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(PhysMaterial, UMaterialInstance), 0x0000000000000005, Z_Construct_UClass_UPhysicalMaterial_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialInstance.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstance.h"));
				MetaData->SetValue(NewProp_ReferencedTextureGuids, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstance.h"));
				MetaData->SetValue(NewProp_BasePropertyOverrides, TEXT("Category"), TEXT("MaterialInstance"));
				MetaData->SetValue(NewProp_BasePropertyOverrides, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstance.h"));
				MetaData->SetValue(NewProp_bOverrideBaseProperties, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstance.h"));
				MetaData->SetValue(NewProp_VectorParameterValues, TEXT("Category"), TEXT("MaterialInstance"));
				MetaData->SetValue(NewProp_VectorParameterValues, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstance.h"));
				MetaData->SetValue(NewProp_VectorParameterValues, TEXT("ToolTip"), TEXT("Vector parameters."));
				MetaData->SetValue(NewProp_TextureParameterValues, TEXT("Category"), TEXT("MaterialInstance"));
				MetaData->SetValue(NewProp_TextureParameterValues, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstance.h"));
				MetaData->SetValue(NewProp_TextureParameterValues, TEXT("ToolTip"), TEXT("Texture parameters."));
				MetaData->SetValue(NewProp_ScalarParameterValues, TEXT("Category"), TEXT("MaterialInstance"));
				MetaData->SetValue(NewProp_ScalarParameterValues, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstance.h"));
				MetaData->SetValue(NewProp_ScalarParameterValues, TEXT("ToolTip"), TEXT("Scalar parameters."));
				MetaData->SetValue(NewProp_FontParameterValues, TEXT("Category"), TEXT("MaterialInstance"));
				MetaData->SetValue(NewProp_FontParameterValues, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstance.h"));
				MetaData->SetValue(NewProp_FontParameterValues, TEXT("ToolTip"), TEXT("Font parameters."));
				MetaData->SetValue(NewProp_ParentLightingGuid, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstance.h"));
				MetaData->SetValue(NewProp_ParentLightingGuid, TEXT("ToolTip"), TEXT("Unique ID for this material, used for caching during distributed lighting"));
				MetaData->SetValue(NewProp_bOverrideSubsurfaceProfile, TEXT("Category"), TEXT("MaterialInstance"));
				MetaData->SetValue(NewProp_bOverrideSubsurfaceProfile, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstance.h"));
				MetaData->SetValue(NewProp_bOverrideSubsurfaceProfile, TEXT("ToolTip"), TEXT("Defines if SubsurfaceProfile from this instance is used or it uses the parent one."));
				MetaData->SetValue(NewProp_bHasStaticPermutationResource, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstance.h"));
				MetaData->SetValue(NewProp_bHasStaticPermutationResource, TEXT("ToolTip"), TEXT("Indicates whether the instance has static permutation resources (which are required when static parameters are present)\nRead directly from the rendering thread, can only be modified with the use of a FMaterialUpdateContext.\nWhen true, StaticPermutationMaterialResources will always be valid and non-null."));
				MetaData->SetValue(NewProp_Parent, TEXT("Category"), TEXT("MaterialInstance"));
				MetaData->SetValue(NewProp_Parent, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstance.h"));
				MetaData->SetValue(NewProp_Parent, TEXT("ToolTip"), TEXT("Parent material."));
				MetaData->SetValue(NewProp_PhysMaterial, TEXT("Category"), TEXT("MaterialInstance"));
				MetaData->SetValue(NewProp_PhysMaterial, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstance.h"));
				MetaData->SetValue(NewProp_PhysMaterial, TEXT("ToolTip"), TEXT("Physical material to use for this graphics material. Used for sounds, effects etc."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialInstance(Z_Construct_UClass_UMaterialInstance, TEXT("UMaterialInstance"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialInstance);
	UClass* Z_Construct_UClass_UMaterialInstanceConstant_NoRegister()
	{
		return UMaterialInstanceConstant::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialInstanceConstant()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialInstance();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialInstanceConstant::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20882080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialInstanceConstant.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstanceConstant.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Material Instances may be used to change the appearance of a material without incurring an expensive recompilation of the material.\nGeneral modification of the material cannot be supported without recompilation, so the instances are limited to changing the values of\npredefined material parameters. The parameters are statically defined in the compiled material by a unique name, type and default value."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialInstanceConstant(Z_Construct_UClass_UMaterialInstanceConstant, TEXT("UMaterialInstanceConstant"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialInstanceConstant);
	UFunction* Z_Construct_UFunction_UMaterialInstanceDynamic_CopyParameterOverrides()
	{
		struct MaterialInstanceDynamic_eventCopyParameterOverrides_Parms
		{
			UMaterialInstance* MaterialInstance;
		};
		UObject* Outer=Z_Construct_UClass_UMaterialInstanceDynamic();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CopyParameterOverrides"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020403, 65535, sizeof(MaterialInstanceDynamic_eventCopyParameterOverrides_Parms));
			UProperty* NewProp_MaterialInstance = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MaterialInstance"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(MaterialInstance, MaterialInstanceDynamic_eventCopyParameterOverrides_Parms), 0x0000000000000080, Z_Construct_UClass_UMaterialInstance_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Rendering|Material"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("CopyParameterOverrides"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstanceDynamic.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Copy parameter values from another material instance. This will copy only\nparameters explicitly overridden in that material instance!!"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UMaterialInstanceDynamic_K2_CopyMaterialInstanceParameters()
	{
		struct MaterialInstanceDynamic_eventK2_CopyMaterialInstanceParameters_Parms
		{
			UMaterialInterface* SourceMaterialToCopyFrom;
		};
		UObject* Outer=Z_Construct_UClass_UMaterialInstanceDynamic();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_CopyMaterialInstanceParameters"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(MaterialInstanceDynamic_eventK2_CopyMaterialInstanceParameters_Parms));
			UProperty* NewProp_SourceMaterialToCopyFrom = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SourceMaterialToCopyFrom"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(SourceMaterialToCopyFrom, MaterialInstanceDynamic_eventK2_CopyMaterialInstanceParameters_Parms), 0x0000000000000080, Z_Construct_UClass_UMaterialInterface_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Rendering|Material"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("CopyMaterialInstanceParameters"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstanceDynamic.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Copies over parameters given a material interface"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UMaterialInstanceDynamic_K2_GetScalarParameterValue()
	{
		struct MaterialInstanceDynamic_eventK2_GetScalarParameterValue_Parms
		{
			FName ParameterName;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UMaterialInstanceDynamic();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_GetScalarParameterValue"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(MaterialInstanceDynamic_eventK2_GetScalarParameterValue_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, MaterialInstanceDynamic_eventK2_GetScalarParameterValue_Parms), 0x0000000000000580);
			UProperty* NewProp_ParameterName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ParameterName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(ParameterName, MaterialInstanceDynamic_eventK2_GetScalarParameterValue_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Rendering|Material"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("GetScalarParameterValue"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("GetFloatParameterValue"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstanceDynamic.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get the current scalar (float) parameter value from an MID"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UMaterialInstanceDynamic_K2_GetTextureParameterValue()
	{
		struct MaterialInstanceDynamic_eventK2_GetTextureParameterValue_Parms
		{
			FName ParameterName;
			UTexture* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UMaterialInstanceDynamic();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_GetTextureParameterValue"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(MaterialInstanceDynamic_eventK2_GetTextureParameterValue_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, MaterialInstanceDynamic_eventK2_GetTextureParameterValue_Parms), 0x0000000000000580, Z_Construct_UClass_UTexture_NoRegister());
			UProperty* NewProp_ParameterName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ParameterName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(ParameterName, MaterialInstanceDynamic_eventK2_GetTextureParameterValue_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Rendering|Material"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("GetTextureParameterValue"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstanceDynamic.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get the current MID texture parameter value"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UMaterialInstanceDynamic_K2_GetVectorParameterValue()
	{
		struct MaterialInstanceDynamic_eventK2_GetVectorParameterValue_Parms
		{
			FName ParameterName;
			FLinearColor ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UMaterialInstanceDynamic();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_GetVectorParameterValue"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(MaterialInstanceDynamic_eventK2_GetVectorParameterValue_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, MaterialInstanceDynamic_eventK2_GetVectorParameterValue_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_ParameterName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ParameterName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(ParameterName, MaterialInstanceDynamic_eventK2_GetVectorParameterValue_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Rendering|Material"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("GetVectorParameterValue"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("GetColorParameterValue"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstanceDynamic.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get the current MID vector parameter value"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UMaterialInstanceDynamic_K2_InterpolateMaterialInstanceParams()
	{
		struct MaterialInstanceDynamic_eventK2_InterpolateMaterialInstanceParams_Parms
		{
			UMaterialInstance* MaterialA;
			UMaterialInstance* MaterialB;
			float Alpha;
		};
		UObject* Outer=Z_Construct_UClass_UMaterialInstanceDynamic();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_InterpolateMaterialInstanceParams"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(MaterialInstanceDynamic_eventK2_InterpolateMaterialInstanceParams_Parms));
			UProperty* NewProp_Alpha = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Alpha"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Alpha, MaterialInstanceDynamic_eventK2_InterpolateMaterialInstanceParams_Parms), 0x0000000000000080);
			UProperty* NewProp_MaterialB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MaterialB"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(MaterialB, MaterialInstanceDynamic_eventK2_InterpolateMaterialInstanceParams_Parms), 0x0000000000000080, Z_Construct_UClass_UMaterialInstance_NoRegister());
			UProperty* NewProp_MaterialA = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MaterialA"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(MaterialA, MaterialInstanceDynamic_eventK2_InterpolateMaterialInstanceParams_Parms), 0x0000000000000080, Z_Construct_UClass_UMaterialInstance_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Rendering|Material"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("InterpolateMaterialInstanceParameters"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstanceDynamic.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Interpolates the scalar and vector parameters of this material instance based on two other material instances, and an alpha blending factor"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UMaterialInstanceDynamic_SetScalarParameterValue()
	{
		struct MaterialInstanceDynamic_eventSetScalarParameterValue_Parms
		{
			FName ParameterName;
			float Value;
		};
		UObject* Outer=Z_Construct_UClass_UMaterialInstanceDynamic();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetScalarParameterValue"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020403, 65535, sizeof(MaterialInstanceDynamic_eventSetScalarParameterValue_Parms));
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Value, MaterialInstanceDynamic_eventSetScalarParameterValue_Parms), 0x0000000000000080);
			UProperty* NewProp_ParameterName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ParameterName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(ParameterName, MaterialInstanceDynamic_eventSetScalarParameterValue_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Rendering|Material"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("SetFloatParameterValue"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstanceDynamic.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set a MID scalar (float) parameter value"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UMaterialInstanceDynamic_SetTextureParameterValue()
	{
		struct MaterialInstanceDynamic_eventSetTextureParameterValue_Parms
		{
			FName ParameterName;
			UTexture* Value;
		};
		UObject* Outer=Z_Construct_UClass_UMaterialInstanceDynamic();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetTextureParameterValue"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020403, 65535, sizeof(MaterialInstanceDynamic_eventSetTextureParameterValue_Parms));
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Value, MaterialInstanceDynamic_eventSetTextureParameterValue_Parms), 0x0000000000000080, Z_Construct_UClass_UTexture_NoRegister());
			UProperty* NewProp_ParameterName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ParameterName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(ParameterName, MaterialInstanceDynamic_eventSetTextureParameterValue_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Rendering|Material"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstanceDynamic.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set an MID texture parameter value"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UMaterialInstanceDynamic_SetVectorParameterValue()
	{
		struct MaterialInstanceDynamic_eventSetVectorParameterValue_Parms
		{
			FName ParameterName;
			FLinearColor Value;
		};
		UObject* Outer=Z_Construct_UClass_UMaterialInstanceDynamic();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetVectorParameterValue"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04820403, 65535, sizeof(MaterialInstanceDynamic_eventSetVectorParameterValue_Parms));
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Value, MaterialInstanceDynamic_eventSetVectorParameterValue_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_ParameterName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ParameterName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(ParameterName, MaterialInstanceDynamic_eventSetVectorParameterValue_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Rendering|Material"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("SetColorParameterValue"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstanceDynamic.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set an MID vector parameter value"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UMaterialInstanceDynamic_NoRegister()
	{
		return UMaterialInstanceDynamic::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialInstanceDynamic()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialInstance();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialInstanceDynamic::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20882080;

				OuterClass->LinkChild(Z_Construct_UFunction_UMaterialInstanceDynamic_CopyParameterOverrides());
				OuterClass->LinkChild(Z_Construct_UFunction_UMaterialInstanceDynamic_K2_CopyMaterialInstanceParameters());
				OuterClass->LinkChild(Z_Construct_UFunction_UMaterialInstanceDynamic_K2_GetScalarParameterValue());
				OuterClass->LinkChild(Z_Construct_UFunction_UMaterialInstanceDynamic_K2_GetTextureParameterValue());
				OuterClass->LinkChild(Z_Construct_UFunction_UMaterialInstanceDynamic_K2_GetVectorParameterValue());
				OuterClass->LinkChild(Z_Construct_UFunction_UMaterialInstanceDynamic_K2_InterpolateMaterialInstanceParams());
				OuterClass->LinkChild(Z_Construct_UFunction_UMaterialInstanceDynamic_SetScalarParameterValue());
				OuterClass->LinkChild(Z_Construct_UFunction_UMaterialInstanceDynamic_SetTextureParameterValue());
				OuterClass->LinkChild(Z_Construct_UFunction_UMaterialInstanceDynamic_SetVectorParameterValue());

				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UMaterialInstanceDynamic_CopyParameterOverrides()); // 2309674232
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UMaterialInstanceDynamic_K2_CopyMaterialInstanceParameters()); // 2977412972
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UMaterialInstanceDynamic_K2_GetScalarParameterValue()); // 706846684
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UMaterialInstanceDynamic_K2_GetTextureParameterValue()); // 1749675983
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UMaterialInstanceDynamic_K2_GetVectorParameterValue()); // 3092011343
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UMaterialInstanceDynamic_K2_InterpolateMaterialInstanceParams()); // 422937210
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UMaterialInstanceDynamic_SetScalarParameterValue()); // 1401883331
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UMaterialInstanceDynamic_SetTextureParameterValue()); // 267785331
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UMaterialInstanceDynamic_SetVectorParameterValue()); // 4198259286
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialInstanceDynamic.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstanceDynamic.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialInstanceDynamic(Z_Construct_UClass_UMaterialInstanceDynamic, TEXT("UMaterialInstanceDynamic"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialInstanceDynamic);
	UScriptStruct* Z_Construct_UScriptStruct_FCollectionVectorParameter()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FCollectionVectorParameter_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("CollectionVectorParameter"), sizeof(FCollectionVectorParameter), Get_Z_Construct_UScriptStruct_FCollectionVectorParameter_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CollectionVectorParameter"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FCollectionParameterBase(), new UScriptStruct::TCppStructOps<FCollectionVectorParameter>, EStructFlags(0x00000001));
			UProperty* NewProp_DefaultValue = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DefaultValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DefaultValue, FCollectionVectorParameter), 0x0000000000000001, Z_Construct_UScriptStruct_FLinearColor());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialParameterCollection.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("A vector parameter"));
			MetaData->SetValue(NewProp_DefaultValue, TEXT("Category"), TEXT("Parameter"));
			MetaData->SetValue(NewProp_DefaultValue, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialParameterCollection.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FCollectionVectorParameter_CRC() { return 187564875U; }
	UScriptStruct* Z_Construct_UScriptStruct_FCollectionScalarParameter()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FCollectionScalarParameter_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("CollectionScalarParameter"), sizeof(FCollectionScalarParameter), Get_Z_Construct_UScriptStruct_FCollectionScalarParameter_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CollectionScalarParameter"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FCollectionParameterBase(), new UScriptStruct::TCppStructOps<FCollectionScalarParameter>, EStructFlags(0x00000001));
			UProperty* NewProp_DefaultValue = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DefaultValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DefaultValue, FCollectionScalarParameter), 0x0000000000000001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialParameterCollection.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("A scalar parameter"));
			MetaData->SetValue(NewProp_DefaultValue, TEXT("Category"), TEXT("Parameter"));
			MetaData->SetValue(NewProp_DefaultValue, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialParameterCollection.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FCollectionScalarParameter_CRC() { return 1191959867U; }
	UScriptStruct* Z_Construct_UScriptStruct_FCollectionParameterBase()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FCollectionParameterBase_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("CollectionParameterBase"), sizeof(FCollectionParameterBase), Get_Z_Construct_UScriptStruct_FCollectionParameterBase_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CollectionParameterBase"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FCollectionParameterBase>, EStructFlags(0x00000001));
			UProperty* NewProp_Id = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Id"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Id, FCollectionParameterBase), 0x0000000000000000, Z_Construct_UScriptStruct_FGuid());
			UProperty* NewProp_ParameterName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ParameterName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(ParameterName, FCollectionParameterBase), 0x0000000000000001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialParameterCollection.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Base struct for collection parameters"));
			MetaData->SetValue(NewProp_Id, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialParameterCollection.h"));
			MetaData->SetValue(NewProp_Id, TEXT("ToolTip"), TEXT("Uniquely identifies the parameter, used for fixing up materials that reference this parameter when renaming."));
			MetaData->SetValue(NewProp_ParameterName, TEXT("Category"), TEXT("Parameter"));
			MetaData->SetValue(NewProp_ParameterName, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialParameterCollection.h"));
			MetaData->SetValue(NewProp_ParameterName, TEXT("ToolTip"), TEXT("The name of the parameter.  Changing this name will break any blueprints that reference the parameter."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FCollectionParameterBase_CRC() { return 4234812101U; }
	UClass* Z_Construct_UClass_UMaterialParameterCollection_NoRegister()
	{
		return UMaterialParameterCollection::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialParameterCollection()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialParameterCollection::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_VectorParameters = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VectorParameters"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(VectorParameters, UMaterialParameterCollection), 0x0000000000000001);
				UProperty* NewProp_VectorParameters_Inner = new(EC_InternalUseOnlyConstructor, NewProp_VectorParameters, TEXT("VectorParameters"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FCollectionVectorParameter());
				UProperty* NewProp_ScalarParameters = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ScalarParameters"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ScalarParameters, UMaterialParameterCollection), 0x0000000000000001);
				UProperty* NewProp_ScalarParameters_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ScalarParameters, TEXT("ScalarParameters"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FCollectionScalarParameter());
				UProperty* NewProp_StateId = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StateId"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(StateId, UMaterialParameterCollection), 0x0000000000200000, Z_Construct_UScriptStruct_FGuid());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialParameterCollection.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialParameterCollection.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Asset class that contains a list of parameter names and their default values.\nAny number of materials can reference these parameters and get new values when the parameter values are changed."));
				MetaData->SetValue(NewProp_VectorParameters, TEXT("Category"), TEXT("Material"));
				MetaData->SetValue(NewProp_VectorParameters, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialParameterCollection.h"));
				MetaData->SetValue(NewProp_ScalarParameters, TEXT("Category"), TEXT("Material"));
				MetaData->SetValue(NewProp_ScalarParameters, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialParameterCollection.h"));
				MetaData->SetValue(NewProp_StateId, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialParameterCollection.h"));
				MetaData->SetValue(NewProp_StateId, TEXT("ToolTip"), TEXT("Used by materials using this collection to know when to recompile."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialParameterCollection(Z_Construct_UClass_UMaterialParameterCollection, TEXT("UMaterialParameterCollection"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialParameterCollection);
	UClass* Z_Construct_UClass_UMaterialParameterCollectionInstance_NoRegister()
	{
		return UMaterialParameterCollectionInstance::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialParameterCollectionInstance()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UMaterialParameterCollectionInstance::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_World = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("World"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(World, UMaterialParameterCollectionInstance), 0x0000080000000000, Z_Construct_UClass_UWorld_NoRegister());
				UProperty* NewProp_Collection = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Collection"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Collection, UMaterialParameterCollectionInstance), 0x0000080000000000, Z_Construct_UClass_UMaterialParameterCollection_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialParameterCollectionInstance.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialParameterCollectionInstance.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Class that stores per-world instance parameter data for a given UMaterialParameterCollection resource.\nInstances of this class are always transient."));
				MetaData->SetValue(NewProp_World, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialParameterCollectionInstance.h"));
				MetaData->SetValue(NewProp_World, TEXT("ToolTip"), TEXT("World that owns this instance."));
				MetaData->SetValue(NewProp_Collection, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialParameterCollectionInstance.h"));
				MetaData->SetValue(NewProp_Collection, TEXT("ToolTip"), TEXT("Collection resource this instance is based off of."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialParameterCollectionInstance(Z_Construct_UClass_UMaterialParameterCollectionInstance, TEXT("UMaterialParameterCollectionInstance"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialParameterCollectionInstance);
	UClass* Z_Construct_UClass_UMatineeInterface_NoRegister()
	{
		return UMatineeInterface::StaticClass();
	}
	UClass* Z_Construct_UClass_UMatineeInterface()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			UInterface::StaticClass();
			Z_Construct_UPackage_Engine();
			OuterClass = UMatineeInterface::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20004081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("CannotImplementInterfaceInBlueprint"), TEXT(""));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMatineeInterface(Z_Construct_UClass_UMatineeInterface, TEXT("UMatineeInterface"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMatineeInterface);
	UClass* Z_Construct_UClass_UNavArea_Default_NoRegister()
	{
		return UNavArea_Default::StaticClass();
	}
	UClass* Z_Construct_UClass_UNavArea_Default()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UNavArea();
			Z_Construct_UPackage_Engine();
			OuterClass = UNavArea_Default::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20300084;


				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("AI/Navigation/NavAreas/NavArea_Default.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavAreas/NavArea_Default.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Regular navigation area, applied to entire navigation data by default"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UNavArea_Default(Z_Construct_UClass_UNavArea_Default, TEXT("UNavArea_Default"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UNavArea_Default);
	UClass* Z_Construct_UClass_UNavArea_LowHeight_NoRegister()
	{
		return UNavArea_LowHeight::StaticClass();
	}
	UClass* Z_Construct_UClass_UNavArea_LowHeight()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UNavArea();
			Z_Construct_UPackage_Engine();
			OuterClass = UNavArea_LowHeight::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20300084;


				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("AI/Navigation/NavAreas/NavArea_LowHeight.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavAreas/NavArea_LowHeight.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Special area that can be generated in spaces with insufficient free height above. Cannot be traversed by anyone."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UNavArea_LowHeight(Z_Construct_UClass_UNavArea_LowHeight, TEXT("UNavArea_LowHeight"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UNavArea_LowHeight);
	UClass* Z_Construct_UClass_UNavArea_Null_NoRegister()
	{
		return UNavArea_Null::StaticClass();
	}
	UClass* Z_Construct_UClass_UNavArea_Null()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UNavArea();
			Z_Construct_UPackage_Engine();
			OuterClass = UNavArea_Null::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20300084;


				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("AI/Navigation/NavAreas/NavArea_Null.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavAreas/NavArea_Null.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("In general represents an empty area, that cannot be traversed by anyone. Ever."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UNavArea_Null(Z_Construct_UClass_UNavArea_Null, TEXT("UNavArea_Null"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UNavArea_Null);
	UClass* Z_Construct_UClass_UNavArea_Obstacle_NoRegister()
	{
		return UNavArea_Obstacle::StaticClass();
	}
	UClass* Z_Construct_UClass_UNavArea_Obstacle()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UNavArea();
			Z_Construct_UPackage_Engine();
			OuterClass = UNavArea_Obstacle::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20300084;


				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("AI/Navigation/NavAreas/NavArea_Obstacle.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavAreas/NavArea_Obstacle.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("In general represents a high cost area, that shouldn't be traversed by anyone unless no other path exist."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UNavArea_Obstacle(Z_Construct_UClass_UNavArea_Obstacle, TEXT("UNavArea_Obstacle"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UNavArea_Obstacle);
	UClass* Z_Construct_UClass_UNavAreaMeta_NoRegister()
	{
		return UNavAreaMeta::StaticClass();
	}
	UClass* Z_Construct_UClass_UNavAreaMeta()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UNavArea();
			Z_Construct_UPackage_Engine();
			OuterClass = UNavAreaMeta::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20300085;


				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("AI/Navigation/NavAreas/NavAreaMeta.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavAreas/NavAreaMeta.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Class containing definition of a navigation area"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UNavAreaMeta(Z_Construct_UClass_UNavAreaMeta, TEXT("UNavAreaMeta"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UNavAreaMeta);
	UClass* Z_Construct_UClass_UNavAreaMeta_SwitchByAgent_NoRegister()
	{
		return UNavAreaMeta_SwitchByAgent::StaticClass();
	}
	UClass* Z_Construct_UClass_UNavAreaMeta_SwitchByAgent()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UNavAreaMeta();
			Z_Construct_UPackage_Engine();
			OuterClass = UNavAreaMeta_SwitchByAgent::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20300085;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Agent15Area = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Agent15Area"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(Agent15Area, UNavAreaMeta_SwitchByAgent), 0x0004000000000001, Z_Construct_UClass_UNavArea_NoRegister());
				UProperty* NewProp_Agent14Area = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Agent14Area"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(Agent14Area, UNavAreaMeta_SwitchByAgent), 0x0004000000000001, Z_Construct_UClass_UNavArea_NoRegister());
				UProperty* NewProp_Agent13Area = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Agent13Area"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(Agent13Area, UNavAreaMeta_SwitchByAgent), 0x0004000000000001, Z_Construct_UClass_UNavArea_NoRegister());
				UProperty* NewProp_Agent12Area = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Agent12Area"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(Agent12Area, UNavAreaMeta_SwitchByAgent), 0x0004000000000001, Z_Construct_UClass_UNavArea_NoRegister());
				UProperty* NewProp_Agent11Area = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Agent11Area"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(Agent11Area, UNavAreaMeta_SwitchByAgent), 0x0004000000000001, Z_Construct_UClass_UNavArea_NoRegister());
				UProperty* NewProp_Agent10Area = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Agent10Area"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(Agent10Area, UNavAreaMeta_SwitchByAgent), 0x0004000000000001, Z_Construct_UClass_UNavArea_NoRegister());
				UProperty* NewProp_Agent9Area = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Agent9Area"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(Agent9Area, UNavAreaMeta_SwitchByAgent), 0x0004000000000001, Z_Construct_UClass_UNavArea_NoRegister());
				UProperty* NewProp_Agent8Area = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Agent8Area"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(Agent8Area, UNavAreaMeta_SwitchByAgent), 0x0004000000000001, Z_Construct_UClass_UNavArea_NoRegister());
				UProperty* NewProp_Agent7Area = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Agent7Area"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(Agent7Area, UNavAreaMeta_SwitchByAgent), 0x0004000000000001, Z_Construct_UClass_UNavArea_NoRegister());
				UProperty* NewProp_Agent6Area = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Agent6Area"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(Agent6Area, UNavAreaMeta_SwitchByAgent), 0x0004000000000001, Z_Construct_UClass_UNavArea_NoRegister());
				UProperty* NewProp_Agent5Area = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Agent5Area"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(Agent5Area, UNavAreaMeta_SwitchByAgent), 0x0004000000000001, Z_Construct_UClass_UNavArea_NoRegister());
				UProperty* NewProp_Agent4Area = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Agent4Area"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(Agent4Area, UNavAreaMeta_SwitchByAgent), 0x0004000000000001, Z_Construct_UClass_UNavArea_NoRegister());
				UProperty* NewProp_Agent3Area = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Agent3Area"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(Agent3Area, UNavAreaMeta_SwitchByAgent), 0x0004000000000001, Z_Construct_UClass_UNavArea_NoRegister());
				UProperty* NewProp_Agent2Area = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Agent2Area"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(Agent2Area, UNavAreaMeta_SwitchByAgent), 0x0004000000000001, Z_Construct_UClass_UNavArea_NoRegister());
				UProperty* NewProp_Agent1Area = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Agent1Area"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(Agent1Area, UNavAreaMeta_SwitchByAgent), 0x0004000000000001, Z_Construct_UClass_UNavArea_NoRegister());
				UProperty* NewProp_Agent0Area = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Agent0Area"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(Agent0Area, UNavAreaMeta_SwitchByAgent), 0x0004000000000001, Z_Construct_UClass_UNavArea_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("AI/Navigation/NavAreas/NavAreaMeta_SwitchByAgent.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavAreas/NavAreaMeta_SwitchByAgent.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Class containing definition of a navigation area"));
				MetaData->SetValue(NewProp_Agent15Area, TEXT("Category"), TEXT("AgentTypes"));
				MetaData->SetValue(NewProp_Agent15Area, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavAreas/NavAreaMeta_SwitchByAgent.h"));
				MetaData->SetValue(NewProp_Agent14Area, TEXT("Category"), TEXT("AgentTypes"));
				MetaData->SetValue(NewProp_Agent14Area, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavAreas/NavAreaMeta_SwitchByAgent.h"));
				MetaData->SetValue(NewProp_Agent13Area, TEXT("Category"), TEXT("AgentTypes"));
				MetaData->SetValue(NewProp_Agent13Area, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavAreas/NavAreaMeta_SwitchByAgent.h"));
				MetaData->SetValue(NewProp_Agent12Area, TEXT("Category"), TEXT("AgentTypes"));
				MetaData->SetValue(NewProp_Agent12Area, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavAreas/NavAreaMeta_SwitchByAgent.h"));
				MetaData->SetValue(NewProp_Agent11Area, TEXT("Category"), TEXT("AgentTypes"));
				MetaData->SetValue(NewProp_Agent11Area, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavAreas/NavAreaMeta_SwitchByAgent.h"));
				MetaData->SetValue(NewProp_Agent10Area, TEXT("Category"), TEXT("AgentTypes"));
				MetaData->SetValue(NewProp_Agent10Area, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavAreas/NavAreaMeta_SwitchByAgent.h"));
				MetaData->SetValue(NewProp_Agent9Area, TEXT("Category"), TEXT("AgentTypes"));
				MetaData->SetValue(NewProp_Agent9Area, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavAreas/NavAreaMeta_SwitchByAgent.h"));
				MetaData->SetValue(NewProp_Agent8Area, TEXT("Category"), TEXT("AgentTypes"));
				MetaData->SetValue(NewProp_Agent8Area, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavAreas/NavAreaMeta_SwitchByAgent.h"));
				MetaData->SetValue(NewProp_Agent7Area, TEXT("Category"), TEXT("AgentTypes"));
				MetaData->SetValue(NewProp_Agent7Area, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavAreas/NavAreaMeta_SwitchByAgent.h"));
				MetaData->SetValue(NewProp_Agent6Area, TEXT("Category"), TEXT("AgentTypes"));
				MetaData->SetValue(NewProp_Agent6Area, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavAreas/NavAreaMeta_SwitchByAgent.h"));
				MetaData->SetValue(NewProp_Agent5Area, TEXT("Category"), TEXT("AgentTypes"));
				MetaData->SetValue(NewProp_Agent5Area, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavAreas/NavAreaMeta_SwitchByAgent.h"));
				MetaData->SetValue(NewProp_Agent4Area, TEXT("Category"), TEXT("AgentTypes"));
				MetaData->SetValue(NewProp_Agent4Area, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavAreas/NavAreaMeta_SwitchByAgent.h"));
				MetaData->SetValue(NewProp_Agent3Area, TEXT("Category"), TEXT("AgentTypes"));
				MetaData->SetValue(NewProp_Agent3Area, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavAreas/NavAreaMeta_SwitchByAgent.h"));
				MetaData->SetValue(NewProp_Agent2Area, TEXT("Category"), TEXT("AgentTypes"));
				MetaData->SetValue(NewProp_Agent2Area, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavAreas/NavAreaMeta_SwitchByAgent.h"));
				MetaData->SetValue(NewProp_Agent1Area, TEXT("Category"), TEXT("AgentTypes"));
				MetaData->SetValue(NewProp_Agent1Area, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavAreas/NavAreaMeta_SwitchByAgent.h"));
				MetaData->SetValue(NewProp_Agent0Area, TEXT("Category"), TEXT("AgentTypes"));
				MetaData->SetValue(NewProp_Agent0Area, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavAreas/NavAreaMeta_SwitchByAgent.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UNavAreaMeta_SwitchByAgent(Z_Construct_UClass_UNavAreaMeta_SwitchByAgent, TEXT("UNavAreaMeta_SwitchByAgent"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UNavAreaMeta_SwitchByAgent);
	UScriptStruct* Z_Construct_UScriptStruct_FNavCollisionBox()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FNavCollisionBox_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("NavCollisionBox"), sizeof(FNavCollisionBox), Get_Z_Construct_UScriptStruct_FNavCollisionBox_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NavCollisionBox"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FNavCollisionBox>, EStructFlags(0x00000001));
			UProperty* NewProp_Extent = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Extent"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Extent, FNavCollisionBox), 0x0000000000000001, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Offset = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Offset"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Offset, FNavCollisionBox), 0x0000000000000001, Z_Construct_UScriptStruct_FVector());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavCollision.h"));
			MetaData->SetValue(NewProp_Extent, TEXT("Category"), TEXT("Box"));
			MetaData->SetValue(NewProp_Extent, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavCollision.h"));
			MetaData->SetValue(NewProp_Offset, TEXT("Category"), TEXT("Box"));
			MetaData->SetValue(NewProp_Offset, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavCollision.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FNavCollisionBox_CRC() { return 3651524964U; }
	UScriptStruct* Z_Construct_UScriptStruct_FNavCollisionCylinder()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FNavCollisionCylinder_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("NavCollisionCylinder"), sizeof(FNavCollisionCylinder), Get_Z_Construct_UScriptStruct_FNavCollisionCylinder_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NavCollisionCylinder"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FNavCollisionCylinder>, EStructFlags(0x00000001));
			UProperty* NewProp_Height = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Height"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Height, FNavCollisionCylinder), 0x0000000000000001);
			UProperty* NewProp_Radius = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Radius"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Radius, FNavCollisionCylinder), 0x0000000000000001);
			UProperty* NewProp_Offset = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Offset"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Offset, FNavCollisionCylinder), 0x0000000000000001, Z_Construct_UScriptStruct_FVector());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavCollision.h"));
			MetaData->SetValue(NewProp_Height, TEXT("Category"), TEXT("Cylinder"));
			MetaData->SetValue(NewProp_Height, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavCollision.h"));
			MetaData->SetValue(NewProp_Radius, TEXT("Category"), TEXT("Cylinder"));
			MetaData->SetValue(NewProp_Radius, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavCollision.h"));
			MetaData->SetValue(NewProp_Offset, TEXT("Category"), TEXT("Cylinder"));
			MetaData->SetValue(NewProp_Offset, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavCollision.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FNavCollisionCylinder_CRC() { return 3301701954U; }
	UClass* Z_Construct_UClass_UNavCollision_NoRegister()
	{
		return UNavCollision::StaticClass();
	}
	UClass* Z_Construct_UClass_UNavCollision()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UNavCollision::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100084;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bGatherConvexGeometry, UNavCollision, uint8);
				UProperty* NewProp_bGatherConvexGeometry = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bGatherConvexGeometry"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bGatherConvexGeometry, UNavCollision), 0x0000000000004001, CPP_BOOL_PROPERTY_BITMASK(bGatherConvexGeometry, UNavCollision), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsDynamicObstacle, UNavCollision, uint8);
				UProperty* NewProp_bIsDynamicObstacle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsDynamicObstacle"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsDynamicObstacle, UNavCollision), 0x0000000000004001, CPP_BOOL_PROPERTY_BITMASK(bIsDynamicObstacle, UNavCollision), sizeof(uint8), false);
				UProperty* NewProp_AreaClass = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AreaClass"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(AreaClass, UNavCollision), 0x0004000000000001, Z_Construct_UClass_UNavArea_NoRegister());
				UProperty* NewProp_BoxCollision = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BoxCollision"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(BoxCollision, UNavCollision), 0x0000000000000001);
				UProperty* NewProp_BoxCollision_Inner = new(EC_InternalUseOnlyConstructor, NewProp_BoxCollision, TEXT("BoxCollision"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FNavCollisionBox());
				UProperty* NewProp_CylinderCollision = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CylinderCollision"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(CylinderCollision, UNavCollision), 0x0000000000000001);
				UProperty* NewProp_CylinderCollision_Inner = new(EC_InternalUseOnlyConstructor, NewProp_CylinderCollision, TEXT("CylinderCollision"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FNavCollisionCylinder());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("AI/Navigation/NavCollision.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavCollision.h"));
				MetaData->SetValue(NewProp_bGatherConvexGeometry, TEXT("Category"), TEXT("Navigation"));
				MetaData->SetValue(NewProp_bGatherConvexGeometry, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavCollision.h"));
				MetaData->SetValue(NewProp_bGatherConvexGeometry, TEXT("ToolTip"), TEXT("If set, convex collisions will be exported offline for faster runtime navmesh building (increases memory usage)"));
				MetaData->SetValue(NewProp_bIsDynamicObstacle, TEXT("Category"), TEXT("Navigation"));
				MetaData->SetValue(NewProp_bIsDynamicObstacle, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavCollision.h"));
				MetaData->SetValue(NewProp_bIsDynamicObstacle, TEXT("ToolTip"), TEXT("If set, mesh will be used as dynamic obstacle (don't create navmesh on top, much faster adding/removing)"));
				MetaData->SetValue(NewProp_AreaClass, TEXT("Category"), TEXT("Navigation"));
				MetaData->SetValue(NewProp_AreaClass, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavCollision.h"));
				MetaData->SetValue(NewProp_AreaClass, TEXT("ToolTip"), TEXT("navigation area type (empty = default obstacle)"));
				MetaData->SetValue(NewProp_BoxCollision, TEXT("Category"), TEXT("Navigation"));
				MetaData->SetValue(NewProp_BoxCollision, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavCollision.h"));
				MetaData->SetValue(NewProp_BoxCollision, TEXT("ToolTip"), TEXT("list of nav collision boxes"));
				MetaData->SetValue(NewProp_CylinderCollision, TEXT("Category"), TEXT("Navigation"));
				MetaData->SetValue(NewProp_CylinderCollision, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavCollision.h"));
				MetaData->SetValue(NewProp_CylinderCollision, TEXT("ToolTip"), TEXT("list of nav collision cylinders"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UNavCollision(Z_Construct_UClass_UNavCollision, TEXT("UNavCollision"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UNavCollision);
	UClass* Z_Construct_UClass_UNavigationDataChunk_NoRegister()
	{
		return UNavigationDataChunk::StaticClass();
	}
	UClass* Z_Construct_UClass_UNavigationDataChunk()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UNavigationDataChunk::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100081;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_NavigationDataName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NavigationDataName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(NavigationDataName, UNavigationDataChunk), 0x0000000000000000);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("AI/Navigation/NavigationDataChunk.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("false"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavigationDataChunk.h"));
				MetaData->SetValue(NewProp_NavigationDataName, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavigationDataChunk.h"));
				MetaData->SetValue(NewProp_NavigationDataName, TEXT("ToolTip"), TEXT("Name of NavigationData actor that owns this chunk"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UNavigationDataChunk(Z_Construct_UClass_UNavigationDataChunk, TEXT("UNavigationDataChunk"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UNavigationDataChunk);
	UClass* Z_Construct_UClass_URecastNavMeshDataChunk_NoRegister()
	{
		return URecastNavMeshDataChunk::StaticClass();
	}
	UClass* Z_Construct_UClass_URecastNavMeshDataChunk()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UNavigationDataChunk();
			Z_Construct_UPackage_Engine();
			OuterClass = URecastNavMeshDataChunk::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("AI/Navigation/RecastNavMeshDataChunk.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/RecastNavMeshDataChunk.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_URecastNavMeshDataChunk(Z_Construct_UClass_URecastNavMeshDataChunk, TEXT("URecastNavMeshDataChunk"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(URecastNavMeshDataChunk);
	UFunction* Z_Construct_UDelegateFunction_Engine_OnNavigationPathUpdated__DelegateSignature()
	{
		struct _Script_Engine_eventOnNavigationPathUpdated_Parms
		{
			UNavigationPath* AffectedPath;
			TEnumAsByte<ENavPathEvent::Type> PathEvent;
		};
		UObject* Outer=Z_Construct_UPackage_Engine();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnNavigationPathUpdated__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535, sizeof(_Script_Engine_eventOnNavigationPathUpdated_Parms));
			UProperty* NewProp_PathEvent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PathEvent"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(PathEvent, _Script_Engine_eventOnNavigationPathUpdated_Parms), 0x0000000000000080, Z_Construct_UEnum_Engine_ENavPathEvent());
			UProperty* NewProp_AffectedPath = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AffectedPath"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(AffectedPath, _Script_Engine_eventOnNavigationPathUpdated_Parms), 0x0000000000000080, Z_Construct_UClass_UNavigationPath_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavigationPath.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UNavigationPath_EnableDebugDrawing()
	{
		struct NavigationPath_eventEnableDebugDrawing_Parms
		{
			bool bShouldDrawDebugData;
			FLinearColor PathColor;
		};
		UObject* Outer=Z_Construct_UClass_UNavigationPath();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EnableDebugDrawing"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(NavigationPath_eventEnableDebugDrawing_Parms));
			UProperty* NewProp_PathColor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PathColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PathColor, NavigationPath_eventEnableDebugDrawing_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FLinearColor());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bShouldDrawDebugData, NavigationPath_eventEnableDebugDrawing_Parms, bool);
			UProperty* NewProp_bShouldDrawDebugData = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bShouldDrawDebugData"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bShouldDrawDebugData, NavigationPath_eventEnableDebugDrawing_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bShouldDrawDebugData, NavigationPath_eventEnableDebugDrawing_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|Debug"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_PathColor"), TEXT("(R=1.000000,G=1.000000,B=1.000000,A=1.000000)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavigationPath.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UNavigationPath_EnableRecalculationOnInvalidation()
	{
		struct NavigationPath_eventEnableRecalculationOnInvalidation_Parms
		{
			TEnumAsByte<ENavigationOptionFlag::Type> DoRecalculation;
		};
		UObject* Outer=Z_Construct_UClass_UNavigationPath();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EnableRecalculationOnInvalidation"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(NavigationPath_eventEnableRecalculationOnInvalidation_Parms));
			UProperty* NewProp_DoRecalculation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DoRecalculation"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(DoRecalculation, NavigationPath_eventEnableRecalculationOnInvalidation_Parms), 0x0000000000000080, Z_Construct_UEnum_Engine_ENavigationOptionFlag());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|Navigation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavigationPath.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("if enabled path will request recalculation if it gets invalidated due to a change to underlying navigation"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UNavigationPath_GetDebugString()
	{
		struct NavigationPath_eventGetDebugString_Parms
		{
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UNavigationPath();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetDebugString"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(NavigationPath_eventGetDebugString_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, NavigationPath_eventGetDebugString_Parms), 0x0000000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|Debug"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavigationPath.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("UObject end"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UNavigationPath_GetPathCost()
	{
		struct NavigationPath_eventGetPathCost_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UNavigationPath();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetPathCost"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(NavigationPath_eventGetPathCost_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, NavigationPath_eventGetPathCost_Parms), 0x0000000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|Navigation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavigationPath.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UNavigationPath_GetPathLength()
	{
		struct NavigationPath_eventGetPathLength_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UNavigationPath();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetPathLength"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(NavigationPath_eventGetPathLength_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, NavigationPath_eventGetPathLength_Parms), 0x0000000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|Navigation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavigationPath.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UNavigationPath_IsPartial()
	{
		struct NavigationPath_eventIsPartial_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UNavigationPath();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsPartial"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(NavigationPath_eventIsPartial_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, NavigationPath_eventIsPartial_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, NavigationPath_eventIsPartial_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, NavigationPath_eventIsPartial_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|Navigation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavigationPath.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UNavigationPath_IsStringPulled()
	{
		struct NavigationPath_eventIsStringPulled_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UNavigationPath();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsStringPulled"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(NavigationPath_eventIsStringPulled_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, NavigationPath_eventIsStringPulled_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, NavigationPath_eventIsStringPulled_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, NavigationPath_eventIsStringPulled_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|Navigation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavigationPath.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UNavigationPath_IsValid()
	{
		struct NavigationPath_eventIsValid_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UNavigationPath();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsValid"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(NavigationPath_eventIsValid_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, NavigationPath_eventIsValid_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, NavigationPath_eventIsValid_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, NavigationPath_eventIsValid_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|Navigation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavigationPath.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UNavigationPath_NoRegister()
	{
		return UNavigationPath::StaticClass();
	}
	UClass* Z_Construct_UClass_UNavigationPath()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UNavigationPath::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_UNavigationPath_EnableDebugDrawing());
				OuterClass->LinkChild(Z_Construct_UFunction_UNavigationPath_EnableRecalculationOnInvalidation());
				OuterClass->LinkChild(Z_Construct_UFunction_UNavigationPath_GetDebugString());
				OuterClass->LinkChild(Z_Construct_UFunction_UNavigationPath_GetPathCost());
				OuterClass->LinkChild(Z_Construct_UFunction_UNavigationPath_GetPathLength());
				OuterClass->LinkChild(Z_Construct_UFunction_UNavigationPath_IsPartial());
				OuterClass->LinkChild(Z_Construct_UFunction_UNavigationPath_IsStringPulled());
				OuterClass->LinkChild(Z_Construct_UFunction_UNavigationPath_IsValid());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_RecalculateOnInvalidation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RecalculateOnInvalidation"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(RecalculateOnInvalidation, UNavigationPath), 0x0000000000000014, Z_Construct_UEnum_Engine_ENavigationOptionFlag());
				UProperty* NewProp_PathPoints = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PathPoints"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(PathPoints, UNavigationPath), 0x0000000000000014);
				UProperty* NewProp_PathPoints_Inner = new(EC_InternalUseOnlyConstructor, NewProp_PathPoints, TEXT("PathPoints"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_PathUpdatedNotifier = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PathUpdatedNotifier"), RF_Public|RF_Transient|RF_Native) UMulticastDelegateProperty(CPP_PROPERTY_BASE(PathUpdatedNotifier, UNavigationPath), 0x0000000010080000, Z_Construct_UDelegateFunction_Engine_OnNavigationPathUpdated__DelegateSignature());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UNavigationPath_EnableDebugDrawing()); // 2594856630
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UNavigationPath_EnableRecalculationOnInvalidation()); // 71913487
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UNavigationPath_GetDebugString()); // 1326271036
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UNavigationPath_GetPathCost()); // 3808807179
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UNavigationPath_GetPathLength()); // 1668328910
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UNavigationPath_IsPartial()); // 2661450408
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UNavigationPath_IsStringPulled()); // 4116577820
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UNavigationPath_IsValid()); // 1390804403
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("AI/Navigation/NavigationPath.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavigationPath.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("UObject wrapper for FNavigationPath"));
				MetaData->SetValue(NewProp_RecalculateOnInvalidation, TEXT("Category"), TEXT("Navigation"));
				MetaData->SetValue(NewProp_RecalculateOnInvalidation, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavigationPath.h"));
				MetaData->SetValue(NewProp_PathPoints, TEXT("Category"), TEXT("Navigation"));
				MetaData->SetValue(NewProp_PathPoints, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavigationPath.h"));
				MetaData->SetValue(NewProp_PathUpdatedNotifier, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavigationPath.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UNavigationPath(Z_Construct_UClass_UNavigationPath, TEXT("UNavigationPath"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UNavigationPath);
	UClass* Z_Construct_UClass_UNavigationPathGenerator_NoRegister()
	{
		return UNavigationPathGenerator::StaticClass();
	}
	UClass* Z_Construct_UClass_UNavigationPathGenerator()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			UInterface::StaticClass();
			Z_Construct_UPackage_Engine();
			OuterClass = UNavigationPathGenerator::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20084081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("CannotImplementInterfaceInBlueprint"), TEXT(""));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UNavigationPathGenerator(Z_Construct_UClass_UNavigationPathGenerator, TEXT("UNavigationPathGenerator"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UNavigationPathGenerator);
	UClass* Z_Construct_UClass_URecastFilter_UseDefaultArea_NoRegister()
	{
		return URecastFilter_UseDefaultArea::StaticClass();
	}
	UClass* Z_Construct_UClass_URecastFilter_UseDefaultArea()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UNavigationQueryFilter();
			Z_Construct_UPackage_Engine();
			OuterClass = URecastFilter_UseDefaultArea::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("AI/Navigation/NavFilters/RecastFilter_UseDefaultArea.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavFilters/RecastFilter_UseDefaultArea.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Regular navigation area, applied to entire navigation data by default"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_URecastFilter_UseDefaultArea(Z_Construct_UClass_URecastFilter_UseDefaultArea, TEXT("URecastFilter_UseDefaultArea"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(URecastFilter_UseDefaultArea);
	UClass* Z_Construct_UClass_UNavLinkTrivial_NoRegister()
	{
		return UNavLinkTrivial::StaticClass();
	}
	UClass* Z_Construct_UClass_UNavLinkTrivial()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UNavLinkDefinition();
			Z_Construct_UPackage_Engine();
			OuterClass = UNavLinkTrivial::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("AI/Navigation/NavLinkTrivial.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavLinkTrivial.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UNavLinkTrivial(Z_Construct_UClass_UNavLinkTrivial, TEXT("UNavLinkTrivial"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UNavLinkTrivial);
	UClass* Z_Construct_UClass_UNavNodeInterface_NoRegister()
	{
		return UNavNodeInterface::StaticClass();
	}
	UClass* Z_Construct_UClass_UNavNodeInterface()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			UInterface::StaticClass();
			Z_Construct_UPackage_Engine();
			OuterClass = UNavNodeInterface::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20084081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("CannotImplementInterfaceInBlueprint"), TEXT(""));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UNavNodeInterface(Z_Construct_UClass_UNavNodeInterface, TEXT("UNavNodeInterface"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UNavNodeInterface);
	UClass* Z_Construct_UClass_UNetDriver_NoRegister()
	{
		return UNetDriver::StaticClass();
	}
	UClass* Z_Construct_UClass_UNetDriver()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UNetDriver::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x2008008D;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Time = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Time"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Time, UNetDriver), 0x0000000000000000);
				UProperty* NewProp_NetDriverName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NetDriverName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(NetDriverName, UNetDriver), 0x0000000000004000);
				UProperty* NewProp_RemoteRoleProperty = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RemoteRoleProperty"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(RemoteRoleProperty, UNetDriver), 0x0000000000000000, UProperty::StaticClass());
				UProperty* NewProp_RoleProperty = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RoleProperty"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(RoleProperty, UNetDriver), 0x0000000000000000, UProperty::StaticClass());
				UProperty* NewProp_NetConnectionClass = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NetConnectionClass"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(NetConnectionClass, UNetDriver), 0x0000000000000000, Z_Construct_UClass_UObject_NoRegister());
				UProperty* NewProp_World = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("World"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(World, UNetDriver), 0x0000000000000000, Z_Construct_UClass_UWorld_NoRegister());
				UProperty* NewProp_ClientConnections = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ClientConnections"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ClientConnections, UNetDriver), 0x0000000000000000);
				UProperty* NewProp_ClientConnections_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ClientConnections, TEXT("ClientConnections"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UNetConnection_NoRegister());
				UProperty* NewProp_ServerConnection = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ServerConnection"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ServerConnection, UNetDriver), 0x0000000000000000, Z_Construct_UClass_UNetConnection_NoRegister());
				UProperty* NewProp_ConnectionTimeout = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConnectionTimeout"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ConnectionTimeout, UNetDriver), 0x0000000000004000);
				UProperty* NewProp_InitialConnectTimeout = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InitialConnectTimeout"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InitialConnectTimeout, UNetDriver), 0x0000000000004000);
				UProperty* NewProp_KeepAliveTime = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("KeepAliveTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(KeepAliveTime, UNetDriver), 0x0000000000004000);
				UProperty* NewProp_RelevantTimeout = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RelevantTimeout"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(RelevantTimeout, UNetDriver), 0x0000000000004000);
				UProperty* NewProp_SpawnPrioritySeconds = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SpawnPrioritySeconds"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(SpawnPrioritySeconds, UNetDriver), 0x0000000000004000);
				UProperty* NewProp_ServerTravelPause = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ServerTravelPause"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ServerTravelPause, UNetDriver), 0x0000000000004000);
				UProperty* NewProp_MaxClientRate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxClientRate"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MaxClientRate, UNetDriver), 0x0000000000004000);
				UProperty* NewProp_MaxInternetClientRate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxInternetClientRate"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MaxInternetClientRate, UNetDriver), 0x0000000000004000);
				UProperty* NewProp_NetServerMaxTickRate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NetServerMaxTickRate"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(NetServerMaxTickRate, UNetDriver), 0x0000000000004000);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bClampListenServerTickRate, UNetDriver, uint8);
				UProperty* NewProp_bClampListenServerTickRate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bClampListenServerTickRate"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bClampListenServerTickRate, UNetDriver), 0x0000000000004000, CPP_BOOL_PROPERTY_BITMASK(bClampListenServerTickRate, UNetDriver), sizeof(uint8), false);
				UProperty* NewProp_MaxDownloadSize = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxDownloadSize"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MaxDownloadSize, UNetDriver), 0x0000000000004000);
				UProperty* NewProp_NetConnectionClassName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NetConnectionClassName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(NetConnectionClassName, UNetDriver), 0x0000000000004000);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/NetDriver.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NetDriver.h"));
				MetaData->SetValue(NewProp_Time, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NetDriver.h"));
				MetaData->SetValue(NewProp_Time, TEXT("ToolTip"), TEXT("Accumulated time for the net driver, updated by Tick"));
				MetaData->SetValue(NewProp_NetDriverName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NetDriver.h"));
				MetaData->SetValue(NewProp_NetDriverName, TEXT("ToolTip"), TEXT("Used to specify the net driver to filter actors with (NAME_None || NAME_GameNetDriver is the default net driver)"));
				MetaData->SetValue(NewProp_RemoteRoleProperty, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NetDriver.h"));
				MetaData->SetValue(NewProp_RemoteRoleProperty, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_RoleProperty, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NetDriver.h"));
				MetaData->SetValue(NewProp_RoleProperty, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_NetConnectionClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NetDriver.h"));
				MetaData->SetValue(NewProp_NetConnectionClass, TEXT("ToolTip"), TEXT("The loaded UClass of the net connection type to use"));
				MetaData->SetValue(NewProp_World, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NetDriver.h"));
				MetaData->SetValue(NewProp_World, TEXT("ToolTip"), TEXT("World this net driver is associated with"));
				MetaData->SetValue(NewProp_ClientConnections, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NetDriver.h"));
				MetaData->SetValue(NewProp_ClientConnections, TEXT("ToolTip"), TEXT("Array of connections to clients (this net driver is a host)"));
				MetaData->SetValue(NewProp_ServerConnection, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NetDriver.h"));
				MetaData->SetValue(NewProp_ServerConnection, TEXT("ToolTip"), TEXT("Connection to the server (this net driver is a client)"));
				MetaData->SetValue(NewProp_ConnectionTimeout, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NetDriver.h"));
				MetaData->SetValue(NewProp_ConnectionTimeout, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_InitialConnectTimeout, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NetDriver.h"));
				MetaData->SetValue(NewProp_InitialConnectTimeout, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_KeepAliveTime, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NetDriver.h"));
				MetaData->SetValue(NewProp_KeepAliveTime, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_RelevantTimeout, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NetDriver.h"));
				MetaData->SetValue(NewProp_RelevantTimeout, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_SpawnPrioritySeconds, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NetDriver.h"));
				MetaData->SetValue(NewProp_SpawnPrioritySeconds, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_ServerTravelPause, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NetDriver.h"));
				MetaData->SetValue(NewProp_ServerTravelPause, TEXT("ToolTip"), TEXT("Amount of time a server will wait before traveling to next map, gives clients time to receive final RPCs on existing level @see NextSwitchCountdown"));
				MetaData->SetValue(NewProp_MaxClientRate, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NetDriver.h"));
				MetaData->SetValue(NewProp_MaxClientRate, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_MaxInternetClientRate, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NetDriver.h"));
				MetaData->SetValue(NewProp_MaxInternetClientRate, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_NetServerMaxTickRate, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NetDriver.h"));
				MetaData->SetValue(NewProp_NetServerMaxTickRate, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_bClampListenServerTickRate, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NetDriver.h"));
				MetaData->SetValue(NewProp_bClampListenServerTickRate, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_MaxDownloadSize, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NetDriver.h"));
				MetaData->SetValue(NewProp_MaxDownloadSize, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_NetConnectionClassName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NetDriver.h"));
				MetaData->SetValue(NewProp_NetConnectionClassName, TEXT("ToolTip"), TEXT("Used to specify the class to use for connections"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UNetDriver(Z_Construct_UClass_UNetDriver, TEXT("UNetDriver"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UNetDriver);
	UClass* Z_Construct_UClass_UDemoNetDriver_NoRegister()
	{
		return UDemoNetDriver::StaticClass();
	}
	UClass* Z_Construct_UClass_UDemoNetDriver()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UNetDriver();
			Z_Construct_UPackage_Engine();
			OuterClass = UDemoNetDriver::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x2010008C;


				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/DemoNetDriver.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DemoNetDriver.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Simulated network driver for recording and playing back game sessions."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UDemoNetDriver(Z_Construct_UClass_UDemoNetDriver, TEXT("UDemoNetDriver"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UDemoNetDriver);
	UClass* Z_Construct_UClass_UNiagaraEffectRendererProperties_NoRegister()
	{
		return UNiagaraEffectRendererProperties::StaticClass();
	}
	UClass* Z_Construct_UClass_UNiagaraEffectRendererProperties()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UNiagaraEffectRendererProperties::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_dummy = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("dummy"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(dummy, UNiagaraEffectRendererProperties), 0x0000000000000000);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/NiagaraEffectRendererProperties.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NiagaraEffectRendererProperties.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Emitter properties base class\nEach Effectrenderer derives from this with its own class, and returns it in GetProperties; a copy\nof those specific properties is stored on UNiagaraEmitterProperties (on the effect) for serialization\nand handed back to the effect renderer on load."));
				MetaData->SetValue(NewProp_dummy, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NiagaraEffectRendererProperties.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UNiagaraEffectRendererProperties(Z_Construct_UClass_UNiagaraEffectRendererProperties, TEXT("UNiagaraEffectRendererProperties"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UNiagaraEffectRendererProperties);
	UClass* Z_Construct_UClass_UNiagaraRibbonRendererProperties_NoRegister()
	{
		return UNiagaraRibbonRendererProperties::StaticClass();
	}
	UClass* Z_Construct_UClass_UNiagaraRibbonRendererProperties()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UNiagaraEffectRendererProperties();
			Z_Construct_UPackage_Engine();
			OuterClass = UNiagaraRibbonRendererProperties::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/NiagaraRibbonRendererProperties.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NiagaraRibbonRendererProperties.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UNiagaraRibbonRendererProperties(Z_Construct_UClass_UNiagaraRibbonRendererProperties, TEXT("UNiagaraRibbonRendererProperties"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UNiagaraRibbonRendererProperties);
	UClass* Z_Construct_UClass_UNiagaraSpriteRendererProperties_NoRegister()
	{
		return UNiagaraSpriteRendererProperties::StaticClass();
	}
	UClass* Z_Construct_UClass_UNiagaraSpriteRendererProperties()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UNiagaraEffectRendererProperties();
			Z_Construct_UPackage_Engine();
			OuterClass = UNiagaraSpriteRendererProperties::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_SubImageInfo = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SubImageInfo"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SubImageInfo, UNiagaraSpriteRendererProperties), 0x0000000000000001, Z_Construct_UScriptStruct_FVector2D());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/NiagaraSpriteRendererProperties.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NiagaraSpriteRendererProperties.h"));
				MetaData->SetValue(NewProp_SubImageInfo, TEXT("Category"), TEXT("Sprite Rendering"));
				MetaData->SetValue(NewProp_SubImageInfo, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NiagaraSpriteRendererProperties.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UNiagaraSpriteRendererProperties(Z_Construct_UClass_UNiagaraSpriteRendererProperties, TEXT("UNiagaraSpriteRendererProperties"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UNiagaraSpriteRendererProperties);
	UClass* Z_Construct_UClass_UObjectLibrary_NoRegister()
	{
		return UObjectLibrary::StaticClass();
	}
	UClass* Z_Construct_UClass_UObjectLibrary()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UObjectLibrary::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsFullyLoaded, UObjectLibrary, bool);
				UProperty* NewProp_bIsFullyLoaded = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsFullyLoaded"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsFullyLoaded, UObjectLibrary), 0x0000080000002000, CPP_BOOL_PROPERTY_BITMASK(bIsFullyLoaded, UObjectLibrary), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseWeakReferences, UObjectLibrary, bool);
				UProperty* NewProp_bUseWeakReferences = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUseWeakReferences"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseWeakReferences, UObjectLibrary), 0x0000080000002000, CPP_BOOL_PROPERTY_BITMASK(bUseWeakReferences, UObjectLibrary), sizeof(bool), true);
				UProperty* NewProp_WeakObjects = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WeakObjects"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(WeakObjects, UObjectLibrary), 0x0004080000000000);
				UProperty* NewProp_WeakObjects_Inner = new(EC_InternalUseOnlyConstructor, NewProp_WeakObjects, TEXT("WeakObjects"), RF_Public|RF_Transient|RF_Native) UWeakObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0004000000000000, Z_Construct_UClass_UObject_NoRegister());
				UProperty* NewProp_Objects = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Objects"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Objects, UObjectLibrary), 0x0000080000000001);
				UProperty* NewProp_Objects_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Objects, TEXT("Objects"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UObject_NoRegister());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bHasBlueprintClasses, UObjectLibrary, bool);
				UProperty* NewProp_bHasBlueprintClasses = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bHasBlueprintClasses"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bHasBlueprintClasses, UObjectLibrary), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bHasBlueprintClasses, UObjectLibrary), sizeof(bool), true);
				UProperty* NewProp_ObjectBaseClass = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ObjectBaseClass"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(ObjectBaseClass, UObjectLibrary), 0x0000000000000001, Z_Construct_UClass_UObject_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/ObjectLibrary.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/ObjectLibrary.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Class that holds a library of Objects"));
				MetaData->SetValue(NewProp_bIsFullyLoaded, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/ObjectLibrary.h"));
				MetaData->SetValue(NewProp_bIsFullyLoaded, TEXT("ToolTip"), TEXT("True if we've already fully loaded this library, can't do it twice"));
				MetaData->SetValue(NewProp_bUseWeakReferences, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/ObjectLibrary.h"));
				MetaData->SetValue(NewProp_bUseWeakReferences, TEXT("ToolTip"), TEXT("If this library should use weak pointers"));
				MetaData->SetValue(NewProp_WeakObjects, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/ObjectLibrary.h"));
				MetaData->SetValue(NewProp_WeakObjects, TEXT("ToolTip"), TEXT("Weak pointers to objects"));
				MetaData->SetValue(NewProp_Objects, TEXT("Category"), TEXT("ObjectLibrary"));
				MetaData->SetValue(NewProp_Objects, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/ObjectLibrary.h"));
				MetaData->SetValue(NewProp_Objects, TEXT("ToolTip"), TEXT("List of Objects in library"));
				MetaData->SetValue(NewProp_bHasBlueprintClasses, TEXT("Category"), TEXT("ObjectLibrary"));
				MetaData->SetValue(NewProp_bHasBlueprintClasses, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/ObjectLibrary.h"));
				MetaData->SetValue(NewProp_bHasBlueprintClasses, TEXT("ToolTip"), TEXT("True if this library holds blueprint classes, false if it holds other objects"));
				MetaData->SetValue(NewProp_ObjectBaseClass, TEXT("AllowAbstract"), TEXT(""));
				MetaData->SetValue(NewProp_ObjectBaseClass, TEXT("Category"), TEXT("ObjectLibrary"));
				MetaData->SetValue(NewProp_ObjectBaseClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/ObjectLibrary.h"));
				MetaData->SetValue(NewProp_ObjectBaseClass, TEXT("ToolTip"), TEXT("Class that Objects must be of. If ContainsBlueprints is true, this is the native class that the blueprints are instances of and not UClass"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UObjectLibrary(Z_Construct_UClass_UObjectLibrary, TEXT("UObjectLibrary"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UObjectLibrary);
	UClass* Z_Construct_UClass_UObjectReferencer_NoRegister()
	{
		return UObjectReferencer::StaticClass();
	}
	UClass* Z_Construct_UClass_UObjectReferencer()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UObjectReferencer::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ReferencedObjects = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ReferencedObjects"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ReferencedObjects, UObjectReferencer), 0x0000000000000001);
				UProperty* NewProp_ReferencedObjects_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ReferencedObjects, TEXT("ReferencedObjects"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UObject_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/ObjectReferencer.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/ObjectReferencer.h"));
				MetaData->SetValue(NewProp_ReferencedObjects, TEXT("Category"), TEXT("ObjectReferencer"));
				MetaData->SetValue(NewProp_ReferencedObjects, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/ObjectReferencer.h"));
				MetaData->SetValue(NewProp_ReferencedObjects, TEXT("ToolTip"), TEXT("Array of objects being referenced."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UObjectReferencer(Z_Construct_UClass_UObjectReferencer, TEXT("UObjectReferencer"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UObjectReferencer);
	UClass* Z_Construct_UClass_UOnlineSession_NoRegister()
	{
		return UOnlineSession::StaticClass();
	}
	UClass* Z_Construct_UClass_UOnlineSession()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UOnlineSession::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


				OuterClass->ClassConfigName = FName(TEXT("Game"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("GameFramework/OnlineSession.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/OnlineSession.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UOnlineSession(Z_Construct_UClass_UOnlineSession, TEXT("UOnlineSession"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UOnlineSession);
	UClass* Z_Construct_UClass_UPackageMapClient_NoRegister()
	{
		return UPackageMapClient::StaticClass();
	}
	UClass* Z_Construct_UClass_UPackageMapClient()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			UPackageMap::StaticClass();
			Z_Construct_UPackage_Engine();
			OuterClass = UPackageMapClient::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100088;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/PackageMapClient.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/PackageMapClient.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UPackageMapClient(Z_Construct_UClass_UPackageMapClient, TEXT("UPackageMapClient"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UPackageMapClient);
	UEnum* Z_Construct_UEnum_Engine_EEmitterRenderMode()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EEmitterRenderMode_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EEmitterRenderMode"), 0, Get_Z_Construct_UEnum_Engine_EEmitterRenderMode_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EEmitterRenderMode"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ERM_Normal")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ERM_Point")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ERM_Cross")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ERM_LightsOnly")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ERM_None")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ERM_MAX")), 5));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ERM_Cross.DisplayName"), TEXT("Cross"));
			MetaData->SetValue(ReturnEnum, TEXT("ERM_LightsOnly.DisplayName"), TEXT("Lights Only"));
			MetaData->SetValue(ReturnEnum, TEXT("ERM_None.DisplayName"), TEXT("None"));
			MetaData->SetValue(ReturnEnum, TEXT("ERM_Normal.DisplayName"), TEXT("Normal"));
			MetaData->SetValue(ReturnEnum, TEXT("ERM_Point.DisplayName"), TEXT("Point"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleEmitter.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Cascade-related"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EEmitterRenderMode_CRC() { return 2705530015U; }
	UEnum* Z_Construct_UEnum_Engine_EParticleSubUVInterpMethod()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EParticleSubUVInterpMethod_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EParticleSubUVInterpMethod"), 0, Get_Z_Construct_UEnum_Engine_EParticleSubUVInterpMethod_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EParticleSubUVInterpMethod"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PSUVIM_None")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PSUVIM_Linear")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PSUVIM_Linear_Blend")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PSUVIM_Random")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PSUVIM_Random_Blend")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PSUVIM_MAX")), 5));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleEmitter.h"));
			MetaData->SetValue(ReturnEnum, TEXT("PSUVIM_Linear.DisplayName"), TEXT("Linear"));
			MetaData->SetValue(ReturnEnum, TEXT("PSUVIM_Linear_Blend.DisplayName"), TEXT("Linear Blend"));
			MetaData->SetValue(ReturnEnum, TEXT("PSUVIM_None.DisplayName"), TEXT("None"));
			MetaData->SetValue(ReturnEnum, TEXT("PSUVIM_Random.DisplayName"), TEXT("Random"));
			MetaData->SetValue(ReturnEnum, TEXT("PSUVIM_Random_Blend.DisplayName"), TEXT("Random Blend"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("SubUV-related"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EParticleSubUVInterpMethod_CRC() { return 2358599710U; }
	UEnum* Z_Construct_UEnum_Engine_EParticleBurstMethod()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EParticleBurstMethod_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EParticleBurstMethod"), 0, Get_Z_Construct_UEnum_Engine_EParticleBurstMethod_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EParticleBurstMethod"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPBM_Instant")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPBM_Interpolated")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPBM_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("EPBM_Instant.DisplayName"), TEXT("Instant"));
			MetaData->SetValue(ReturnEnum, TEXT("EPBM_Interpolated.DisplayName"), TEXT("Interpolated"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleEmitter.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Burst emissions"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EParticleBurstMethod_CRC() { return 2406712566U; }
	UScriptStruct* Z_Construct_UScriptStruct_FParticleBurst()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FParticleBurst_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("ParticleBurst"), sizeof(FParticleBurst), Get_Z_Construct_UScriptStruct_FParticleBurst_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ParticleBurst"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FParticleBurst>, EStructFlags(0x00000001));
			UProperty* NewProp_Time = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Time"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Time, FParticleBurst), 0x0000000000000001);
			UProperty* NewProp_CountLow = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CountLow"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(CountLow, FParticleBurst), 0x0000000000000001);
			UProperty* NewProp_Count = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Count"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Count, FParticleBurst), 0x0000000000000001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleEmitter.h"));
			MetaData->SetValue(NewProp_Time, TEXT("Category"), TEXT("ParticleBurst"));
			MetaData->SetValue(NewProp_Time, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleEmitter.h"));
			MetaData->SetValue(NewProp_Time, TEXT("ToolTip"), TEXT("The time at which to burst them (0..1: emitter lifetime)"));
			MetaData->SetValue(NewProp_CountLow, TEXT("Category"), TEXT("ParticleBurst"));
			MetaData->SetValue(NewProp_CountLow, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleEmitter.h"));
			MetaData->SetValue(NewProp_CountLow, TEXT("ToolTip"), TEXT("If >= 0, use as a range [CountLow..Count]"));
			MetaData->SetValue(NewProp_Count, TEXT("Category"), TEXT("ParticleBurst"));
			MetaData->SetValue(NewProp_Count, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleEmitter.h"));
			MetaData->SetValue(NewProp_Count, TEXT("ToolTip"), TEXT("The number of particles to burst"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FParticleBurst_CRC() { return 4151170202U; }
	UClass* Z_Construct_UClass_UParticleEmitter_NoRegister()
	{
		return UParticleEmitter::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleEmitter()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleEmitter::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881081;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDisabledLODsKeepEmitterAlive, UParticleEmitter, uint8);
				UProperty* NewProp_bDisabledLODsKeepEmitterAlive = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bDisabledLODsKeepEmitterAlive"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDisabledLODsKeepEmitterAlive, UParticleEmitter), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bDisabledLODsKeepEmitterAlive, UParticleEmitter), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCookedOut, UParticleEmitter, uint8);
				UProperty* NewProp_bCookedOut = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bCookedOut"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCookedOut, UParticleEmitter), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bCookedOut, UParticleEmitter), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsSoloing, UParticleEmitter, uint8);
				UProperty* NewProp_bIsSoloing = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsSoloing"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsSoloing, UParticleEmitter), 0x0000000000002000, CPP_BOOL_PROPERTY_BITMASK(bIsSoloing, UParticleEmitter), sizeof(uint8), false);
#if WITH_EDITORONLY_DATA
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCollapsed, UParticleEmitter, uint8);
				UProperty* NewProp_bCollapsed = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bCollapsed"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCollapsed, UParticleEmitter), 0x0000000800000001, CPP_BOOL_PROPERTY_BITMASK(bCollapsed, UParticleEmitter), sizeof(uint8), false);
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_DetailMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DetailMode"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(DetailMode, UParticleEmitter), 0x0000000000000001, Z_Construct_UEnum_Engine_EDetailMode());
				UProperty* NewProp_QualityLevelSpawnRateScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("QualityLevelSpawnRateScale"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(QualityLevelSpawnRateScale, UParticleEmitter), 0x0000000000000001);
				UProperty* NewProp_MediumDetailSpawnRateScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MediumDetailSpawnRateScale"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MediumDetailSpawnRateScale_DEPRECATED, UParticleEmitter), 0x0000000020000000);
				UProperty* NewProp_InitialAllocationCount = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InitialAllocationCount"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(InitialAllocationCount, UParticleEmitter), 0x0000000000000001);
				UProperty* NewProp_PeakActiveParticles = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PeakActiveParticles"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(PeakActiveParticles, UParticleEmitter), 0x0000000000000000);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(ConvertedModules, UParticleEmitter, uint8);
				UProperty* NewProp_ConvertedModules = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConvertedModules"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ConvertedModules, UParticleEmitter), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(ConvertedModules, UParticleEmitter), sizeof(uint8), false);
				UProperty* NewProp_LODLevels = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LODLevels"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(LODLevels, UParticleEmitter), 0x0000008000000008);
				UProperty* NewProp_LODLevels_Inner = new(EC_InternalUseOnlyConstructor, NewProp_LODLevels, TEXT("LODLevels"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0002000000080008, Z_Construct_UClass_UParticleLODLevel_NoRegister());
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_EmitterEditorColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EmitterEditorColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(EmitterEditorColor, UParticleEmitter), 0x0000000800000001, Z_Construct_UScriptStruct_FColor());
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_EmitterRenderMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EmitterRenderMode"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(EmitterRenderMode, UParticleEmitter), 0x0000000000000001, Z_Construct_UEnum_Engine_EEmitterRenderMode());
				UProperty* NewProp_SubUVDataOffset = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SubUVDataOffset"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(SubUVDataOffset, UParticleEmitter), 0x0000000000002000);
				UProperty* NewProp_EmitterName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EmitterName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(EmitterName, UParticleEmitter), 0x0000000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/ParticleEmitter.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleEmitter.h"));
				MetaData->SetValue(NewProp_bDisabledLODsKeepEmitterAlive, TEXT("Category"), TEXT("Particle"));
				MetaData->SetValue(NewProp_bDisabledLODsKeepEmitterAlive, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleEmitter.h"));
				MetaData->SetValue(NewProp_bDisabledLODsKeepEmitterAlive, TEXT("ToolTip"), TEXT("When true, if the current LOD is disabled the emitter will be kept alive. Otherwise, the emitter will be considered complete if the current LOD is disabled."));
				MetaData->SetValue(NewProp_bCookedOut, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleEmitter.h"));
				MetaData->SetValue(NewProp_bCookedOut, TEXT("ToolTip"), TEXT("If true, then this emitter was 'cooked out' by the cooker.\nThis means it was completely disabled, but to preserve any\nindexing schemes, it is left in place."));
				MetaData->SetValue(NewProp_bIsSoloing, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleEmitter.h"));
				MetaData->SetValue(NewProp_bIsSoloing, TEXT("ToolTip"), TEXT("If true, then show only this emitter in the editor"));
				MetaData->SetValue(NewProp_bCollapsed, TEXT("Category"), TEXT("Cascade"));
				MetaData->SetValue(NewProp_bCollapsed, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleEmitter.h"));
				MetaData->SetValue(NewProp_bCollapsed, TEXT("ToolTip"), TEXT("This value indicates the emitter should be drawn 'collapsed' in Cascade"));
				MetaData->SetValue(NewProp_DetailMode, TEXT("Category"), TEXT("Particle"));
				MetaData->SetValue(NewProp_DetailMode, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleEmitter.h"));
				MetaData->SetValue(NewProp_DetailMode, TEXT("ToolTip"), TEXT("If detail mode is >= system detail mode, primitive won't be rendered."));
				MetaData->SetValue(NewProp_QualityLevelSpawnRateScale, TEXT("Category"), TEXT("Particle"));
				MetaData->SetValue(NewProp_QualityLevelSpawnRateScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleEmitter.h"));
				MetaData->SetValue(NewProp_MediumDetailSpawnRateScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleEmitter.h"));
				MetaData->SetValue(NewProp_MediumDetailSpawnRateScale, TEXT("ToolTip"), TEXT("Scales the spawn rate of this emitter when the engine is running in medium or low detail mode.\nThis can be used to optimize particle draw cost in splitscreen.\nA value of 0 effectively disables this emitter outside of high detail mode,\nAnd this does not affect spawn per unit, unless the value is 0."));
				MetaData->SetValue(NewProp_InitialAllocationCount, TEXT("Category"), TEXT("Particle"));
				MetaData->SetValue(NewProp_InitialAllocationCount, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleEmitter.h"));
				MetaData->SetValue(NewProp_InitialAllocationCount, TEXT("ToolTip"), TEXT("Initial allocation count - overrides calculated peak count if > 0"));
				MetaData->SetValue(NewProp_PeakActiveParticles, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleEmitter.h"));
				MetaData->SetValue(NewProp_ConvertedModules, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleEmitter.h"));
				MetaData->SetValue(NewProp_LODLevels, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_LODLevels, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleEmitter.h"));
				MetaData->SetValue(NewProp_LODLevels, TEXT("ToolTip"), TEXT("'Private' data - not required by the editor"));
				MetaData->SetValue(NewProp_LODLevels_Inner, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_LODLevels_Inner, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleEmitter.h"));
				MetaData->SetValue(NewProp_LODLevels_Inner, TEXT("ToolTip"), TEXT("'Private' data - not required by the editor"));
				MetaData->SetValue(NewProp_EmitterEditorColor, TEXT("Category"), TEXT("Cascade"));
				MetaData->SetValue(NewProp_EmitterEditorColor, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleEmitter.h"));
				MetaData->SetValue(NewProp_EmitterEditorColor, TEXT("ToolTip"), TEXT("The color of the emitter in the curve editor and debug rendering modes."));
				MetaData->SetValue(NewProp_EmitterRenderMode, TEXT("Category"), TEXT("Cascade"));
				MetaData->SetValue(NewProp_EmitterRenderMode, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleEmitter.h"));
				MetaData->SetValue(NewProp_EmitterRenderMode, TEXT("ToolTip"), TEXT("How to render the emitter particles. Can be one of the following:\n        ERM_Normal      - As the intended sprite/mesh\n        ERM_Point       - As a 2x2 pixel block with no scaling and the color set in EmitterEditorColor\n        ERM_Cross       - As a cross of lines, scaled to the size of the particle in EmitterEditorColor\n        ERM_None        - Do not render"));
				MetaData->SetValue(NewProp_SubUVDataOffset, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleEmitter.h"));
				MetaData->SetValue(NewProp_EmitterName, TEXT("Category"), TEXT("Particle"));
				MetaData->SetValue(NewProp_EmitterName, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleEmitter.h"));
				MetaData->SetValue(NewProp_EmitterName, TEXT("ToolTip"), TEXT("The name of the emitter."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleEmitter(Z_Construct_UClass_UParticleEmitter, TEXT("UParticleEmitter"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleEmitter);
	UEnum* Z_Construct_UEnum_Engine_EParticleScreenAlignment()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EParticleScreenAlignment_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EParticleScreenAlignment"), 0, Get_Z_Construct_UEnum_Engine_EParticleScreenAlignment_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EParticleScreenAlignment"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PSA_FacingCameraPosition")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PSA_Square")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PSA_Rectangle")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PSA_Velocity")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PSA_AwayFromCenter")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PSA_TypeSpecific")), 5));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PSA_MAX")), 6));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleSpriteEmitter.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EParticleScreenAlignment_CRC() { return 1774120596U; }
	UClass* Z_Construct_UClass_UParticleSpriteEmitter_NoRegister()
	{
		return UParticleSpriteEmitter::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleSpriteEmitter()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleEmitter();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleSpriteEmitter::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20883080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/ParticleSpriteEmitter.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleSpriteEmitter.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleSpriteEmitter(Z_Construct_UClass_UParticleSpriteEmitter, TEXT("UParticleSpriteEmitter"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleSpriteEmitter);
	UClass* Z_Construct_UClass_UParticleLODLevel_NoRegister()
	{
		return UParticleLODLevel::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleLODLevel()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleLODLevel::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20883080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_PeakActiveParticles = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PeakActiveParticles"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(PeakActiveParticles, UParticleLODLevel), 0x0000000000000000);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(ConvertedModules, UParticleLODLevel, uint8);
				UProperty* NewProp_ConvertedModules = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConvertedModules"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ConvertedModules, UParticleLODLevel), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(ConvertedModules, UParticleLODLevel), sizeof(uint8), false);
				UProperty* NewProp_EventReceiverModules = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EventReceiverModules"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(EventReceiverModules, UParticleLODLevel), 0x0000000000202000);
				UProperty* NewProp_EventReceiverModules_Inner = new(EC_InternalUseOnlyConstructor, NewProp_EventReceiverModules, TEXT("EventReceiverModules"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UParticleModuleEventReceiverBase_NoRegister());
				UProperty* NewProp_OrbitModules = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OrbitModules"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(OrbitModules, UParticleLODLevel), 0x0000000000202000);
				UProperty* NewProp_OrbitModules_Inner = new(EC_InternalUseOnlyConstructor, NewProp_OrbitModules, TEXT("OrbitModules"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UParticleModuleOrbit_NoRegister());
				UProperty* NewProp_UpdateModules = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UpdateModules"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(UpdateModules, UParticleLODLevel), 0x0000000000202000);
				UProperty* NewProp_UpdateModules_Inner = new(EC_InternalUseOnlyConstructor, NewProp_UpdateModules, TEXT("UpdateModules"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UParticleModule_NoRegister());
				UProperty* NewProp_SpawnModules = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SpawnModules"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(SpawnModules, UParticleLODLevel), 0x0000000000202000);
				UProperty* NewProp_SpawnModules_Inner = new(EC_InternalUseOnlyConstructor, NewProp_SpawnModules, TEXT("SpawnModules"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UParticleModule_NoRegister());
				UProperty* NewProp_SpawningModules = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SpawningModules"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(SpawningModules, UParticleLODLevel), 0x0000000000202000);
				UProperty* NewProp_SpawningModules_Inner = new(EC_InternalUseOnlyConstructor, NewProp_SpawningModules, TEXT("SpawningModules"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UParticleModuleSpawnBase_NoRegister());
				UProperty* NewProp_EventGenerator = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EventGenerator"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(EventGenerator, UParticleLODLevel), 0x0000000000000008, Z_Construct_UClass_UParticleModuleEventGenerator_NoRegister());
				UProperty* NewProp_SpawnModule = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SpawnModule"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(SpawnModule, UParticleLODLevel), 0x0000000000000008, Z_Construct_UClass_UParticleModuleSpawn_NoRegister());
				UProperty* NewProp_TypeDataModule = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TypeDataModule"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(TypeDataModule, UParticleLODLevel), 0x0000000000000008, Z_Construct_UClass_UParticleModule_NoRegister());
				UProperty* NewProp_Modules = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Modules"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Modules, UParticleLODLevel), 0x0000008000000008);
				UProperty* NewProp_Modules_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Modules, TEXT("Modules"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0002000000080008, Z_Construct_UClass_UParticleModule_NoRegister());
				UProperty* NewProp_RequiredModule = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RequiredModule"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(RequiredModule, UParticleLODLevel), 0x0002000000080008, Z_Construct_UClass_UParticleModuleRequired_NoRegister());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnabled, UParticleLODLevel, uint8);
				UProperty* NewProp_bEnabled = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bEnabled"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnabled, UParticleLODLevel), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bEnabled, UParticleLODLevel), sizeof(uint8), false);
				UProperty* NewProp_Level = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Level"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Level, UParticleLODLevel), 0x0000000000000000);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/ParticleLODLevel.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleLODLevel.h"));
				MetaData->SetValue(NewProp_PeakActiveParticles, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleLODLevel.h"));
				MetaData->SetValue(NewProp_ConvertedModules, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleLODLevel.h"));
				MetaData->SetValue(NewProp_EventReceiverModules, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleLODLevel.h"));
				MetaData->SetValue(NewProp_EventReceiverModules, TEXT("ToolTip"), TEXT("Event receiver modules only!"));
				MetaData->SetValue(NewProp_OrbitModules, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleLODLevel.h"));
				MetaData->SetValue(NewProp_OrbitModules, TEXT("ToolTip"), TEXT("OrbitModules\n    These are used to do offsets of the sprite from the particle location."));
				MetaData->SetValue(NewProp_UpdateModules, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleLODLevel.h"));
				MetaData->SetValue(NewProp_UpdateModules, TEXT("ToolTip"), TEXT("UpdateModules - These are called when particles are updated."));
				MetaData->SetValue(NewProp_SpawnModules, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleLODLevel.h"));
				MetaData->SetValue(NewProp_SpawnModules, TEXT("ToolTip"), TEXT("SpawnModules - These are called when particles are spawned."));
				MetaData->SetValue(NewProp_SpawningModules, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleLODLevel.h"));
				MetaData->SetValue(NewProp_SpawningModules, TEXT("ToolTip"), TEXT("SpawningModules - These are called to determine how many particles to spawn."));
				MetaData->SetValue(NewProp_EventGenerator, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleLODLevel.h"));
				MetaData->SetValue(NewProp_EventGenerator, TEXT("ToolTip"), TEXT("The optional EventGenerator module."));
				MetaData->SetValue(NewProp_SpawnModule, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleLODLevel.h"));
				MetaData->SetValue(NewProp_SpawnModule, TEXT("ToolTip"), TEXT("The SpawnRate/Burst module - required by all emitters."));
				MetaData->SetValue(NewProp_TypeDataModule, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleLODLevel.h"));
				MetaData->SetValue(NewProp_TypeDataModule, TEXT("ToolTip"), TEXT("Module<SINGULAR> used for emitter type \"extension\"."));
				MetaData->SetValue(NewProp_Modules, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_Modules, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleLODLevel.h"));
				MetaData->SetValue(NewProp_Modules, TEXT("ToolTip"), TEXT("An array of particle modules that contain the adjusted data for the LOD level"));
				MetaData->SetValue(NewProp_Modules_Inner, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_Modules_Inner, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleLODLevel.h"));
				MetaData->SetValue(NewProp_Modules_Inner, TEXT("ToolTip"), TEXT("An array of particle modules that contain the adjusted data for the LOD level"));
				MetaData->SetValue(NewProp_RequiredModule, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_RequiredModule, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleLODLevel.h"));
				MetaData->SetValue(NewProp_RequiredModule, TEXT("ToolTip"), TEXT("The required module for this LOD level"));
				MetaData->SetValue(NewProp_bEnabled, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleLODLevel.h"));
				MetaData->SetValue(NewProp_bEnabled, TEXT("ToolTip"), TEXT("True if the LOD level is enabled, meaning it should be updated and rendered."));
				MetaData->SetValue(NewProp_Level, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleLODLevel.h"));
				MetaData->SetValue(NewProp_Level, TEXT("ToolTip"), TEXT("The index value of the LOD level"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleLODLevel(Z_Construct_UClass_UParticleLODLevel, TEXT("UParticleLODLevel"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleLODLevel);
	UEnum* Z_Construct_UEnum_Engine_EParticleSourceSelectionMethod()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EParticleSourceSelectionMethod_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EParticleSourceSelectionMethod"), 0, Get_Z_Construct_UEnum_Engine_EParticleSourceSelectionMethod_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EParticleSourceSelectionMethod"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPSSM_Random")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPSSM_Sequential")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPSSM_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("EPSSM_Random.DisplayName"), TEXT("Random"));
			MetaData->SetValue(ReturnEnum, TEXT("EPSSM_Random.ToolTip"), TEXT("Random         - select a particle at random"));
			MetaData->SetValue(ReturnEnum, TEXT("EPSSM_Sequential.DisplayName"), TEXT("Sequential"));
			MetaData->SetValue(ReturnEnum, TEXT("EPSSM_Sequential.ToolTip"), TEXT("Sequential     - select a particle in order"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModule.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Particle Selection Method, for any emitters that utilize particles\nas the source points."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EParticleSourceSelectionMethod_CRC() { return 1178977426U; }
	UEnum* Z_Construct_UEnum_Engine_EModuleType()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EModuleType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EModuleType"), 0, Get_Z_Construct_UEnum_Engine_EModuleType_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EModuleType"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPMT_General")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPMT_TypeData")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPMT_Beam")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPMT_Trail")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPMT_Spawn")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPMT_Required")), 5));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPMT_Event")), 6));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPMT_Light")), 7));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPMT_MAX")), 8));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("EPMT_Beam.DisplayName"), TEXT("Beam"));
			MetaData->SetValue(ReturnEnum, TEXT("EPMT_Beam.ToolTip"), TEXT("Beam - only applied to beam emitters"));
			MetaData->SetValue(ReturnEnum, TEXT("EPMT_Event.DisplayName"), TEXT("Event"));
			MetaData->SetValue(ReturnEnum, TEXT("EPMT_Event.ToolTip"), TEXT("Event - event related modules"));
			MetaData->SetValue(ReturnEnum, TEXT("EPMT_General.DisplayName"), TEXT("General"));
			MetaData->SetValue(ReturnEnum, TEXT("EPMT_General.ToolTip"), TEXT("General - all emitter types can use it"));
			MetaData->SetValue(ReturnEnum, TEXT("EPMT_Light.DisplayName"), TEXT("Light"));
			MetaData->SetValue(ReturnEnum, TEXT("EPMT_Light.ToolTip"), TEXT("Light related modules"));
			MetaData->SetValue(ReturnEnum, TEXT("EPMT_Required.DisplayName"), TEXT("Required"));
			MetaData->SetValue(ReturnEnum, TEXT("EPMT_Required.ToolTip"), TEXT("Required - all emitter types REQUIRE it"));
			MetaData->SetValue(ReturnEnum, TEXT("EPMT_Spawn.DisplayName"), TEXT("Spawn"));
			MetaData->SetValue(ReturnEnum, TEXT("EPMT_Spawn.ToolTip"), TEXT("Spawn - all emitter types REQUIRE it"));
			MetaData->SetValue(ReturnEnum, TEXT("EPMT_Trail.DisplayName"), TEXT("Trail"));
			MetaData->SetValue(ReturnEnum, TEXT("EPMT_Trail.ToolTip"), TEXT("Trail - only applied to trail emitters"));
			MetaData->SetValue(ReturnEnum, TEXT("EPMT_TypeData.DisplayName"), TEXT("Type Data"));
			MetaData->SetValue(ReturnEnum, TEXT("EPMT_TypeData.ToolTip"), TEXT("TypeData - TypeData modules"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModule.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("ModuleType\n   Indicates the kind of emitter the module can be applied to.\n   ie, EPMT_Beam - only applies to beam emitters.\n\n   The TypeData field is present to speed up finding the TypeData module."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EModuleType_CRC() { return 1041975809U; }
	UScriptStruct* Z_Construct_UScriptStruct_FParticleRandomSeedInfo()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FParticleRandomSeedInfo_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("ParticleRandomSeedInfo"), sizeof(FParticleRandomSeedInfo), Get_Z_Construct_UScriptStruct_FParticleRandomSeedInfo_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ParticleRandomSeedInfo"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FParticleRandomSeedInfo>, EStructFlags(0x00000001));
			UProperty* NewProp_RandomSeeds = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RandomSeeds"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(RandomSeeds, FParticleRandomSeedInfo), 0x0000000000000001);
			UProperty* NewProp_RandomSeeds_Inner = new(EC_InternalUseOnlyConstructor, NewProp_RandomSeeds, TEXT("RandomSeeds"), RF_Public|RF_Transient|RF_Native) UIntProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bRandomlySelectSeedArray, FParticleRandomSeedInfo, uint8);
			UProperty* NewProp_bRandomlySelectSeedArray = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bRandomlySelectSeedArray"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bRandomlySelectSeedArray, FParticleRandomSeedInfo), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bRandomlySelectSeedArray, FParticleRandomSeedInfo), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bResetSeedOnEmitterLooping, FParticleRandomSeedInfo, uint8);
			UProperty* NewProp_bResetSeedOnEmitterLooping = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bResetSeedOnEmitterLooping"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bResetSeedOnEmitterLooping, FParticleRandomSeedInfo), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bResetSeedOnEmitterLooping, FParticleRandomSeedInfo), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bInstanceSeedIsIndex, FParticleRandomSeedInfo, uint8);
			UProperty* NewProp_bInstanceSeedIsIndex = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bInstanceSeedIsIndex"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bInstanceSeedIsIndex, FParticleRandomSeedInfo), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bInstanceSeedIsIndex, FParticleRandomSeedInfo), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bGetSeedFromInstance, FParticleRandomSeedInfo, uint8);
			UProperty* NewProp_bGetSeedFromInstance = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bGetSeedFromInstance"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bGetSeedFromInstance, FParticleRandomSeedInfo), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bGetSeedFromInstance, FParticleRandomSeedInfo), sizeof(uint8), false);
			UProperty* NewProp_ParameterName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ParameterName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(ParameterName, FParticleRandomSeedInfo), 0x0000000000000001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModule.h"));
			MetaData->SetValue(NewProp_RandomSeeds, TEXT("Category"), TEXT("ParticleRandomSeedInfo"));
			MetaData->SetValue(NewProp_RandomSeeds, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModule.h"));
			MetaData->SetValue(NewProp_RandomSeeds, TEXT("ToolTip"), TEXT("The random seed values to utilize for the module.\nMore than 1 means the instance will randomly select one."));
			MetaData->SetValue(NewProp_bRandomlySelectSeedArray, TEXT("Category"), TEXT("ParticleRandomSeedInfo"));
			MetaData->SetValue(NewProp_bRandomlySelectSeedArray, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModule.h"));
			MetaData->SetValue(NewProp_bRandomlySelectSeedArray, TEXT("ToolTip"), TEXT("If true, then randomly select a seed entry from the RandomSeeds array"));
			MetaData->SetValue(NewProp_bResetSeedOnEmitterLooping, TEXT("Category"), TEXT("ParticleRandomSeedInfo"));
			MetaData->SetValue(NewProp_bResetSeedOnEmitterLooping, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModule.h"));
			MetaData->SetValue(NewProp_bResetSeedOnEmitterLooping, TEXT("ToolTip"), TEXT("If true, then reset the seed upon the emitter looping.\nFor looping environmental effects this should likely be set to false to avoid\na repeating pattern."));
			MetaData->SetValue(NewProp_bInstanceSeedIsIndex, TEXT("Category"), TEXT("ParticleRandomSeedInfo"));
			MetaData->SetValue(NewProp_bInstanceSeedIsIndex, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModule.h"));
			MetaData->SetValue(NewProp_bInstanceSeedIsIndex, TEXT("ToolTip"), TEXT("If true, the seed value retrieved from the instance will be an\nindex into the array of seeds."));
			MetaData->SetValue(NewProp_bGetSeedFromInstance, TEXT("Category"), TEXT("ParticleRandomSeedInfo"));
			MetaData->SetValue(NewProp_bGetSeedFromInstance, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModule.h"));
			MetaData->SetValue(NewProp_bGetSeedFromInstance, TEXT("ToolTip"), TEXT("If true, the module will attempt to get the seed from the owner\ninstance. If that fails, it will fall back to getting it from\nthe RandomSeeds array."));
			MetaData->SetValue(NewProp_ParameterName, TEXT("Category"), TEXT("ParticleRandomSeedInfo"));
			MetaData->SetValue(NewProp_ParameterName, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModule.h"));
			MetaData->SetValue(NewProp_ParameterName, TEXT("ToolTip"), TEXT("The name to expose to the placed instances for setting this seed"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FParticleRandomSeedInfo_CRC() { return 2614900109U; }
	UScriptStruct* Z_Construct_UScriptStruct_FParticleCurvePair()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FParticleCurvePair_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("ParticleCurvePair"), sizeof(FParticleCurvePair), Get_Z_Construct_UScriptStruct_FParticleCurvePair_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ParticleCurvePair"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FParticleCurvePair>, EStructFlags(0x00000001));
			UProperty* NewProp_CurveObject = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CurveObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(CurveObject, FParticleCurvePair), 0x0000000000000000, Z_Construct_UClass_UObject_NoRegister());
			UProperty* NewProp_CurveName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CurveName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(CurveName, FParticleCurvePair), 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModule.h"));
			MetaData->SetValue(NewProp_CurveObject, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModule.h"));
			MetaData->SetValue(NewProp_CurveName, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModule.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FParticleCurvePair_CRC() { return 2072805652U; }
	UClass* Z_Construct_UClass_UParticleModule_NoRegister()
	{
		return UParticleModule::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModule()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModule::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20081081;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_ModuleEditorColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ModuleEditorColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ModuleEditorColor, UParticleModule), 0x0000000800000001, Z_Construct_UScriptStruct_FColor());
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_LODValidity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LODValidity"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(LODValidity, UParticleModule), 0x0000000000000000);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bRequiresLoopingNotification, UParticleModule, uint8);
				UProperty* NewProp_bRequiresLoopingNotification = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bRequiresLoopingNotification"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bRequiresLoopingNotification, UParticleModule), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bRequiresLoopingNotification, UParticleModule), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSupportsRandomSeed, UParticleModule, uint8);
				UProperty* NewProp_bSupportsRandomSeed = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bSupportsRandomSeed"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSupportsRandomSeed, UParticleModule), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bSupportsRandomSeed, UParticleModule), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(LODDuplicate, UParticleModule, uint8);
				UProperty* NewProp_LODDuplicate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LODDuplicate"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(LODDuplicate, UParticleModule), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(LODDuplicate, UParticleModule), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEditable, UParticleModule, uint8);
				UProperty* NewProp_bEditable = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bEditable"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEditable, UParticleModule), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bEditable, UParticleModule), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnabled, UParticleModule, uint8);
				UProperty* NewProp_bEnabled = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bEnabled"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnabled, UParticleModule), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bEnabled, UParticleModule), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSupported3DDrawMode, UParticleModule, uint8);
				UProperty* NewProp_bSupported3DDrawMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bSupported3DDrawMode"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSupported3DDrawMode, UParticleModule), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bSupported3DDrawMode, UParticleModule), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(b3DDrawMode, UParticleModule, uint8);
				UProperty* NewProp_b3DDrawMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("b3DDrawMode"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(b3DDrawMode, UParticleModule), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(b3DDrawMode, UParticleModule), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCurvesAsColor, UParticleModule, uint8);
				UProperty* NewProp_bCurvesAsColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bCurvesAsColor"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCurvesAsColor, UParticleModule), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bCurvesAsColor, UParticleModule), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUpdateForGPUEmitter, UParticleModule, uint8);
				UProperty* NewProp_bUpdateForGPUEmitter = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUpdateForGPUEmitter"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUpdateForGPUEmitter, UParticleModule), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bUpdateForGPUEmitter, UParticleModule), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bFinalUpdateModule, UParticleModule, uint8);
				UProperty* NewProp_bFinalUpdateModule = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bFinalUpdateModule"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bFinalUpdateModule, UParticleModule), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bFinalUpdateModule, UParticleModule), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUpdateModule, UParticleModule, uint8);
				UProperty* NewProp_bUpdateModule = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUpdateModule"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUpdateModule, UParticleModule), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bUpdateModule, UParticleModule), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSpawnModule, UParticleModule, uint8);
				UProperty* NewProp_bSpawnModule = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bSpawnModule"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSpawnModule, UParticleModule), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bSpawnModule, UParticleModule), sizeof(uint8), false);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/ParticleModule.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModule.h"));
				MetaData->SetValue(NewProp_ModuleEditorColor, TEXT("Category"), TEXT("Cascade"));
				MetaData->SetValue(NewProp_ModuleEditorColor, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModule.h"));
				MetaData->SetValue(NewProp_ModuleEditorColor, TEXT("ToolTip"), TEXT("The color to draw the modules curves in the curve editor.\n    If bCurvesAsColor is true, it overrides this value."));
				MetaData->SetValue(NewProp_LODValidity, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModule.h"));
				MetaData->SetValue(NewProp_LODValidity, TEXT("ToolTip"), TEXT("The LOD levels this module is present in.\nBit-flags are used to indicate validity for a given LOD level.\nFor example, if\n        ((1 << Level) & LODValidity) != 0\nthen the module is used in that LOD."));
				MetaData->SetValue(NewProp_bRequiresLoopingNotification, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModule.h"));
				MetaData->SetValue(NewProp_bRequiresLoopingNotification, TEXT("ToolTip"), TEXT("If true, the module should be told when looping"));
				MetaData->SetValue(NewProp_bSupportsRandomSeed, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModule.h"));
				MetaData->SetValue(NewProp_bSupportsRandomSeed, TEXT("ToolTip"), TEXT("If true, the module supports RandomSeed setting"));
				MetaData->SetValue(NewProp_LODDuplicate, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModule.h"));
				MetaData->SetValue(NewProp_LODDuplicate, TEXT("ToolTip"), TEXT("If true, this flag indicates that auto-generation for LOD will result in\nan exact duplicate of the module, regardless of the percentage.\nIf false, it will result in a module with different settings."));
				MetaData->SetValue(NewProp_bEditable, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModule.h"));
				MetaData->SetValue(NewProp_bEditable, TEXT("ToolTip"), TEXT("If true, the module has had editing enabled on it"));
				MetaData->SetValue(NewProp_bEnabled, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModule.h"));
				MetaData->SetValue(NewProp_bEnabled, TEXT("ToolTip"), TEXT("If true, the module is enabled"));
				MetaData->SetValue(NewProp_bSupported3DDrawMode, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModule.h"));
				MetaData->SetValue(NewProp_bSupported3DDrawMode, TEXT("ToolTip"), TEXT("If true, the module supports rendering a 3D visualization helper"));
				MetaData->SetValue(NewProp_b3DDrawMode, TEXT("Category"), TEXT("Cascade"));
				MetaData->SetValue(NewProp_b3DDrawMode, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModule.h"));
				MetaData->SetValue(NewProp_b3DDrawMode, TEXT("ToolTip"), TEXT("If true, the module should render its 3D visualization helper"));
				MetaData->SetValue(NewProp_bCurvesAsColor, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModule.h"));
				MetaData->SetValue(NewProp_bCurvesAsColor, TEXT("ToolTip"), TEXT("If true, the module displays FVector curves as colors"));
				MetaData->SetValue(NewProp_bUpdateForGPUEmitter, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModule.h"));
				MetaData->SetValue(NewProp_bUpdateForGPUEmitter, TEXT("ToolTip"), TEXT("If true, the module performs operations on particles during update and/or final update for GPU emitters"));
				MetaData->SetValue(NewProp_bFinalUpdateModule, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModule.h"));
				MetaData->SetValue(NewProp_bFinalUpdateModule, TEXT("ToolTip"), TEXT("If true, the module performs operations on particles during final update"));
				MetaData->SetValue(NewProp_bUpdateModule, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModule.h"));
				MetaData->SetValue(NewProp_bUpdateModule, TEXT("ToolTip"), TEXT("If true, the module performs operations on particles during Updating"));
				MetaData->SetValue(NewProp_bSpawnModule, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModule.h"));
				MetaData->SetValue(NewProp_bSpawnModule, TEXT("ToolTip"), TEXT("If true, the module performs operations on particles during Spawning"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModule(Z_Construct_UClass_UParticleModule, TEXT("UParticleModule"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModule);
	UClass* Z_Construct_UClass_UParticleModuleAccelerationBase_NoRegister()
	{
		return UParticleModuleAccelerationBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleAccelerationBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModule();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleAccelerationBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20001081;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAlwaysInWorldSpace, UParticleModuleAccelerationBase, uint8);
				UProperty* NewProp_bAlwaysInWorldSpace = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAlwaysInWorldSpace"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAlwaysInWorldSpace, UParticleModuleAccelerationBase), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bAlwaysInWorldSpace, UParticleModuleAccelerationBase), sizeof(uint8), false);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Acceleration"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Acceleration/ParticleModuleAccelerationBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Acceleration/ParticleModuleAccelerationBase.h"));
				MetaData->SetValue(NewProp_bAlwaysInWorldSpace, TEXT("Category"), TEXT("Acceleration"));
				MetaData->SetValue(NewProp_bAlwaysInWorldSpace, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Acceleration/ParticleModuleAccelerationBase.h"));
				MetaData->SetValue(NewProp_bAlwaysInWorldSpace, TEXT("ToolTip"), TEXT("If true, then treat the acceleration as world-space"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleAccelerationBase(Z_Construct_UClass_UParticleModuleAccelerationBase, TEXT("UParticleModuleAccelerationBase"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleAccelerationBase);
	UClass* Z_Construct_UClass_UParticleModuleAcceleration_NoRegister()
	{
		return UParticleModuleAcceleration::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleAcceleration()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleAccelerationBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleAcceleration::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bApplyOwnerScale, UParticleModuleAcceleration, uint8);
				UProperty* NewProp_bApplyOwnerScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bApplyOwnerScale"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bApplyOwnerScale, UParticleModuleAcceleration), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bApplyOwnerScale, UParticleModuleAcceleration), sizeof(uint8), false);
				UProperty* NewProp_Acceleration = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Acceleration"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Acceleration, UParticleModuleAcceleration), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Acceleration"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Acceleration/ParticleModuleAcceleration.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Acceleration/ParticleModuleAcceleration.h"));
				MetaData->SetValue(NewProp_bApplyOwnerScale, TEXT("Category"), TEXT("Acceleration"));
				MetaData->SetValue(NewProp_bApplyOwnerScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Acceleration/ParticleModuleAcceleration.h"));
				MetaData->SetValue(NewProp_bApplyOwnerScale, TEXT("ToolTip"), TEXT("If true, then apply the particle system components scale\nto the acceleration value."));
				MetaData->SetValue(NewProp_Acceleration, TEXT("Category"), TEXT("Acceleration"));
				MetaData->SetValue(NewProp_Acceleration, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Acceleration/ParticleModuleAcceleration.h"));
				MetaData->SetValue(NewProp_Acceleration, TEXT("ToolTip"), TEXT("The initial acceleration of the particle.\nValue is obtained using the EmitterTime at particle spawn.\nEach frame, the current and base velocity of the particle\nis then updated using the formula\n        velocity += acceleration * DeltaTime\nwhere DeltaTime is the time passed since the last frame."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleAcceleration(Z_Construct_UClass_UParticleModuleAcceleration, TEXT("UParticleModuleAcceleration"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleAcceleration);
	UClass* Z_Construct_UClass_UParticleModuleAccelerationConstant_NoRegister()
	{
		return UParticleModuleAccelerationConstant::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleAccelerationConstant()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleAccelerationBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleAccelerationConstant::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20001080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Acceleration = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Acceleration"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Acceleration, UParticleModuleAccelerationConstant), 0x0000000000000001, Z_Construct_UScriptStruct_FVector());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Const Acceleration"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Acceleration Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Acceleration/ParticleModuleAccelerationConstant.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Acceleration/ParticleModuleAccelerationConstant.h"));
				MetaData->SetValue(NewProp_Acceleration, TEXT("Category"), TEXT("ParticleModuleAccelerationConstant"));
				MetaData->SetValue(NewProp_Acceleration, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Acceleration/ParticleModuleAccelerationConstant.h"));
				MetaData->SetValue(NewProp_Acceleration, TEXT("ToolTip"), TEXT("Constant acceleration for particles in this system."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleAccelerationConstant(Z_Construct_UClass_UParticleModuleAccelerationConstant, TEXT("UParticleModuleAccelerationConstant"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleAccelerationConstant);
	UClass* Z_Construct_UClass_UParticleModuleAccelerationDrag_NoRegister()
	{
		return UParticleModuleAccelerationDrag::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleAccelerationDrag()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleAccelerationBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleAccelerationDrag::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_DragCoefficient = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DragCoefficient"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(DragCoefficient, UParticleModuleAccelerationDrag), 0x0000000000080009, Z_Construct_UClass_UDistributionFloat_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Drag"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Acceleration Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Acceleration/ParticleModuleAccelerationDrag.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Acceleration/ParticleModuleAccelerationDrag.h"));
				MetaData->SetValue(NewProp_DragCoefficient, TEXT("Category"), TEXT("Drag"));
				MetaData->SetValue(NewProp_DragCoefficient, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_DragCoefficient, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Acceleration/ParticleModuleAccelerationDrag.h"));
				MetaData->SetValue(NewProp_DragCoefficient, TEXT("ToolTip"), TEXT("Per-particle drag coefficient. Evaluted using emitter time."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleAccelerationDrag(Z_Construct_UClass_UParticleModuleAccelerationDrag, TEXT("UParticleModuleAccelerationDrag"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleAccelerationDrag);
	UClass* Z_Construct_UClass_UParticleModuleAccelerationDragScaleOverLife_NoRegister()
	{
		return UParticleModuleAccelerationDragScaleOverLife::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleAccelerationDragScaleOverLife()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleAccelerationBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleAccelerationDragScaleOverLife::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_DragScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DragScale"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(DragScale, UParticleModuleAccelerationDragScaleOverLife), 0x0000000000080009, Z_Construct_UClass_UDistributionFloat_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Drag Scale/Life"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("UObject Acceleration Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Acceleration/ParticleModuleAccelerationDragScaleOverLife.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Acceleration/ParticleModuleAccelerationDragScaleOverLife.h"));
				MetaData->SetValue(NewProp_DragScale, TEXT("Category"), TEXT("Drag"));
				MetaData->SetValue(NewProp_DragScale, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_DragScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Acceleration/ParticleModuleAccelerationDragScaleOverLife.h"));
				MetaData->SetValue(NewProp_DragScale, TEXT("ToolTip"), TEXT("Per-particle drag scale. Evaluted using particle relative time."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleAccelerationDragScaleOverLife(Z_Construct_UClass_UParticleModuleAccelerationDragScaleOverLife, TEXT("UParticleModuleAccelerationDragScaleOverLife"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleAccelerationDragScaleOverLife);
	UClass* Z_Construct_UClass_UParticleModuleAccelerationOverLifetime_NoRegister()
	{
		return UParticleModuleAccelerationOverLifetime::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleAccelerationOverLifetime()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleAccelerationBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleAccelerationOverLifetime::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_AccelOverLife = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AccelOverLife"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(AccelOverLife, UParticleModuleAccelerationOverLifetime), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Acceleration/Life"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Acceleration/ParticleModuleAccelerationOverLifetime.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Acceleration/ParticleModuleAccelerationOverLifetime.h"));
				MetaData->SetValue(NewProp_AccelOverLife, TEXT("Category"), TEXT("Acceleration"));
				MetaData->SetValue(NewProp_AccelOverLife, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Acceleration/ParticleModuleAccelerationOverLifetime.h"));
				MetaData->SetValue(NewProp_AccelOverLife, TEXT("ToolTip"), TEXT("The acceleration of the particle over its lifetime.\nValue is obtained using the RelativeTime of the partice.\nThe current and base velocity values of the particle\nare then updated using the formula\n        velocity += acceleration* DeltaTime\nwhere DeltaTime is the time passed since the last frame."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleAccelerationOverLifetime(Z_Construct_UClass_UParticleModuleAccelerationOverLifetime, TEXT("UParticleModuleAccelerationOverLifetime"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleAccelerationOverLifetime);
	UClass* Z_Construct_UClass_UParticleModuleAttractorBase_NoRegister()
	{
		return UParticleModuleAttractorBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleAttractorBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModule();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleAttractorBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20001081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Attraction"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Attractor/ParticleModuleAttractorBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Attractor/ParticleModuleAttractorBase.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleAttractorBase(Z_Construct_UClass_UParticleModuleAttractorBase, TEXT("UParticleModuleAttractorBase"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleAttractorBase);
	UClass* Z_Construct_UClass_UParticleModuleAttractorLine_NoRegister()
	{
		return UParticleModuleAttractorLine::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleAttractorLine()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleAttractorBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleAttractorLine::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Strength = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Strength"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Strength, UParticleModuleAttractorLine), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				UProperty* NewProp_Range = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Range"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Range, UParticleModuleAttractorLine), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				UProperty* NewProp_EndPoint1 = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EndPoint1"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(EndPoint1, UParticleModuleAttractorLine), 0x0000000000000001, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_EndPoint0 = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EndPoint0"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(EndPoint0, UParticleModuleAttractorLine), 0x0000000000000001, Z_Construct_UScriptStruct_FVector());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Line Attractor"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Attractor/ParticleModuleAttractorLine.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Attractor/ParticleModuleAttractorLine.h"));
				MetaData->SetValue(NewProp_Strength, TEXT("Category"), TEXT("Attractor"));
				MetaData->SetValue(NewProp_Strength, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Attractor/ParticleModuleAttractorLine.h"));
				MetaData->SetValue(NewProp_Strength, TEXT("ToolTip"), TEXT("The strength of the line attractor."));
				MetaData->SetValue(NewProp_Range, TEXT("Category"), TEXT("Attractor"));
				MetaData->SetValue(NewProp_Range, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Attractor/ParticleModuleAttractorLine.h"));
				MetaData->SetValue(NewProp_Range, TEXT("ToolTip"), TEXT("The range of the line attractor."));
				MetaData->SetValue(NewProp_EndPoint1, TEXT("Category"), TEXT("Attractor"));
				MetaData->SetValue(NewProp_EndPoint1, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Attractor/ParticleModuleAttractorLine.h"));
				MetaData->SetValue(NewProp_EndPoint1, TEXT("ToolTip"), TEXT("The second endpoint of the line."));
				MetaData->SetValue(NewProp_EndPoint0, TEXT("Category"), TEXT("Attractor"));
				MetaData->SetValue(NewProp_EndPoint0, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Attractor/ParticleModuleAttractorLine.h"));
				MetaData->SetValue(NewProp_EndPoint0, TEXT("ToolTip"), TEXT("The first endpoint of the line."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleAttractorLine(Z_Construct_UClass_UParticleModuleAttractorLine, TEXT("UParticleModuleAttractorLine"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleAttractorLine);
	UEnum* Z_Construct_UEnum_Engine_EAttractorParticleSelectionMethod()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EAttractorParticleSelectionMethod_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EAttractorParticleSelectionMethod"), 0, Get_Z_Construct_UEnum_Engine_EAttractorParticleSelectionMethod_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EAttractorParticleSelectionMethod"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EAPSM_Random")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EAPSM_Sequential")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EAPSM_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("EAPSM_Random.DisplayName"), TEXT("Random"));
			MetaData->SetValue(ReturnEnum, TEXT("EAPSM_Sequential.DisplayName"), TEXT("Sequential"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Attractor/ParticleModuleAttractorParticle.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EAttractorParticleSelectionMethod_CRC() { return 1487195529U; }
	UClass* Z_Construct_UClass_UParticleModuleAttractorParticle_NoRegister()
	{
		return UParticleModuleAttractorParticle::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleAttractorParticle()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleAttractorBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleAttractorParticle::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_LastSelIndex = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LastSelIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(LastSelIndex, UParticleModuleAttractorParticle), 0x0000000000000000);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bInheritSourceVel, UParticleModuleAttractorParticle, uint8);
				UProperty* NewProp_bInheritSourceVel = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bInheritSourceVel"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bInheritSourceVel, UParticleModuleAttractorParticle), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bInheritSourceVel, UParticleModuleAttractorParticle), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bRenewSource, UParticleModuleAttractorParticle, uint8);
				UProperty* NewProp_bRenewSource = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bRenewSource"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bRenewSource, UParticleModuleAttractorParticle), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bRenewSource, UParticleModuleAttractorParticle), sizeof(uint8), false);
				UProperty* NewProp_SelectionMethod = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SelectionMethod"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(SelectionMethod, UParticleModuleAttractorParticle), 0x0000000000000001, Z_Construct_UEnum_Engine_EAttractorParticleSelectionMethod());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAffectBaseVelocity, UParticleModuleAttractorParticle, uint8);
				UProperty* NewProp_bAffectBaseVelocity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAffectBaseVelocity"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAffectBaseVelocity, UParticleModuleAttractorParticle), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bAffectBaseVelocity, UParticleModuleAttractorParticle), sizeof(uint8), false);
				UProperty* NewProp_Strength = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Strength"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Strength, UParticleModuleAttractorParticle), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bStrengthByDistance, UParticleModuleAttractorParticle, uint8);
				UProperty* NewProp_bStrengthByDistance = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bStrengthByDistance"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bStrengthByDistance, UParticleModuleAttractorParticle), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bStrengthByDistance, UParticleModuleAttractorParticle), sizeof(uint8), false);
				UProperty* NewProp_Range = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Range"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Range, UParticleModuleAttractorParticle), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				UProperty* NewProp_EmitterName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EmitterName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(EmitterName, UParticleModuleAttractorParticle), 0x0000000002000009);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Particle Attractor"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Attractor/ParticleModuleAttractorParticle.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Attractor/ParticleModuleAttractorParticle.h"));
				MetaData->SetValue(NewProp_LastSelIndex, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Attractor/ParticleModuleAttractorParticle.h"));
				MetaData->SetValue(NewProp_bInheritSourceVel, TEXT("Category"), TEXT("Attractor"));
				MetaData->SetValue(NewProp_bInheritSourceVel, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Attractor/ParticleModuleAttractorParticle.h"));
				MetaData->SetValue(NewProp_bInheritSourceVel, TEXT("ToolTip"), TEXT("Whether the particle should inherit the source veloctiy if it expires."));
				MetaData->SetValue(NewProp_bRenewSource, TEXT("Category"), TEXT("Attractor"));
				MetaData->SetValue(NewProp_bRenewSource, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Attractor/ParticleModuleAttractorParticle.h"));
				MetaData->SetValue(NewProp_bRenewSource, TEXT("ToolTip"), TEXT("Whether the particle should grab a new particle if it's source expires."));
				MetaData->SetValue(NewProp_SelectionMethod, TEXT("Category"), TEXT("Location"));
				MetaData->SetValue(NewProp_SelectionMethod, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Attractor/ParticleModuleAttractorParticle.h"));
				MetaData->SetValue(NewProp_SelectionMethod, TEXT("ToolTip"), TEXT("The method to use when selecting an attractor target particle from the emitter.\nOne of the following:\nRandom          - Randomly select a particle from the source emitter.\nSequential  - Select a particle using a sequential order."));
				MetaData->SetValue(NewProp_bAffectBaseVelocity, TEXT("Category"), TEXT("Attractor"));
				MetaData->SetValue(NewProp_bAffectBaseVelocity, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Attractor/ParticleModuleAttractorParticle.h"));
				MetaData->SetValue(NewProp_bAffectBaseVelocity, TEXT("ToolTip"), TEXT("If true, the velocity adjustment will be applied to the base velocity."));
				MetaData->SetValue(NewProp_Strength, TEXT("Category"), TEXT("Attractor"));
				MetaData->SetValue(NewProp_Strength, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Attractor/ParticleModuleAttractorParticle.h"));
				MetaData->SetValue(NewProp_Strength, TEXT("ToolTip"), TEXT("The strength of the attraction (negative values repel).\nParticle-life relative if StrengthByDistance is false."));
				MetaData->SetValue(NewProp_bStrengthByDistance, TEXT("Category"), TEXT("Attractor"));
				MetaData->SetValue(NewProp_bStrengthByDistance, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Attractor/ParticleModuleAttractorParticle.h"));
				MetaData->SetValue(NewProp_bStrengthByDistance, TEXT("ToolTip"), TEXT("The strength curve is a function of distance or of time."));
				MetaData->SetValue(NewProp_Range, TEXT("Category"), TEXT("Attractor"));
				MetaData->SetValue(NewProp_Range, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Attractor/ParticleModuleAttractorParticle.h"));
				MetaData->SetValue(NewProp_Range, TEXT("ToolTip"), TEXT("The radial range of the attraction around the source particle.\nParticle-life relative."));
				MetaData->SetValue(NewProp_EmitterName, TEXT("Category"), TEXT("Attractor"));
				MetaData->SetValue(NewProp_EmitterName, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Attractor/ParticleModuleAttractorParticle.h"));
				MetaData->SetValue(NewProp_EmitterName, TEXT("ToolTip"), TEXT("The source emitter for attractors"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleAttractorParticle(Z_Construct_UClass_UParticleModuleAttractorParticle, TEXT("UParticleModuleAttractorParticle"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleAttractorParticle);
	UClass* Z_Construct_UClass_UParticleModuleAttractorPoint_NoRegister()
	{
		return UParticleModuleAttractorPoint::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleAttractorPoint()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleAttractorBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleAttractorPoint::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(Negative_Z, UParticleModuleAttractorPoint, uint8);
				UProperty* NewProp_Negative_Z = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Negative_Z"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Negative_Z, UParticleModuleAttractorPoint), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(Negative_Z, UParticleModuleAttractorPoint), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(Negative_Y, UParticleModuleAttractorPoint, uint8);
				UProperty* NewProp_Negative_Y = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Negative_Y"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Negative_Y, UParticleModuleAttractorPoint), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(Negative_Y, UParticleModuleAttractorPoint), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(Negative_X, UParticleModuleAttractorPoint, uint8);
				UProperty* NewProp_Negative_X = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Negative_X"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Negative_X, UParticleModuleAttractorPoint), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(Negative_X, UParticleModuleAttractorPoint), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(Positive_Z, UParticleModuleAttractorPoint, uint8);
				UProperty* NewProp_Positive_Z = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Positive_Z"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Positive_Z, UParticleModuleAttractorPoint), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(Positive_Z, UParticleModuleAttractorPoint), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(Positive_Y, UParticleModuleAttractorPoint, uint8);
				UProperty* NewProp_Positive_Y = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Positive_Y"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Positive_Y, UParticleModuleAttractorPoint), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(Positive_Y, UParticleModuleAttractorPoint), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(Positive_X, UParticleModuleAttractorPoint, uint8);
				UProperty* NewProp_Positive_X = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Positive_X"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Positive_X, UParticleModuleAttractorPoint), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(Positive_X, UParticleModuleAttractorPoint), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseWorldSpacePosition, UParticleModuleAttractorPoint, uint8);
				UProperty* NewProp_bUseWorldSpacePosition = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUseWorldSpacePosition"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseWorldSpacePosition, UParticleModuleAttractorPoint), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bUseWorldSpacePosition, UParticleModuleAttractorPoint), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverrideVelocity, UParticleModuleAttractorPoint, uint8);
				UProperty* NewProp_bOverrideVelocity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bOverrideVelocity"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverrideVelocity, UParticleModuleAttractorPoint), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bOverrideVelocity, UParticleModuleAttractorPoint), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAffectBaseVelocity, UParticleModuleAttractorPoint, uint8);
				UProperty* NewProp_bAffectBaseVelocity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAffectBaseVelocity"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAffectBaseVelocity, UParticleModuleAttractorPoint), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bAffectBaseVelocity, UParticleModuleAttractorPoint), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(StrengthByDistance, UParticleModuleAttractorPoint, uint8);
				UProperty* NewProp_StrengthByDistance = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StrengthByDistance"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(StrengthByDistance, UParticleModuleAttractorPoint), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(StrengthByDistance, UParticleModuleAttractorPoint), sizeof(uint8), false);
				UProperty* NewProp_Strength = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Strength"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Strength, UParticleModuleAttractorPoint), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				UProperty* NewProp_Range = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Range"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Range, UParticleModuleAttractorPoint), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				UProperty* NewProp_Position = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Position"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Position, UParticleModuleAttractorPoint), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Point Attractor"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Attractor/ParticleModuleAttractorPoint.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Attractor/ParticleModuleAttractorPoint.h"));
				MetaData->SetValue(NewProp_Negative_Z, TEXT("Category"), TEXT("Attractor"));
				MetaData->SetValue(NewProp_Negative_Z, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Attractor/ParticleModuleAttractorPoint.h"));
				MetaData->SetValue(NewProp_Negative_Z, TEXT("ToolTip"), TEXT("Whether particles can move along the negative Z axis."));
				MetaData->SetValue(NewProp_Negative_Y, TEXT("Category"), TEXT("Attractor"));
				MetaData->SetValue(NewProp_Negative_Y, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Attractor/ParticleModuleAttractorPoint.h"));
				MetaData->SetValue(NewProp_Negative_Y, TEXT("ToolTip"), TEXT("Whether particles can move along the negative Y axis."));
				MetaData->SetValue(NewProp_Negative_X, TEXT("Category"), TEXT("Attractor"));
				MetaData->SetValue(NewProp_Negative_X, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Attractor/ParticleModuleAttractorPoint.h"));
				MetaData->SetValue(NewProp_Negative_X, TEXT("ToolTip"), TEXT("Whether particles can move along the negative X axis."));
				MetaData->SetValue(NewProp_Positive_Z, TEXT("Category"), TEXT("Attractor"));
				MetaData->SetValue(NewProp_Positive_Z, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Attractor/ParticleModuleAttractorPoint.h"));
				MetaData->SetValue(NewProp_Positive_Z, TEXT("ToolTip"), TEXT("Whether particles can move along the positive Z axis."));
				MetaData->SetValue(NewProp_Positive_Y, TEXT("Category"), TEXT("Attractor"));
				MetaData->SetValue(NewProp_Positive_Y, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Attractor/ParticleModuleAttractorPoint.h"));
				MetaData->SetValue(NewProp_Positive_Y, TEXT("ToolTip"), TEXT("Whether particles can move along the positive Y axis."));
				MetaData->SetValue(NewProp_Positive_X, TEXT("Category"), TEXT("Attractor"));
				MetaData->SetValue(NewProp_Positive_X, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Attractor/ParticleModuleAttractorPoint.h"));
				MetaData->SetValue(NewProp_Positive_X, TEXT("ToolTip"), TEXT("Whether particles can move along the positive X axis."));
				MetaData->SetValue(NewProp_bUseWorldSpacePosition, TEXT("Category"), TEXT("Attractor"));
				MetaData->SetValue(NewProp_bUseWorldSpacePosition, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Attractor/ParticleModuleAttractorPoint.h"));
				MetaData->SetValue(NewProp_bUseWorldSpacePosition, TEXT("ToolTip"), TEXT("If true, treat the position as world space.  So don't transform the the point to localspace."));
				MetaData->SetValue(NewProp_bOverrideVelocity, TEXT("Category"), TEXT("Attractor"));
				MetaData->SetValue(NewProp_bOverrideVelocity, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Attractor/ParticleModuleAttractorPoint.h"));
				MetaData->SetValue(NewProp_bOverrideVelocity, TEXT("ToolTip"), TEXT("If true, set the velocity."));
				MetaData->SetValue(NewProp_bAffectBaseVelocity, TEXT("Category"), TEXT("Attractor"));
				MetaData->SetValue(NewProp_bAffectBaseVelocity, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Attractor/ParticleModuleAttractorPoint.h"));
				MetaData->SetValue(NewProp_bAffectBaseVelocity, TEXT("ToolTip"), TEXT("If true, the velocity adjustment will be applied to the base velocity."));
				MetaData->SetValue(NewProp_StrengthByDistance, TEXT("Category"), TEXT("Attractor"));
				MetaData->SetValue(NewProp_StrengthByDistance, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Attractor/ParticleModuleAttractorPoint.h"));
				MetaData->SetValue(NewProp_StrengthByDistance, TEXT("ToolTip"), TEXT("The strength curve is a function of distance or of time."));
				MetaData->SetValue(NewProp_Strength, TEXT("Category"), TEXT("Attractor"));
				MetaData->SetValue(NewProp_Strength, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Attractor/ParticleModuleAttractorPoint.h"));
				MetaData->SetValue(NewProp_Strength, TEXT("ToolTip"), TEXT("The strength of the point attractor."));
				MetaData->SetValue(NewProp_Range, TEXT("Category"), TEXT("Attractor"));
				MetaData->SetValue(NewProp_Range, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Attractor/ParticleModuleAttractorPoint.h"));
				MetaData->SetValue(NewProp_Range, TEXT("ToolTip"), TEXT("The radial range of the attractor."));
				MetaData->SetValue(NewProp_Position, TEXT("Category"), TEXT("Attractor"));
				MetaData->SetValue(NewProp_Position, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Attractor/ParticleModuleAttractorPoint.h"));
				MetaData->SetValue(NewProp_Position, TEXT("ToolTip"), TEXT("The position of the point attractor from the source of the emitter."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleAttractorPoint(Z_Construct_UClass_UParticleModuleAttractorPoint, TEXT("UParticleModuleAttractorPoint"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleAttractorPoint);
	UClass* Z_Construct_UClass_UParticleModuleAttractorPointGravity_NoRegister()
	{
		return UParticleModuleAttractorPointGravity::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleAttractorPointGravity()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleAttractorBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleAttractorPointGravity::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20801080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Strength = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Strength"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Strength, UParticleModuleAttractorPointGravity), 0x0000000002080009, Z_Construct_UClass_UDistributionFloat_NoRegister());
				UProperty* NewProp_Radius = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Radius"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Radius, UParticleModuleAttractorPointGravity), 0x0000000000000001);
				UProperty* NewProp_Position = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Position"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Position, UParticleModuleAttractorPointGravity), 0x0000000000000001, Z_Construct_UScriptStruct_FVector());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Point Gravity"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Attractor/ParticleModuleAttractorPointGravity.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Attractor/ParticleModuleAttractorPointGravity.h"));
				MetaData->SetValue(NewProp_Strength, TEXT("Category"), TEXT("PointGravitySource"));
				MetaData->SetValue(NewProp_Strength, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_Strength, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Attractor/ParticleModuleAttractorPointGravity.h"));
				MetaData->SetValue(NewProp_Strength, TEXT("ToolTip"), TEXT("The strength of the point source."));
				MetaData->SetValue(NewProp_Radius, TEXT("Category"), TEXT("PointGravitySource"));
				MetaData->SetValue(NewProp_Radius, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Attractor/ParticleModuleAttractorPointGravity.h"));
				MetaData->SetValue(NewProp_Radius, TEXT("ToolTip"), TEXT("The distance at which the influence of the point begins to falloff."));
				MetaData->SetValue(NewProp_Position, TEXT("Category"), TEXT("PointGravitySource"));
				MetaData->SetValue(NewProp_Position, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Attractor/ParticleModuleAttractorPointGravity.h"));
				MetaData->SetValue(NewProp_Position, TEXT("ToolTip"), TEXT("The position of the point gravity source."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleAttractorPointGravity(Z_Construct_UClass_UParticleModuleAttractorPointGravity, TEXT("UParticleModuleAttractorPointGravity"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleAttractorPointGravity);
	UEnum* Z_Construct_UEnum_Engine_Beam2SourceTargetTangentMethod()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_Beam2SourceTargetTangentMethod_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("Beam2SourceTargetTangentMethod"), 0, Get_Z_Construct_UEnum_Engine_Beam2SourceTargetTangentMethod_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Beam2SourceTargetTangentMethod"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PEB2STTM_Direct")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PEB2STTM_UserSet")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PEB2STTM_Distribution")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PEB2STTM_Emitter")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PEB2STTM_MAX")), 4));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamBase.h"));
			MetaData->SetValue(ReturnEnum, TEXT("PEB2STTM_Direct.DisplayName"), TEXT("Direct"));
			MetaData->SetValue(ReturnEnum, TEXT("PEB2STTM_Direct.ToolTip"), TEXT("Direct - a direct line between source and target."));
			MetaData->SetValue(ReturnEnum, TEXT("PEB2STTM_Distribution.DisplayName"), TEXT("Distribution"));
			MetaData->SetValue(ReturnEnum, TEXT("PEB2STTM_Distribution.ToolTip"), TEXT("Distribution - use the distribution."));
			MetaData->SetValue(ReturnEnum, TEXT("PEB2STTM_Emitter.DisplayName"), TEXT("Emitter"));
			MetaData->SetValue(ReturnEnum, TEXT("PEB2STTM_Emitter.ToolTip"), TEXT("Emitter        - use the emitter direction."));
			MetaData->SetValue(ReturnEnum, TEXT("PEB2STTM_UserSet.DisplayName"), TEXT("User Set"));
			MetaData->SetValue(ReturnEnum, TEXT("PEB2STTM_UserSet.ToolTip"), TEXT("UserSet        - use the user set value."));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("The method to use in determining the source/target tangent."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_Beam2SourceTargetTangentMethod_CRC() { return 3233132403U; }
	UEnum* Z_Construct_UEnum_Engine_Beam2SourceTargetMethod()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_Beam2SourceTargetMethod_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("Beam2SourceTargetMethod"), 0, Get_Z_Construct_UEnum_Engine_Beam2SourceTargetMethod_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Beam2SourceTargetMethod"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PEB2STM_Default")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PEB2STM_UserSet")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PEB2STM_Emitter")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PEB2STM_Particle")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PEB2STM_Actor")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PEB2STM_MAX")), 5));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamBase.h"));
			MetaData->SetValue(ReturnEnum, TEXT("PEB2STM_Actor.DisplayName"), TEXT("Actor"));
			MetaData->SetValue(ReturnEnum, TEXT("PEB2STM_Actor.ToolTip"), TEXT("Actor          - use the actor as the source/target.\n    The name of the actor should be set in <Source/Target>Name."));
			MetaData->SetValue(ReturnEnum, TEXT("PEB2STM_Default.DisplayName"), TEXT("Default"));
			MetaData->SetValue(ReturnEnum, TEXT("PEB2STM_Default.ToolTip"), TEXT("Default        - use the distribution.\n    This is the fallback for when other modes can't be resolved."));
			MetaData->SetValue(ReturnEnum, TEXT("PEB2STM_Emitter.DisplayName"), TEXT("Emitter"));
			MetaData->SetValue(ReturnEnum, TEXT("PEB2STM_Emitter.ToolTip"), TEXT("Emitter        - use the emitter position as the source/target."));
			MetaData->SetValue(ReturnEnum, TEXT("PEB2STM_Particle.Hidden"), TEXT(""));
			MetaData->SetValue(ReturnEnum, TEXT("PEB2STM_Particle.ToolTip"), TEXT("Particle       - use the particles from a given emitter in the system.\n    The name of the emitter should be set in <Source/Target>Name."));
			MetaData->SetValue(ReturnEnum, TEXT("PEB2STM_UserSet.DisplayName"), TEXT("User Set"));
			MetaData->SetValue(ReturnEnum, TEXT("PEB2STM_UserSet.ToolTip"), TEXT("UserSet        - use the user set value.\n    Primarily intended for weapon effects."));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("The method to use in determining the source/target."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_Beam2SourceTargetMethod_CRC() { return 1785165533U; }
	UClass* Z_Construct_UClass_UParticleModuleBeamBase_NoRegister()
	{
		return UParticleModuleBeamBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleBeamBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModule();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleBeamBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20001081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Beam"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Beam/ParticleModuleBeamBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamBase.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleBeamBase(Z_Construct_UClass_UParticleModuleBeamBase, TEXT("UParticleModuleBeamBase"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleBeamBase);
	UEnum* Z_Construct_UEnum_Engine_BeamModifierType()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_BeamModifierType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("BeamModifierType"), 0, Get_Z_Construct_UEnum_Engine_BeamModifierType_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BeamModifierType"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PEB2MT_Source")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PEB2MT_Target")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PEB2MT_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamModifier.h"));
			MetaData->SetValue(ReturnEnum, TEXT("PEB2MT_Source.DisplayName"), TEXT("Source"));
			MetaData->SetValue(ReturnEnum, TEXT("PEB2MT_Source.ToolTip"), TEXT("Modify the source of the beam."));
			MetaData->SetValue(ReturnEnum, TEXT("PEB2MT_Target.DisplayName"), TEXT("Target"));
			MetaData->SetValue(ReturnEnum, TEXT("PEB2MT_Target.ToolTip"), TEXT("Modify the target of the beam."));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("What to modify."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_BeamModifierType_CRC() { return 3833726921U; }
	UScriptStruct* Z_Construct_UScriptStruct_FBeamModifierOptions()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FBeamModifierOptions_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("BeamModifierOptions"), sizeof(FBeamModifierOptions), Get_Z_Construct_UScriptStruct_FBeamModifierOptions_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BeamModifierOptions"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FBeamModifierOptions>, EStructFlags(0x00000001));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLock, FBeamModifierOptions, uint8);
			UProperty* NewProp_bLock = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bLock"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLock, FBeamModifierOptions), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bLock, FBeamModifierOptions), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bScale, FBeamModifierOptions, uint8);
			UProperty* NewProp_bScale = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bScale"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bScale, FBeamModifierOptions), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bScale, FBeamModifierOptions), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bModify, FBeamModifierOptions, uint8);
			UProperty* NewProp_bModify = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bModify"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bModify, FBeamModifierOptions), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bModify, FBeamModifierOptions), sizeof(uint8), false);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamModifier.h"));
			MetaData->SetValue(NewProp_bLock, TEXT("Category"), TEXT("BeamModifierOptions"));
			MetaData->SetValue(NewProp_bLock, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamModifier.h"));
			MetaData->SetValue(NewProp_bLock, TEXT("ToolTip"), TEXT("If true, lock the modifier to the life of the particle."));
			MetaData->SetValue(NewProp_bScale, TEXT("Category"), TEXT("BeamModifierOptions"));
			MetaData->SetValue(NewProp_bScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamModifier.h"));
			MetaData->SetValue(NewProp_bScale, TEXT("ToolTip"), TEXT("If true, scale the associated value by the given value."));
			MetaData->SetValue(NewProp_bModify, TEXT("Category"), TEXT("BeamModifierOptions"));
			MetaData->SetValue(NewProp_bModify, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamModifier.h"));
			MetaData->SetValue(NewProp_bModify, TEXT("ToolTip"), TEXT("If true, modify the value associated with this grouping."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FBeamModifierOptions_CRC() { return 25849047U; }
	UClass* Z_Construct_UClass_UParticleModuleBeamModifier_NoRegister()
	{
		return UParticleModuleBeamModifier::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleBeamModifier()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleBeamBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleBeamModifier::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20801080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Strength = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Strength"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Strength, UParticleModuleBeamModifier), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				UProperty* NewProp_StrengthOptions = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StrengthOptions"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(StrengthOptions, UParticleModuleBeamModifier), 0x0000000000000001, Z_Construct_UScriptStruct_FBeamModifierOptions());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAbsoluteTangent, UParticleModuleBeamModifier, uint8);
				UProperty* NewProp_bAbsoluteTangent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAbsoluteTangent"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAbsoluteTangent, UParticleModuleBeamModifier), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bAbsoluteTangent, UParticleModuleBeamModifier), sizeof(uint8), false);
				UProperty* NewProp_Tangent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Tangent"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Tangent, UParticleModuleBeamModifier), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
				UProperty* NewProp_TangentOptions = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TangentOptions"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TangentOptions, UParticleModuleBeamModifier), 0x0000000000000001, Z_Construct_UScriptStruct_FBeamModifierOptions());
				UProperty* NewProp_Position = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Position"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Position, UParticleModuleBeamModifier), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
				UProperty* NewProp_PositionOptions = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PositionOptions"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PositionOptions, UParticleModuleBeamModifier), 0x0000000000000001, Z_Construct_UScriptStruct_FBeamModifierOptions());
				UProperty* NewProp_ModifierType = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ModifierType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(ModifierType, UParticleModuleBeamModifier), 0x0000000000000001, Z_Construct_UEnum_Engine_BeamModifierType());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Beam Modifier"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Beam/ParticleModuleBeamModifier.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamModifier.h"));
				MetaData->SetValue(NewProp_Strength, TEXT("Category"), TEXT("Strength"));
				MetaData->SetValue(NewProp_Strength, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamModifier.h"));
				MetaData->SetValue(NewProp_Strength, TEXT("ToolTip"), TEXT("The value to use when modifying the Strength."));
				MetaData->SetValue(NewProp_StrengthOptions, TEXT("Category"), TEXT("Strength"));
				MetaData->SetValue(NewProp_StrengthOptions, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamModifier.h"));
				MetaData->SetValue(NewProp_StrengthOptions, TEXT("ToolTip"), TEXT("The options associated with the Strength."));
				MetaData->SetValue(NewProp_bAbsoluteTangent, TEXT("Category"), TEXT("Tangent"));
				MetaData->SetValue(NewProp_bAbsoluteTangent, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamModifier.h"));
				MetaData->SetValue(NewProp_bAbsoluteTangent, TEXT("ToolTip"), TEXT("If true, don't transform the tangent modifier into the tangent basis."));
				MetaData->SetValue(NewProp_Tangent, TEXT("Category"), TEXT("Tangent"));
				MetaData->SetValue(NewProp_Tangent, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamModifier.h"));
				MetaData->SetValue(NewProp_Tangent, TEXT("ToolTip"), TEXT("The value to use when modifying the Tangent."));
				MetaData->SetValue(NewProp_TangentOptions, TEXT("Category"), TEXT("Tangent"));
				MetaData->SetValue(NewProp_TangentOptions, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamModifier.h"));
				MetaData->SetValue(NewProp_TangentOptions, TEXT("ToolTip"), TEXT("The options associated with the Tangent."));
				MetaData->SetValue(NewProp_Position, TEXT("Category"), TEXT("Position"));
				MetaData->SetValue(NewProp_Position, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamModifier.h"));
				MetaData->SetValue(NewProp_Position, TEXT("ToolTip"), TEXT("The value to use when modifying the position."));
				MetaData->SetValue(NewProp_PositionOptions, TEXT("Category"), TEXT("Position"));
				MetaData->SetValue(NewProp_PositionOptions, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamModifier.h"));
				MetaData->SetValue(NewProp_PositionOptions, TEXT("ToolTip"), TEXT("The options associated with the position."));
				MetaData->SetValue(NewProp_ModifierType, TEXT("Category"), TEXT("Modifier"));
				MetaData->SetValue(NewProp_ModifierType, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamModifier.h"));
				MetaData->SetValue(NewProp_ModifierType, TEXT("ToolTip"), TEXT("Whether this module modifies the Source or the Target."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleBeamModifier(Z_Construct_UClass_UParticleModuleBeamModifier, TEXT("UParticleModuleBeamModifier"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleBeamModifier);
	UClass* Z_Construct_UClass_UParticleModuleBeamNoise_NoRegister()
	{
		return UParticleModuleBeamNoise::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleBeamNoise()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleBeamBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleBeamNoise::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_NoiseScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NoiseScale"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(NoiseScale, UParticleModuleBeamNoise), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bApplyNoiseScale, UParticleModuleBeamNoise, uint8);
				UProperty* NewProp_bApplyNoiseScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bApplyNoiseScale"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bApplyNoiseScale, UParticleModuleBeamNoise), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bApplyNoiseScale, UParticleModuleBeamNoise), sizeof(uint8), false);
				UProperty* NewProp_FrequencyDistance = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FrequencyDistance"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(FrequencyDistance, UParticleModuleBeamNoise), 0x0000000000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTargetNoise, UParticleModuleBeamNoise, uint8);
				UProperty* NewProp_bTargetNoise = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bTargetNoise"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTargetNoise, UParticleModuleBeamNoise), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bTargetNoise, UParticleModuleBeamNoise), sizeof(uint8), false);
				UProperty* NewProp_NoiseTessellation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NoiseTessellation"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(NoiseTessellation, UParticleModuleBeamNoise), 0x0000000000000001);
				UProperty* NewProp_NoiseTangentStrength = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NoiseTangentStrength"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(NoiseTangentStrength, UParticleModuleBeamNoise), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseNoiseTangents, UParticleModuleBeamNoise, uint8);
				UProperty* NewProp_bUseNoiseTangents = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUseNoiseTangents"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseNoiseTangents, UParticleModuleBeamNoise), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bUseNoiseTangents, UParticleModuleBeamNoise), sizeof(uint8), false);
				UProperty* NewProp_NoiseTension = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NoiseTension"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(NoiseTension, UParticleModuleBeamNoise), 0x0000000000000001);
				UProperty* NewProp_NoiseLockTime = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NoiseLockTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(NoiseLockTime, UParticleModuleBeamNoise), 0x0000000000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOscillate, UParticleModuleBeamNoise, uint8);
				UProperty* NewProp_bOscillate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bOscillate"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOscillate, UParticleModuleBeamNoise), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bOscillate, UParticleModuleBeamNoise), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bNoiseLock, UParticleModuleBeamNoise, uint8);
				UProperty* NewProp_bNoiseLock = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bNoiseLock"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bNoiseLock, UParticleModuleBeamNoise), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bNoiseLock, UParticleModuleBeamNoise), sizeof(uint8), false);
				UProperty* NewProp_NoiseLockRadius = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NoiseLockRadius"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(NoiseLockRadius, UParticleModuleBeamNoise), 0x0000000000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSmooth, UParticleModuleBeamNoise, uint8);
				UProperty* NewProp_bSmooth = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bSmooth"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSmooth, UParticleModuleBeamNoise), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bSmooth, UParticleModuleBeamNoise), sizeof(uint8), false);
				UProperty* NewProp_NoiseSpeed = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NoiseSpeed"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(NoiseSpeed, UParticleModuleBeamNoise), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bNRScaleEmitterTime, UParticleModuleBeamNoise, uint8);
				UProperty* NewProp_bNRScaleEmitterTime = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bNRScaleEmitterTime"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bNRScaleEmitterTime, UParticleModuleBeamNoise), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bNRScaleEmitterTime, UParticleModuleBeamNoise), sizeof(uint8), false);
				UProperty* NewProp_NoiseRangeScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NoiseRangeScale"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(NoiseRangeScale, UParticleModuleBeamNoise), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				UProperty* NewProp_NoiseRange = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NoiseRange"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(NoiseRange, UParticleModuleBeamNoise), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
				UProperty* NewProp_Frequency_LowRange = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Frequency_LowRange"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Frequency_LowRange, UParticleModuleBeamNoise), 0x0000000000000001);
				UProperty* NewProp_Frequency = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Frequency"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Frequency, UParticleModuleBeamNoise), 0x0000000000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLowFreq_Enabled, UParticleModuleBeamNoise, uint8);
				UProperty* NewProp_bLowFreq_Enabled = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bLowFreq_Enabled"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLowFreq_Enabled, UParticleModuleBeamNoise), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bLowFreq_Enabled, UParticleModuleBeamNoise), sizeof(uint8), false);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Noise"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Beam/ParticleModuleBeamNoise.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamNoise.h"));
				MetaData->SetValue(NewProp_NoiseScale, TEXT("Category"), TEXT("LowFreq"));
				MetaData->SetValue(NewProp_NoiseScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamNoise.h"));
				MetaData->SetValue(NewProp_NoiseScale, TEXT("ToolTip"), TEXT("The scale factor to apply to noise range.\nThe lookup value is determined by dividing the number of noise points present by the\nmaximum number of noise points (Frequency)."));
				MetaData->SetValue(NewProp_bApplyNoiseScale, TEXT("Category"), TEXT("LowFreq"));
				MetaData->SetValue(NewProp_bApplyNoiseScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamNoise.h"));
				MetaData->SetValue(NewProp_bApplyNoiseScale, TEXT("ToolTip"), TEXT("If true, apply the noise scale to the beam."));
				MetaData->SetValue(NewProp_FrequencyDistance, TEXT("Category"), TEXT("LowFreq"));
				MetaData->SetValue(NewProp_FrequencyDistance, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamNoise.h"));
				MetaData->SetValue(NewProp_FrequencyDistance, TEXT("ToolTip"), TEXT("The distance at which to deposit noise points.\nIf 0.0, then use the static frequency value.\nIf not, distribute noise points at the given distance, up to the static Frequency value.\nAt that point, evenly distribute them along the beam."));
				MetaData->SetValue(NewProp_bTargetNoise, TEXT("Category"), TEXT("LowFreq"));
				MetaData->SetValue(NewProp_bTargetNoise, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamNoise.h"));
				MetaData->SetValue(NewProp_bTargetNoise, TEXT("ToolTip"), TEXT("Whether to apply noise to the target point (or end of line in distance mode...)\nIf true, the beam could potentially 'leave' the target..."));
				MetaData->SetValue(NewProp_NoiseTessellation, TEXT("Category"), TEXT("LowFreq"));
				MetaData->SetValue(NewProp_NoiseTessellation, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamNoise.h"));
				MetaData->SetValue(NewProp_NoiseTessellation, TEXT("ToolTip"), TEXT("The amount of tessellation between noise points."));
				MetaData->SetValue(NewProp_NoiseTangentStrength, TEXT("Category"), TEXT("LowFreq"));
				MetaData->SetValue(NewProp_NoiseTangentStrength, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamNoise.h"));
				MetaData->SetValue(NewProp_NoiseTangentStrength, TEXT("ToolTip"), TEXT("The strength of noise tangents, if enabled."));
				MetaData->SetValue(NewProp_bUseNoiseTangents, TEXT("Category"), TEXT("LowFreq"));
				MetaData->SetValue(NewProp_bUseNoiseTangents, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamNoise.h"));
				MetaData->SetValue(NewProp_bUseNoiseTangents, TEXT("ToolTip"), TEXT("If true, calculate tangents at each noise point."));
				MetaData->SetValue(NewProp_NoiseTension, TEXT("Category"), TEXT("LowFreq"));
				MetaData->SetValue(NewProp_NoiseTension, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamNoise.h"));
				MetaData->SetValue(NewProp_NoiseTension, TEXT("ToolTip"), TEXT("The tension to apply to the tessellated noise line."));
				MetaData->SetValue(NewProp_NoiseLockTime, TEXT("Category"), TEXT("LowFreq"));
				MetaData->SetValue(NewProp_NoiseLockTime, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamNoise.h"));
				MetaData->SetValue(NewProp_NoiseLockTime, TEXT("ToolTip"), TEXT("How long the  noise points should be locked - 0.0 indicates forever."));
				MetaData->SetValue(NewProp_bOscillate, TEXT("Category"), TEXT("LowFreq"));
				MetaData->SetValue(NewProp_bOscillate, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamNoise.h"));
				MetaData->SetValue(NewProp_bOscillate, TEXT("ToolTip"), TEXT("Whether the noise points should be oscillate."));
				MetaData->SetValue(NewProp_bNoiseLock, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamNoise.h"));
				MetaData->SetValue(NewProp_bNoiseLock, TEXT("ToolTip"), TEXT("INTERNAL - Whether the noise points should be locked."));
				MetaData->SetValue(NewProp_NoiseLockRadius, TEXT("Category"), TEXT("LowFreq"));
				MetaData->SetValue(NewProp_NoiseLockRadius, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamNoise.h"));
				MetaData->SetValue(NewProp_NoiseLockRadius, TEXT("ToolTip"), TEXT("Default target-point information to use if the beam method is endpoint."));
				MetaData->SetValue(NewProp_bSmooth, TEXT("Category"), TEXT("LowFreq"));
				MetaData->SetValue(NewProp_bSmooth, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamNoise.h"));
				MetaData->SetValue(NewProp_bSmooth, TEXT("ToolTip"), TEXT("Whether the noise movement should be smooth or 'jerky'."));
				MetaData->SetValue(NewProp_NoiseSpeed, TEXT("Category"), TEXT("LowFreq"));
				MetaData->SetValue(NewProp_NoiseSpeed, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamNoise.h"));
				MetaData->SetValue(NewProp_NoiseSpeed, TEXT("ToolTip"), TEXT("The speed with which to move each noise point."));
				MetaData->SetValue(NewProp_bNRScaleEmitterTime, TEXT("Category"), TEXT("LowFreq"));
				MetaData->SetValue(NewProp_bNRScaleEmitterTime, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamNoise.h"));
				MetaData->SetValue(NewProp_bNRScaleEmitterTime, TEXT("ToolTip"), TEXT("If true,  the NoiseRangeScale will be grabbed based on the emitter time.\nIf false, the NoiseRangeScale will be grabbed based on the particle time."));
				MetaData->SetValue(NewProp_NoiseRangeScale, TEXT("Category"), TEXT("LowFreq"));
				MetaData->SetValue(NewProp_NoiseRangeScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamNoise.h"));
				MetaData->SetValue(NewProp_NoiseRangeScale, TEXT("ToolTip"), TEXT("A scale factor that will be applied to the noise range."));
				MetaData->SetValue(NewProp_NoiseRange, TEXT("Category"), TEXT("LowFreq"));
				MetaData->SetValue(NewProp_NoiseRange, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamNoise.h"));
				MetaData->SetValue(NewProp_NoiseRange, TEXT("ToolTip"), TEXT("The noise point ranges."));
				MetaData->SetValue(NewProp_Frequency_LowRange, TEXT("Category"), TEXT("LowFreq"));
				MetaData->SetValue(NewProp_Frequency_LowRange, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamNoise.h"));
				MetaData->SetValue(NewProp_Frequency_LowRange, TEXT("ToolTip"), TEXT("If not 0, then the frequency will select a random value in the range\n        [Frequency_LowRange..Frequency]"));
				MetaData->SetValue(NewProp_Frequency, TEXT("Category"), TEXT("LowFreq"));
				MetaData->SetValue(NewProp_Frequency, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamNoise.h"));
				MetaData->SetValue(NewProp_Frequency, TEXT("ToolTip"), TEXT("The frequency of noise points."));
				MetaData->SetValue(NewProp_bLowFreq_Enabled, TEXT("Category"), TEXT("LowFreq"));
				MetaData->SetValue(NewProp_bLowFreq_Enabled, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamNoise.h"));
				MetaData->SetValue(NewProp_bLowFreq_Enabled, TEXT("ToolTip"), TEXT("Is low frequency noise enabled."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleBeamNoise(Z_Construct_UClass_UParticleModuleBeamNoise, TEXT("UParticleModuleBeamNoise"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleBeamNoise);
	UClass* Z_Construct_UClass_UParticleModuleBeamSource_NoRegister()
	{
		return UParticleModuleBeamSource::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleBeamSource()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleBeamBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleBeamSource::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLockSourceStength, UParticleModuleBeamSource, uint8);
				UProperty* NewProp_bLockSourceStength = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bLockSourceStength"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLockSourceStength, UParticleModuleBeamSource), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bLockSourceStength, UParticleModuleBeamSource), sizeof(uint8), false);
				UProperty* NewProp_SourceStrength = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SourceStrength"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SourceStrength, UParticleModuleBeamSource), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLockSourceTangent, UParticleModuleBeamSource, uint8);
				UProperty* NewProp_bLockSourceTangent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bLockSourceTangent"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLockSourceTangent, UParticleModuleBeamSource), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bLockSourceTangent, UParticleModuleBeamSource), sizeof(uint8), false);
				UProperty* NewProp_SourceTangent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SourceTangent"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SourceTangent, UParticleModuleBeamSource), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
				UProperty* NewProp_SourceTangentMethod = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SourceTangentMethod"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(SourceTangentMethod, UParticleModuleBeamSource), 0x0000000000000001, Z_Construct_UEnum_Engine_Beam2SourceTargetTangentMethod());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLockSource, UParticleModuleBeamSource, uint8);
				UProperty* NewProp_bLockSource = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bLockSource"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLockSource, UParticleModuleBeamSource), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bLockSource, UParticleModuleBeamSource), sizeof(uint8), false);
				UProperty* NewProp_Source = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Source"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Source, UParticleModuleBeamSource), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSourceAbsolute, UParticleModuleBeamSource, uint8);
				UProperty* NewProp_bSourceAbsolute = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bSourceAbsolute"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSourceAbsolute, UParticleModuleBeamSource), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bSourceAbsolute, UParticleModuleBeamSource), sizeof(uint8), false);
				UProperty* NewProp_SourceName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SourceName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(SourceName, UParticleModuleBeamSource), 0x0000000000000001);
				UProperty* NewProp_SourceMethod = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SourceMethod"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(SourceMethod, UParticleModuleBeamSource), 0x0000000000000001, Z_Construct_UEnum_Engine_Beam2SourceTargetMethod());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Source"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Beam/ParticleModuleBeamSource.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamSource.h"));
				MetaData->SetValue(NewProp_bLockSourceStength, TEXT("Category"), TEXT("Source"));
				MetaData->SetValue(NewProp_bLockSourceStength, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamSource.h"));
				MetaData->SetValue(NewProp_bLockSourceStength, TEXT("ToolTip"), TEXT("Whether to lock the source to the life of the particle."));
				MetaData->SetValue(NewProp_SourceStrength, TEXT("Category"), TEXT("Source"));
				MetaData->SetValue(NewProp_SourceStrength, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamSource.h"));
				MetaData->SetValue(NewProp_SourceStrength, TEXT("ToolTip"), TEXT("The strength of the tangent from the source point for each beam."));
				MetaData->SetValue(NewProp_bLockSourceTangent, TEXT("Category"), TEXT("Source"));
				MetaData->SetValue(NewProp_bLockSourceTangent, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamSource.h"));
				MetaData->SetValue(NewProp_bLockSourceTangent, TEXT("ToolTip"), TEXT("Whether to lock the source to the life of the particle."));
				MetaData->SetValue(NewProp_SourceTangent, TEXT("Category"), TEXT("Source"));
				MetaData->SetValue(NewProp_SourceTangent, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamSource.h"));
				MetaData->SetValue(NewProp_SourceTangent, TEXT("ToolTip"), TEXT("The tangent for the source point for each beam."));
				MetaData->SetValue(NewProp_SourceTangentMethod, TEXT("Category"), TEXT("Source"));
				MetaData->SetValue(NewProp_SourceTangentMethod, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamSource.h"));
				MetaData->SetValue(NewProp_SourceTangentMethod, TEXT("ToolTip"), TEXT("The method to use for the source tangent."));
				MetaData->SetValue(NewProp_bLockSource, TEXT("Category"), TEXT("Source"));
				MetaData->SetValue(NewProp_bLockSource, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamSource.h"));
				MetaData->SetValue(NewProp_bLockSource, TEXT("ToolTip"), TEXT("Whether to lock the source to the life of the particle."));
				MetaData->SetValue(NewProp_Source, TEXT("Category"), TEXT("Source"));
				MetaData->SetValue(NewProp_Source, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamSource.h"));
				MetaData->SetValue(NewProp_Source, TEXT("ToolTip"), TEXT("Default source-point to use."));
				MetaData->SetValue(NewProp_bSourceAbsolute, TEXT("Category"), TEXT("Source"));
				MetaData->SetValue(NewProp_bSourceAbsolute, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamSource.h"));
				MetaData->SetValue(NewProp_bSourceAbsolute, TEXT("ToolTip"), TEXT("Whether to treat the as an absolute position in world space."));
				MetaData->SetValue(NewProp_SourceName, TEXT("Category"), TEXT("Source"));
				MetaData->SetValue(NewProp_SourceName, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamSource.h"));
				MetaData->SetValue(NewProp_SourceName, TEXT("ToolTip"), TEXT("The strength of the tangent from the source point for each beam."));
				MetaData->SetValue(NewProp_SourceMethod, TEXT("Category"), TEXT("Source"));
				MetaData->SetValue(NewProp_SourceMethod, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamSource.h"));
				MetaData->SetValue(NewProp_SourceMethod, TEXT("ToolTip"), TEXT("The method flag."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleBeamSource(Z_Construct_UClass_UParticleModuleBeamSource, TEXT("UParticleModuleBeamSource"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleBeamSource);
	UClass* Z_Construct_UClass_UParticleModuleBeamTarget_NoRegister()
	{
		return UParticleModuleBeamTarget::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleBeamTarget()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleBeamBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleBeamTarget::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_LockRadius = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LockRadius"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(LockRadius, UParticleModuleBeamTarget), 0x0000000000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLockTargetStength, UParticleModuleBeamTarget, uint8);
				UProperty* NewProp_bLockTargetStength = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bLockTargetStength"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLockTargetStength, UParticleModuleBeamTarget), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bLockTargetStength, UParticleModuleBeamTarget), sizeof(uint8), false);
				UProperty* NewProp_TargetStrength = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TargetStrength"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TargetStrength, UParticleModuleBeamTarget), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLockTargetTangent, UParticleModuleBeamTarget, uint8);
				UProperty* NewProp_bLockTargetTangent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bLockTargetTangent"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLockTargetTangent, UParticleModuleBeamTarget), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bLockTargetTangent, UParticleModuleBeamTarget), sizeof(uint8), false);
				UProperty* NewProp_TargetTangent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TargetTangent"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TargetTangent, UParticleModuleBeamTarget), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
				UProperty* NewProp_TargetTangentMethod = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TargetTangentMethod"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(TargetTangentMethod, UParticleModuleBeamTarget), 0x0000000000000001, Z_Construct_UEnum_Engine_Beam2SourceTargetTangentMethod());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLockTarget, UParticleModuleBeamTarget, uint8);
				UProperty* NewProp_bLockTarget = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bLockTarget"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLockTarget, UParticleModuleBeamTarget), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bLockTarget, UParticleModuleBeamTarget), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTargetAbsolute, UParticleModuleBeamTarget, uint8);
				UProperty* NewProp_bTargetAbsolute = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bTargetAbsolute"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTargetAbsolute, UParticleModuleBeamTarget), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bTargetAbsolute, UParticleModuleBeamTarget), sizeof(uint8), false);
				UProperty* NewProp_Target = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Target"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Target, UParticleModuleBeamTarget), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
				UProperty* NewProp_TargetName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TargetName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(TargetName, UParticleModuleBeamTarget), 0x0000000000000001);
				UProperty* NewProp_TargetMethod = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TargetMethod"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(TargetMethod, UParticleModuleBeamTarget), 0x0000000000000001, Z_Construct_UEnum_Engine_Beam2SourceTargetMethod());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Target"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Beam/ParticleModuleBeamTarget.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamTarget.h"));
				MetaData->SetValue(NewProp_LockRadius, TEXT("Category"), TEXT("Target"));
				MetaData->SetValue(NewProp_LockRadius, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamTarget.h"));
				MetaData->SetValue(NewProp_LockRadius, TEXT("ToolTip"), TEXT("Default target-point information to use if the beam method is endpoint."));
				MetaData->SetValue(NewProp_bLockTargetStength, TEXT("Category"), TEXT("Target"));
				MetaData->SetValue(NewProp_bLockTargetStength, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamTarget.h"));
				MetaData->SetValue(NewProp_bLockTargetStength, TEXT("ToolTip"), TEXT("Whether to lock the Target to the life of the particle."));
				MetaData->SetValue(NewProp_TargetStrength, TEXT("Category"), TEXT("Target"));
				MetaData->SetValue(NewProp_TargetStrength, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamTarget.h"));
				MetaData->SetValue(NewProp_TargetStrength, TEXT("ToolTip"), TEXT("The strength of the tangent from the Target point for each beam."));
				MetaData->SetValue(NewProp_bLockTargetTangent, TEXT("Category"), TEXT("Target"));
				MetaData->SetValue(NewProp_bLockTargetTangent, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamTarget.h"));
				MetaData->SetValue(NewProp_bLockTargetTangent, TEXT("ToolTip"), TEXT("Whether to lock the Target to the life of the particle."));
				MetaData->SetValue(NewProp_TargetTangent, TEXT("Category"), TEXT("Target"));
				MetaData->SetValue(NewProp_TargetTangent, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamTarget.h"));
				MetaData->SetValue(NewProp_TargetTangent, TEXT("ToolTip"), TEXT("The tangent for the Target point for each beam."));
				MetaData->SetValue(NewProp_TargetTangentMethod, TEXT("Category"), TEXT("Target"));
				MetaData->SetValue(NewProp_TargetTangentMethod, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamTarget.h"));
				MetaData->SetValue(NewProp_TargetTangentMethod, TEXT("ToolTip"), TEXT("The method to use for the Target tangent."));
				MetaData->SetValue(NewProp_bLockTarget, TEXT("Category"), TEXT("Target"));
				MetaData->SetValue(NewProp_bLockTarget, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamTarget.h"));
				MetaData->SetValue(NewProp_bLockTarget, TEXT("ToolTip"), TEXT("Whether to lock the Target to the life of the particle."));
				MetaData->SetValue(NewProp_bTargetAbsolute, TEXT("Category"), TEXT("Target"));
				MetaData->SetValue(NewProp_bTargetAbsolute, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamTarget.h"));
				MetaData->SetValue(NewProp_bTargetAbsolute, TEXT("ToolTip"), TEXT("Whether to treat the as an absolute position in world space."));
				MetaData->SetValue(NewProp_Target, TEXT("Category"), TEXT("Target"));
				MetaData->SetValue(NewProp_Target, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamTarget.h"));
				MetaData->SetValue(NewProp_Target, TEXT("ToolTip"), TEXT("Default target-point information to use if the beam method is endpoint."));
				MetaData->SetValue(NewProp_TargetName, TEXT("Category"), TEXT("Target"));
				MetaData->SetValue(NewProp_TargetName, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamTarget.h"));
				MetaData->SetValue(NewProp_TargetName, TEXT("ToolTip"), TEXT("The target point sources of each beam, when using the end point method."));
				MetaData->SetValue(NewProp_TargetMethod, TEXT("Category"), TEXT("Target"));
				MetaData->SetValue(NewProp_TargetMethod, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamTarget.h"));
				MetaData->SetValue(NewProp_TargetMethod, TEXT("ToolTip"), TEXT("The method flag."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleBeamTarget(Z_Construct_UClass_UParticleModuleBeamTarget, TEXT("UParticleModuleBeamTarget"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleBeamTarget);
	UClass* Z_Construct_UClass_UParticleModuleCameraBase_NoRegister()
	{
		return UParticleModuleCameraBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleCameraBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModule();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleCameraBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20001081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Camera"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Camera/ParticleModuleCameraBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Camera/ParticleModuleCameraBase.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleCameraBase(Z_Construct_UClass_UParticleModuleCameraBase, TEXT("UParticleModuleCameraBase"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleCameraBase);
	UEnum* Z_Construct_UEnum_Engine_EParticleCameraOffsetUpdateMethod()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EParticleCameraOffsetUpdateMethod_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EParticleCameraOffsetUpdateMethod"), 0, Get_Z_Construct_UEnum_Engine_EParticleCameraOffsetUpdateMethod_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EParticleCameraOffsetUpdateMethod"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPCOUM_DirectSet")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPCOUM_Additive")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPCOUM_Scalar")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPCOUM_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("EPCOUM_Additive.DisplayName"), TEXT("Additive"));
			MetaData->SetValue(ReturnEnum, TEXT("EPCOUM_DirectSet.DisplayName"), TEXT("Direct Set"));
			MetaData->SetValue(ReturnEnum, TEXT("EPCOUM_Scalar.DisplayName"), TEXT("Scalar"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Camera/ParticleModuleCameraOffset.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("The update method for the offset"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EParticleCameraOffsetUpdateMethod_CRC() { return 2231698062U; }
	UClass* Z_Construct_UClass_UParticleModuleCameraOffset_NoRegister()
	{
		return UParticleModuleCameraOffset::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleCameraOffset()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleCameraBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleCameraOffset::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20801080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_UpdateMethod = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UpdateMethod"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(UpdateMethod, UParticleModuleCameraOffset), 0x0000000000000001, Z_Construct_UEnum_Engine_EParticleCameraOffsetUpdateMethod());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSpawnTimeOnly, UParticleModuleCameraOffset, uint8);
				UProperty* NewProp_bSpawnTimeOnly = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bSpawnTimeOnly"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSpawnTimeOnly, UParticleModuleCameraOffset), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bSpawnTimeOnly, UParticleModuleCameraOffset), sizeof(uint8), false);
				UProperty* NewProp_CameraOffset = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CameraOffset"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(CameraOffset, UParticleModuleCameraOffset), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Camera Offset"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Camera/ParticleModuleCameraOffset.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Camera/ParticleModuleCameraOffset.h"));
				MetaData->SetValue(NewProp_UpdateMethod, TEXT("Category"), TEXT("Camera"));
				MetaData->SetValue(NewProp_UpdateMethod, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Camera/ParticleModuleCameraOffset.h"));
				MetaData->SetValue(NewProp_UpdateMethod, TEXT("ToolTip"), TEXT("How to update the offset for this module.\nDirectSet - Set the value directly (overwrite any previous setting)\nAdditive  - Add the offset of this module to the existing offset\nScalar    - Scale the existing offset by the value of this module"));
				MetaData->SetValue(NewProp_bSpawnTimeOnly, TEXT("Category"), TEXT("Camera"));
				MetaData->SetValue(NewProp_bSpawnTimeOnly, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Camera/ParticleModuleCameraOffset.h"));
				MetaData->SetValue(NewProp_bSpawnTimeOnly, TEXT("ToolTip"), TEXT("If true, the offset will only be processed at spawn time"));
				MetaData->SetValue(NewProp_CameraOffset, TEXT("Category"), TEXT("Camera"));
				MetaData->SetValue(NewProp_CameraOffset, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Camera/ParticleModuleCameraOffset.h"));
				MetaData->SetValue(NewProp_CameraOffset, TEXT("ToolTip"), TEXT("The camera-relative offset to apply to sprite location"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleCameraOffset(Z_Construct_UClass_UParticleModuleCameraOffset, TEXT("UParticleModuleCameraOffset"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleCameraOffset);
	UEnum* Z_Construct_UEnum_Engine_EParticleCollisionComplete()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EParticleCollisionComplete_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EParticleCollisionComplete"), 0, Get_Z_Construct_UEnum_Engine_EParticleCollisionComplete_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EParticleCollisionComplete"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPCC_Kill")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPCC_Freeze")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPCC_HaltCollisions")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPCC_FreezeTranslation")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPCC_FreezeRotation")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPCC_FreezeMovement")), 5));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPCC_MAX")), 6));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("EPCC_Freeze.DisplayName"), TEXT("Freeze"));
			MetaData->SetValue(ReturnEnum, TEXT("EPCC_Freeze.ToolTip"), TEXT("Freeze the particle in place"));
			MetaData->SetValue(ReturnEnum, TEXT("EPCC_FreezeMovement.DisplayName"), TEXT("Freeze Movement"));
			MetaData->SetValue(ReturnEnum, TEXT("EPCC_FreezeMovement.ToolTip"), TEXT("Stop all movement of the particle"));
			MetaData->SetValue(ReturnEnum, TEXT("EPCC_FreezeRotation.DisplayName"), TEXT("Freeze Rotation"));
			MetaData->SetValue(ReturnEnum, TEXT("EPCC_FreezeRotation.ToolTip"), TEXT("Stop rotations of the particle"));
			MetaData->SetValue(ReturnEnum, TEXT("EPCC_FreezeTranslation.DisplayName"), TEXT("Freeze Translation"));
			MetaData->SetValue(ReturnEnum, TEXT("EPCC_FreezeTranslation.ToolTip"), TEXT("Stop translations of the particle"));
			MetaData->SetValue(ReturnEnum, TEXT("EPCC_HaltCollisions.DisplayName"), TEXT("Halt Collisions"));
			MetaData->SetValue(ReturnEnum, TEXT("EPCC_HaltCollisions.ToolTip"), TEXT("Stop collision checks, but keep updating"));
			MetaData->SetValue(ReturnEnum, TEXT("EPCC_Kill.DisplayName"), TEXT("Kill"));
			MetaData->SetValue(ReturnEnum, TEXT("EPCC_Kill.ToolTip"), TEXT("Kill the particle when MaxCollisions is reached"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Collision/ParticleModuleCollisionBase.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Flags indicating what to do with the particle when MaxCollisions is reached"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EParticleCollisionComplete_CRC() { return 1310685585U; }
	UClass* Z_Construct_UClass_UParticleModuleCollisionBase_NoRegister()
	{
		return UParticleModuleCollisionBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleCollisionBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModule();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleCollisionBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20001081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Collision"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Collision/ParticleModuleCollisionBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Collision/ParticleModuleCollisionBase.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleCollisionBase(Z_Construct_UClass_UParticleModuleCollisionBase, TEXT("UParticleModuleCollisionBase"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleCollisionBase);
	UClass* Z_Construct_UClass_UParticleModuleCollision_NoRegister()
	{
		return UParticleModuleCollision::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleCollision()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleCollisionBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleCollision::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_MaxCollisionDistance = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxCollisionDistance"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MaxCollisionDistance, UParticleModuleCollision), 0x0000000000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIgnoreSourceActor, UParticleModuleCollision, uint8);
				UProperty* NewProp_bIgnoreSourceActor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIgnoreSourceActor"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIgnoreSourceActor, UParticleModuleCollision), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bIgnoreSourceActor, UParticleModuleCollision), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCollideOnlyIfVisible, UParticleModuleCollision, uint8);
				UProperty* NewProp_bCollideOnlyIfVisible = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bCollideOnlyIfVisible"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCollideOnlyIfVisible, UParticleModuleCollision), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bCollideOnlyIfVisible, UParticleModuleCollision), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDropDetail, UParticleModuleCollision, uint8);
				UProperty* NewProp_bDropDetail = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bDropDetail"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDropDetail, UParticleModuleCollision), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bDropDetail, UParticleModuleCollision), sizeof(uint8), false);
				UProperty* NewProp_DelayAmount = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DelayAmount"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DelayAmount, UParticleModuleCollision), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				UProperty* NewProp_VerticalFudgeFactor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VerticalFudgeFactor"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(VerticalFudgeFactor, UParticleModuleCollision), 0x0000000000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOnlyVerticalNormalsDecrementCount, UParticleModuleCollision, uint8);
				UProperty* NewProp_bOnlyVerticalNormalsDecrementCount = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bOnlyVerticalNormalsDecrementCount"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOnlyVerticalNormalsDecrementCount, UParticleModuleCollision), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bOnlyVerticalNormalsDecrementCount, UParticleModuleCollision), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bPawnsDoNotDecrementCount, UParticleModuleCollision, uint8);
				UProperty* NewProp_bPawnsDoNotDecrementCount = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bPawnsDoNotDecrementCount"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bPawnsDoNotDecrementCount, UParticleModuleCollision), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bPawnsDoNotDecrementCount, UParticleModuleCollision), sizeof(uint8), false);
				UProperty* NewProp_DirScalar = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DirScalar"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DirScalar, UParticleModuleCollision), 0x0000000000000001);
				UProperty* NewProp_ParticleMass = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ParticleMass"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ParticleMass, UParticleModuleCollision), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bApplyPhysics, UParticleModuleCollision, uint8);
				UProperty* NewProp_bApplyPhysics = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bApplyPhysics"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bApplyPhysics, UParticleModuleCollision), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bApplyPhysics, UParticleModuleCollision), sizeof(uint8), false);
				UProperty* NewProp_CollisionTypes = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CollisionTypes"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(CollisionTypes, UParticleModuleCollision), 0x0000000000000001);
				UProperty* NewProp_CollisionTypes_Inner = new(EC_InternalUseOnlyConstructor, NewProp_CollisionTypes, TEXT("CollisionTypes"), RF_Public|RF_Transient|RF_Native) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UEnum_Engine_EObjectTypeQuery());
				UProperty* NewProp_CollisionCompletionOption = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CollisionCompletionOption"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(CollisionCompletionOption, UParticleModuleCollision), 0x0000000000000001, Z_Construct_UEnum_Engine_EParticleCollisionComplete());
				UProperty* NewProp_MaxCollisions = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxCollisions"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MaxCollisions, UParticleModuleCollision), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				UProperty* NewProp_DampingFactorRotation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DampingFactorRotation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DampingFactorRotation, UParticleModuleCollision), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
				UProperty* NewProp_DampingFactor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DampingFactor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DampingFactor, UParticleModuleCollision), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Collision"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Collision/ParticleModuleCollision.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Collision/ParticleModuleCollision.h"));
				MetaData->SetValue(NewProp_MaxCollisionDistance, TEXT("Category"), TEXT("Performance"));
				MetaData->SetValue(NewProp_MaxCollisionDistance, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Collision/ParticleModuleCollision.h"));
				MetaData->SetValue(NewProp_MaxCollisionDistance, TEXT("ToolTip"), TEXT("Max distance at which particle collision will occur."));
				MetaData->SetValue(NewProp_bIgnoreSourceActor, TEXT("Category"), TEXT("Collision"));
				MetaData->SetValue(NewProp_bIgnoreSourceActor, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Collision/ParticleModuleCollision.h"));
				MetaData->SetValue(NewProp_bIgnoreSourceActor, TEXT("ToolTip"), TEXT("If true, then the source actor is ignored in collision checks.\nDefaults to true."));
				MetaData->SetValue(NewProp_bCollideOnlyIfVisible, TEXT("Category"), TEXT("Performance"));
				MetaData->SetValue(NewProp_bCollideOnlyIfVisible, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Collision/ParticleModuleCollision.h"));
				MetaData->SetValue(NewProp_bCollideOnlyIfVisible, TEXT("ToolTip"), TEXT("If true, Particle collision only if particle system is currently being rendered."));
				MetaData->SetValue(NewProp_bDropDetail, TEXT("Category"), TEXT("Performance"));
				MetaData->SetValue(NewProp_bDropDetail, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Collision/ParticleModuleCollision.h"));
				MetaData->SetValue(NewProp_bDropDetail, TEXT("ToolTip"), TEXT("If true, when the World->bDropDetail flag is set, the module will be ignored."));
				MetaData->SetValue(NewProp_DelayAmount, TEXT("Category"), TEXT("Collision"));
				MetaData->SetValue(NewProp_DelayAmount, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Collision/ParticleModuleCollision.h"));
				MetaData->SetValue(NewProp_DelayAmount, TEXT("ToolTip"), TEXT("How long to delay before checking a particle for collisions.\nValue is retrieved using the EmitterTime.\nDuring update, the particle flag IgnoreCollisions will be\nset until the particle RelativeTime has surpassed the\nDelayAmount."));
				MetaData->SetValue(NewProp_VerticalFudgeFactor, TEXT("Category"), TEXT("Collision"));
				MetaData->SetValue(NewProp_VerticalFudgeFactor, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Collision/ParticleModuleCollision.h"));
				MetaData->SetValue(NewProp_VerticalFudgeFactor, TEXT("ToolTip"), TEXT("The fudge factor to use to determine vertical.\nTrue vertical will have a Hit.Normal.Z == 1.0\nThis will allow for Z components in the range of\n[1.0-VerticalFudgeFactor..1.0]\nto count as vertical collisions."));
				MetaData->SetValue(NewProp_bOnlyVerticalNormalsDecrementCount, TEXT("Category"), TEXT("Collision"));
				MetaData->SetValue(NewProp_bOnlyVerticalNormalsDecrementCount, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Collision/ParticleModuleCollision.h"));
				MetaData->SetValue(NewProp_bOnlyVerticalNormalsDecrementCount, TEXT("ToolTip"), TEXT("If true, then collisions that do not have a vertical hit\nnormal will still react, but UsedMaxCollisions count will\nnot be decremented. (ie., They don't 'count' as collisions)\nUseful for having particles come to rest on floors."));
				MetaData->SetValue(NewProp_bPawnsDoNotDecrementCount, TEXT("Category"), TEXT("Collision"));
				MetaData->SetValue(NewProp_bPawnsDoNotDecrementCount, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Collision/ParticleModuleCollision.h"));
				MetaData->SetValue(NewProp_bPawnsDoNotDecrementCount, TEXT("ToolTip"), TEXT("If true, then collisions with Pawns will still react, but\nthe UsedMaxCollisions count will not be decremented.\n(ie., They don't 'count' as collisions)"));
				MetaData->SetValue(NewProp_DirScalar, TEXT("Category"), TEXT("Collision"));
				MetaData->SetValue(NewProp_DirScalar, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Collision/ParticleModuleCollision.h"));
				MetaData->SetValue(NewProp_DirScalar, TEXT("ToolTip"), TEXT("The directional scalar value - used to scale the bounds to\n'assist' in avoiding inter-penetration or large gaps."));
				MetaData->SetValue(NewProp_ParticleMass, TEXT("Category"), TEXT("Collision"));
				MetaData->SetValue(NewProp_ParticleMass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Collision/ParticleModuleCollision.h"));
				MetaData->SetValue(NewProp_ParticleMass, TEXT("ToolTip"), TEXT("The mass of the particle - for use when bApplyPhysics is true.\nValue is obtained using the EmitterTime at particle spawn."));
				MetaData->SetValue(NewProp_bApplyPhysics, TEXT("Category"), TEXT("Collision"));
				MetaData->SetValue(NewProp_bApplyPhysics, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Collision/ParticleModuleCollision.h"));
				MetaData->SetValue(NewProp_bApplyPhysics, TEXT("ToolTip"), TEXT("If true, physic will be applied between a particle and the\nobject it collides with.\nThis is one-way - particle --> object. The particle does\nnot have physics applied to it - it just generates an\nimpulse applied to the object it collides with."));
				MetaData->SetValue(NewProp_CollisionTypes, TEXT("Category"), TEXT("Collision"));
				MetaData->SetValue(NewProp_CollisionTypes, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Collision/ParticleModuleCollision.h"));
				MetaData->SetValue(NewProp_CollisionTypes, TEXT("ToolTip"), TEXT("Which ObjectTypes to collide with"));
				MetaData->SetValue(NewProp_CollisionCompletionOption, TEXT("Category"), TEXT("Collision"));
				MetaData->SetValue(NewProp_CollisionCompletionOption, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Collision/ParticleModuleCollision.h"));
				MetaData->SetValue(NewProp_CollisionCompletionOption, TEXT("ToolTip"), TEXT("What to do once a particles MaxCollisions is reached.\nOne of the following:\nEPCC_Kill\n        Kill the particle when MaxCollisions is reached\nEPCC_Freeze\n        Freeze in place, NO MORE UPDATES\nEPCC_HaltCollisions,\n        Stop collision checks, keep updating everything\nEPCC_FreezeTranslation,\n        Stop translations, keep updating everything else\nEPCC_FreezeRotation,\n        Stop rotations, keep updating everything else\nEPCC_FreezeMovement\n        Stop all movement, keep updating"));
				MetaData->SetValue(NewProp_MaxCollisions, TEXT("Category"), TEXT("Collision"));
				MetaData->SetValue(NewProp_MaxCollisions, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Collision/ParticleModuleCollision.h"));
				MetaData->SetValue(NewProp_MaxCollisions, TEXT("ToolTip"), TEXT("The maximum number of collisions a particle can have.\nValue is obtained using the EmitterTime at particle spawn."));
				MetaData->SetValue(NewProp_DampingFactorRotation, TEXT("Category"), TEXT("Collision"));
				MetaData->SetValue(NewProp_DampingFactorRotation, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Collision/ParticleModuleCollision.h"));
				MetaData->SetValue(NewProp_DampingFactorRotation, TEXT("ToolTip"), TEXT("How much to `slow' the rotation of the particle after a collision.\nValue is obtained using the EmitterTime at particle spawn."));
				MetaData->SetValue(NewProp_DampingFactor, TEXT("Category"), TEXT("Collision"));
				MetaData->SetValue(NewProp_DampingFactor, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Collision/ParticleModuleCollision.h"));
				MetaData->SetValue(NewProp_DampingFactor, TEXT("ToolTip"), TEXT("How much to `slow' the velocity of the particle after a collision.\nValue is obtained using the EmitterTime at particle spawn."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleCollision(Z_Construct_UClass_UParticleModuleCollision, TEXT("UParticleModuleCollision"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleCollision);
	UEnum* Z_Construct_UEnum_Engine_EParticleCollisionResponse()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EParticleCollisionResponse_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EParticleCollisionResponse"), 0, Get_Z_Construct_UEnum_Engine_EParticleCollisionResponse_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EParticleCollisionResponse"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EParticleCollisionResponse::Bounce")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EParticleCollisionResponse::Stop")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EParticleCollisionResponse::Kill")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EParticleCollisionResponse::EParticleCollisionResponse_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("Bounce.ToolTip"), TEXT("The particle will bounce off of the surface."));
			MetaData->SetValue(ReturnEnum, TEXT("Kill.ToolTip"), TEXT("The particle will be killed."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Collision/ParticleModuleCollisionGPU.h"));
			MetaData->SetValue(ReturnEnum, TEXT("Stop.ToolTip"), TEXT("The particle will stop on the surface."));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("How particles respond to collision events."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EParticleCollisionResponse_CRC() { return 4149647022U; }
	UClass* Z_Construct_UClass_UParticleModuleCollisionGPU_NoRegister()
	{
		return UParticleModuleCollisionGPU::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleCollisionGPU()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleCollisionBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleCollisionGPU::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_CollisionMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CollisionMode"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(CollisionMode, UParticleModuleCollisionGPU), 0x0000000000000001, Z_Construct_UEnum_Engine_EParticleCollisionMode());
				UProperty* NewProp_Response = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Response"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(Response, UParticleModuleCollisionGPU), 0x0000000000000001, Z_Construct_UEnum_Engine_EParticleCollisionResponse());
				UProperty* NewProp_RadiusBias = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RadiusBias"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(RadiusBias, UParticleModuleCollisionGPU), 0x0000000000000001);
				UProperty* NewProp_RadiusScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RadiusScale"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(RadiusScale, UParticleModuleCollisionGPU), 0x0000000000000001);
				UProperty* NewProp_Friction = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Friction"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Friction, UParticleModuleCollisionGPU), 0x0000000000000001);
				UProperty* NewProp_ResilienceScaleOverLife = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ResilienceScaleOverLife"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ResilienceScaleOverLife, UParticleModuleCollisionGPU), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				UProperty* NewProp_Resilience = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Resilience"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Resilience, UParticleModuleCollisionGPU), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Collision"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Collision/ParticleModuleCollisionGPU.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Collision/ParticleModuleCollisionGPU.h"));
				MetaData->SetValue(NewProp_CollisionMode, TEXT("Category"), TEXT("Collision"));
				MetaData->SetValue(NewProp_CollisionMode, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Collision/ParticleModuleCollisionGPU.h"));
				MetaData->SetValue(NewProp_Response, TEXT("Category"), TEXT("Collision"));
				MetaData->SetValue(NewProp_Response, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Collision/ParticleModuleCollisionGPU.h"));
				MetaData->SetValue(NewProp_Response, TEXT("ToolTip"), TEXT("How particles respond to a collision event."));
				MetaData->SetValue(NewProp_RadiusBias, TEXT("Category"), TEXT("Collision"));
				MetaData->SetValue(NewProp_RadiusBias, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Collision/ParticleModuleCollisionGPU.h"));
				MetaData->SetValue(NewProp_RadiusBias, TEXT("ToolTip"), TEXT("Bias applied to the collision radius."));
				MetaData->SetValue(NewProp_RadiusScale, TEXT("Category"), TEXT("Collision"));
				MetaData->SetValue(NewProp_RadiusScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Collision/ParticleModuleCollisionGPU.h"));
				MetaData->SetValue(NewProp_RadiusScale, TEXT("ToolTip"), TEXT("Scale applied to the size of the particle to obtain the collision radius."));
				MetaData->SetValue(NewProp_Friction, TEXT("Category"), TEXT("Collision"));
				MetaData->SetValue(NewProp_Friction, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Collision/ParticleModuleCollisionGPU.h"));
				MetaData->SetValue(NewProp_Friction, TEXT("ToolTip"), TEXT("Friction applied to all particles during a collision or while moving\nalong a surface."));
				MetaData->SetValue(NewProp_ResilienceScaleOverLife, TEXT("Category"), TEXT("Collision"));
				MetaData->SetValue(NewProp_ResilienceScaleOverLife, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Collision/ParticleModuleCollisionGPU.h"));
				MetaData->SetValue(NewProp_ResilienceScaleOverLife, TEXT("ToolTip"), TEXT("Scales the bounciness of the particle over its life."));
				MetaData->SetValue(NewProp_Resilience, TEXT("Category"), TEXT("Collision"));
				MetaData->SetValue(NewProp_Resilience, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Collision/ParticleModuleCollisionGPU.h"));
				MetaData->SetValue(NewProp_Resilience, TEXT("ToolTip"), TEXT("The bounciness of the particle."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleCollisionGPU(Z_Construct_UClass_UParticleModuleCollisionGPU, TEXT("UParticleModuleCollisionGPU"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleCollisionGPU);
	UClass* Z_Construct_UClass_UParticleModuleColorBase_NoRegister()
	{
		return UParticleModuleColorBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleColorBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModule();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleColorBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20001081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Color"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Color/ParticleModuleColorBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Color/ParticleModuleColorBase.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleColorBase(Z_Construct_UClass_UParticleModuleColorBase, TEXT("UParticleModuleColorBase"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleColorBase);
	UClass* Z_Construct_UClass_UParticleModuleColor_NoRegister()
	{
		return UParticleModuleColor::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleColor()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleColorBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleColor::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bClampAlpha, UParticleModuleColor, uint8);
				UProperty* NewProp_bClampAlpha = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bClampAlpha"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bClampAlpha, UParticleModuleColor), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bClampAlpha, UParticleModuleColor), sizeof(uint8), false);
				UProperty* NewProp_StartAlpha = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StartAlpha"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(StartAlpha, UParticleModuleColor), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				UProperty* NewProp_StartColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StartColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(StartColor, UParticleModuleColor), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Initial Color"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Color/ParticleModuleColor.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Color/ParticleModuleColor.h"));
				MetaData->SetValue(NewProp_bClampAlpha, TEXT("Category"), TEXT("Color"));
				MetaData->SetValue(NewProp_bClampAlpha, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Color/ParticleModuleColor.h"));
				MetaData->SetValue(NewProp_bClampAlpha, TEXT("ToolTip"), TEXT("If true, the alpha value will be clamped to the [0..1] range."));
				MetaData->SetValue(NewProp_StartAlpha, TEXT("Category"), TEXT("Color"));
				MetaData->SetValue(NewProp_StartAlpha, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Color/ParticleModuleColor.h"));
				MetaData->SetValue(NewProp_StartAlpha, TEXT("ToolTip"), TEXT("Initial alpha for a particle as a function of Emitter time."));
				MetaData->SetValue(NewProp_StartColor, TEXT("Category"), TEXT("Color"));
				MetaData->SetValue(NewProp_StartColor, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Color/ParticleModuleColor.h"));
				MetaData->SetValue(NewProp_StartColor, TEXT("ToolTip"), TEXT("Initial color for a particle as a function of Emitter time."));
				MetaData->SetValue(NewProp_StartColor, TEXT("TreatAsColor"), TEXT(""));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleColor(Z_Construct_UClass_UParticleModuleColor, TEXT("UParticleModuleColor"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleColor);
	UClass* Z_Construct_UClass_UParticleModuleColor_Seeded_NoRegister()
	{
		return UParticleModuleColor_Seeded::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleColor_Seeded()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleColor();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleColor_Seeded::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20801080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_RandomSeedInfo = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RandomSeedInfo"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(RandomSeedInfo, UParticleModuleColor_Seeded), 0x0000000000000001, Z_Construct_UScriptStruct_FParticleRandomSeedInfo());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Init Color (Seed)"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Color/ParticleModuleColor_Seeded.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Color/ParticleModuleColor_Seeded.h"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("Category"), TEXT("RandomSeed"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Color/ParticleModuleColor_Seeded.h"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("ToolTip"), TEXT("The random seed(s) to use for looking up values in StartLocation"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleColor_Seeded(Z_Construct_UClass_UParticleModuleColor_Seeded, TEXT("UParticleModuleColor_Seeded"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleColor_Seeded);
	UClass* Z_Construct_UClass_UParticleModuleColorOverLife_NoRegister()
	{
		return UParticleModuleColorOverLife::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleColorOverLife()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleColorBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleColorOverLife::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bClampAlpha, UParticleModuleColorOverLife, uint8);
				UProperty* NewProp_bClampAlpha = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bClampAlpha"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bClampAlpha, UParticleModuleColorOverLife), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bClampAlpha, UParticleModuleColorOverLife), sizeof(uint8), false);
				UProperty* NewProp_AlphaOverLife = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AlphaOverLife"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(AlphaOverLife, UParticleModuleColorOverLife), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				UProperty* NewProp_ColorOverLife = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ColorOverLife"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ColorOverLife, UParticleModuleColorOverLife), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Color Over Life"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Color/ParticleModuleColorOverLife.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Color/ParticleModuleColorOverLife.h"));
				MetaData->SetValue(NewProp_bClampAlpha, TEXT("Category"), TEXT("Color"));
				MetaData->SetValue(NewProp_bClampAlpha, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Color/ParticleModuleColorOverLife.h"));
				MetaData->SetValue(NewProp_bClampAlpha, TEXT("ToolTip"), TEXT("If true, the alpha value will be clamped to the [0..1] range."));
				MetaData->SetValue(NewProp_AlphaOverLife, TEXT("Category"), TEXT("Color"));
				MetaData->SetValue(NewProp_AlphaOverLife, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Color/ParticleModuleColorOverLife.h"));
				MetaData->SetValue(NewProp_AlphaOverLife, TEXT("ToolTip"), TEXT("The alpha to apply to the particle, as a function of the particle RelativeTime."));
				MetaData->SetValue(NewProp_ColorOverLife, TEXT("Category"), TEXT("Color"));
				MetaData->SetValue(NewProp_ColorOverLife, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Color/ParticleModuleColorOverLife.h"));
				MetaData->SetValue(NewProp_ColorOverLife, TEXT("ToolTip"), TEXT("The color to apply to the particle, as a function of the particle RelativeTime."));
				MetaData->SetValue(NewProp_ColorOverLife, TEXT("TreatAsColor"), TEXT(""));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleColorOverLife(Z_Construct_UClass_UParticleModuleColorOverLife, TEXT("UParticleModuleColorOverLife"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleColorOverLife);
	UClass* Z_Construct_UClass_UParticleModuleColorScaleOverLife_NoRegister()
	{
		return UParticleModuleColorScaleOverLife::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleColorScaleOverLife()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleColorBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleColorScaleOverLife::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEmitterTime, UParticleModuleColorScaleOverLife, uint8);
				UProperty* NewProp_bEmitterTime = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bEmitterTime"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEmitterTime, UParticleModuleColorScaleOverLife), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bEmitterTime, UParticleModuleColorScaleOverLife), sizeof(uint8), false);
				UProperty* NewProp_AlphaScaleOverLife = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AlphaScaleOverLife"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(AlphaScaleOverLife, UParticleModuleColorScaleOverLife), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				UProperty* NewProp_ColorScaleOverLife = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ColorScaleOverLife"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ColorScaleOverLife, UParticleModuleColorScaleOverLife), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Scale Color / Life"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Color/ParticleModuleColorScaleOverLife.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Color/ParticleModuleColorScaleOverLife.h"));
				MetaData->SetValue(NewProp_bEmitterTime, TEXT("Category"), TEXT("Color"));
				MetaData->SetValue(NewProp_bEmitterTime, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Color/ParticleModuleColorScaleOverLife.h"));
				MetaData->SetValue(NewProp_bEmitterTime, TEXT("ToolTip"), TEXT("Whether it is EmitterTime or ParticleTime related."));
				MetaData->SetValue(NewProp_AlphaScaleOverLife, TEXT("Category"), TEXT("Color"));
				MetaData->SetValue(NewProp_AlphaScaleOverLife, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Color/ParticleModuleColorScaleOverLife.h"));
				MetaData->SetValue(NewProp_AlphaScaleOverLife, TEXT("ToolTip"), TEXT("The scale factor for the alpha."));
				MetaData->SetValue(NewProp_ColorScaleOverLife, TEXT("Category"), TEXT("Color"));
				MetaData->SetValue(NewProp_ColorScaleOverLife, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Color/ParticleModuleColorScaleOverLife.h"));
				MetaData->SetValue(NewProp_ColorScaleOverLife, TEXT("ToolTip"), TEXT("The scale factor for the color."));
				MetaData->SetValue(NewProp_ColorScaleOverLife, TEXT("TreatAsColor"), TEXT(""));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleColorScaleOverLife(Z_Construct_UClass_UParticleModuleColorScaleOverLife, TEXT("UParticleModuleColorScaleOverLife"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleColorScaleOverLife);
	UClass* Z_Construct_UClass_UParticleModuleEventBase_NoRegister()
	{
		return UParticleModuleEventBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleEventBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModule();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleEventBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20001081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Event"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Event/ParticleModuleEventBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Event/ParticleModuleEventBase.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleEventBase(Z_Construct_UClass_UParticleModuleEventBase, TEXT("UParticleModuleEventBase"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleEventBase);
	UScriptStruct* Z_Construct_UScriptStruct_FParticleEvent_GenerateInfo()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FParticleEvent_GenerateInfo_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("ParticleEvent_GenerateInfo"), sizeof(FParticleEvent_GenerateInfo), Get_Z_Construct_UScriptStruct_FParticleEvent_GenerateInfo_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ParticleEvent_GenerateInfo"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FParticleEvent_GenerateInfo>, EStructFlags(0x00000005));
			UProperty* NewProp_ParticleModuleEventsToSendToGame = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ParticleModuleEventsToSendToGame"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ParticleModuleEventsToSendToGame, FParticleEvent_GenerateInfo), 0x0000008000000009);
			UProperty* NewProp_ParticleModuleEventsToSendToGame_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ParticleModuleEventsToSendToGame, TEXT("ParticleModuleEventsToSendToGame"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0002000000080008, Z_Construct_UClass_UParticleModuleEventSendToGame_NoRegister());
			UProperty* NewProp_CustomName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CustomName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(CustomName, FParticleEvent_GenerateInfo), 0x0000000000000001);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseOrbitOffset, FParticleEvent_GenerateInfo, uint8);
			UProperty* NewProp_bUseOrbitOffset = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bUseOrbitOffset"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseOrbitOffset, FParticleEvent_GenerateInfo), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bUseOrbitOffset, FParticleEvent_GenerateInfo), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(UseReflectedImpactVector, FParticleEvent_GenerateInfo, uint8);
			UProperty* NewProp_UseReflectedImpactVector = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UseReflectedImpactVector"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(UseReflectedImpactVector, FParticleEvent_GenerateInfo), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(UseReflectedImpactVector, FParticleEvent_GenerateInfo), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(LastTimeOnly, FParticleEvent_GenerateInfo, uint8);
			UProperty* NewProp_LastTimeOnly = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LastTimeOnly"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(LastTimeOnly, FParticleEvent_GenerateInfo), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(LastTimeOnly, FParticleEvent_GenerateInfo), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(FirstTimeOnly, FParticleEvent_GenerateInfo, uint8);
			UProperty* NewProp_FirstTimeOnly = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("FirstTimeOnly"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(FirstTimeOnly, FParticleEvent_GenerateInfo), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(FirstTimeOnly, FParticleEvent_GenerateInfo), sizeof(uint8), false);
			UProperty* NewProp_ParticleFrequency = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ParticleFrequency"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ParticleFrequency, FParticleEvent_GenerateInfo), 0x0000000000000001);
			UProperty* NewProp_Frequency = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Frequency"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Frequency, FParticleEvent_GenerateInfo), 0x0000000000000001);
			UProperty* NewProp_Type = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Type"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(Type, FParticleEvent_GenerateInfo), 0x0000000000000001, Z_Construct_UEnum_Engine_EParticleEventType());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Event/ParticleModuleEventGenerator.h"));
			MetaData->SetValue(NewProp_ParticleModuleEventsToSendToGame, TEXT("Category"), TEXT("ParticleEvent_GenerateInfo"));
			MetaData->SetValue(NewProp_ParticleModuleEventsToSendToGame, TEXT("EditInline"), TEXT("true"));
			MetaData->SetValue(NewProp_ParticleModuleEventsToSendToGame, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Event/ParticleModuleEventGenerator.h"));
			MetaData->SetValue(NewProp_ParticleModuleEventsToSendToGame, TEXT("ToolTip"), TEXT("The events we want to fire off when this event has been generated"));
			MetaData->SetValue(NewProp_ParticleModuleEventsToSendToGame_Inner, TEXT("Category"), TEXT("ParticleEvent_GenerateInfo"));
			MetaData->SetValue(NewProp_ParticleModuleEventsToSendToGame_Inner, TEXT("EditInline"), TEXT("true"));
			MetaData->SetValue(NewProp_ParticleModuleEventsToSendToGame_Inner, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Event/ParticleModuleEventGenerator.h"));
			MetaData->SetValue(NewProp_ParticleModuleEventsToSendToGame_Inner, TEXT("ToolTip"), TEXT("The events we want to fire off when this event has been generated"));
			MetaData->SetValue(NewProp_CustomName, TEXT("Category"), TEXT("ParticleEvent_GenerateInfo"));
			MetaData->SetValue(NewProp_CustomName, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Event/ParticleModuleEventGenerator.h"));
			MetaData->SetValue(NewProp_CustomName, TEXT("ToolTip"), TEXT("Should the event tag with a custom name? Leave blank for the default."));
			MetaData->SetValue(NewProp_bUseOrbitOffset, TEXT("Category"), TEXT("ParticleEvent_GenerateInfo"));
			MetaData->SetValue(NewProp_bUseOrbitOffset, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Event/ParticleModuleEventGenerator.h"));
			MetaData->SetValue(NewProp_bUseOrbitOffset, TEXT("ToolTip"), TEXT("Use the orbit offset when computing the position at which the event occurred."));
			MetaData->SetValue(NewProp_UseReflectedImpactVector, TEXT("Category"), TEXT("ParticleEvent_GenerateInfo"));
			MetaData->SetValue(NewProp_UseReflectedImpactVector, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Event/ParticleModuleEventGenerator.h"));
			MetaData->SetValue(NewProp_UseReflectedImpactVector, TEXT("ToolTip"), TEXT("Use the impact FVector not the hit normal (collision only)."));
			MetaData->SetValue(NewProp_LastTimeOnly, TEXT("Category"), TEXT("ParticleEvent_GenerateInfo"));
			MetaData->SetValue(NewProp_LastTimeOnly, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Event/ParticleModuleEventGenerator.h"));
			MetaData->SetValue(NewProp_LastTimeOnly, TEXT("ToolTip"), TEXT("Only fire the last time (collision only)."));
			MetaData->SetValue(NewProp_FirstTimeOnly, TEXT("Category"), TEXT("ParticleEvent_GenerateInfo"));
			MetaData->SetValue(NewProp_FirstTimeOnly, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Event/ParticleModuleEventGenerator.h"));
			MetaData->SetValue(NewProp_FirstTimeOnly, TEXT("ToolTip"), TEXT("Only fire the first time (collision only)."));
			MetaData->SetValue(NewProp_ParticleFrequency, TEXT("Category"), TEXT("ParticleEvent_GenerateInfo"));
			MetaData->SetValue(NewProp_ParticleFrequency, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Event/ParticleModuleEventGenerator.h"));
			MetaData->SetValue(NewProp_ParticleFrequency, TEXT("ToolTip"), TEXT("Only fire the first time (collision only)."));
			MetaData->SetValue(NewProp_Frequency, TEXT("Category"), TEXT("ParticleEvent_GenerateInfo"));
			MetaData->SetValue(NewProp_Frequency, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Event/ParticleModuleEventGenerator.h"));
			MetaData->SetValue(NewProp_Frequency, TEXT("ToolTip"), TEXT("How often to trigger the event (<= 1 means EVERY time)."));
			MetaData->SetValue(NewProp_Type, TEXT("Category"), TEXT("ParticleEvent_GenerateInfo"));
			MetaData->SetValue(NewProp_Type, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Event/ParticleModuleEventGenerator.h"));
			MetaData->SetValue(NewProp_Type, TEXT("ToolTip"), TEXT("The type of event."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FParticleEvent_GenerateInfo_CRC() { return 2050237632U; }
	UClass* Z_Construct_UClass_UParticleModuleEventGenerator_NoRegister()
	{
		return UParticleModuleEventGenerator::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleEventGenerator()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleEventBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleEventGenerator::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Events = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Events"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Events, UParticleModuleEventGenerator), 0x0000008002000009);
				UProperty* NewProp_Events_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Events, TEXT("Events"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000008000000008, Z_Construct_UScriptStruct_FParticleEvent_GenerateInfo());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Event Generator"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Event/ParticleModuleEventGenerator.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Event/ParticleModuleEventGenerator.h"));
				MetaData->SetValue(NewProp_Events, TEXT("Category"), TEXT("Events"));
				MetaData->SetValue(NewProp_Events, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Event/ParticleModuleEventGenerator.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleEventGenerator(Z_Construct_UClass_UParticleModuleEventGenerator, TEXT("UParticleModuleEventGenerator"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleEventGenerator);
	UClass* Z_Construct_UClass_UParticleModuleEventReceiverBase_NoRegister()
	{
		return UParticleModuleEventReceiverBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleEventReceiverBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleEventBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleEventReceiverBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20001081;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_EventName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EventName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(EventName, UParticleModuleEventReceiverBase), 0x0000000000000001);
				UProperty* NewProp_EventGeneratorType = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EventGeneratorType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(EventGeneratorType, UParticleModuleEventReceiverBase), 0x0000000000000001, Z_Construct_UEnum_Engine_EParticleEventType());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Event/ParticleModuleEventReceiverBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Event/ParticleModuleEventReceiverBase.h"));
				MetaData->SetValue(NewProp_EventName, TEXT("Category"), TEXT("Source"));
				MetaData->SetValue(NewProp_EventName, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Event/ParticleModuleEventReceiverBase.h"));
				MetaData->SetValue(NewProp_EventName, TEXT("ToolTip"), TEXT("The name of the emitter of interest for generating the event."));
				MetaData->SetValue(NewProp_EventGeneratorType, TEXT("Category"), TEXT("Source"));
				MetaData->SetValue(NewProp_EventGeneratorType, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Event/ParticleModuleEventReceiverBase.h"));
				MetaData->SetValue(NewProp_EventGeneratorType, TEXT("ToolTip"), TEXT("The type of event that will generate the kill."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleEventReceiverBase(Z_Construct_UClass_UParticleModuleEventReceiverBase, TEXT("UParticleModuleEventReceiverBase"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleEventReceiverBase);
	UClass* Z_Construct_UClass_UParticleModuleEventReceiverKillParticles_NoRegister()
	{
		return UParticleModuleEventReceiverKillParticles::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleEventReceiverKillParticles()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleEventReceiverBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleEventReceiverKillParticles::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20001080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bStopSpawning, UParticleModuleEventReceiverKillParticles, uint8);
				UProperty* NewProp_bStopSpawning = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bStopSpawning"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bStopSpawning, UParticleModuleEventReceiverKillParticles), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bStopSpawning, UParticleModuleEventReceiverKillParticles), sizeof(uint8), false);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("EventReceiver Kill All"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Event/ParticleModuleEventReceiverKillParticles.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Event/ParticleModuleEventReceiverKillParticles.h"));
				MetaData->SetValue(NewProp_bStopSpawning, TEXT("Category"), TEXT("ParticleModuleEventReceiverKillParticles"));
				MetaData->SetValue(NewProp_bStopSpawning, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Event/ParticleModuleEventReceiverKillParticles.h"));
				MetaData->SetValue(NewProp_bStopSpawning, TEXT("ToolTip"), TEXT("If true, stop this emitter from spawning as well."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleEventReceiverKillParticles(Z_Construct_UClass_UParticleModuleEventReceiverKillParticles, TEXT("UParticleModuleEventReceiverKillParticles"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleEventReceiverKillParticles);
	UClass* Z_Construct_UClass_UParticleModuleEventReceiverSpawn_NoRegister()
	{
		return UParticleModuleEventReceiverSpawn::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleEventReceiverSpawn()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleEventReceiverBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleEventReceiverSpawn::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20801080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_InheritVelocityScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InheritVelocityScale"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InheritVelocityScale, UParticleModuleEventReceiverSpawn), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bInheritVelocity, UParticleModuleEventReceiverSpawn, uint8);
				UProperty* NewProp_bInheritVelocity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bInheritVelocity"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bInheritVelocity, UParticleModuleEventReceiverSpawn), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bInheritVelocity, UParticleModuleEventReceiverSpawn), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUsePSysLocation, UParticleModuleEventReceiverSpawn, uint8);
				UProperty* NewProp_bUsePSysLocation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUsePSysLocation"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUsePSysLocation, UParticleModuleEventReceiverSpawn), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bUsePSysLocation, UParticleModuleEventReceiverSpawn), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseParticleTime, UParticleModuleEventReceiverSpawn, uint8);
				UProperty* NewProp_bUseParticleTime = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUseParticleTime"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseParticleTime, UParticleModuleEventReceiverSpawn), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bUseParticleTime, UParticleModuleEventReceiverSpawn), sizeof(uint8), false);
				UProperty* NewProp_SpawnCount = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SpawnCount"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SpawnCount, UParticleModuleEventReceiverSpawn), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("EventReceiver Spawn"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Event/ParticleModuleEventReceiverSpawn.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Event/ParticleModuleEventReceiverSpawn.h"));
				MetaData->SetValue(NewProp_InheritVelocityScale, TEXT("Category"), TEXT("Velocity"));
				MetaData->SetValue(NewProp_InheritVelocityScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Event/ParticleModuleEventReceiverSpawn.h"));
				MetaData->SetValue(NewProp_InheritVelocityScale, TEXT("ToolTip"), TEXT("If bInheritVelocity is true, scale the velocity with this."));
				MetaData->SetValue(NewProp_bInheritVelocity, TEXT("Category"), TEXT("Velocity"));
				MetaData->SetValue(NewProp_bInheritVelocity, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Event/ParticleModuleEventReceiverSpawn.h"));
				MetaData->SetValue(NewProp_bInheritVelocity, TEXT("ToolTip"), TEXT("If true, use the velocity of the dying particle as the start velocity of\nthe spawned particle."));
				MetaData->SetValue(NewProp_bUsePSysLocation, TEXT("Category"), TEXT("Location"));
				MetaData->SetValue(NewProp_bUsePSysLocation, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Event/ParticleModuleEventReceiverSpawn.h"));
				MetaData->SetValue(NewProp_bUsePSysLocation, TEXT("ToolTip"), TEXT("If true, use the location of the particle system component for spawning.\nif false (default), use the location of the particle event."));
				MetaData->SetValue(NewProp_bUseParticleTime, TEXT("Category"), TEXT("Spawn"));
				MetaData->SetValue(NewProp_bUseParticleTime, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Event/ParticleModuleEventReceiverSpawn.h"));
				MetaData->SetValue(NewProp_bUseParticleTime, TEXT("ToolTip"), TEXT("For Death-based event receiving, if this is true, it indicates that the\nParticleTime of the event should be used to look-up the SpawnCount.\nOtherwise (and in all other events received), use the emitter time of\nthe event."));
				MetaData->SetValue(NewProp_SpawnCount, TEXT("Category"), TEXT("Spawn"));
				MetaData->SetValue(NewProp_SpawnCount, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Event/ParticleModuleEventReceiverSpawn.h"));
				MetaData->SetValue(NewProp_SpawnCount, TEXT("ToolTip"), TEXT("The number of particles to spawn."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleEventReceiverSpawn(Z_Construct_UClass_UParticleModuleEventReceiverSpawn, TEXT("UParticleModuleEventReceiverSpawn"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleEventReceiverSpawn);
	UClass* Z_Construct_UClass_UParticleModuleKillBase_NoRegister()
	{
		return UParticleModuleKillBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleKillBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModule();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleKillBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20001081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Kill"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Kill/ParticleModuleKillBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Kill/ParticleModuleKillBase.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleKillBase(Z_Construct_UClass_UParticleModuleKillBase, TEXT("UParticleModuleKillBase"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleKillBase);
	UClass* Z_Construct_UClass_UParticleModuleKillBox_NoRegister()
	{
		return UParticleModuleKillBox::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleKillBox()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleKillBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleKillBox::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20801080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAxisAlignedAndFixedSize, UParticleModuleKillBox, uint8);
				UProperty* NewProp_bAxisAlignedAndFixedSize = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAxisAlignedAndFixedSize"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAxisAlignedAndFixedSize, UParticleModuleKillBox), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bAxisAlignedAndFixedSize, UParticleModuleKillBox), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bKillInside, UParticleModuleKillBox, uint8);
				UProperty* NewProp_bKillInside = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bKillInside"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bKillInside, UParticleModuleKillBox), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bKillInside, UParticleModuleKillBox), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAbsolute, UParticleModuleKillBox, uint8);
				UProperty* NewProp_bAbsolute = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAbsolute"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAbsolute, UParticleModuleKillBox), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bAbsolute, UParticleModuleKillBox), sizeof(uint8), false);
				UProperty* NewProp_UpperRightCorner = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UpperRightCorner"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(UpperRightCorner, UParticleModuleKillBox), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
				UProperty* NewProp_LowerLeftCorner = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LowerLeftCorner"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LowerLeftCorner, UParticleModuleKillBox), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Kill Box"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Kill/ParticleModuleKillBox.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Kill/ParticleModuleKillBox.h"));
				MetaData->SetValue(NewProp_bAxisAlignedAndFixedSize, TEXT("Category"), TEXT("Kill"));
				MetaData->SetValue(NewProp_bAxisAlignedAndFixedSize, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Kill/ParticleModuleKillBox.h"));
				MetaData->SetValue(NewProp_bAxisAlignedAndFixedSize, TEXT("ToolTip"), TEXT("If true, the box will always be axis aligned and non-scalable."));
				MetaData->SetValue(NewProp_bKillInside, TEXT("Category"), TEXT("Kill"));
				MetaData->SetValue(NewProp_bKillInside, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Kill/ParticleModuleKillBox.h"));
				MetaData->SetValue(NewProp_bKillInside, TEXT("ToolTip"), TEXT("If true, particles INSIDE the box will be killed.\nIf false (the default), particles OUTSIDE the box will be killed."));
				MetaData->SetValue(NewProp_bAbsolute, TEXT("Category"), TEXT("Kill"));
				MetaData->SetValue(NewProp_bAbsolute, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Kill/ParticleModuleKillBox.h"));
				MetaData->SetValue(NewProp_bAbsolute, TEXT("ToolTip"), TEXT("If true, the box coordinates are in world space./"));
				MetaData->SetValue(NewProp_UpperRightCorner, TEXT("Category"), TEXT("Kill"));
				MetaData->SetValue(NewProp_UpperRightCorner, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Kill/ParticleModuleKillBox.h"));
				MetaData->SetValue(NewProp_UpperRightCorner, TEXT("ToolTip"), TEXT("The upper right corner of the box."));
				MetaData->SetValue(NewProp_LowerLeftCorner, TEXT("Category"), TEXT("Kill"));
				MetaData->SetValue(NewProp_LowerLeftCorner, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Kill/ParticleModuleKillBox.h"));
				MetaData->SetValue(NewProp_LowerLeftCorner, TEXT("ToolTip"), TEXT("The lower left corner of the box."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleKillBox(Z_Construct_UClass_UParticleModuleKillBox, TEXT("UParticleModuleKillBox"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleKillBox);
	UClass* Z_Construct_UClass_UParticleModuleKillHeight_NoRegister()
	{
		return UParticleModuleKillHeight::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleKillHeight()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleKillBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleKillHeight::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20801080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bApplyPSysScale, UParticleModuleKillHeight, uint8);
				UProperty* NewProp_bApplyPSysScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bApplyPSysScale"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bApplyPSysScale, UParticleModuleKillHeight), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bApplyPSysScale, UParticleModuleKillHeight), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bFloor, UParticleModuleKillHeight, uint8);
				UProperty* NewProp_bFloor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bFloor"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bFloor, UParticleModuleKillHeight), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bFloor, UParticleModuleKillHeight), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAbsolute, UParticleModuleKillHeight, uint8);
				UProperty* NewProp_bAbsolute = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAbsolute"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAbsolute, UParticleModuleKillHeight), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bAbsolute, UParticleModuleKillHeight), sizeof(uint8), false);
				UProperty* NewProp_Height = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Height"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Height, UParticleModuleKillHeight), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Kill Height"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Kill/ParticleModuleKillHeight.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Kill/ParticleModuleKillHeight.h"));
				MetaData->SetValue(NewProp_bApplyPSysScale, TEXT("Category"), TEXT("Kill"));
				MetaData->SetValue(NewProp_bApplyPSysScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Kill/ParticleModuleKillHeight.h"));
				MetaData->SetValue(NewProp_bApplyPSysScale, TEXT("ToolTip"), TEXT("If true, take the particle systems scale into account"));
				MetaData->SetValue(NewProp_bFloor, TEXT("Category"), TEXT("Kill"));
				MetaData->SetValue(NewProp_bFloor, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Kill/ParticleModuleKillHeight.h"));
				MetaData->SetValue(NewProp_bFloor, TEXT("ToolTip"), TEXT("If true, the plane should be considered a floor - ie kill anything BELOW it.\nIf false, if is a ceiling - ie kill anything ABOVE it."));
				MetaData->SetValue(NewProp_bAbsolute, TEXT("Category"), TEXT("Kill"));
				MetaData->SetValue(NewProp_bAbsolute, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Kill/ParticleModuleKillHeight.h"));
				MetaData->SetValue(NewProp_bAbsolute, TEXT("ToolTip"), TEXT("If true, the height should be treated as a world-space position."));
				MetaData->SetValue(NewProp_Height, TEXT("Category"), TEXT("Kill"));
				MetaData->SetValue(NewProp_Height, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Kill/ParticleModuleKillHeight.h"));
				MetaData->SetValue(NewProp_Height, TEXT("ToolTip"), TEXT("The height at which to kill the particle."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleKillHeight(Z_Construct_UClass_UParticleModuleKillHeight, TEXT("UParticleModuleKillHeight"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleKillHeight);
	UClass* Z_Construct_UClass_UParticleModuleLifetimeBase_NoRegister()
	{
		return UParticleModuleLifetimeBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleLifetimeBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModule();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleLifetimeBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20001081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Lifetime"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Lifetime/ParticleModuleLifetimeBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Lifetime/ParticleModuleLifetimeBase.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleLifetimeBase(Z_Construct_UClass_UParticleModuleLifetimeBase, TEXT("UParticleModuleLifetimeBase"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleLifetimeBase);
	UClass* Z_Construct_UClass_UParticleModuleLifetime_NoRegister()
	{
		return UParticleModuleLifetime::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleLifetime()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleLifetimeBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleLifetime::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Lifetime = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Lifetime"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Lifetime, UParticleModuleLifetime), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Lifetime"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Lifetime/ParticleModuleLifetime.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Lifetime/ParticleModuleLifetime.h"));
				MetaData->SetValue(NewProp_Lifetime, TEXT("Category"), TEXT("Lifetime"));
				MetaData->SetValue(NewProp_Lifetime, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Lifetime/ParticleModuleLifetime.h"));
				MetaData->SetValue(NewProp_Lifetime, TEXT("ToolTip"), TEXT("The lifetime of the particle, in seconds. Retrieved using the EmitterTime at the spawn of the particle."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleLifetime(Z_Construct_UClass_UParticleModuleLifetime, TEXT("UParticleModuleLifetime"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleLifetime);
	UClass* Z_Construct_UClass_UParticleModuleLifetime_Seeded_NoRegister()
	{
		return UParticleModuleLifetime_Seeded::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleLifetime_Seeded()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleLifetime();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleLifetime_Seeded::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20801080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_RandomSeedInfo = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RandomSeedInfo"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(RandomSeedInfo, UParticleModuleLifetime_Seeded), 0x0000000000000001, Z_Construct_UScriptStruct_FParticleRandomSeedInfo());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Lifetime (Seed)"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Lifetime/ParticleModuleLifetime_Seeded.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Lifetime/ParticleModuleLifetime_Seeded.h"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("Category"), TEXT("RandomSeed"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Lifetime/ParticleModuleLifetime_Seeded.h"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("ToolTip"), TEXT("The random seed(s) to use for looking up values in StartLocation"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleLifetime_Seeded(Z_Construct_UClass_UParticleModuleLifetime_Seeded, TEXT("UParticleModuleLifetime_Seeded"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleLifetime_Seeded);
	UClass* Z_Construct_UClass_UParticleModuleLightBase_NoRegister()
	{
		return UParticleModuleLightBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleLightBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModule();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleLightBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20001081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Light"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Light/ParticleModuleLightBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Light/ParticleModuleLightBase.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleLightBase(Z_Construct_UClass_UParticleModuleLightBase, TEXT("UParticleModuleLightBase"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleLightBase);
	UClass* Z_Construct_UClass_UParticleModuleLight_NoRegister()
	{
		return UParticleModuleLight::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleLight()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleLightBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleLight::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_LightExponent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LightExponent"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LightExponent, UParticleModuleLight), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				UProperty* NewProp_RadiusScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RadiusScale"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(RadiusScale, UParticleModuleLight), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				UProperty* NewProp_BrightnessOverLife = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BrightnessOverLife"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(BrightnessOverLife, UParticleModuleLight), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				UProperty* NewProp_ColorScaleOverLife = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ColorScaleOverLife"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ColorScaleOverLife, UParticleModuleLight), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
				UProperty* NewProp_SpawnFraction = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SpawnFraction"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(SpawnFraction, UParticleModuleLight), 0x0000000000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bPreviewLightRadius, UParticleModuleLight, bool);
				UProperty* NewProp_bPreviewLightRadius = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bPreviewLightRadius"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bPreviewLightRadius, UParticleModuleLight), 0x0000000000002001, CPP_BOOL_PROPERTY_BITMASK(bPreviewLightRadius, UParticleModuleLight), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAffectsTranslucency, UParticleModuleLight, bool);
				UProperty* NewProp_bAffectsTranslucency = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAffectsTranslucency"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAffectsTranslucency, UParticleModuleLight), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bAffectsTranslucency, UParticleModuleLight), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseInverseSquaredFalloff, UParticleModuleLight, bool);
				UProperty* NewProp_bUseInverseSquaredFalloff = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUseInverseSquaredFalloff"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseInverseSquaredFalloff, UParticleModuleLight), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bUseInverseSquaredFalloff, UParticleModuleLight), sizeof(bool), true);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Light"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Light/ParticleModuleLight.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Light/ParticleModuleLight.h"));
				MetaData->SetValue(NewProp_LightExponent, TEXT("Category"), TEXT("Light"));
				MetaData->SetValue(NewProp_LightExponent, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Light/ParticleModuleLight.h"));
				MetaData->SetValue(NewProp_LightExponent, TEXT("ToolTip"), TEXT("Provides the light's exponent when inverse squared falloff is disabled."));
				MetaData->SetValue(NewProp_RadiusScale, TEXT("Category"), TEXT("Light"));
				MetaData->SetValue(NewProp_RadiusScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Light/ParticleModuleLight.h"));
				MetaData->SetValue(NewProp_RadiusScale, TEXT("ToolTip"), TEXT("Scales the particle's radius, to calculate the light's radius."));
				MetaData->SetValue(NewProp_BrightnessOverLife, TEXT("Category"), TEXT("Light"));
				MetaData->SetValue(NewProp_BrightnessOverLife, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Light/ParticleModuleLight.h"));
				MetaData->SetValue(NewProp_BrightnessOverLife, TEXT("ToolTip"), TEXT("Brightness scale for the light, which can be setup as a curve over the particle's lifetime."));
				MetaData->SetValue(NewProp_ColorScaleOverLife, TEXT("Category"), TEXT("Light"));
				MetaData->SetValue(NewProp_ColorScaleOverLife, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Light/ParticleModuleLight.h"));
				MetaData->SetValue(NewProp_ColorScaleOverLife, TEXT("ToolTip"), TEXT("Scale that is applied to the particle's color to calculate the light's color, and can be setup as a curve over the particle's lifetime."));
				MetaData->SetValue(NewProp_SpawnFraction, TEXT("Category"), TEXT("Light"));
				MetaData->SetValue(NewProp_SpawnFraction, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Light/ParticleModuleLight.h"));
				MetaData->SetValue(NewProp_SpawnFraction, TEXT("ToolTip"), TEXT("Fraction of particles in this emitter to create lights on."));
				MetaData->SetValue(NewProp_bPreviewLightRadius, TEXT("Category"), TEXT("Light"));
				MetaData->SetValue(NewProp_bPreviewLightRadius, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Light/ParticleModuleLight.h"));
				MetaData->SetValue(NewProp_bPreviewLightRadius, TEXT("ToolTip"), TEXT("Will draw wireframe spheres to preview the light radius if enabled.\nNote: this is intended for previewing and the value will not be saved, it will always revert to disabled."));
				MetaData->SetValue(NewProp_bAffectsTranslucency, TEXT("Category"), TEXT("Light"));
				MetaData->SetValue(NewProp_bAffectsTranslucency, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Light/ParticleModuleLight.h"));
				MetaData->SetValue(NewProp_bAffectsTranslucency, TEXT("ToolTip"), TEXT("Whether lights from this module should affect translucency.\nUse with caution.  Modules enabling this should only make a few particle lights at most, and the smaller they are, the less they will cost."));
				MetaData->SetValue(NewProp_bUseInverseSquaredFalloff, TEXT("Category"), TEXT("Light"));
				MetaData->SetValue(NewProp_bUseInverseSquaredFalloff, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Light/ParticleModuleLight.h"));
				MetaData->SetValue(NewProp_bUseInverseSquaredFalloff, TEXT("ToolTip"), TEXT("Whether to use physically based inverse squared falloff from the light.  If unchecked, the LightExponent distribution will be used instead."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleLight(Z_Construct_UClass_UParticleModuleLight, TEXT("UParticleModuleLight"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleLight);
	UClass* Z_Construct_UClass_UParticleModuleLight_Seeded_NoRegister()
	{
		return UParticleModuleLight_Seeded::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleLight_Seeded()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleLight();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleLight_Seeded::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_RandomSeedInfo = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RandomSeedInfo"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(RandomSeedInfo, UParticleModuleLight_Seeded), 0x0000000000000001, Z_Construct_UScriptStruct_FParticleRandomSeedInfo());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Light (Seed)"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Light/ParticleModuleLight_Seeded.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Light/ParticleModuleLight_Seeded.h"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("Category"), TEXT("RandomSeed"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Light/ParticleModuleLight_Seeded.h"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("ToolTip"), TEXT("The random seed(s) to use for looking up values in StartLocation"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleLight_Seeded(Z_Construct_UClass_UParticleModuleLight_Seeded, TEXT("UParticleModuleLight_Seeded"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleLight_Seeded);
	UClass* Z_Construct_UClass_UParticleModuleLocationBase_NoRegister()
	{
		return UParticleModuleLocationBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleLocationBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModule();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleLocationBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20001081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Location"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Location/ParticleModuleLocationBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationBase.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleLocationBase(Z_Construct_UClass_UParticleModuleLocationBase, TEXT("UParticleModuleLocationBase"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleLocationBase);
	UClass* Z_Construct_UClass_UParticleModuleLocation_NoRegister()
	{
		return UParticleModuleLocation::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleLocation()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleLocationBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleLocation::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_DistributeThreshold = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DistributeThreshold"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DistributeThreshold, UParticleModuleLocation), 0x0000000000000001);
				UProperty* NewProp_DistributeOverNPoints = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DistributeOverNPoints"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DistributeOverNPoints, UParticleModuleLocation), 0x0000000000000001);
				UProperty* NewProp_StartLocation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StartLocation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(StartLocation, UParticleModuleLocation), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Initial Location"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Location/ParticleModuleLocation.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocation.h"));
				MetaData->SetValue(NewProp_DistributeThreshold, TEXT("Category"), TEXT("Location"));
				MetaData->SetValue(NewProp_DistributeThreshold, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocation.h"));
				MetaData->SetValue(NewProp_DistributeThreshold, TEXT("ToolTip"), TEXT("When DistributeOverNPoints is set to a non-zero value, this specifies the ratio of particles spawned\nthat should use the distribution.  (For example setting this to 1 will cause all the particles to\nbe distributed evenly whereas .75 would cause 1/4 of the particles to be randomly placed)."));
				MetaData->SetValue(NewProp_DistributeOverNPoints, TEXT("Category"), TEXT("Location"));
				MetaData->SetValue(NewProp_DistributeOverNPoints, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocation.h"));
				MetaData->SetValue(NewProp_DistributeOverNPoints, TEXT("ToolTip"), TEXT("When set to a non-zero value this will force the particles to only spawn on evenly distributed\npositions between the two points specified."));
				MetaData->SetValue(NewProp_StartLocation, TEXT("Category"), TEXT("Location"));
				MetaData->SetValue(NewProp_StartLocation, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocation.h"));
				MetaData->SetValue(NewProp_StartLocation, TEXT("ToolTip"), TEXT("The location the particle should be emitted.\nRelative in local space to the emitter by default.\nRelative in world space as a WorldOffset module or when the emitter's UseLocalSpace is off.\nRetrieved using the EmitterTime at the spawn of the particle."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleLocation(Z_Construct_UClass_UParticleModuleLocation, TEXT("UParticleModuleLocation"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleLocation);
	UClass* Z_Construct_UClass_UParticleModuleLocation_Seeded_NoRegister()
	{
		return UParticleModuleLocation_Seeded::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleLocation_Seeded()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleLocation();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleLocation_Seeded::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20801080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_RandomSeedInfo = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RandomSeedInfo"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(RandomSeedInfo, UParticleModuleLocation_Seeded), 0x0000000000000001, Z_Construct_UScriptStruct_FParticleRandomSeedInfo());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Initial Location (Seed)"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Location/ParticleModuleLocation_Seeded.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocation_Seeded.h"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("Category"), TEXT("RandomSeed"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocation_Seeded.h"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("ToolTip"), TEXT("The random seed(s) to use for looking up values in StartLocation"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleLocation_Seeded(Z_Construct_UClass_UParticleModuleLocation_Seeded, TEXT("UParticleModuleLocation_Seeded"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleLocation_Seeded);
	UClass* Z_Construct_UClass_UParticleModuleLocationWorldOffset_NoRegister()
	{
		return UParticleModuleLocationWorldOffset::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleLocationWorldOffset()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleLocation();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleLocationWorldOffset::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20801080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("World Offset"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Location/ParticleModuleLocationWorldOffset.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationWorldOffset.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleLocationWorldOffset(Z_Construct_UClass_UParticleModuleLocationWorldOffset, TEXT("UParticleModuleLocationWorldOffset"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleLocationWorldOffset);
	UClass* Z_Construct_UClass_UParticleModuleLocationWorldOffset_Seeded_NoRegister()
	{
		return UParticleModuleLocationWorldOffset_Seeded::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleLocationWorldOffset_Seeded()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleLocationWorldOffset();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleLocationWorldOffset_Seeded::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20801080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_RandomSeedInfo = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RandomSeedInfo"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(RandomSeedInfo, UParticleModuleLocationWorldOffset_Seeded), 0x0000000000000001, Z_Construct_UScriptStruct_FParticleRandomSeedInfo());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("World Offset (Seed)"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Location/ParticleModuleLocationWorldOffset_Seeded.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationWorldOffset_Seeded.h"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("Category"), TEXT("RandomSeed"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationWorldOffset_Seeded.h"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("ToolTip"), TEXT("The random seed(s) to use for looking up values in StartLocation"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleLocationWorldOffset_Seeded(Z_Construct_UClass_UParticleModuleLocationWorldOffset_Seeded, TEXT("UParticleModuleLocationWorldOffset_Seeded"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleLocationWorldOffset_Seeded);
	UEnum* Z_Construct_UEnum_Engine_ELocationBoneSocketSelectionMethod()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_ELocationBoneSocketSelectionMethod_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ELocationBoneSocketSelectionMethod"), 0, Get_Z_Construct_UEnum_Engine_ELocationBoneSocketSelectionMethod_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ELocationBoneSocketSelectionMethod"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("BONESOCKETSEL_Sequential")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("BONESOCKETSEL_Random")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("BONESOCKETSEL_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationBoneSocket.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_ELocationBoneSocketSelectionMethod_CRC() { return 226607212U; }
	UEnum* Z_Construct_UEnum_Engine_ELocationBoneSocketSource()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_ELocationBoneSocketSource_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ELocationBoneSocketSource"), 0, Get_Z_Construct_UEnum_Engine_ELocationBoneSocketSource_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ELocationBoneSocketSource"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("BONESOCKETSOURCE_Bones")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("BONESOCKETSOURCE_Sockets")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("BONESOCKETSOURCE_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationBoneSocket.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_ELocationBoneSocketSource_CRC() { return 2341328844U; }
	UScriptStruct* Z_Construct_UScriptStruct_FLocationBoneSocketInfo()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FLocationBoneSocketInfo_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("LocationBoneSocketInfo"), sizeof(FLocationBoneSocketInfo), Get_Z_Construct_UScriptStruct_FLocationBoneSocketInfo_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LocationBoneSocketInfo"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FLocationBoneSocketInfo>, EStructFlags(0x00000001));
			UProperty* NewProp_Offset = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Offset"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Offset, FLocationBoneSocketInfo), 0x0000000000000001, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_BoneSocketName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BoneSocketName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(BoneSocketName, FLocationBoneSocketInfo), 0x0000000000000001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationBoneSocket.h"));
			MetaData->SetValue(NewProp_Offset, TEXT("Category"), TEXT("LocationBoneSocketInfo"));
			MetaData->SetValue(NewProp_Offset, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationBoneSocket.h"));
			MetaData->SetValue(NewProp_Offset, TEXT("ToolTip"), TEXT("The offset from the bone/socket to use"));
			MetaData->SetValue(NewProp_BoneSocketName, TEXT("Category"), TEXT("LocationBoneSocketInfo"));
			MetaData->SetValue(NewProp_BoneSocketName, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationBoneSocket.h"));
			MetaData->SetValue(NewProp_BoneSocketName, TEXT("ToolTip"), TEXT("The name of the bone/socket on the skeletal mesh"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FLocationBoneSocketInfo_CRC() { return 4137642577U; }
	UClass* Z_Construct_UClass_UParticleModuleLocationBoneSocket_NoRegister()
	{
		return UParticleModuleLocationBoneSocket::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleLocationBoneSocket()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleLocationBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleLocationBoneSocket::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20001080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_EditorSkelMesh = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EditorSkelMesh"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(EditorSkelMesh, UParticleModuleLocationBoneSocket), 0x0000000800000001, Z_Construct_UClass_USkeletalMesh_NoRegister());
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_SkelMeshActorParamName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SkelMeshActorParamName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(SkelMeshActorParamName, UParticleModuleLocationBoneSocket), 0x0000000000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bInheritBoneVelocity, UParticleModuleLocationBoneSocket, uint8);
				UProperty* NewProp_bInheritBoneVelocity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bInheritBoneVelocity"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bInheritBoneVelocity, UParticleModuleLocationBoneSocket), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bInheritBoneVelocity, UParticleModuleLocationBoneSocket), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOrientMeshEmitters, UParticleModuleLocationBoneSocket, uint8);
				UProperty* NewProp_bOrientMeshEmitters = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bOrientMeshEmitters"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOrientMeshEmitters, UParticleModuleLocationBoneSocket), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bOrientMeshEmitters, UParticleModuleLocationBoneSocket), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUpdatePositionEachFrame, UParticleModuleLocationBoneSocket, uint8);
				UProperty* NewProp_bUpdatePositionEachFrame = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUpdatePositionEachFrame"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUpdatePositionEachFrame, UParticleModuleLocationBoneSocket), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bUpdatePositionEachFrame, UParticleModuleLocationBoneSocket), sizeof(uint8), false);
				UProperty* NewProp_SelectionMethod = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SelectionMethod"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(SelectionMethod, UParticleModuleLocationBoneSocket), 0x0000000000000001, Z_Construct_UEnum_Engine_ELocationBoneSocketSelectionMethod());
				UProperty* NewProp_SourceLocations = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SourceLocations"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(SourceLocations, UParticleModuleLocationBoneSocket), 0x0000000000000001);
				UProperty* NewProp_SourceLocations_Inner = new(EC_InternalUseOnlyConstructor, NewProp_SourceLocations, TEXT("SourceLocations"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FLocationBoneSocketInfo());
				UProperty* NewProp_UniversalOffset = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UniversalOffset"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(UniversalOffset, UParticleModuleLocationBoneSocket), 0x0000000000000001, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_SourceType = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SourceType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(SourceType, UParticleModuleLocationBoneSocket), 0x0000000000000001, Z_Construct_UEnum_Engine_ELocationBoneSocketSource());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Bone/Socket Location"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Location/ParticleModuleLocationBoneSocket.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationBoneSocket.h"));
				MetaData->SetValue(NewProp_EditorSkelMesh, TEXT("Category"), TEXT("BoneSocket"));
				MetaData->SetValue(NewProp_EditorSkelMesh, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationBoneSocket.h"));
				MetaData->SetValue(NewProp_EditorSkelMesh, TEXT("ToolTip"), TEXT("The name of the skeletal mesh to use in the editor"));
				MetaData->SetValue(NewProp_SkelMeshActorParamName, TEXT("Category"), TEXT("BoneSocket"));
				MetaData->SetValue(NewProp_SkelMeshActorParamName, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationBoneSocket.h"));
				MetaData->SetValue(NewProp_SkelMeshActorParamName, TEXT("ToolTip"), TEXT("The parameter name of the skeletal mesh actor that supplies the SkelMeshComponent for in-game."));
				MetaData->SetValue(NewProp_bInheritBoneVelocity, TEXT("Category"), TEXT("BoneSocket"));
				MetaData->SetValue(NewProp_bInheritBoneVelocity, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationBoneSocket.h"));
				MetaData->SetValue(NewProp_bInheritBoneVelocity, TEXT("ToolTip"), TEXT("If true, particles inherit the associated bone velocity when spawned"));
				MetaData->SetValue(NewProp_bOrientMeshEmitters, TEXT("Category"), TEXT("BoneSocket"));
				MetaData->SetValue(NewProp_bOrientMeshEmitters, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationBoneSocket.h"));
				MetaData->SetValue(NewProp_bOrientMeshEmitters, TEXT("ToolTip"), TEXT("If true, rotate mesh emitter meshes to orient w/ the socket"));
				MetaData->SetValue(NewProp_bUpdatePositionEachFrame, TEXT("Category"), TEXT("BoneSocket"));
				MetaData->SetValue(NewProp_bUpdatePositionEachFrame, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationBoneSocket.h"));
				MetaData->SetValue(NewProp_bUpdatePositionEachFrame, TEXT("ToolTip"), TEXT("If true, update the particle locations each frame with that of the bone/socket"));
				MetaData->SetValue(NewProp_SelectionMethod, TEXT("Category"), TEXT("BoneSocket"));
				MetaData->SetValue(NewProp_SelectionMethod, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationBoneSocket.h"));
				MetaData->SetValue(NewProp_SelectionMethod, TEXT("ToolTip"), TEXT("The method by which to select the bone/socket to spawn at.\n\nSEL_Sequential                  - loop through the bone/socket array in order\nSEL_Random                              - randomly select a bone/socket from the array"));
				MetaData->SetValue(NewProp_SourceLocations, TEXT("Category"), TEXT("BoneSocket"));
				MetaData->SetValue(NewProp_SourceLocations, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationBoneSocket.h"));
				MetaData->SetValue(NewProp_SourceLocations, TEXT("ToolTip"), TEXT("The name(s) of the bone/socket(s) to position at"));
				MetaData->SetValue(NewProp_UniversalOffset, TEXT("Category"), TEXT("BoneSocket"));
				MetaData->SetValue(NewProp_UniversalOffset, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationBoneSocket.h"));
				MetaData->SetValue(NewProp_UniversalOffset, TEXT("ToolTip"), TEXT("An offset to apply to each bone/socket"));
				MetaData->SetValue(NewProp_SourceType, TEXT("Category"), TEXT("BoneSocket"));
				MetaData->SetValue(NewProp_SourceType, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationBoneSocket.h"));
				MetaData->SetValue(NewProp_SourceType, TEXT("ToolTip"), TEXT("Whether the module uses Bones or Sockets for locations.\n\nBONESOCKETSOURCE_Bones          - Use Bones as the source locations.\nBONESOCKETSOURCE_Sockets        - Use Sockets as the source locations."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleLocationBoneSocket(Z_Construct_UClass_UParticleModuleLocationBoneSocket, TEXT("UParticleModuleLocationBoneSocket"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleLocationBoneSocket);
	UClass* Z_Construct_UClass_UParticleModuleLocationDirect_NoRegister()
	{
		return UParticleModuleLocationDirect::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleLocationDirect()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleLocationBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleLocationDirect::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Direction = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Direction"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Direction, UParticleModuleLocationDirect), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
				UProperty* NewProp_ScaleFactor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ScaleFactor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ScaleFactor, UParticleModuleLocationDirect), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
				UProperty* NewProp_LocationOffset = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LocationOffset"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LocationOffset, UParticleModuleLocationDirect), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
				UProperty* NewProp_Location = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Location"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Location, UParticleModuleLocationDirect), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Direct Location"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Location/ParticleModuleLocationDirect.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationDirect.h"));
				MetaData->SetValue(NewProp_Direction, TEXT("Category"), TEXT("Location"));
				MetaData->SetValue(NewProp_Direction, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationDirect.h"));
				MetaData->SetValue(NewProp_Direction, TEXT("ToolTip"), TEXT("Currently unused."));
				MetaData->SetValue(NewProp_ScaleFactor, TEXT("Category"), TEXT("Location"));
				MetaData->SetValue(NewProp_ScaleFactor, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationDirect.h"));
				MetaData->SetValue(NewProp_ScaleFactor, TEXT("ToolTip"), TEXT("Scales the velocity of the object at a given point in the time-line."));
				MetaData->SetValue(NewProp_LocationOffset, TEXT("Category"), TEXT("Location"));
				MetaData->SetValue(NewProp_LocationOffset, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationDirect.h"));
				MetaData->SetValue(NewProp_LocationOffset, TEXT("ToolTip"), TEXT("An offset to apply to the position retrieved from the Location calculation.\nThe offset is retrieved using the EmitterTime.\nThe offset will remain constant over the life of the particle."));
				MetaData->SetValue(NewProp_Location, TEXT("Category"), TEXT("Location"));
				MetaData->SetValue(NewProp_Location, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationDirect.h"));
				MetaData->SetValue(NewProp_Location, TEXT("ToolTip"), TEXT("The location of the particle at a give time. Retrieved using the particle RelativeTime.\nIMPORTANT: the particle location is set to this value, thereby over-writing any previous module impacts."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleLocationDirect(Z_Construct_UClass_UParticleModuleLocationDirect, TEXT("UParticleModuleLocationDirect"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleLocationDirect);
	UEnum* Z_Construct_UEnum_Engine_ELocationEmitterSelectionMethod()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_ELocationEmitterSelectionMethod_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ELocationEmitterSelectionMethod"), 0, Get_Z_Construct_UEnum_Engine_ELocationEmitterSelectionMethod_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ELocationEmitterSelectionMethod"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ELESM_Random")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ELESM_Sequential")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ELESM_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationEmitter.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_ELocationEmitterSelectionMethod_CRC() { return 2385056776U; }
	UClass* Z_Construct_UClass_UParticleModuleLocationEmitter_NoRegister()
	{
		return UParticleModuleLocationEmitter::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleLocationEmitter()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleLocationBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleLocationEmitter::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20081080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_InheritSourceRotationScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InheritSourceRotationScale"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InheritSourceRotationScale, UParticleModuleLocationEmitter), 0x0000000000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bInheritSourceRotation, UParticleModuleLocationEmitter, uint8);
				UProperty* NewProp_bInheritSourceRotation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bInheritSourceRotation"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bInheritSourceRotation, UParticleModuleLocationEmitter), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bInheritSourceRotation, UParticleModuleLocationEmitter), sizeof(uint8), false);
				UProperty* NewProp_InheritSourceVelocityScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InheritSourceVelocityScale"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InheritSourceVelocityScale, UParticleModuleLocationEmitter), 0x0000000000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(InheritSourceVelocity, UParticleModuleLocationEmitter, uint8);
				UProperty* NewProp_InheritSourceVelocity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InheritSourceVelocity"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(InheritSourceVelocity, UParticleModuleLocationEmitter), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(InheritSourceVelocity, UParticleModuleLocationEmitter), sizeof(uint8), false);
				UProperty* NewProp_SelectionMethod = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SelectionMethod"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(SelectionMethod, UParticleModuleLocationEmitter), 0x0000000000000001, Z_Construct_UEnum_Engine_ELocationEmitterSelectionMethod());
				UProperty* NewProp_EmitterName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EmitterName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(EmitterName, UParticleModuleLocationEmitter), 0x0000000002000009);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Emitter Initial Location"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Location/ParticleModuleLocationEmitter.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationEmitter.h"));
				MetaData->SetValue(NewProp_InheritSourceRotationScale, TEXT("Category"), TEXT("Location"));
				MetaData->SetValue(NewProp_InheritSourceRotationScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationEmitter.h"));
				MetaData->SetValue(NewProp_InheritSourceRotationScale, TEXT("ToolTip"), TEXT("Amount to scale the source rotation by when inheriting it."));
				MetaData->SetValue(NewProp_bInheritSourceRotation, TEXT("Category"), TEXT("Location"));
				MetaData->SetValue(NewProp_bInheritSourceRotation, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationEmitter.h"));
				MetaData->SetValue(NewProp_bInheritSourceRotation, TEXT("ToolTip"), TEXT("If true, the spawned particle should inherit the rotation of the source particle."));
				MetaData->SetValue(NewProp_InheritSourceVelocityScale, TEXT("Category"), TEXT("Location"));
				MetaData->SetValue(NewProp_InheritSourceVelocityScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationEmitter.h"));
				MetaData->SetValue(NewProp_InheritSourceVelocityScale, TEXT("ToolTip"), TEXT("Amount to scale the source velocity by when inheriting it."));
				MetaData->SetValue(NewProp_InheritSourceVelocity, TEXT("Category"), TEXT("Location"));
				MetaData->SetValue(NewProp_InheritSourceVelocity, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationEmitter.h"));
				MetaData->SetValue(NewProp_InheritSourceVelocity, TEXT("ToolTip"), TEXT("If true, the spawned particle should inherit the velocity of the source particle."));
				MetaData->SetValue(NewProp_SelectionMethod, TEXT("Category"), TEXT("Location"));
				MetaData->SetValue(NewProp_SelectionMethod, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationEmitter.h"));
				MetaData->SetValue(NewProp_SelectionMethod, TEXT("ToolTip"), TEXT("The method to use when selecting a spawn target particle from the emitter.\nCan be one of the following:\n        ELESM_Random            Randomly select a particle from the source emitter.\n        ELESM_Sequential        Step through each particle from the source emitter in order."));
				MetaData->SetValue(NewProp_EmitterName, TEXT("Category"), TEXT("Location"));
				MetaData->SetValue(NewProp_EmitterName, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationEmitter.h"));
				MetaData->SetValue(NewProp_EmitterName, TEXT("ToolTip"), TEXT("The name of the emitter to use that the source location for particle."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleLocationEmitter(Z_Construct_UClass_UParticleModuleLocationEmitter, TEXT("UParticleModuleLocationEmitter"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleLocationEmitter);
	UClass* Z_Construct_UClass_UParticleModuleLocationEmitterDirect_NoRegister()
	{
		return UParticleModuleLocationEmitterDirect::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleLocationEmitterDirect()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleLocationBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleLocationEmitterDirect::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20001080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_EmitterName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EmitterName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(EmitterName, UParticleModuleLocationEmitterDirect), 0x0000000002000009);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Emitter Direct Location"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Location/ParticleModuleLocationEmitterDirect.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationEmitterDirect.h"));
				MetaData->SetValue(NewProp_EmitterName, TEXT("Category"), TEXT("Location"));
				MetaData->SetValue(NewProp_EmitterName, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationEmitterDirect.h"));
				MetaData->SetValue(NewProp_EmitterName, TEXT("ToolTip"), TEXT("The name of the emitter to use as a source for the location of the particles."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleLocationEmitterDirect(Z_Construct_UClass_UParticleModuleLocationEmitterDirect, TEXT("UParticleModuleLocationEmitterDirect"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleLocationEmitterDirect);
	UClass* Z_Construct_UClass_UParticleModuleLocationPrimitiveBase_NoRegister()
	{
		return UParticleModuleLocationPrimitiveBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleLocationPrimitiveBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleLocationBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleLocationPrimitiveBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20801080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_StartLocation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StartLocation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(StartLocation, UParticleModuleLocationPrimitiveBase), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
				UProperty* NewProp_VelocityScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VelocityScale"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(VelocityScale, UParticleModuleLocationPrimitiveBase), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(Velocity, UParticleModuleLocationPrimitiveBase, uint8);
				UProperty* NewProp_Velocity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Velocity"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Velocity, UParticleModuleLocationPrimitiveBase), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(Velocity, UParticleModuleLocationPrimitiveBase), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(SurfaceOnly, UParticleModuleLocationPrimitiveBase, uint8);
				UProperty* NewProp_SurfaceOnly = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SurfaceOnly"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(SurfaceOnly, UParticleModuleLocationPrimitiveBase), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(SurfaceOnly, UParticleModuleLocationPrimitiveBase), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(Negative_Z, UParticleModuleLocationPrimitiveBase, uint8);
				UProperty* NewProp_Negative_Z = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Negative_Z"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Negative_Z, UParticleModuleLocationPrimitiveBase), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(Negative_Z, UParticleModuleLocationPrimitiveBase), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(Negative_Y, UParticleModuleLocationPrimitiveBase, uint8);
				UProperty* NewProp_Negative_Y = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Negative_Y"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Negative_Y, UParticleModuleLocationPrimitiveBase), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(Negative_Y, UParticleModuleLocationPrimitiveBase), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(Negative_X, UParticleModuleLocationPrimitiveBase, uint8);
				UProperty* NewProp_Negative_X = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Negative_X"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Negative_X, UParticleModuleLocationPrimitiveBase), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(Negative_X, UParticleModuleLocationPrimitiveBase), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(Positive_Z, UParticleModuleLocationPrimitiveBase, uint8);
				UProperty* NewProp_Positive_Z = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Positive_Z"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Positive_Z, UParticleModuleLocationPrimitiveBase), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(Positive_Z, UParticleModuleLocationPrimitiveBase), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(Positive_Y, UParticleModuleLocationPrimitiveBase, uint8);
				UProperty* NewProp_Positive_Y = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Positive_Y"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Positive_Y, UParticleModuleLocationPrimitiveBase), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(Positive_Y, UParticleModuleLocationPrimitiveBase), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(Positive_X, UParticleModuleLocationPrimitiveBase, uint8);
				UProperty* NewProp_Positive_X = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Positive_X"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Positive_X, UParticleModuleLocationPrimitiveBase), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(Positive_X, UParticleModuleLocationPrimitiveBase), sizeof(uint8), false);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Location/ParticleModuleLocationPrimitiveBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationPrimitiveBase.h"));
				MetaData->SetValue(NewProp_StartLocation, TEXT("Category"), TEXT("Location"));
				MetaData->SetValue(NewProp_StartLocation, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationPrimitiveBase.h"));
				MetaData->SetValue(NewProp_StartLocation, TEXT("ToolTip"), TEXT("The location of the bounding primitive relative to the position of the emitter."));
				MetaData->SetValue(NewProp_VelocityScale, TEXT("Category"), TEXT("Location"));
				MetaData->SetValue(NewProp_VelocityScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationPrimitiveBase.h"));
				MetaData->SetValue(NewProp_VelocityScale, TEXT("ToolTip"), TEXT("The scale applied to the velocity. (Only used if 'Velocity' is checked)."));
				MetaData->SetValue(NewProp_Velocity, TEXT("Category"), TEXT("Location"));
				MetaData->SetValue(NewProp_Velocity, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationPrimitiveBase.h"));
				MetaData->SetValue(NewProp_Velocity, TEXT("ToolTip"), TEXT("Whether the particle should get its velocity from the position within the primitive."));
				MetaData->SetValue(NewProp_SurfaceOnly, TEXT("Category"), TEXT("Location"));
				MetaData->SetValue(NewProp_SurfaceOnly, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationPrimitiveBase.h"));
				MetaData->SetValue(NewProp_SurfaceOnly, TEXT("ToolTip"), TEXT("Whether particles will only spawn on the surface of the primitive."));
				MetaData->SetValue(NewProp_Negative_Z, TEXT("Category"), TEXT("Location"));
				MetaData->SetValue(NewProp_Negative_Z, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationPrimitiveBase.h"));
				MetaData->SetValue(NewProp_Negative_Z, TEXT("ToolTip"), TEXT("Whether the negative Zaxis is valid for spawning."));
				MetaData->SetValue(NewProp_Negative_Y, TEXT("Category"), TEXT("Location"));
				MetaData->SetValue(NewProp_Negative_Y, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationPrimitiveBase.h"));
				MetaData->SetValue(NewProp_Negative_Y, TEXT("ToolTip"), TEXT("Whether the negative Y axis is valid for spawning."));
				MetaData->SetValue(NewProp_Negative_X, TEXT("Category"), TEXT("Location"));
				MetaData->SetValue(NewProp_Negative_X, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationPrimitiveBase.h"));
				MetaData->SetValue(NewProp_Negative_X, TEXT("ToolTip"), TEXT("Whether the negative X axis is valid for spawning."));
				MetaData->SetValue(NewProp_Positive_Z, TEXT("Category"), TEXT("Location"));
				MetaData->SetValue(NewProp_Positive_Z, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationPrimitiveBase.h"));
				MetaData->SetValue(NewProp_Positive_Z, TEXT("ToolTip"), TEXT("Whether the positive Z axis is valid for spawning."));
				MetaData->SetValue(NewProp_Positive_Y, TEXT("Category"), TEXT("Location"));
				MetaData->SetValue(NewProp_Positive_Y, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationPrimitiveBase.h"));
				MetaData->SetValue(NewProp_Positive_Y, TEXT("ToolTip"), TEXT("Whether the positive Y axis is valid for spawning."));
				MetaData->SetValue(NewProp_Positive_X, TEXT("Category"), TEXT("Location"));
				MetaData->SetValue(NewProp_Positive_X, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationPrimitiveBase.h"));
				MetaData->SetValue(NewProp_Positive_X, TEXT("ToolTip"), TEXT("Whether the positive X axis is valid for spawning."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleLocationPrimitiveBase(Z_Construct_UClass_UParticleModuleLocationPrimitiveBase, TEXT("UParticleModuleLocationPrimitiveBase"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleLocationPrimitiveBase);
	UEnum* Z_Construct_UEnum_Engine_CylinderHeightAxis()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_CylinderHeightAxis_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("CylinderHeightAxis"), 0, Get_Z_Construct_UEnum_Engine_CylinderHeightAxis_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CylinderHeightAxis"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PMLPC_HEIGHTAXIS_X")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PMLPC_HEIGHTAXIS_Y")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PMLPC_HEIGHTAXIS_Z")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PMLPC_HEIGHTAXIS_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationPrimitiveCylinder.h"));
			MetaData->SetValue(ReturnEnum, TEXT("PMLPC_HEIGHTAXIS_X.DisplayName"), TEXT("X"));
			MetaData->SetValue(ReturnEnum, TEXT("PMLPC_HEIGHTAXIS_Y.DisplayName"), TEXT("Y"));
			MetaData->SetValue(ReturnEnum, TEXT("PMLPC_HEIGHTAXIS_Z.DisplayName"), TEXT("Z"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_CylinderHeightAxis_CRC() { return 2405928056U; }
	UClass* Z_Construct_UClass_UParticleModuleLocationPrimitiveCylinder_NoRegister()
	{
		return UParticleModuleLocationPrimitiveCylinder::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleLocationPrimitiveCylinder()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleLocationPrimitiveBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleLocationPrimitiveCylinder::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_HeightAxis = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HeightAxis"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(HeightAxis, UParticleModuleLocationPrimitiveCylinder), 0x0000000000000001, Z_Construct_UEnum_Engine_CylinderHeightAxis());
				UProperty* NewProp_StartHeight = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StartHeight"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(StartHeight, UParticleModuleLocationPrimitiveCylinder), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				UProperty* NewProp_StartRadius = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StartRadius"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(StartRadius, UParticleModuleLocationPrimitiveCylinder), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(RadialVelocity, UParticleModuleLocationPrimitiveCylinder, uint8);
				UProperty* NewProp_RadialVelocity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RadialVelocity"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(RadialVelocity, UParticleModuleLocationPrimitiveCylinder), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(RadialVelocity, UParticleModuleLocationPrimitiveCylinder), sizeof(uint8), false);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Cylinder"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Location/ParticleModuleLocationPrimitiveCylinder.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationPrimitiveCylinder.h"));
				MetaData->SetValue(NewProp_HeightAxis, TEXT("Category"), TEXT("Location"));
				MetaData->SetValue(NewProp_HeightAxis, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationPrimitiveCylinder.h"));
				MetaData->SetValue(NewProp_HeightAxis, TEXT("ToolTip"), TEXT("Determine particle particle system axis that should represent the height of the cylinder.\nCan be one of the following:\n  PMLPC_HEIGHTAXIS_X - Orient the height along the particle system X-axis.\n  PMLPC_HEIGHTAXIS_Y - Orient the height along the particle system Y-axis.\n  PMLPC_HEIGHTAXIS_Z - Orient the height along the particle system Z-axis."));
				MetaData->SetValue(NewProp_StartHeight, TEXT("Category"), TEXT("Location"));
				MetaData->SetValue(NewProp_StartHeight, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationPrimitiveCylinder.h"));
				MetaData->SetValue(NewProp_StartHeight, TEXT("ToolTip"), TEXT("The height of the cylinder, centered about the location."));
				MetaData->SetValue(NewProp_StartRadius, TEXT("Category"), TEXT("Location"));
				MetaData->SetValue(NewProp_StartRadius, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationPrimitiveCylinder.h"));
				MetaData->SetValue(NewProp_StartRadius, TEXT("ToolTip"), TEXT("The radius of the cylinder."));
				MetaData->SetValue(NewProp_RadialVelocity, TEXT("Category"), TEXT("Location"));
				MetaData->SetValue(NewProp_RadialVelocity, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationPrimitiveCylinder.h"));
				MetaData->SetValue(NewProp_RadialVelocity, TEXT("ToolTip"), TEXT("If true, get the particle velocity form the radial distance inside the primitive."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleLocationPrimitiveCylinder(Z_Construct_UClass_UParticleModuleLocationPrimitiveCylinder, TEXT("UParticleModuleLocationPrimitiveCylinder"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleLocationPrimitiveCylinder);
	UClass* Z_Construct_UClass_UParticleModuleLocationPrimitiveCylinder_Seeded_NoRegister()
	{
		return UParticleModuleLocationPrimitiveCylinder_Seeded::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleLocationPrimitiveCylinder_Seeded()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleLocationPrimitiveCylinder();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleLocationPrimitiveCylinder_Seeded::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20801080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_RandomSeedInfo = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RandomSeedInfo"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(RandomSeedInfo, UParticleModuleLocationPrimitiveCylinder_Seeded), 0x0000000000000001, Z_Construct_UScriptStruct_FParticleRandomSeedInfo());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Cylinder (Seed)"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Location/ParticleModuleLocationPrimitiveCylinder_Seeded.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationPrimitiveCylinder_Seeded.h"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("Category"), TEXT("RandomSeed"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationPrimitiveCylinder_Seeded.h"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("ToolTip"), TEXT("The random seed(s) to use for looking up values in StartLocation"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleLocationPrimitiveCylinder_Seeded(Z_Construct_UClass_UParticleModuleLocationPrimitiveCylinder_Seeded, TEXT("UParticleModuleLocationPrimitiveCylinder_Seeded"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleLocationPrimitiveCylinder_Seeded);
	UClass* Z_Construct_UClass_UParticleModuleLocationPrimitiveSphere_NoRegister()
	{
		return UParticleModuleLocationPrimitiveSphere::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleLocationPrimitiveSphere()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleLocationPrimitiveBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleLocationPrimitiveSphere::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_StartRadius = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StartRadius"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(StartRadius, UParticleModuleLocationPrimitiveSphere), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Sphere"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Location/ParticleModuleLocationPrimitiveSphere.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationPrimitiveSphere.h"));
				MetaData->SetValue(NewProp_StartRadius, TEXT("Category"), TEXT("Location"));
				MetaData->SetValue(NewProp_StartRadius, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationPrimitiveSphere.h"));
				MetaData->SetValue(NewProp_StartRadius, TEXT("ToolTip"), TEXT("The radius of the sphere. Retrieved using EmitterTime."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleLocationPrimitiveSphere(Z_Construct_UClass_UParticleModuleLocationPrimitiveSphere, TEXT("UParticleModuleLocationPrimitiveSphere"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleLocationPrimitiveSphere);
	UClass* Z_Construct_UClass_UParticleModuleLocationPrimitiveSphere_Seeded_NoRegister()
	{
		return UParticleModuleLocationPrimitiveSphere_Seeded::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleLocationPrimitiveSphere_Seeded()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleLocationPrimitiveSphere();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleLocationPrimitiveSphere_Seeded::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20801080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_RandomSeedInfo = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RandomSeedInfo"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(RandomSeedInfo, UParticleModuleLocationPrimitiveSphere_Seeded), 0x0000000000000001, Z_Construct_UScriptStruct_FParticleRandomSeedInfo());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Sphere (Seed)"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Location/ParticleModuleLocationPrimitiveSphere_Seeded.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationPrimitiveSphere_Seeded.h"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("Category"), TEXT("RandomSeed"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationPrimitiveSphere_Seeded.h"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("ToolTip"), TEXT("The random seed(s) to use for looking up values in StartLocation"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleLocationPrimitiveSphere_Seeded(Z_Construct_UClass_UParticleModuleLocationPrimitiveSphere_Seeded, TEXT("UParticleModuleLocationPrimitiveSphere_Seeded"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleLocationPrimitiveSphere_Seeded);
	UClass* Z_Construct_UClass_UParticleModuleLocationPrimitiveTriangle_NoRegister()
	{
		return UParticleModuleLocationPrimitiveTriangle::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleLocationPrimitiveTriangle()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleLocationBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleLocationPrimitiveTriangle::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Thickness = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Thickness"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Thickness, UParticleModuleLocationPrimitiveTriangle), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				UProperty* NewProp_Angle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Angle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Angle, UParticleModuleLocationPrimitiveTriangle), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				UProperty* NewProp_Height = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Height"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Height, UParticleModuleLocationPrimitiveTriangle), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				UProperty* NewProp_StartOffset = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StartOffset"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(StartOffset, UParticleModuleLocationPrimitiveTriangle), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Triangle"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Location/ParticleModuleLocationPrimitiveTriangle.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationPrimitiveTriangle.h"));
				MetaData->SetValue(NewProp_Thickness, TEXT("Category"), TEXT("Location"));
				MetaData->SetValue(NewProp_Thickness, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationPrimitiveTriangle.h"));
				MetaData->SetValue(NewProp_Angle, TEXT("Category"), TEXT("Location"));
				MetaData->SetValue(NewProp_Angle, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationPrimitiveTriangle.h"));
				MetaData->SetValue(NewProp_Height, TEXT("Category"), TEXT("Location"));
				MetaData->SetValue(NewProp_Height, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationPrimitiveTriangle.h"));
				MetaData->SetValue(NewProp_StartOffset, TEXT("Category"), TEXT("Location"));
				MetaData->SetValue(NewProp_StartOffset, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationPrimitiveTriangle.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleLocationPrimitiveTriangle(Z_Construct_UClass_UParticleModuleLocationPrimitiveTriangle, TEXT("UParticleModuleLocationPrimitiveTriangle"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleLocationPrimitiveTriangle);
	UEnum* Z_Construct_UEnum_Engine_ELocationSkelVertSurfaceSource()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_ELocationSkelVertSurfaceSource_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ELocationSkelVertSurfaceSource"), 0, Get_Z_Construct_UEnum_Engine_ELocationSkelVertSurfaceSource_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ELocationSkelVertSurfaceSource"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("VERTSURFACESOURCE_Vert")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("VERTSURFACESOURCE_Surface")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("VERTSURFACESOURCE_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationSkelVertSurface.h"));
			MetaData->SetValue(ReturnEnum, TEXT("VERTSURFACESOURCE_Surface.DisplayName"), TEXT("Surfaces"));
			MetaData->SetValue(ReturnEnum, TEXT("VERTSURFACESOURCE_Vert.DisplayName"), TEXT("Vertices"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_ELocationSkelVertSurfaceSource_CRC() { return 2374862962U; }
	UClass* Z_Construct_UClass_UParticleModuleLocationSkelVertSurface_NoRegister()
	{
		return UParticleModuleLocationSkelVertSurface::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleLocationSkelVertSurface()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleLocationBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleLocationSkelVertSurface::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20001080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bInheritVertexColor, UParticleModuleLocationSkelVertSurface, uint8);
				UProperty* NewProp_bInheritVertexColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bInheritVertexColor"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bInheritVertexColor, UParticleModuleLocationSkelVertSurface), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bInheritVertexColor, UParticleModuleLocationSkelVertSurface), sizeof(uint8), false);
				UProperty* NewProp_ValidMaterialIndices = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ValidMaterialIndices"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ValidMaterialIndices, UParticleModuleLocationSkelVertSurface), 0x0000000000000001);
				UProperty* NewProp_ValidMaterialIndices_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ValidMaterialIndices, TEXT("ValidMaterialIndices"), RF_Public|RF_Transient|RF_Native) UIntProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
				UProperty* NewProp_NormalCheckTolerance = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NormalCheckTolerance"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(NormalCheckTolerance, UParticleModuleLocationSkelVertSurface), 0x0000000000000000);
				UProperty* NewProp_NormalCheckToleranceDegrees = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NormalCheckToleranceDegrees"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(NormalCheckToleranceDegrees, UParticleModuleLocationSkelVertSurface), 0x0000000000000001);
				UProperty* NewProp_NormalToCompare = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NormalToCompare"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(NormalToCompare, UParticleModuleLocationSkelVertSurface), 0x0000000000000001, Z_Construct_UScriptStruct_FVector());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnforceNormalCheck, UParticleModuleLocationSkelVertSurface, uint8);
				UProperty* NewProp_bEnforceNormalCheck = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bEnforceNormalCheck"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnforceNormalCheck, UParticleModuleLocationSkelVertSurface), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bEnforceNormalCheck, UParticleModuleLocationSkelVertSurface), sizeof(uint8), false);
				UProperty* NewProp_ValidAssociatedBones = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ValidAssociatedBones"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ValidAssociatedBones, UParticleModuleLocationSkelVertSurface), 0x0000000000000001);
				UProperty* NewProp_ValidAssociatedBones_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ValidAssociatedBones, TEXT("ValidAssociatedBones"), RF_Public|RF_Transient|RF_Native) UNameProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_EditorSkelMesh = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EditorSkelMesh"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(EditorSkelMesh, UParticleModuleLocationSkelVertSurface), 0x0000000800000001, Z_Construct_UClass_USkeletalMesh_NoRegister());
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_SkelMeshActorParamName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SkelMeshActorParamName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(SkelMeshActorParamName, UParticleModuleLocationSkelVertSurface), 0x0000000000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bInheritBoneVelocity, UParticleModuleLocationSkelVertSurface, uint8);
				UProperty* NewProp_bInheritBoneVelocity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bInheritBoneVelocity"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bInheritBoneVelocity, UParticleModuleLocationSkelVertSurface), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bInheritBoneVelocity, UParticleModuleLocationSkelVertSurface), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOrientMeshEmitters, UParticleModuleLocationSkelVertSurface, uint8);
				UProperty* NewProp_bOrientMeshEmitters = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bOrientMeshEmitters"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOrientMeshEmitters, UParticleModuleLocationSkelVertSurface), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bOrientMeshEmitters, UParticleModuleLocationSkelVertSurface), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUpdatePositionEachFrame, UParticleModuleLocationSkelVertSurface, uint8);
				UProperty* NewProp_bUpdatePositionEachFrame = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUpdatePositionEachFrame"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUpdatePositionEachFrame, UParticleModuleLocationSkelVertSurface), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bUpdatePositionEachFrame, UParticleModuleLocationSkelVertSurface), sizeof(uint8), false);
				UProperty* NewProp_UniversalOffset = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UniversalOffset"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(UniversalOffset, UParticleModuleLocationSkelVertSurface), 0x0000000000000001, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_SourceType = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SourceType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(SourceType, UParticleModuleLocationSkelVertSurface), 0x0000000000000001, Z_Construct_UEnum_Engine_ELocationSkelVertSurfaceSource());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Skel Vert/Surf Location"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Location/ParticleModuleLocationSkelVertSurface.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationSkelVertSurface.h"));
				MetaData->SetValue(NewProp_bInheritVertexColor, TEXT("Category"), TEXT("VertSurface"));
				MetaData->SetValue(NewProp_bInheritVertexColor, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationSkelVertSurface.h"));
				MetaData->SetValue(NewProp_bInheritVertexColor, TEXT("ToolTip"), TEXT("If true, particles inherit the associated vertex color on spawn. This feature is not supported for GPU particles."));
				MetaData->SetValue(NewProp_ValidMaterialIndices, TEXT("Category"), TEXT("VertSurface"));
				MetaData->SetValue(NewProp_ValidMaterialIndices, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationSkelVertSurface.h"));
				MetaData->SetValue(NewProp_ValidMaterialIndices, TEXT("ToolTip"), TEXT("Array of material indices that are valid materials to spawn from.\nIf empty, any material will be considered valid"));
				MetaData->SetValue(NewProp_NormalCheckTolerance, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationSkelVertSurface.h"));
				MetaData->SetValue(NewProp_NormalCheckTolerance, TEXT("ToolTip"), TEXT("Normal tolerance.  Value between 1.0 and -1.0 with 1.0 being exact match, 0.0 being everything up to\n              perpendicular and -1.0 being any direction or don't restrict at all."));
				MetaData->SetValue(NewProp_NormalCheckToleranceDegrees, TEXT("Category"), TEXT("VertSurface"));
				MetaData->SetValue(NewProp_NormalCheckToleranceDegrees, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationSkelVertSurface.h"));
				MetaData->SetValue(NewProp_NormalCheckToleranceDegrees, TEXT("ToolTip"), TEXT("Normal tolerance.  0 degrees means it must be an exact match, 180 degrees means it can be any angle."));
				MetaData->SetValue(NewProp_NormalToCompare, TEXT("Category"), TEXT("VertSurface"));
				MetaData->SetValue(NewProp_NormalToCompare, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationSkelVertSurface.h"));
				MetaData->SetValue(NewProp_NormalToCompare, TEXT("ToolTip"), TEXT("Use this normal to restrict spawning locations"));
				MetaData->SetValue(NewProp_bEnforceNormalCheck, TEXT("Category"), TEXT("VertSurface"));
				MetaData->SetValue(NewProp_bEnforceNormalCheck, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationSkelVertSurface.h"));
				MetaData->SetValue(NewProp_bEnforceNormalCheck, TEXT("ToolTip"), TEXT("When true use the RestrictToNormal and NormalTolerance values to check surface normals"));
				MetaData->SetValue(NewProp_ValidAssociatedBones, TEXT("Category"), TEXT("VertSurface"));
				MetaData->SetValue(NewProp_ValidAssociatedBones, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationSkelVertSurface.h"));
				MetaData->SetValue(NewProp_ValidAssociatedBones, TEXT("ToolTip"), TEXT("This module will only spawn from verts or surfaces associated with the bones in this list"));
				MetaData->SetValue(NewProp_EditorSkelMesh, TEXT("Category"), TEXT("VertSurface"));
				MetaData->SetValue(NewProp_EditorSkelMesh, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationSkelVertSurface.h"));
				MetaData->SetValue(NewProp_EditorSkelMesh, TEXT("ToolTip"), TEXT("The name of the skeletal mesh to use in the editor"));
				MetaData->SetValue(NewProp_SkelMeshActorParamName, TEXT("Category"), TEXT("VertSurface"));
				MetaData->SetValue(NewProp_SkelMeshActorParamName, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationSkelVertSurface.h"));
				MetaData->SetValue(NewProp_SkelMeshActorParamName, TEXT("ToolTip"), TEXT("The parameter name of the skeletal mesh actor that supplies the SkelMeshComponent for in-game."));
				MetaData->SetValue(NewProp_bInheritBoneVelocity, TEXT("Category"), TEXT("VertSurface"));
				MetaData->SetValue(NewProp_bInheritBoneVelocity, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationSkelVertSurface.h"));
				MetaData->SetValue(NewProp_bInheritBoneVelocity, TEXT("ToolTip"), TEXT("If true, particles inherit the associated bone velocity when spawned"));
				MetaData->SetValue(NewProp_bOrientMeshEmitters, TEXT("Category"), TEXT("VertSurface"));
				MetaData->SetValue(NewProp_bOrientMeshEmitters, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationSkelVertSurface.h"));
				MetaData->SetValue(NewProp_bOrientMeshEmitters, TEXT("ToolTip"), TEXT("If true, rotate mesh emitter meshes to orient w/ the vert/surface"));
				MetaData->SetValue(NewProp_bUpdatePositionEachFrame, TEXT("Category"), TEXT("VertSurface"));
				MetaData->SetValue(NewProp_bUpdatePositionEachFrame, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationSkelVertSurface.h"));
				MetaData->SetValue(NewProp_bUpdatePositionEachFrame, TEXT("ToolTip"), TEXT("If true, update the particle locations each frame with that of the vert/surface"));
				MetaData->SetValue(NewProp_UniversalOffset, TEXT("Category"), TEXT("VertSurface"));
				MetaData->SetValue(NewProp_UniversalOffset, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationSkelVertSurface.h"));
				MetaData->SetValue(NewProp_UniversalOffset, TEXT("ToolTip"), TEXT("An offset to apply to each vert/surface"));
				MetaData->SetValue(NewProp_SourceType, TEXT("Category"), TEXT("VertSurface"));
				MetaData->SetValue(NewProp_SourceType, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationSkelVertSurface.h"));
				MetaData->SetValue(NewProp_SourceType, TEXT("ToolTip"), TEXT("Whether the module uses Verts or Surfaces for locations.\n\nVERTSURFACESOURCE_Vert          - Use Verts as the source locations.\nVERTSURFACESOURCE_Surface       - Use Surfaces as the source locations."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleLocationSkelVertSurface(Z_Construct_UClass_UParticleModuleLocationSkelVertSurface, TEXT("UParticleModuleLocationSkelVertSurface"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleLocationSkelVertSurface);
	UClass* Z_Construct_UClass_UParticleModulePivotOffset_NoRegister()
	{
		return UParticleModulePivotOffset::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModulePivotOffset()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleLocationBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModulePivotOffset::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20081080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_PivotOffset = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PivotOffset"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PivotOffset, UParticleModulePivotOffset), 0x0000000000000001, Z_Construct_UScriptStruct_FVector2D());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Pivot Offset"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Modules/Location/ParticleModulePivotOffset.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Modules/Location/ParticleModulePivotOffset.h"));
				MetaData->SetValue(NewProp_PivotOffset, TEXT("Category"), TEXT("PivotOffset"));
				MetaData->SetValue(NewProp_PivotOffset, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Modules/Location/ParticleModulePivotOffset.h"));
				MetaData->SetValue(NewProp_PivotOffset, TEXT("ToolTip"), TEXT("Offset applied in UV space to the particle vertex positions. Defaults to (0.5,0.5) putting the pivot in the centre of the partilce."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModulePivotOffset(Z_Construct_UClass_UParticleModulePivotOffset, TEXT("UParticleModulePivotOffset"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModulePivotOffset);
	UClass* Z_Construct_UClass_UParticleModuleSourceMovement_NoRegister()
	{
		return UParticleModuleSourceMovement::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleSourceMovement()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleLocationBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleSourceMovement::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20801080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_SourceMovementScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SourceMovementScale"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SourceMovementScale, UParticleModuleSourceMovement), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Source Movement"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Location/ParticleModuleSourceMovement.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleSourceMovement.h"));
				MetaData->SetValue(NewProp_SourceMovementScale, TEXT("Category"), TEXT("SourceMovement"));
				MetaData->SetValue(NewProp_SourceMovementScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleSourceMovement.h"));
				MetaData->SetValue(NewProp_SourceMovementScale, TEXT("ToolTip"), TEXT("The scale factor to apply to the source movement before adding to the particle location.\nThe value is looked up using the particles RELATIVE time [0..1]."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleSourceMovement(Z_Construct_UClass_UParticleModuleSourceMovement, TEXT("UParticleModuleSourceMovement"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleSourceMovement);
	UClass* Z_Construct_UClass_UParticleModuleMaterialBase_NoRegister()
	{
		return UParticleModuleMaterialBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleMaterialBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModule();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleMaterialBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20001081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Material"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Material/ParticleModuleMaterialBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Material/ParticleModuleMaterialBase.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleMaterialBase(Z_Construct_UClass_UParticleModuleMaterialBase, TEXT("UParticleModuleMaterialBase"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleMaterialBase);
	UClass* Z_Construct_UClass_UParticleModuleMeshMaterial_NoRegister()
	{
		return UParticleModuleMeshMaterial::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleMeshMaterial()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleMaterialBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleMeshMaterial::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20081080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_MeshMaterials = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MeshMaterials"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(MeshMaterials, UParticleModuleMeshMaterial), 0x0000000000000001);
				UProperty* NewProp_MeshMaterials_Inner = new(EC_InternalUseOnlyConstructor, NewProp_MeshMaterials, TEXT("MeshMaterials"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UMaterialInterface_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Mesh Material"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Material/ParticleModuleMeshMaterial.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Material/ParticleModuleMeshMaterial.h"));
				MetaData->SetValue(NewProp_MeshMaterials, TEXT("Category"), TEXT("MeshMaterials"));
				MetaData->SetValue(NewProp_MeshMaterials, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Material/ParticleModuleMeshMaterial.h"));
				MetaData->SetValue(NewProp_MeshMaterials, TEXT("ToolTip"), TEXT("The array of materials to apply to the mesh particles."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleMeshMaterial(Z_Construct_UClass_UParticleModuleMeshMaterial, TEXT("UParticleModuleMeshMaterial"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleMeshMaterial);
	UClass* Z_Construct_UClass_UParticleModuleOrbitBase_NoRegister()
	{
		return UParticleModuleOrbitBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleOrbitBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModule();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleOrbitBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20001081;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseEmitterTime, UParticleModuleOrbitBase, uint8);
				UProperty* NewProp_bUseEmitterTime = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUseEmitterTime"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseEmitterTime, UParticleModuleOrbitBase), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bUseEmitterTime, UParticleModuleOrbitBase), sizeof(uint8), false);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Orbit"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Orbit/ParticleModuleOrbitBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Orbit/ParticleModuleOrbitBase.h"));
				MetaData->SetValue(NewProp_bUseEmitterTime, TEXT("Category"), TEXT("Orbit"));
				MetaData->SetValue(NewProp_bUseEmitterTime, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Orbit/ParticleModuleOrbitBase.h"));
				MetaData->SetValue(NewProp_bUseEmitterTime, TEXT("ToolTip"), TEXT("If true, distribution values will be retrieved using the EmitterTime.\nIf false (default), they will be retrieved using the Particle.RelativeTime."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleOrbitBase(Z_Construct_UClass_UParticleModuleOrbitBase, TEXT("UParticleModuleOrbitBase"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleOrbitBase);
	UEnum* Z_Construct_UEnum_Engine_EOrbitChainMode()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EOrbitChainMode_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EOrbitChainMode"), 0, Get_Z_Construct_UEnum_Engine_EOrbitChainMode_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EOrbitChainMode"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EOChainMode_Add")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EOChainMode_Scale")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EOChainMode_Link")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EOChainMode_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("EOChainMode_Add.DisplayName"), TEXT("Add"));
			MetaData->SetValue(ReturnEnum, TEXT("EOChainMode_Add.ToolTip"), TEXT("Add the module values to the previous results"));
			MetaData->SetValue(ReturnEnum, TEXT("EOChainMode_Link.DisplayName"), TEXT("Link"));
			MetaData->SetValue(ReturnEnum, TEXT("EOChainMode_Link.ToolTip"), TEXT("'Break' the chain and apply the values from the previous results"));
			MetaData->SetValue(ReturnEnum, TEXT("EOChainMode_Scale.DisplayName"), TEXT("Scale"));
			MetaData->SetValue(ReturnEnum, TEXT("EOChainMode_Scale.ToolTip"), TEXT("Multiply the module values by the previous results"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Orbit/ParticleModuleOrbit.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EOrbitChainMode_CRC() { return 2481196046U; }
	UScriptStruct* Z_Construct_UScriptStruct_FOrbitOptions()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FOrbitOptions_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("OrbitOptions"), sizeof(FOrbitOptions), Get_Z_Construct_UScriptStruct_FOrbitOptions_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OrbitOptions"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FOrbitOptions>, EStructFlags(0x00000001));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseEmitterTime, FOrbitOptions, uint8);
			UProperty* NewProp_bUseEmitterTime = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bUseEmitterTime"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseEmitterTime, FOrbitOptions), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bUseEmitterTime, FOrbitOptions), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bProcessDuringUpdate, FOrbitOptions, uint8);
			UProperty* NewProp_bProcessDuringUpdate = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bProcessDuringUpdate"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bProcessDuringUpdate, FOrbitOptions), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bProcessDuringUpdate, FOrbitOptions), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bProcessDuringSpawn, FOrbitOptions, uint8);
			UProperty* NewProp_bProcessDuringSpawn = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bProcessDuringSpawn"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bProcessDuringSpawn, FOrbitOptions), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bProcessDuringSpawn, FOrbitOptions), sizeof(uint8), false);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Orbit/ParticleModuleOrbit.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Container struct for holding options on the data updating for the module."));
			MetaData->SetValue(NewProp_bUseEmitterTime, TEXT("Category"), TEXT("OrbitOptions"));
			MetaData->SetValue(NewProp_bUseEmitterTime, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Orbit/ParticleModuleOrbit.h"));
			MetaData->SetValue(NewProp_bUseEmitterTime, TEXT("ToolTip"), TEXT("Whether to use emitter time during data retrieval."));
			MetaData->SetValue(NewProp_bProcessDuringUpdate, TEXT("Category"), TEXT("OrbitOptions"));
			MetaData->SetValue(NewProp_bProcessDuringUpdate, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Orbit/ParticleModuleOrbit.h"));
			MetaData->SetValue(NewProp_bProcessDuringUpdate, TEXT("ToolTip"), TEXT("Whether to process the data during updating."));
			MetaData->SetValue(NewProp_bProcessDuringSpawn, TEXT("Category"), TEXT("OrbitOptions"));
			MetaData->SetValue(NewProp_bProcessDuringSpawn, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Orbit/ParticleModuleOrbit.h"));
			MetaData->SetValue(NewProp_bProcessDuringSpawn, TEXT("ToolTip"), TEXT("Whether to process the data during spawning."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FOrbitOptions_CRC() { return 1565322449U; }
	UClass* Z_Construct_UClass_UParticleModuleOrbit_NoRegister()
	{
		return UParticleModuleOrbit::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleOrbit()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleOrbitBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleOrbit::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_RotationRateOptions = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RotationRateOptions"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(RotationRateOptions, UParticleModuleOrbit), 0x0000000000000001, Z_Construct_UScriptStruct_FOrbitOptions());
				UProperty* NewProp_RotationRateAmount = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RotationRateAmount"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(RotationRateAmount, UParticleModuleOrbit), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
				UProperty* NewProp_RotationOptions = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RotationOptions"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(RotationOptions, UParticleModuleOrbit), 0x0000000000000001, Z_Construct_UScriptStruct_FOrbitOptions());
				UProperty* NewProp_RotationAmount = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RotationAmount"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(RotationAmount, UParticleModuleOrbit), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
				UProperty* NewProp_OffsetOptions = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OffsetOptions"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(OffsetOptions, UParticleModuleOrbit), 0x0000000000000001, Z_Construct_UScriptStruct_FOrbitOptions());
				UProperty* NewProp_OffsetAmount = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OffsetAmount"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(OffsetAmount, UParticleModuleOrbit), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
				UProperty* NewProp_ChainMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ChainMode"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(ChainMode, UParticleModuleOrbit), 0x0000000000000001, Z_Construct_UEnum_Engine_EOrbitChainMode());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Orbit"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Orbit Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Orbit/ParticleModuleOrbit.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Orbit/ParticleModuleOrbit.h"));
				MetaData->SetValue(NewProp_RotationRateOptions, TEXT("Category"), TEXT("RotationRate"));
				MetaData->SetValue(NewProp_RotationRateOptions, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Orbit/ParticleModuleOrbit.h"));
				MetaData->SetValue(NewProp_RotationRateOptions, TEXT("ToolTip"), TEXT("The options associated with the RotationRateAmount look-up."));
				MetaData->SetValue(NewProp_RotationRateAmount, TEXT("Category"), TEXT("RotationRate"));
				MetaData->SetValue(NewProp_RotationRateAmount, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Orbit/ParticleModuleOrbit.h"));
				MetaData->SetValue(NewProp_RotationRateAmount, TEXT("ToolTip"), TEXT("The rate (in 'turns') at which to rotate the offset about the particle positon.\n        0.0 = no rotation\n        0.5     = 180 degree rotation\n        1.0 = 360 degree rotation"));
				MetaData->SetValue(NewProp_RotationOptions, TEXT("Category"), TEXT("Rotation"));
				MetaData->SetValue(NewProp_RotationOptions, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Orbit/ParticleModuleOrbit.h"));
				MetaData->SetValue(NewProp_RotationOptions, TEXT("ToolTip"), TEXT("The options associated with the RotationAmount look-up."));
				MetaData->SetValue(NewProp_RotationAmount, TEXT("Category"), TEXT("Rotation"));
				MetaData->SetValue(NewProp_RotationAmount, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Orbit/ParticleModuleOrbit.h"));
				MetaData->SetValue(NewProp_RotationAmount, TEXT("ToolTip"), TEXT("The amount (in 'turns') to rotate the offset about the particle position.\n        0.0 = no rotation\n        0.5     = 180 degree rotation\n        1.0 = 360 degree rotation"));
				MetaData->SetValue(NewProp_OffsetOptions, TEXT("Category"), TEXT("Offset"));
				MetaData->SetValue(NewProp_OffsetOptions, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Orbit/ParticleModuleOrbit.h"));
				MetaData->SetValue(NewProp_OffsetOptions, TEXT("ToolTip"), TEXT("The options associated with the OffsetAmount look-up."));
				MetaData->SetValue(NewProp_OffsetAmount, TEXT("Category"), TEXT("Offset"));
				MetaData->SetValue(NewProp_OffsetAmount, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Orbit/ParticleModuleOrbit.h"));
				MetaData->SetValue(NewProp_OffsetAmount, TEXT("ToolTip"), TEXT("The amount to offset the sprite from the particle position."));
				MetaData->SetValue(NewProp_ChainMode, TEXT("Category"), TEXT("Chaining"));
				MetaData->SetValue(NewProp_ChainMode, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Orbit/ParticleModuleOrbit.h"));
				MetaData->SetValue(NewProp_ChainMode, TEXT("ToolTip"), TEXT("Orbit modules will chain together in the order they appear in the module stack.\nThe combination of a module with the one prior to it is defined by using one\nof the following enumerations:\n        EOChainMode_Add         Add the values to the previous results\n        EOChainMode_Scale       Multiply the values by the previous results\n        EOChainMode_Link        'Break' the chain and apply the values from the previous results"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleOrbit(Z_Construct_UClass_UParticleModuleOrbit, TEXT("UParticleModuleOrbit"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleOrbit);
	UClass* Z_Construct_UClass_UParticleModuleOrientationBase_NoRegister()
	{
		return UParticleModuleOrientationBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleOrientationBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModule();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleOrientationBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20001081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Orientation"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Orientation/ParticleModuleOrientationBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Orientation/ParticleModuleOrientationBase.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleOrientationBase(Z_Construct_UClass_UParticleModuleOrientationBase, TEXT("UParticleModuleOrientationBase"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleOrientationBase);
	UEnum* Z_Construct_UEnum_Engine_EParticleAxisLock()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EParticleAxisLock_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EParticleAxisLock"), 0, Get_Z_Construct_UEnum_Engine_EParticleAxisLock_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EParticleAxisLock"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPAL_NONE")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPAL_X")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPAL_Y")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPAL_Z")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPAL_NEGATIVE_X")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPAL_NEGATIVE_Y")), 5));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPAL_NEGATIVE_Z")), 6));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPAL_ROTATE_X")), 7));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPAL_ROTATE_Y")), 8));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPAL_ROTATE_Z")), 9));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPAL_MAX")), 10));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("EPAL_NEGATIVE_X.DisplayName"), TEXT("-X"));
			MetaData->SetValue(ReturnEnum, TEXT("EPAL_NEGATIVE_X.ToolTip"), TEXT("Lock the sprite facing towards the negative X-axis"));
			MetaData->SetValue(ReturnEnum, TEXT("EPAL_NEGATIVE_Y.DisplayName"), TEXT("-Y"));
			MetaData->SetValue(ReturnEnum, TEXT("EPAL_NEGATIVE_Y.ToolTip"), TEXT("Lock the sprite facing towards the negative Y-axis"));
			MetaData->SetValue(ReturnEnum, TEXT("EPAL_NEGATIVE_Z.DisplayName"), TEXT("-Z"));
			MetaData->SetValue(ReturnEnum, TEXT("EPAL_NEGATIVE_Z.ToolTip"), TEXT("Lock the sprite facing towards the negative Z-axis"));
			MetaData->SetValue(ReturnEnum, TEXT("EPAL_NONE.DisplayName"), TEXT("None"));
			MetaData->SetValue(ReturnEnum, TEXT("EPAL_NONE.ToolTip"), TEXT("No locking to an axis..."));
			MetaData->SetValue(ReturnEnum, TEXT("EPAL_ROTATE_X.DisplayName"), TEXT("Rotate X"));
			MetaData->SetValue(ReturnEnum, TEXT("EPAL_ROTATE_X.ToolTip"), TEXT("Lock the sprite rotation on the X-axis"));
			MetaData->SetValue(ReturnEnum, TEXT("EPAL_ROTATE_Y.DisplayName"), TEXT("Rotate Y"));
			MetaData->SetValue(ReturnEnum, TEXT("EPAL_ROTATE_Y.ToolTip"), TEXT("Lock the sprite rotation on the Y-axis"));
			MetaData->SetValue(ReturnEnum, TEXT("EPAL_ROTATE_Z.DisplayName"), TEXT("Rotate Z"));
			MetaData->SetValue(ReturnEnum, TEXT("EPAL_ROTATE_Z.ToolTip"), TEXT("Lock the sprite rotation on the Z-axis"));
			MetaData->SetValue(ReturnEnum, TEXT("EPAL_X.DisplayName"), TEXT("X"));
			MetaData->SetValue(ReturnEnum, TEXT("EPAL_X.ToolTip"), TEXT("Lock the sprite facing towards the positive X-axis"));
			MetaData->SetValue(ReturnEnum, TEXT("EPAL_Y.DisplayName"), TEXT("Y"));
			MetaData->SetValue(ReturnEnum, TEXT("EPAL_Y.ToolTip"), TEXT("Lock the sprite facing towards the positive Y-axis"));
			MetaData->SetValue(ReturnEnum, TEXT("EPAL_Z.DisplayName"), TEXT("Z"));
			MetaData->SetValue(ReturnEnum, TEXT("EPAL_Z.ToolTip"), TEXT("Lock the sprite facing towards the positive Z-axis"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Orientation/ParticleModuleOrientationAxisLock.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Flags indicating lock"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EParticleAxisLock_CRC() { return 1549078126U; }
	UClass* Z_Construct_UClass_UParticleModuleOrientationAxisLock_NoRegister()
	{
		return UParticleModuleOrientationAxisLock::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleOrientationAxisLock()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleOrientationBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleOrientationAxisLock::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20081080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_LockAxisFlags = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LockAxisFlags"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(LockAxisFlags, UParticleModuleOrientationAxisLock), 0x0000000000000001, Z_Construct_UEnum_Engine_EParticleAxisLock());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Lock Axis"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Orientation/ParticleModuleOrientationAxisLock.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Orientation/ParticleModuleOrientationAxisLock.h"));
				MetaData->SetValue(NewProp_LockAxisFlags, TEXT("Category"), TEXT("Orientation"));
				MetaData->SetValue(NewProp_LockAxisFlags, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Orientation/ParticleModuleOrientationAxisLock.h"));
				MetaData->SetValue(NewProp_LockAxisFlags, TEXT("ToolTip"), TEXT("The lock axis flag setting.\nCan be one of the following:\n        EPAL_NONE                       No locking to an axis.\n        EPAL_X                          Lock the sprite facing towards +X.\n        EPAL_Y                          Lock the sprite facing towards +Y.\n        EPAL_Z                          Lock the sprite facing towards +Z.\n        EPAL_NEGATIVE_X         Lock the sprite facing towards -X.\n        EPAL_NEGATIVE_Y         Lock the sprite facing towards -Y.\n        EPAL_NEGATIVE_Z         Lock the sprite facing towards -Z.\n        EPAL_ROTATE_X           Lock the sprite rotation on the X-axis.\n        EPAL_ROTATE_Y           Lock the sprite rotation on the Y-axis.\n        EPAL_ROTATE_Z           Lock the sprite rotation on the Z-axis."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleOrientationAxisLock(Z_Construct_UClass_UParticleModuleOrientationAxisLock, TEXT("UParticleModuleOrientationAxisLock"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleOrientationAxisLock);
	UClass* Z_Construct_UClass_UParticleModuleParameterBase_NoRegister()
	{
		return UParticleModuleParameterBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleParameterBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModule();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleParameterBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20001081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Parameter"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Parameter/ParticleModuleParameterBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Parameter/ParticleModuleParameterBase.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleParameterBase(Z_Construct_UClass_UParticleModuleParameterBase, TEXT("UParticleModuleParameterBase"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleParameterBase);
	UEnum* Z_Construct_UEnum_Engine_EEmitterDynamicParameterValue()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EEmitterDynamicParameterValue_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EEmitterDynamicParameterValue"), 0, Get_Z_Construct_UEnum_Engine_EEmitterDynamicParameterValue_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EEmitterDynamicParameterValue"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDPV_UserSet")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDPV_VelocityX")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDPV_VelocityY")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDPV_VelocityZ")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDPV_VelocityMag")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDPV_MAX")), 5));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("EDPV_UserSet.ToolTip"), TEXT("UserSet - use the user set values in the distribution (the default)"));
			MetaData->SetValue(ReturnEnum, TEXT("EDPV_VelocityMag.ToolTip"), TEXT("VelocityMag - pass the particle velocity magnitude thru"));
			MetaData->SetValue(ReturnEnum, TEXT("EDPV_VelocityX.ToolTip"), TEXT("VelocityX - pass the particle velocity along the X-axis thru"));
			MetaData->SetValue(ReturnEnum, TEXT("EDPV_VelocityY.ToolTip"), TEXT("VelocityY - pass the particle velocity along the Y-axis thru"));
			MetaData->SetValue(ReturnEnum, TEXT("EDPV_VelocityZ.ToolTip"), TEXT("VelocityZ - pass the particle velocity along the Z-axis thru"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Parameter/ParticleModuleParameterDynamic.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("EmitterDynamicParameterValue\nEnumeration indicating the way a dynamic parameter should be set."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EEmitterDynamicParameterValue_CRC() { return 3172646225U; }
	UScriptStruct* Z_Construct_UScriptStruct_FEmitterDynamicParameter()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FEmitterDynamicParameter_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("EmitterDynamicParameter"), sizeof(FEmitterDynamicParameter), Get_Z_Construct_UScriptStruct_FEmitterDynamicParameter_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EmitterDynamicParameter"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FEmitterDynamicParameter>, EStructFlags(0x00000005));
			UProperty* NewProp_ParamValue = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ParamValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ParamValue, FEmitterDynamicParameter), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bScaleVelocityByParamValue, FEmitterDynamicParameter, uint8);
			UProperty* NewProp_bScaleVelocityByParamValue = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bScaleVelocityByParamValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bScaleVelocityByParamValue, FEmitterDynamicParameter), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bScaleVelocityByParamValue, FEmitterDynamicParameter), sizeof(uint8), false);
			UProperty* NewProp_ValueMethod = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ValueMethod"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(ValueMethod, FEmitterDynamicParameter), 0x0000000000000001, Z_Construct_UEnum_Engine_EEmitterDynamicParameterValue());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSpawnTimeOnly, FEmitterDynamicParameter, uint8);
			UProperty* NewProp_bSpawnTimeOnly = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bSpawnTimeOnly"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSpawnTimeOnly, FEmitterDynamicParameter), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bSpawnTimeOnly, FEmitterDynamicParameter), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseEmitterTime, FEmitterDynamicParameter, uint8);
			UProperty* NewProp_bUseEmitterTime = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bUseEmitterTime"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseEmitterTime, FEmitterDynamicParameter), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bUseEmitterTime, FEmitterDynamicParameter), sizeof(uint8), false);
			UProperty* NewProp_ParamName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ParamName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(ParamName, FEmitterDynamicParameter), 0x0000000000020005);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Parameter/ParticleModuleParameterDynamic.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Helper structure for displaying the parameter."));
			MetaData->SetValue(NewProp_ParamValue, TEXT("Category"), TEXT("EmitterDynamicParameter"));
			MetaData->SetValue(NewProp_ParamValue, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Parameter/ParticleModuleParameterDynamic.h"));
			MetaData->SetValue(NewProp_ParamValue, TEXT("ToolTip"), TEXT("The distriubtion for the parameter value."));
			MetaData->SetValue(NewProp_bScaleVelocityByParamValue, TEXT("Category"), TEXT("EmitterDynamicParameter"));
			MetaData->SetValue(NewProp_bScaleVelocityByParamValue, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Parameter/ParticleModuleParameterDynamic.h"));
			MetaData->SetValue(NewProp_bScaleVelocityByParamValue, TEXT("ToolTip"), TEXT("If true, scale the velocity value selected in ValueMethod by the evaluated ParamValue."));
			MetaData->SetValue(NewProp_ValueMethod, TEXT("Category"), TEXT("EmitterDynamicParameter"));
			MetaData->SetValue(NewProp_ValueMethod, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Parameter/ParticleModuleParameterDynamic.h"));
			MetaData->SetValue(NewProp_ValueMethod, TEXT("ToolTip"), TEXT("Where to get the parameter value from."));
			MetaData->SetValue(NewProp_bSpawnTimeOnly, TEXT("Category"), TEXT("EmitterDynamicParameter"));
			MetaData->SetValue(NewProp_bSpawnTimeOnly, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Parameter/ParticleModuleParameterDynamic.h"));
			MetaData->SetValue(NewProp_bSpawnTimeOnly, TEXT("ToolTip"), TEXT("If true, only set the value at spawn time of the particle, otherwise update each frame."));
			MetaData->SetValue(NewProp_bUseEmitterTime, TEXT("Category"), TEXT("EmitterDynamicParameter"));
			MetaData->SetValue(NewProp_bUseEmitterTime, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Parameter/ParticleModuleParameterDynamic.h"));
			MetaData->SetValue(NewProp_bUseEmitterTime, TEXT("ToolTip"), TEXT("If true, use the EmitterTime to retrieve the value, otherwise use Particle RelativeTime."));
			MetaData->SetValue(NewProp_ParamName, TEXT("Category"), TEXT("EmitterDynamicParameter"));
			MetaData->SetValue(NewProp_ParamName, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Parameter/ParticleModuleParameterDynamic.h"));
			MetaData->SetValue(NewProp_ParamName, TEXT("ToolTip"), TEXT("The parameter name - from the material DynamicParameter expression. READ-ONLY"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FEmitterDynamicParameter_CRC() { return 3656307053U; }
	UClass* Z_Construct_UClass_UParticleModuleParameterDynamic_NoRegister()
	{
		return UParticleModuleParameterDynamic::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleParameterDynamic()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleParameterBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleParameterDynamic::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUsesVelocity, UParticleModuleParameterDynamic, uint8);
				UProperty* NewProp_bUsesVelocity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUsesVelocity"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUsesVelocity, UParticleModuleParameterDynamic), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bUsesVelocity, UParticleModuleParameterDynamic), sizeof(uint8), false);
				UProperty* NewProp_UpdateFlags = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UpdateFlags"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(UpdateFlags, UParticleModuleParameterDynamic), 0x0000000000000000);
				UProperty* NewProp_DynamicParams = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DynamicParams"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(DynamicParams, UParticleModuleParameterDynamic), 0x0000008000000041);
				UProperty* NewProp_DynamicParams_Inner = new(EC_InternalUseOnlyConstructor, NewProp_DynamicParams, TEXT("DynamicParams"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000008000000000, Z_Construct_UScriptStruct_FEmitterDynamicParameter());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Dynamic"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Parameter/ParticleModuleParameterDynamic.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Parameter/ParticleModuleParameterDynamic.h"));
				MetaData->SetValue(NewProp_bUsesVelocity, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Parameter/ParticleModuleParameterDynamic.h"));
				MetaData->SetValue(NewProp_UpdateFlags, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Parameter/ParticleModuleParameterDynamic.h"));
				MetaData->SetValue(NewProp_UpdateFlags, TEXT("ToolTip"), TEXT("Flags for optimizing update"));
				MetaData->SetValue(NewProp_DynamicParams, TEXT("Category"), TEXT("ParticleModuleParameterDynamic"));
				MetaData->SetValue(NewProp_DynamicParams, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Parameter/ParticleModuleParameterDynamic.h"));
				MetaData->SetValue(NewProp_DynamicParams, TEXT("ToolTip"), TEXT("The dynamic parameters this module uses."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleParameterDynamic(Z_Construct_UClass_UParticleModuleParameterDynamic, TEXT("UParticleModuleParameterDynamic"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleParameterDynamic);
	UClass* Z_Construct_UClass_UParticleModuleParameterDynamic_Seeded_NoRegister()
	{
		return UParticleModuleParameterDynamic_Seeded::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleParameterDynamic_Seeded()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleParameterDynamic();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleParameterDynamic_Seeded::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20801080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_RandomSeedInfo = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RandomSeedInfo"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(RandomSeedInfo, UParticleModuleParameterDynamic_Seeded), 0x0000000000000001, Z_Construct_UScriptStruct_FParticleRandomSeedInfo());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Dynamic (Seed)"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Parameter/ParticleModuleParameterDynamic_Seeded.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Parameter/ParticleModuleParameterDynamic_Seeded.h"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("Category"), TEXT("RandomSeed"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Parameter/ParticleModuleParameterDynamic_Seeded.h"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("ToolTip"), TEXT("The random seed(s) to use for looking up values in StartLocation"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleParameterDynamic_Seeded(Z_Construct_UClass_UParticleModuleParameterDynamic_Seeded, TEXT("UParticleModuleParameterDynamic_Seeded"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleParameterDynamic_Seeded);
	UEnum* Z_Construct_UEnum_Engine_EEmitterNormalsMode()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EEmitterNormalsMode_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EEmitterNormalsMode"), 0, Get_Z_Construct_UEnum_Engine_EEmitterNormalsMode_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EEmitterNormalsMode"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ENM_CameraFacing")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ENM_Spherical")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ENM_Cylindrical")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ENM_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ENM_CameraFacing.ToolTip"), TEXT("Default mode, normals are based on the camera facing geometry."));
			MetaData->SetValue(ReturnEnum, TEXT("ENM_Cylindrical.ToolTip"), TEXT("Normals are generated from a cylinder going through NormalsSphereCenter, in the direction NormalsCylinderDirection."));
			MetaData->SetValue(ReturnEnum, TEXT("ENM_Spherical.ToolTip"), TEXT("Normals are generated from a sphere centered at NormalsSphereCenter."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EEmitterNormalsMode_CRC() { return 1477030517U; }
	UEnum* Z_Construct_UEnum_Engine_EParticleSortMode()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EParticleSortMode_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EParticleSortMode"), 0, Get_Z_Construct_UEnum_Engine_EParticleSortMode_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EParticleSortMode"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PSORTMODE_None")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PSORTMODE_ViewProjDepth")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PSORTMODE_DistanceToView")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PSORTMODE_Age_OldestFirst")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PSORTMODE_Age_NewestFirst")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PSORTMODE_MAX")), 5));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EParticleSortMode_CRC() { return 2409793257U; }
	UEnum* Z_Construct_UEnum_Engine_EParticleUVFlipMode()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EParticleUVFlipMode_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EParticleUVFlipMode"), 0, Get_Z_Construct_UEnum_Engine_EParticleUVFlipMode_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EParticleUVFlipMode"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EParticleUVFlipMode::None")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EParticleUVFlipMode::FlipUV")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EParticleUVFlipMode::FlipUOnly")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EParticleUVFlipMode::FlipVOnly")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EParticleUVFlipMode::RandomFlipUV")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EParticleUVFlipMode::RandomFlipUOnly")), 5));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EParticleUVFlipMode::RandomFlipVOnly")), 6));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EParticleUVFlipMode::RandomFlipUVIndependent")), 7));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EParticleUVFlipMode::EParticleUVFlipMode_MAX")), 8));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("FlipUOnly.ToolTip"), TEXT("Flips U only on all particles."));
			MetaData->SetValue(ReturnEnum, TEXT("FlipUV.ToolTip"), TEXT("Flips UV on all particles."));
			MetaData->SetValue(ReturnEnum, TEXT("FlipVOnly.ToolTip"), TEXT("Flips V only on all particles."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
			MetaData->SetValue(ReturnEnum, TEXT("None.ToolTip"), TEXT("Flips UV on all particles."));
			MetaData->SetValue(ReturnEnum, TEXT("RandomFlipUOnly.ToolTip"), TEXT("Flips U only randomly for each particle on spawn."));
			MetaData->SetValue(ReturnEnum, TEXT("RandomFlipUV.ToolTip"), TEXT("Flips UV randomly for each particle on spawn."));
			MetaData->SetValue(ReturnEnum, TEXT("RandomFlipUVIndependent.ToolTip"), TEXT("Flips U and V independently at random for each particle on spawn."));
			MetaData->SetValue(ReturnEnum, TEXT("RandomFlipVOnly.ToolTip"), TEXT("Flips V only randomly for each particle on spawn."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EParticleUVFlipMode_CRC() { return 1671376368U; }
	UClass* Z_Construct_UClass_UParticleModuleRequired_NoRegister()
	{
		return UParticleModuleRequired::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleRequired()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModule();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleRequired::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_NamedMaterialOverrides = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NamedMaterialOverrides"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(NamedMaterialOverrides, UParticleModuleRequired), 0x0000000000000001);
				UProperty* NewProp_NamedMaterialOverrides_Inner = new(EC_InternalUseOnlyConstructor, NewProp_NamedMaterialOverrides, TEXT("NamedMaterialOverrides"), RF_Public|RF_Transient|RF_Native) UNameProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
				UProperty* NewProp_UVFlippingMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UVFlippingMode"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(UVFlippingMode, UParticleModuleRequired), 0x0000000000000001, Z_Construct_UEnum_Engine_EParticleUVFlipMode());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOrbitModuleAffectsVelocityAlignment, UParticleModuleRequired, uint8);
				UProperty* NewProp_bOrbitModuleAffectsVelocityAlignment = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bOrbitModuleAffectsVelocityAlignment"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOrbitModuleAffectsVelocityAlignment, UParticleModuleRequired), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bOrbitModuleAffectsVelocityAlignment, UParticleModuleRequired), sizeof(uint8), false);
				UProperty* NewProp_NormalsCylinderDirection = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NormalsCylinderDirection"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(NormalsCylinderDirection, UParticleModuleRequired), 0x0000000000000001, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_NormalsSphereCenter = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NormalsSphereCenter"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(NormalsSphereCenter, UParticleModuleRequired), 0x0000000000000001, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_EmitterNormalsMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EmitterNormalsMode"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(EmitterNormalsMode, UParticleModuleRequired), 0x0000000000000001, Z_Construct_UEnum_Engine_EEmitterNormalsMode());
				UProperty* NewProp_MaxDrawCount = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxDrawCount"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MaxDrawCount, UParticleModuleRequired), 0x0000000000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseMaxDrawCount, UParticleModuleRequired, uint8);
				UProperty* NewProp_bUseMaxDrawCount = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUseMaxDrawCount"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseMaxDrawCount, UParticleModuleRequired), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bUseMaxDrawCount, UParticleModuleRequired), sizeof(uint8), false);
				UProperty* NewProp_MacroUVRadius = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MacroUVRadius"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MacroUVRadius, UParticleModuleRequired), 0x0000000000000001);
				UProperty* NewProp_MacroUVPosition = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MacroUVPosition"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MacroUVPosition, UParticleModuleRequired), 0x0000000000000001, Z_Construct_UScriptStruct_FVector());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverrideSystemMacroUV, UParticleModuleRequired, uint8);
				UProperty* NewProp_bOverrideSystemMacroUV = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bOverrideSystemMacroUV"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverrideSystemMacroUV, UParticleModuleRequired), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bOverrideSystemMacroUV, UParticleModuleRequired), sizeof(uint8), false);
				UProperty* NewProp_RandomImageChanges = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RandomImageChanges"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(RandomImageChanges, UParticleModuleRequired), 0x0000000000000001);
				UProperty* NewProp_RandomImageTime = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RandomImageTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(RandomImageTime, UParticleModuleRequired), 0x0000000000000000);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bScaleUV, UParticleModuleRequired, uint8);
				UProperty* NewProp_bScaleUV = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bScaleUV"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bScaleUV, UParticleModuleRequired), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bScaleUV, UParticleModuleRequired), sizeof(uint8), false);
				UProperty* NewProp_SubImages_Vertical = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SubImages_Vertical"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(SubImages_Vertical, UParticleModuleRequired), 0x0000000000000001);
				UProperty* NewProp_SubImages_Horizontal = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SubImages_Horizontal"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(SubImages_Horizontal, UParticleModuleRequired), 0x0000000000000001);
				UProperty* NewProp_InterpolationMethod = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InterpolationMethod"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(InterpolationMethod, UParticleModuleRequired), 0x0000000000000001, Z_Construct_UEnum_Engine_EParticleSubUVInterpMethod());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDelayFirstLoopOnly, UParticleModuleRequired, uint8);
				UProperty* NewProp_bDelayFirstLoopOnly = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bDelayFirstLoopOnly"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDelayFirstLoopOnly, UParticleModuleRequired), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bDelayFirstLoopOnly, UParticleModuleRequired), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEmitterDelayUseRange, UParticleModuleRequired, uint8);
				UProperty* NewProp_bEmitterDelayUseRange = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bEmitterDelayUseRange"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEmitterDelayUseRange, UParticleModuleRequired), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bEmitterDelayUseRange, UParticleModuleRequired), sizeof(uint8), false);
				UProperty* NewProp_EmitterDelayLow = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EmitterDelayLow"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(EmitterDelayLow, UParticleModuleRequired), 0x0000000000000001);
				UProperty* NewProp_EmitterDelay = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EmitterDelay"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(EmitterDelay, UParticleModuleRequired), 0x0000000000000001);
				UProperty* NewProp_BurstList = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BurstList"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(BurstList, UParticleModuleRequired), 0x0000000002000008);
				UProperty* NewProp_BurstList_Inner = new(EC_InternalUseOnlyConstructor, NewProp_BurstList, TEXT("BurstList"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000008, Z_Construct_UScriptStruct_FParticleBurst());
				UProperty* NewProp_ParticleBurstMethod = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ParticleBurstMethod"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(ParticleBurstMethod, UParticleModuleRequired), 0x0000000000000000, Z_Construct_UEnum_Engine_EParticleBurstMethod());
				UProperty* NewProp_SpawnRate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SpawnRate"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SpawnRate, UParticleModuleRequired), 0x0000008000000000, Z_Construct_UScriptStruct_FRawDistributionFloat());
				UProperty* NewProp_EmitterLoops = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EmitterLoops"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(EmitterLoops, UParticleModuleRequired), 0x0000000000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDurationRecalcEachLoop, UParticleModuleRequired, uint8);
				UProperty* NewProp_bDurationRecalcEachLoop = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bDurationRecalcEachLoop"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDurationRecalcEachLoop, UParticleModuleRequired), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bDurationRecalcEachLoop, UParticleModuleRequired), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEmitterDurationUseRange, UParticleModuleRequired, uint8);
				UProperty* NewProp_bEmitterDurationUseRange = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bEmitterDurationUseRange"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEmitterDurationUseRange, UParticleModuleRequired), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bEmitterDurationUseRange, UParticleModuleRequired), sizeof(uint8), false);
				UProperty* NewProp_EmitterDurationLow = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EmitterDurationLow"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(EmitterDurationLow, UParticleModuleRequired), 0x0000000000000001);
				UProperty* NewProp_EmitterDuration = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EmitterDuration"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(EmitterDuration, UParticleModuleRequired), 0x0000000000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseLegacyEmitterTime, UParticleModuleRequired, uint8);
				UProperty* NewProp_bUseLegacyEmitterTime = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUseLegacyEmitterTime"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseLegacyEmitterTime, UParticleModuleRequired), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bUseLegacyEmitterTime, UParticleModuleRequired), sizeof(uint8), false);
				UProperty* NewProp_SortMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SortMode"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(SortMode, UParticleModuleRequired), 0x0000000000000001, Z_Construct_UEnum_Engine_EParticleSortMode());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bKillOnCompleted, UParticleModuleRequired, uint8);
				UProperty* NewProp_bKillOnCompleted = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bKillOnCompleted"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bKillOnCompleted, UParticleModuleRequired), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bKillOnCompleted, UParticleModuleRequired), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bKillOnDeactivate, UParticleModuleRequired, uint8);
				UProperty* NewProp_bKillOnDeactivate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bKillOnDeactivate"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bKillOnDeactivate, UParticleModuleRequired), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bKillOnDeactivate, UParticleModuleRequired), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseLocalSpace, UParticleModuleRequired, uint8);
				UProperty* NewProp_bUseLocalSpace = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUseLocalSpace"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseLocalSpace, UParticleModuleRequired), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bUseLocalSpace, UParticleModuleRequired), sizeof(uint8), false);
				UProperty* NewProp_ScreenAlignment = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ScreenAlignment"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(ScreenAlignment, UParticleModuleRequired), 0x0000000000000001, Z_Construct_UEnum_Engine_EParticleScreenAlignment());
				UProperty* NewProp_EmitterRotation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EmitterRotation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(EmitterRotation, UParticleModuleRequired), 0x0000000000000001, Z_Construct_UScriptStruct_FRotator());
				UProperty* NewProp_EmitterOrigin = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EmitterOrigin"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(EmitterOrigin, UParticleModuleRequired), 0x0000000000000001, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_Material = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Material"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Material, UParticleModuleRequired), 0x0000000000000001, Z_Construct_UClass_UMaterialInterface_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Required"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Cascade Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_NamedMaterialOverrides, TEXT("Category"), TEXT("Materials"));
				MetaData->SetValue(NewProp_NamedMaterialOverrides, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_NamedMaterialOverrides, TEXT("ToolTip"), TEXT("Named material overrides for this emitter.\nOverrides this emitter's material(s) with those in the correspondingly named slot(s) of the owning system."));
				MetaData->SetValue(NewProp_UVFlippingMode, TEXT("Category"), TEXT("Rendering"));
				MetaData->SetValue(NewProp_UVFlippingMode, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_UVFlippingMode, TEXT("ToolTip"), TEXT("Controls UV Flipping for this emitter."));
				MetaData->SetValue(NewProp_bOrbitModuleAffectsVelocityAlignment, TEXT("Category"), TEXT("Emitter"));
				MetaData->SetValue(NewProp_bOrbitModuleAffectsVelocityAlignment, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_bOrbitModuleAffectsVelocityAlignment, TEXT("ToolTip"), TEXT("Ensures that movement generated from the orbit module is applied to velocity-aligned particles"));
				MetaData->SetValue(NewProp_NormalsCylinderDirection, TEXT("Category"), TEXT("Normals"));
				MetaData->SetValue(NewProp_NormalsCylinderDirection, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_NormalsCylinderDirection, TEXT("ToolTip"), TEXT("When EmitterNormalsMode is ENM_Cylindrical,\nparticle normals are created to face away from the cylinder going through NormalsSphereCenter in the direction NormalsCylinderDirection.\nNormalsCylinderDirection is in local space."));
				MetaData->SetValue(NewProp_NormalsSphereCenter, TEXT("Category"), TEXT("Normals"));
				MetaData->SetValue(NewProp_NormalsSphereCenter, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_NormalsSphereCenter, TEXT("ToolTip"), TEXT("When EmitterNormalsMode is ENM_Spherical, particle normals are created to face away from NormalsSphereCenter.\nNormalsSphereCenter is in local space."));
				MetaData->SetValue(NewProp_EmitterNormalsMode, TEXT("Category"), TEXT("Normals"));
				MetaData->SetValue(NewProp_EmitterNormalsMode, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_EmitterNormalsMode, TEXT("ToolTip"), TEXT("Normal generation mode for this emitter LOD."));
				MetaData->SetValue(NewProp_MaxDrawCount, TEXT("Category"), TEXT("Rendering"));
				MetaData->SetValue(NewProp_MaxDrawCount, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_MaxDrawCount, TEXT("ToolTip"), TEXT("The maximum number of particles to DRAW for this emitter.\nIf set to 0, it will use whatever number are present."));
				MetaData->SetValue(NewProp_bUseMaxDrawCount, TEXT("Category"), TEXT("Rendering"));
				MetaData->SetValue(NewProp_bUseMaxDrawCount, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_bUseMaxDrawCount, TEXT("ToolTip"), TEXT("If true, use the MaxDrawCount to limit the number of particles rendered.\nNOTE: This does not limit the number spawned/updated, only what is drawn."));
				MetaData->SetValue(NewProp_MacroUVRadius, TEXT("Category"), TEXT("MacroUV"));
				MetaData->SetValue(NewProp_MacroUVRadius, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_MacroUVRadius, TEXT("ToolTip"), TEXT("World space radius that UVs generated with the ParticleMacroUV material node will tile based on."));
				MetaData->SetValue(NewProp_MacroUVPosition, TEXT("Category"), TEXT("MacroUV"));
				MetaData->SetValue(NewProp_MacroUVPosition, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_MacroUVPosition, TEXT("ToolTip"), TEXT("Local space position that UVs generated with the ParticleMacroUV material node will be centered on."));
				MetaData->SetValue(NewProp_bOverrideSystemMacroUV, TEXT("Category"), TEXT("MacroUV"));
				MetaData->SetValue(NewProp_bOverrideSystemMacroUV, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_bOverrideSystemMacroUV, TEXT("ToolTip"), TEXT("Override the system MacroUV settings"));
				MetaData->SetValue(NewProp_RandomImageChanges, TEXT("Category"), TEXT("SubUV"));
				MetaData->SetValue(NewProp_RandomImageChanges, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_RandomImageChanges, TEXT("ToolTip"), TEXT("The number of times to change a random image over the life of the particle."));
				MetaData->SetValue(NewProp_RandomImageTime, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_RandomImageTime, TEXT("ToolTip"), TEXT("The amount of time (particle-relative, 0.0 to 1.0) to 'lock' on a random sub image\n    0.0 = change every frame\n1.0 = select a random image at spawn and hold for the life of the particle"));
				MetaData->SetValue(NewProp_bScaleUV, TEXT("Category"), TEXT("SubUV"));
				MetaData->SetValue(NewProp_bScaleUV, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_bScaleUV, TEXT("ToolTip"), TEXT("Whether to scale the UV or not - ie, the model wasn't setup with sub uvs"));
				MetaData->SetValue(NewProp_SubImages_Vertical, TEXT("Category"), TEXT("SubUV"));
				MetaData->SetValue(NewProp_SubImages_Vertical, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_SubImages_Vertical, TEXT("ToolTip"), TEXT("The number of sub-images vertically in the texture"));
				MetaData->SetValue(NewProp_SubImages_Horizontal, TEXT("Category"), TEXT("SubUV"));
				MetaData->SetValue(NewProp_SubImages_Horizontal, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_SubImages_Horizontal, TEXT("ToolTip"), TEXT("The number of sub-images horizontally in the texture"));
				MetaData->SetValue(NewProp_InterpolationMethod, TEXT("Category"), TEXT("SubUV"));
				MetaData->SetValue(NewProp_InterpolationMethod, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_InterpolationMethod, TEXT("ToolTip"), TEXT("The interpolation method to used for the SubUV image selection.\nOne of the following:\nPSUVIM_None                     - Do not apply SubUV modules to this emitter.\nPSUVIM_Linear           - Smoothly transition between sub-images in the given order,\n                                          with no blending between the current and the next\nPSUVIM_Linear_Blend     - Smoothly transition between sub-images in the given order,\n                                          blending between the current and the next\nPSUVIM_Random           - Pick the next image at random, with no blending between\n                                          the current and the next\nPSUVIM_Random_Blend     - Pick the next image at random, blending between the current\n                                          and the next"));
				MetaData->SetValue(NewProp_bDelayFirstLoopOnly, TEXT("Category"), TEXT("Delay"));
				MetaData->SetValue(NewProp_bDelayFirstLoopOnly, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_bDelayFirstLoopOnly, TEXT("ToolTip"), TEXT("If true, the emitter will be delayed only on the first loop."));
				MetaData->SetValue(NewProp_bEmitterDelayUseRange, TEXT("Category"), TEXT("Delay"));
				MetaData->SetValue(NewProp_bEmitterDelayUseRange, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_bEmitterDelayUseRange, TEXT("ToolTip"), TEXT("If true, select the emitter delay from the range\n        [EmitterDelayLow..EmitterDelay]"));
				MetaData->SetValue(NewProp_EmitterDelayLow, TEXT("Category"), TEXT("Delay"));
				MetaData->SetValue(NewProp_EmitterDelayLow, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_EmitterDelayLow, TEXT("ToolTip"), TEXT("The low end of the emitter delay if using a range."));
				MetaData->SetValue(NewProp_EmitterDelay, TEXT("Category"), TEXT("Delay"));
				MetaData->SetValue(NewProp_EmitterDelay, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_EmitterDelay, TEXT("ToolTip"), TEXT("Indicates the time (in seconds) that this emitter should be delayed in the particle system."));
				MetaData->SetValue(NewProp_BurstList, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_BurstList, TEXT("ToolTip"), TEXT("The array of burst entries."));
				MetaData->SetValue(NewProp_ParticleBurstMethod, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_ParticleBurstMethod, TEXT("ToolTip"), TEXT("The method to utilize when burst-emitting particles"));
				MetaData->SetValue(NewProp_SpawnRate, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_SpawnRate, TEXT("ToolTip"), TEXT("The rate at which to spawn particles"));
				MetaData->SetValue(NewProp_EmitterLoops, TEXT("Category"), TEXT("Duration"));
				MetaData->SetValue(NewProp_EmitterLoops, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_EmitterLoops, TEXT("ToolTip"), TEXT("The number of times to loop the emitter.\n    0 indicates loop continuously"));
				MetaData->SetValue(NewProp_bDurationRecalcEachLoop, TEXT("Category"), TEXT("Duration"));
				MetaData->SetValue(NewProp_bDurationRecalcEachLoop, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_bDurationRecalcEachLoop, TEXT("ToolTip"), TEXT("If true, recalculate the emitter duration on each loop."));
				MetaData->SetValue(NewProp_bEmitterDurationUseRange, TEXT("Category"), TEXT("Duration"));
				MetaData->SetValue(NewProp_bEmitterDurationUseRange, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_bEmitterDurationUseRange, TEXT("ToolTip"), TEXT("If true, select the emitter duration from the range\n        [EmitterDurationLow..EmitterDuration]"));
				MetaData->SetValue(NewProp_EmitterDurationLow, TEXT("Category"), TEXT("Duration"));
				MetaData->SetValue(NewProp_EmitterDurationLow, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_EmitterDurationLow, TEXT("ToolTip"), TEXT("The low end of the emitter duration if using a range."));
				MetaData->SetValue(NewProp_EmitterDuration, TEXT("Category"), TEXT("Duration"));
				MetaData->SetValue(NewProp_EmitterDuration, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_EmitterDuration, TEXT("ToolTip"), TEXT("How long, in seconds, the emitter will run before looping."));
				MetaData->SetValue(NewProp_bUseLegacyEmitterTime, TEXT("Category"), TEXT("Emitter"));
				MetaData->SetValue(NewProp_bUseLegacyEmitterTime, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_bUseLegacyEmitterTime, TEXT("ToolTip"), TEXT("If true, the EmitterTime for the emitter will be calculated by\nmodulating the SecondsSinceCreation by the EmitterDuration. As\nthis can lead to issues w/ looping and variable duration, a new\napproach has been implemented.\nIf false, this new approach is utilized, and the EmitterTime is\nsimply incremented by DeltaTime each tick. When the emitter\nloops, it adjusts the EmitterTime by the current EmitterDuration\nresulting in proper looping/delay behavior."));
				MetaData->SetValue(NewProp_SortMode, TEXT("Category"), TEXT("Emitter"));
				MetaData->SetValue(NewProp_SortMode, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_SortMode, TEXT("ToolTip"), TEXT("The sorting mode to use for this emitter.\nPSORTMODE_None                          - No sorting required.\nPSORTMODE_ViewProjDepth         - Sort by view projected depth of the particle.\nPSORTMODE_DistanceToView        - Sort by distance of particle to view in world space.\nPSORTMODE_Age_OldestFirst       - Sort by age, oldest drawn first.\nPSORTMODE_Age_NewestFirst       - Sort by age, newest drawn first."));
				MetaData->SetValue(NewProp_bKillOnCompleted, TEXT("Category"), TEXT("Emitter"));
				MetaData->SetValue(NewProp_bKillOnCompleted, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_bKillOnCompleted, TEXT("ToolTip"), TEXT("If true, kill the emitter when it completes"));
				MetaData->SetValue(NewProp_bKillOnDeactivate, TEXT("Category"), TEXT("Emitter"));
				MetaData->SetValue(NewProp_bKillOnDeactivate, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_bKillOnDeactivate, TEXT("ToolTip"), TEXT("If true, kill the emitter when the particle system is deactivated"));
				MetaData->SetValue(NewProp_bUseLocalSpace, TEXT("Category"), TEXT("Emitter"));
				MetaData->SetValue(NewProp_bUseLocalSpace, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_bUseLocalSpace, TEXT("ToolTip"), TEXT("If true, update the emitter in local space"));
				MetaData->SetValue(NewProp_ScreenAlignment, TEXT("Category"), TEXT("Emitter"));
				MetaData->SetValue(NewProp_ScreenAlignment, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_ScreenAlignment, TEXT("ToolTip"), TEXT("The screen alignment to utilize for the emitter at this LOD level.\nOne of the following:\nPSA_FacingCameraPosition - Faces the camera position, but is not dependent on the camera rotation.\n                                                        This method produces more stable particles under camera rotation.\nPSA_Square                      - Uniform scale (via SizeX) facing the camera\nPSA_Rectangle           - Non-uniform scale (via SizeX and SizeY) facing the camera\nPSA_Velocity            - Orient the particle towards both the camera and the direction\n                                          the particle is moving. Non-uniform scaling is allowed.\nPSA_TypeSpecific        - Use the alignment method indicated int he type data module."));
				MetaData->SetValue(NewProp_EmitterRotation, TEXT("Category"), TEXT("Emitter"));
				MetaData->SetValue(NewProp_EmitterRotation, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_EmitterOrigin, TEXT("Category"), TEXT("Emitter"));
				MetaData->SetValue(NewProp_EmitterOrigin, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_Material, TEXT("Category"), TEXT("Emitter"));
				MetaData->SetValue(NewProp_Material, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_Material, TEXT("ToolTip"), TEXT("The material to utilize for the emitter at this LOD level."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleRequired(Z_Construct_UClass_UParticleModuleRequired, TEXT("UParticleModuleRequired"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleRequired);
	UClass* Z_Construct_UClass_UParticleModuleRotationBase_NoRegister()
	{
		return UParticleModuleRotationBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleRotationBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModule();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleRotationBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20001081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Rotation"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Rotation/ParticleModuleRotationBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Rotation/ParticleModuleRotationBase.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleRotationBase(Z_Construct_UClass_UParticleModuleRotationBase, TEXT("UParticleModuleRotationBase"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleRotationBase);
	UClass* Z_Construct_UClass_UParticleModuleMeshRotation_NoRegister()
	{
		return UParticleModuleMeshRotation::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleMeshRotation()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleRotationBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleMeshRotation::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bInheritParent, UParticleModuleMeshRotation, uint8);
				UProperty* NewProp_bInheritParent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bInheritParent"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bInheritParent, UParticleModuleMeshRotation), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bInheritParent, UParticleModuleMeshRotation), sizeof(uint8), false);
				UProperty* NewProp_StartRotation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StartRotation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(StartRotation, UParticleModuleMeshRotation), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Init Mesh Rotation"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Rotation/ParticleModuleMeshRotation.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Rotation/ParticleModuleMeshRotation.h"));
				MetaData->SetValue(NewProp_bInheritParent, TEXT("Category"), TEXT("Rotation"));
				MetaData->SetValue(NewProp_bInheritParent, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Rotation/ParticleModuleMeshRotation.h"));
				MetaData->SetValue(NewProp_bInheritParent, TEXT("ToolTip"), TEXT("If true, apply the parents rotation as well."));
				MetaData->SetValue(NewProp_StartRotation, TEXT("Category"), TEXT("Rotation"));
				MetaData->SetValue(NewProp_StartRotation, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Rotation/ParticleModuleMeshRotation.h"));
				MetaData->SetValue(NewProp_StartRotation, TEXT("ToolTip"), TEXT("Initial rotation in ROTATIONS PER SECOND (1 = 360 degrees).\nThe value is retrieved using the EmitterTime."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleMeshRotation(Z_Construct_UClass_UParticleModuleMeshRotation, TEXT("UParticleModuleMeshRotation"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleMeshRotation);
	UClass* Z_Construct_UClass_UParticleModuleMeshRotation_Seeded_NoRegister()
	{
		return UParticleModuleMeshRotation_Seeded::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleMeshRotation_Seeded()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleMeshRotation();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleMeshRotation_Seeded::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20801080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_RandomSeedInfo = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RandomSeedInfo"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(RandomSeedInfo, UParticleModuleMeshRotation_Seeded), 0x0000000000000001, Z_Construct_UScriptStruct_FParticleRandomSeedInfo());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Init Mesh Rot (Seed)"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Rotation/ParticleModuleMeshRotation_Seeded.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Rotation/ParticleModuleMeshRotation_Seeded.h"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("Category"), TEXT("RandomSeed"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Rotation/ParticleModuleMeshRotation_Seeded.h"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("ToolTip"), TEXT("The random seed(s) to use for looking up values in StartLocation"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleMeshRotation_Seeded(Z_Construct_UClass_UParticleModuleMeshRotation_Seeded, TEXT("UParticleModuleMeshRotation_Seeded"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleMeshRotation_Seeded);
	UClass* Z_Construct_UClass_UParticleModuleRotation_NoRegister()
	{
		return UParticleModuleRotation::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleRotation()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleRotationBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleRotation::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_StartRotation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StartRotation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(StartRotation, UParticleModuleRotation), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Initial Rotation"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Rotation/ParticleModuleRotation.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Rotation/ParticleModuleRotation.h"));
				MetaData->SetValue(NewProp_StartRotation, TEXT("Category"), TEXT("Rotation"));
				MetaData->SetValue(NewProp_StartRotation, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Rotation/ParticleModuleRotation.h"));
				MetaData->SetValue(NewProp_StartRotation, TEXT("ToolTip"), TEXT("Initial rotation of the particle (1 = 360 degrees).\nThe value is retrieved using the EmitterTime."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleRotation(Z_Construct_UClass_UParticleModuleRotation, TEXT("UParticleModuleRotation"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleRotation);
	UClass* Z_Construct_UClass_UParticleModuleRotation_Seeded_NoRegister()
	{
		return UParticleModuleRotation_Seeded::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleRotation_Seeded()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleRotation();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleRotation_Seeded::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20801080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_RandomSeedInfo = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RandomSeedInfo"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(RandomSeedInfo, UParticleModuleRotation_Seeded), 0x0000000000000001, Z_Construct_UScriptStruct_FParticleRandomSeedInfo());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Init Rotation (Seed)"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Rotation/ParticleModuleRotation_Seeded.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Rotation/ParticleModuleRotation_Seeded.h"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("Category"), TEXT("RandomSeed"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Rotation/ParticleModuleRotation_Seeded.h"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("ToolTip"), TEXT("The random seed(s) to use for looking up values in StartLocation"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleRotation_Seeded(Z_Construct_UClass_UParticleModuleRotation_Seeded, TEXT("UParticleModuleRotation_Seeded"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleRotation_Seeded);
	UClass* Z_Construct_UClass_UParticleModuleRotationOverLifetime_NoRegister()
	{
		return UParticleModuleRotationOverLifetime::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleRotationOverLifetime()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleRotationBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleRotationOverLifetime::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(Scale, UParticleModuleRotationOverLifetime, uint8);
				UProperty* NewProp_Scale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Scale"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Scale, UParticleModuleRotationOverLifetime), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(Scale, UParticleModuleRotationOverLifetime), sizeof(uint8), false);
				UProperty* NewProp_RotationOverLife = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RotationOverLife"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(RotationOverLife, UParticleModuleRotationOverLifetime), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Rotation/Life"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Rotation/ParticleModuleRotationOverLifetime.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Rotation/ParticleModuleRotationOverLifetime.h"));
				MetaData->SetValue(NewProp_Scale, TEXT("Category"), TEXT("Rotation"));
				MetaData->SetValue(NewProp_Scale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Rotation/ParticleModuleRotationOverLifetime.h"));
				MetaData->SetValue(NewProp_Scale, TEXT("ToolTip"), TEXT("If true,  the particle rotation is multiplied by the value retrieved from RotationOverLife.\nIf false, the particle rotation is incremented by the value retrieved from RotationOverLife."));
				MetaData->SetValue(NewProp_RotationOverLife, TEXT("Category"), TEXT("Rotation"));
				MetaData->SetValue(NewProp_RotationOverLife, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Rotation/ParticleModuleRotationOverLifetime.h"));
				MetaData->SetValue(NewProp_RotationOverLife, TEXT("ToolTip"), TEXT("The rotation of the particle (1.0 = 360 degrees).\nThe value is retrieved using the RelativeTime of the particle."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleRotationOverLifetime(Z_Construct_UClass_UParticleModuleRotationOverLifetime, TEXT("UParticleModuleRotationOverLifetime"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleRotationOverLifetime);
	UClass* Z_Construct_UClass_UParticleModuleRotationRateBase_NoRegister()
	{
		return UParticleModuleRotationRateBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleRotationRateBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModule();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleRotationRateBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20001081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Rotation Rate"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/RotationRate/ParticleModuleRotationRateBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/RotationRate/ParticleModuleRotationRateBase.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleRotationRateBase(Z_Construct_UClass_UParticleModuleRotationRateBase, TEXT("UParticleModuleRotationRateBase"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleRotationRateBase);
	UClass* Z_Construct_UClass_UParticleModuleMeshRotationRate_NoRegister()
	{
		return UParticleModuleMeshRotationRate::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleMeshRotationRate()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleRotationRateBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleMeshRotationRate::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_StartRotationRate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StartRotationRate"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(StartRotationRate, UParticleModuleMeshRotationRate), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Init Mesh Rotation Rate"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/RotationRate/ParticleModuleMeshRotationRate.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/RotationRate/ParticleModuleMeshRotationRate.h"));
				MetaData->SetValue(NewProp_StartRotationRate, TEXT("Category"), TEXT("Rotation"));
				MetaData->SetValue(NewProp_StartRotationRate, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/RotationRate/ParticleModuleMeshRotationRate.h"));
				MetaData->SetValue(NewProp_StartRotationRate, TEXT("ToolTip"), TEXT("Initial rotation rate, in rotations per second.\nThe value is retrieved using the EmitterTime."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleMeshRotationRate(Z_Construct_UClass_UParticleModuleMeshRotationRate, TEXT("UParticleModuleMeshRotationRate"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleMeshRotationRate);
	UClass* Z_Construct_UClass_UParticleModuleRotationRate_NoRegister()
	{
		return UParticleModuleRotationRate::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleRotationRate()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleRotationRateBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleRotationRate::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_StartRotationRate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StartRotationRate"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(StartRotationRate, UParticleModuleRotationRate), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Initial Rotation Rate"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/RotationRate/ParticleModuleRotationRate.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/RotationRate/ParticleModuleRotationRate.h"));
				MetaData->SetValue(NewProp_StartRotationRate, TEXT("Category"), TEXT("Rotation"));
				MetaData->SetValue(NewProp_StartRotationRate, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/RotationRate/ParticleModuleRotationRate.h"));
				MetaData->SetValue(NewProp_StartRotationRate, TEXT("ToolTip"), TEXT("Initial rotation rate, in rotations per second.\nThe value is retrieved using the EmitterTime."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleRotationRate(Z_Construct_UClass_UParticleModuleRotationRate, TEXT("UParticleModuleRotationRate"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleRotationRate);
	UClass* Z_Construct_UClass_UParticleModuleMeshRotationRate_Seeded_NoRegister()
	{
		return UParticleModuleMeshRotationRate_Seeded::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleMeshRotationRate_Seeded()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleMeshRotationRate();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleMeshRotationRate_Seeded::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20801080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_RandomSeedInfo = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RandomSeedInfo"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(RandomSeedInfo, UParticleModuleMeshRotationRate_Seeded), 0x0000000000000001, Z_Construct_UScriptStruct_FParticleRandomSeedInfo());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Init Mesh Rotation Rate (Seed)"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/RotationRate/ParticleModuleMeshRotationRate_Seeded.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/RotationRate/ParticleModuleMeshRotationRate_Seeded.h"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("Category"), TEXT("RandomSeed"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/RotationRate/ParticleModuleMeshRotationRate_Seeded.h"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("ToolTip"), TEXT("The random seed(s) to use for looking up values in StartLocation"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleMeshRotationRate_Seeded(Z_Construct_UClass_UParticleModuleMeshRotationRate_Seeded, TEXT("UParticleModuleMeshRotationRate_Seeded"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleMeshRotationRate_Seeded);
	UClass* Z_Construct_UClass_UParticleModuleMeshRotationRateMultiplyLife_NoRegister()
	{
		return UParticleModuleMeshRotationRateMultiplyLife::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleMeshRotationRateMultiplyLife()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleRotationRateBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleMeshRotationRateMultiplyLife::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20801080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_LifeMultiplier = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LifeMultiplier"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LifeMultiplier, UParticleModuleMeshRotationRateMultiplyLife), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Mesh Rotation Rate * Life"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/RotationRate/ParticleModuleMeshRotationRateMultiplyLife.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/RotationRate/ParticleModuleMeshRotationRateMultiplyLife.h"));
				MetaData->SetValue(NewProp_LifeMultiplier, TEXT("Category"), TEXT("Rotation"));
				MetaData->SetValue(NewProp_LifeMultiplier, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/RotationRate/ParticleModuleMeshRotationRateMultiplyLife.h"));
				MetaData->SetValue(NewProp_LifeMultiplier, TEXT("ToolTip"), TEXT("The scale factor that should be applied to the rotation rate.\nThe value is retrieved using the RelativeTime of the particle."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleMeshRotationRateMultiplyLife(Z_Construct_UClass_UParticleModuleMeshRotationRateMultiplyLife, TEXT("UParticleModuleMeshRotationRateMultiplyLife"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleMeshRotationRateMultiplyLife);
	UClass* Z_Construct_UClass_UParticleModuleMeshRotationRateOverLife_NoRegister()
	{
		return UParticleModuleMeshRotationRateOverLife::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleMeshRotationRateOverLife()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleRotationRateBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleMeshRotationRateOverLife::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20801080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bScaleRotRate, UParticleModuleMeshRotationRateOverLife, uint8);
				UProperty* NewProp_bScaleRotRate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bScaleRotRate"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bScaleRotRate, UParticleModuleMeshRotationRateOverLife), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bScaleRotRate, UParticleModuleMeshRotationRateOverLife), sizeof(uint8), false);
				UProperty* NewProp_RotRate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RotRate"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(RotRate, UParticleModuleMeshRotationRateOverLife), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Mesh Rotation Rate over Life"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/RotationRate/ParticleModuleMeshRotationRateOverLife.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/RotationRate/ParticleModuleMeshRotationRateOverLife.h"));
				MetaData->SetValue(NewProp_bScaleRotRate, TEXT("Category"), TEXT("Rotation"));
				MetaData->SetValue(NewProp_bScaleRotRate, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/RotationRate/ParticleModuleMeshRotationRateOverLife.h"));
				MetaData->SetValue(NewProp_bScaleRotRate, TEXT("ToolTip"), TEXT("If true, scale the current rotation rate by the value retrieved.\nOtherwise, set the rotation rate to the value retrieved."));
				MetaData->SetValue(NewProp_RotRate, TEXT("Category"), TEXT("Rotation"));
				MetaData->SetValue(NewProp_RotRate, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/RotationRate/ParticleModuleMeshRotationRateOverLife.h"));
				MetaData->SetValue(NewProp_RotRate, TEXT("ToolTip"), TEXT("The rotation rate desired.\nThe value is retrieved using the RelativeTime of the particle."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleMeshRotationRateOverLife(Z_Construct_UClass_UParticleModuleMeshRotationRateOverLife, TEXT("UParticleModuleMeshRotationRateOverLife"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleMeshRotationRateOverLife);
	UClass* Z_Construct_UClass_UParticleModuleRotationRate_Seeded_NoRegister()
	{
		return UParticleModuleRotationRate_Seeded::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleRotationRate_Seeded()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleRotationRate();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleRotationRate_Seeded::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20801080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_RandomSeedInfo = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RandomSeedInfo"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(RandomSeedInfo, UParticleModuleRotationRate_Seeded), 0x0000000000000001, Z_Construct_UScriptStruct_FParticleRandomSeedInfo());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Init Rotation Rate (Seed)"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/RotationRate/ParticleModuleRotationRate_Seeded.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/RotationRate/ParticleModuleRotationRate_Seeded.h"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("Category"), TEXT("RandomSeed"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/RotationRate/ParticleModuleRotationRate_Seeded.h"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("ToolTip"), TEXT("The random seed(s) to use for looking up values in StartLocation"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleRotationRate_Seeded(Z_Construct_UClass_UParticleModuleRotationRate_Seeded, TEXT("UParticleModuleRotationRate_Seeded"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleRotationRate_Seeded);
	UClass* Z_Construct_UClass_UParticleModuleRotationRateMultiplyLife_NoRegister()
	{
		return UParticleModuleRotationRateMultiplyLife::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleRotationRateMultiplyLife()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleRotationRateBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleRotationRateMultiplyLife::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_LifeMultiplier = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LifeMultiplier"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LifeMultiplier, UParticleModuleRotationRateMultiplyLife), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Rotation Rate * Life"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/RotationRate/ParticleModuleRotationRateMultiplyLife.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/RotationRate/ParticleModuleRotationRateMultiplyLife.h"));
				MetaData->SetValue(NewProp_LifeMultiplier, TEXT("Category"), TEXT("Rotation"));
				MetaData->SetValue(NewProp_LifeMultiplier, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/RotationRate/ParticleModuleRotationRateMultiplyLife.h"));
				MetaData->SetValue(NewProp_LifeMultiplier, TEXT("ToolTip"), TEXT("The scale factor that should be applied to the rotation rate.\nThe value is retrieved using the RelativeTime of the particle."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleRotationRateMultiplyLife(Z_Construct_UClass_UParticleModuleRotationRateMultiplyLife, TEXT("UParticleModuleRotationRateMultiplyLife"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleRotationRateMultiplyLife);
	UClass* Z_Construct_UClass_UParticleModuleSizeBase_NoRegister()
	{
		return UParticleModuleSizeBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleSizeBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModule();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleSizeBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20001081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Size"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Size/ParticleModuleSizeBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Size/ParticleModuleSizeBase.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleSizeBase(Z_Construct_UClass_UParticleModuleSizeBase, TEXT("UParticleModuleSizeBase"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleSizeBase);
	UClass* Z_Construct_UClass_UParticleModuleSize_NoRegister()
	{
		return UParticleModuleSize::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleSize()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleSizeBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleSize::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_StartSize = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StartSize"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(StartSize, UParticleModuleSize), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Initial Size"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Size/ParticleModuleSize.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Size/ParticleModuleSize.h"));
				MetaData->SetValue(NewProp_StartSize, TEXT("Category"), TEXT("Size"));
				MetaData->SetValue(NewProp_StartSize, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Size/ParticleModuleSize.h"));
				MetaData->SetValue(NewProp_StartSize, TEXT("ToolTip"), TEXT("The initial size that should be used for a particle.\nThe value is retrieved using the EmitterTime during the spawn of a particle.\nIt is added to the Size and BaseSize fields of the spawning particle."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleSize(Z_Construct_UClass_UParticleModuleSize, TEXT("UParticleModuleSize"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleSize);
	UClass* Z_Construct_UClass_UParticleModuleSize_Seeded_NoRegister()
	{
		return UParticleModuleSize_Seeded::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleSize_Seeded()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleSize();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleSize_Seeded::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20801080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_RandomSeedInfo = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RandomSeedInfo"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(RandomSeedInfo, UParticleModuleSize_Seeded), 0x0000000000000001, Z_Construct_UScriptStruct_FParticleRandomSeedInfo());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Initial Size (Seed)"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Size/ParticleModuleSize_Seeded.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Size/ParticleModuleSize_Seeded.h"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("Category"), TEXT("RandomSeed"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Size/ParticleModuleSize_Seeded.h"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("ToolTip"), TEXT("The random seed(s) to use for looking up values in StartLocation"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleSize_Seeded(Z_Construct_UClass_UParticleModuleSize_Seeded, TEXT("UParticleModuleSize_Seeded"));
#endif

PRAGMA_ENABLE_DEPRECATION_WARNINGS
