// Copyright 1998-2015 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Boilerplate C++ definitions for a single module.
	This is automatically generated by UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "Private/EnginePrivate.h"
#include "Engine.generated.dep.h"
PRAGMA_DISABLE_DEPRECATION_WARNINGS
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	COREUOBJECT_API class UClass* Z_Construct_UClass_UObject();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FVector();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FLinearColor();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FVector2D();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FRotator();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FIntPoint();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FQuat();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FGuid();
	COREUOBJECT_API class UClass* Z_Construct_UClass_UObject_NoRegister();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FTransform();
	INPUTCORE_API class UEnum* Z_Construct_UEnum_InputCore_ETouchIndex();
	INPUTCORE_API class UScriptStruct* Z_Construct_UScriptStruct_FKey();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FColor();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FStringClassReference();
	INPUTCORE_API class UEnum* Z_Construct_UEnum_InputCore_EControllerHand();
	COREUOBJECT_API class UEnum* Z_Construct_UEnum_CoreUObject_EMouseCursor();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FIntVector();
	COREUOBJECT_API class UEnum* Z_Construct_UEnum_CoreUObject_EAxis();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FBoxSphereBounds();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FInterpCurveFloat();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FInterpCurveVector();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FInterpCurveQuat();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FPackedNormal();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FMatrix();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FBox();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FStringAssetReference();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FControllerEvent();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnalogInputEvent();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FKeyEvent();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FInputEvent();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FPointerEvent();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FDateTime();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FTimespan();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FRandomStream();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FPlane();
	COREUOBJECT_API class UEnum* Z_Construct_UEnum_CoreUObject_ESearchCase();
	COREUOBJECT_API class UEnum* Z_Construct_UEnum_CoreUObject_ESearchDir();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FButtonStyle();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FCheckBoxStyle();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FInterpCurveVector2D();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FInterpCurveTwoVectors();
	SLATE_API class UScriptStruct* Z_Construct_UScriptStruct_FInputChord();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FFloatRange();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FCompositeFont();
	SLATECORE_API class UClass* Z_Construct_UClass_UFontProviderInterface_NoRegister();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FInterpCurveLinearColor();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FVector4();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FSlateBrush();
	COREUOBJECT_API class UEnum* Z_Construct_UEnum_CoreUObject_EPixelFormat();

	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EViewModeIndex();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EDemoPlayFailure();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETravelType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETravelFailure();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ENetworkFailure();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETickingGroup();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EInputEvent();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FExposureSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FURL();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPrimitiveComponentPostPhysicsTickFunction();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FActorComponentTickFunction();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FActorTickFunction();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTickFunction();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTickPrerequisite();
	ENGINE_API class UClass* Z_Construct_UClass_UEngineBaseTypes_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UEngineBaseTypes();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FVector_NetQuantizeNormal();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FVector_NetQuantize100();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FVector_NetQuantize10();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FVector_NetQuantize();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FFastArraySerializer();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FFastArraySerializerItem();
	ENGINE_API class UClass* Z_Construct_UClass_UDamageType_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDamageType();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_TimerDynamicDelegate__DelegateSignature();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESpawnActorCollisionHandlingMethod();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAngularConstraintMotion();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EComponentSocketType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EComponentMobility();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EPhysicalSurface();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EWalkableSlopeBehavior();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ERotatorQuantization();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EVectorQuantization();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EEndPlayReason();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAutoPossessAI();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAutoReceiveInput();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ENetDormancy();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ENetRole();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMeshFeatureImportance();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EShadowMapFlags();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ELightMapPaddingType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ECollisionEnabled();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETimelineSigType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESleepFamily();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ERadialImpulseFalloff();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EInputConsumeOptions();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EFilterInterpolationType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ECollisionResponse();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EPhysicsSceneType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETraceTypeQuery();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EObjectTypeQuery();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EOverlapFilterOption();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ECollisionChannel();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMovementMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETriangleSortAxis();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETriangleSortOption();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ELightingBuildQuality();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMaterialSamplerType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMaterialTessellationMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMaterialShadingModel();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EParticleCollisionMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETrailWidthMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETranslucentSortPolicy();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETranslucencyLightingMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESamplerSourceMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EBlendMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EIndirectLightingCacheQuality();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESceneDepthPriorityGroup();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAttachLocation();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EActorMetricsType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAspectRatioAxisConstraint();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCanvasUVTri();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FFontRenderInfo();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDepthFieldGlowInfo();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDebugFloatHistory();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRedirector();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDirectoryPath();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FFilePath();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FComponentReference();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FConstrainComponentPropName();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FWalkableSlopeOverride();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRepAttachment();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRepMovement();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTimerHandle();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRadialDamageEvent();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRadialDamageParams();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPointDamageEvent();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDamageEvent();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMeshMergingSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMeshProxySettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMaterialSimplificationSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMeshBuildSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMeshReductionSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPOV();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimUpdateRateParameters();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimSlotDesc();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimSlotInfo();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMTDResult();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FOverlapResult();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FHitResult();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPrimitiveMaterialRef();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSwarmDebugOptions();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FLightmassDebugOptions();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FLightmassPrimitiveSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FLightmassDirectionalLightSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FLightmassPointLightSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FLightmassLightSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FLocalizedSubtitle();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSubtitleCue();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBasedPosition();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FFractureEffect();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCollisionImpactData();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRigidBodyContactInfo();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRigidBodyErrorCorrection();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRigidBodyState();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCollisionResponseContainer();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FResponseChannel();
	ENGINE_API class UClass* Z_Construct_UClass_UEngineTypes_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UEngineTypes();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ENodeAdvancedPins();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ENodeTitleType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EEdGraphPinDirection();
	ENGINE_API class UClass* Z_Construct_UClass_UEdGraphNode_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UEdGraphNode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EBlueprintPinStyleType();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FEdGraphPinType();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSimpleMemberReference();
	ENGINE_API class UClass* Z_Construct_UClass_UEdGraphPin_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UEdGraphPin();
	ENGINE_API class UClass* Z_Construct_UClass_UBlueprintCore_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBlueprintCore();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EBlueprintType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EBlueprintStatus();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FEditedDocumentInfo();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBPInterfaceDescription();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBPVariableDescription();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBPVariableMetaDataEntry();
	ENGINE_API class UClass* Z_Construct_UClass_UBlueprint_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBlueprint();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMemberReference();
	ENGINE_API class UClass* Z_Construct_UClass_UInterface_AssetUserData_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterface_AssetUserData();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EComponentCreationMethod();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_Activate();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_AddTickPrerequisiteActor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_AddTickPrerequisiteComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_ComponentHasTag();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_Deactivate();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_GetOwner();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_IsActive();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_IsBeingDestroyed();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_IsComponentTickEnabled();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_K2_DestroyComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_OnRep_IsActive();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_ReceiveBeginPlay();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_ReceiveEndPlay();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_ReceiveTick();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_RemoveTickPrerequisiteActor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_RemoveTickPrerequisiteComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_SetActive();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_SetComponentTickEnabled();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_SetIsReplicated();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_SetTickableWhenPaused();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_SetTickGroup();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_ToggleActive();
	ENGINE_API class UClass* Z_Construct_UClass_UActorComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UActorComponent();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_PhysicsVolumeChanged__DelegateSignature();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ERelativeTransformSpace();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EDetailMode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FOverlapInfo();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_DetachFromParent();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_DoesSocketExist();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_GetAllSocketNames();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_GetAttachParent();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_GetChildComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_GetChildrenComponents();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_GetComponentVelocity();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_GetForwardVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_GetNumChildrenComponents();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_GetParentComponents();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_GetPhysicsVolume();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_GetRelativeTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_GetRightVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_GetSocketLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_GetSocketQuaternion();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_GetSocketRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_GetSocketTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_GetUpVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_IsAnySimulatingPhysics();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_IsSimulatingPhysics();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_IsVisible();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_AddLocalOffset();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_AddLocalRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_AddLocalTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_AddRelativeLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_AddRelativeRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_AddWorldOffset();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_AddWorldRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_AddWorldTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_AttachTo();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_GetComponentLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_GetComponentRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_GetComponentScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_GetComponentToWorld();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_SetRelativeLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_SetRelativeLocationAndRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_SetRelativeRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_SetRelativeTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_SetWorldLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_SetWorldLocationAndRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_SetWorldRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_SetWorldTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_OnRep_Transform();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_OnRep_Visibility();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_ResetRelativeTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_SetAbsolute();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_SetHiddenInGame();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_SetRelativeScale3D();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_SetVisibility();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_SetWorldScale3D();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_SnapTo();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_ToggleVisibility();
	ENGINE_API class UClass* Z_Construct_UClass_USceneComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USceneComponent();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ActorEndPlaySignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ActorDestroyedSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ActorEndTouchOverSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ActorBeginTouchOverSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ActorOnInputTouchEndSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ActorOnInputTouchBeginSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ActorOnReleasedSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ActorOnClickedSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ActorEndCursorOverSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ActorBeginCursorOverSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ActorHitSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ActorEndOverlapSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ActorBeginOverlapSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_TakePointDamageSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_TakeAnyDamageSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ActorHasTag();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_AddComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_AddTickPrerequisiteActor();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_AddTickPrerequisiteComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_DetachRootComponentFromParent();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_DisableInput();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_EnableInput();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_FlushNetDormancy();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ForceNetUpdate();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetActorBounds();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetActorEnableCollision();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetActorEyesViewPoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetActorForwardVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetActorRelativeScale3D();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetActorRightVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetActorScale3D();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetActorTimeDilation();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetActorUpVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetComponentByClass();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetComponentsByClass();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetComponentsByTag();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetDistanceTo();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetDotProductTo();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetHorizontalDistanceTo();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetHorizontalDotProductTo();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetInputAxisKeyValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetInputAxisValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetInputVectorAxisValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetInstigator();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetInstigatorController();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetLifeSpan();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetOverlappingActors();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetOverlappingComponents();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetOwner();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetTickableWhenPaused();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetVelocity();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetVerticalDistanceTo();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_HasAuthority();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_IsActorBeingDestroyed();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_IsActorTickEnabled();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_IsOverlappingActor();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_AddActorLocalOffset();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_AddActorLocalRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_AddActorLocalTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_AddActorWorldOffset();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_AddActorWorldRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_AddActorWorldTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_AttachRootComponentTo();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_AttachRootComponentToActor();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_DestroyActor();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_DestroyComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_GetActorLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_GetActorRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_GetRootComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_OnBecomeViewTarget();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_OnEndViewTarget();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_OnReset();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_SetActorLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_SetActorLocationAndRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_SetActorRelativeLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_SetActorRelativeRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_SetActorRelativeTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_SetActorTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_TeleportTo();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_MakeMIDForMaterial();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_MakeNoise();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_OnRep_AttachmentReplication();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_OnRep_Instigator();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_OnRep_ReplicatedMovement();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_OnRep_ReplicateMovement();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ReceiveActorBeginCursorOver();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ReceiveActorBeginOverlap();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ReceiveActorEndCursorOver();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ReceiveActorEndOverlap();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ReceiveActorOnClicked();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ReceiveActorOnInputTouchBegin();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ReceiveActorOnInputTouchEnd();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ReceiveActorOnInputTouchEnter();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ReceiveActorOnInputTouchLeave();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ReceiveActorOnReleased();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ReceiveAnyDamage();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ReceiveBeginPlay();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ReceiveDestroyed();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ReceiveEndPlay();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ReceiveHit();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ReceivePointDamage();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ReceiveRadialDamage();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ReceiveTick();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_RemoveTickPrerequisiteActor();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_RemoveTickPrerequisiteComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_SetActorEnableCollision();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_SetActorHiddenInGame();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_SetActorRelativeScale3D();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_SetActorRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_SetActorScale3D();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_SetActorTickEnabled();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_SetLifeSpan();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_SetOwner();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_SetReplicateMovement();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_SetReplicates();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_SetTickableWhenPaused();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_SetTickGroup();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_SnapRootComponentTo();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_TearOff();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_UserConstructionScript();
	ENGINE_API class UClass* Z_Construct_UClass_AActor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AActor();
	ENGINE_API class UFunction* Z_Construct_UFunction_AAmbientSound_AdjustVolume();
	ENGINE_API class UFunction* Z_Construct_UFunction_AAmbientSound_FadeIn();
	ENGINE_API class UFunction* Z_Construct_UFunction_AAmbientSound_FadeOut();
	ENGINE_API class UFunction* Z_Construct_UFunction_AAmbientSound_Play();
	ENGINE_API class UFunction* Z_Construct_UFunction_AAmbientSound_Stop();
	ENGINE_API class UClass* Z_Construct_UClass_AAmbientSound_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AAmbientSound();
	ENGINE_API class UClass* Z_Construct_UClass_UPendingNetGame_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPendingNetGame();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FLatentActionManager();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FLatentActionInfo();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameInstance_DebugCreatePlayer();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameInstance_DebugRemovePlayer();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameInstance_HandleNetworkError();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameInstance_HandleTravelError();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameInstance_ReceiveInit();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameInstance_ReceiveShutdown();
	ENGINE_API class UClass* Z_Construct_UClass_UGameInstance_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UGameInstance();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FEndClothSimulationFunction();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FStartClothSimulationFunction();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FEndPhysicsTickFunction();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FStartPhysicsTickFunction();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FLevelViewportInfo();
	ENGINE_API class UClass* Z_Construct_UClass_UWorld_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UWorld();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FLevelSimplificationDetails();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDynamicTextureInstance();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FStreamableTextureInstance();
	ENGINE_API class UClass* Z_Construct_UClass_ULevel_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ULevel();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EBrushType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ECsgOper();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FGeomSelection();
	ENGINE_API class UClass* Z_Construct_UClass_ABrush_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ABrush();
	ENGINE_API class UClass* Z_Construct_UClass_ABrushShape_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ABrushShape();
	ENGINE_API class UClass* Z_Construct_UClass_AVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AVolume();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ReverbPreset();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FInteriorSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FReverbSettings();
	ENGINE_API class UClass* Z_Construct_UClass_AAudioVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AAudioVolume();
	ENGINE_API class UClass* Z_Construct_UClass_ABlockingVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ABlockingVolume();
	ENGINE_API class UClass* Z_Construct_UClass_ACameraBlockingVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ACameraBlockingVolume();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCullDistanceSizePair();
	ENGINE_API class UClass* Z_Construct_UClass_ACullDistanceVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ACullDistanceVolume();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EStreamingVolumeUsage();
	ENGINE_API class UClass* Z_Construct_UClass_ALevelStreamingVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ALevelStreamingVolume();
	ENGINE_API class UClass* Z_Construct_UClass_ALightmassCharacterIndirectDetailVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ALightmassCharacterIndirectDetailVolume();
	ENGINE_API class UClass* Z_Construct_UClass_ALightmassImportanceVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ALightmassImportanceVolume();
	ENGINE_API class UClass* Z_Construct_UClass_ANavMeshBoundsVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ANavMeshBoundsVolume();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ENavigationQueryResult();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ENavPathEvent();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ENavDataGatheringModeConfig();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ENavDataGatheringMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ENavigationOptionFlag();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNavDataConfig();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNavAgentProperties();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMovementProperties();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNavAgentSelector();
	ENGINE_API class UClass* Z_Construct_UClass_UNavigationTypes_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavigationTypes();
	ENGINE_API class UClass* Z_Construct_UClass_UNavRelevantInterface_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavRelevantInterface();
	ENGINE_API class UFunction* Z_Construct_UFunction_ANavModifierVolume_SetAreaClass();
	ENGINE_API class UClass* Z_Construct_UClass_ANavModifierVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ANavModifierVolume();
	ENGINE_API class UClass* Z_Construct_UClass_APhysicsVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_APhysicsVolume();
	ENGINE_API class UClass* Z_Construct_UClass_ADefaultPhysicsVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ADefaultPhysicsVolume();
	ENGINE_API class UClass* Z_Construct_UClass_AKillZVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AKillZVolume();
	ENGINE_API class UClass* Z_Construct_UClass_APainCausingVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_APainCausingVolume();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EBlendableLocation();
	ENGINE_API class UClass* Z_Construct_UClass_UBlendableInterface_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBlendableInterface();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAntiAliasingMethod();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EDepthOfFieldMethod();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPostProcessSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FWeightedBlendables();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FWeightedBlendable();
	ENGINE_API class UClass* Z_Construct_UClass_UScene_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UScene();
	ENGINE_API class UClass* Z_Construct_UClass_UInterface_PostProcessVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterface_PostProcessVolume();
	ENGINE_API class UFunction* Z_Construct_UFunction_APostProcessVolume_AddOrUpdateBlendable();
	ENGINE_API class UClass* Z_Construct_UClass_APostProcessVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_APostProcessVolume();
	ENGINE_API class UClass* Z_Construct_UClass_APrecomputedVisibilityOverrideVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_APrecomputedVisibilityOverrideVolume();
	ENGINE_API class UClass* Z_Construct_UClass_APrecomputedVisibilityVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_APrecomputedVisibilityVolume();
	ENGINE_API class UClass* Z_Construct_UClass_ATriggerVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ATriggerVolume();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACameraActor_GetAutoActivatePlayerIndex();
	ENGINE_API class UClass* Z_Construct_UClass_ACameraActor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ACameraActor();
	ENGINE_API class UClass* Z_Construct_UClass_UNavAgentInterface_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavAgentInterface();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_InstigatedAnyDamageSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_CastToPlayerController();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_ClientSetLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_ClientSetRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_GetControlRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_GetDesiredRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_GetViewTarget();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_IsLocalController();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_IsLocalPlayerController();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_K2_GetPawn();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_LineOfSightTo();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_OnRep_Pawn();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_OnRep_PlayerState();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_Possess();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_ReceiveInstigatedAnyDamage();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_SetControlRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_SetInitialLocationAndRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_StopMovement();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_UnPossess();
	ENGINE_API class UClass* Z_Construct_UClass_AController_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AController();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPlayerMuteList();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ECameraAnimPlaySpace();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ECameraProjectionMode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMinimalViewInfo();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EInitialOscillatorOffset();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FVOscillator();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FROscillator();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FFOscillator();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCameraShake_BlueprintUpdateCameraShake();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCameraShake_ReceiveIsFinished();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCameraShake_ReceivePlayShake();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCameraShake_ReceiveStopShake();
	ENGINE_API class UClass* Z_Construct_UClass_UCameraShake_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCameraShake();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EViewTargetBlendFunction();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FViewTargetTransitionParams();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTViewTarget();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCameraCacheEntry();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_AddCameraLensEffect();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_AddNewCameraModifier();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_BlueprintUpdateCamera();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_ClearCameraLensEffects();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_FindCameraModifierByClass();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_GetCameraLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_GetCameraRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_GetFOVAngle();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_GetOwningPlayerController();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_PlayCameraAnim();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_PlayCameraShake();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_RemoveCameraLensEffect();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_RemoveCameraModifier();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_SetManualCameraFade();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_StartCameraFade();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_StopAllCameraAnims();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_StopAllCameraShakes();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_StopAllInstancesOfCameraAnim();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_StopAllInstancesOfCameraShake();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_StopCameraAnimInst();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_StopCameraFade();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_StopCameraShake();
	ENGINE_API class UClass* Z_Construct_UClass_APlayerCameraManager_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_APlayerCameraManager();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_InputGestureHandlerDynamicSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_InputVectorAxisHandlerDynamicSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_InputAxisHandlerDynamicSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_InputTouchHandlerDynamicSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_InputActionHandlerDynamicSignature__DelegateSignature();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EControllerAnalogStick();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInputComponent_GetControllerAnalogKeyState();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInputComponent_GetControllerAnalogStickState();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInputComponent_GetControllerKeyTimeDown();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInputComponent_GetControllerMouseDelta();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInputComponent_GetControllerVectorKeyState();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInputComponent_GetTouchState();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInputComponent_IsControllerKeyDown();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInputComponent_WasControllerKeyJustPressed();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInputComponent_WasControllerKeyJustReleased();
	ENGINE_API class UClass* Z_Construct_UClass_UInputComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInputComponent();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ERichCurveExtrapolation();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ERichCurveTangentWeightMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ERichCurveTangentMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ERichCurveInterpMode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FIntegralCurve();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FIntegralKey();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRichCurve();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRichCurveKey();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNameCurve();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNameCurveKey();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FIndexedCurve();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FKeyHandleMap();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCurveBase_GetTimeRange();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCurveBase_GetValueRange();
	ENGINE_API class UClass* Z_Construct_UClass_UCurveBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCurveBase();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRuntimeFloatCurve();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCurveFloat_GetFloatValue();
	ENGINE_API class UClass* Z_Construct_UClass_UCurveFloat_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCurveFloat();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FActiveForceFeedbackEffect();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FForceFeedbackChannelDetails();
	ENGINE_API class UClass* Z_Construct_UClass_UForceFeedbackEffect_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UForceFeedbackEffect();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FUniqueNetIdRepl();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EDynamicForceFeedbackAction();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ActivateTouchInterface();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_AddPitchInput();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_AddRollInput();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_AddYawInput();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_Camera();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClearAudioListenerOverride();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientAddTextureStreamingLoc();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientCancelPendingMapChange();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientCapBandwidth();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientClearCameraLensEffects();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientCommitMapChange();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientEnableNetworkVoice();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientEndOnlineSession();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientFlushLevelStreaming();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientForceGarbageCollection();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientGameEnded();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientGotoState();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientIgnoreLookInput();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientIgnoreMoveInput();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientMessage();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientMutePlayer();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientPlayCameraAnim();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientPlayCameraShake();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientPlayForceFeedback();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientPlaySound();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientPlaySoundAtLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientPrepareMapChange();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientPrestreamTextures();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientReceiveLocalizedMessage();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientRepObjRef();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientReset();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientRestart();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientRetryClientRestart();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientReturnToMainMenu();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientSetBlockOnAsyncLoading();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientSetCameraFade();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientSetCameraMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientSetCinematicMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientSetForceMipLevelsToBeResident();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientSetHUD();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientSetSpectatorWaiting();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientSetViewTarget();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientSpawnCameraLensEffect();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientStartOnlineSession();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientStopCameraAnim();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientStopCameraShake();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientStopForceFeedback();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientTeamMessage();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientTravel();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientTravelInternal();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientUnmutePlayer();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientUpdateLevelStreamingStatus();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientVoiceHandshakeComplete();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientWasKicked();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ConsoleKey();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_DeprojectMousePositionToWorld();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_DeprojectScreenPositionToWorld();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_EnableCheats();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_FOV();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_GetFocalLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_GetHitResultUnderCursor();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_GetHitResultUnderCursorByChannel();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_GetHitResultUnderCursorForObjects();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_GetHitResultUnderFinger();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_GetHitResultUnderFingerByChannel();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_GetHitResultUnderFingerForObjects();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_GetHUD();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_GetInputAnalogKeyState();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_GetInputAnalogStickState();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_GetInputKeyTimeDown();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_GetInputMotionState();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_GetInputMouseDelta();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_GetInputTouchState();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_GetInputVectorKeyState();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_GetMousePosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_GetSpectatorPawn();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_GetViewportSize();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_IsInputKeyDown();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_IsLookInputIgnored();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_IsMoveInputIgnored();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_LocalTravel();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_OnServerStartedVisualLogger();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_Pause();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_PlayDynamicForceFeedback();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_PlayHapticEffect();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ProjectWorldLocationToScreen();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ResetIgnoreInputFlags();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ResetIgnoreLookInput();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ResetIgnoreMoveInput();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_RestartLevel();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_SendToConsole();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerAcknowledgePossession();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerCamera();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerChangeName();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerCheckClientPossession();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerCheckClientPossessionReliable();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerMutePlayer();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerNotifyLoadedWorld();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerPause();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerRestartPlayer();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerSetSpectatorLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerSetSpectatorWaiting();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerShortTimeout();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerToggleAILogging();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerUnmutePlayer();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerUpdateCamera();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerUpdateLevelVisibility();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerVerifyViewTarget();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerViewNextPlayer();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerViewPrevPlayer();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerViewSelf();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_SetAudioListenerOverride();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_SetCinematicMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_SetHapticsByValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_SetIgnoreLookInput();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_SetIgnoreMoveInput();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_SetName();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_SetViewTargetWithBlend();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_SetVirtualJoystickVisibility();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_StartFire();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_StopHapticEffect();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_SwitchLevel();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ToggleSpeaking();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_WasInputKeyJustPressed();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_WasInputKeyJustReleased();
	ENGINE_API class UClass* Z_Construct_UClass_APlayerController_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_APlayerController();
	ENGINE_API class UFunction* Z_Construct_UFunction_ADebugCameraController_ShowDebugSelectedInfo();
	ENGINE_API class UClass* Z_Construct_UClass_ADebugCameraController_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ADebugCameraController();
	ENGINE_API class UClass* Z_Construct_UClass_ALogVisualizerCameraController_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ALogVisualizerCameraController();
	ENGINE_API class UFunction* Z_Construct_UFunction_ADecalActor_CreateDynamicMaterialInstance();
	ENGINE_API class UFunction* Z_Construct_UFunction_ADecalActor_GetDecalMaterial();
	ENGINE_API class UFunction* Z_Construct_UFunction_ADecalActor_SetDecalMaterial();
	ENGINE_API class UClass* Z_Construct_UClass_ADecalActor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ADecalActor();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ActorFractureSignature__DelegateSignature();
	ENGINE_API class UClass* Z_Construct_UClass_ADestructibleActor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ADestructibleActor();
	ENGINE_API class UClass* Z_Construct_UClass_ADocumentationActor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ADocumentationActor();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ParticleCollisionSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ParticleDeathSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ParticleBurstSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ParticleSpawnSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UFunction_AEmitter_Activate();
	ENGINE_API class UFunction* Z_Construct_UFunction_AEmitter_Deactivate();
	ENGINE_API class UFunction* Z_Construct_UFunction_AEmitter_IsActive();
	ENGINE_API class UFunction* Z_Construct_UFunction_AEmitter_OnParticleSystemFinished();
	ENGINE_API class UFunction* Z_Construct_UFunction_AEmitter_OnRep_bCurrentlyActive();
	ENGINE_API class UFunction* Z_Construct_UFunction_AEmitter_SetActorParameter();
	ENGINE_API class UFunction* Z_Construct_UFunction_AEmitter_SetColorParameter();
	ENGINE_API class UFunction* Z_Construct_UFunction_AEmitter_SetFloatParameter();
	ENGINE_API class UFunction* Z_Construct_UFunction_AEmitter_SetMaterialParameter();
	ENGINE_API class UFunction* Z_Construct_UFunction_AEmitter_SetTemplate();
	ENGINE_API class UFunction* Z_Construct_UFunction_AEmitter_SetVectorParameter();
	ENGINE_API class UFunction* Z_Construct_UFunction_AEmitter_ToggleActive();
	ENGINE_API class UClass* Z_Construct_UClass_AEmitter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AEmitter();
	ENGINE_API class UClass* Z_Construct_UClass_AEmitterCameraLensEffectBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AEmitterCameraLensEffectBase();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDebugTextInfo();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_AddDebugText();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_AddHitBox();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_Deproject();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_DrawLine();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_DrawMaterial();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_DrawMaterialSimple();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_DrawMaterialTriangle();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_DrawRect();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_DrawText();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_DrawTexture();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_DrawTextureSimple();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_GetActorsInSelectionRectangle();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_GetOwningPawn();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_GetOwningPlayerController();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_GetTextSize();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_Project();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_ReceiveDrawHUD();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_ReceiveHitBoxBeginCursorOver();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_ReceiveHitBoxClick();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_ReceiveHitBoxEndCursorOver();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_ReceiveHitBoxRelease();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_RemoveAllDebugStrings();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_RemoveDebugText();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_ShowDebug();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_ShowDebugForReticleTargetToggle();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_ShowDebugToggleSubCategory();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_ShowHUD();
	ENGINE_API class UClass* Z_Construct_UClass_AHUD_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AHUD();
	ENGINE_API class UClass* Z_Construct_UClass_ADebugCameraHUD_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ADebugCameraHUD();
	ENGINE_API class UClass* Z_Construct_UClass_ALogVisualizerHUD_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ALogVisualizerHUD();
	ENGINE_API class UClass* Z_Construct_UClass_AInfo_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AInfo();
	ENGINE_API class UClass* Z_Construct_UClass_AAtmosphericFog_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AAtmosphericFog();
	ENGINE_API class UFunction* Z_Construct_UFunction_AExponentialHeightFog_OnRep_bEnabled();
	ENGINE_API class UClass* Z_Construct_UClass_AExponentialHeightFog_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AExponentialHeightFog();
	ENGINE_API class UClass* Z_Construct_UClass_ANavigationObjectBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ANavigationObjectBase();
	ENGINE_API class UClass* Z_Construct_UClass_APlayerStart_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_APlayerStart();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FGameClassShortName();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_AbortMatch();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_CanSpectate();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_ChangeName();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_ChoosePlayerStart();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_EndMatch();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_FindPlayerStart();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_GetDefaultPawnClassForController();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_GetMatchState();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_GetNumPlayers();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_HasMatchEnded();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_HasMatchStarted();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_InitStartSpot();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_IsMatchInProgress();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_K2_FindPlayerStart();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_K2_OnChangeName();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_K2_OnLogout();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_K2_OnRestartPlayer();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_K2_OnSetMatchState();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_K2_OnSwapPlayerControllers();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_K2_PostLogin();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_MustSpectate();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_PlayerCanRestart();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_ReadyToEndMatch();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_ReadyToStartMatch();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_ResetLevel();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_RestartGame();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_ReturnToMainMenuHost();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_SetBandwidthLimit();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_ShouldReset();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_SpawnDefaultPawnFor();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_StartMatch();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_StartPlay();
	ENGINE_API class UClass* Z_Construct_UClass_AGameMode_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AGameMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EStandbyType();
	ENGINE_API class UClass* Z_Construct_UClass_AGameNetworkManager_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AGameNetworkManager();
	ENGINE_API class UClass* Z_Construct_UClass_AGameSession_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AGameSession();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameState_GetServerWorldTimeSeconds();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameState_OnRep_ElapsedTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameState_OnRep_GameModeClass();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameState_OnRep_MatchState();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameState_OnRep_ReplicatedWorldTimeSeconds();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameState_OnRep_SpectatorClass();
	ENGINE_API class UClass* Z_Construct_UClass_AGameState_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AGameState();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerState_OnRep_bIsInactive();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerState_OnRep_PlayerName();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerState_OnRep_Score();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerState_OnRep_UniqueId();
	ENGINE_API class UClass* Z_Construct_UClass_APlayerState_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_APlayerState();
	ENGINE_API class UFunction* Z_Construct_UFunction_ASkyLight_OnRep_bEnabled();
	ENGINE_API class UClass* Z_Construct_UClass_ASkyLight_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ASkyLight();
	ENGINE_API class UClass* Z_Construct_UClass_AWindDirectionalSource_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AWindDirectionalSource();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EVisibilityAggressiveness();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FHierarchicalSimplification();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNetViewer();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FLightmassWorldInfoSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FGameModePrefix();
	ENGINE_API class UFunction* Z_Construct_UFunction_AWorldSettings_OnRep_WorldGravityZ();
	ENGINE_API class UClass* Z_Construct_UClass_AWorldSettings_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AWorldSettings();
	ENGINE_API class UClass* Z_Construct_UClass_ALevelBounds_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ALevelBounds();
	ENGINE_API class UFunction* Z_Construct_UFunction_ALevelScriptActor_LevelReset();
	ENGINE_API class UFunction* Z_Construct_UFunction_ALevelScriptActor_RemoteEvent();
	ENGINE_API class UFunction* Z_Construct_UFunction_ALevelScriptActor_SetCinematicMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_ALevelScriptActor_WorldOriginLocationChanged();
	ENGINE_API class UClass* Z_Construct_UClass_ALevelScriptActor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ALevelScriptActor();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULightComponentBase_GetLightColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULightComponentBase_SetCastShadows();
	ENGINE_API class UClass* Z_Construct_UClass_ULightComponentBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ULightComponentBase();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULightComponent_SetAffectDynamicIndirectLighting();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULightComponent_SetAffectTranslucentLighting();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULightComponent_SetBloomScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULightComponent_SetBloomThreshold();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULightComponent_SetBloomTint();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULightComponent_SetEnableLightShaftBloom();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULightComponent_SetIESTexture();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULightComponent_SetIndirectLightingIntensity();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULightComponent_SetIntensity();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULightComponent_SetLightColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULightComponent_SetLightFunctionDisabledBrightness();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULightComponent_SetLightFunctionFadeDistance();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULightComponent_SetLightFunctionMaterial();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULightComponent_SetLightFunctionScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULightComponent_SetTemperature();
	ENGINE_API class UClass* Z_Construct_UClass_ULightComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ULightComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_ALight_GetBrightness();
	ENGINE_API class UFunction* Z_Construct_UFunction_ALight_GetLightColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_ALight_IsEnabled();
	ENGINE_API class UFunction* Z_Construct_UFunction_ALight_OnRep_bEnabled();
	ENGINE_API class UFunction* Z_Construct_UFunction_ALight_SetAffectTranslucentLighting();
	ENGINE_API class UFunction* Z_Construct_UFunction_ALight_SetBrightness();
	ENGINE_API class UFunction* Z_Construct_UFunction_ALight_SetCastShadows();
	ENGINE_API class UFunction* Z_Construct_UFunction_ALight_SetEnabled();
	ENGINE_API class UFunction* Z_Construct_UFunction_ALight_SetLightColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_ALight_SetLightFunctionFadeDistance();
	ENGINE_API class UFunction* Z_Construct_UFunction_ALight_SetLightFunctionMaterial();
	ENGINE_API class UFunction* Z_Construct_UFunction_ALight_SetLightFunctionScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_ALight_ToggleEnabled();
	ENGINE_API class UClass* Z_Construct_UClass_ALight_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ALight();
	ENGINE_API class UClass* Z_Construct_UClass_ADirectionalLight_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ADirectionalLight();
	ENGINE_API class UFunction* Z_Construct_UFunction_APointLight_SetLightFalloffExponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_APointLight_SetRadius();
	ENGINE_API class UClass* Z_Construct_UClass_APointLight_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_APointLight();
	ENGINE_API class UFunction* Z_Construct_UFunction_ASpotLight_SetInnerConeAngle();
	ENGINE_API class UFunction* Z_Construct_UFunction_ASpotLight_SetOuterConeAngle();
	ENGINE_API class UClass* Z_Construct_UClass_ASpotLight_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ASpotLight();
	ENGINE_API class UClass* Z_Construct_UClass_AGeneratedMeshAreaLight_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AGeneratedMeshAreaLight();
	ENGINE_API class UClass* Z_Construct_UClass_ALODActor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ALODActor();
	ENGINE_API class UClass* Z_Construct_UClass_AMaterialInstanceActor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AMaterialInstanceActor();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_OnMatineeEvent__DelegateSignature();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FInterpGroupActorInfo();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCameraCutInfo();
	ENGINE_API class UFunction* Z_Construct_UFunction_AMatineeActor_ChangePlaybackDirection();
	ENGINE_API class UFunction* Z_Construct_UFunction_AMatineeActor_Pause();
	ENGINE_API class UFunction* Z_Construct_UFunction_AMatineeActor_Play();
	ENGINE_API class UFunction* Z_Construct_UFunction_AMatineeActor_Reverse();
	ENGINE_API class UFunction* Z_Construct_UFunction_AMatineeActor_SetLoopingState();
	ENGINE_API class UFunction* Z_Construct_UFunction_AMatineeActor_SetPosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_AMatineeActor_Stop();
	ENGINE_API class UClass* Z_Construct_UClass_AMatineeActor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AMatineeActor();
	ENGINE_API class UClass* Z_Construct_UClass_AMatineeActorCameraAnim_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AMatineeActorCameraAnim();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNavigationFilterFlags();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNavigationFilterArea();
	ENGINE_API class UClass* Z_Construct_UClass_UNavigationQueryFilter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavigationQueryFilter();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ERuntimeGenerationType();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSupportedAreaData();
	ENGINE_API class UClass* Z_Construct_UClass_ANavigationData_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ANavigationData();
	ENGINE_API class UClass* Z_Construct_UClass_AAbstractNavData_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AAbstractNavData();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNavGraphNode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNavGraphEdge();
	ENGINE_API class UClass* Z_Construct_UClass_ANavigationGraph_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ANavigationGraph();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ERecastPartitioning();
	ENGINE_API class UClass* Z_Construct_UClass_ARecastNavMesh_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ARecastNavMesh();
	ENGINE_API class UClass* Z_Construct_UClass_ANavigationGraphNode_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ANavigationGraphNode();
	ENGINE_API class UClass* Z_Construct_UClass_APlayerStartPIE_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_APlayerStartPIE();
	ENGINE_API class UClass* Z_Construct_UClass_UNavPathObserverInterface_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavPathObserverInterface();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ENavCostDisplay();
	ENGINE_API class UClass* Z_Construct_UClass_ANavigationTestingActor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ANavigationTestingActor();
	ENGINE_API class UClass* Z_Construct_UClass_UNavArea_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavArea();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ENavLinkDirection();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNavigationSegmentLink();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNavigationLink();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNavigationLinkBase();
	ENGINE_API class UClass* Z_Construct_UClass_UNavLinkDefinition_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavLinkDefinition();
	ENGINE_API class UClass* Z_Construct_UClass_UNavLinkHostInterface_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavLinkHostInterface();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_SmartLinkReachedSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UFunction_ANavLinkProxy_HasMovingAgents();
	ENGINE_API class UFunction* Z_Construct_UFunction_ANavLinkProxy_IsSmartLinkEnabled();
	ENGINE_API class UFunction* Z_Construct_UFunction_ANavLinkProxy_ReceiveSmartLinkReached();
	ENGINE_API class UFunction* Z_Construct_UFunction_ANavLinkProxy_ResumePathFollowing();
	ENGINE_API class UFunction* Z_Construct_UFunction_ANavLinkProxy_SetSmartLinkEnabled();
	ENGINE_API class UClass* Z_Construct_UClass_ANavLinkProxy_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ANavLinkProxy();
	ENGINE_API class UClass* Z_Construct_UClass_ANote_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ANote();
	ENGINE_API class UClass* Z_Construct_UClass_AParticleEventManager_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AParticleEventManager();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_AddControllerPitchInput();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_AddControllerRollInput();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_AddControllerYawInput();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_AddMovementInput();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_ConsumeMovementInputVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_DetachFromControllerPendingDestroy();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_GetBaseAimRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_GetController();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_GetControlRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_GetLastMovementInputVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_GetMovementBaseActor();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_GetMovementComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_GetNavAgentLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_GetPendingMovementInputVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_IsControlled();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_IsLocallyControlled();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_IsMoveInputIgnored();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_K2_GetMovementInputVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_LaunchPawn();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_OnRep_Controller();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_OnRep_PlayerState();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_PawnMakeNoise();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_ReceivePossessed();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_ReceiveUnpossessed();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_SetCanAffectNavigationGeneration();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_SpawnDefaultController();
	ENGINE_API class UClass* Z_Construct_UClass_APawn_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_APawn();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPreviewAssetAttachContainer();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPreviewAttachedObjectPair();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSmartNameContainer();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSmartNameMapping();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EBoneTranslationRetargetingMode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimSlotGroup();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRigConfiguration();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNameMapping();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBoneReductionSetting();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FReferencePose();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBoneNode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSkeletonToMeshLinkup();
	ENGINE_API class UClass* Z_Construct_UClass_USkeleton_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USkeleton();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTriMeshCollisionData();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTriIndices();
	ENGINE_API class UClass* Z_Construct_UClass_UInterface_CollisionDataProvider_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterface_CollisionDataProvider();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_SkeletalMeshOptimizationType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_SkeletalMeshOptimizationImportance();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSkeletalMaterial();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FClothingAssetData();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FClothPhysicsProperties();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMorphTargetMap();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSkeletalMeshLODInfo();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSkeletalMeshOptimizationSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBoneReference();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTriangleSortSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBoneMirrorExport();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBoneMirrorInfo();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMesh_FindSocket();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMesh_IsSectionUsingCloth();
	ENGINE_API class UClass* Z_Construct_UClass_USkeletalMesh_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USkeletalMesh();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAnimGroupRole();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ERootMotionMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ERootMotionRootLock();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimationGroupReference();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRootMotionMovementParams();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimGroupInstance();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimTickRecord();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimExtractContext();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBlendFilter();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBlendSampleData();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimationAsset_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimationAsset();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_CharacterReachedApexSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_CharacterMovementUpdatedSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_MovementModeChangedSignature__DelegateSignature();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBasedMovementInfo();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSimulatedRootMotionReplicatedMove();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRepRootMotionMontage();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_CanJump();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_CanJumpInternal();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_ClientCheatFly();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_ClientCheatGhost();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_ClientCheatWalk();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_Crouch();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_GetCurrentMontage();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_IsJumpProvidingForce();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_IsPlayingNetworkedRootMotionMontage();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_IsPlayingRootMotion();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_Jump();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_K2_OnEndCrouch();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_K2_OnMovementModeChanged();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_K2_OnStartCrouch();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_K2_UpdateCustomMovement();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_LaunchCharacter();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_OnJumped();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_OnLanded();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_OnLaunched();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_OnRep_IsCrouched();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_OnRep_ReplicatedBasedMovement();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_OnRep_RootMotion();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_OnWalkingOffLedge();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_PlayAnimMontage();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_SetReplicateMovement();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_StopAnimMontage();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_StopJumping();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_UnCrouch();
	ENGINE_API class UClass* Z_Construct_UClass_ACharacter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ACharacter();
	ENGINE_API class UFunction* Z_Construct_UFunction_ADefaultPawn_LookUp();
	ENGINE_API class UFunction* Z_Construct_UFunction_ADefaultPawn_LookUpAtRate();
	ENGINE_API class UFunction* Z_Construct_UFunction_ADefaultPawn_MoveForward();
	ENGINE_API class UFunction* Z_Construct_UFunction_ADefaultPawn_MoveRight();
	ENGINE_API class UFunction* Z_Construct_UFunction_ADefaultPawn_MoveUp_World();
	ENGINE_API class UFunction* Z_Construct_UFunction_ADefaultPawn_Turn();
	ENGINE_API class UFunction* Z_Construct_UFunction_ADefaultPawn_TurnAtRate();
	ENGINE_API class UClass* Z_Construct_UClass_ADefaultPawn_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ADefaultPawn();
	ENGINE_API class UClass* Z_Construct_UClass_ASpectatorPawn_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ASpectatorPawn();
	ENGINE_API class UClass* Z_Construct_UClass_AWheeledVehicle_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AWheeledVehicle();
	ENGINE_API class UClass* Z_Construct_UClass_AReflectionCapture_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AReflectionCapture();
	ENGINE_API class UClass* Z_Construct_UClass_ABoxReflectionCapture_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ABoxReflectionCapture();
	ENGINE_API class UClass* Z_Construct_UClass_APlaneReflectionCapture_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_APlaneReflectionCapture();
	ENGINE_API class UClass* Z_Construct_UClass_ASphereReflectionCapture_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ASphereReflectionCapture();
	ENGINE_API class UClass* Z_Construct_UClass_ARigidBodyBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ARigidBodyBase();
	ENGINE_API class UClass* Z_Construct_UClass_APhysicsConstraintActor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_APhysicsConstraintActor();
	ENGINE_API class UClass* Z_Construct_UClass_APhysicsThruster_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_APhysicsThruster();
	ENGINE_API class UFunction* Z_Construct_UFunction_ARadialForceActor_DisableForce();
	ENGINE_API class UFunction* Z_Construct_UFunction_ARadialForceActor_EnableForce();
	ENGINE_API class UFunction* Z_Construct_UFunction_ARadialForceActor_FireImpulse();
	ENGINE_API class UFunction* Z_Construct_UFunction_ARadialForceActor_ToggleForce();
	ENGINE_API class UClass* Z_Construct_UClass_ARadialForceActor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ARadialForceActor();
	ENGINE_API class UClass* Z_Construct_UClass_ASceneCapture_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ASceneCapture();
	ENGINE_API class UFunction* Z_Construct_UFunction_ASceneCapture2D_OnInterpToggle();
	ENGINE_API class UClass* Z_Construct_UClass_ASceneCapture2D_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ASceneCapture2D();
	ENGINE_API class UFunction* Z_Construct_UFunction_ASceneCaptureCube_OnInterpToggle();
	ENGINE_API class UClass* Z_Construct_UClass_ASceneCaptureCube_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ASceneCaptureCube();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EDOFMode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBodyInstance();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCollisionResponse();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ComponentEndTouchOverSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ComponentBeginTouchOverSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ComponentOnInputTouchEndSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ComponentOnInputTouchBeginSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ComponentOnReleasedSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ComponentOnClickedSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ComponentEndCursorOverSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ComponentBeginCursorOverSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ComponentSleepSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ComponentWakeSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ComponentEndOverlapSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ComponentBeginOverlapSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ComponentHitSignature__DelegateSignature();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EHasCustomNavigableGeometry();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ECanBeCharacterBase();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSpriteCategoryInfo();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_AddAngularImpulse();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_AddForce();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_AddForceAtLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_AddImpulse();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_AddImpulseAtLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_AddRadialForce();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_AddRadialImpulse();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_AddTorque();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_CanCharacterStepUp();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_ClearMoveIgnoreActors();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_CopyArrayOfMoveIgnoreActors();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_CreateAndSetMaterialInstanceDynamic();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_CreateAndSetMaterialInstanceDynamicFromMaterial();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_CreateDynamicMaterialInstance();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_GetAngularDamping();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_GetCenterOfMass();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_GetClosestPointOnCollision();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_GetCollisionObjectType();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_GetCollisionProfileName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_GetCollisionResponseToChannel();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_GetInertiaTensor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_GetLinearDamping();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_GetMass();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_GetMassScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_GetMaterial();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_GetNumMaterials();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_GetOverlapInfos();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_GetOverlappingActors();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_GetOverlappingComponents();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_GetPhysicsAngularVelocity();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_GetPhysicsLinearVelocity();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_GetPhysicsLinearVelocityAtPoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_GetWalkableSlopeOverride();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_IgnoreActorWhenMoving();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_IsGravityEnabled();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_IsOverlappingActor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_IsOverlappingComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_K2_LineTraceComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_PutRigidBodyToSleep();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_ScaleByMomentOfInertia();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetAllMassScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetAllPhysicsLinearVelocity();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetAngularDamping();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetCastShadow();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetCenterOfMass();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetCollisionEnabled();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetCollisionObjectType();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetCollisionProfileName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetCollisionResponseToAllChannels();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetCollisionResponseToChannel();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetConstraintMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetCullDistance();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetCustomDepthStencilValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetEnableGravity();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetLinearDamping();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetLockedAxis();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetMassOverrideInKg();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetMassScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetMaterial();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetNotifyRigidBodyCollision();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetOnlyOwnerSee();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetOwnerNoSee();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetPhysicsAngularVelocity();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetPhysicsLinearVelocity();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetPhysicsMaxAngularVelocity();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetPhysMaterialOverride();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetRenderCustomDepth();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetRenderInMainPass();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetSimulatePhysics();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetTranslucentSortPriority();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetWalkableSlopeOverride();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_WakeAllRigidBodies();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_WakeRigidBody();
	ENGINE_API class UClass* Z_Construct_UClass_UPrimitiveComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPrimitiveComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMeshComponent_GetMaterials();
	ENGINE_API class UClass* Z_Construct_UClass_UMeshComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMeshComponent();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EBoneSpaces();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMeshComponentUpdateFlag();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EPhysBodyOp();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EBoneVisibilityStatus();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSkelMeshComponentLODInfo();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FActiveVertexAnim();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkinnedMeshComponent_BoneIsChildOf();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkinnedMeshComponent_GetBoneIndex();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkinnedMeshComponent_GetBoneName();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkinnedMeshComponent_GetParentBone();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkinnedMeshComponent_GetSocketBoneName();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkinnedMeshComponent_HideBoneByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkinnedMeshComponent_IsBoneHiddenByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkinnedMeshComponent_SetMasterPoseComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkinnedMeshComponent_SetPhysicsAsset();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkinnedMeshComponent_SetSkeletalMesh();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkinnedMeshComponent_TransformFromBoneSpace();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkinnedMeshComponent_TransformToBoneSpace();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkinnedMeshComponent_UnHideBoneByName();
	ENGINE_API class UClass* Z_Construct_UClass_USkinnedMeshComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USkinnedMeshComponent();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAngularDriveMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EConstraintFrame();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ELinearConstraintMotion();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FConstraintInstance();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ConstraintBrokenSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_BreakConstraint();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_GetConstraintForce();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_GetCurrentSwing1();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_GetCurrentSwing2();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_GetCurrentTwist();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetAngularDriveParams();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetAngularOrientationDrive();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetAngularOrientationTarget();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetAngularSwing1Limit();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetAngularSwing2Limit();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetAngularTwistLimit();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetAngularVelocityDrive();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetAngularVelocityTarget();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetConstrainedComponents();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetConstraintReferenceFrame();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetConstraintReferenceOrientation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetConstraintReferencePosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetDisableCollision();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetLinearDriveParams();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetLinearPositionDrive();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetLinearPositionTarget();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetLinearVelocityDrive();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetLinearVelocityTarget();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetLinearXLimit();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetLinearYLimit();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetLinearZLimit();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicsConstraintComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicsConstraintComponent();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAnimLinkMethod();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimLinkableElement();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ECurveBlendOption();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAdditiveAnimationType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ENotifyFilterType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMontageNotifyTickType();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNotifyTrack();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNotifyEvent();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRawCurveTracks();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTransformCurve();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FVectorCurve();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FFloatCurve();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimCurveBase();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAnimationMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EKinematicBonesUpdateToPhysics();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSkeletalMeshComponentPreClothTickFunction();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSingleAnimationPlayData();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_AccumulateAllBodiesBelowPhysicsBlendWeight();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_BindClothToMasterPoseComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_ClearMorphTargets();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_ForceClothNextUpdateTeleport();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_ForceClothNextUpdateTeleportAndReset();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_GetAnimationMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_GetAnimInstance();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_GetClothMaxDistanceScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_GetMorphTarget();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_GetPlayRate();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_GetPosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_IsPlaying();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_Play();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_PlayAnimation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_ResetAllBodiesSimulatePhysics();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_ResetClothTeleportMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_SetAllBodiesBelowPhysicsBlendWeight();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_SetAllBodiesBelowSimulatePhysics();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_SetAllBodiesPhysicsBlendWeight();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_SetAllBodiesSimulatePhysics();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_SetAllMotorsAngularDriveParams();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_SetAllMotorsAngularPositionDrive();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_SetAllMotorsAngularVelocityDrive();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_SetAnimation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_SetAnimationMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_SetAnimInstanceClass();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_SetClothMaxDistanceScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_SetEnablePhysicsBlending();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_SetMorphTarget();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_SetPhysicsBlendWeight();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_SetPlayRate();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_SetPosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_Stop();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_UnbindClothFromMasterPoseComponent();
	ENGINE_API class UClass* Z_Construct_UClass_USkeletalMeshComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USkeletalMeshComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UMatineeAnimInterface_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMatineeAnimInterface();
	ENGINE_API class UFunction* Z_Construct_UFunction_ASkeletalMeshActor_OnRep_ReplicatedMaterial0();
	ENGINE_API class UFunction* Z_Construct_UFunction_ASkeletalMeshActor_OnRep_ReplicatedMaterial1();
	ENGINE_API class UFunction* Z_Construct_UFunction_ASkeletalMeshActor_OnRep_ReplicatedMesh();
	ENGINE_API class UFunction* Z_Construct_UFunction_ASkeletalMeshActor_OnRep_ReplicatedPhysAsset();
	ENGINE_API class UClass* Z_Construct_UClass_ASkeletalMeshActor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ASkeletalMeshActor();
	ENGINE_API class UClass* Z_Construct_UClass_ASplineMeshActor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ASplineMeshActor();
	ENGINE_API class UClass* Z_Construct_UClass_AStaticMeshActor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AStaticMeshActor();
	ENGINE_API class UClass* Z_Construct_UClass_ATargetPoint_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ATargetPoint();
	ENGINE_API class UClass* Z_Construct_UClass_ATextRenderActor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ATextRenderActor();
	ENGINE_API class UClass* Z_Construct_UClass_ATriggerBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ATriggerBase();
	ENGINE_API class UClass* Z_Construct_UClass_ATriggerBox_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ATriggerBox();
	ENGINE_API class UClass* Z_Construct_UClass_ATriggerCapsule_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ATriggerCapsule();
	ENGINE_API class UClass* Z_Construct_UClass_ATriggerSphere_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ATriggerSphere();
	ENGINE_API class UClass* Z_Construct_UClass_AVectorFieldVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AVectorFieldVolume();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_UApplicationLifecycleComponent_ApplicationLifetimeDelegate__DelegateSignature();
	ENGINE_API class UClass* Z_Construct_UClass_UApplicationLifecycleComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UApplicationLifecycleComponent();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EPlaneConstraintAxisSetting();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_ConstrainDirectionToPlane();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_ConstrainLocationToPlane();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_ConstrainNormalToPlane();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_GetGravityZ();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_GetMaxSpeed();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_GetPhysicsVolume();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_GetPlaneConstraintAxisSetting();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_GetPlaneConstraintNormal();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_GetPlaneConstraintOrigin();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_IsExceedingMaxSpeed();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_K2_GetMaxSpeedModifier();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_K2_GetModifiedMaxSpeed();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_K2_MoveUpdatedComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_PhysicsVolumeChanged();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_SetPlaneConstraintAxisSetting();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_SetPlaneConstraintEnabled();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_SetPlaneConstraintFromVectors();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_SetPlaneConstraintNormal();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_SetPlaneConstraintOrigin();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_SetUpdatedComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_SnapUpdatedComponentToPlane();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_StopMovementImmediately();
	ENGINE_API class UClass* Z_Construct_UClass_UMovementComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMovementComponent();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESplineCoordinateSpace();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESplinePointType();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_AddSplineLocalPoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_AddSplinePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_AddSplineWorldPoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_ClearSplinePoints();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetDefaultUpVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetDirectionAtDistanceAlongSpline();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetDirectionAtSplinePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetDirectionAtTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetDistanceAlongSplineAtSplinePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetInputKeyAtDistanceAlongSpline();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetLocalLocationAndTangentAtSplinePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetLocationAndTangentAtSplinePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetLocationAtDistanceAlongSpline();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetLocationAtSplinePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetLocationAtTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetNumberOfSplinePoints();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetQuaternionAtDistanceAlongSpline();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetQuaternionAtSplinePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetQuaternionAtTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetRightVectorAtDistanceAlongSpline();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetRightVectorAtSplinePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetRightVectorAtTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetRollAtDistanceAlongSpline();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetRollAtSplinePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetRollAtTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetRotationAtDistanceAlongSpline();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetRotationAtSplinePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetRotationAtTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetScaleAtDistanceAlongSpline();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetScaleAtSplinePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetScaleAtTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetSplineLength();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetSplinePointType();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetTangentAtDistanceAlongSpline();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetTangentAtSplinePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetTangentAtTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetTransformAtDistanceAlongSpline();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetTransformAtSplinePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetTransformAtTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetUpVectorAtDistanceAlongSpline();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetUpVectorAtSplinePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetUpVectorAtTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetWorldDirectionAtDistanceAlongSpline();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetWorldDirectionAtTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetWorldLocationAtDistanceAlongSpline();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetWorldLocationAtSplinePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetWorldLocationAtTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetWorldRotationAtDistanceAlongSpline();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetWorldRotationAtTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetWorldTangentAtDistanceAlongSpline();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_IsClosedLoop();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_SetClosedLoop();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_SetDefaultUpVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_SetLocationAtSplinePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_SetSelectedSplineSegmentColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_SetSplineLocalPoints();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_SetSplinePoints();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_SetSplinePointType();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_SetSplineWorldPoints();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_SetTangentAtSplinePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_SetUnselectedSplineSegmentColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_SetWorldLocationAtSplinePoint();
	ENGINE_API class UClass* Z_Construct_UClass_USplineComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USplineComponent();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_UInterpToMovementComponent_OnInterpToResetDelegate__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_UInterpToMovementComponent_OnInterpToWaitEndDelegate__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_UInterpToMovementComponent_OnInterpToWaitBeginDelegate__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_UInterpToMovementComponent_OnInterpToStopDelegate__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_UInterpToMovementComponent_OnInterpToReverseDelegate__DelegateSignature();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EInterpToBehaviourType();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FInterpControlPoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInterpToMovementComponent_StopSimulating();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpToMovementComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpToMovementComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UBlueprintFunctionLibrary_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBlueprintFunctionLibrary();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_OnNavDataGenerigEvent__DelegateSignature();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_FNavigationSystemRunMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_FindPathToActorSynchronously();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_FindPathToLocationSynchronously();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_GetNavigationSystem();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_GetPathCost();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_GetPathLength();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_GetRandomPoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_GetRandomPointInNavigableRadius();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_GetRandomPointInRadius();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_GetRandomReachablePointInRadius();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_IsNavigationBeingBuilt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_NavigationRaycast();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_OnNavigationBoundsUpdated();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_ProjectPointToNavigation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_RegisterNavigationInvoker();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_ResetMaxSimultaneousTileGenerationJobsCount();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_SetGeometryGatheringMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_SetMaxSimultaneousTileGenerationJobsCount();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_SimpleMoveToActor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_SimpleMoveToLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_UnregisterNavigationInvoker();
	ENGINE_API class UClass* Z_Construct_UClass_UNavigationSystem_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavigationSystem();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavMovementComponent_IsCrouching();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavMovementComponent_IsFalling();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavMovementComponent_IsFlying();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavMovementComponent_IsMovingOnGround();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavMovementComponent_IsSwimming();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavMovementComponent_StopActiveMovement();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavMovementComponent_StopMovementKeepPathing();
	ENGINE_API class UClass* Z_Construct_UClass_UNavMovementComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavMovementComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPawnMovementComponent_AddInputVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPawnMovementComponent_ConsumeInputVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPawnMovementComponent_GetLastInputVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPawnMovementComponent_GetPawnOwner();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPawnMovementComponent_GetPendingInputVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPawnMovementComponent_IsMoveInputIgnored();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPawnMovementComponent_K2_GetInputVector();
	ENGINE_API class UClass* Z_Construct_UClass_UPawnMovementComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPawnMovementComponent();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNavAvoidanceMask();
	ENGINE_API class UClass* Z_Construct_UClass_URVOAvoidanceInterface_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_URVOAvoidanceInterface();
	ENGINE_API class UClass* Z_Construct_UClass_UNetworkPredictionInterface_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNetworkPredictionInterface();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCharacterMovementComponentPreClothTickFunction();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FFindFloorResult();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_AddForce();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_AddImpulse();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_CalcVelocity();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_CapsuleTouched();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_ClientAckGoodMove();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_ClientAdjustPosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_ClientAdjustRootMotionPosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_ClientVeryShortAdjustPosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_DisableMovement();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_GetAnalogInputModifier();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_GetCharacterOwner();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_GetCurrentAcceleration();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_GetImpartedMovementBaseVelocity();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_GetMaxAcceleration();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_GetMaxJumpHeight();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_GetMovementBase();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_GetPerchRadiusThreshold();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_GetValidPerchRadius();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_IsWalkable();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_IsWalking();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_K2_GetModifiedMaxAcceleration();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_K2_GetWalkableFloorAngle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_K2_GetWalkableFloorZ();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_ServerMove();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_ServerMoveDual();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_ServerMoveDualHybridRootMotion();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_ServerMoveOld();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_SetAvoidanceEnabled();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_SetAvoidanceGroup();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_SetGroupsToAvoid();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_SetGroupsToIgnore();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_SetMovementMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_SetWalkableFloorAngle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_SetWalkableFloorZ();
	ENGINE_API class UClass* Z_Construct_UClass_UCharacterMovementComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCharacterMovementComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UFloatingPawnMovement_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UFloatingPawnMovement();
	ENGINE_API class UClass* Z_Construct_UClass_USpectatorPawnMovement_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USpectatorPawnMovement();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FVehicleInputRate();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FReplicatedVehicleState();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FWheelSetup();
	ENGINE_API class UFunction* Z_Construct_UFunction_UWheeledVehicleMovementComponent_GetCurrentGear();
	ENGINE_API class UFunction* Z_Construct_UFunction_UWheeledVehicleMovementComponent_GetEngineMaxRotationSpeed();
	ENGINE_API class UFunction* Z_Construct_UFunction_UWheeledVehicleMovementComponent_GetEngineRotationSpeed();
	ENGINE_API class UFunction* Z_Construct_UFunction_UWheeledVehicleMovementComponent_GetForwardSpeed();
	ENGINE_API class UFunction* Z_Construct_UFunction_UWheeledVehicleMovementComponent_GetTargetGear();
	ENGINE_API class UFunction* Z_Construct_UFunction_UWheeledVehicleMovementComponent_GetUseAutoGears();
	ENGINE_API class UFunction* Z_Construct_UFunction_UWheeledVehicleMovementComponent_ServerUpdateState();
	ENGINE_API class UFunction* Z_Construct_UFunction_UWheeledVehicleMovementComponent_SetAvoidanceEnabled();
	ENGINE_API class UFunction* Z_Construct_UFunction_UWheeledVehicleMovementComponent_SetAvoidanceGroup();
	ENGINE_API class UFunction* Z_Construct_UFunction_UWheeledVehicleMovementComponent_SetGearDown();
	ENGINE_API class UFunction* Z_Construct_UFunction_UWheeledVehicleMovementComponent_SetGearUp();
	ENGINE_API class UFunction* Z_Construct_UFunction_UWheeledVehicleMovementComponent_SetGroupsToAvoid();
	ENGINE_API class UFunction* Z_Construct_UFunction_UWheeledVehicleMovementComponent_SetGroupsToIgnore();
	ENGINE_API class UFunction* Z_Construct_UFunction_UWheeledVehicleMovementComponent_SetHandbrakeInput();
	ENGINE_API class UFunction* Z_Construct_UFunction_UWheeledVehicleMovementComponent_SetSteeringInput();
	ENGINE_API class UFunction* Z_Construct_UFunction_UWheeledVehicleMovementComponent_SetTargetGear();
	ENGINE_API class UFunction* Z_Construct_UFunction_UWheeledVehicleMovementComponent_SetThrottleInput();
	ENGINE_API class UFunction* Z_Construct_UFunction_UWheeledVehicleMovementComponent_SetUseAutoGears();
	ENGINE_API class UClass* Z_Construct_UClass_UWheeledVehicleMovementComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UWheeledVehicleMovementComponent();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EVehicleDifferential4W();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FVehicleTransmissionData();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FVehicleGearData();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FVehicleEngineData();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FVehicleDifferential4WData();
	ENGINE_API class UClass* Z_Construct_UClass_UWheeledVehicleMovementComponent4W_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UWheeledVehicleMovementComponent4W();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_UProjectileMovementComponent_OnProjectileStopDelegate__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_UProjectileMovementComponent_OnProjectileBounceDelegate__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UFunction_UProjectileMovementComponent_LimitVelocity();
	ENGINE_API class UFunction* Z_Construct_UFunction_UProjectileMovementComponent_SetVelocityInLocalSpace();
	ENGINE_API class UFunction* Z_Construct_UFunction_UProjectileMovementComponent_StopSimulating();
	ENGINE_API class UClass* Z_Construct_UClass_UProjectileMovementComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UProjectileMovementComponent();
	ENGINE_API class UClass* Z_Construct_UClass_URotatingMovementComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_URotatingMovementComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UNavigationInvokerComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavigationInvokerComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavRelevantComponent_SetNavigationRelevancy();
	ENGINE_API class UClass* Z_Construct_UClass_UNavRelevantComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavRelevantComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UNavLinkCustomInterface_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavLinkCustomInterface();
	ENGINE_API class UClass* Z_Construct_UClass_UNavLinkCustomComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavLinkCustomComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UNavModifierComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavModifierComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPawnNoiseEmitterComponent_MakeNoise();
	ENGINE_API class UClass* Z_Construct_UClass_UPawnNoiseEmitterComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPawnNoiseEmitterComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsHandleComponent_GetTargetLocationAndRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsHandleComponent_GrabComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsHandleComponent_ReleaseComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsHandleComponent_SetAngularDamping();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsHandleComponent_SetAngularStiffness();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsHandleComponent_SetInterpolationSpeed();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsHandleComponent_SetLinearDamping();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsHandleComponent_SetLinearStiffness();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsHandleComponent_SetTargetLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsHandleComponent_SetTargetLocationAndRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsHandleComponent_SetTargetRotation();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicsHandleComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicsHandleComponent();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_UPlatformEventsComponent_PlatformEventDelegate__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPlatformEventsComponent_IsInLaptopMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPlatformEventsComponent_IsInTabletMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPlatformEventsComponent_SupportsConvertibleLaptops();
	ENGINE_API class UClass* Z_Construct_UClass_UPlatformEventsComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPlatformEventsComponent();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAtmospherePrecomputeParameters();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAtmosphericFogComponent_DisableGroundScattering();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAtmosphericFogComponent_DisableSunDisk();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAtmosphericFogComponent_SetAltitudeScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAtmosphericFogComponent_SetDefaultBrightness();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAtmosphericFogComponent_SetDefaultLightColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAtmosphericFogComponent_SetDensityMultiplier();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAtmosphericFogComponent_SetDensityOffset();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAtmosphericFogComponent_SetDistanceOffset();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAtmosphericFogComponent_SetDistanceScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAtmosphericFogComponent_SetFogMultiplier();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAtmosphericFogComponent_SetPrecomputeParams();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAtmosphericFogComponent_SetStartDistance();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAtmosphericFogComponent_SetSunMultiplier();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAtmosphericFogComponent_StartPrecompute();
	ENGINE_API class UClass* Z_Construct_UClass_UAtmosphericFogComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAtmosphericFogComponent();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESoundSpatializationAlgorithm();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAttenuationShape();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESoundDistanceCalc();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESoundDistanceModel();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAttenuationSettings();
	ENGINE_API class UClass* Z_Construct_UClass_USoundAttenuation_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundAttenuation();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_OnQueueSubtitles__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_OnAudioFinished__DelegateSignature();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAudioComponentParam();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAudioComponent_AdjustAttenuation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAudioComponent_AdjustVolume();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAudioComponent_BP_GetAttenuationSettingsToApply();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAudioComponent_FadeIn();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAudioComponent_FadeOut();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAudioComponent_IsPlaying();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAudioComponent_Play();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAudioComponent_SetBoolParameter();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAudioComponent_SetFloatParameter();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAudioComponent_SetIntParameter();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAudioComponent_SetPitchMultiplier();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAudioComponent_SetSound();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAudioComponent_SetUISound();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAudioComponent_SetVolumeMultiplier();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAudioComponent_SetWaveParameter();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAudioComponent_Stop();
	ENGINE_API class UClass* Z_Construct_UClass_UAudioComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAudioComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCameraComponent_AddOrUpdateBlendable();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCameraComponent_GetCameraView();
	ENGINE_API class UClass* Z_Construct_UClass_UCameraComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCameraComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UChildActorComponent_SetChildActorClass();
	ENGINE_API class UClass* Z_Construct_UClass_UChildActorComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UChildActorComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDecalComponent_CreateDynamicMaterialInstance();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDecalComponent_GetDecalMaterial();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDecalComponent_SetDecalMaterial();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDecalComponent_SetSortOrder();
	ENGINE_API class UClass* Z_Construct_UClass_UDecalComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDecalComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UExponentialHeightFogComponent_SetDirectionalInscatteringColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UExponentialHeightFogComponent_SetDirectionalInscatteringExponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UExponentialHeightFogComponent_SetDirectionalInscatteringStartDistance();
	ENGINE_API class UFunction* Z_Construct_UFunction_UExponentialHeightFogComponent_SetFogDensity();
	ENGINE_API class UFunction* Z_Construct_UFunction_UExponentialHeightFogComponent_SetFogHeightFalloff();
	ENGINE_API class UFunction* Z_Construct_UFunction_UExponentialHeightFogComponent_SetFogInscatteringColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UExponentialHeightFogComponent_SetFogMaxOpacity();
	ENGINE_API class UFunction* Z_Construct_UFunction_UExponentialHeightFogComponent_SetStartDistance();
	ENGINE_API class UClass* Z_Construct_UClass_UExponentialHeightFogComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UExponentialHeightFogComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDirectionalLightComponent_SetCascadeDistributionExponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDirectionalLightComponent_SetCascadeTransitionFraction();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDirectionalLightComponent_SetDynamicShadowCascades();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDirectionalLightComponent_SetDynamicShadowDistanceMovableLight();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDirectionalLightComponent_SetDynamicShadowDistanceStationaryLight();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDirectionalLightComponent_SetEnableLightShaftOcclusion();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDirectionalLightComponent_SetLightShaftOverrideDirection();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDirectionalLightComponent_SetOcclusionMaskDarkness();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDirectionalLightComponent_SetShadowDistanceFadeoutFraction();
	ENGINE_API class UClass* Z_Construct_UClass_UDirectionalLightComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDirectionalLightComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPointLightComponent_SetAttenuationRadius();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPointLightComponent_SetLightFalloffExponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPointLightComponent_SetSourceLength();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPointLightComponent_SetSourceRadius();
	ENGINE_API class UClass* Z_Construct_UClass_UPointLightComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPointLightComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_USpotLightComponent_SetInnerConeAngle();
	ENGINE_API class UFunction* Z_Construct_UFunction_USpotLightComponent_SetOuterConeAngle();
	ENGINE_API class UClass* Z_Construct_UClass_USpotLightComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USpotLightComponent();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESkyLightSourceType();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkyLightComponent_RecaptureSky();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkyLightComponent_SetCubemap();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkyLightComponent_SetCubemapBlend();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkyLightComponent_SetIndirectLightingIntensity();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkyLightComponent_SetIntensity();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkyLightComponent_SetLightColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkyLightComponent_SetMinOcclusion();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkyLightComponent_SetOcclusionTint();
	ENGINE_API class UClass* Z_Construct_UClass_USkyLightComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USkyLightComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UNavigationGraphNodeComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavigationGraphNodeComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsSpringComponent_GetNormalizedCompressionScalar();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsSpringComponent_GetSpringCurrentEndPoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsSpringComponent_GetSpringDirection();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsSpringComponent_GetSpringRestingPoint();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicsSpringComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicsSpringComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicsThrusterComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicsThrusterComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPostProcessComponent_AddOrUpdateBlendable();
	ENGINE_API class UClass* Z_Construct_UClass_UPostProcessComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPostProcessComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UArrowComponent_SetArrowColor_DEPRECATED();
	ENGINE_API class UFunction* Z_Construct_UFunction_UArrowComponent_SetArrowColor_New();
	ENGINE_API class UClass* Z_Construct_UClass_UArrowComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UArrowComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UBillboardComponent_SetSprite();
	ENGINE_API class UFunction* Z_Construct_UFunction_UBillboardComponent_SetSpriteAndUV();
	ENGINE_API class UFunction* Z_Construct_UFunction_UBillboardComponent_SetUV();
	ENGINE_API class UClass* Z_Construct_UClass_UBillboardComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBillboardComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UBrushComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBrushComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UDrawFrustumComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDrawFrustumComponent();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBatchedPoint();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBatchedLine();
	ENGINE_API class UClass* Z_Construct_UClass_ULineBatchComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ULineBatchComponent();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMaterialSpriteElement();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMaterialBillboardComponent_AddElement();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialBillboardComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialBillboardComponent();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ComponentFractureSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDestructibleComponent_ApplyDamage();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDestructibleComponent_ApplyRadiusDamage();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDestructibleComponent_GetDestructibleMesh();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDestructibleComponent_SetDestructibleMesh();
	ENGINE_API class UClass* Z_Construct_UClass_UDestructibleComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDestructibleComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPoseableMeshComponent_GetBoneLocationByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPoseableMeshComponent_GetBoneRotationByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPoseableMeshComponent_GetBoneScaleByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPoseableMeshComponent_GetBoneTransformByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPoseableMeshComponent_ResetBoneTransformByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPoseableMeshComponent_SetBoneLocationByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPoseableMeshComponent_SetBoneRotationByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPoseableMeshComponent_SetBoneScaleByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPoseableMeshComponent_SetBoneTransformByName();
	ENGINE_API class UClass* Z_Construct_UClass_UPoseableMeshComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPoseableMeshComponent();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FStaticMeshComponentLODInfo();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPaintedVertex();
	ENGINE_API class UFunction* Z_Construct_UFunction_UStaticMeshComponent_GetLocalBounds();
	ENGINE_API class UFunction* Z_Construct_UFunction_UStaticMeshComponent_OnRep_StaticMesh();
	ENGINE_API class UFunction* Z_Construct_UFunction_UStaticMeshComponent_SetForcedLodModel();
	ENGINE_API class UFunction* Z_Construct_UFunction_UStaticMeshComponent_SetStaticMesh();
	ENGINE_API class UClass* Z_Construct_UClass_UStaticMeshComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UStaticMeshComponent();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FInstancedStaticMeshMappingInfo();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FInstancedStaticMeshInstanceData();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInstancedStaticMeshComponent_AddInstance();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInstancedStaticMeshComponent_AddInstanceWorldSpace();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInstancedStaticMeshComponent_ClearInstances();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInstancedStaticMeshComponent_GetInstanceCount();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInstancedStaticMeshComponent_GetInstancesOverlappingSphere();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInstancedStaticMeshComponent_GetInstanceTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInstancedStaticMeshComponent_RemoveInstance();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInstancedStaticMeshComponent_SetCullDistances();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInstancedStaticMeshComponent_UpdateInstanceTransform();
	ENGINE_API class UClass* Z_Construct_UClass_UInstancedStaticMeshComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInstancedStaticMeshComponent();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FClusterNode();
	ENGINE_API class UFunction* Z_Construct_UFunction_UHierarchicalInstancedStaticMeshComponent_RemoveInstances();
	ENGINE_API class UClass* Z_Construct_UClass_UHierarchicalInstancedStaticMeshComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UHierarchicalInstancedStaticMeshComponent();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESplineMeshAxis();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSplineMeshParams();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_GetBoundaryMax();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_GetBoundaryMin();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_GetEndOffset();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_GetEndPosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_GetEndRoll();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_GetEndScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_GetEndTangent();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_GetForwardAxis();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_GetSplineUpDir();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_GetStartOffset();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_GetStartPosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_GetStartRoll();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_GetStartScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_GetStartTangent();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_SetBoundaryMax();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_SetBoundaryMin();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_SetEndOffset();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_SetEndPosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_SetEndRoll();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_SetEndScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_SetEndTangent();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_SetForwardAxis();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_SetSplineUpDir();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_SetStartAndEnd();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_SetStartOffset();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_SetStartPosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_SetStartRoll();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_SetStartScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_SetStartTangent();
	ENGINE_API class UClass* Z_Construct_UClass_USplineMeshComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USplineMeshComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UModelComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UModelComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UNavLinkRenderingComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavLinkRenderingComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UNavMeshRenderingComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavMeshRenderingComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UNavTestRenderingComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavTestRenderingComponent();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMaterialUsage();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FLightmassMaterialInterfaceSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMaterialRelevance();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMaterialInterface_GetBaseMaterial();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMaterialInterface_GetPhysicalMaterial();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialInterface_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialInterface();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EParticleSystemOcclusionBoundsMethod();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ParticleSystemLODMethod();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EParticleSystemUpdateMode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNamedEmitterMaterial();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FLODSoloTrack();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FParticleSystemLOD();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystem_ContainsEmitterType();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleSystem_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleSystem();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_OnSystemFinished__DelegateSignature();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EParticleEventType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ParticleReplayState();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EParticleSysParamType();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FParticleSysParam();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_BeginTrails();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_CreateNamedDynamicMaterialInstance();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_EndTrails();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_GenerateParticleEvent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_GetNamedMaterial();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_GetNumActiveParticles();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_SetActorParameter();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_SetBeamEndPoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_SetBeamSourcePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_SetBeamSourceStrength();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_SetBeamSourceTangent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_SetBeamTargetPoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_SetBeamTargetStrength();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_SetBeamTargetTangent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_SetColorParameter();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_SetEmitterEnable();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_SetFloatParameter();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_SetMaterialParameter();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_SetTemplate();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_SetTrailSourceData();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_SetVectorParameter();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleSystemComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleSystemComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UShapeComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UShapeComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UBoxComponent_GetScaledBoxExtent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UBoxComponent_GetUnscaledBoxExtent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UBoxComponent_SetBoxExtent();
	ENGINE_API class UClass* Z_Construct_UClass_UBoxComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBoxComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCapsuleComponent_GetScaledCapsuleHalfHeight();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCapsuleComponent_GetScaledCapsuleRadius();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCapsuleComponent_GetScaledCapsuleSize();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCapsuleComponent_GetShapeScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCapsuleComponent_GetUnscaledCapsuleHalfHeight();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCapsuleComponent_GetUnscaledCapsuleRadius();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCapsuleComponent_GetUnscaledCapsuleSize();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCapsuleComponent_SetCapsuleHalfHeight();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCapsuleComponent_SetCapsuleRadius();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCapsuleComponent_SetCapsuleSize();
	ENGINE_API class UClass* Z_Construct_UClass_UCapsuleComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCapsuleComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_USphereComponent_GetScaledSphereRadius();
	ENGINE_API class UFunction* Z_Construct_UFunction_USphereComponent_GetShapeScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_USphereComponent_GetUnscaledSphereRadius();
	ENGINE_API class UFunction* Z_Construct_UFunction_USphereComponent_SetSphereRadius();
	ENGINE_API class UClass* Z_Construct_UClass_USphereComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USphereComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UDrawSphereComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDrawSphereComponent();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EVerticalTextAligment();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EHorizTextAligment();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTextRenderComponent_GetTextLocalSize();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTextRenderComponent_GetTextWorldSize();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTextRenderComponent_K2_SetText();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTextRenderComponent_SetFont();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTextRenderComponent_SetHorizontalAlignment();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTextRenderComponent_SetHorizSpacingAdjust();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTextRenderComponent_SetText();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTextRenderComponent_SetTextMaterial();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTextRenderComponent_SetTextRenderColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTextRenderComponent_SetWorldSize();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTextRenderComponent_SetXScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTextRenderComponent_SetYScale();
	ENGINE_API class UClass* Z_Construct_UClass_UTextRenderComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UTextRenderComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UVectorFieldComponent_SetIntensity();
	ENGINE_API class UClass* Z_Construct_UClass_UVectorFieldComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UVectorFieldComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_URadialForceComponent_AddObjectTypeToAffect();
	ENGINE_API class UFunction* Z_Construct_UFunction_URadialForceComponent_FireImpulse();
	ENGINE_API class UFunction* Z_Construct_UFunction_URadialForceComponent_RemoveObjectTypeToAffect();
	ENGINE_API class UClass* Z_Construct_UClass_URadialForceComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_URadialForceComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UReflectionCaptureComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UReflectionCaptureComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UBoxReflectionCaptureComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBoxReflectionCaptureComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UPlaneReflectionCaptureComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPlaneReflectionCaptureComponent();
	ENGINE_API class UClass* Z_Construct_UClass_USphereReflectionCaptureComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USphereReflectionCaptureComponent();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FEngineShowFlagsSetting();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneCaptureComponent_HideActorComponents();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneCaptureComponent_HideComponent();
	ENGINE_API class UClass* Z_Construct_UClass_USceneCaptureComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USceneCaptureComponent();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESceneCaptureSource();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneCaptureComponent2D_AddOrUpdateBlendable();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneCaptureComponent2D_UpdateContent();
	ENGINE_API class UClass* Z_Construct_UClass_USceneCaptureComponent2D_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USceneCaptureComponent2D();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneCaptureComponentCube_UpdateContent();
	ENGINE_API class UClass* Z_Construct_UClass_USceneCaptureComponentCube_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USceneCaptureComponentCube();
	ENGINE_API class UClass* Z_Construct_UClass_USpringArmComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USpringArmComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UWindDirectionalSourceComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UWindDirectionalSourceComponent();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_OnTimelineLinearColor__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_OnTimelineVector__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_OnTimelineFloat__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_OnTimelineEvent__DelegateSignature();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETimelineDirection();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETimelineLengthMode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTimeline();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTimelineLinearColorTrack();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTimelineFloatTrack();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTimelineVectorTrack();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTimelineEventEntry();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTimelineComponent_GetPlaybackPosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTimelineComponent_GetPlayRate();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTimelineComponent_GetTimelineLength();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTimelineComponent_IsLooping();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTimelineComponent_IsPlaying();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTimelineComponent_IsReversing();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTimelineComponent_OnRep_Timeline();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTimelineComponent_Play();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTimelineComponent_PlayFromStart();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTimelineComponent_Reverse();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTimelineComponent_ReverseFromEnd();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTimelineComponent_SetLooping();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTimelineComponent_SetNewTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTimelineComponent_SetPlaybackPosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTimelineComponent_SetPlayRate();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTimelineComponent_SetTimelineLength();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTimelineComponent_SetTimelineLengthMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTimelineComponent_Stop();
	ENGINE_API class UClass* Z_Construct_UClass_UTimelineComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UTimelineComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UAISystemBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAISystemBase();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETypeAdvanceAnim();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimSequenceBase_GetPlayLength();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimSequenceBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimSequenceBase();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimTrack();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimSegment();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRootMotionExtractionStep();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimCompositeBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimCompositeBase();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimComposite_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimComposite();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAlphaBlendOption();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAlphaBlend();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETransitionLogicType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETransitionBlendMode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBakedAnimationStateMachine();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBakedAnimationState();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBakedStateExitTransition();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimationTransitionBetweenStates();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimationState();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimationStateBase();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimationTransitionRule();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimStateMachineTypes_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimStateMachineTypes();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_OnMontageBlendingOutStartedMCDelegate__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_OnMontageEndedMCDelegate__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_OnMontageStartedMCDelegate__DelegateSignature();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EBoneRotationSource();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EBoneControlSpace();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSlotEvaluationPose();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPerBoneBlendWeights();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPerBoneBlendWeight();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FA2CSPose();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FA2Pose();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_AnimNotify_Sound();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_BlueprintInitializeAnimation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_BlueprintPostEvaluateAnimation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_BlueprintUpdateAnimation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_CalculateDirection();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_ClearMorphTargets();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetAnimAssetPlayerLength();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetAnimAssetPlayerTimeFraction();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetAnimAssetPlayerTimeFromEnd();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetAnimAssetPlayerTimeFromEndFraction();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetCurrentStateElapsedTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetCurrentStateName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetCurveValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetInstanceAssetPlayerLength();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetInstanceAssetPlayerTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetInstanceAssetPlayerTimeFraction();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetInstanceAssetPlayerTimeFromEnd();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetInstanceAssetPlayerTimeFromEndFraction();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetInstanceCurrentStateElapsedTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetInstanceStateWeight();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetInstanceTransitionCrossfadeDuration();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetInstanceTransitionTimeElapsed();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetInstanceTransitionTimeElapsedFraction();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetOwningActor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetOwningComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetRelevantAnimLength();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetRelevantAnimTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetRelevantAnimTimeFraction();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetRelevantAnimTimeRemaining();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetRelevantAnimTimeRemainingFraction();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetStateWeight();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_IsPlayingSlotAnimation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_LockAIResources();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_Montage_GetCurrentSection();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_Montage_IsActive();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_Montage_IsPlaying();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_Montage_JumpToSection();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_Montage_JumpToSectionsEnd();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_Montage_Pause();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_Montage_Play();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_Montage_SetNextSection();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_Montage_SetPlayRate();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_Montage_Stop();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_PlaySlotAnimation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_PlaySlotAnimationAsDynamicMontage();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_SetMorphTarget();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_StopSlotAnimation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_TryGetPawnOwner();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_UnlockAIResources();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimInstance_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimInstance();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAnimNotifyEventType();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimMontageInstance();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBranchingPointMarker();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBranchingPoint();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSlotAnimationTrack();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCompositeSection();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimMontage_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimMontage();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAdditiveBasePoseType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_AnimationKeyFormat();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_AnimationCompressionFormat();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCompressedOffsetData();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCompressedTrack();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCurveTrack();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FScaleTrack();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRotationTrack();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTranslationTrack();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTrackToSkeletonMap();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimSequenceTrackContainer();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRawAnimSequenceTrack();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimSequence_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimSequence();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ENotifyTriggerMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EBlendSpaceAxis();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPerBoneInterpolation();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FGridBlendSample();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FEditorElement();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBlendSample();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBlendParameter();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FInterpolationParameter();
	ENGINE_API class UClass* Z_Construct_UClass_UBlendSpaceBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBlendSpaceBase();
	ENGINE_API class UClass* Z_Construct_UClass_UBlendSpace_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBlendSpace();
	ENGINE_API class UClass* Z_Construct_UClass_UAimOffsetBlendSpace_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAimOffsetBlendSpace();
	ENGINE_API class UClass* Z_Construct_UClass_UBlendSpace1D_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBlendSpace1D();
	ENGINE_API class UClass* Z_Construct_UClass_UAimOffsetBlendSpace1D_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAimOffsetBlendSpace1D();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimCompress_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimCompress();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimCompress_Automatic_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimCompress_Automatic();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimCompress_BitwiseCompressOnly_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimCompress_BitwiseCompressOnly();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimCompress_LeastDestructive_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimCompress_LeastDestructive();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimCompress_RemoveEverySecondKey_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimCompress_RemoveEverySecondKey();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimCompress_RemoveLinearKeys_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimCompress_RemoveLinearKeys();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimCompress_PerTrackCompression_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimCompress_PerTrackCompression();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimCompress_RemoveTrivialKeys_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimCompress_RemoveTrivialKeys();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_PostEvaluateAnimEvent__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimSingleNodeInstance_GetLength();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimSingleNodeInstance_PlayAnim();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimSingleNodeInstance_SetAnimationAsset();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimSingleNodeInstance_SetBlendSpaceInput();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimSingleNodeInstance_SetLooping();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimSingleNodeInstance_SetPlaying();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimSingleNodeInstance_SetPlayRate();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimSingleNodeInstance_SetPosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimSingleNodeInstance_SetReverse();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimSingleNodeInstance_SetVertexAnimation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimSingleNodeInstance_StopAnim();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimSingleNodeInstance_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimSingleNodeInstance();
	ENGINE_API class UFunction* Z_Construct_UFunction_UVehicleAnimInstance_GetVehicle();
	ENGINE_API class UClass* Z_Construct_UClass_UVehicleAnimInstance_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UVehicleAnimInstance();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimMetaData_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimMetaData();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimNotify_GetNotifyName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimNotify_Received_Notify();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimNotify_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimNotify();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimNotifyState_GetNotifyName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimNotifyState_Received_NotifyBegin();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimNotifyState_Received_NotifyEnd();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimNotifyState_Received_NotifyTick();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimNotifyState_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimNotifyState();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimNotifyState_TimedParticleEffect_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimNotifyState_TimedParticleEffect();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimNotifyState_Trail_OverridePSTemplate();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimNotifyState_Trail_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimNotifyState_Trail();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimSetMeshLinkup();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimSet_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimSet();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAssetImportInfo();
	ENGINE_API class UClass* Z_Construct_UClass_UAssetImportData_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAssetImportData();
	ENGINE_API class UClass* Z_Construct_UClass_UAssetUserData_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAssetUserData();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FLaunchOnTestSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FEditorMapPerformanceTestDefinition();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBuildPromotionTestSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FParticleEditorPromotionSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMaterialEditorPromotionSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBuildPromotionNewProjectSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBuildPromotionBlueprintSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBuildPromotionOpenAssetSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBuildPromotionImportWorkflowSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FEditorImportWorkflowDefinition();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FEditorImportExportTestDefinition();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FImportFactorySettingValues();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FExternalToolDefinition();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FOpenTestAsset();
	ENGINE_API class UClass* Z_Construct_UClass_UAutomationTestSettings_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAutomationTestSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNavAvoidanceData();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAvoidanceManager_GetAvoidanceVelocity();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAvoidanceManager_GetAvoidanceVelocityForComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAvoidanceManager_GetAvoidanceVelocityIgnoringUID();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAvoidanceManager_GetNewAvoidanceUID();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAvoidanceManager_GetObjectCount();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAvoidanceManager_RegisterMovementComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UAvoidanceManager_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAvoidanceManager();
	ENGINE_API class UFunction* Z_Construct_UFunction_UBlueprintAsyncActionBase_Activate();
	ENGINE_API class UClass* Z_Construct_UClass_UBlueprintAsyncActionBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBlueprintAsyncActionBase();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimParentNodeAssetOverride();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimGroupInfo();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimBlueprint_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimBlueprint();
	ENGINE_API class UClass* Z_Construct_UClass_ULevelScriptBlueprint_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ULevelScriptBlueprint();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDataTableCategoryHandle();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDataTableRowHandle();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTableRowBase();
	ENGINE_API class UClass* Z_Construct_UClass_UDataTable_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDataTable();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EEvaluateCurveTableResult();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDataTableFunctionLibrary_EvaluateCurveTableRow();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDataTableFunctionLibrary_GetDataTableRowFromName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDataTableFunctionLibrary_GetDataTableRowNames();
	ENGINE_API class UClass* Z_Construct_UClass_UDataTableFunctionLibrary_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDataTableFunctionLibrary();
	ENGINE_API class UClass* Z_Construct_UClass_UDebugDrawService_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDebugDrawService();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EGrammaticalNumber();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EGrammaticalGender();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDialogueWaveParameter();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDialogueContext();
	ENGINE_API class UClass* Z_Construct_UClass_UDialogueTypes_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDialogueTypes();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESuggestProjVelocityTraceOption();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_ActivateReverbEffect();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_ApplyDamage();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_ApplyPointDamage();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_ApplyRadialDamage();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_ApplyRadialDamageWithFalloff();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_AreAnyListenersWithinRange();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_BeginDeferredActorSpawnFromClass();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_BeginSpawningActorFromBlueprint();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_BeginSpawningActorFromClass();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_BlueprintSuggestProjectileVelocity();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_BreakHitResult();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_CancelAsyncLoading();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_ClearSoundMixModifiers();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_CreatePlayer();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_CreateSaveGameObject();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_CreateSaveGameObjectFromBlueprint();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_DeactivateReverbEffect();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_DeleteGameInSlot();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_DeprojectScreenToWorld();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_DoesSaveGameExist();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_EnableLiveStreaming();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_FinishSpawningActor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_FlushLevelStreaming();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetAccurateRealTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetActorArrayAverageLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetActorArrayBounds();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetAllActorsOfClass();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetAllActorsWithInterface();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetAudioTimeSeconds();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetCurrentLevelName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetGameInstance();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetGameMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetGameState();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetGlobalTimeDilation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetIntOption();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetKeyValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetObjectClass();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetPlatformName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetPlayerCameraManager();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetPlayerCharacter();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetPlayerController();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetPlayerPawn();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetRealTimeSeconds();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetStreamingLevel();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetSurfaceType();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetWorldDeltaSeconds();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetWorldOriginLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GrassOverlappingSphereCount();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_HasOption();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_IsGamePaused();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_LoadGameFromSlot();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_LoadStreamLevel();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_OpenLevel();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_ParseOption();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_PlayDialogue2D();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_PlayDialogueAtLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_PlaySound2D();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_PlaySoundAtLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_PlayWorldCameraShake();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_PopSoundMixModifier();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_ProjectWorldToScreen();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_PushSoundMixModifier();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_RemovePlayer();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_SaveGameToSlot();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_SetBaseSoundMix();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_SetGamePaused();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_SetGlobalTimeDilation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_SetWorldOriginLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_SpawnDecalAtLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_SpawnDecalAttached();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_SpawnDialogue2D();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_SpawnDialogueAtLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_SpawnDialogueAttached();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_SpawnEmitterAtLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_SpawnEmitterAttached();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_SpawnObject();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_SpawnSound2D();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_SpawnSoundAtLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_SpawnSoundAttached();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_UnloadStreamLevel();
	ENGINE_API class UClass* Z_Construct_UClass_UGameplayStatics_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UGameplayStatics();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EOrientPositionSelector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_EnableHMD();
	ENGINE_API class UFunction* Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_EnableLowPersistenceMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_GetOrientationAndPosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_GetPositionalTrackingCameraParameters();
	ENGINE_API class UFunction* Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_GetScreenPercentage();
	ENGINE_API class UFunction* Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_GetWorldToMetersScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_HasValidTrackingPosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_IsHeadMountedDisplayEnabled();
	ENGINE_API class UFunction* Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_IsInLowPersistenceMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_ResetOrientationAndPosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_SetClippingPlanes();
	ENGINE_API class UFunction* Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_SetWorldToMetersScale();
	ENGINE_API class UClass* Z_Construct_UClass_UHeadMountedDisplayFunctionLibrary_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UHeadMountedDisplayFunctionLibrary();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetArrayLibrary_Array_Add();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetArrayLibrary_Array_AddUnique();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetArrayLibrary_Array_Append();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetArrayLibrary_Array_Clear();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetArrayLibrary_Array_Contains();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetArrayLibrary_Array_Find();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetArrayLibrary_Array_Get();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetArrayLibrary_Array_Insert();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetArrayLibrary_Array_LastIndex();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetArrayLibrary_Array_Length();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetArrayLibrary_Array_Remove();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetArrayLibrary_Array_RemoveItem();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetArrayLibrary_Array_Resize();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetArrayLibrary_Array_Set();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetArrayLibrary_Array_Shuffle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetArrayLibrary_FilterArray();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetArrayLibrary_SetArrayPropertyByName();
	ENGINE_API class UClass* Z_Construct_UClass_UKismetArrayLibrary_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UKismetArrayLibrary();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetGuidLibrary_Conv_GuidToString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetGuidLibrary_EqualEqual_GuidGuid();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetGuidLibrary_Invalidate_Guid();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetGuidLibrary_IsValid_Guid();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetGuidLibrary_NewGuid();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetGuidLibrary_NotEqual_GuidGuid();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetGuidLibrary_Parse_StringToGuid();
	ENGINE_API class UClass* Z_Construct_UClass_UKismetGuidLibrary_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UKismetGuidLibrary();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_CalibrateTilt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_ControllerEvent_GetAnalogValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_ControllerEvent_GetEffectingButton();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_ControllerEvent_GetUserIndex();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_EqualEqual_KeyKey();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_GetAnalogValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_GetKey();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_GetUserIndex();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsAltDown();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsCommandDown();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsControlDown();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsLeftAltDown();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsLeftCommandDown();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsLeftControlDown();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsLeftShiftDown();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsRepeat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsRightAltDown();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsRightCommandDown();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsRightControlDown();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsRightShiftDown();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsShiftDown();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_Key_GetDisplayName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_Key_IsFloatAxis();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_Key_IsGamepadKey();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_Key_IsKeyboardKey();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_Key_IsModifierKey();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_Key_IsMouseButton();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_Key_IsVectorAxis();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_PointerEvent_GetCursorDelta();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_PointerEvent_GetEffectingButton();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_PointerEvent_GetGestureDelta();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_PointerEvent_GetLastScreenSpacePosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_PointerEvent_GetPointerIndex();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_PointerEvent_GetScreenSpacePosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_PointerEvent_GetTouchpadIndex();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_PointerEvent_GetUserIndex();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_PointerEvent_GetWheelDelta();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_PointerEvent_IsMouseButtonDown();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_PointerEvent_IsTouchEvent();
	ENGINE_API class UClass* Z_Construct_UClass_UKismetInputLibrary_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UKismetInputLibrary();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMaterialLibrary_CreateDynamicMaterialInstance();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMaterialLibrary_GetScalarParameterValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMaterialLibrary_GetVectorParameterValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMaterialLibrary_SetScalarParameterValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMaterialLibrary_SetVectorParameterValue();
	ENGINE_API class UClass* Z_Construct_UClass_UKismetMaterialLibrary_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UKismetMaterialLibrary();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EEasingFunc();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Abs();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Abs_Int();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Acos();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Add_ByteByte();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Add_DateTimeTimespan();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Add_FloatFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Add_IntInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Add_TimespanTimespan();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Add_Vector2DFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Add_Vector2DVector2D();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Add_VectorFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Add_VectorInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Add_VectorVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_And_IntInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Asin();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Atan();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Atan2();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_BooleanAND();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_BooleanNAND();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_BooleanNOR();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_BooleanOR();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_BooleanXOR();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_BreakColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_BreakDateTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_BreakRandomStream();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_BreakRotator();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_BreakRotIntoAxes();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_BreakTimespan();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_BreakTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_BreakVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_BreakVector2D();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_CInterpTo();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Clamp();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_ClampAngle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_ClampAxis();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_ClampVectorSize();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_ClassIsChildOf();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_ComposeRotators();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_ComposeTransforms();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_BoolToByte();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_BoolToFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_BoolToInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_ByteToFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_ByteToInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_ColorToLinearColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_FloatToLinearColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_FloatToVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_IntToBool();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_IntToByte();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_IntToFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_LinearColorToColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_LinearColorToVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_RotatorToVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_Vector2DToVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_VectorToLinearColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_VectorToRotator();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_VectorToTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_VectorToVector2D();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_ConvertTransformToRelative();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Cos();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_CreateVectorFromYawPitch();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Cross_VectorVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_CrossProduct2D();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_DateTimeFromIsoString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_DateTimeFromString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_DateTimeMaxValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_DateTimeMinValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_DaysInMonth();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_DaysInYear();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_DegAcos();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_DegAsin();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_DegAtan();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_DegAtan2();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_DegCos();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_DegreesToRadians();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_DegSin();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_DegTan();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Divide_ByteByte();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Divide_FloatFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Divide_IntInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Divide_Vector2DFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Divide_VectorFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Divide_VectorInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Divide_VectorVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Dot_VectorVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_DotProduct2D();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Ease();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_BoolBool();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_ByteByte();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_ClassClass();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_DateTimeDateTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_FloatFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_IntInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_NameName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_ObjectObject();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_RotatorRotator();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_TimespanTimespan();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_TransformTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_VectorVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Exp();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_FCeil();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_FClamp();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_FFloor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_FindLookAtRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_FInterpEaseInOut();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_FInterpTo();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_FInterpTo_Constant();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_FixedTurn();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_FMax();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_FMin();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_FMod();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Fraction();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_FromDays();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_FromHours();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_FromMilliseconds();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_FromMinutes();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_FromSeconds();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_FTrunc();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetAxes();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetDate();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetDay();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetDayOfYear();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetDays();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetDirectionVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetDuration();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetForwardVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetHour();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetHour12();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetHours();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetMaxElement();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetMillisecond();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetMilliseconds();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetMinElement();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetMinute();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetMinutes();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetMonth();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetPI();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetRightVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetSecond();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetSeconds();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetTimeOfDay();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetTotalDays();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetTotalHours();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetTotalMilliseconds();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetTotalMinutes();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetTotalSeconds();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetUpVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetVectorArrayAverage();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetYawPitchFromVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetYear();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Greater_ByteByte();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Greater_DateTimeDateTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Greater_FloatFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Greater_IntInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Greater_TimespanTimespan();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GreaterEqual_ByteByte();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GreaterEqual_DateTimeDateTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GreaterEqual_FloatFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GreaterEqual_IntInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GreaterEqual_TimespanTimespan();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GreaterGreater_VectorRotator();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GridSnap_Float();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_HSVToRGB();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_HSVToRGB_Vector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Hypotenuse();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_InRange_FloatFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_InverseLerp();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_InverseTransformDirection();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_InverseTransformLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_InvertTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_IsAfternoon();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_IsLeapYear();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_IsMorning();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Lerp();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Less_ByteByte();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Less_DateTimeDateTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Less_FloatFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Less_IntInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Less_TimespanTimespan();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_LessEqual_ByteByte();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_LessEqual_DateTimeDateTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_LessEqual_FloatFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_LessEqual_IntInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_LessEqual_TimespanTimespan();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_LessLess_VectorRotator();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_LinearColorLerp();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_LinearColorLerpUsingHSV();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_LinePlaneIntersection();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_LinePlaneIntersection_OriginNormal();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Loge();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeDateTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakePulsatingValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeRandomStream();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeRotationFromAxes();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeRotator();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeRotFromX();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeRotFromXY();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeRotFromXZ();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeRotFromY();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeRotFromYX();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeRotFromYZ();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeRotFromZ();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeRotFromZX();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeRotFromZY();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeTimespan();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeVector2D();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MapRangeClamped();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MapRangeUnclamped();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Max();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MaxOfByteArray();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MaxOfFloatArray();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MaxOfIntArray();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Min();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MinimumAreaRectangle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MinOfByteArray();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MinOfFloatArray();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MinOfIntArray();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MirrorVectorByNormal();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Multiply_ByteByte();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Multiply_FloatFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Multiply_IntFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Multiply_IntInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Multiply_LinearColorFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Multiply_LinearColorLinearColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Multiply_RotatorFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Multiply_RotatorInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Multiply_TimespanFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Multiply_Vector2DFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Multiply_VectorFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Multiply_VectorInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Multiply_VectorVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MultiplyByPi();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MultiplyMultiply_FloatFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_NearlyEqual_FloatFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_NearlyEqual_TransformTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_NegateRotator();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_NegateVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Normal();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Normal2D();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_NormalizeAxis();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_NormalizedDeltaRotator();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_NormalizeToRange();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Not_PreBool();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_NotEqual_BoolBool();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_NotEqual_ByteByte();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_NotEqual_ClassClass();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_NotEqual_DateTimeDateTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_NotEqual_FloatFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_NotEqual_IntInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_NotEqual_NameName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_NotEqual_ObjectObject();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_NotEqual_RotatorRotator();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_NotEqual_TimespanTimespan();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_NotEqual_VectorVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Now();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Or_IntInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Percent_ByteByte();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Percent_FloatFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Percent_IntInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_PointsAreCoplanar();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_ProjectPointOnToPlane();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_ProjectVectorOnToPlane();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_ProjectVectorOnToVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RadiansToDegrees();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomBool();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomBoolFromStream();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomFloatFromStream();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomFloatInRange();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomFloatInRangeFromStream();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomInteger();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomIntegerFromStream();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomIntegerInRange();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomIntegerInRangeFromStream();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomPointInBoundingBox();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomRotator();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomRotatorFromStream();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomUnitVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomUnitVectorFromStream();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomUnitVectorInCone();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomUnitVectorInConeWithYawAndPitch();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_REase();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_ResetRandomStream();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RGBToHSV();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RGBToHSV_Vector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RInterpTo();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RInterpTo_Constant();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RLerp();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RotateAngleAxis();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RotatorFromAxisAndAngle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Round();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_SeedRandomStream();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_SelectClass();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_SelectColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_SelectFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_SelectInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_SelectObject();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_SelectRotator();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_SelectString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_SelectTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_SelectVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_SetRandomStreamSeed();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_SignOfFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_SignOfInteger();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Sin();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Sqrt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Square();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Subtract_ByteByte();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Subtract_DateTimeDateTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Subtract_DateTimeTimespan();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Subtract_FloatFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Subtract_IntInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Subtract_TimespanTimespan();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Subtract_Vector2DFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Subtract_Vector2DVector2D();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Subtract_VectorFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Subtract_VectorInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Subtract_VectorVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Tan();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_TEase();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_TimespanFromString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_TimespanMaxValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_TimespanMinValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_TimespanRatio();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_TimespanZeroValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_TInterpTo();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_TLerp();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Today();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_TransformDirection();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_TransformLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_UtcNow();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_VEase();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Vector2DInterpTo();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Vector2DInterpTo_Constant();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_VInterpTo();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_VInterpTo_Constant();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_VLerp();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_VSize();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_VSize2D();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_VSize2DSquared();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_VSizeSquared();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Xor_IntInt();
	ENGINE_API class UClass* Z_Construct_UClass_UKismetMathLibrary_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UKismetMathLibrary();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetNodeHelperLibrary_BitIsMarked();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetNodeHelperLibrary_ClearAllBits();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetNodeHelperLibrary_ClearBit();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetNodeHelperLibrary_GetEnumeratorName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetNodeHelperLibrary_GetEnumeratorUserFriendlyName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetNodeHelperLibrary_GetFirstUnmarkedBit();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetNodeHelperLibrary_GetRandomUnmarkedBit();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetNodeHelperLibrary_GetUnmarkedBit();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetNodeHelperLibrary_GetValidIndex();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetNodeHelperLibrary_HasMarkedBit();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetNodeHelperLibrary_HasUnmarkedBit();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetNodeHelperLibrary_MarkBit();
	ENGINE_API class UClass* Z_Construct_UClass_UKismetNodeHelperLibrary_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UKismetNodeHelperLibrary();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_BuildString_Bool();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_BuildString_Color();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_BuildString_Float();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_BuildString_Int();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_BuildString_Name();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_BuildString_Object();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_BuildString_Rotator();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_BuildString_Vector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_BuildString_Vector2d();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Concat_StrStr();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Conv_BoolToString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Conv_ByteToString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Conv_ColorToString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Conv_FloatToString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Conv_IntToString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Conv_NameToString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Conv_ObjectToString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Conv_RotatorToString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Conv_StringToFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Conv_StringToInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Conv_StringToName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Conv_TransformToString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Conv_Vector2dToString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Conv_VectorToString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_CullArray();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_EndsWith();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_EqualEqual_StriStri();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_EqualEqual_StrStr();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_FindSubstring();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_GetCharacterArrayFromString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_GetCharacterAsNumber();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_GetSubstring();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_IsNumeric();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_JoinStringArray();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Left();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_LeftChop();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_LeftPad();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Len();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_MatchesWildcard();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Mid();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_NotEqual_StriStri();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_NotEqual_StrStr();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_ParseIntoArray();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Replace();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_ReplaceInline();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Reverse();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Right();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_RightChop();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_RightPad();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Split();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_StartsWith();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_TimeSecondsToString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_ToLower();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_ToUpper();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Trim();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_TrimTrailing();
	ENGINE_API class UClass* Z_Construct_UClass_UKismetStringLibrary_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UKismetStringLibrary();
	ENGINE_API class UClass* Z_Construct_UClass_UDeveloperSettings_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDeveloperSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCustomProfile();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCustomChannelSetup();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCollisionResponseTemplate();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCollisionProfileName();
	ENGINE_API class UClass* Z_Construct_UClass_UCollisionProfile_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCollisionProfile();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_UKismetSystemLibrary_OnAssetClassLoaded__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_UKismetSystemLibrary_OnAssetLoaded__DelegateSignature();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EQuitPreference();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMoveComponentAction();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EDrawDebugTrace();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FGenericStruct();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_AddFloatHistorySample();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_BoxOverlapActors_DEPRECATED();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_BoxOverlapActors_NEW();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_BoxOverlapComponents_DEPRECATED();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_BoxOverlapComponents_NEW();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_BoxTraceMulti();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_BoxTraceMultiForObjects();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_BoxTraceSingle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_BoxTraceSingleForObjects();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_CapsuleOverlapActors_DEPRECATED();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_CapsuleOverlapActors_NEW();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_CapsuleOverlapComponents_DEPRECATED();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_CapsuleOverlapComponents_NEW();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_CapsuleTraceMulti_DEPRECATED();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_CapsuleTraceMulti_NEW();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_CapsuleTraceMultiByObject_DEPRECATED();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_CapsuleTraceMultiForObjects();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_CapsuleTraceSingle_DEPRECATED();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_CapsuleTraceSingle_NEW();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_CapsuleTraceSingleByObject_DEPRECATED();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_CapsuleTraceSingleForObjects();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_CollectGarbage();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_ComponentOverlapActors_DEPRECATED();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_ComponentOverlapActors_NEW();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_ComponentOverlapComponents_DEPRECATED();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_ComponentOverlapComponents_NEW();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_ControlScreensaver();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_Conv_AssetClassToClass();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_Conv_AssetToObject();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_Conv_InterfaceToObject();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_CreateCopyForUndoBuffer();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_Delay();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DoesImplementInterface();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugArrow();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugBox();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugCamera();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugCapsule();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugCircle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugCone();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugConeInDegrees();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugCoordinateSystem();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugCylinder();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugFloatHistoryLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugFloatHistoryTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugFrustum();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugLine();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugPlane();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugPoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugSphere();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_ExecuteConsoleCommand();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_FlushDebugStrings();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_FlushPersistentDebugLines();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_ForceCloseAdBanner();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetActorBounds();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetActorListFromComponentList();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetAdIDCount();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetClassDisplayName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetComponentBounds();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetDisplayName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetEngineVersion();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetGameName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetGameTimeInSeconds();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetLocalCurrencyCode();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetLocalCurrencySymbol();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetObjectName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetPlatformUserName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetPreferredLanguages();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetRenderingDetailMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetRenderingMaterialQualityLevel();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetSupportedFullscreenResolutions();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetUniqueDeviceId();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetVolumeButtonsHandledBySystem();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_HideAdBanner();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_IsControllerAssignedToGamepad();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_IsDedicatedServer();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_IsLoggedIn();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_IsPackagedForDistribution();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_IsServer();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_IsValid();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_IsValidClass();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_ClearTimer();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_ClearTimerDelegate();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_ClearTimerHandle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_GetTimerElapsedTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_GetTimerElapsedTimeDelegate();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_GetTimerElapsedTimeHandle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_GetTimerRemainingTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_GetTimerRemainingTimeDelegate();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_GetTimerRemainingTimeHandle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_InvalidateTimerHandle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_IsTimerActive();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_IsTimerActiveDelegate();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_IsTimerActiveHandle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_IsTimerPaused();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_IsTimerPausedDelegate();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_IsTimerPausedHandle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_IsValidTimerHandle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_PauseTimer();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_PauseTimerDelegate();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_PauseTimerHandle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_SetTimer();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_SetTimerDelegate();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_TimerExists();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_TimerExistsDelegate();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_TimerExistsHandle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_UnPauseTimer();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_UnPauseTimerDelegate();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_UnPauseTimerHandle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_LaunchURL();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_LineTraceMulti_DEPRECATED();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_LineTraceMulti_NEW();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_LineTraceMultiByObject_DEPRECATED();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_LineTraceMultiForObjects();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_LineTraceSingle_DEPRECATED();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_LineTraceSingle_NEW();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_LineTraceSingleByObject_DEPRECATED();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_LineTraceSingleForObjects();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_LoadAsset();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_LoadAssetClass();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_MakeLiteralBool();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_MakeLiteralByte();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_MakeLiteralFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_MakeLiteralInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_MakeLiteralName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_MakeLiteralString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_MakeLiteralText();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_MoveComponentTo();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_PrintString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_PrintText();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_PrintWarning();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_QuitGame();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_RegisterForRemoteNotifications();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_ResetGamepadAssignments();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_ResetGamepadAssignmentToController();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_RetriggerableDelay();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetAssetClassPropertyByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetAssetPropertyByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetBoolPropertyByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetBytePropertyByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetClassPropertyByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetCollisionProfileNameProperty();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetFloatPropertyByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetIntPropertyByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetLinearColorPropertyByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetNamePropertyByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetObjectPropertyByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetRotatorPropertyByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetStringPropertyByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetStructurePropertyByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetSupressViewportTransitionMessage();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetTextPropertyByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetTransformPropertyByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetVectorPropertyByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetVolumeButtonsHandledBySystem();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetWindowTitle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_ShowAdBanner();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_ShowPlatformSpecificAchievementsScreen();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_ShowPlatformSpecificLeaderboardScreen();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SphereOverlapActors_DEPRECATED();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SphereOverlapActors_NEW();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SphereOverlapComponents_DEPRECATED();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SphereOverlapComponents_NEW();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SphereTraceMulti_DEPRECATED();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SphereTraceMulti_NEW();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SphereTraceMultiByObject_DEPRECATED();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SphereTraceMultiForObjects();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SphereTraceSingle_DEPRECATED();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SphereTraceSingle_NEW();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SphereTraceSingleByObject_DEPRECATED();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SphereTraceSingleForObjects();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_StackTrace();
	ENGINE_API class UClass* Z_Construct_UClass_UKismetSystemLibrary_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UKismetSystemLibrary();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ERoundingMode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FFormatTextArgument();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_AsCurrency_Float();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_AsCurrency_Integer();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_AsDate_DateTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_AsDateTime_DateTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_AsPercent_Float();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_AsTime_DateTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_AsTimespan_Timespan();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_Conv_BoolToText();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_Conv_ByteToText();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_Conv_FloatToText();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_Conv_IntToText();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_Conv_NameToText();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_Conv_StringToText();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_Conv_TextToString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_EqualEqual_IgnoreCase_TextText();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_EqualEqual_TextText();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_FindTextInLocalizationTable();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_Format();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_GetEmptyText();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_NotEqual_IgnoreCase_TextText();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_NotEqual_TextText();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_TextIsCultureInvariant();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_TextIsEmpty();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_TextIsTransient();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_TextTrimPreceding();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_TextTrimPrecedingAndTrailing();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_TextTrimTrailing();
	ENGINE_API class UClass* Z_Construct_UClass_UKismetTextLibrary_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UKismetTextLibrary();
	ENGINE_API class UFunction* Z_Construct_UFunction_UVisualLoggerKismetLibrary_LogBox();
	ENGINE_API class UFunction* Z_Construct_UFunction_UVisualLoggerKismetLibrary_LogLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UVisualLoggerKismetLibrary_LogText();
	ENGINE_API class UClass* Z_Construct_UClass_UVisualLoggerKismetLibrary_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UVisualLoggerKismetLibrary();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FEventGraphFastCallPair();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBlueprintDebugData();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPointerToUberGraphFrame();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDebuggingInfoForSingleFunction();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNodeToCodeAssociation();
	ENGINE_API class UClass* Z_Construct_UClass_UBlueprintGeneratedClass_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBlueprintGeneratedClass();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimBlueprintDebugData();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimationFrameSnapshot();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FStateMachineDebugData();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimBlueprintGeneratedClass_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimBlueprintGeneratedClass();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FKShapeElem();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FKConvexElem();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FKBoxElem();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FKSphereElem();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FKSphylElem();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FKAggregateGeom();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EBodyCollisionResponse();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EPhysicsType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ECollisionTraceFlag();
	ENGINE_API class UClass* Z_Construct_UClass_UBodySetup_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBodySetup();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAggregateGeometry2D();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBoxElement2D();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCircleElement2D();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FConvexElement2D();
	ENGINE_API class UClass* Z_Construct_UClass_UBodySetup2D_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBodySetup2D();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FInputBlendPose();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBranchFilter();
	ENGINE_API class UClass* Z_Construct_UClass_UBoneMaskFilter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBoneMaskFilter();
	ENGINE_API class UClass* Z_Construct_UClass_UBookMark_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBookMark();
	ENGINE_API class UClass* Z_Construct_UClass_UBookMark2D_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBookMark2D();
	ENGINE_API class UClass* Z_Construct_UClass_UBreakpoint_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBreakpoint();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBuilderPoly();
	ENGINE_API class UClass* Z_Construct_UClass_UBrushBuilder_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBrushBuilder();
	ENGINE_API class UClass* Z_Construct_UClass_UButtonStyleAsset_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UButtonStyleAsset();
	ENGINE_API class UClass* Z_Construct_UClass_UCameraAnim_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCameraAnim();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCameraAnimInst_SetDuration();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCameraAnimInst_SetScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCameraAnimInst_Stop();
	ENGINE_API class UClass* Z_Construct_UClass_UCameraAnimInst_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCameraAnimInst();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCameraModifier_BlueprintModifyCamera();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCameraModifier_BlueprintModifyPostProcess();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCameraModifier_DisableModifier();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCameraModifier_EnableModifier();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCameraModifier_GetViewTarget();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCameraModifier_IsDisabled();
	ENGINE_API class UClass* Z_Construct_UClass_UCameraModifier_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCameraModifier();
	ENGINE_API class UClass* Z_Construct_UClass_UCameraModifier_CameraShake_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCameraModifier_CameraShake();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FWrappedStringElement();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTextSizingParameters();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCanvasIcon();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCanvas_K2_Deproject();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCanvas_K2_DrawBorder();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCanvas_K2_DrawBox();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCanvas_K2_DrawLine();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCanvas_K2_DrawMaterial();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCanvas_K2_DrawMaterialTriangle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCanvas_K2_DrawPolygon();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCanvas_K2_DrawText();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCanvas_K2_DrawTexture();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCanvas_K2_DrawTriangle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCanvas_K2_Project();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCanvas_K2_StrLen();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCanvas_K2_TextSize();
	ENGINE_API class UClass* Z_Construct_UClass_UCanvas_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCanvas();
	ENGINE_API class UClass* Z_Construct_UClass_UChannel_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UChannel();
	ENGINE_API class UClass* Z_Construct_UClass_UActorChannel_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UActorChannel();
	ENGINE_API class UClass* Z_Construct_UClass_UControlChannel_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UControlChannel();
	ENGINE_API class UClass* Z_Construct_UClass_UVoiceChannel_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UVoiceChannel();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_BugIt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_BugItGo();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_BugItStringCreator();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_ChangeSize();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_DamageTarget();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_DebugCapsuleSweep();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_DebugCapsuleSweepCapture();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_DebugCapsuleSweepChannel();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_DebugCapsuleSweepClear();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_DebugCapsuleSweepComplex();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_DebugCapsuleSweepPawn();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_DebugCapsuleSweepSize();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_DestroyAll();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_DestroyAllPawnsExceptTarget();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_DestroyPawns();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_DestroyTarget();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_DumpOnlineSessionState();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_DumpPartyState();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_DumpVoiceMutingState();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_FlushLog();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_Fly();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_FontAtlasVisualizer();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_FreezeFrame();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_Ghost();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_God();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_InvertMouse();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_LogLoc();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_OnlyLoadLevel();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_PlayersOnly();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_RebuildNavigation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_ServerToggleAILogging();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_SetMouseSensitivityToDefault();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_SetNavDrawDistance();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_SetWorldOrigin();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_Slomo();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_StreamLevelIn();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_StreamLevelOut();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_Summon();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_Teleport();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_TestCollisionDistance();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_TextureAtlasVisualizer();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_ToggleAILogging();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_ToggleDebugCamera();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_ViewActor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_ViewClass();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_ViewPlayer();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_ViewSelf();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_Walk();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_WidgetReflector();
	ENGINE_API class UClass* Z_Construct_UClass_UCheatManager_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCheatManager();
	ENGINE_API class UClass* Z_Construct_UClass_UCheckBoxStyleAsset_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCheckBoxStyleAsset();
	ENGINE_API class UClass* Z_Construct_UClass_UCommandlet_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCommandlet();
	ENGINE_API class UClass* Z_Construct_UClass_UPluginCommandlet_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPluginCommandlet();
	ENGINE_API class UClass* Z_Construct_UClass_USmokeTestCommandlet_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USmokeTestCommandlet();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAutoCompleteNode();
	ENGINE_API class UClass* Z_Construct_UClass_UConsole_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UConsole();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRuntimeCurveLinearColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCurveLinearColor_GetLinearColorValue();
	ENGINE_API class UClass* Z_Construct_UClass_UCurveLinearColor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCurveLinearColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCurveVector_GetVectorValue();
	ENGINE_API class UClass* Z_Construct_UClass_UCurveVector_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCurveVector();
	ENGINE_API class UClass* Z_Construct_UClass_UDEPRECATED_CurveEdPresetCurve_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDEPRECATED_CurveEdPresetCurve();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCurveTableRowHandle();
	ENGINE_API class UClass* Z_Construct_UClass_UCurveTable_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCurveTable();
	ENGINE_API class UClass* Z_Construct_UClass_UDataAsset_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDataAsset();
	ENGINE_API class UClass* Z_Construct_UClass_UTireType_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UTireType();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDestructibleChunkParameters();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FFractureMaterial();
	ENGINE_API class UClass* Z_Construct_UClass_UDestructibleFractureSettings_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDestructibleFractureSettings();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimationSettings_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimationSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAudioQualitySettings();
	ENGINE_API class UClass* Z_Construct_UClass_UAudioSettings_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAudioSettings();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EUIScalingRule();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ERenderFocusRule();
	ENGINE_API class UClass* Z_Construct_UClass_UUserInterfaceSettings_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UUserInterfaceSettings();
	ENGINE_API class UClass* Z_Construct_UClass_UStreamingSettings_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UStreamingSettings();
	ENGINE_API class UClass* Z_Construct_UClass_UGarbageCollectionSettings_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UGarbageCollectionSettings();
	ENGINE_API class UClass* Z_Construct_UClass_UNetworkSettings_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNetworkSettings();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESettingsLockedAxis();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESettingsDOF();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EFrictionCombineMode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPhysicalSurfaceName();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicsSettings_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicsSettings();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAntiAliasingMethodUI();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EEarlyZPass();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ECustomDepthStencil();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ECompositingSampleCount();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EClearSceneOptions();
	ENGINE_API class UClass* Z_Construct_UClass_URendererSettings_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_URendererSettings();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETextureSamplerFilter();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETexturePowerOfTwoSetting();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_TextureMipGenSettings();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_TextureGroup();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTextureLODGroup();
	ENGINE_API class UClass* Z_Construct_UClass_UTextureLODSettings_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UTextureLODSettings();
	ENGINE_API class UClass* Z_Construct_UClass_UDeviceProfile_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDeviceProfile();
	ENGINE_API class UClass* Z_Construct_UClass_UDeviceProfileManager_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDeviceProfileManager();
	ENGINE_API class UClass* Z_Construct_UClass_UDialogueVoice_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDialogueVoice();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDialogueContextMapping();
	ENGINE_API class UClass* Z_Construct_UClass_UDialogueWave_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDialogueWave();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_DistributionParamMode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRawDistribution();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDistributionLookupTable();
	ENGINE_API class UClass* Z_Construct_UClass_UDistribution_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDistribution();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRawDistributionFloat();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FFloatDistribution();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionFloat_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionFloat();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionFloatConstant_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionFloatConstant();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionFloatParameterBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionFloatParameterBase();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionFloatParticleParameter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionFloatParticleParameter();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionFloatConstantCurve_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionFloatConstantCurve();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionFloatUniform_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionFloatUniform();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionFloatUniformCurve_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionFloatUniformCurve();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EDistributionVectorMirrorFlags();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EDistributionVectorLockFlags();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRawDistributionVector();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FVector4Distribution();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FVectorDistribution();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionVector_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionVector();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionVectorConstant_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionVectorConstant();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionVectorParameterBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionVectorParameterBase();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionVectorParticleParameter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionVectorParticleParameter();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionVectorConstantCurve_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionVectorConstantCurve();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionVectorUniform_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionVectorUniform();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionVectorUniformCurve_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionVectorUniformCurve();
	ENGINE_API class UClass* Z_Construct_UClass_UDPICustomScalingRule_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDPICustomScalingRule();
	ENGINE_API class UClass* Z_Construct_UClass_UDynamicBlueprintBinding_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDynamicBlueprintBinding();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBlueprintComponentDelegateBinding();
	ENGINE_API class UClass* Z_Construct_UClass_UComponentDelegateBinding_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UComponentDelegateBinding();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBlueprintInputDelegateBinding();
	ENGINE_API class UClass* Z_Construct_UClass_UInputDelegateBinding_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInputDelegateBinding();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBlueprintInputActionDelegateBinding();
	ENGINE_API class UClass* Z_Construct_UClass_UInputActionDelegateBinding_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInputActionDelegateBinding();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBlueprintInputAxisDelegateBinding();
	ENGINE_API class UClass* Z_Construct_UClass_UInputAxisDelegateBinding_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInputAxisDelegateBinding();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBlueprintInputAxisKeyDelegateBinding();
	ENGINE_API class UClass* Z_Construct_UClass_UInputAxisKeyDelegateBinding_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInputAxisKeyDelegateBinding();
	ENGINE_API class UClass* Z_Construct_UClass_UInputVectorAxisDelegateBinding_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInputVectorAxisDelegateBinding();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBlueprintInputKeyDelegateBinding();
	ENGINE_API class UClass* Z_Construct_UClass_UInputKeyDelegateBinding_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInputKeyDelegateBinding();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBlueprintInputTouchDelegateBinding();
	ENGINE_API class UClass* Z_Construct_UClass_UInputTouchDelegateBinding_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInputTouchDelegateBinding();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FGraphReference();
	ENGINE_API class UClass* Z_Construct_UClass_UEdGraph_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UEdGraph();
	ENGINE_API class UClass* Z_Construct_UClass_UEdGraphNode_Documentation_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UEdGraphNode_Documentation();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ECanCreateConnectionResponse();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EGraphType();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FEdGraphSchemaAction_NewNode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FEdGraphSchemaAction();
	ENGINE_API class UClass* Z_Construct_UClass_UEdGraphSchema_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UEdGraphSchema();
	ENGINE_API class UClass* Z_Construct_UClass_UImportantToggleSettingInterface_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UImportantToggleSettingInterface();
	ENGINE_API class UClass* Z_Construct_UClass_UEndUserSettings_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UEndUserSettings();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EConsoleType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETransitionType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EFullyLoadPackageType();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPluginRedirect();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FStructRedirect();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FClassRedirect();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FGameNameRedirect();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FScreenMessageString();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDropNoteInfo();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FStatColorMapping();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FStatColorMapEntry();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FWorldContext();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNamedNetDriver();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNetDriverDefinition();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FLevelStreamingStatus();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FFullyLoadedPackagesInfo();
	ENGINE_API class UClass* Z_Construct_UClass_UEngine_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UEngine();
	ENGINE_API class UClass* Z_Construct_UClass_UGameEngine_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UGameEngine();
	ENGINE_API class UClass* Z_Construct_UClass_UExporter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UExporter();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EFontImportCharacterSet();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FFontImportOptionsData();
	ENGINE_API class UClass* Z_Construct_UClass_UFontImportOptions_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UFontImportOptions();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EFontCacheType();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FFontCharacter();
	ENGINE_API class UClass* Z_Construct_UClass_UFont_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UFont();
	ENGINE_API class UClass* Z_Construct_UClass_UGameUserSettings_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UGameUserSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FActiveHapticFeedbackEffect();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FHapticFeedbackDetails();
	ENGINE_API class UClass* Z_Construct_UClass_UHapticFeedbackEffect_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UHapticFeedbackEffect();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FComponentOverrideRecord();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FComponentKey();
	ENGINE_API class UClass* Z_Construct_UClass_UInheritableComponentHandler_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInheritableComponentHandler();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FInputAxisKeyMapping();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FInputActionKeyMapping();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FInputAxisConfigEntry();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FInputAxisProperties();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FKeyBind();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPlayerInput_ClearSmoothing();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPlayerInput_InvertAxis();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPlayerInput_InvertAxisKey();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPlayerInput_SetBind();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPlayerInput_SetMouseSensitivity();
	ENGINE_API class UClass* Z_Construct_UClass_UPlayerInput_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPlayerInput();
	ENGINE_API class UClass* Z_Construct_UClass_UInputSettings_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInputSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCurveEdTab();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCurveEdEntry();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpCurveEdSetup_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpCurveEdSetup();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpData_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpData();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpFilter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpFilter();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpFilter_Classes_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpFilter_Classes();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpFilter_Custom_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpFilter_Custom();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FInterpEdSelKey();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpGroup_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpGroup();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCameraPreviewInfo();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpGroupCamera_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpGroupCamera();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpGroupDirector_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpGroupDirector();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpGroupInst_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpGroupInst();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpGroupInstCamera_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpGroupInstCamera();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpGroupInstDirector_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpGroupInstDirector();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETrackActiveCondition();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSubTrackGroup();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSupportedSubTrackInfo();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrack_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrack();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBoolTrackKey();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackBoolProp_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackBoolProp();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDirectorTrackCut();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackDirector_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackDirector();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FEventTrackKey();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackEvent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackEvent();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackFloatBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackFloatBase();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimControlTrackKey();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackAnimControl_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackAnimControl();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackFade_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackFade();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackFloatAnimBPParam_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackFloatAnimBPParam();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackFloatMaterialParam_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackFloatMaterialParam();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackFloatParticleParam_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackFloatParticleParam();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackFloatProp_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackFloatProp();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EInterpTrackMoveRotMode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FInterpLookupTrack();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FInterpLookupPoint();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackMove_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackMove();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EInterpMoveAxis();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackMoveAxis_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackMoveAxis();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackSlomo_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackSlomo();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackLinearColorBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackLinearColorBase();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackLinearColorProp_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackLinearColorProp();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FParticleReplayTrackKey();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackParticleReplay_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackParticleReplay();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETrackToggleAction();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FToggleTrackKey();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackToggle_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackToggle();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackVectorBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackVectorBase();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackAudioMaster_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackAudioMaster();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackColorProp_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackColorProp();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackColorScale_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackColorScale();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSoundTrackKey();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackSound_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackSound();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackVectorMaterialParam_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackVectorMaterialParam();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackVectorProp_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackVectorProp();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EVisibilityTrackCondition();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EVisibilityTrackAction();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FVisibilityTrackKey();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackVisibility_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackVisibility();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInst_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInst();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstAnimControl_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstAnimControl();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstAudioMaster_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstAudioMaster();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstColorScale_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstColorScale();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstDirector_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstDirector();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstEvent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstEvent();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstFade_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstFade();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstFloatAnimBPParam_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstFloatAnimBPParam();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstFloatMaterialParam_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstFloatMaterialParam();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstFloatParticleParam_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstFloatParticleParam();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstMove_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstMove();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstParticleReplay_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstParticleReplay();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstProperty_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstProperty();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstBoolProp_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstBoolProp();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstColorProp_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstColorProp();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstFloatProp_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstFloatProp();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstLinearColorProp_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstLinearColorProp();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstVectorProp_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstVectorProp();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstSlomo_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstSlomo();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstSound_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstSound();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstToggle_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstToggle();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstVectorMaterialParam_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstVectorMaterialParam();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstVisibility_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstVisibility();
	ENGINE_API class UClass* Z_Construct_UClass_UIntSerialization_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UIntSerialization();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FLayerActorStats();
	ENGINE_API class UClass* Z_Construct_UClass_ULayer_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ULayer();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_LevelStreamingVisibilityStatus__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_LevelStreamingLoadedStatus__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULevelStreaming_CreateInstance();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULevelStreaming_GetLevelScriptActor();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULevelStreaming_IsLevelLoaded();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULevelStreaming_IsLevelVisible();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULevelStreaming_IsStreamingStatePending();
	ENGINE_API class UClass* Z_Construct_UClass_ULevelStreaming_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ULevelStreaming();
	ENGINE_API class UClass* Z_Construct_UClass_ULevelStreamingAlwaysLoaded_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ULevelStreamingAlwaysLoaded();
	ENGINE_API class UClass* Z_Construct_UClass_ULevelStreamingKismet_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ULevelStreamingKismet();
	ENGINE_API class UClass* Z_Construct_UClass_ULevelStreamingPersistent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ULevelStreamingPersistent();
	ENGINE_API class UClass* Z_Construct_UClass_ULightmappedSurfaceCollection_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ULightmappedSurfaceCollection();
	ENGINE_API class UClass* Z_Construct_UClass_ULightmassPrimitiveSettingsObject_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ULightmassPrimitiveSettingsObject();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FClientReceiveData();
	ENGINE_API class UClass* Z_Construct_UClass_ULocalMessage_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ULocalMessage();
	ENGINE_API class UClass* Z_Construct_UClass_UEngineMessage_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UEngineMessage();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FExpressionOutput();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMaterialAttributesInput();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FExpressionInput();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpression_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpression();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionAbs_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionAbs();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionActorPositionWS_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionActorPositionWS();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionAdd_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionAdd();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionAppendVector_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionAppendVector();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionAtmosphericFogColor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionAtmosphericFogColor();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionBlackBody_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionBlackBody();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionBreakMaterialAttributes_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionBreakMaterialAttributes();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionBumpOffset_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionBumpOffset();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionCameraPositionWS_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionCameraPositionWS();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionCameraVectorWS_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionCameraVectorWS();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionCeil_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionCeil();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EClampMode();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionClamp_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionClamp();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionCollectionParameter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionCollectionParameter();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionComment_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionComment();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionComponentMask_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionComponentMask();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionConstant_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionConstant();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionConstant2Vector_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionConstant2Vector();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionConstant3Vector_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionConstant3Vector();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionConstant4Vector_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionConstant4Vector();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionConstantBiasScale_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionConstantBiasScale();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionCosine_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionCosine();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionCrossProduct_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionCrossProduct();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ECustomMaterialOutputType();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCustomInput();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionCustom_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionCustom();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionCustomOutput_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionCustomOutput();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDDX_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDDX();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDDY_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDDY();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDecalMipmapLevel_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDecalMipmapLevel();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDepthFade_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDepthFade();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EDepthOfFieldFunctionValue();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDepthOfFieldFunction_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDepthOfFieldFunction();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDeriveNormalZ_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDeriveNormalZ();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDesaturation_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDesaturation();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDistance_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDistance();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDistanceCullFade_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDistanceCullFade();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDistanceFieldGradient_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDistanceFieldGradient();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDistanceToNearestSurface_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDistanceToNearestSurface();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDivide_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDivide();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDotProduct_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDotProduct();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDynamicParameter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDynamicParameter();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionEyeAdaptation_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionEyeAdaptation();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionFeatureLevelSwitch_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionFeatureLevelSwitch();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionFloor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionFloor();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionFmod_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionFmod();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionFontSample_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionFontSample();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionFontSampleParameter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionFontSampleParameter();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionFrac_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionFrac();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionFresnel_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionFresnel();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EFunctionInputType();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionFunctionInput_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionFunctionInput();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionFunctionOutput_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionFunctionOutput();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionGIReplace_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionGIReplace();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionIf_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionIf();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionLightmapUVs_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionLightmapUVs();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionLightmassReplace_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionLightmassReplace();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionLightVector_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionLightVector();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionLinearInterpolate_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionLinearInterpolate();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionLogarithm2_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionLogarithm2();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionMakeMaterialAttributes_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionMakeMaterialAttributes();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FFunctionExpressionOutput();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FFunctionExpressionInput();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionMaterialFunctionCall_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionMaterialFunctionCall();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionMax_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionMax();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionMin_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionMin();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionMultiply_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionMultiply();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ENoiseFunction();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionNoise_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionNoise();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionNormalize_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionNormalize();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionObjectBounds_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionObjectBounds();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionObjectOrientation_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionObjectOrientation();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionObjectPositionWS_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionObjectPositionWS();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionObjectRadius_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionObjectRadius();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionOneMinus_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionOneMinus();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionPanner_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionPanner();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParameter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParameter();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionScalarParameter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionScalarParameter();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionStaticBoolParameter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionStaticBoolParameter();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionStaticSwitchParameter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionStaticSwitchParameter();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionStaticComponentMaskParameter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionStaticComponentMaskParameter();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionVectorParameter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionVectorParameter();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticleColor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticleColor();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticleDirection_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticleDirection();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticleMacroUV_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticleMacroUV();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticleMotionBlurFade_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticleMotionBlurFade();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticlePositionWS_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticlePositionWS();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticleRadius_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticleRadius();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticleRelativeTime_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticleRelativeTime();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticleSize_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticleSize();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticleSpeed_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticleSpeed();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionPerInstanceFadeAmount_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionPerInstanceFadeAmount();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionPerInstanceRandom_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionPerInstanceRandom();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionPixelDepth_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionPixelDepth();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionPixelNormalWS_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionPixelNormalWS();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionPower_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionPower();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionPrecomputedAOMask_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionPrecomputedAOMask();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionQualitySwitch_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionQualitySwitch();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionReflectionVectorWS_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionReflectionVectorWS();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionRotateAboutAxis_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionRotateAboutAxis();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionRotator_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionRotator();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMaterialSceneAttributeInputMode();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSceneColor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSceneColor();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSceneDepth_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSceneDepth();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSceneTexelSize_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSceneTexelSize();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESceneTextureId();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSceneTexture_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSceneTexture();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionScreenPosition_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionScreenPosition();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSine_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSine();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESpeedTreeLODType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESpeedTreeWindType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESpeedTreeGeometryType();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSpeedTree_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSpeedTree();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSphereMask_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSphereMask();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSphericalParticleOpacity_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSphericalParticleOpacity();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSquareRoot_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSquareRoot();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionStaticBool_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionStaticBool();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionStaticSwitch_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionStaticSwitch();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSubtract_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSubtract();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTextureBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTextureBase();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTextureObject_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTextureObject();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETextureMipValueMode();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTextureSample_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTextureSample();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticleSubUV_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticleSubUV();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTextureSampleParameter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTextureSampleParameter();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTextureObjectParameter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTextureObjectParameter();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTextureSampleParameter2D_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTextureSampleParameter2D();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETextureColorChannel();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionAntialiasedTextureMask_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionAntialiasedTextureMask();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTextureSampleParameterSubUV_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTextureSampleParameterSubUV();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTextureSampleParameterCube_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTextureSampleParameterCube();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTextureCoordinate_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTextureCoordinate();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTime_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTime();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMaterialVectorCoordTransform();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMaterialVectorCoordTransformSource();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTransform_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTransform();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMaterialPositionTransformSource();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTransformPosition_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTransformPosition();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTwoSidedSign_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTwoSidedSign();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionVertexColor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionVertexColor();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionVertexNormalWS_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionVertexNormalWS();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMaterialExposedViewProperty();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionViewProperty_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionViewProperty();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionViewSize_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionViewSize();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EWorldPositionIncludedOffsets();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionWorldPosition_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionWorldPosition();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialFunction_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialFunction();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMaterialDecalResponse();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMaterialDomain();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EDecalBlendMode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMaterialParameterCollectionInfo();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMaterialFunctionInfo();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FVector2MaterialInput();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FVectorMaterialInput();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FScalarMaterialInput();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FColorMaterialInput();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMaterialInput();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterial_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterial();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMaterialInstanceBasePropertyOverrides();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FVectorParameterValue();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTextureParameterValue();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FScalarParameterValue();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FFontParameterValue();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialInstance_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialInstance();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialInstanceConstant_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialInstanceConstant();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMaterialInstanceDynamic_CopyParameterOverrides();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMaterialInstanceDynamic_K2_CopyMaterialInstanceParameters();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMaterialInstanceDynamic_K2_GetScalarParameterValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMaterialInstanceDynamic_K2_GetTextureParameterValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMaterialInstanceDynamic_K2_GetVectorParameterValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMaterialInstanceDynamic_K2_InterpolateMaterialInstanceParams();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMaterialInstanceDynamic_SetScalarParameterValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMaterialInstanceDynamic_SetTextureParameterValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMaterialInstanceDynamic_SetVectorParameterValue();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialInstanceDynamic_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialInstanceDynamic();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCollectionVectorParameter();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCollectionScalarParameter();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCollectionParameterBase();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialParameterCollection_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialParameterCollection();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialParameterCollectionInstance_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialParameterCollectionInstance();
	ENGINE_API class UClass* Z_Construct_UClass_UMatineeInterface_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMatineeInterface();
	ENGINE_API class UClass* Z_Construct_UClass_UNavArea_Default_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavArea_Default();
	ENGINE_API class UClass* Z_Construct_UClass_UNavArea_LowHeight_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavArea_LowHeight();
	ENGINE_API class UClass* Z_Construct_UClass_UNavArea_Null_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavArea_Null();
	ENGINE_API class UClass* Z_Construct_UClass_UNavArea_Obstacle_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavArea_Obstacle();
	ENGINE_API class UClass* Z_Construct_UClass_UNavAreaMeta_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavAreaMeta();
	ENGINE_API class UClass* Z_Construct_UClass_UNavAreaMeta_SwitchByAgent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavAreaMeta_SwitchByAgent();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNavCollisionBox();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNavCollisionCylinder();
	ENGINE_API class UClass* Z_Construct_UClass_UNavCollision_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavCollision();
	ENGINE_API class UClass* Z_Construct_UClass_UNavigationDataChunk_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavigationDataChunk();
	ENGINE_API class UClass* Z_Construct_UClass_URecastNavMeshDataChunk_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_URecastNavMeshDataChunk();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_OnNavigationPathUpdated__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationPath_EnableDebugDrawing();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationPath_EnableRecalculationOnInvalidation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationPath_GetDebugString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationPath_GetPathCost();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationPath_GetPathLength();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationPath_IsPartial();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationPath_IsStringPulled();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationPath_IsValid();
	ENGINE_API class UClass* Z_Construct_UClass_UNavigationPath_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavigationPath();
	ENGINE_API class UClass* Z_Construct_UClass_UNavigationPathGenerator_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavigationPathGenerator();
	ENGINE_API class UClass* Z_Construct_UClass_URecastFilter_UseDefaultArea_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_URecastFilter_UseDefaultArea();
	ENGINE_API class UClass* Z_Construct_UClass_UNavLinkTrivial_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavLinkTrivial();
	ENGINE_API class UClass* Z_Construct_UClass_UNavNodeInterface_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavNodeInterface();
	ENGINE_API class UClass* Z_Construct_UClass_UNetDriver_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNetDriver();
	ENGINE_API class UClass* Z_Construct_UClass_UDemoNetDriver_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDemoNetDriver();
	ENGINE_API class UClass* Z_Construct_UClass_UNiagaraEffectRendererProperties_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNiagaraEffectRendererProperties();
	ENGINE_API class UClass* Z_Construct_UClass_UNiagaraRibbonRendererProperties_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNiagaraRibbonRendererProperties();
	ENGINE_API class UClass* Z_Construct_UClass_UNiagaraSpriteRendererProperties_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNiagaraSpriteRendererProperties();
	ENGINE_API class UClass* Z_Construct_UClass_UObjectLibrary_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UObjectLibrary();
	ENGINE_API class UClass* Z_Construct_UClass_UObjectReferencer_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UObjectReferencer();
	ENGINE_API class UClass* Z_Construct_UClass_UOnlineSession_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UOnlineSession();
	ENGINE_API class UClass* Z_Construct_UClass_UPackageMapClient_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPackageMapClient();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EEmitterRenderMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EParticleSubUVInterpMethod();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EParticleBurstMethod();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FParticleBurst();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleEmitter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleEmitter();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EParticleScreenAlignment();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleSpriteEmitter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleSpriteEmitter();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleLODLevel_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleLODLevel();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EParticleSourceSelectionMethod();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EModuleType();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FParticleRandomSeedInfo();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FParticleCurvePair();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModule_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModule();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAccelerationBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAccelerationBase();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAcceleration_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAcceleration();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAccelerationConstant_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAccelerationConstant();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAccelerationDrag_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAccelerationDrag();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAccelerationDragScaleOverLife_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAccelerationDragScaleOverLife();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAccelerationOverLifetime_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAccelerationOverLifetime();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAttractorBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAttractorBase();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAttractorLine_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAttractorLine();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAttractorParticleSelectionMethod();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAttractorParticle_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAttractorParticle();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAttractorPoint_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAttractorPoint();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAttractorPointGravity_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAttractorPointGravity();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_Beam2SourceTargetTangentMethod();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_Beam2SourceTargetMethod();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleBeamBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleBeamBase();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_BeamModifierType();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBeamModifierOptions();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleBeamModifier_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleBeamModifier();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleBeamNoise_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleBeamNoise();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleBeamSource_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleBeamSource();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleBeamTarget_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleBeamTarget();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleCameraBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleCameraBase();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EParticleCameraOffsetUpdateMethod();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleCameraOffset_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleCameraOffset();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EParticleCollisionComplete();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleCollisionBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleCollisionBase();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleCollision_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleCollision();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EParticleCollisionResponse();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleCollisionGPU_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleCollisionGPU();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleColorBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleColorBase();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleColor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleColor();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleColor_Seeded_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleColor_Seeded();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleColorOverLife_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleColorOverLife();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleColorScaleOverLife_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleColorScaleOverLife();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleEventBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleEventBase();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FParticleEvent_GenerateInfo();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleEventGenerator_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleEventGenerator();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleEventReceiverBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleEventReceiverBase();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleEventReceiverKillParticles_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleEventReceiverKillParticles();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleEventReceiverSpawn_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleEventReceiverSpawn();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleKillBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleKillBase();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleKillBox_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleKillBox();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleKillHeight_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleKillHeight();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLifetimeBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLifetimeBase();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLifetime_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLifetime();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLifetime_Seeded_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLifetime_Seeded();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLightBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLightBase();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLight_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLight();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLight_Seeded_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLight_Seeded();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationBase();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocation_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocation();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocation_Seeded_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocation_Seeded();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationWorldOffset_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationWorldOffset();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationWorldOffset_Seeded_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationWorldOffset_Seeded();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ELocationBoneSocketSelectionMethod();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ELocationBoneSocketSource();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FLocationBoneSocketInfo();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationBoneSocket_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationBoneSocket();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationDirect_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationDirect();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ELocationEmitterSelectionMethod();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationEmitter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationEmitter();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationEmitterDirect_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationEmitterDirect();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationPrimitiveBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationPrimitiveBase();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_CylinderHeightAxis();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationPrimitiveCylinder_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationPrimitiveCylinder();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationPrimitiveCylinder_Seeded_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationPrimitiveCylinder_Seeded();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationPrimitiveSphere_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationPrimitiveSphere();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationPrimitiveSphere_Seeded_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationPrimitiveSphere_Seeded();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationPrimitiveTriangle_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationPrimitiveTriangle();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ELocationSkelVertSurfaceSource();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationSkelVertSurface_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationSkelVertSurface();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModulePivotOffset_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModulePivotOffset();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSourceMovement_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSourceMovement();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleMaterialBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleMaterialBase();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleMeshMaterial_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleMeshMaterial();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleOrbitBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleOrbitBase();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EOrbitChainMode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FOrbitOptions();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleOrbit_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleOrbit();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleOrientationBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleOrientationBase();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EParticleAxisLock();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleOrientationAxisLock_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleOrientationAxisLock();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleParameterBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleParameterBase();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EEmitterDynamicParameterValue();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FEmitterDynamicParameter();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleParameterDynamic_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleParameterDynamic();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleParameterDynamic_Seeded_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleParameterDynamic_Seeded();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EEmitterNormalsMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EParticleSortMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EParticleUVFlipMode();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleRequired_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleRequired();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleRotationBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleRotationBase();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleMeshRotation_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleMeshRotation();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleMeshRotation_Seeded_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleMeshRotation_Seeded();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleRotation_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleRotation();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleRotation_Seeded_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleRotation_Seeded();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleRotationOverLifetime_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleRotationOverLifetime();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleRotationRateBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleRotationRateBase();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleMeshRotationRate_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleMeshRotationRate();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleRotationRate_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleRotationRate();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleMeshRotationRate_Seeded_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleMeshRotationRate_Seeded();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleMeshRotationRateMultiplyLife_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleMeshRotationRateMultiplyLife();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleMeshRotationRateOverLife_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleMeshRotationRateOverLife();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleRotationRate_Seeded_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleRotationRate_Seeded();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleRotationRateMultiplyLife_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleRotationRateMultiplyLife();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSizeBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSizeBase();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSize_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSize();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSize_Seeded_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSize_Seeded();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSizeMultiplyLife_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSizeMultiplyLife();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSizeScale_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSizeScale();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSizeScaleBySpeed_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSizeScaleBySpeed();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSpawnBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSpawnBase();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSpawn_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSpawn();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSpawnPerUnit_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSpawnPerUnit();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSubUVBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSubUVBase();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSubUV_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSubUV();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSubUVMovie_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSubUVMovie();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleTrailBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleTrailBase();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETrail2SourceMethod();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleTrailSource_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleTrailSource();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleTypeDataBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleTypeDataBase();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleTypeDataAnimTrail_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleTypeDataAnimTrail();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EBeamTaperMethod();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EBeam2Method();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBeamTargetData();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleTypeDataBeam2_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleTypeDataBeam2();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FGPUSpriteResourceData();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FGPUSpriteEmitterInfo();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FGPUSpriteLocalVectorFieldInfo();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleTypeDataGpu_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleTypeDataGpu();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMeshCameraFacingOptions();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMeshCameraFacingUpAxis();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMeshScreenAlignment();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleTypeDataMesh_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleTypeDataMesh();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETrailsRenderAxisOption();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleTypeDataRibbon_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleTypeDataRibbon();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVectorFieldBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVectorFieldBase();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVectorFieldGlobal_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVectorFieldGlobal();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVectorFieldLocal_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVectorFieldLocal();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVectorFieldRotation_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVectorFieldRotation();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVectorFieldRotationRate_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVectorFieldRotationRate();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVectorFieldScale_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVectorFieldScale();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVectorFieldScaleOverLife_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVectorFieldScaleOverLife();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVelocityBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVelocityBase();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVelocity_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVelocity();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVelocity_Seeded_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVelocity_Seeded();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVelocityCone_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVelocityCone();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVelocityInheritParent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVelocityInheritParent();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVelocityOverLifetime_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVelocityOverLifetime();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleEventSendToGame_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleEventSendToGame();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FParticleSystemReplayFrame();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FParticleEmitterReplayFrame();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleSystemReplay_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleSystemReplay();
	ENGINE_API class UClass* Z_Construct_UClass_UDemoPendingNetGame_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDemoPendingNetGame();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTireFrictionScalePair();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicalMaterial_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicalMaterial();
	ENGINE_API class UClass* Z_Construct_UClass_UDEPRECATED_PhysicalMaterialPropertyBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDEPRECATED_PhysicalMaterialPropertyBase();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicsAsset_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicsAsset();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicsCollisionHandler_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicsCollisionHandler();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicsConstraintTemplate_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicsConstraintTemplate();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicsSerializer_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicsSerializer();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_PlatformInterfaceDelegate__DelegateSignature();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EPlatformInterfaceDataType();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDelegateArray();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPlatformInterfaceDelegateResult();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPlatformInterfaceData();
	ENGINE_API class UClass* Z_Construct_UClass_UPlatformInterfaceBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPlatformInterfaceBase();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ECloudStorageDelegate();
	ENGINE_API class UClass* Z_Construct_UClass_UCloudStorageBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCloudStorageBase();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_OnUserClosedAdvertisement__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_OnUserClickedBanner__DelegateSignature();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAdManagerDelegate();
	ENGINE_API class UClass* Z_Construct_UClass_UInGameAdManager_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInGameAdManager();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMicroTransactionResult();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMicroTransactionDelegate();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPurchaseInfo();
	ENGINE_API class UClass* Z_Construct_UClass_UMicroTransactionBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMicroTransactionBase();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETwitterIntegrationDelegate();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETwitterRequestMethod();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTwitterIntegrationBase_AuthorizeAccounts();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTwitterIntegrationBase_CanShowTweetUI();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTwitterIntegrationBase_GetAccountName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTwitterIntegrationBase_GetNumAccounts();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTwitterIntegrationBase_Init();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTwitterIntegrationBase_ShowTweetUI();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTwitterIntegrationBase_TwitterRequest();
	ENGINE_API class UClass* Z_Construct_UClass_UTwitterIntegrationBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UTwitterIntegrationBase();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPlatformInterfaceWebResponse_GetHeader();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPlatformInterfaceWebResponse_GetHeaderValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPlatformInterfaceWebResponse_GetNumHeaders();
	ENGINE_API class UClass* Z_Construct_UClass_UPlatformInterfaceWebResponse_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPlatformInterfaceWebResponse();
	ENGINE_API class UClass* Z_Construct_UClass_UPlayer_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPlayer();
	ENGINE_API class UClass* Z_Construct_UClass_ULocalPlayer_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ULocalPlayer();
	ENGINE_API class UClass* Z_Construct_UClass_UNetConnection_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNetConnection();
	ENGINE_API class UClass* Z_Construct_UClass_UChildConnection_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UChildConnection();
	ENGINE_API class UClass* Z_Construct_UClass_UDemoNetConnection_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDemoNetConnection();
	ENGINE_API class UClass* Z_Construct_UClass_UPolys_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPolys();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EReporterLineStyle();
	ENGINE_API class UClass* Z_Construct_UClass_UReporterBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UReporterBase();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ELegendPosition();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EGraphDataStyle();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EGraphAxisStyle();
	ENGINE_API class UClass* Z_Construct_UClass_UReporterGraph_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UReporterGraph();
	ENGINE_API class UClass* Z_Construct_UClass_UReverbEffect_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UReverbEffect();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EConstraintTransform();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EControlConstraint();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTransformBase();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTransformBaseConstraint();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRigTransformConstraint();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNode();
	ENGINE_API class UClass* Z_Construct_UClass_URig_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_URig();
	ENGINE_API class UClass* Z_Construct_UClass_USaveGame_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USaveGame();
	ENGINE_API class UClass* Z_Construct_UClass_UScriptViewportClient_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UScriptViewportClient();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDebugDisplayProperty();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameViewportClient_SetConsoleTarget();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameViewportClient_ShowTitleSafeArea();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameViewportClient_SSSwapControllers();
	ENGINE_API class UClass* Z_Construct_UClass_UGameViewportClient_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UGameViewportClient();
	ENGINE_API class UClass* Z_Construct_UClass_USimpleConstructionScript_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USimpleConstructionScript();
	ENGINE_API class UClass* Z_Construct_UClass_USCS_Node_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USCS_Node();
	ENGINE_API class UClass* Z_Construct_UClass_USelection_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USelection();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EImpactDamageOverride();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDestructibleParameters();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDestructibleSpecialHierarchyDepths();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDestructibleAdvancedParameters();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDestructibleDebrisParameters();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDestructibleDamageParameters();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDestructibleParametersFlag();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDestructibleDepthParameters();
	ENGINE_API class UClass* Z_Construct_UClass_UDestructibleMesh_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDestructibleMesh();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshSocket_GetSocketLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshSocket_InitializeSocketFromLocation();
	ENGINE_API class UClass* Z_Construct_UClass_USkeletalMeshSocket_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USkeletalMeshSocket();
	ENGINE_API class UClass* Z_Construct_UClass_USlateBrushAsset_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USlateBrushAsset();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMaxConcurrentResolutionRule();
	ENGINE_API class UClass* Z_Construct_UClass_USoundBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundBase();
	ENGINE_API class UClass* Z_Construct_UClass_UDialogueSoundWaveProxy_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDialogueSoundWaveProxy();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSoundNodeEditorData();
	ENGINE_API class UClass* Z_Construct_UClass_USoundCue_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundCue();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESoundGroup();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSoundGroup();
	ENGINE_API class UClass* Z_Construct_UClass_USoundGroups_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundGroups();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EDecompressionType();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FStreamedAudioPlatformData();
	ENGINE_API class UClass* Z_Construct_UClass_USoundWave_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundWave();
	ENGINE_API class UClass* Z_Construct_UClass_USoundWaveProcedural_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundWaveProcedural();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAudioOutputTarget();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPassiveSoundMixModifier();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSoundClassProperties();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSoundClassEditorData();
	ENGINE_API class UClass* Z_Construct_UClass_USoundClass_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundClass();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSoundClassAdjuster();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAudioEQEffect();
	ENGINE_API class UClass* Z_Construct_UClass_USoundMix_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundMix();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNode_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNode();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeAssetReferencer_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeAssetReferencer();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeWavePlayer_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeWavePlayer();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeAttenuation_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeAttenuation();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeBranch_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeBranch();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeConcatenator_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeConcatenator();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeDelay_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeDelay();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeDialoguePlayer_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeDialoguePlayer();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDistanceDatum();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeDistanceCrossFade_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeDistanceCrossFade();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeParamCrossFade_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeParamCrossFade();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeDoppler_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeDoppler();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeEnveloper_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeEnveloper();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeGroupControl_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeGroupControl();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeLooping_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeLooping();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeMature_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeMature();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeMixer_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeMixer();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeModulator_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeModulator();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ModulationParamMode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FModulatorContinuousParams();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeModulatorContinuous_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeModulatorContinuous();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeOscillator_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeOscillator();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeQualityLevel_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeQualityLevel();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeRandom_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeRandom();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeSoundClass_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeSoundClass();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeSwitch_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeSwitch();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeWaveParam_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeWaveParam();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EOptimizationType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EImportanceLevel();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ENormalMode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAssetEditorOrbitCameraPosition();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMeshSectionInfoMap();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMeshSectionInfo();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FStaticMeshSourceModel();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FStaticMeshOptimizationSettings();
	ENGINE_API class UFunction* Z_Construct_UFunction_UStaticMesh_GetBoundingBox();
	ENGINE_API class UClass* Z_Construct_UClass_UStaticMesh_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UStaticMesh();
	ENGINE_API class UClass* Z_Construct_UClass_UStaticMeshSocket_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UStaticMeshSocket();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSubsurfaceProfileStruct();
	ENGINE_API class UClass* Z_Construct_UClass_USubsurfaceProfile_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USubsurfaceProfile();
	ENGINE_API class UClass* Z_Construct_UClass_UTextPropertyTestObject_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UTextPropertyTestObject();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETextureSourceFormat();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETextureSourceArtType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETextureMipCount();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ECompositeTextureMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_TextureAddress();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_TextureFilter();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_TextureCompressionSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTexturePlatformData();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTextureSource();
	ENGINE_API class UClass* Z_Construct_UClass_UTexture_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UTexture();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTexture2D_Blueprint_GetSizeX();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTexture2D_Blueprint_GetSizeY();
	ENGINE_API class UClass* Z_Construct_UClass_UTexture2D_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UTexture2D();
	ENGINE_API class UClass* Z_Construct_UClass_ULightMapTexture2D_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ULightMapTexture2D();
	ENGINE_API class UClass* Z_Construct_UClass_UShadowMapTexture2D_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UShadowMapTexture2D();
	ENGINE_API class UClass* Z_Construct_UClass_UTextureLightProfile_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UTextureLightProfile();
	ENGINE_API class UClass* Z_Construct_UClass_UTexture2DDynamic_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UTexture2DDynamic();
	ENGINE_API class UClass* Z_Construct_UClass_UTextureCube_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UTextureCube();
	ENGINE_API class UClass* Z_Construct_UClass_UTextureRenderTarget_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UTextureRenderTarget();
	ENGINE_API class UClass* Z_Construct_UClass_UTextureRenderTarget2D_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UTextureRenderTarget2D();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_OnCanvasRenderTargetUpdate__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCanvasRenderTarget2D_CreateCanvasRenderTarget2D();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCanvasRenderTarget2D_GetSize();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCanvasRenderTarget2D_ReceiveUpdate();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCanvasRenderTarget2D_UpdateResource();
	ENGINE_API class UClass* Z_Construct_UClass_UCanvasRenderTarget2D_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCanvasRenderTarget2D();
	ENGINE_API class UClass* Z_Construct_UClass_UTextureRenderTargetCube_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UTextureRenderTargetCube();
	ENGINE_API class UClass* Z_Construct_UClass_UThumbnailInfo_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UThumbnailInfo();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTTLinearColorTrack();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTTVectorTrack();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTTFloatTrack();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTTEventTrack();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTTTrackBase();
	ENGINE_API class UClass* Z_Construct_UClass_UTimelineTemplate_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UTimelineTemplate();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTouchInputControl();
	ENGINE_API class UClass* Z_Construct_UClass_UTouchInterface_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UTouchInterface();
	ENGINE_API class UClass* Z_Construct_UClass_UUserDefinedEnum_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UUserDefinedEnum();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EUserDefinedStructureStatus();
	ENGINE_API class UClass* Z_Construct_UClass_UUserDefinedStruct_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UUserDefinedStruct();
	ENGINE_API class UClass* Z_Construct_UClass_UVectorField_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UVectorField();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EVectorFieldConstructionOp();
	ENGINE_API class UClass* Z_Construct_UClass_UVectorFieldAnimated_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UVectorFieldAnimated();
	ENGINE_API class UClass* Z_Construct_UClass_UVectorFieldStatic_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UVectorFieldStatic();
	ENGINE_API class UFunction* Z_Construct_UFunction_UVehicleWheel_GetRotationAngle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UVehicleWheel_GetSteerAngle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UVehicleWheel_GetSuspensionOffset();
	ENGINE_API class UClass* Z_Construct_UClass_UVehicleWheel_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UVehicleWheel();
	ENGINE_API class UClass* Z_Construct_UClass_UVertexAnimBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UVertexAnimBase();
	ENGINE_API class UClass* Z_Construct_UClass_UMorphTarget_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMorphTarget();
	ENGINE_API class UClass* Z_Construct_UClass_UVertexAnimation_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UVertexAnimation();
	ENGINE_API class UClass* Z_Construct_UClass_UVisualLoggerAutomationTests_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UVisualLoggerAutomationTests();
	ENGINE_API class UClass* Z_Construct_UClass_UWorldComposition_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UWorldComposition();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EPinHidingMode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_Base();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FExposedValueHandler();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FComponentSpacePoseLink();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPoseLink();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPoseLinkBase();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FInputScaleBias();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_ApplyAdditive();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_AssetPlayerBase();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_BlendListBase();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_BlendListByBool();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_BlendListByEnum();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_BlendListByInt();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_BlendSpacePlayer();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_BlendSpaceEvaluator();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_LayeredBoneBlend();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ERefPoseType();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_MeshSpaceRefPose();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_RefPose();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_Root();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_RotateRootBone();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_RotationOffsetBlendSpace();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_SaveCachedPose();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_SequenceEvaluator();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_SequencePlayer();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_Slot();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_StateMachine();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimationPotentialTransition();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimationActiveTransitionEntry();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EEvaluatorMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EEvaluatorDataSource();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_TransitionPoseEvaluator();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_TransitionResult();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimationNode_TwoWayBlend();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_UseCachedPose();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_ConvertLocalToComponentSpace();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_ConvertComponentToLocalSpace();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ECameraAlphaBlendMode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDummySpacerCameraTypes();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FStreamableManager();
	ENGINE_API class UPackage* Z_Construct_UPackage_Engine();
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleSize_Seeded);
	UClass* Z_Construct_UClass_UParticleModuleSizeMultiplyLife_NoRegister()
	{
		return UParticleModuleSizeMultiplyLife::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleSizeMultiplyLife()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleSizeBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleSizeMultiplyLife::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(MultiplyZ, UParticleModuleSizeMultiplyLife, uint8);
				UProperty* NewProp_MultiplyZ = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MultiplyZ"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(MultiplyZ, UParticleModuleSizeMultiplyLife), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(MultiplyZ, UParticleModuleSizeMultiplyLife), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(MultiplyY, UParticleModuleSizeMultiplyLife, uint8);
				UProperty* NewProp_MultiplyY = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MultiplyY"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(MultiplyY, UParticleModuleSizeMultiplyLife), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(MultiplyY, UParticleModuleSizeMultiplyLife), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(MultiplyX, UParticleModuleSizeMultiplyLife, uint8);
				UProperty* NewProp_MultiplyX = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MultiplyX"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(MultiplyX, UParticleModuleSizeMultiplyLife), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(MultiplyX, UParticleModuleSizeMultiplyLife), sizeof(uint8), false);
				UProperty* NewProp_LifeMultiplier = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LifeMultiplier"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LifeMultiplier, UParticleModuleSizeMultiplyLife), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Size By Life"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Size/ParticleModuleSizeMultiplyLife.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Size/ParticleModuleSizeMultiplyLife.h"));
				MetaData->SetValue(NewProp_MultiplyZ, TEXT("Category"), TEXT("Size"));
				MetaData->SetValue(NewProp_MultiplyZ, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Size/ParticleModuleSizeMultiplyLife.h"));
				MetaData->SetValue(NewProp_MultiplyZ, TEXT("ToolTip"), TEXT("If true, the Z-component of the scale factor will be applied to the particle size Z-component.\nIf false, the Z-component is left unaltered."));
				MetaData->SetValue(NewProp_MultiplyY, TEXT("Category"), TEXT("Size"));
				MetaData->SetValue(NewProp_MultiplyY, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Size/ParticleModuleSizeMultiplyLife.h"));
				MetaData->SetValue(NewProp_MultiplyY, TEXT("ToolTip"), TEXT("If true, the Y-component of the scale factor will be applied to the particle size Y-component.\nIf false, the Y-component is left unaltered."));
				MetaData->SetValue(NewProp_MultiplyX, TEXT("Category"), TEXT("Size"));
				MetaData->SetValue(NewProp_MultiplyX, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Size/ParticleModuleSizeMultiplyLife.h"));
				MetaData->SetValue(NewProp_MultiplyX, TEXT("ToolTip"), TEXT("If true, the X-component of the scale factor will be applied to the particle size X-component.\nIf false, the X-component is left unaltered."));
				MetaData->SetValue(NewProp_LifeMultiplier, TEXT("Category"), TEXT("Size"));
				MetaData->SetValue(NewProp_LifeMultiplier, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Size/ParticleModuleSizeMultiplyLife.h"));
				MetaData->SetValue(NewProp_LifeMultiplier, TEXT("ToolTip"), TEXT("The scale factor for the size that should be used for a particle.\nThe value is retrieved using the RelativeTime of the particle during its update."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleSizeMultiplyLife(Z_Construct_UClass_UParticleModuleSizeMultiplyLife, TEXT("UParticleModuleSizeMultiplyLife"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleSizeMultiplyLife);
	UClass* Z_Construct_UClass_UParticleModuleSizeScale_NoRegister()
	{
		return UParticleModuleSizeScale::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleSizeScale()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleSizeBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleSizeScale::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(EnableZ, UParticleModuleSizeScale, uint8);
				UProperty* NewProp_EnableZ = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EnableZ"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(EnableZ, UParticleModuleSizeScale), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(EnableZ, UParticleModuleSizeScale), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(EnableY, UParticleModuleSizeScale, uint8);
				UProperty* NewProp_EnableY = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EnableY"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(EnableY, UParticleModuleSizeScale), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(EnableY, UParticleModuleSizeScale), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(EnableX, UParticleModuleSizeScale, uint8);
				UProperty* NewProp_EnableX = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EnableX"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(EnableX, UParticleModuleSizeScale), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(EnableX, UParticleModuleSizeScale), sizeof(uint8), false);
				UProperty* NewProp_SizeScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SizeScale"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SizeScale, UParticleModuleSizeScale), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Size Scale"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Size/ParticleModuleSizeScale.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Size/ParticleModuleSizeScale.h"));
				MetaData->SetValue(NewProp_EnableZ, TEXT("Category"), TEXT("ParticleModuleSizeScale"));
				MetaData->SetValue(NewProp_EnableZ, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Size/ParticleModuleSizeScale.h"));
				MetaData->SetValue(NewProp_EnableZ, TEXT("ToolTip"), TEXT("Ignored"));
				MetaData->SetValue(NewProp_EnableY, TEXT("Category"), TEXT("ParticleModuleSizeScale"));
				MetaData->SetValue(NewProp_EnableY, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Size/ParticleModuleSizeScale.h"));
				MetaData->SetValue(NewProp_EnableY, TEXT("ToolTip"), TEXT("Ignored"));
				MetaData->SetValue(NewProp_EnableX, TEXT("Category"), TEXT("ParticleModuleSizeScale"));
				MetaData->SetValue(NewProp_EnableX, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Size/ParticleModuleSizeScale.h"));
				MetaData->SetValue(NewProp_EnableX, TEXT("ToolTip"), TEXT("Ignored"));
				MetaData->SetValue(NewProp_SizeScale, TEXT("Category"), TEXT("ParticleModuleSizeScale"));
				MetaData->SetValue(NewProp_SizeScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Size/ParticleModuleSizeScale.h"));
				MetaData->SetValue(NewProp_SizeScale, TEXT("ToolTip"), TEXT("The amount the BaseSize should be scaled before being used as the size of the particle.\nThe value is retrieved using the RelativeTime of the particle during its update.\nNOTE: this module overrides any size adjustments made prior to this module in that frame."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleSizeScale(Z_Construct_UClass_UParticleModuleSizeScale, TEXT("UParticleModuleSizeScale"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleSizeScale);
	UClass* Z_Construct_UClass_UParticleModuleSizeScaleBySpeed_NoRegister()
	{
		return UParticleModuleSizeScaleBySpeed::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleSizeScaleBySpeed()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleSizeBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleSizeScaleBySpeed::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20001080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_MaxScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxScale"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MaxScale, UParticleModuleSizeScaleBySpeed), 0x0000000000000001, Z_Construct_UScriptStruct_FVector2D());
				UProperty* NewProp_SpeedScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SpeedScale"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SpeedScale, UParticleModuleSizeScaleBySpeed), 0x0000000000000001, Z_Construct_UScriptStruct_FVector2D());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Size By Speed"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Size/ParticleModuleSizeScaleBySpeed.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Size/ParticleModuleSizeScaleBySpeed.h"));
				MetaData->SetValue(NewProp_MaxScale, TEXT("Category"), TEXT("ParticleModuleSizeScaleBySpeed"));
				MetaData->SetValue(NewProp_MaxScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Size/ParticleModuleSizeScaleBySpeed.h"));
				MetaData->SetValue(NewProp_MaxScale, TEXT("ToolTip"), TEXT("The maximum amount by which to scale a particle in each dimension."));
				MetaData->SetValue(NewProp_SpeedScale, TEXT("Category"), TEXT("ParticleModuleSizeScaleBySpeed"));
				MetaData->SetValue(NewProp_SpeedScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Size/ParticleModuleSizeScaleBySpeed.h"));
				MetaData->SetValue(NewProp_SpeedScale, TEXT("ToolTip"), TEXT("By how much speed affects the size of the particle in each dimension."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleSizeScaleBySpeed(Z_Construct_UClass_UParticleModuleSizeScaleBySpeed, TEXT("UParticleModuleSizeScaleBySpeed"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleSizeScaleBySpeed);
	UClass* Z_Construct_UClass_UParticleModuleSpawnBase_NoRegister()
	{
		return UParticleModuleSpawnBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleSpawnBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModule();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleSpawnBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20001081;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bProcessBurstList, UParticleModuleSpawnBase, uint8);
				UProperty* NewProp_bProcessBurstList = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bProcessBurstList"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bProcessBurstList, UParticleModuleSpawnBase), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bProcessBurstList, UParticleModuleSpawnBase), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bProcessSpawnRate, UParticleModuleSpawnBase, uint8);
				UProperty* NewProp_bProcessSpawnRate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bProcessSpawnRate"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bProcessSpawnRate, UParticleModuleSpawnBase), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bProcessSpawnRate, UParticleModuleSpawnBase), sizeof(uint8), false);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Spawn"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Spawn/ParticleModuleSpawnBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Spawn/ParticleModuleSpawnBase.h"));
				MetaData->SetValue(NewProp_bProcessBurstList, TEXT("Category"), TEXT("Burst"));
				MetaData->SetValue(NewProp_bProcessBurstList, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Spawn/ParticleModuleSpawnBase.h"));
				MetaData->SetValue(NewProp_bProcessBurstList, TEXT("ToolTip"), TEXT("If true, the BurstList of the SpawnModule of the emitter will be processed.\nIf mutliple Spawn modules are 'stacked' in an emitter, if ANY of them\nhave this set to false, it will not process the SpawnModule BurstList."));
				MetaData->SetValue(NewProp_bProcessSpawnRate, TEXT("Category"), TEXT("Spawn"));
				MetaData->SetValue(NewProp_bProcessSpawnRate, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Spawn/ParticleModuleSpawnBase.h"));
				MetaData->SetValue(NewProp_bProcessSpawnRate, TEXT("ToolTip"), TEXT("If true, the SpawnRate of the SpawnModule of the emitter will be processed.\nIf mutliple Spawn modules are 'stacked' in an emitter, if ANY of them\nhave this set to false, it will not process the SpawnModule SpawnRate."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleSpawnBase(Z_Construct_UClass_UParticleModuleSpawnBase, TEXT("UParticleModuleSpawnBase"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleSpawnBase);
	UClass* Z_Construct_UClass_UParticleModuleSpawn_NoRegister()
	{
		return UParticleModuleSpawn::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleSpawn()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleSpawnBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleSpawn::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bApplyGlobalSpawnRateScale, UParticleModuleSpawn, uint8);
				UProperty* NewProp_bApplyGlobalSpawnRateScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bApplyGlobalSpawnRateScale"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bApplyGlobalSpawnRateScale, UParticleModuleSpawn), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bApplyGlobalSpawnRateScale, UParticleModuleSpawn), sizeof(uint8), false);
				UProperty* NewProp_BurstScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BurstScale"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(BurstScale, UParticleModuleSpawn), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				UProperty* NewProp_BurstList = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BurstList"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(BurstList, UParticleModuleSpawn), 0x0000000002000009);
				UProperty* NewProp_BurstList_Inner = new(EC_InternalUseOnlyConstructor, NewProp_BurstList, TEXT("BurstList"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000008, Z_Construct_UScriptStruct_FParticleBurst());
				UProperty* NewProp_ParticleBurstMethod = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ParticleBurstMethod"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(ParticleBurstMethod, UParticleModuleSpawn), 0x0000000000000001, Z_Construct_UEnum_Engine_EParticleBurstMethod());
				UProperty* NewProp_RateScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RateScale"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(RateScale, UParticleModuleSpawn), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				UProperty* NewProp_Rate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Rate"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Rate, UParticleModuleSpawn), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Spawn"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object ParticleModuleSpawnBase Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Spawn/ParticleModuleSpawn.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Spawn/ParticleModuleSpawn.h"));
				MetaData->SetValue(NewProp_bApplyGlobalSpawnRateScale, TEXT("Category"), TEXT("Spawn"));
				MetaData->SetValue(NewProp_bApplyGlobalSpawnRateScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Spawn/ParticleModuleSpawn.h"));
				MetaData->SetValue(NewProp_bApplyGlobalSpawnRateScale, TEXT("ToolTip"), TEXT("If true, the SpawnRate will be scaled by the global CVar r.EmitterSpawnRateScale"));
				MetaData->SetValue(NewProp_BurstScale, TEXT("Category"), TEXT("Burst"));
				MetaData->SetValue(NewProp_BurstScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Spawn/ParticleModuleSpawn.h"));
				MetaData->SetValue(NewProp_BurstScale, TEXT("ToolTip"), TEXT("Scale all burst entries by this amount."));
				MetaData->SetValue(NewProp_BurstList, TEXT("Category"), TEXT("Burst"));
				MetaData->SetValue(NewProp_BurstList, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Spawn/ParticleModuleSpawn.h"));
				MetaData->SetValue(NewProp_BurstList, TEXT("ToolTip"), TEXT("The array of burst entries."));
				MetaData->SetValue(NewProp_ParticleBurstMethod, TEXT("Category"), TEXT("Burst"));
				MetaData->SetValue(NewProp_ParticleBurstMethod, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Spawn/ParticleModuleSpawn.h"));
				MetaData->SetValue(NewProp_ParticleBurstMethod, TEXT("ToolTip"), TEXT("The method to utilize when burst-emitting particles."));
				MetaData->SetValue(NewProp_RateScale, TEXT("Category"), TEXT("Spawn"));
				MetaData->SetValue(NewProp_RateScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Spawn/ParticleModuleSpawn.h"));
				MetaData->SetValue(NewProp_RateScale, TEXT("ToolTip"), TEXT("The scalar to apply to the rate."));
				MetaData->SetValue(NewProp_Rate, TEXT("Category"), TEXT("Spawn"));
				MetaData->SetValue(NewProp_Rate, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Spawn/ParticleModuleSpawn.h"));
				MetaData->SetValue(NewProp_Rate, TEXT("ToolTip"), TEXT("The rate at which to spawn particles."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleSpawn(Z_Construct_UClass_UParticleModuleSpawn, TEXT("UParticleModuleSpawn"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleSpawn);
	UClass* Z_Construct_UClass_UParticleModuleSpawnPerUnit_NoRegister()
	{
		return UParticleModuleSpawnPerUnit::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleSpawnPerUnit()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleSpawnBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleSpawnPerUnit::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20801080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIgnoreMovementAlongZ, UParticleModuleSpawnPerUnit, uint8);
				UProperty* NewProp_bIgnoreMovementAlongZ = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIgnoreMovementAlongZ"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIgnoreMovementAlongZ, UParticleModuleSpawnPerUnit), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bIgnoreMovementAlongZ, UParticleModuleSpawnPerUnit), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIgnoreMovementAlongY, UParticleModuleSpawnPerUnit, uint8);
				UProperty* NewProp_bIgnoreMovementAlongY = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIgnoreMovementAlongY"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIgnoreMovementAlongY, UParticleModuleSpawnPerUnit), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bIgnoreMovementAlongY, UParticleModuleSpawnPerUnit), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIgnoreMovementAlongX, UParticleModuleSpawnPerUnit, uint8);
				UProperty* NewProp_bIgnoreMovementAlongX = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIgnoreMovementAlongX"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIgnoreMovementAlongX, UParticleModuleSpawnPerUnit), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bIgnoreMovementAlongX, UParticleModuleSpawnPerUnit), sizeof(uint8), false);
				UProperty* NewProp_MaxFrameDistance = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxFrameDistance"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MaxFrameDistance, UParticleModuleSpawnPerUnit), 0x0000000000000001);
				UProperty* NewProp_MovementTolerance = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MovementTolerance"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MovementTolerance, UParticleModuleSpawnPerUnit), 0x0000000000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIgnoreSpawnRateWhenMoving, UParticleModuleSpawnPerUnit, uint8);
				UProperty* NewProp_bIgnoreSpawnRateWhenMoving = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIgnoreSpawnRateWhenMoving"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIgnoreSpawnRateWhenMoving, UParticleModuleSpawnPerUnit), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bIgnoreSpawnRateWhenMoving, UParticleModuleSpawnPerUnit), sizeof(uint8), false);
				UProperty* NewProp_SpawnPerUnit = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SpawnPerUnit"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SpawnPerUnit, UParticleModuleSpawnPerUnit), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				UProperty* NewProp_UnitScalar = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UnitScalar"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(UnitScalar, UParticleModuleSpawnPerUnit), 0x0000000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Spawn PerUnit"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Spawn/ParticleModuleSpawnPerUnit.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Spawn/ParticleModuleSpawnPerUnit.h"));
				MetaData->SetValue(NewProp_bIgnoreMovementAlongZ, TEXT("Category"), TEXT("Spawn"));
				MetaData->SetValue(NewProp_bIgnoreMovementAlongZ, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Spawn/ParticleModuleSpawnPerUnit.h"));
				MetaData->SetValue(NewProp_bIgnoreMovementAlongZ, TEXT("ToolTip"), TEXT("If true, ignore the Z-component of the movement"));
				MetaData->SetValue(NewProp_bIgnoreMovementAlongY, TEXT("Category"), TEXT("Spawn"));
				MetaData->SetValue(NewProp_bIgnoreMovementAlongY, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Spawn/ParticleModuleSpawnPerUnit.h"));
				MetaData->SetValue(NewProp_bIgnoreMovementAlongY, TEXT("ToolTip"), TEXT("If true, ignore the Y-component of the movement"));
				MetaData->SetValue(NewProp_bIgnoreMovementAlongX, TEXT("Category"), TEXT("Spawn"));
				MetaData->SetValue(NewProp_bIgnoreMovementAlongX, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Spawn/ParticleModuleSpawnPerUnit.h"));
				MetaData->SetValue(NewProp_bIgnoreMovementAlongX, TEXT("ToolTip"), TEXT("If true, ignore the X-component of the movement"));
				MetaData->SetValue(NewProp_MaxFrameDistance, TEXT("Category"), TEXT("Spawn"));
				MetaData->SetValue(NewProp_MaxFrameDistance, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Spawn/ParticleModuleSpawnPerUnit.h"));
				MetaData->SetValue(NewProp_MaxFrameDistance, TEXT("ToolTip"), TEXT("The maximum valid movement for a single frame.\nIf 0.0, then the check is not performed.\nCurrently, if the distance moved between frames is greater than this\nthen NO particles will be spawned.\nThis is primiarily intended to cover cases where the PSystem is\nattached to teleporting objects."));
				MetaData->SetValue(NewProp_MovementTolerance, TEXT("Category"), TEXT("Spawn"));
				MetaData->SetValue(NewProp_MovementTolerance, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Spawn/ParticleModuleSpawnPerUnit.h"));
				MetaData->SetValue(NewProp_MovementTolerance, TEXT("ToolTip"), TEXT("The tolerance for moving vs. not moving w.r.t. the bIgnoreSpawnRateWhenMoving flag.\nIe, if (DistanceMoved < (UnitScalar x MovementTolerance)) then consider it not moving."));
				MetaData->SetValue(NewProp_bIgnoreSpawnRateWhenMoving, TEXT("Category"), TEXT("Spawn"));
				MetaData->SetValue(NewProp_bIgnoreSpawnRateWhenMoving, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Spawn/ParticleModuleSpawnPerUnit.h"));
				MetaData->SetValue(NewProp_bIgnoreSpawnRateWhenMoving, TEXT("ToolTip"), TEXT("If true, process the default spawn rate when not moving...\nWhen not moving, skip the default spawn rate.\nIf false, return the bProcessSpawnRate setting."));
				MetaData->SetValue(NewProp_SpawnPerUnit, TEXT("Category"), TEXT("Spawn"));
				MetaData->SetValue(NewProp_SpawnPerUnit, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Spawn/ParticleModuleSpawnPerUnit.h"));
				MetaData->SetValue(NewProp_SpawnPerUnit, TEXT("ToolTip"), TEXT("The amount to spawn per meter distribution.\nThe value is retrieved using the EmitterTime."));
				MetaData->SetValue(NewProp_UnitScalar, TEXT("Category"), TEXT("Spawn"));
				MetaData->SetValue(NewProp_UnitScalar, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Spawn/ParticleModuleSpawnPerUnit.h"));
				MetaData->SetValue(NewProp_UnitScalar, TEXT("ToolTip"), TEXT("The scalar to apply to the distance traveled.\nThe value from SpawnPerUnit is divided by this value to give the actual\nnumber of particles per unit."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleSpawnPerUnit(Z_Construct_UClass_UParticleModuleSpawnPerUnit, TEXT("UParticleModuleSpawnPerUnit"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleSpawnPerUnit);
	UClass* Z_Construct_UClass_UParticleModuleSubUVBase_NoRegister()
	{
		return UParticleModuleSubUVBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleSubUVBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModule();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleSubUVBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20001081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("SubUV"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/SubUV/ParticleModuleSubUVBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/SubUV/ParticleModuleSubUVBase.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleSubUVBase(Z_Construct_UClass_UParticleModuleSubUVBase, TEXT("UParticleModuleSubUVBase"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleSubUVBase);
	UClass* Z_Construct_UClass_UParticleModuleSubUV_NoRegister()
	{
		return UParticleModuleSubUV::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleSubUV()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleSubUVBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleSubUV::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseRealTime, UParticleModuleSubUV, uint8);
				UProperty* NewProp_bUseRealTime = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUseRealTime"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseRealTime, UParticleModuleSubUV), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bUseRealTime, UParticleModuleSubUV), sizeof(uint8), false);
				UProperty* NewProp_SubImageIndex = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SubImageIndex"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SubImageIndex, UParticleModuleSubUV), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("SubImage Index"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/SubUV/ParticleModuleSubUV.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/SubUV/ParticleModuleSubUV.h"));
				MetaData->SetValue(NewProp_bUseRealTime, TEXT("Category"), TEXT("Realtime"));
				MetaData->SetValue(NewProp_bUseRealTime, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/SubUV/ParticleModuleSubUV.h"));
				MetaData->SetValue(NewProp_bUseRealTime, TEXT("ToolTip"), TEXT("If true, use *real* time when updating the image index.\nThe movie will update regardless of the slomo settings of the game."));
				MetaData->SetValue(NewProp_SubImageIndex, TEXT("Category"), TEXT("SubUV"));
				MetaData->SetValue(NewProp_SubImageIndex, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/SubUV/ParticleModuleSubUV.h"));
				MetaData->SetValue(NewProp_SubImageIndex, TEXT("ToolTip"), TEXT("The index of the sub-image that should be used for the particle.\nThe value is retrieved using the RelativeTime of the particles."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleSubUV(Z_Construct_UClass_UParticleModuleSubUV, TEXT("UParticleModuleSubUV"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleSubUV);
	UClass* Z_Construct_UClass_UParticleModuleSubUVMovie_NoRegister()
	{
		return UParticleModuleSubUVMovie::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleSubUVMovie()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleSubUV();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleSubUVMovie::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20801080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_StartingFrame = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StartingFrame"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(StartingFrame, UParticleModuleSubUVMovie), 0x0000000000000001);
				UProperty* NewProp_FrameRate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FrameRate"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(FrameRate, UParticleModuleSubUVMovie), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseEmitterTime, UParticleModuleSubUVMovie, uint8);
				UProperty* NewProp_bUseEmitterTime = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUseEmitterTime"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseEmitterTime, UParticleModuleSubUVMovie), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bUseEmitterTime, UParticleModuleSubUVMovie), sizeof(uint8), false);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("SubUV Movie"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object SubUV Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/SubUV/ParticleModuleSubUVMovie.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/SubUV/ParticleModuleSubUVMovie.h"));
				MetaData->SetValue(NewProp_StartingFrame, TEXT("Category"), TEXT("Flipbook"));
				MetaData->SetValue(NewProp_StartingFrame, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/SubUV/ParticleModuleSubUVMovie.h"));
				MetaData->SetValue(NewProp_StartingFrame, TEXT("ToolTip"), TEXT("The starting image index for the SubUV (1 = the first frame).\nAssumes order of Left->Right, Top->Bottom\nIf greater than the last frame, it will clamp to the last one.\nIf 0, then randomly selects a starting frame."));
				MetaData->SetValue(NewProp_FrameRate, TEXT("Category"), TEXT("Flipbook"));
				MetaData->SetValue(NewProp_FrameRate, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/SubUV/ParticleModuleSubUVMovie.h"));
				MetaData->SetValue(NewProp_FrameRate, TEXT("ToolTip"), TEXT("The frame rate the SubUV images should be 'flipped' thru at."));
				MetaData->SetValue(NewProp_bUseEmitterTime, TEXT("Category"), TEXT("Flipbook"));
				MetaData->SetValue(NewProp_bUseEmitterTime, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/SubUV/ParticleModuleSubUVMovie.h"));
				MetaData->SetValue(NewProp_bUseEmitterTime, TEXT("ToolTip"), TEXT("If true, use the emitter time to look up the frame rate.\nIf false (default), use the particle relative time."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleSubUVMovie(Z_Construct_UClass_UParticleModuleSubUVMovie, TEXT("UParticleModuleSubUVMovie"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleSubUVMovie);
	UClass* Z_Construct_UClass_UParticleModuleTrailBase_NoRegister()
	{
		return UParticleModuleTrailBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleTrailBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModule();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleTrailBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20001081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Trail"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Trail/ParticleModuleTrailBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Trail/ParticleModuleTrailBase.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleTrailBase(Z_Construct_UClass_UParticleModuleTrailBase, TEXT("UParticleModuleTrailBase"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleTrailBase);
	UEnum* Z_Construct_UEnum_Engine_ETrail2SourceMethod()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_ETrail2SourceMethod_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ETrail2SourceMethod"), 0, Get_Z_Construct_UEnum_Engine_ETrail2SourceMethod_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ETrail2SourceMethod"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PET2SRCM_Default")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PET2SRCM_Particle")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PET2SRCM_Actor")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PET2SRCM_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Trail/ParticleModuleTrailSource.h"));
			MetaData->SetValue(ReturnEnum, TEXT("PET2SRCM_Actor.ToolTip"), TEXT("Actor          - use the actor as the source.\n    The name of the actor should be set in SourceName."));
			MetaData->SetValue(ReturnEnum, TEXT("PET2SRCM_Default.ToolTip"), TEXT("Default        - use the emitter position.\n    This is the fallback for when other modes can't be resolved."));
			MetaData->SetValue(ReturnEnum, TEXT("PET2SRCM_Particle.ToolTip"), TEXT("Particle       - use the particles from a given emitter in the system.\n    The name of the emitter should be set in SourceName."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_ETrail2SourceMethod_CRC() { return 770366674U; }
	UClass* Z_Construct_UClass_UParticleModuleTrailSource_NoRegister()
	{
		return UParticleModuleTrailSource::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleTrailSource()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleTrailBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleTrailSource::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bInheritRotation, UParticleModuleTrailSource, uint8);
				UProperty* NewProp_bInheritRotation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bInheritRotation"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bInheritRotation, UParticleModuleTrailSource), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bInheritRotation, UParticleModuleTrailSource), sizeof(uint8), false);
				UProperty* NewProp_SelectionMethod = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SelectionMethod"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(SelectionMethod, UParticleModuleTrailSource), 0x0000000000000001, Z_Construct_UEnum_Engine_EParticleSourceSelectionMethod());
				UProperty* NewProp_SourceOffsetDefaults = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SourceOffsetDefaults"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(SourceOffsetDefaults, UParticleModuleTrailSource), 0x0000000000000041);
				UProperty* NewProp_SourceOffsetDefaults_Inner = new(EC_InternalUseOnlyConstructor, NewProp_SourceOffsetDefaults, TEXT("SourceOffsetDefaults"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_SourceOffsetCount = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SourceOffsetCount"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(SourceOffsetCount, UParticleModuleTrailSource), 0x0000000000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLockSourceStength, UParticleModuleTrailSource, uint8);
				UProperty* NewProp_bLockSourceStength = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bLockSourceStength"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLockSourceStength, UParticleModuleTrailSource), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bLockSourceStength, UParticleModuleTrailSource), sizeof(uint8), false);
				UProperty* NewProp_SourceStrength = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SourceStrength"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SourceStrength, UParticleModuleTrailSource), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				UProperty* NewProp_SourceName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SourceName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(SourceName, UParticleModuleTrailSource), 0x0000000000000001);
				UProperty* NewProp_SourceMethod = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SourceMethod"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(SourceMethod, UParticleModuleTrailSource), 0x0000000000000001, Z_Construct_UEnum_Engine_ETrail2SourceMethod());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Source"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Trail/ParticleModuleTrailSource.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Trail/ParticleModuleTrailSource.h"));
				MetaData->SetValue(NewProp_bInheritRotation, TEXT("Category"), TEXT("Source"));
				MetaData->SetValue(NewProp_bInheritRotation, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Trail/ParticleModuleTrailSource.h"));
				MetaData->SetValue(NewProp_bInheritRotation, TEXT("ToolTip"), TEXT("Interhit particle rotation - only valid for SourceMethod of PET2SRCM_Particle."));
				MetaData->SetValue(NewProp_SelectionMethod, TEXT("Category"), TEXT("Source"));
				MetaData->SetValue(NewProp_SelectionMethod, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Trail/ParticleModuleTrailSource.h"));
				MetaData->SetValue(NewProp_SelectionMethod, TEXT("ToolTip"), TEXT("Particle selection method, when using the SourceMethod of Particle."));
				MetaData->SetValue(NewProp_SourceOffsetDefaults, TEXT("Category"), TEXT("Source"));
				MetaData->SetValue(NewProp_SourceOffsetDefaults, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Trail/ParticleModuleTrailSource.h"));
				MetaData->SetValue(NewProp_SourceOffsetDefaults, TEXT("ToolTip"), TEXT("Default offsets from the source(s).\nIf there are < SourceOffsetCount slots, the grabbing of values will simply wrap."));
				MetaData->SetValue(NewProp_SourceOffsetCount, TEXT("Category"), TEXT("Source"));
				MetaData->SetValue(NewProp_SourceOffsetCount, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Trail/ParticleModuleTrailSource.h"));
				MetaData->SetValue(NewProp_SourceOffsetCount, TEXT("ToolTip"), TEXT("SourceOffsetCount\nThe number of source offsets that can be expected to be found on the instance.\nThese must be named\n        TrailSourceOffset#"));
				MetaData->SetValue(NewProp_bLockSourceStength, TEXT("Category"), TEXT("Source"));
				MetaData->SetValue(NewProp_bLockSourceStength, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Trail/ParticleModuleTrailSource.h"));
				MetaData->SetValue(NewProp_bLockSourceStength, TEXT("ToolTip"), TEXT("Whether to lock the source to the life of the particle."));
				MetaData->SetValue(NewProp_SourceStrength, TEXT("Category"), TEXT("Source"));
				MetaData->SetValue(NewProp_SourceStrength, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Trail/ParticleModuleTrailSource.h"));
				MetaData->SetValue(NewProp_SourceStrength, TEXT("ToolTip"), TEXT("The strength of the tangent from the source point for each Trail."));
				MetaData->SetValue(NewProp_SourceName, TEXT("Category"), TEXT("Source"));
				MetaData->SetValue(NewProp_SourceName, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Trail/ParticleModuleTrailSource.h"));
				MetaData->SetValue(NewProp_SourceName, TEXT("ToolTip"), TEXT("The name of the source - either the emitter or Actor."));
				MetaData->SetValue(NewProp_SourceMethod, TEXT("Category"), TEXT("Source"));
				MetaData->SetValue(NewProp_SourceMethod, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Trail/ParticleModuleTrailSource.h"));
				MetaData->SetValue(NewProp_SourceMethod, TEXT("ToolTip"), TEXT("The source method for the trail."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleTrailSource(Z_Construct_UClass_UParticleModuleTrailSource, TEXT("UParticleModuleTrailSource"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleTrailSource);
	UClass* Z_Construct_UClass_UParticleModuleTypeDataBase_NoRegister()
	{
		return UParticleModuleTypeDataBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleTypeDataBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModule();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleTypeDataBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20081081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/TypeData/ParticleModuleTypeDataBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataBase.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleTypeDataBase(Z_Construct_UClass_UParticleModuleTypeDataBase, TEXT("UParticleModuleTypeDataBase"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleTypeDataBase);
	UClass* Z_Construct_UClass_UParticleModuleTypeDataAnimTrail_NoRegister()
	{
		return UParticleModuleTypeDataAnimTrail::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleTypeDataAnimTrail()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleTypeDataBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleTypeDataAnimTrail::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20081080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_WidthTessellationStepSize = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WidthTessellationStepSize"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(WidthTessellationStepSize, UParticleModuleTypeDataAnimTrail), 0x0000000000000001);
				UProperty* NewProp_TangentTessellationStepSize = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TangentTessellationStepSize"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(TangentTessellationStepSize, UParticleModuleTypeDataAnimTrail), 0x0000000000000001);
				UProperty* NewProp_DistanceTessellationStepSize = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DistanceTessellationStepSize"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DistanceTessellationStepSize, UParticleModuleTypeDataAnimTrail), 0x0000000000000001);
				UProperty* NewProp_TilingDistance = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TilingDistance"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(TilingDistance, UParticleModuleTypeDataAnimTrail), 0x0000000000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTangentRecalculationEveryFrame, UParticleModuleTypeDataAnimTrail, uint8);
				UProperty* NewProp_bTangentRecalculationEveryFrame = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bTangentRecalculationEveryFrame"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTangentRecalculationEveryFrame, UParticleModuleTypeDataAnimTrail), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bTangentRecalculationEveryFrame, UParticleModuleTypeDataAnimTrail), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnablePreviousTangentRecalculation, UParticleModuleTypeDataAnimTrail, uint8);
				UProperty* NewProp_bEnablePreviousTangentRecalculation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bEnablePreviousTangentRecalculation"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnablePreviousTangentRecalculation, UParticleModuleTypeDataAnimTrail), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bEnablePreviousTangentRecalculation, UParticleModuleTypeDataAnimTrail), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDeadTrailsOnDeactivate, UParticleModuleTypeDataAnimTrail, uint8);
				UProperty* NewProp_bDeadTrailsOnDeactivate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bDeadTrailsOnDeactivate"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDeadTrailsOnDeactivate, UParticleModuleTypeDataAnimTrail), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bDeadTrailsOnDeactivate, UParticleModuleTypeDataAnimTrail), sizeof(uint8), false);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("AnimTrail Data"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/TypeData/ParticleModuleTypeDataAnimTrail.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataAnimTrail.h"));
				MetaData->SetValue(NewProp_WidthTessellationStepSize, TEXT("Category"), TEXT("Rendering"));
				MetaData->SetValue(NewProp_WidthTessellationStepSize, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataAnimTrail.h"));
				MetaData->SetValue(NewProp_WidthTessellationStepSize, TEXT("ToolTip"), TEXT("The width step size for tessellation.\nThis is the number of world units change in the width required to warrant an additional tessellation point. If 0 then there is no width tessellation."));
				MetaData->SetValue(NewProp_TangentTessellationStepSize, TEXT("Category"), TEXT("Rendering"));
				MetaData->SetValue(NewProp_TangentTessellationStepSize, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataAnimTrail.h"));
				MetaData->SetValue(NewProp_TangentTessellationStepSize, TEXT("ToolTip"), TEXT("The tangent scalar for tessellation.\nThis is the degree change in the tangent direction [0...180] required to warrant an additional tessellation point. If 0 then there is no tangent tessellation."));
				MetaData->SetValue(NewProp_DistanceTessellationStepSize, TEXT("Category"), TEXT("Rendering"));
				MetaData->SetValue(NewProp_DistanceTessellationStepSize, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataAnimTrail.h"));
				MetaData->SetValue(NewProp_DistanceTessellationStepSize, TEXT("ToolTip"), TEXT("The distance step size for tessellation.\n# Tessellation Points = TruncToInt((Distance Between Spawned Particles) / DistanceTessellationStepSize)). If 0 then there is no distance tessellation."));
				MetaData->SetValue(NewProp_TilingDistance, TEXT("Category"), TEXT("Rendering"));
				MetaData->SetValue(NewProp_TilingDistance, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataAnimTrail.h"));
				MetaData->SetValue(NewProp_TilingDistance, TEXT("ToolTip"), TEXT("The (estimated) covered distance to tile the 2nd UV set at.\nIf 0.0, a second UV set will not be passed in."));
				MetaData->SetValue(NewProp_bTangentRecalculationEveryFrame, TEXT("Category"), TEXT("Trail"));
				MetaData->SetValue(NewProp_bTangentRecalculationEveryFrame, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataAnimTrail.h"));
				MetaData->SetValue(NewProp_bTangentRecalculationEveryFrame, TEXT("ToolTip"), TEXT("If true, recalculate tangents every frame to allow velocity/acceleration to be applied"));
				MetaData->SetValue(NewProp_bEnablePreviousTangentRecalculation, TEXT("Category"), TEXT("Trail"));
				MetaData->SetValue(NewProp_bEnablePreviousTangentRecalculation, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataAnimTrail.h"));
				MetaData->SetValue(NewProp_bEnablePreviousTangentRecalculation, TEXT("ToolTip"), TEXT("If true, recalculate the previous tangent when a new particle is spawned"));
				MetaData->SetValue(NewProp_bDeadTrailsOnDeactivate, TEXT("Category"), TEXT("Trail"));
				MetaData->SetValue(NewProp_bDeadTrailsOnDeactivate, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataAnimTrail.h"));
				MetaData->SetValue(NewProp_bDeadTrailsOnDeactivate, TEXT("ToolTip"), TEXT("If true, when the system is deactivated, mark trails as dead.\nThis means they will still render, but will not have more particles\nadded to them, even if the system re-activates..."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleTypeDataAnimTrail(Z_Construct_UClass_UParticleModuleTypeDataAnimTrail, TEXT("UParticleModuleTypeDataAnimTrail"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleTypeDataAnimTrail);
	UEnum* Z_Construct_UEnum_Engine_EBeamTaperMethod()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EBeamTaperMethod_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EBeamTaperMethod"), 0, Get_Z_Construct_UEnum_Engine_EBeamTaperMethod_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EBeamTaperMethod"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PEBTM_None")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PEBTM_Full")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PEBTM_Partial")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PEBTM_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataBeam2.h"));
			MetaData->SetValue(ReturnEnum, TEXT("PEBTM_Full.DisplayName"), TEXT("Full"));
			MetaData->SetValue(ReturnEnum, TEXT("PEBTM_None.DisplayName"), TEXT("None"));
			MetaData->SetValue(ReturnEnum, TEXT("PEBTM_Partial.DisplayName"), TEXT("Partial"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Beam Tapering Variables."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EBeamTaperMethod_CRC() { return 1942825492U; }
	UEnum* Z_Construct_UEnum_Engine_EBeam2Method()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EBeam2Method_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EBeam2Method"), 0, Get_Z_Construct_UEnum_Engine_EBeam2Method_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EBeam2Method"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PEB2M_Distance")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PEB2M_Target")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PEB2M_Branch")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PEB2M_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataBeam2.h"));
			MetaData->SetValue(ReturnEnum, TEXT("PEB2M_Branch.DisplayName"), TEXT("Branch"));
			MetaData->SetValue(ReturnEnum, TEXT("PEB2M_Distance.DisplayName"), TEXT("Distance"));
			MetaData->SetValue(ReturnEnum, TEXT("PEB2M_Target.DisplayName"), TEXT("Target"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EBeam2Method_CRC() { return 1453918029U; }
	UScriptStruct* Z_Construct_UScriptStruct_FBeamTargetData()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FBeamTargetData_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("BeamTargetData"), sizeof(FBeamTargetData), Get_Z_Construct_UScriptStruct_FBeamTargetData_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BeamTargetData"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FBeamTargetData>, EStructFlags(0x00000001));
			UProperty* NewProp_TargetPercentage = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TargetPercentage"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(TargetPercentage, FBeamTargetData), 0x0000000000000001);
			UProperty* NewProp_TargetName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TargetName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(TargetName, FBeamTargetData), 0x0000000000000001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataBeam2.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Beam Multi-target Variables."));
			MetaData->SetValue(NewProp_TargetPercentage, TEXT("Category"), TEXT("BeamTargetData"));
			MetaData->SetValue(NewProp_TargetPercentage, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataBeam2.h"));
			MetaData->SetValue(NewProp_TargetPercentage, TEXT("ToolTip"), TEXT("Percentage chance the target will be selected (100 = always)."));
			MetaData->SetValue(NewProp_TargetName, TEXT("Category"), TEXT("BeamTargetData"));
			MetaData->SetValue(NewProp_TargetName, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataBeam2.h"));
			MetaData->SetValue(NewProp_TargetName, TEXT("ToolTip"), TEXT("Name of the target."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FBeamTargetData_CRC() { return 2938957067U; }
	UClass* Z_Construct_UClass_UParticleModuleTypeDataBeam2_NoRegister()
	{
		return UParticleModuleTypeDataBeam2::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleTypeDataBeam2()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleTypeDataBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleTypeDataBeam2::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(RenderTessellation, UParticleModuleTypeDataBeam2, uint8);
				UProperty* NewProp_RenderTessellation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RenderTessellation"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(RenderTessellation, UParticleModuleTypeDataBeam2), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(RenderTessellation, UParticleModuleTypeDataBeam2), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(RenderLines, UParticleModuleTypeDataBeam2, uint8);
				UProperty* NewProp_RenderLines = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RenderLines"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(RenderLines, UParticleModuleTypeDataBeam2), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(RenderLines, UParticleModuleTypeDataBeam2), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(RenderDirectLine, UParticleModuleTypeDataBeam2, uint8);
				UProperty* NewProp_RenderDirectLine = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RenderDirectLine"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(RenderDirectLine, UParticleModuleTypeDataBeam2), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(RenderDirectLine, UParticleModuleTypeDataBeam2), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(RenderGeometry, UParticleModuleTypeDataBeam2, uint8);
				UProperty* NewProp_RenderGeometry = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RenderGeometry"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(RenderGeometry, UParticleModuleTypeDataBeam2), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(RenderGeometry, UParticleModuleTypeDataBeam2), sizeof(uint8), false);
				UProperty* NewProp_TaperScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TaperScale"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TaperScale, UParticleModuleTypeDataBeam2), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				UProperty* NewProp_TaperFactor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TaperFactor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TaperFactor, UParticleModuleTypeDataBeam2), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				UProperty* NewProp_TaperMethod = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TaperMethod"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(TaperMethod, UParticleModuleTypeDataBeam2), 0x0000000000000001, Z_Construct_UEnum_Engine_EBeamTaperMethod());
				UProperty* NewProp_Distance = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Distance"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Distance, UParticleModuleTypeDataBeam2), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				UProperty* NewProp_BranchParentName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BranchParentName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(BranchParentName, UParticleModuleTypeDataBeam2), 0x0000000000000001);
				UProperty* NewProp_UpVectorStepSize = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UpVectorStepSize"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(UpVectorStepSize, UParticleModuleTypeDataBeam2), 0x0000000000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAlwaysOn, UParticleModuleTypeDataBeam2, uint8);
				UProperty* NewProp_bAlwaysOn = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAlwaysOn"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAlwaysOn, UParticleModuleTypeDataBeam2), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bAlwaysOn, UParticleModuleTypeDataBeam2), sizeof(uint8), false);
				UProperty* NewProp_InterpolationPoints = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InterpolationPoints"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(InterpolationPoints, UParticleModuleTypeDataBeam2), 0x0000000000000001);
				UProperty* NewProp_Speed = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Speed"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Speed, UParticleModuleTypeDataBeam2), 0x0000000000000001);
				UProperty* NewProp_MaxBeamCount = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxBeamCount"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MaxBeamCount, UParticleModuleTypeDataBeam2), 0x0000000000000001);
				UProperty* NewProp_Sheets = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Sheets"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Sheets, UParticleModuleTypeDataBeam2), 0x0000000000000001);
				UProperty* NewProp_TextureTileDistance = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TextureTileDistance"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(TextureTileDistance, UParticleModuleTypeDataBeam2), 0x0000000000000001);
				UProperty* NewProp_TextureTile = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TextureTile"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(TextureTile, UParticleModuleTypeDataBeam2), 0x0000000000000001);
				UProperty* NewProp_BeamMethod = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BeamMethod"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(BeamMethod, UParticleModuleTypeDataBeam2), 0x0000000000000001, Z_Construct_UEnum_Engine_EBeam2Method());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Beam Data"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/TypeData/ParticleModuleTypeDataBeam2.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataBeam2.h"));
				MetaData->SetValue(NewProp_RenderTessellation, TEXT("Category"), TEXT("Rendering"));
				MetaData->SetValue(NewProp_RenderTessellation, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataBeam2.h"));
				MetaData->SetValue(NewProp_RenderLines, TEXT("Category"), TEXT("Rendering"));
				MetaData->SetValue(NewProp_RenderLines, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataBeam2.h"));
				MetaData->SetValue(NewProp_RenderDirectLine, TEXT("Category"), TEXT("Rendering"));
				MetaData->SetValue(NewProp_RenderDirectLine, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataBeam2.h"));
				MetaData->SetValue(NewProp_RenderGeometry, TEXT("Category"), TEXT("Rendering"));
				MetaData->SetValue(NewProp_RenderGeometry, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataBeam2.h"));
				MetaData->SetValue(NewProp_RenderGeometry, TEXT("ToolTip"), TEXT("Beam Rendering Variables."));
				MetaData->SetValue(NewProp_TaperScale, TEXT("Category"), TEXT("Taper"));
				MetaData->SetValue(NewProp_TaperScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataBeam2.h"));
				MetaData->SetValue(NewProp_TaperScale, TEXT("ToolTip"), TEXT("Tapering scaling\n    This is intended to be either a constant, uniform or a ParticleParam.\n    If a curve is used, 0/1 mapping of source/target... which could be integrated into\n    the taper factor itself, and therefore makes no sense."));
				MetaData->SetValue(NewProp_TaperFactor, TEXT("Category"), TEXT("Taper"));
				MetaData->SetValue(NewProp_TaperFactor, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataBeam2.h"));
				MetaData->SetValue(NewProp_TaperFactor, TEXT("ToolTip"), TEXT("Tapering factor, 0 = source of beam, 1 = target"));
				MetaData->SetValue(NewProp_TaperMethod, TEXT("Category"), TEXT("Taper"));
				MetaData->SetValue(NewProp_TaperMethod, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataBeam2.h"));
				MetaData->SetValue(NewProp_TaperMethod, TEXT("ToolTip"), TEXT("Tapering mode - one of the following:\nPEBTM_None              - No tapering is applied\nPEBTM_Full              - Taper the beam relative to source-->target, regardless of current beam length\nPEBTM_Partial   - Taper the beam relative to source-->location, 0=source,1=endpoint"));
				MetaData->SetValue(NewProp_Distance, TEXT("Category"), TEXT("Distance"));
				MetaData->SetValue(NewProp_Distance, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataBeam2.h"));
				MetaData->SetValue(NewProp_Distance, TEXT("ToolTip"), TEXT("The distance along the X-axis to stretch the beam\nDistance is only used if BeamMethod is PEB2M_Distance"));
				MetaData->SetValue(NewProp_BranchParentName, TEXT("Category"), TEXT("Branching"));
				MetaData->SetValue(NewProp_BranchParentName, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataBeam2.h"));
				MetaData->SetValue(NewProp_BranchParentName, TEXT("ToolTip"), TEXT("The name of the emitter to branch from (if mode is PEB2M_Branch)\nMUST BE IN THE SAME PARTICLE SYSTEM!"));
				MetaData->SetValue(NewProp_UpVectorStepSize, TEXT("Category"), TEXT("Beam"));
				MetaData->SetValue(NewProp_UpVectorStepSize, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataBeam2.h"));
				MetaData->SetValue(NewProp_UpVectorStepSize, TEXT("ToolTip"), TEXT("The approach to use for determining the Up vector(s) for the beam.\n\n0 indicates that the Up FVector should be calculated at EVERY point in the beam.\n1 indicates a single Up FVector should be determined at the start of the beam and used at every point.\nN indicates an Up FVector should be calculated every N points of the beam and interpolated between them.\n    [NOTE: This mode is currently unsupported.]"));
				MetaData->SetValue(NewProp_bAlwaysOn, TEXT("Category"), TEXT("Beam"));
				MetaData->SetValue(NewProp_bAlwaysOn, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataBeam2.h"));
				MetaData->SetValue(NewProp_bAlwaysOn, TEXT("ToolTip"), TEXT("If true, there will ALWAYS be a beam..."));
				MetaData->SetValue(NewProp_InterpolationPoints, TEXT("Category"), TEXT("Beam"));
				MetaData->SetValue(NewProp_InterpolationPoints, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataBeam2.h"));
				MetaData->SetValue(NewProp_InterpolationPoints, TEXT("ToolTip"), TEXT("Indicates whether the beam should be interpolated.\n    <= 0 --> no\n    >  0 --> yes (and is equal to the number of interpolation steps that should be taken."));
				MetaData->SetValue(NewProp_Speed, TEXT("Category"), TEXT("Beam"));
				MetaData->SetValue(NewProp_Speed, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataBeam2.h"));
				MetaData->SetValue(NewProp_Speed, TEXT("ToolTip"), TEXT("The speed at which the beam should move from source to target when firing up.\n    '0' indicates instantaneous"));
				MetaData->SetValue(NewProp_MaxBeamCount, TEXT("Category"), TEXT("Beam"));
				MetaData->SetValue(NewProp_MaxBeamCount, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataBeam2.h"));
				MetaData->SetValue(NewProp_MaxBeamCount, TEXT("ToolTip"), TEXT("The number of live beams"));
				MetaData->SetValue(NewProp_Sheets, TEXT("Category"), TEXT("Beam"));
				MetaData->SetValue(NewProp_Sheets, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataBeam2.h"));
				MetaData->SetValue(NewProp_Sheets, TEXT("ToolTip"), TEXT("The number of sheets to render"));
				MetaData->SetValue(NewProp_TextureTileDistance, TEXT("Category"), TEXT("Beam"));
				MetaData->SetValue(NewProp_TextureTileDistance, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataBeam2.h"));
				MetaData->SetValue(NewProp_TextureTileDistance, TEXT("ToolTip"), TEXT("The distance per texture tile.\n    1st UV set only. 2nd UV set does not Tile."));
				MetaData->SetValue(NewProp_TextureTile, TEXT("Category"), TEXT("Beam"));
				MetaData->SetValue(NewProp_TextureTile, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataBeam2.h"));
				MetaData->SetValue(NewProp_TextureTile, TEXT("ToolTip"), TEXT("The number of times to tile the texture along each beam.\nOverridden by TextureTilingDistance if it is > 0.0.\n    1st UV set only. 2nd UV set does not Tile."));
				MetaData->SetValue(NewProp_BeamMethod, TEXT("Category"), TEXT("Beam"));
				MetaData->SetValue(NewProp_BeamMethod, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataBeam2.h"));
				MetaData->SetValue(NewProp_BeamMethod, TEXT("ToolTip"), TEXT("The method with which to form the beam(s). Must be one of the following:\n        PEB2M_Distance  - Use the distance property to emit a beam along the X-axis of the emitter.\n        PEB2M_Target    - Emit a beam from the source to the supplied target.\n        PEB2M_Branch    - Currently unimplemented."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleTypeDataBeam2(Z_Construct_UClass_UParticleModuleTypeDataBeam2, TEXT("UParticleModuleTypeDataBeam2"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleTypeDataBeam2);
	UScriptStruct* Z_Construct_UScriptStruct_FGPUSpriteResourceData()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FGPUSpriteResourceData_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("GPUSpriteResourceData"), sizeof(FGPUSpriteResourceData), Get_Z_Construct_UScriptStruct_FGPUSpriteResourceData_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GPUSpriteResourceData"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FGPUSpriteResourceData>, EStructFlags(0x00000001));
			UProperty* NewProp_PivotOffset = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PivotOffset"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PivotOffset, FGPUSpriteResourceData), 0x0000000000000000, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_LockAxisFlag = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LockAxisFlag"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(LockAxisFlag, FGPUSpriteResourceData), 0x0000000000000000, Z_Construct_UEnum_Engine_EParticleAxisLock());
			UProperty* NewProp_ScreenAlignment = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ScreenAlignment"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(ScreenAlignment, FGPUSpriteResourceData), 0x0000000000000000, Z_Construct_UEnum_Engine_EParticleScreenAlignment());
			UProperty* NewProp_CameraMotionBlurAmount = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CameraMotionBlurAmount"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(CameraMotionBlurAmount, FGPUSpriteResourceData), 0x0000000000000000);
			UProperty* NewProp_RotationRateScale = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RotationRateScale"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(RotationRateScale, FGPUSpriteResourceData), 0x0000000000000000);
			UProperty* NewProp_OneMinusFriction = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("OneMinusFriction"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(OneMinusFriction, FGPUSpriteResourceData), 0x0000000000000000);
			UProperty* NewProp_CollisionTimeBias = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CollisionTimeBias"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(CollisionTimeBias, FGPUSpriteResourceData), 0x0000000000000000);
			UProperty* NewProp_CollisionRadiusBias = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CollisionRadiusBias"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(CollisionRadiusBias, FGPUSpriteResourceData), 0x0000000000000000);
			UProperty* NewProp_CollisionRadiusScale = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CollisionRadiusScale"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(CollisionRadiusScale, FGPUSpriteResourceData), 0x0000000000000000);
			UProperty* NewProp_ResilienceBias = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ResilienceBias"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ResilienceBias, FGPUSpriteResourceData), 0x0000000000000000);
			UProperty* NewProp_ResilienceScale = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ResilienceScale"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ResilienceScale, FGPUSpriteResourceData), 0x0000000000000000);
			UProperty* NewProp_DragCoefficientBias = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DragCoefficientBias"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DragCoefficientBias, FGPUSpriteResourceData), 0x0000000000000000);
			UProperty* NewProp_DragCoefficientScale = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DragCoefficientScale"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DragCoefficientScale, FGPUSpriteResourceData), 0x0000000000000000);
			UProperty* NewProp_PerParticleVectorFieldBias = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PerParticleVectorFieldBias"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(PerParticleVectorFieldBias, FGPUSpriteResourceData), 0x0000000000000000);
			UProperty* NewProp_PerParticleVectorFieldScale = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PerParticleVectorFieldScale"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(PerParticleVectorFieldScale, FGPUSpriteResourceData), 0x0000000000000000);
			UProperty* NewProp_GlobalVectorFieldTightness = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("GlobalVectorFieldTightness"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(GlobalVectorFieldTightness, FGPUSpriteResourceData), 0x0000000000000000);
			UProperty* NewProp_GlobalVectorFieldScale = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("GlobalVectorFieldScale"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(GlobalVectorFieldScale, FGPUSpriteResourceData), 0x0000000000000000);
			UProperty* NewProp_OrbitPhaseRange = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("OrbitPhaseRange"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(OrbitPhaseRange, FGPUSpriteResourceData), 0x0000000000000000, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_OrbitPhaseBase = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("OrbitPhaseBase"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(OrbitPhaseBase, FGPUSpriteResourceData), 0x0000000000000000, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_OrbitFrequencyRange = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("OrbitFrequencyRange"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(OrbitFrequencyRange, FGPUSpriteResourceData), 0x0000000000000000, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_OrbitFrequencyBase = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("OrbitFrequencyBase"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(OrbitFrequencyBase, FGPUSpriteResourceData), 0x0000000000000000, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_OrbitOffsetRange = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("OrbitOffsetRange"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(OrbitOffsetRange, FGPUSpriteResourceData), 0x0000000000000000, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_OrbitOffsetBase = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("OrbitOffsetBase"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(OrbitOffsetBase, FGPUSpriteResourceData), 0x0000000000000000, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_ConstantAcceleration = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ConstantAcceleration"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ConstantAcceleration, FGPUSpriteResourceData), 0x0000000000000000, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_SizeBySpeed = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SizeBySpeed"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SizeBySpeed, FGPUSpriteResourceData), 0x0000000000000000, Z_Construct_UScriptStruct_FVector4());
			UProperty* NewProp_SubImageSize = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SubImageSize"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SubImageSize, FGPUSpriteResourceData), 0x0000000000000000, Z_Construct_UScriptStruct_FVector4());
			UProperty* NewProp_SimulationAttrCurveBias = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SimulationAttrCurveBias"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SimulationAttrCurveBias, FGPUSpriteResourceData), 0x0000000000000000, Z_Construct_UScriptStruct_FVector4());
			UProperty* NewProp_SimulationAttrCurveScale = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SimulationAttrCurveScale"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SimulationAttrCurveScale, FGPUSpriteResourceData), 0x0000000000000000, Z_Construct_UScriptStruct_FVector4());
			UProperty* NewProp_MiscBias = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MiscBias"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MiscBias, FGPUSpriteResourceData), 0x0000000000000000, Z_Construct_UScriptStruct_FVector4());
			UProperty* NewProp_MiscScale = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MiscScale"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MiscScale, FGPUSpriteResourceData), 0x0000000000000000, Z_Construct_UScriptStruct_FVector4());
			UProperty* NewProp_ColorBias = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ColorBias"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ColorBias, FGPUSpriteResourceData), 0x0000000000000000, Z_Construct_UScriptStruct_FVector4());
			UProperty* NewProp_ColorScale = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ColorScale"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ColorScale, FGPUSpriteResourceData), 0x0000000000000000, Z_Construct_UScriptStruct_FVector4());
			UProperty* NewProp_QuantizedSimulationAttrSamples = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("QuantizedSimulationAttrSamples"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(QuantizedSimulationAttrSamples, FGPUSpriteResourceData), 0x0000000000000000);
			UProperty* NewProp_QuantizedSimulationAttrSamples_Inner = new(EC_InternalUseOnlyConstructor, NewProp_QuantizedSimulationAttrSamples, TEXT("QuantizedSimulationAttrSamples"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FColor());
			UProperty* NewProp_QuantizedMiscSamples = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("QuantizedMiscSamples"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(QuantizedMiscSamples, FGPUSpriteResourceData), 0x0000000000000000);
			UProperty* NewProp_QuantizedMiscSamples_Inner = new(EC_InternalUseOnlyConstructor, NewProp_QuantizedMiscSamples, TEXT("QuantizedMiscSamples"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FColor());
			UProperty* NewProp_QuantizedColorSamples = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("QuantizedColorSamples"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(QuantizedColorSamples, FGPUSpriteResourceData), 0x0000000000000000);
			UProperty* NewProp_QuantizedColorSamples_Inner = new(EC_InternalUseOnlyConstructor, NewProp_QuantizedColorSamples, TEXT("QuantizedColorSamples"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FColor());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("The source data for runtime resources."));
			MetaData->SetValue(NewProp_PivotOffset, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_PivotOffset, TEXT("ToolTip"), TEXT("Pivot offset in UV space for placing the verts of each particle."));
			MetaData->SetValue(NewProp_LockAxisFlag, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_LockAxisFlag, TEXT("ToolTip"), TEXT("The method for locking the particles to a particular axis."));
			MetaData->SetValue(NewProp_ScreenAlignment, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_ScreenAlignment, TEXT("ToolTip"), TEXT("Screen alignment for particles."));
			MetaData->SetValue(NewProp_CameraMotionBlurAmount, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_CameraMotionBlurAmount, TEXT("ToolTip"), TEXT("How much to stretch sprites based on camera motion blur."));
			MetaData->SetValue(NewProp_RotationRateScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_RotationRateScale, TEXT("ToolTip"), TEXT("Scale to apply to per-particle rotation rate."));
			MetaData->SetValue(NewProp_OneMinusFriction, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_OneMinusFriction, TEXT("ToolTip"), TEXT("One minus the coefficient of friction applied to particles upon collision."));
			MetaData->SetValue(NewProp_CollisionTimeBias, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_CollisionTimeBias, TEXT("ToolTip"), TEXT("Bias applied to relative time upon collision."));
			MetaData->SetValue(NewProp_CollisionRadiusBias, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_CollisionRadiusBias, TEXT("ToolTip"), TEXT("Bias to apply to per-particle size for collision."));
			MetaData->SetValue(NewProp_CollisionRadiusScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_CollisionRadiusScale, TEXT("ToolTip"), TEXT("Scale to apply to per-particle size for collision."));
			MetaData->SetValue(NewProp_ResilienceBias, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_ResilienceBias, TEXT("ToolTip"), TEXT("Bias to apply to per-particle damping factor."));
			MetaData->SetValue(NewProp_ResilienceScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_ResilienceScale, TEXT("ToolTip"), TEXT("Scale to apply to per-particle damping factor."));
			MetaData->SetValue(NewProp_DragCoefficientBias, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_DragCoefficientBias, TEXT("ToolTip"), TEXT("Bias to apply to per-particle drag coefficient."));
			MetaData->SetValue(NewProp_DragCoefficientScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_DragCoefficientScale, TEXT("ToolTip"), TEXT("Scale to apply to per-particle drag coefficient."));
			MetaData->SetValue(NewProp_PerParticleVectorFieldBias, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_PerParticleVectorFieldBias, TEXT("ToolTip"), TEXT("Bias to apply to per-particle vector field scale."));
			MetaData->SetValue(NewProp_PerParticleVectorFieldScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_PerParticleVectorFieldScale, TEXT("ToolTip"), TEXT("Scale to apply to per-particle vector field scale."));
			MetaData->SetValue(NewProp_GlobalVectorFieldTightness, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_GlobalVectorFieldTightness, TEXT("ToolTip"), TEXT("Tightness override value for the global vector fields."));
			MetaData->SetValue(NewProp_GlobalVectorFieldScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_GlobalVectorFieldScale, TEXT("ToolTip"), TEXT("Scale to apply to global vector fields."));
			MetaData->SetValue(NewProp_OrbitPhaseRange, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_OrbitPhaseBase, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_OrbitPhaseBase, TEXT("ToolTip"), TEXT("Phase offset of orbit around each axis."));
			MetaData->SetValue(NewProp_OrbitFrequencyRange, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_OrbitFrequencyBase, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_OrbitFrequencyBase, TEXT("ToolTip"), TEXT("Frequency at which the particle orbits around each axis."));
			MetaData->SetValue(NewProp_OrbitOffsetRange, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_OrbitOffsetBase, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_OrbitOffsetBase, TEXT("ToolTip"), TEXT("Offset at which to orbit."));
			MetaData->SetValue(NewProp_ConstantAcceleration, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_ConstantAcceleration, TEXT("ToolTip"), TEXT("Constant acceleration to apply to particles."));
			MetaData->SetValue(NewProp_SizeBySpeed, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_SizeBySpeed, TEXT("ToolTip"), TEXT("SizeBySpeed parameters. XY=SpeedScale ZW=MaxSpeedScale."));
			MetaData->SetValue(NewProp_SubImageSize, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_SubImageSize, TEXT("ToolTip"), TEXT("Size of subimages. X:SubImageCountH Y:SubImageCountV Z:1/SubImageCountH W:1/SubImageCountV"));
			MetaData->SetValue(NewProp_SimulationAttrCurveBias, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_SimulationAttrCurveScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_SimulationAttrCurveScale, TEXT("ToolTip"), TEXT("Scale and bias to be applied to the simulation attribute curves."));
			MetaData->SetValue(NewProp_MiscBias, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_MiscScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_MiscScale, TEXT("ToolTip"), TEXT("Scale and bias to be applied to the misc curve."));
			MetaData->SetValue(NewProp_ColorBias, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_ColorScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_ColorScale, TEXT("ToolTip"), TEXT("Scale and bias to be applied to the color of sprites."));
			MetaData->SetValue(NewProp_QuantizedSimulationAttrSamples, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_QuantizedSimulationAttrSamples, TEXT("ToolTip"), TEXT("Quantized samples for simulation attributes."));
			MetaData->SetValue(NewProp_QuantizedMiscSamples, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_QuantizedMiscSamples, TEXT("ToolTip"), TEXT("Quantized samples for misc curve attributes to be evaluated at runtime."));
			MetaData->SetValue(NewProp_QuantizedColorSamples, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_QuantizedColorSamples, TEXT("ToolTip"), TEXT("Quantized color samples."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FGPUSpriteResourceData_CRC() { return 4259768087U; }
	UScriptStruct* Z_Construct_UScriptStruct_FGPUSpriteEmitterInfo()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FGPUSpriteEmitterInfo_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("GPUSpriteEmitterInfo"), sizeof(FGPUSpriteEmitterInfo), Get_Z_Construct_UScriptStruct_FGPUSpriteEmitterInfo_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GPUSpriteEmitterInfo"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FGPUSpriteEmitterInfo>, EStructFlags(0x00000005));
			UProperty* NewProp_DynamicAlphaScale = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DynamicAlphaScale"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DynamicAlphaScale, FGPUSpriteEmitterInfo), 0x0000008000000000, Z_Construct_UScriptStruct_FRawDistributionFloat());
			UProperty* NewProp_DynamicColorScale = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DynamicColorScale"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DynamicColorScale, FGPUSpriteEmitterInfo), 0x0000008000000000, Z_Construct_UScriptStruct_FRawDistributionVector());
			UProperty* NewProp_DynamicAlpha = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DynamicAlpha"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DynamicAlpha, FGPUSpriteEmitterInfo), 0x0000008000000000, Z_Construct_UScriptStruct_FRawDistributionFloat());
			UProperty* NewProp_DynamicColor = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DynamicColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DynamicColor, FGPUSpriteEmitterInfo), 0x0000008000000000, Z_Construct_UScriptStruct_FRawDistributionVector());
			UProperty* NewProp_CollisionMode = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CollisionMode"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(CollisionMode, FGPUSpriteEmitterInfo), 0x0000000000000000, Z_Construct_UEnum_Engine_EParticleCollisionMode());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnableCollision, FGPUSpriteEmitterInfo, uint8);
			UProperty* NewProp_bEnableCollision = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bEnableCollision"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnableCollision, FGPUSpriteEmitterInfo), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bEnableCollision, FGPUSpriteEmitterInfo), sizeof(uint8), false);
			UProperty* NewProp_LockAxisFlag = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LockAxisFlag"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(LockAxisFlag, FGPUSpriteEmitterInfo), 0x0000000000000000, Z_Construct_UEnum_Engine_EParticleAxisLock());
			UProperty* NewProp_ScreenAlignment = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ScreenAlignment"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(ScreenAlignment, FGPUSpriteEmitterInfo), 0x0000000000000000, Z_Construct_UEnum_Engine_EParticleScreenAlignment());
			UProperty* NewProp_MaxParticleCount = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MaxParticleCount"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MaxParticleCount, FGPUSpriteEmitterInfo), 0x0000000000000000);
			UProperty* NewProp_MaxLifetime = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MaxLifetime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MaxLifetime, FGPUSpriteEmitterInfo), 0x0000000000000000);
			UProperty* NewProp_InvRotationRateScale = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("InvRotationRateScale"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InvRotationRateScale, FGPUSpriteEmitterInfo), 0x0000000000000000);
			UProperty* NewProp_InvMaxSize = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("InvMaxSize"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InvMaxSize, FGPUSpriteEmitterInfo), 0x0000000000000000, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_OrbitOffsetRange = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("OrbitOffsetRange"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(OrbitOffsetRange, FGPUSpriteEmitterInfo), 0x0000000000000000, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_OrbitOffsetBase = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("OrbitOffsetBase"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(OrbitOffsetBase, FGPUSpriteEmitterInfo), 0x0000000000000000, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_PointAttractorRadiusSq = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PointAttractorRadiusSq"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(PointAttractorRadiusSq, FGPUSpriteEmitterInfo), 0x0000000000000000);
			UProperty* NewProp_PointAttractorPosition = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PointAttractorPosition"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PointAttractorPosition, FGPUSpriteEmitterInfo), 0x0000000000000000, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_ConstantAcceleration = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ConstantAcceleration"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ConstantAcceleration, FGPUSpriteEmitterInfo), 0x0000000000000000, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Resilience = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Resilience"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Resilience, FGPUSpriteEmitterInfo), 0x0000000000000000, Z_Construct_UScriptStruct_FFloatDistribution());
			UProperty* NewProp_PointAttractorStrength = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PointAttractorStrength"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PointAttractorStrength, FGPUSpriteEmitterInfo), 0x0000000000000000, Z_Construct_UScriptStruct_FFloatDistribution());
			UProperty* NewProp_DragCoefficient = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DragCoefficient"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DragCoefficient, FGPUSpriteEmitterInfo), 0x0000000000000000, Z_Construct_UScriptStruct_FFloatDistribution());
			UProperty* NewProp_VectorFieldScale = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("VectorFieldScale"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(VectorFieldScale, FGPUSpriteEmitterInfo), 0x0000000000000000, Z_Construct_UScriptStruct_FFloatDistribution());
			UProperty* NewProp_LocalVectorField = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LocalVectorField"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LocalVectorField, FGPUSpriteEmitterInfo), 0x0000000000000000, Z_Construct_UScriptStruct_FGPUSpriteLocalVectorFieldInfo());
			UProperty* NewProp_SpawnModules = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SpawnModules"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(SpawnModules, FGPUSpriteEmitterInfo), 0x0000000000000000);
			UProperty* NewProp_SpawnModules_Inner = new(EC_InternalUseOnlyConstructor, NewProp_SpawnModules, TEXT("SpawnModules"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UParticleModule_NoRegister());
			UProperty* NewProp_SpawnPerUnitModule = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SpawnPerUnitModule"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(SpawnPerUnitModule, FGPUSpriteEmitterInfo), 0x0000000000000000, Z_Construct_UClass_UParticleModuleSpawnPerUnit_NoRegister());
			UProperty* NewProp_SpawnModule = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SpawnModule"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(SpawnModule, FGPUSpriteEmitterInfo), 0x0000000000000000, Z_Construct_UClass_UParticleModuleSpawn_NoRegister());
			UProperty* NewProp_RequiredModule = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RequiredModule"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(RequiredModule, FGPUSpriteEmitterInfo), 0x0000000000000000, Z_Construct_UClass_UParticleModuleRequired_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("The data needed by the runtime to simulate sprites."));
			MetaData->SetValue(NewProp_DynamicAlphaScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_DynamicAlphaScale, TEXT("ToolTip"), TEXT("Dynamic alpha scale from the ColorScaleOverLife module."));
			MetaData->SetValue(NewProp_DynamicColorScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_DynamicColorScale, TEXT("ToolTip"), TEXT("Dynamic color scale from the ColorScaleOverLife module."));
			MetaData->SetValue(NewProp_DynamicAlpha, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_DynamicAlpha, TEXT("ToolTip"), TEXT("Dynamic alpha scale from the ColorOverLife module."));
			MetaData->SetValue(NewProp_DynamicColor, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_DynamicColor, TEXT("ToolTip"), TEXT("Dynamic color scale from the ColorOverLife module."));
			MetaData->SetValue(NewProp_CollisionMode, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_bEnableCollision, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_bEnableCollision, TEXT("ToolTip"), TEXT("If true, collisions are enabled for this emitter."));
			MetaData->SetValue(NewProp_LockAxisFlag, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_LockAxisFlag, TEXT("ToolTip"), TEXT("The method for locking the particles to a particular axis."));
			MetaData->SetValue(NewProp_ScreenAlignment, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_ScreenAlignment, TEXT("ToolTip"), TEXT("The method for aligning the particle based on the camera."));
			MetaData->SetValue(NewProp_MaxParticleCount, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_MaxParticleCount, TEXT("ToolTip"), TEXT("The maximum number of particles expected for this emitter."));
			MetaData->SetValue(NewProp_MaxLifetime, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_MaxLifetime, TEXT("ToolTip"), TEXT("The maximum lifetime of particles in this emitter."));
			MetaData->SetValue(NewProp_InvRotationRateScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_InvRotationRateScale, TEXT("ToolTip"), TEXT("The inverse scale to apply to rotation rate."));
			MetaData->SetValue(NewProp_InvMaxSize, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_InvMaxSize, TEXT("ToolTip"), TEXT("One over the maximum size of a sprite particle."));
			MetaData->SetValue(NewProp_OrbitOffsetRange, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_OrbitOffsetBase, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_OrbitOffsetBase, TEXT("ToolTip"), TEXT("Amount by which to offset particles when they are spawned."));
			MetaData->SetValue(NewProp_PointAttractorRadiusSq, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_PointAttractorRadiusSq, TEXT("ToolTip"), TEXT("Point attractor radius, squared."));
			MetaData->SetValue(NewProp_PointAttractorPosition, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_PointAttractorPosition, TEXT("ToolTip"), TEXT("Point attractor position."));
			MetaData->SetValue(NewProp_ConstantAcceleration, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_ConstantAcceleration, TEXT("ToolTip"), TEXT("Constant acceleration to apply to particles."));
			MetaData->SetValue(NewProp_Resilience, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_Resilience, TEXT("ToolTip"), TEXT("Damping factor applied to particle collisions."));
			MetaData->SetValue(NewProp_PointAttractorStrength, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_PointAttractorStrength, TEXT("ToolTip"), TEXT("Point attractor strength over time."));
			MetaData->SetValue(NewProp_DragCoefficient, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_DragCoefficient, TEXT("ToolTip"), TEXT("Per-particle drag coefficient."));
			MetaData->SetValue(NewProp_VectorFieldScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_VectorFieldScale, TEXT("ToolTip"), TEXT("Per-particle vector field scale."));
			MetaData->SetValue(NewProp_LocalVectorField, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_LocalVectorField, TEXT("ToolTip"), TEXT("Local vector field info."));
			MetaData->SetValue(NewProp_SpawnModules, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_SpawnModules, TEXT("ToolTip"), TEXT("List of spawn modules that must be evaluated at runtime."));
			MetaData->SetValue(NewProp_SpawnPerUnitModule, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_SpawnPerUnitModule, TEXT("ToolTip"), TEXT("The spawn-per-unit module."));
			MetaData->SetValue(NewProp_SpawnModule, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_SpawnModule, TEXT("ToolTip"), TEXT("The spawn module. Needed for now, but should be divorced from the runtime."));
			MetaData->SetValue(NewProp_RequiredModule, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_RequiredModule, TEXT("ToolTip"), TEXT("The required module. Needed for now, but should be divorced from the runtime."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FGPUSpriteEmitterInfo_CRC() { return 1719502880U; }
	UScriptStruct* Z_Construct_UScriptStruct_FGPUSpriteLocalVectorFieldInfo()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FGPUSpriteLocalVectorFieldInfo_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("GPUSpriteLocalVectorFieldInfo"), sizeof(FGPUSpriteLocalVectorFieldInfo), Get_Z_Construct_UScriptStruct_FGPUSpriteLocalVectorFieldInfo_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GPUSpriteLocalVectorFieldInfo"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FGPUSpriteLocalVectorFieldInfo>, EStructFlags(0x00000001));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTileZ, FGPUSpriteLocalVectorFieldInfo, uint8);
			UProperty* NewProp_bTileZ = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bTileZ"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTileZ, FGPUSpriteLocalVectorFieldInfo), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bTileZ, FGPUSpriteLocalVectorFieldInfo), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTileY, FGPUSpriteLocalVectorFieldInfo, uint8);
			UProperty* NewProp_bTileY = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bTileY"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTileY, FGPUSpriteLocalVectorFieldInfo), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bTileY, FGPUSpriteLocalVectorFieldInfo), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTileX, FGPUSpriteLocalVectorFieldInfo, uint8);
			UProperty* NewProp_bTileX = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bTileX"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTileX, FGPUSpriteLocalVectorFieldInfo), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bTileX, FGPUSpriteLocalVectorFieldInfo), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIgnoreComponentTransform, FGPUSpriteLocalVectorFieldInfo, uint8);
			UProperty* NewProp_bIgnoreComponentTransform = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bIgnoreComponentTransform"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIgnoreComponentTransform, FGPUSpriteLocalVectorFieldInfo), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bIgnoreComponentTransform, FGPUSpriteLocalVectorFieldInfo), sizeof(uint8), false);
			UProperty* NewProp_Tightness = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Tightness"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Tightness, FGPUSpriteLocalVectorFieldInfo), 0x0000000000000000);
			UProperty* NewProp_Intensity = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Intensity"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Intensity, FGPUSpriteLocalVectorFieldInfo), 0x0000000000000000);
			UProperty* NewProp_RotationRate = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RotationRate"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(RotationRate, FGPUSpriteLocalVectorFieldInfo), 0x0000000000000000, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_MaxInitialRotation = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MaxInitialRotation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MaxInitialRotation, FGPUSpriteLocalVectorFieldInfo), 0x0000000000000000, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_MinInitialRotation = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MinInitialRotation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MinInitialRotation, FGPUSpriteLocalVectorFieldInfo), 0x0000000000000000, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_Transform = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Transform"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Transform, FGPUSpriteLocalVectorFieldInfo), 0x0000000000000000, Z_Construct_UScriptStruct_FTransform());
			UProperty* NewProp_Field = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Field"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Field, FGPUSpriteLocalVectorFieldInfo), 0x0000000000000000, Z_Construct_UClass_UVectorField_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Data needed for local vector fields."));
			MetaData->SetValue(NewProp_bTileZ, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_bTileZ, TEXT("ToolTip"), TEXT("Tile vector field in z axis?"));
			MetaData->SetValue(NewProp_bTileY, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_bTileY, TEXT("ToolTip"), TEXT("Tile vector field in y axis?"));
			MetaData->SetValue(NewProp_bTileX, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_bTileX, TEXT("ToolTip"), TEXT("Tile vector field in x axis?"));
			MetaData->SetValue(NewProp_bIgnoreComponentTransform, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_bIgnoreComponentTransform, TEXT("ToolTip"), TEXT("Ignore Components Transform"));
			MetaData->SetValue(NewProp_Tightness, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_Tightness, TEXT("ToolTip"), TEXT("Local vector field tightness."));
			MetaData->SetValue(NewProp_Intensity, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_Intensity, TEXT("ToolTip"), TEXT("Local vector field intensity."));
			MetaData->SetValue(NewProp_RotationRate, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_RotationRate, TEXT("ToolTip"), TEXT("Local vector field rotation rate."));
			MetaData->SetValue(NewProp_MaxInitialRotation, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_MaxInitialRotation, TEXT("ToolTip"), TEXT("Maximum initial rotation."));
			MetaData->SetValue(NewProp_MinInitialRotation, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_MinInitialRotation, TEXT("ToolTip"), TEXT("Minimum initial rotation."));
			MetaData->SetValue(NewProp_Transform, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_Transform, TEXT("ToolTip"), TEXT("Local vector field transform."));
			MetaData->SetValue(NewProp_Field, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_Field, TEXT("ToolTip"), TEXT("Local vector field to apply to this emitter."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FGPUSpriteLocalVectorFieldInfo_CRC() { return 3311336800U; }
	UClass* Z_Construct_UClass_UParticleModuleTypeDataGpu_NoRegister()
	{
		return UParticleModuleTypeDataGpu::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleTypeDataGpu()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleTypeDataBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleTypeDataGpu::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bClearExistingParticlesOnInit, UParticleModuleTypeDataGpu, uint8);
				UProperty* NewProp_bClearExistingParticlesOnInit = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bClearExistingParticlesOnInit"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bClearExistingParticlesOnInit, UParticleModuleTypeDataGpu), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bClearExistingParticlesOnInit, UParticleModuleTypeDataGpu), sizeof(uint8), false);
				UProperty* NewProp_CameraMotionBlurAmount = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CameraMotionBlurAmount"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(CameraMotionBlurAmount, UParticleModuleTypeDataGpu), 0x0000000000000001);
				UProperty* NewProp_ResourceData = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ResourceData"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ResourceData, UParticleModuleTypeDataGpu), 0x0000000000002000, Z_Construct_UScriptStruct_FGPUSpriteResourceData());
				UProperty* NewProp_EmitterInfo = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EmitterInfo"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(EmitterInfo, UParticleModuleTypeDataGpu), 0x0000008000002000, Z_Construct_UScriptStruct_FGPUSpriteEmitterInfo());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("GPU Sprites"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/TypeData/ParticleModuleTypeDataGpu.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
				MetaData->SetValue(NewProp_bClearExistingParticlesOnInit, TEXT("Category"), TEXT("ParticleModuleTypeDataGpu"));
				MetaData->SetValue(NewProp_bClearExistingParticlesOnInit, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
				MetaData->SetValue(NewProp_bClearExistingParticlesOnInit, TEXT("ToolTip"), TEXT("When true, all existing partilces are cleared when the emitter is initialized."));
				MetaData->SetValue(NewProp_CameraMotionBlurAmount, TEXT("Category"), TEXT("ParticleModuleTypeDataGpu"));
				MetaData->SetValue(NewProp_CameraMotionBlurAmount, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
				MetaData->SetValue(NewProp_CameraMotionBlurAmount, TEXT("ToolTip"), TEXT("TEMP: How much to stretch sprites based on camera motion blur."));
				MetaData->SetValue(NewProp_ResourceData, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
				MetaData->SetValue(NewProp_ResourceData, TEXT("ToolTip"), TEXT("Data used to initialize runtime resources."));
				MetaData->SetValue(NewProp_EmitterInfo, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
				MetaData->SetValue(NewProp_EmitterInfo, TEXT("ToolTip"), TEXT("Information for runtime simulation."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleTypeDataGpu(Z_Construct_UClass_UParticleModuleTypeDataGpu, TEXT("UParticleModuleTypeDataGpu"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleTypeDataGpu);
	UEnum* Z_Construct_UEnum_Engine_EMeshCameraFacingOptions()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EMeshCameraFacingOptions_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EMeshCameraFacingOptions"), 0, Get_Z_Construct_UEnum_Engine_EMeshCameraFacingOptions_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EMeshCameraFacingOptions"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("XAxisFacing_NoUp")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("XAxisFacing_ZUp")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("XAxisFacing_NegativeZUp")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("XAxisFacing_YUp")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("XAxisFacing_NegativeYUp")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("LockedAxis_ZAxisFacing")), 5));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("LockedAxis_NegativeZAxisFacing")), 6));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("LockedAxis_YAxisFacing")), 7));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("LockedAxis_NegativeYAxisFacing")), 8));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("VelocityAligned_ZAxisFacing")), 9));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("VelocityAligned_NegativeZAxisFacing")), 10));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("VelocityAligned_YAxisFacing")), 11));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("VelocityAligned_NegativeYAxisFacing")), 12));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EMeshCameraFacingOptions_MAX")), 13));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("LockedAxis_NegativeYAxisFacing.DisplayName"), TEXT("Locked Axis : -Y Axis Facing"));
			MetaData->SetValue(ReturnEnum, TEXT("LockedAxis_NegativeZAxisFacing.DisplayName"), TEXT("Locked Axis : -Z Axis Facing"));
			MetaData->SetValue(ReturnEnum, TEXT("LockedAxis_YAxisFacing.DisplayName"), TEXT("Locked Axis : Y Axis Facing"));
			MetaData->SetValue(ReturnEnum, TEXT("LockedAxis_ZAxisFacing.DisplayName"), TEXT("Locked Axis : Z Axis Facing"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataMesh.h"));
			MetaData->SetValue(ReturnEnum, TEXT("VelocityAligned_NegativeYAxisFacing.DisplayName"), TEXT("Velocity Aligned : -Y Axis Facing"));
			MetaData->SetValue(ReturnEnum, TEXT("VelocityAligned_NegativeZAxisFacing.DisplayName"), TEXT("Velocity Aligned : -Z Axis Facing"));
			MetaData->SetValue(ReturnEnum, TEXT("VelocityAligned_YAxisFacing.DisplayName"), TEXT("Velocity Aligned : Y Axis Facing"));
			MetaData->SetValue(ReturnEnum, TEXT("VelocityAligned_ZAxisFacing.DisplayName"), TEXT("Velocity Aligned : Z Axis Facing"));
			MetaData->SetValue(ReturnEnum, TEXT("XAxisFacing_NegativeYUp.DisplayName"), TEXT("X Axis Facing : -Y Up"));
			MetaData->SetValue(ReturnEnum, TEXT("XAxisFacing_NegativeZUp.DisplayName"), TEXT("X Axis Facing : -Z Up"));
			MetaData->SetValue(ReturnEnum, TEXT("XAxisFacing_NoUp.DisplayName"), TEXT("X Axis Facing : No Up"));
			MetaData->SetValue(ReturnEnum, TEXT("XAxisFacing_YUp.DisplayName"), TEXT("X Axis Facing : Y Up"));
			MetaData->SetValue(ReturnEnum, TEXT("XAxisFacing_ZUp.DisplayName"), TEXT("X Axis Facing : Z Up"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EMeshCameraFacingOptions_CRC() { return 1581552417U; }
	UEnum* Z_Construct_UEnum_Engine_EMeshCameraFacingUpAxis()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EMeshCameraFacingUpAxis_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EMeshCameraFacingUpAxis"), 0, Get_Z_Construct_UEnum_Engine_EMeshCameraFacingUpAxis_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EMeshCameraFacingUpAxis"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("CameraFacing_NoneUP")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("CameraFacing_ZUp")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("CameraFacing_NegativeZUp")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("CameraFacing_YUp")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("CameraFacing_NegativeYUp")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("CameraFacing_MAX")), 5));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("CameraFacing_NegativeYUp.DisplayName"), TEXT("-Y Up"));
			MetaData->SetValue(ReturnEnum, TEXT("CameraFacing_NegativeZUp.DisplayName"), TEXT("-Z Up"));
			MetaData->SetValue(ReturnEnum, TEXT("CameraFacing_NoneUP.DisplayName"), TEXT("None"));
			MetaData->SetValue(ReturnEnum, TEXT("CameraFacing_YUp.DisplayName"), TEXT("Y Up"));
			MetaData->SetValue(ReturnEnum, TEXT("CameraFacing_ZUp.DisplayName"), TEXT("Z Up"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataMesh.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EMeshCameraFacingUpAxis_CRC() { return 4165279178U; }
	UEnum* Z_Construct_UEnum_Engine_EMeshScreenAlignment()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EMeshScreenAlignment_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EMeshScreenAlignment"), 0, Get_Z_Construct_UEnum_Engine_EMeshScreenAlignment_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EMeshScreenAlignment"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PSMA_MeshFaceCameraWithRoll")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PSMA_MeshFaceCameraWithSpin")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PSMA_MeshFaceCameraWithLockedAxis")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PSMA_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataMesh.h"));
			MetaData->SetValue(ReturnEnum, TEXT("PSMA_MeshFaceCameraWithLockedAxis.DisplayName"), TEXT("Face Camera With Locked-Axis"));
			MetaData->SetValue(ReturnEnum, TEXT("PSMA_MeshFaceCameraWithRoll.DisplayName"), TEXT("Face Camera With Roll"));
			MetaData->SetValue(ReturnEnum, TEXT("PSMA_MeshFaceCameraWithSpin.DisplayName"), TEXT("Face Camera With Spin"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EMeshScreenAlignment_CRC() { return 2570174245U; }
	UClass* Z_Construct_UClass_UParticleModuleTypeDataMesh_NoRegister()
	{
		return UParticleModuleTypeDataMesh::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleTypeDataMesh()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleTypeDataBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleTypeDataMesh::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCollisionsConsiderPartilceSize, UParticleModuleTypeDataMesh, uint8);
				UProperty* NewProp_bCollisionsConsiderPartilceSize = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bCollisionsConsiderPartilceSize"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCollisionsConsiderPartilceSize, UParticleModuleTypeDataMesh), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bCollisionsConsiderPartilceSize, UParticleModuleTypeDataMesh), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bFaceCameraDirectionRatherThanPosition, UParticleModuleTypeDataMesh, uint8);
				UProperty* NewProp_bFaceCameraDirectionRatherThanPosition = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bFaceCameraDirectionRatherThanPosition"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bFaceCameraDirectionRatherThanPosition, UParticleModuleTypeDataMesh), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bFaceCameraDirectionRatherThanPosition, UParticleModuleTypeDataMesh), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bApplyParticleRotationAsSpin, UParticleModuleTypeDataMesh, uint8);
				UProperty* NewProp_bApplyParticleRotationAsSpin = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bApplyParticleRotationAsSpin"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bApplyParticleRotationAsSpin, UParticleModuleTypeDataMesh), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bApplyParticleRotationAsSpin, UParticleModuleTypeDataMesh), sizeof(uint8), false);
				UProperty* NewProp_CameraFacingOption = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CameraFacingOption"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(CameraFacingOption, UParticleModuleTypeDataMesh), 0x0000000000000001, Z_Construct_UEnum_Engine_EMeshCameraFacingOptions());
				UProperty* NewProp_CameraFacingUpAxisOption = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CameraFacingUpAxisOption"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(CameraFacingUpAxisOption_DEPRECATED, UParticleModuleTypeDataMesh), 0x0000000020000000, Z_Construct_UEnum_Engine_EMeshCameraFacingUpAxis());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCameraFacing, UParticleModuleTypeDataMesh, uint8);
				UProperty* NewProp_bCameraFacing = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bCameraFacing"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCameraFacing, UParticleModuleTypeDataMesh), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bCameraFacing, UParticleModuleTypeDataMesh), sizeof(uint8), false);
				UProperty* NewProp_AxisLockOption = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AxisLockOption"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(AxisLockOption, UParticleModuleTypeDataMesh), 0x0000000000000001, Z_Construct_UEnum_Engine_EParticleAxisLock());
				UProperty* NewProp_RollPitchYawRange = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RollPitchYawRange"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(RollPitchYawRange, UParticleModuleTypeDataMesh), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
				UProperty* NewProp_Yaw = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Yaw"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Yaw_DEPRECATED, UParticleModuleTypeDataMesh), 0x0000000020000000);
				UProperty* NewProp_Roll = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Roll"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Roll_DEPRECATED, UParticleModuleTypeDataMesh), 0x0000000020000000);
				UProperty* NewProp_Pitch = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Pitch"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Pitch_DEPRECATED, UParticleModuleTypeDataMesh), 0x0000000020000000);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverrideMaterial, UParticleModuleTypeDataMesh, uint8);
				UProperty* NewProp_bOverrideMaterial = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bOverrideMaterial"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverrideMaterial, UParticleModuleTypeDataMesh), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bOverrideMaterial, UParticleModuleTypeDataMesh), sizeof(uint8), false);
				UProperty* NewProp_MeshAlignment = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MeshAlignment"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(MeshAlignment, UParticleModuleTypeDataMesh), 0x0000000000000001, Z_Construct_UEnum_Engine_EMeshScreenAlignment());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(DoCollisions, UParticleModuleTypeDataMesh, uint8);
				UProperty* NewProp_DoCollisions = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DoCollisions"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(DoCollisions, UParticleModuleTypeDataMesh), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(DoCollisions, UParticleModuleTypeDataMesh), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(CastShadows, UParticleModuleTypeDataMesh, uint8);
				UProperty* NewProp_CastShadows = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CastShadows"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(CastShadows, UParticleModuleTypeDataMesh), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(CastShadows, UParticleModuleTypeDataMesh), sizeof(uint8), false);
				UProperty* NewProp_Mesh = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Mesh"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Mesh, UParticleModuleTypeDataMesh), 0x0000000000000001, Z_Construct_UClass_UStaticMesh_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Mesh Data"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/TypeData/ParticleModuleTypeDataMesh.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataMesh.h"));
				MetaData->SetValue(NewProp_bCollisionsConsiderPartilceSize, TEXT("Category"), TEXT("Collision"));
				MetaData->SetValue(NewProp_bCollisionsConsiderPartilceSize, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataMesh.h"));
				MetaData->SetValue(NewProp_bCollisionsConsiderPartilceSize, TEXT("ToolTip"), TEXT("If true, all collisions for mesh particle on this emitter will take the particle size into account.\nIf false, particle size will be ignored in collision checks."));
				MetaData->SetValue(NewProp_bFaceCameraDirectionRatherThanPosition, TEXT("Category"), TEXT("CameraFacing"));
				MetaData->SetValue(NewProp_bFaceCameraDirectionRatherThanPosition, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataMesh.h"));
				MetaData->SetValue(NewProp_bFaceCameraDirectionRatherThanPosition, TEXT("ToolTip"), TEXT("If true, all camera facing options will point the mesh against the camera's view direction rather than pointing at the cameras location.\nIf false, the camera facing will point to the cameras position as normal."));
				MetaData->SetValue(NewProp_bApplyParticleRotationAsSpin, TEXT("Category"), TEXT("CameraFacing"));
				MetaData->SetValue(NewProp_bApplyParticleRotationAsSpin, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataMesh.h"));
				MetaData->SetValue(NewProp_bApplyParticleRotationAsSpin, TEXT("ToolTip"), TEXT("If true, apply 'sprite' particle rotation about the orientation axis (direction mesh is pointing).\nIf false, apply 'sprite' particle rotation about the camera facing axis."));
				MetaData->SetValue(NewProp_CameraFacingOption, TEXT("Category"), TEXT("CameraFacing"));
				MetaData->SetValue(NewProp_CameraFacingOption, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataMesh.h"));
				MetaData->SetValue(NewProp_CameraFacingOption, TEXT("ToolTip"), TEXT("The camera facing option to use:\nAll camera facing options without locked axis assume X-axis will be facing the camera.\n        XAxisFacing_NoUp                                - X-axis camera facing, no attempt to face an axis up or down.\n        XAxisFacing_ZUp                                 - X-axis camera facing, Z-axis of the mesh should attempt to point up.\n        XAxisFacing_NegativeZUp                 - X-axis camera facing, Z-axis of the mesh should attempt to point down.\n        XAxisFacing_YUp                                 - X-axis camera facing, Y-axis of the mesh should attempt to point up.\n        XAxisFacing_NegativeYUp                 - X-axis camera facing, Y-axis of the mesh should attempt to point down.\nAll axis-locked camera facing options assume the AxisLockOption is set. EPAL_NONE will be treated as EPAL_X.\n        LockedAxis_ZAxisFacing                  - X-axis locked on AxisLockOption axis, rotate Z-axis of the mesh to face towards camera.\n        LockedAxis_NegativeZAxisFacing  - X-axis locked on AxisLockOption axis, rotate Z-axis of the mesh to face away from camera.\n        LockedAxis_YAxisFacing                  - X-axis locked on AxisLockOption axis, rotate Y-axis of the mesh to face towards camera.\n        LockedAxis_NegativeYAxisFacing  - X-axis locked on AxisLockOption axis, rotate Y-axis of the mesh to face away from camera.\nAll velocity-aligned options do NOT require the ScreenAlignment be set to PSA_Velocity.\nDoing so will result in additional work being performed... (it will orient the mesh twice).\n        VelocityAligned_ZAxisFacing         - X-axis aligned to the velocity, rotate the Z-axis of the mesh to face towards camera.\n        VelocityAligned_NegativeZAxisFacing - X-axis aligned to the velocity, rotate the Z-axis of the mesh to face away from camera.\n        VelocityAligned_YAxisFacing         - X-axis aligned to the velocity, rotate the Y-axis of the mesh to face towards camera.\n        VelocityAligned_NegativeYAxisFacing - X-axis aligned to the velocity, rotate the Y-axis of the mesh to face away from camera."));
				MetaData->SetValue(NewProp_CameraFacingUpAxisOption, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataMesh.h"));
				MetaData->SetValue(NewProp_CameraFacingUpAxisOption, TEXT("ToolTip"), TEXT("The axis of the mesh to point up when camera facing the X-axis.\n        CameraFacing_NoneUP                     No attempt to face an axis up or down.\n        CameraFacing_ZUp                        Z-axis of the mesh should attempt to point up.\n        CameraFacing_NegativeZUp        Z-axis of the mesh should attempt to point down.\n        CameraFacing_YUp                        Y-axis of the mesh should attempt to point up.\n        CameraFacing_NegativeYUp        Y-axis of the mesh should attempt to point down."));
				MetaData->SetValue(NewProp_bCameraFacing, TEXT("Category"), TEXT("CameraFacing"));
				MetaData->SetValue(NewProp_bCameraFacing, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataMesh.h"));
				MetaData->SetValue(NewProp_bCameraFacing, TEXT("ToolTip"), TEXT("If true, then point the X-axis of the mesh towards the camera.\nWhen set, AxisLockOption as well as all other locked axis/screen alignment settings are ignored."));
				MetaData->SetValue(NewProp_AxisLockOption, TEXT("Category"), TEXT("Orientation"));
				MetaData->SetValue(NewProp_AxisLockOption, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataMesh.h"));
				MetaData->SetValue(NewProp_AxisLockOption, TEXT("ToolTip"), TEXT("The axis to lock the mesh on. This overrides TypeSpecific mesh alignment as well as the LockAxis module.\n        EPAL_NONE                -      No locking to an axis.\n        EPAL_X                   -      Lock the mesh X-axis facing towards +X.\n        EPAL_Y                   -      Lock the mesh X-axis facing towards +Y.\n        EPAL_Z                   -      Lock the mesh X-axis facing towards +Z.\n        EPAL_NEGATIVE_X  -      Lock the mesh X-axis facing towards -X.\n        EPAL_NEGATIVE_Y  -      Lock the mesh X-axis facing towards -Y.\n        EPAL_NEGATIVE_Z  -      Lock the mesh X-axis facing towards -Z.\n        EPAL_ROTATE_X    -      Ignored for mesh emitters. Treated as EPAL_NONE.\n        EPAL_ROTATE_Y    -      Ignored for mesh emitters. Treated as EPAL_NONE.\n        EPAL_ROTATE_Z    -      Ignored for mesh emitters. Treated as EPAL_NONE."));
				MetaData->SetValue(NewProp_RollPitchYawRange, TEXT("Category"), TEXT("Orientation"));
				MetaData->SetValue(NewProp_RollPitchYawRange, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataMesh.h"));
				MetaData->SetValue(NewProp_RollPitchYawRange, TEXT("ToolTip"), TEXT("The 'pre' rotation pitch (in degrees) to apply to the static mesh used."));
				MetaData->SetValue(NewProp_Yaw, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataMesh.h"));
				MetaData->SetValue(NewProp_Roll, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataMesh.h"));
				MetaData->SetValue(NewProp_Pitch, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataMesh.h"));
				MetaData->SetValue(NewProp_Pitch, TEXT("ToolTip"), TEXT("deprecated properties for initial orientation"));
				MetaData->SetValue(NewProp_bOverrideMaterial, TEXT("Category"), TEXT("Mesh"));
				MetaData->SetValue(NewProp_bOverrideMaterial, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataMesh.h"));
				MetaData->SetValue(NewProp_bOverrideMaterial, TEXT("ToolTip"), TEXT("If true, use the emitter material when rendering rather than the one applied\nto the static mesh model."));
				MetaData->SetValue(NewProp_MeshAlignment, TEXT("Category"), TEXT("Mesh"));
				MetaData->SetValue(NewProp_MeshAlignment, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataMesh.h"));
				MetaData->SetValue(NewProp_MeshAlignment, TEXT("ToolTip"), TEXT("The alignment to use on the meshes emitted.\nThe RequiredModule->ScreenAlignment MUST be set to PSA_TypeSpecific to use.\nOne of the following:\nPSMA_MeshFaceCameraWithRoll\n        Face the camera allowing for rotation around the mesh-to-camera FVector\n        (amount provided by the standard particle sprite rotation).\nPSMA_MeshFaceCameraWithSpin\n        Face the camera allowing for the mesh to rotate about the tangential axis.\nPSMA_MeshFaceCameraWithLockedAxis\n        Face the camera while maintaining the up FVector as the locked direction."));
				MetaData->SetValue(NewProp_DoCollisions, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataMesh.h"));
				MetaData->SetValue(NewProp_DoCollisions, TEXT("ToolTip"), TEXT("UNUSED (the collision module dictates doing collisions)"));
				MetaData->SetValue(NewProp_CastShadows, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataMesh.h"));
				MetaData->SetValue(NewProp_CastShadows, TEXT("ToolTip"), TEXT("If true, has the meshes cast shadows"));
				MetaData->SetValue(NewProp_Mesh, TEXT("Category"), TEXT("Mesh"));
				MetaData->SetValue(NewProp_Mesh, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataMesh.h"));
				MetaData->SetValue(NewProp_Mesh, TEXT("ToolTip"), TEXT("The static mesh to render at the particle positions"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleTypeDataMesh(Z_Construct_UClass_UParticleModuleTypeDataMesh, TEXT("UParticleModuleTypeDataMesh"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleTypeDataMesh);
	UEnum* Z_Construct_UEnum_Engine_ETrailsRenderAxisOption()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_ETrailsRenderAxisOption_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ETrailsRenderAxisOption"), 0, Get_Z_Construct_UEnum_Engine_ETrailsRenderAxisOption_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ETrailsRenderAxisOption"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("Trails_CameraUp")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("Trails_SourceUp")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("Trails_WorldUp")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("Trails_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataRibbon.h"));
			MetaData->SetValue(ReturnEnum, TEXT("Trails_CameraUp.DisplayName"), TEXT("Camera Up"));
			MetaData->SetValue(ReturnEnum, TEXT("Trails_SourceUp.DisplayName"), TEXT("Source Up"));
			MetaData->SetValue(ReturnEnum, TEXT("Trails_WorldUp.DisplayName"), TEXT("World Up"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_ETrailsRenderAxisOption_CRC() { return 1849401960U; }
	UClass* Z_Construct_UClass_UParticleModuleTypeDataRibbon_NoRegister()
	{
		return UParticleModuleTypeDataRibbon::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleTypeDataRibbon()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleTypeDataBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleTypeDataRibbon::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20081080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_TangentTessellationScalar = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TangentTessellationScalar"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(TangentTessellationScalar, UParticleModuleTypeDataRibbon), 0x0000000000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnableTangentDiffInterpScale, UParticleModuleTypeDataRibbon, uint8);
				UProperty* NewProp_bEnableTangentDiffInterpScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bEnableTangentDiffInterpScale"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnableTangentDiffInterpScale, UParticleModuleTypeDataRibbon), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bEnableTangentDiffInterpScale, UParticleModuleTypeDataRibbon), sizeof(uint8), false);
				UProperty* NewProp_DistanceTessellationStepSize = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DistanceTessellationStepSize"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DistanceTessellationStepSize, UParticleModuleTypeDataRibbon), 0x0000000000000001);
				UProperty* NewProp_TilingDistance = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TilingDistance"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(TilingDistance, UParticleModuleTypeDataRibbon), 0x0000000000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bRenderTessellation, UParticleModuleTypeDataRibbon, uint8);
				UProperty* NewProp_bRenderTessellation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bRenderTessellation"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bRenderTessellation, UParticleModuleTypeDataRibbon), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bRenderTessellation, UParticleModuleTypeDataRibbon), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bRenderTangents, UParticleModuleTypeDataRibbon, uint8);
				UProperty* NewProp_bRenderTangents = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bRenderTangents"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bRenderTangents, UParticleModuleTypeDataRibbon), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bRenderTangents, UParticleModuleTypeDataRibbon), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bRenderSpawnPoints, UParticleModuleTypeDataRibbon, uint8);
				UProperty* NewProp_bRenderSpawnPoints = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bRenderSpawnPoints"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bRenderSpawnPoints, UParticleModuleTypeDataRibbon), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bRenderSpawnPoints, UParticleModuleTypeDataRibbon), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bRenderGeometry, UParticleModuleTypeDataRibbon, uint8);
				UProperty* NewProp_bRenderGeometry = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bRenderGeometry"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bRenderGeometry, UParticleModuleTypeDataRibbon), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bRenderGeometry, UParticleModuleTypeDataRibbon), sizeof(uint8), false);
				UProperty* NewProp_TangentSpawningScalar = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TangentSpawningScalar"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(TangentSpawningScalar, UParticleModuleTypeDataRibbon), 0x0000000000000001);
				UProperty* NewProp_RenderAxis = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RenderAxis"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(RenderAxis, UParticleModuleTypeDataRibbon), 0x0000000000000001, Z_Construct_UEnum_Engine_ETrailsRenderAxisOption());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSpawnInitialParticle, UParticleModuleTypeDataRibbon, uint8);
				UProperty* NewProp_bSpawnInitialParticle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bSpawnInitialParticle"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSpawnInitialParticle, UParticleModuleTypeDataRibbon), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bSpawnInitialParticle, UParticleModuleTypeDataRibbon), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTangentRecalculationEveryFrame, UParticleModuleTypeDataRibbon, uint8);
				UProperty* NewProp_bTangentRecalculationEveryFrame = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bTangentRecalculationEveryFrame"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTangentRecalculationEveryFrame, UParticleModuleTypeDataRibbon), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bTangentRecalculationEveryFrame, UParticleModuleTypeDataRibbon), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnablePreviousTangentRecalculation, UParticleModuleTypeDataRibbon, uint8);
				UProperty* NewProp_bEnablePreviousTangentRecalculation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bEnablePreviousTangentRecalculation"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnablePreviousTangentRecalculation, UParticleModuleTypeDataRibbon), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bEnablePreviousTangentRecalculation, UParticleModuleTypeDataRibbon), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bClipSourceSegement, UParticleModuleTypeDataRibbon, uint8);
				UProperty* NewProp_bClipSourceSegement = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bClipSourceSegement"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bClipSourceSegement, UParticleModuleTypeDataRibbon), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bClipSourceSegement, UParticleModuleTypeDataRibbon), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDeadTrailsOnSourceLoss, UParticleModuleTypeDataRibbon, uint8);
				UProperty* NewProp_bDeadTrailsOnSourceLoss = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bDeadTrailsOnSourceLoss"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDeadTrailsOnSourceLoss, UParticleModuleTypeDataRibbon), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bDeadTrailsOnSourceLoss, UParticleModuleTypeDataRibbon), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDeadTrailsOnDeactivate, UParticleModuleTypeDataRibbon, uint8);
				UProperty* NewProp_bDeadTrailsOnDeactivate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bDeadTrailsOnDeactivate"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDeadTrailsOnDeactivate, UParticleModuleTypeDataRibbon), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bDeadTrailsOnDeactivate, UParticleModuleTypeDataRibbon), sizeof(uint8), false);
				UProperty* NewProp_MaxParticleInTrailCount = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxParticleInTrailCount"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MaxParticleInTrailCount, UParticleModuleTypeDataRibbon), 0x0000000000000001);
				UProperty* NewProp_MaxTrailCount = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxTrailCount"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MaxTrailCount, UParticleModuleTypeDataRibbon), 0x0000000000000001);
				UProperty* NewProp_SheetsPerTrail = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SheetsPerTrail"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(SheetsPerTrail, UParticleModuleTypeDataRibbon), 0x0000000000000001);
				UProperty* NewProp_MaxTessellationBetweenParticles = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxTessellationBetweenParticles"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MaxTessellationBetweenParticles, UParticleModuleTypeDataRibbon), 0x0000000000000000);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Ribbon Data"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/TypeData/ParticleModuleTypeDataRibbon.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataRibbon.h"));
				MetaData->SetValue(NewProp_TangentTessellationScalar, TEXT("Category"), TEXT("Rendering"));
				MetaData->SetValue(NewProp_TangentTessellationScalar, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataRibbon.h"));
				MetaData->SetValue(NewProp_TangentTessellationScalar, TEXT("ToolTip"), TEXT("The tangent scalar for tessellation.\nAngles between tangent A and B are mapped to [0.0f .. 1.0f]\nThis is then multiplied by TangentTessellationScalar to give the number of points to tessellate"));
				MetaData->SetValue(NewProp_bEnableTangentDiffInterpScale, TEXT("Category"), TEXT("Rendering"));
				MetaData->SetValue(NewProp_bEnableTangentDiffInterpScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataRibbon.h"));
				MetaData->SetValue(NewProp_bEnableTangentDiffInterpScale, TEXT("ToolTip"), TEXT("If this flag is enabled, the system will scale the number of interpolated vertices\nbased on the difference in the tangents of neighboring particles.\nEach pair of neighboring particles will compute the following CheckTangent value:\n        CheckTangent = ((ParticleA Tangent DOT ParticleB Tangent) - 1.0f) * 0.5f\nIf CheckTangent is LESS THAN 0.5, then the DistanceTessellationStepSize will be\nscaled based on the result. This will map so that from parallel to orthogonal\n(0..90 degrees) will scale from [0..1]. Anything greater than 90 degrees will clamp\nat a scale of 1."));
				MetaData->SetValue(NewProp_DistanceTessellationStepSize, TEXT("Category"), TEXT("Rendering"));
				MetaData->SetValue(NewProp_DistanceTessellationStepSize, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataRibbon.h"));
				MetaData->SetValue(NewProp_DistanceTessellationStepSize, TEXT("ToolTip"), TEXT("The distance step size for tessellation.\n# Tessellation Points = TruncToInt((Distance Between Spawned Particles) / DistanceTessellationStepSize))"));
				MetaData->SetValue(NewProp_TilingDistance, TEXT("Category"), TEXT("Rendering"));
				MetaData->SetValue(NewProp_TilingDistance, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataRibbon.h"));
				MetaData->SetValue(NewProp_TilingDistance, TEXT("ToolTip"), TEXT("The (estimated) covered distance to tile the 2nd UV set at.\nIf 0.0, a second UV set will not be passed in."));
				MetaData->SetValue(NewProp_bRenderTessellation, TEXT("Category"), TEXT("Rendering"));
				MetaData->SetValue(NewProp_bRenderTessellation, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataRibbon.h"));
				MetaData->SetValue(NewProp_bRenderTessellation, TEXT("ToolTip"), TEXT("If true, render the tessellated path between spawned particles"));
				MetaData->SetValue(NewProp_bRenderTangents, TEXT("Category"), TEXT("Rendering"));
				MetaData->SetValue(NewProp_bRenderTangents, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataRibbon.h"));
				MetaData->SetValue(NewProp_bRenderTangents, TEXT("ToolTip"), TEXT("If true, render a line showing the tangent at each spawned particle point along the trail"));
				MetaData->SetValue(NewProp_bRenderSpawnPoints, TEXT("Category"), TEXT("Rendering"));
				MetaData->SetValue(NewProp_bRenderSpawnPoints, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataRibbon.h"));
				MetaData->SetValue(NewProp_bRenderSpawnPoints, TEXT("ToolTip"), TEXT("If true, render stars at each spawned particle point along the trail"));
				MetaData->SetValue(NewProp_bRenderGeometry, TEXT("Category"), TEXT("Rendering"));
				MetaData->SetValue(NewProp_bRenderGeometry, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataRibbon.h"));
				MetaData->SetValue(NewProp_bRenderGeometry, TEXT("ToolTip"), TEXT("If true, render the trail geometry (this should typically be on)"));
				MetaData->SetValue(NewProp_TangentSpawningScalar, TEXT("Category"), TEXT("Spawn"));
				MetaData->SetValue(NewProp_TangentSpawningScalar, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataRibbon.h"));
				MetaData->SetValue(NewProp_TangentSpawningScalar, TEXT("ToolTip"), TEXT("The tangent scalar for spawning.\nAngles between tangent A and B are mapped to [0.0f .. 1.0f]\nThis is then multiplied by TangentTessellationScalar to give the number of particles to spawn"));
				MetaData->SetValue(NewProp_RenderAxis, TEXT("Category"), TEXT("Trail"));
				MetaData->SetValue(NewProp_RenderAxis, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataRibbon.h"));
				MetaData->SetValue(NewProp_RenderAxis, TEXT("ToolTip"), TEXT("The 'render' axis for the trail (what axis the trail is stretched out on)\n        Trails_CameraUp - Traditional camera-facing trail.\n        Trails_SourceUp - Use the up axis of the source for each spawned particle.\n        Trails_WorldUp  - Use the world up axis."));
				MetaData->SetValue(NewProp_bSpawnInitialParticle, TEXT("Category"), TEXT("Trail"));
				MetaData->SetValue(NewProp_bSpawnInitialParticle, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataRibbon.h"));
				MetaData->SetValue(NewProp_bSpawnInitialParticle, TEXT("ToolTip"), TEXT("If true, ribbon will spawn a particle when it first starts moving"));
				MetaData->SetValue(NewProp_bTangentRecalculationEveryFrame, TEXT("Category"), TEXT("Trail"));
				MetaData->SetValue(NewProp_bTangentRecalculationEveryFrame, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataRibbon.h"));
				MetaData->SetValue(NewProp_bTangentRecalculationEveryFrame, TEXT("ToolTip"), TEXT("If true, recalculate tangents every frame to allow velocity/acceleration to be applied"));
				MetaData->SetValue(NewProp_bEnablePreviousTangentRecalculation, TEXT("Category"), TEXT("Trail"));
				MetaData->SetValue(NewProp_bEnablePreviousTangentRecalculation, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataRibbon.h"));
				MetaData->SetValue(NewProp_bEnablePreviousTangentRecalculation, TEXT("ToolTip"), TEXT("If true, recalculate the previous tangent when a new particle is spawned"));
				MetaData->SetValue(NewProp_bClipSourceSegement, TEXT("Category"), TEXT("Trail"));
				MetaData->SetValue(NewProp_bClipSourceSegement, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataRibbon.h"));
				MetaData->SetValue(NewProp_bClipSourceSegement, TEXT("ToolTip"), TEXT("If true, do not join the trail to the source position"));
				MetaData->SetValue(NewProp_bDeadTrailsOnSourceLoss, TEXT("Category"), TEXT("Trail"));
				MetaData->SetValue(NewProp_bDeadTrailsOnSourceLoss, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataRibbon.h"));
				MetaData->SetValue(NewProp_bDeadTrailsOnSourceLoss, TEXT("ToolTip"), TEXT("If true, when the source of a trail is 'lost' (ie, the source particle\ndies), mark the current trail as dead."));
				MetaData->SetValue(NewProp_bDeadTrailsOnDeactivate, TEXT("Category"), TEXT("Trail"));
				MetaData->SetValue(NewProp_bDeadTrailsOnDeactivate, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataRibbon.h"));
				MetaData->SetValue(NewProp_bDeadTrailsOnDeactivate, TEXT("ToolTip"), TEXT("If true, when the system is deactivated, mark trails as dead.\nThis means they will still render, but will not have more particles\nadded to them, even if the system re-activates..."));
				MetaData->SetValue(NewProp_MaxParticleInTrailCount, TEXT("Category"), TEXT("Trail"));
				MetaData->SetValue(NewProp_MaxParticleInTrailCount, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataRibbon.h"));
				MetaData->SetValue(NewProp_MaxParticleInTrailCount, TEXT("ToolTip"), TEXT("Max particles per trail"));
				MetaData->SetValue(NewProp_MaxTrailCount, TEXT("Category"), TEXT("Trail"));
				MetaData->SetValue(NewProp_MaxTrailCount, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataRibbon.h"));
				MetaData->SetValue(NewProp_MaxTrailCount, TEXT("ToolTip"), TEXT("The number of live trails"));
				MetaData->SetValue(NewProp_SheetsPerTrail, TEXT("Category"), TEXT("Trail"));
				MetaData->SetValue(NewProp_SheetsPerTrail, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataRibbon.h"));
				MetaData->SetValue(NewProp_SheetsPerTrail, TEXT("ToolTip"), TEXT("The number of sheets to render for the trail."));
				MetaData->SetValue(NewProp_MaxTessellationBetweenParticles, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataRibbon.h"));
				MetaData->SetValue(NewProp_MaxTessellationBetweenParticles, TEXT("ToolTip"), TEXT("The maximum amount to tessellate between two particles of the trail.\nDepending on the distance between the particles and the tangent change, the\nsystem will select a number of tessellation points\n        [0..MaxTessellationBetweenParticles]"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleTypeDataRibbon(Z_Construct_UClass_UParticleModuleTypeDataRibbon, TEXT("UParticleModuleTypeDataRibbon"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleTypeDataRibbon);
	UClass* Z_Construct_UClass_UParticleModuleVectorFieldBase_NoRegister()
	{
		return UParticleModuleVectorFieldBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleVectorFieldBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModule();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleVectorFieldBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20001081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Vector Field"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/VectorField/ParticleModuleVectorFieldBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/VectorField/ParticleModuleVectorFieldBase.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleVectorFieldBase(Z_Construct_UClass_UParticleModuleVectorFieldBase, TEXT("UParticleModuleVectorFieldBase"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleVectorFieldBase);
	UClass* Z_Construct_UClass_UParticleModuleVectorFieldGlobal_NoRegister()
	{
		return UParticleModuleVectorFieldGlobal::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleVectorFieldGlobal()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleVectorFieldBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleVectorFieldGlobal::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20001080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_GlobalVectorFieldTightness = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GlobalVectorFieldTightness"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(GlobalVectorFieldTightness, UParticleModuleVectorFieldGlobal), 0x0000000000000001);
				UProperty* NewProp_GlobalVectorFieldScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GlobalVectorFieldScale"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(GlobalVectorFieldScale, UParticleModuleVectorFieldGlobal), 0x0000000000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverrideGlobalVectorFieldTightness, UParticleModuleVectorFieldGlobal, uint8);
				UProperty* NewProp_bOverrideGlobalVectorFieldTightness = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bOverrideGlobalVectorFieldTightness"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverrideGlobalVectorFieldTightness, UParticleModuleVectorFieldGlobal), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bOverrideGlobalVectorFieldTightness, UParticleModuleVectorFieldGlobal), sizeof(uint8), false);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Global Vector Fields"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/VectorField/ParticleModuleVectorFieldGlobal.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/VectorField/ParticleModuleVectorFieldGlobal.h"));
				MetaData->SetValue(NewProp_GlobalVectorFieldTightness, TEXT("Category"), TEXT("VectorField"));
				MetaData->SetValue(NewProp_GlobalVectorFieldTightness, TEXT("ClampMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_GlobalVectorFieldTightness, TEXT("editcondition"), TEXT("bOverrideGlobalVectorFieldTightness"));
				MetaData->SetValue(NewProp_GlobalVectorFieldTightness, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/VectorField/ParticleModuleVectorFieldGlobal.h"));
				MetaData->SetValue(NewProp_GlobalVectorFieldTightness, TEXT("ToolTip"), TEXT("Global vector field tightness override."));
				MetaData->SetValue(NewProp_GlobalVectorFieldTightness, TEXT("UIMax"), TEXT("1.0"));
				MetaData->SetValue(NewProp_GlobalVectorFieldTightness, TEXT("UIMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_GlobalVectorFieldScale, TEXT("Category"), TEXT("VectorField"));
				MetaData->SetValue(NewProp_GlobalVectorFieldScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/VectorField/ParticleModuleVectorFieldGlobal.h"));
				MetaData->SetValue(NewProp_GlobalVectorFieldScale, TEXT("ToolTip"), TEXT("Global vector field scale."));
				MetaData->SetValue(NewProp_bOverrideGlobalVectorFieldTightness, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/VectorField/ParticleModuleVectorFieldGlobal.h"));
				MetaData->SetValue(NewProp_bOverrideGlobalVectorFieldTightness, TEXT("ToolTip"), TEXT("Property override value for global vector field tightness."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleVectorFieldGlobal(Z_Construct_UClass_UParticleModuleVectorFieldGlobal, TEXT("UParticleModuleVectorFieldGlobal"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleVectorFieldGlobal);
	UClass* Z_Construct_UClass_UParticleModuleVectorFieldLocal_NoRegister()
	{
		return UParticleModuleVectorFieldLocal::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleVectorFieldLocal()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleVectorFieldBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleVectorFieldLocal::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20081080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTileZ, UParticleModuleVectorFieldLocal, uint8);
				UProperty* NewProp_bTileZ = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bTileZ"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTileZ, UParticleModuleVectorFieldLocal), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bTileZ, UParticleModuleVectorFieldLocal), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTileY, UParticleModuleVectorFieldLocal, uint8);
				UProperty* NewProp_bTileY = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bTileY"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTileY, UParticleModuleVectorFieldLocal), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bTileY, UParticleModuleVectorFieldLocal), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTileX, UParticleModuleVectorFieldLocal, uint8);
				UProperty* NewProp_bTileX = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bTileX"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTileX, UParticleModuleVectorFieldLocal), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bTileX, UParticleModuleVectorFieldLocal), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIgnoreComponentTransform, UParticleModuleVectorFieldLocal, uint8);
				UProperty* NewProp_bIgnoreComponentTransform = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIgnoreComponentTransform"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIgnoreComponentTransform, UParticleModuleVectorFieldLocal), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bIgnoreComponentTransform, UParticleModuleVectorFieldLocal), sizeof(uint8), false);
				UProperty* NewProp_Tightness = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Tightness"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Tightness, UParticleModuleVectorFieldLocal), 0x0000000000000001);
				UProperty* NewProp_Intensity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Intensity"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Intensity, UParticleModuleVectorFieldLocal), 0x0000000000000001);
				UProperty* NewProp_RelativeScale3D = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RelativeScale3D"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(RelativeScale3D, UParticleModuleVectorFieldLocal), 0x0000000000000001, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_RelativeRotation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RelativeRotation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(RelativeRotation, UParticleModuleVectorFieldLocal), 0x0000000000000001, Z_Construct_UScriptStruct_FRotator());
				UProperty* NewProp_RelativeTranslation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RelativeTranslation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(RelativeTranslation, UParticleModuleVectorFieldLocal), 0x0000000000000001, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_VectorField = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VectorField"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(VectorField, UParticleModuleVectorFieldLocal), 0x0000000000000001, Z_Construct_UClass_UVectorField_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Local Vector Field"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/VectorField/ParticleModuleVectorFieldLocal.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/VectorField/ParticleModuleVectorFieldLocal.h"));
				MetaData->SetValue(NewProp_bTileZ, TEXT("Category"), TEXT("VectorField"));
				MetaData->SetValue(NewProp_bTileZ, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/VectorField/ParticleModuleVectorFieldLocal.h"));
				MetaData->SetValue(NewProp_bTileZ, TEXT("ToolTip"), TEXT("Tile vector field in z axis?"));
				MetaData->SetValue(NewProp_bTileY, TEXT("Category"), TEXT("VectorField"));
				MetaData->SetValue(NewProp_bTileY, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/VectorField/ParticleModuleVectorFieldLocal.h"));
				MetaData->SetValue(NewProp_bTileY, TEXT("ToolTip"), TEXT("Tile vector field in y axis?"));
				MetaData->SetValue(NewProp_bTileX, TEXT("Category"), TEXT("VectorField"));
				MetaData->SetValue(NewProp_bTileX, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/VectorField/ParticleModuleVectorFieldLocal.h"));
				MetaData->SetValue(NewProp_bTileX, TEXT("ToolTip"), TEXT("Tile vector field in x axis?"));
				MetaData->SetValue(NewProp_bIgnoreComponentTransform, TEXT("Category"), TEXT("VectorField"));
				MetaData->SetValue(NewProp_bIgnoreComponentTransform, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/VectorField/ParticleModuleVectorFieldLocal.h"));
				MetaData->SetValue(NewProp_bIgnoreComponentTransform, TEXT("ToolTip"), TEXT("Ignore component transform."));
				MetaData->SetValue(NewProp_Tightness, TEXT("Category"), TEXT("VectorField"));
				MetaData->SetValue(NewProp_Tightness, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/VectorField/ParticleModuleVectorFieldLocal.h"));
				MetaData->SetValue(NewProp_Tightness, TEXT("ToolTip"), TEXT("Tightness tweak value: 0: Force 1: Velocity."));
				MetaData->SetValue(NewProp_Intensity, TEXT("Category"), TEXT("VectorField"));
				MetaData->SetValue(NewProp_Intensity, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/VectorField/ParticleModuleVectorFieldLocal.h"));
				MetaData->SetValue(NewProp_Intensity, TEXT("ToolTip"), TEXT("Intensity of the local vector field."));
				MetaData->SetValue(NewProp_RelativeScale3D, TEXT("Category"), TEXT("VectorField"));
				MetaData->SetValue(NewProp_RelativeScale3D, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/VectorField/ParticleModuleVectorFieldLocal.h"));
				MetaData->SetValue(NewProp_RelativeScale3D, TEXT("ToolTip"), TEXT("Scale of the vector field relative to the emitter."));
				MetaData->SetValue(NewProp_RelativeRotation, TEXT("Category"), TEXT("VectorField"));
				MetaData->SetValue(NewProp_RelativeRotation, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/VectorField/ParticleModuleVectorFieldLocal.h"));
				MetaData->SetValue(NewProp_RelativeRotation, TEXT("ToolTip"), TEXT("Rotation of the vector field relative to the emitter."));
				MetaData->SetValue(NewProp_RelativeTranslation, TEXT("Category"), TEXT("VectorField"));
				MetaData->SetValue(NewProp_RelativeTranslation, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/VectorField/ParticleModuleVectorFieldLocal.h"));
				MetaData->SetValue(NewProp_RelativeTranslation, TEXT("ToolTip"), TEXT("Translation of the vector field relative to the emitter."));
				MetaData->SetValue(NewProp_VectorField, TEXT("Category"), TEXT("VectorField"));
				MetaData->SetValue(NewProp_VectorField, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/VectorField/ParticleModuleVectorFieldLocal.h"));
				MetaData->SetValue(NewProp_VectorField, TEXT("ToolTip"), TEXT("Vector field asset to use."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleVectorFieldLocal(Z_Construct_UClass_UParticleModuleVectorFieldLocal, TEXT("UParticleModuleVectorFieldLocal"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleVectorFieldLocal);
	UClass* Z_Construct_UClass_UParticleModuleVectorFieldRotation_NoRegister()
	{
		return UParticleModuleVectorFieldRotation::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleVectorFieldRotation()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleVectorFieldBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleVectorFieldRotation::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20001080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_MaxInitialRotation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxInitialRotation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MaxInitialRotation, UParticleModuleVectorFieldRotation), 0x0000000000000001, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_MinInitialRotation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MinInitialRotation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MinInitialRotation, UParticleModuleVectorFieldRotation), 0x0000000000000001, Z_Construct_UScriptStruct_FVector());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("VF Init Rotation"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/VectorField/ParticleModuleVectorFieldRotation.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/VectorField/ParticleModuleVectorFieldRotation.h"));
				MetaData->SetValue(NewProp_MaxInitialRotation, TEXT("Category"), TEXT("VectorField"));
				MetaData->SetValue(NewProp_MaxInitialRotation, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/VectorField/ParticleModuleVectorFieldRotation.h"));
				MetaData->SetValue(NewProp_MaxInitialRotation, TEXT("ToolTip"), TEXT("Maximum initial rotation applied to the local vector field."));
				MetaData->SetValue(NewProp_MinInitialRotation, TEXT("Category"), TEXT("VectorField"));
				MetaData->SetValue(NewProp_MinInitialRotation, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/VectorField/ParticleModuleVectorFieldRotation.h"));
				MetaData->SetValue(NewProp_MinInitialRotation, TEXT("ToolTip"), TEXT("Minimum initial rotation applied to the local vector field."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleVectorFieldRotation(Z_Construct_UClass_UParticleModuleVectorFieldRotation, TEXT("UParticleModuleVectorFieldRotation"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleVectorFieldRotation);
	UClass* Z_Construct_UClass_UParticleModuleVectorFieldRotationRate_NoRegister()
	{
		return UParticleModuleVectorFieldRotationRate::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleVectorFieldRotationRate()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleVectorFieldBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleVectorFieldRotationRate::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20001080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_RotationRate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RotationRate"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(RotationRate, UParticleModuleVectorFieldRotationRate), 0x0000000000000001, Z_Construct_UScriptStruct_FVector());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("VF Rotation Rate"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/VectorField/ParticleModuleVectorFieldRotationRate.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/VectorField/ParticleModuleVectorFieldRotationRate.h"));
				MetaData->SetValue(NewProp_RotationRate, TEXT("Category"), TEXT("VectorField"));
				MetaData->SetValue(NewProp_RotationRate, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/VectorField/ParticleModuleVectorFieldRotationRate.h"));
				MetaData->SetValue(NewProp_RotationRate, TEXT("ToolTip"), TEXT("Constant rotation rate applied to the local vector field."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleVectorFieldRotationRate(Z_Construct_UClass_UParticleModuleVectorFieldRotationRate, TEXT("UParticleModuleVectorFieldRotationRate"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleVectorFieldRotationRate);
	UClass* Z_Construct_UClass_UParticleModuleVectorFieldScale_NoRegister()
	{
		return UParticleModuleVectorFieldScale::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleVectorFieldScale()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleVectorFieldBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleVectorFieldScale::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_VectorFieldScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VectorFieldScale"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(VectorFieldScale, UParticleModuleVectorFieldScale), 0x0000000000080009, Z_Construct_UClass_UDistributionFloat_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Vector Field Scale"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/VectorField/ParticleModuleVectorFieldScale.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/VectorField/ParticleModuleVectorFieldScale.h"));
				MetaData->SetValue(NewProp_VectorFieldScale, TEXT("Category"), TEXT("VectorField"));
				MetaData->SetValue(NewProp_VectorFieldScale, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_VectorFieldScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/VectorField/ParticleModuleVectorFieldScale.h"));
				MetaData->SetValue(NewProp_VectorFieldScale, TEXT("ToolTip"), TEXT("Per-particle vector field scale. Evaluated using emitter time."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleVectorFieldScale(Z_Construct_UClass_UParticleModuleVectorFieldScale, TEXT("UParticleModuleVectorFieldScale"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleVectorFieldScale);
	UClass* Z_Construct_UClass_UParticleModuleVectorFieldScaleOverLife_NoRegister()
	{
		return UParticleModuleVectorFieldScaleOverLife::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleVectorFieldScaleOverLife()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleVectorFieldBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleVectorFieldScaleOverLife::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_VectorFieldScaleOverLife = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VectorFieldScaleOverLife"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(VectorFieldScaleOverLife, UParticleModuleVectorFieldScaleOverLife), 0x0000000000080009, Z_Construct_UClass_UDistributionFloat_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("VF Scale/Life"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/VectorField/ParticleModuleVectorFieldScaleOverLife.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/VectorField/ParticleModuleVectorFieldScaleOverLife.h"));
				MetaData->SetValue(NewProp_VectorFieldScaleOverLife, TEXT("Category"), TEXT("VectorField"));
				MetaData->SetValue(NewProp_VectorFieldScaleOverLife, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_VectorFieldScaleOverLife, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/VectorField/ParticleModuleVectorFieldScaleOverLife.h"));
				MetaData->SetValue(NewProp_VectorFieldScaleOverLife, TEXT("ToolTip"), TEXT("Per-particle vector field scale. Evaluated using particle relative time."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleVectorFieldScaleOverLife(Z_Construct_UClass_UParticleModuleVectorFieldScaleOverLife, TEXT("UParticleModuleVectorFieldScaleOverLife"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleVectorFieldScaleOverLife);
	UClass* Z_Construct_UClass_UParticleModuleVelocityBase_NoRegister()
	{
		return UParticleModuleVelocityBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleVelocityBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModule();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleVelocityBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20001081;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bApplyOwnerScale, UParticleModuleVelocityBase, uint8);
				UProperty* NewProp_bApplyOwnerScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bApplyOwnerScale"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bApplyOwnerScale, UParticleModuleVelocityBase), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bApplyOwnerScale, UParticleModuleVelocityBase), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bInWorldSpace, UParticleModuleVelocityBase, uint8);
				UProperty* NewProp_bInWorldSpace = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bInWorldSpace"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bInWorldSpace, UParticleModuleVelocityBase), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bInWorldSpace, UParticleModuleVelocityBase), sizeof(uint8), false);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Velocity"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Velocity/ParticleModuleVelocityBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Velocity/ParticleModuleVelocityBase.h"));
				MetaData->SetValue(NewProp_bApplyOwnerScale, TEXT("Category"), TEXT("Velocity"));
				MetaData->SetValue(NewProp_bApplyOwnerScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Velocity/ParticleModuleVelocityBase.h"));
				MetaData->SetValue(NewProp_bApplyOwnerScale, TEXT("ToolTip"), TEXT("If true, then apply the particle system components scale to the velocity value."));
				MetaData->SetValue(NewProp_bInWorldSpace, TEXT("Category"), TEXT("Velocity"));
				MetaData->SetValue(NewProp_bInWorldSpace, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Velocity/ParticleModuleVelocityBase.h"));
				MetaData->SetValue(NewProp_bInWorldSpace, TEXT("ToolTip"), TEXT("If true, then treat the velocity as world-space defined.\nNOTE: LocalSpace emitters that are moving will see strange results..."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleVelocityBase(Z_Construct_UClass_UParticleModuleVelocityBase, TEXT("UParticleModuleVelocityBase"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleVelocityBase);
	UClass* Z_Construct_UClass_UParticleModuleVelocity_NoRegister()
	{
		return UParticleModuleVelocity::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleVelocity()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleVelocityBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleVelocity::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_StartVelocityRadial = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StartVelocityRadial"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(StartVelocityRadial, UParticleModuleVelocity), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				UProperty* NewProp_StartVelocity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StartVelocity"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(StartVelocity, UParticleModuleVelocity), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Initial Velocity"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Velocity/ParticleModuleVelocity.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Velocity/ParticleModuleVelocity.h"));
				MetaData->SetValue(NewProp_StartVelocityRadial, TEXT("Category"), TEXT("Velocity"));
				MetaData->SetValue(NewProp_StartVelocityRadial, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Velocity/ParticleModuleVelocity.h"));
				MetaData->SetValue(NewProp_StartVelocityRadial, TEXT("ToolTip"), TEXT("The velocity to apply to a particle along its radial direction.\nDirection is determined by subtracting the location of the emitter from the particle location at spawn.\nValue is retrieved using the EmitterTime of the emitter."));
				MetaData->SetValue(NewProp_StartVelocity, TEXT("Category"), TEXT("Velocity"));
				MetaData->SetValue(NewProp_StartVelocity, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Velocity/ParticleModuleVelocity.h"));
				MetaData->SetValue(NewProp_StartVelocity, TEXT("ToolTip"), TEXT("The velocity to apply to a particle when it is spawned.\nValue is retrieved using the EmitterTime of the emitter."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleVelocity(Z_Construct_UClass_UParticleModuleVelocity, TEXT("UParticleModuleVelocity"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleVelocity);
	UClass* Z_Construct_UClass_UParticleModuleVelocity_Seeded_NoRegister()
	{
		return UParticleModuleVelocity_Seeded::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleVelocity_Seeded()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleVelocity();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleVelocity_Seeded::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20801080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_RandomSeedInfo = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RandomSeedInfo"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(RandomSeedInfo, UParticleModuleVelocity_Seeded), 0x0000000000000001, Z_Construct_UScriptStruct_FParticleRandomSeedInfo());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Initial Velocity (Seed)"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Velocity/ParticleModuleVelocity_Seeded.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Velocity/ParticleModuleVelocity_Seeded.h"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("Category"), TEXT("RandomSeed"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Velocity/ParticleModuleVelocity_Seeded.h"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("ToolTip"), TEXT("The random seed(s) to use for looking up values in StartLocation"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleVelocity_Seeded(Z_Construct_UClass_UParticleModuleVelocity_Seeded, TEXT("UParticleModuleVelocity_Seeded"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleVelocity_Seeded);
	UClass* Z_Construct_UClass_UParticleModuleVelocityCone_NoRegister()
	{
		return UParticleModuleVelocityCone::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleVelocityCone()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleVelocityBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleVelocityCone::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Direction = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Direction"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Direction, UParticleModuleVelocityCone), 0x0000000000000001, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_Velocity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Velocity"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Velocity, UParticleModuleVelocityCone), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				UProperty* NewProp_Angle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Angle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Angle, UParticleModuleVelocityCone), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Velocity Cone"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Velocity/ParticleModuleVelocityCone.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Velocity/ParticleModuleVelocityCone.h"));
				MetaData->SetValue(NewProp_Direction, TEXT("Category"), TEXT("Cone"));
				MetaData->SetValue(NewProp_Direction, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Velocity/ParticleModuleVelocityCone.h"));
				MetaData->SetValue(NewProp_Direction, TEXT("ToolTip"), TEXT("The direction FVector of the cone."));
				MetaData->SetValue(NewProp_Velocity, TEXT("Category"), TEXT("Cone"));
				MetaData->SetValue(NewProp_Velocity, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Velocity/ParticleModuleVelocityCone.h"));
				MetaData->SetValue(NewProp_Velocity, TEXT("ToolTip"), TEXT("The initial velocity of the particles."));
				MetaData->SetValue(NewProp_Angle, TEXT("Category"), TEXT("Cone"));
				MetaData->SetValue(NewProp_Angle, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Velocity/ParticleModuleVelocityCone.h"));
				MetaData->SetValue(NewProp_Angle, TEXT("ToolTip"), TEXT("The Min value represents the inner cone angle value and the Max value represents the outer cone angle value."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleVelocityCone(Z_Construct_UClass_UParticleModuleVelocityCone, TEXT("UParticleModuleVelocityCone"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleVelocityCone);
	UClass* Z_Construct_UClass_UParticleModuleVelocityInheritParent_NoRegister()
	{
		return UParticleModuleVelocityInheritParent::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleVelocityInheritParent()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleVelocityBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleVelocityInheritParent::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Scale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Scale"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Scale, UParticleModuleVelocityInheritParent), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Inherit Parent Velocity"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Velocity/ParticleModuleVelocityInheritParent.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Velocity/ParticleModuleVelocityInheritParent.h"));
				MetaData->SetValue(NewProp_Scale, TEXT("Category"), TEXT("Velocity"));
				MetaData->SetValue(NewProp_Scale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Velocity/ParticleModuleVelocityInheritParent.h"));
				MetaData->SetValue(NewProp_Scale, TEXT("ToolTip"), TEXT("The scale to apply tot he parent velocity prior to adding it to the particle velocity during spawn.\nValue is retrieved using the EmitterTime of the emitter."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleVelocityInheritParent(Z_Construct_UClass_UParticleModuleVelocityInheritParent, TEXT("UParticleModuleVelocityInheritParent"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleVelocityInheritParent);
	UClass* Z_Construct_UClass_UParticleModuleVelocityOverLifetime_NoRegister()
	{
		return UParticleModuleVelocityOverLifetime::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleVelocityOverLifetime()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleVelocityBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleVelocityOverLifetime::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(Absolute, UParticleModuleVelocityOverLifetime, uint8);
				UProperty* NewProp_Absolute = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Absolute"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Absolute, UParticleModuleVelocityOverLifetime), 0x0000000000000009, CPP_BOOL_PROPERTY_BITMASK(Absolute, UParticleModuleVelocityOverLifetime), sizeof(uint8), false);
				UProperty* NewProp_VelOverLife = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VelOverLife"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(VelOverLife, UParticleModuleVelocityOverLifetime), 0x0000008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Velocity/Life"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Velocity/ParticleModuleVelocityOverLifetime.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Velocity/ParticleModuleVelocityOverLifetime.h"));
				MetaData->SetValue(NewProp_Absolute, TEXT("Category"), TEXT("Velocity"));
				MetaData->SetValue(NewProp_Absolute, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Velocity/ParticleModuleVelocityOverLifetime.h"));
				MetaData->SetValue(NewProp_Absolute, TEXT("ToolTip"), TEXT("If true, the velocity will be SET to the value from the above dist.\nIf false, the velocity will be scaled by the above dist."));
				MetaData->SetValue(NewProp_VelOverLife, TEXT("Category"), TEXT("Velocity"));
				MetaData->SetValue(NewProp_VelOverLife, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Velocity/ParticleModuleVelocityOverLifetime.h"));
				MetaData->SetValue(NewProp_VelOverLife, TEXT("ToolTip"), TEXT("The scaling  value applied to the velocity.\nValue is retrieved using the RelativeTime of the particle."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleVelocityOverLifetime(Z_Construct_UClass_UParticleModuleVelocityOverLifetime, TEXT("UParticleModuleVelocityOverLifetime"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleVelocityOverLifetime);
	UClass* Z_Construct_UClass_UParticleModuleEventSendToGame_NoRegister()
	{
		return UParticleModuleEventSendToGame::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleEventSendToGame()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleModuleEventSendToGame::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20001081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Event/ParticleModuleEventSendToGame.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Event/ParticleModuleEventSendToGame.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleEventSendToGame(Z_Construct_UClass_UParticleModuleEventSendToGame, TEXT("UParticleModuleEventSendToGame"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleEventSendToGame);
	UScriptStruct* Z_Construct_UScriptStruct_FParticleSystemReplayFrame()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FParticleSystemReplayFrame_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("ParticleSystemReplayFrame"), sizeof(FParticleSystemReplayFrame), Get_Z_Construct_UScriptStruct_FParticleSystemReplayFrame_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ParticleSystemReplayFrame"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FParticleSystemReplayFrame>, EStructFlags(0x00000001));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleSystemReplay.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("A single frame within this replay"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FParticleSystemReplayFrame_CRC() { return 3990483830U; }
	UScriptStruct* Z_Construct_UScriptStruct_FParticleEmitterReplayFrame()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FParticleEmitterReplayFrame_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("ParticleEmitterReplayFrame"), sizeof(FParticleEmitterReplayFrame), Get_Z_Construct_UScriptStruct_FParticleEmitterReplayFrame_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ParticleEmitterReplayFrame"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FParticleEmitterReplayFrame>, EStructFlags(0x00000001));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleSystemReplay.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FParticleEmitterReplayFrame_CRC() { return 2435081662U; }
	UClass* Z_Construct_UClass_UParticleSystemReplay_NoRegister()
	{
		return UParticleSystemReplay::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleSystemReplay()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UParticleSystemReplay::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ClipIDNumber = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ClipIDNumber"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ClipIDNumber, UParticleSystemReplay), 0x0000000000202001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("AutoExpandCategories"), TEXT("ParticleSystemReplay"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/ParticleSystemReplay.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleSystemReplay.h"));
				MetaData->SetValue(NewProp_ClipIDNumber, TEXT("Category"), TEXT("ParticleSystemReplay"));
				MetaData->SetValue(NewProp_ClipIDNumber, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleSystemReplay.h"));
				MetaData->SetValue(NewProp_ClipIDNumber, TEXT("ToolTip"), TEXT("Unique ID number for this replay clip"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleSystemReplay(Z_Construct_UClass_UParticleSystemReplay, TEXT("UParticleSystemReplay"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleSystemReplay);
	UClass* Z_Construct_UClass_UDemoPendingNetGame_NoRegister()
	{
		return UDemoPendingNetGame::StaticClass();
	}
	UClass* Z_Construct_UClass_UDemoPendingNetGame()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPendingNetGame();
			Z_Construct_UPackage_Engine();
			OuterClass = UDemoPendingNetGame::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000088;


				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/DemoPendingNetGame.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DemoPendingNetGame.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UDemoPendingNetGame(Z_Construct_UClass_UDemoPendingNetGame, TEXT("UDemoPendingNetGame"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UDemoPendingNetGame);
	UScriptStruct* Z_Construct_UScriptStruct_FTireFrictionScalePair()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FTireFrictionScalePair_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("TireFrictionScalePair"), sizeof(FTireFrictionScalePair), Get_Z_Construct_UScriptStruct_FTireFrictionScalePair_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TireFrictionScalePair"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FTireFrictionScalePair>, EStructFlags(0x00000001));
			UProperty* NewProp_FrictionScale = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("FrictionScale"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(FrictionScale, FTireFrictionScalePair), 0x0000000000000001);
			UProperty* NewProp_TireType = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TireType"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(TireType, FTireFrictionScalePair), 0x0000000000000001, Z_Construct_UClass_UTireType_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicalMaterials/PhysicalMaterial.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Pairs desired tire friction scale with tire type"));
			MetaData->SetValue(NewProp_FrictionScale, TEXT("Category"), TEXT("TireFrictionScalePair"));
			MetaData->SetValue(NewProp_FrictionScale, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicalMaterials/PhysicalMaterial.h"));
			MetaData->SetValue(NewProp_FrictionScale, TEXT("ToolTip"), TEXT("Friction scale for this type of tire"));
			MetaData->SetValue(NewProp_TireType, TEXT("Category"), TEXT("TireFrictionScalePair"));
			MetaData->SetValue(NewProp_TireType, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicalMaterials/PhysicalMaterial.h"));
			MetaData->SetValue(NewProp_TireType, TEXT("ToolTip"), TEXT("Tire type"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FTireFrictionScalePair_CRC() { return 907476928U; }
	UClass* Z_Construct_UClass_UPhysicalMaterial_NoRegister()
	{
		return UPhysicalMaterial::StaticClass();
	}
	UClass* Z_Construct_UClass_UPhysicalMaterial()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UPhysicalMaterial::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20102080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_TireFrictionScales = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TireFrictionScales"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(TireFrictionScales, UPhysicalMaterial), 0x0000000000000001);
				UProperty* NewProp_TireFrictionScales_Inner = new(EC_InternalUseOnlyConstructor, NewProp_TireFrictionScales, TEXT("TireFrictionScales"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FTireFrictionScalePair());
				UProperty* NewProp_TireFrictionScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TireFrictionScale"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(TireFrictionScale, UPhysicalMaterial), 0x0000000000000001);
				UProperty* NewProp_SurfaceType = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SurfaceType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(SurfaceType, UPhysicalMaterial), 0x0000000000000015, Z_Construct_UEnum_Engine_EPhysicalSurface());
				UProperty* NewProp_PhysicalMaterialProperty = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PhysicalMaterialProperty"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(PhysicalMaterialProperty, UPhysicalMaterial), 0x0000000000000000, Z_Construct_UClass_UDEPRECATED_PhysicalMaterialPropertyBase_NoRegister());
				UProperty* NewProp_DestructibleDamageThresholdScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DestructibleDamageThresholdScale"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DestructibleDamageThresholdScale, UPhysicalMaterial), 0x0000000000000015);
				UProperty* NewProp_RaiseMassToPower = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RaiseMassToPower"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(RaiseMassToPower, UPhysicalMaterial), 0x0000000000000015);
				UProperty* NewProp_Density = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Density"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Density, UPhysicalMaterial), 0x0000000000000015);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverrideRestitutionCombineMode, UPhysicalMaterial, bool);
				UProperty* NewProp_bOverrideRestitutionCombineMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bOverrideRestitutionCombineMode"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverrideRestitutionCombineMode, UPhysicalMaterial), 0x0000000000000005, CPP_BOOL_PROPERTY_BITMASK(bOverrideRestitutionCombineMode, UPhysicalMaterial), sizeof(bool), true);
				UProperty* NewProp_RestitutionCombineMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RestitutionCombineMode"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(RestitutionCombineMode, UPhysicalMaterial), 0x0000000000000015, Z_Construct_UEnum_Engine_EFrictionCombineMode());
				UProperty* NewProp_Restitution = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Restitution"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Restitution, UPhysicalMaterial), 0x0000000000000015);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverrideFrictionCombineMode, UPhysicalMaterial, bool);
				UProperty* NewProp_bOverrideFrictionCombineMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bOverrideFrictionCombineMode"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverrideFrictionCombineMode, UPhysicalMaterial), 0x0000000000000005, CPP_BOOL_PROPERTY_BITMASK(bOverrideFrictionCombineMode, UPhysicalMaterial), sizeof(bool), true);
				UProperty* NewProp_FrictionCombineMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FrictionCombineMode"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(FrictionCombineMode, UPhysicalMaterial), 0x0000000000000015, Z_Construct_UEnum_Engine_EFrictionCombineMode());
				UProperty* NewProp_Friction = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Friction"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Friction, UPhysicalMaterial), 0x0000000000000015);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("PhysicalMaterials/PhysicalMaterial.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicalMaterials/PhysicalMaterial.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Physical materials are used to define the response of a physical object when interacting dynamically with the world."));
				MetaData->SetValue(NewProp_TireFrictionScales, TEXT("Category"), TEXT("Vehicles"));
				MetaData->SetValue(NewProp_TireFrictionScales, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicalMaterials/PhysicalMaterial.h"));
				MetaData->SetValue(NewProp_TireFrictionScales, TEXT("ToolTip"), TEXT("Tire friction scales for specific types of tires. These values are multiplied against our parents' values."));
				MetaData->SetValue(NewProp_TireFrictionScale, TEXT("Category"), TEXT("Vehicles"));
				MetaData->SetValue(NewProp_TireFrictionScale, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicalMaterials/PhysicalMaterial.h"));
				MetaData->SetValue(NewProp_TireFrictionScale, TEXT("ToolTip"), TEXT("Overall tire friction scalar for every type of tire. This value is multiplied against our parents' values."));
				MetaData->SetValue(NewProp_SurfaceType, TEXT("Category"), TEXT("PhysicalProperties"));
				MetaData->SetValue(NewProp_SurfaceType, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicalMaterials/PhysicalMaterial.h"));
				MetaData->SetValue(NewProp_SurfaceType, TEXT("ToolTip"), TEXT("To edit surface type for your project, use ProjectSettings/Physics/PhysicalSurface section"));
				MetaData->SetValue(NewProp_PhysicalMaterialProperty, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicalMaterials/PhysicalMaterial.h"));
				MetaData->SetValue(NewProp_PhysicalMaterialProperty, TEXT("ToolTip"), TEXT("deprecated"));
				MetaData->SetValue(NewProp_DestructibleDamageThresholdScale, TEXT("Category"), TEXT("Destruction"));
				MetaData->SetValue(NewProp_DestructibleDamageThresholdScale, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicalMaterials/PhysicalMaterial.h"));
				MetaData->SetValue(NewProp_DestructibleDamageThresholdScale, TEXT("ToolTip"), TEXT("How much to scale the damage threshold by on any destructible we are applied to"));
				MetaData->SetValue(NewProp_RaiseMassToPower, TEXT("Category"), TEXT("Advanced"));
				MetaData->SetValue(NewProp_RaiseMassToPower, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicalMaterials/PhysicalMaterial.h"));
				MetaData->SetValue(NewProp_RaiseMassToPower, TEXT("ToolTip"), TEXT("Used to adjust the way that mass increases as objects get larger. This is applied to the mass as calculated based on a 'solid' object.\nIn actuality, larger objects do not tend to be solid, and become more like 'shells' (e.g. a car is not a solid piece of metal).\nValues are clamped to 1 or less."));
				MetaData->SetValue(NewProp_Density, TEXT("Category"), TEXT("PhysicalMaterial"));
				MetaData->SetValue(NewProp_Density, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicalMaterials/PhysicalMaterial.h"));
				MetaData->SetValue(NewProp_Density, TEXT("ToolTip"), TEXT("Used with the shape of the object to calculate its mass properties. The higher the number, the heavier the object. g per cubic cm."));
				MetaData->SetValue(NewProp_bOverrideRestitutionCombineMode, TEXT("Category"), TEXT("PhysicalMaterial"));
				MetaData->SetValue(NewProp_bOverrideRestitutionCombineMode, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicalMaterials/PhysicalMaterial.h"));
				MetaData->SetValue(NewProp_bOverrideRestitutionCombineMode, TEXT("ToolTip"), TEXT("If set we will use the RestitutionCombineMode of this material, instead of the RestitutionCombineMode found in the project settings."));
				MetaData->SetValue(NewProp_RestitutionCombineMode, TEXT("Category"), TEXT("PhysicalMaterial"));
				MetaData->SetValue(NewProp_RestitutionCombineMode, TEXT("editcondition"), TEXT("bOverrideRestitutionCombineMode"));
				MetaData->SetValue(NewProp_RestitutionCombineMode, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicalMaterials/PhysicalMaterial.h"));
				MetaData->SetValue(NewProp_RestitutionCombineMode, TEXT("ToolTip"), TEXT("Restitution combine mode, controls how restitution is computed for multiple materials."));
				MetaData->SetValue(NewProp_Restitution, TEXT("Category"), TEXT("PhysicalMaterial"));
				MetaData->SetValue(NewProp_Restitution, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicalMaterials/PhysicalMaterial.h"));
				MetaData->SetValue(NewProp_Restitution, TEXT("ToolTip"), TEXT("Restitution or 'bounciness of this surface."));
				MetaData->SetValue(NewProp_bOverrideFrictionCombineMode, TEXT("Category"), TEXT("PhysicalMaterial"));
				MetaData->SetValue(NewProp_bOverrideFrictionCombineMode, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicalMaterials/PhysicalMaterial.h"));
				MetaData->SetValue(NewProp_bOverrideFrictionCombineMode, TEXT("ToolTip"), TEXT("If set we will use the FrictionCombineMode of this material, instead of the FrictionCombineMode found in the project settings."));
				MetaData->SetValue(NewProp_FrictionCombineMode, TEXT("Category"), TEXT("PhysicalMaterial"));
				MetaData->SetValue(NewProp_FrictionCombineMode, TEXT("editcondition"), TEXT("bOverrideFrictionCombineMode"));
				MetaData->SetValue(NewProp_FrictionCombineMode, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicalMaterials/PhysicalMaterial.h"));
				MetaData->SetValue(NewProp_FrictionCombineMode, TEXT("ToolTip"), TEXT("Friction combine mode, controls how friction is computed for multiple materials."));
				MetaData->SetValue(NewProp_Friction, TEXT("Category"), TEXT("PhysicalMaterial"));
				MetaData->SetValue(NewProp_Friction, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicalMaterials/PhysicalMaterial.h"));
				MetaData->SetValue(NewProp_Friction, TEXT("ToolTip"), TEXT("Friction value of surface, controls how easily things can slide on this surface"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UPhysicalMaterial(Z_Construct_UClass_UPhysicalMaterial, TEXT("UPhysicalMaterial"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UPhysicalMaterial);
	UClass* Z_Construct_UClass_UDEPRECATED_PhysicalMaterialPropertyBase_NoRegister()
	{
		return UDEPRECATED_PhysicalMaterialPropertyBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UDEPRECATED_PhysicalMaterialPropertyBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UDEPRECATED_PhysicalMaterialPropertyBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x22083281;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("PhysicalMaterials/PhysicalMaterialPropertyBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicalMaterials/PhysicalMaterialPropertyBase.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UDEPRECATED_PhysicalMaterialPropertyBase(Z_Construct_UClass_UDEPRECATED_PhysicalMaterialPropertyBase, TEXT("UDEPRECATED_PhysicalMaterialPropertyBase"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UDEPRECATED_PhysicalMaterialPropertyBase);
	UClass* Z_Construct_UClass_UPhysicsAsset_NoRegister()
	{
		return UPhysicsAsset::StaticClass();
	}
	UClass* Z_Construct_UClass_UPhysicsAsset()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UPhysicsAsset::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ConstraintSetup = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConstraintSetup"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ConstraintSetup, UPhysicsAsset), 0x0000008000000008);
				UProperty* NewProp_ConstraintSetup_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ConstraintSetup, TEXT("ConstraintSetup"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0002000000080008, Z_Construct_UClass_UPhysicsConstraintTemplate_NoRegister());
				UProperty* NewProp_BoundsBodies = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BoundsBodies"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(BoundsBodies, UPhysicsAsset), 0x0000000000000000);
				UProperty* NewProp_BoundsBodies_Inner = new(EC_InternalUseOnlyConstructor, NewProp_BoundsBodies, TEXT("BoundsBodies"), RF_Public|RF_Transient|RF_Native) UIntProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
				UProperty* NewProp_BodySetup = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BodySetup"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(BodySetup, UPhysicsAsset), 0x0000008000000008);
				UProperty* NewProp_BodySetup_Inner = new(EC_InternalUseOnlyConstructor, NewProp_BodySetup, TEXT("BodySetup"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0002000000080008, Z_Construct_UClass_UBodySetup_NoRegister());
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_PreviewSkeletalMesh = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PreviewSkeletalMesh"), RF_Public|RF_Transient|RF_Native) UAssetObjectProperty(CPP_PROPERTY_BASE(PreviewSkeletalMesh, UPhysicsAsset), 0x0004000800000000, Z_Construct_UClass_USkeletalMesh_NoRegister());
				UProperty* NewProp_DefaultSkelMesh = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultSkelMesh"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(DefaultSkelMesh_DEPRECATED, UPhysicsAsset), 0x0000000820000000, Z_Construct_UClass_USkeletalMesh_NoRegister());
#endif // WITH_EDITORONLY_DATA
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("PhysicsEngine/PhysicsAsset.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsAsset.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("PhysicsAsset contains a set of rigid bodies and constraints that make up a single ragdoll.\nThe asset is not limited to human ragdolls, and can be used for any physical simulation using bodies and constraints.\nA SkeletalMesh has a single PhysicsAsset, which allows for easily turning ragdoll physics on or off for many SkeletalMeshComponents\nThe asset can be configured inside the Physics Asset Editor (PhAT).\n\n@see https://docs.unrealengine.com/latest/INT/Engine/Physics/PhAT/Reference/index.html\n@see USkeletalMesh"));
				MetaData->SetValue(NewProp_ConstraintSetup, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_ConstraintSetup, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsAsset.h"));
				MetaData->SetValue(NewProp_ConstraintSetup, TEXT("ToolTip"), TEXT("Array of RB_ConstraintSetup objects.\nStores information about a joint between two bodies, such as position relative to each body, joint limits etc."));
				MetaData->SetValue(NewProp_ConstraintSetup_Inner, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_ConstraintSetup_Inner, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsAsset.h"));
				MetaData->SetValue(NewProp_ConstraintSetup_Inner, TEXT("ToolTip"), TEXT("Array of RB_ConstraintSetup objects.\nStores information about a joint between two bodies, such as position relative to each body, joint limits etc."));
				MetaData->SetValue(NewProp_BoundsBodies, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsAsset.h"));
				MetaData->SetValue(NewProp_BoundsBodies, TEXT("ToolTip"), TEXT("Index of bodies that are marked bConsiderForBounds"));
				MetaData->SetValue(NewProp_BodySetup, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_BodySetup, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsAsset.h"));
				MetaData->SetValue(NewProp_BodySetup, TEXT("ToolTip"), TEXT("Array of BodySetup objects. Stores information about collision shape etc. for each body.\nDoes not include body position - those are taken from mesh."));
				MetaData->SetValue(NewProp_BodySetup_Inner, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_BodySetup_Inner, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsAsset.h"));
				MetaData->SetValue(NewProp_BodySetup_Inner, TEXT("ToolTip"), TEXT("Array of BodySetup objects. Stores information about collision shape etc. for each body.\nDoes not include body position - those are taken from mesh."));
				MetaData->SetValue(NewProp_PreviewSkeletalMesh, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsAsset.h"));
				MetaData->SetValue(NewProp_DefaultSkelMesh, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsAsset.h"));
				MetaData->SetValue(NewProp_DefaultSkelMesh, TEXT("ToolTip"), TEXT("Default skeletal mesh to use when previewing this PhysicsAsset etc.\nIs the one that was used as the basis for creating this Asset."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UPhysicsAsset(Z_Construct_UClass_UPhysicsAsset, TEXT("UPhysicsAsset"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UPhysicsAsset);
	UClass* Z_Construct_UClass_UPhysicsCollisionHandler_NoRegister()
	{
		return UPhysicsCollisionHandler::StaticClass();
	}
	UClass* Z_Construct_UClass_UPhysicsCollisionHandler()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UPhysicsCollisionHandler::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_LastImpactSoundTime = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LastImpactSoundTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(LastImpactSoundTime, UPhysicsCollisionHandler), 0x0000000000000000);
				UProperty* NewProp_DefaultImpactSound = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultImpactSound"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(DefaultImpactSound, UPhysicsCollisionHandler), 0x0000000000000005, Z_Construct_UClass_USoundBase_NoRegister());
				UProperty* NewProp_ImpactReFireDelay = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ImpactReFireDelay"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ImpactReFireDelay, UPhysicsCollisionHandler), 0x0000000000000005);
				UProperty* NewProp_ImpactThreshold = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ImpactThreshold"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ImpactThreshold, UPhysicsCollisionHandler), 0x0000000000000005);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("PhysicsEngine/PhysicsCollisionHandler.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsCollisionHandler.h"));
				MetaData->SetValue(NewProp_LastImpactSoundTime, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsCollisionHandler.h"));
				MetaData->SetValue(NewProp_LastImpactSoundTime, TEXT("ToolTip"), TEXT("Time since last impact sound"));
				MetaData->SetValue(NewProp_DefaultImpactSound, TEXT("Category"), TEXT("Impact"));
				MetaData->SetValue(NewProp_DefaultImpactSound, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsCollisionHandler.h"));
				MetaData->SetValue(NewProp_DefaultImpactSound, TEXT("ToolTip"), TEXT("Sound to play"));
				MetaData->SetValue(NewProp_ImpactReFireDelay, TEXT("Category"), TEXT("Impact"));
				MetaData->SetValue(NewProp_ImpactReFireDelay, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsCollisionHandler.h"));
				MetaData->SetValue(NewProp_ImpactReFireDelay, TEXT("ToolTip"), TEXT("Min time between effect/sound being triggered"));
				MetaData->SetValue(NewProp_ImpactThreshold, TEXT("Category"), TEXT("Impact"));
				MetaData->SetValue(NewProp_ImpactThreshold, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsCollisionHandler.h"));
				MetaData->SetValue(NewProp_ImpactThreshold, TEXT("ToolTip"), TEXT("How hard an impact must be to trigger effect/sound"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UPhysicsCollisionHandler(Z_Construct_UClass_UPhysicsCollisionHandler, TEXT("UPhysicsCollisionHandler"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UPhysicsCollisionHandler);
	UClass* Z_Construct_UClass_UPhysicsConstraintTemplate_NoRegister()
	{
		return UPhysicsConstraintTemplate::StaticClass();
	}
	UClass* Z_Construct_UClass_UPhysicsConstraintTemplate()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UPhysicsConstraintTemplate::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_DefaultInstance = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultInstance"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DefaultInstance, UPhysicsConstraintTemplate), 0x0000008000000001, Z_Construct_UScriptStruct_FConstraintInstance());
				UProperty* NewProp_AngularBreakThreshold = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AngularBreakThreshold"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(AngularBreakThreshold_DEPRECATED, UPhysicsConstraintTemplate), 0x0000000020000000);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAngularBreakable_DEPRECATED, UPhysicsConstraintTemplate, uint8);
				UProperty* NewProp_bAngularBreakable = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAngularBreakable"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAngularBreakable_DEPRECATED, UPhysicsConstraintTemplate), 0x0000000020000000, CPP_BOOL_PROPERTY_BITMASK(bAngularBreakable_DEPRECATED, UPhysicsConstraintTemplate), sizeof(uint8), false);
				UProperty* NewProp_TwistLimitDamping = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TwistLimitDamping"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(TwistLimitDamping_DEPRECATED, UPhysicsConstraintTemplate), 0x0000000020000000);
				UProperty* NewProp_TwistLimitStiffness = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TwistLimitStiffness"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(TwistLimitStiffness_DEPRECATED, UPhysicsConstraintTemplate), 0x0000000020000000);
				UProperty* NewProp_SwingLimitDamping = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SwingLimitDamping"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(SwingLimitDamping_DEPRECATED, UPhysicsConstraintTemplate), 0x0000000020000000);
				UProperty* NewProp_SwingLimitStiffness = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SwingLimitStiffness"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(SwingLimitStiffness_DEPRECATED, UPhysicsConstraintTemplate), 0x0000000020000000);
				UProperty* NewProp_TwistLimitAngle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TwistLimitAngle"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(TwistLimitAngle_DEPRECATED, UPhysicsConstraintTemplate), 0x0000000020000000);
				UProperty* NewProp_Swing2LimitAngle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Swing2LimitAngle"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Swing2LimitAngle_DEPRECATED, UPhysicsConstraintTemplate), 0x0000000020000000);
				UProperty* NewProp_Swing1LimitAngle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Swing1LimitAngle"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Swing1LimitAngle_DEPRECATED, UPhysicsConstraintTemplate), 0x0000000020000000);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTwistLimitSoft_DEPRECATED, UPhysicsConstraintTemplate, uint8);
				UProperty* NewProp_bTwistLimitSoft = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bTwistLimitSoft"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTwistLimitSoft_DEPRECATED, UPhysicsConstraintTemplate), 0x0000000020000000, CPP_BOOL_PROPERTY_BITMASK(bTwistLimitSoft_DEPRECATED, UPhysicsConstraintTemplate), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSwingLimitSoft_DEPRECATED, UPhysicsConstraintTemplate, uint8);
				UProperty* NewProp_bSwingLimitSoft = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bSwingLimitSoft"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSwingLimitSoft_DEPRECATED, UPhysicsConstraintTemplate), 0x0000000020000000, CPP_BOOL_PROPERTY_BITMASK(bSwingLimitSoft_DEPRECATED, UPhysicsConstraintTemplate), sizeof(uint8), false);
				UProperty* NewProp_AngularTwistMotion = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AngularTwistMotion"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(AngularTwistMotion_DEPRECATED, UPhysicsConstraintTemplate), 0x0000000020000000, Z_Construct_UEnum_Engine_EAngularConstraintMotion());
				UProperty* NewProp_AngularSwing2Motion = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AngularSwing2Motion"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(AngularSwing2Motion_DEPRECATED, UPhysicsConstraintTemplate), 0x0000000020000000, Z_Construct_UEnum_Engine_EAngularConstraintMotion());
				UProperty* NewProp_AngularSwing1Motion = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AngularSwing1Motion"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(AngularSwing1Motion_DEPRECATED, UPhysicsConstraintTemplate), 0x0000000020000000, Z_Construct_UEnum_Engine_EAngularConstraintMotion());
				UProperty* NewProp_LinearBreakThreshold = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LinearBreakThreshold"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(LinearBreakThreshold_DEPRECATED, UPhysicsConstraintTemplate), 0x0000000020000000);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLinearBreakable_DEPRECATED, UPhysicsConstraintTemplate, uint8);
				UProperty* NewProp_bLinearBreakable = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bLinearBreakable"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLinearBreakable_DEPRECATED, UPhysicsConstraintTemplate), 0x0000000020000000, CPP_BOOL_PROPERTY_BITMASK(bLinearBreakable_DEPRECATED, UPhysicsConstraintTemplate), sizeof(uint8), false);
				UProperty* NewProp_LinearLimitDamping = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LinearLimitDamping"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(LinearLimitDamping_DEPRECATED, UPhysicsConstraintTemplate), 0x0000000020000000);
				UProperty* NewProp_LinearLimitStiffness = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LinearLimitStiffness"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(LinearLimitStiffness_DEPRECATED, UPhysicsConstraintTemplate), 0x0000000020000000);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLinearLimitSoft_DEPRECATED, UPhysicsConstraintTemplate, uint8);
				UProperty* NewProp_bLinearLimitSoft = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bLinearLimitSoft"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLinearLimitSoft_DEPRECATED, UPhysicsConstraintTemplate), 0x0000000020000000, CPP_BOOL_PROPERTY_BITMASK(bLinearLimitSoft_DEPRECATED, UPhysicsConstraintTemplate), sizeof(uint8), false);
				UProperty* NewProp_LinearLimitSize = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LinearLimitSize"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(LinearLimitSize_DEPRECATED, UPhysicsConstraintTemplate), 0x0000000020000000);
				UProperty* NewProp_LinearZMotion = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LinearZMotion"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(LinearZMotion_DEPRECATED, UPhysicsConstraintTemplate), 0x0000000020000000, Z_Construct_UEnum_Engine_ELinearConstraintMotion());
				UProperty* NewProp_LinearYMotion = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LinearYMotion"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(LinearYMotion_DEPRECATED, UPhysicsConstraintTemplate), 0x0000000020000000, Z_Construct_UEnum_Engine_ELinearConstraintMotion());
				UProperty* NewProp_LinearXMotion = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LinearXMotion"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(LinearXMotion_DEPRECATED, UPhysicsConstraintTemplate), 0x0000000020000000, Z_Construct_UEnum_Engine_ELinearConstraintMotion());
				UProperty* NewProp_ProjectionAngularTolerance = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ProjectionAngularTolerance"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ProjectionAngularTolerance_DEPRECATED, UPhysicsConstraintTemplate), 0x0000000020000000);
				UProperty* NewProp_ProjectionLinearTolerance = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ProjectionLinearTolerance"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ProjectionLinearTolerance_DEPRECATED, UPhysicsConstraintTemplate), 0x0000000020000000);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnableProjection_DEPRECATED, UPhysicsConstraintTemplate, uint8);
				UProperty* NewProp_bEnableProjection = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bEnableProjection"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnableProjection_DEPRECATED, UPhysicsConstraintTemplate), 0x0000000020000000, CPP_BOOL_PROPERTY_BITMASK(bEnableProjection_DEPRECATED, UPhysicsConstraintTemplate), sizeof(uint8), false);
				UProperty* NewProp_SecAxis2 = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SecAxis2"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SecAxis2_DEPRECATED, UPhysicsConstraintTemplate), 0x0000000020000000, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_PriAxis2 = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PriAxis2"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PriAxis2_DEPRECATED, UPhysicsConstraintTemplate), 0x0000000020000000, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_Pos2 = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Pos2"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Pos2_DEPRECATED, UPhysicsConstraintTemplate), 0x0000000020000000, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_SecAxis1 = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SecAxis1"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SecAxis1_DEPRECATED, UPhysicsConstraintTemplate), 0x0000000020000000, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_PriAxis1 = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PriAxis1"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PriAxis1_DEPRECATED, UPhysicsConstraintTemplate), 0x0000000020000000, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_Pos1 = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Pos1"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Pos1_DEPRECATED, UPhysicsConstraintTemplate), 0x0000000020000000, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_ConstraintBone2 = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConstraintBone2"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(ConstraintBone2_DEPRECATED, UPhysicsConstraintTemplate), 0x0000000020000000);
				UProperty* NewProp_ConstraintBone1 = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConstraintBone1"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(ConstraintBone1_DEPRECATED, UPhysicsConstraintTemplate), 0x0000000020000000);
				UProperty* NewProp_JointName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("JointName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(JointName_DEPRECATED, UPhysicsConstraintTemplate), 0x0000000020000000);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("PhysicsEngine/PhysicsConstraintTemplate.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
				MetaData->SetValue(NewProp_DefaultInstance, TEXT("Category"), TEXT("Joint"));
				MetaData->SetValue(NewProp_DefaultInstance, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
				MetaData->SetValue(NewProp_DefaultInstance, TEXT("ShowOnlyInnerProperties"), TEXT(""));
				MetaData->SetValue(NewProp_AngularBreakThreshold, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
				MetaData->SetValue(NewProp_bAngularBreakable, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
				MetaData->SetValue(NewProp_TwistLimitDamping, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
				MetaData->SetValue(NewProp_TwistLimitStiffness, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
				MetaData->SetValue(NewProp_SwingLimitDamping, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
				MetaData->SetValue(NewProp_SwingLimitStiffness, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
				MetaData->SetValue(NewProp_TwistLimitAngle, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
				MetaData->SetValue(NewProp_Swing2LimitAngle, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
				MetaData->SetValue(NewProp_Swing1LimitAngle, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
				MetaData->SetValue(NewProp_bTwistLimitSoft, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
				MetaData->SetValue(NewProp_bSwingLimitSoft, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
				MetaData->SetValue(NewProp_AngularTwistMotion, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
				MetaData->SetValue(NewProp_AngularSwing2Motion, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
				MetaData->SetValue(NewProp_AngularSwing1Motion, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
				MetaData->SetValue(NewProp_LinearBreakThreshold, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
				MetaData->SetValue(NewProp_bLinearBreakable, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
				MetaData->SetValue(NewProp_LinearLimitDamping, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
				MetaData->SetValue(NewProp_LinearLimitStiffness, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
				MetaData->SetValue(NewProp_bLinearLimitSoft, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
				MetaData->SetValue(NewProp_LinearLimitSize, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
				MetaData->SetValue(NewProp_LinearZMotion, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
				MetaData->SetValue(NewProp_LinearYMotion, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
				MetaData->SetValue(NewProp_LinearXMotion, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
				MetaData->SetValue(NewProp_ProjectionAngularTolerance, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
				MetaData->SetValue(NewProp_ProjectionLinearTolerance, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
				MetaData->SetValue(NewProp_bEnableProjection, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
				MetaData->SetValue(NewProp_SecAxis2, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
				MetaData->SetValue(NewProp_PriAxis2, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
				MetaData->SetValue(NewProp_Pos2, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
				MetaData->SetValue(NewProp_SecAxis1, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
				MetaData->SetValue(NewProp_PriAxis1, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
				MetaData->SetValue(NewProp_Pos1, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
				MetaData->SetValue(NewProp_ConstraintBone2, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
				MetaData->SetValue(NewProp_ConstraintBone1, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
				MetaData->SetValue(NewProp_JointName, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UPhysicsConstraintTemplate(Z_Construct_UClass_UPhysicsConstraintTemplate, TEXT("UPhysicsConstraintTemplate"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UPhysicsConstraintTemplate);
	UClass* Z_Construct_UClass_UPhysicsSerializer_NoRegister()
	{
		return UPhysicsSerializer::StaticClass();
	}
	UClass* Z_Construct_UClass_UPhysicsSerializer()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UPhysicsSerializer::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20280080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("PhysicsSerializer.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/PhysicsSerializer.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UPhysicsSerializer(Z_Construct_UClass_UPhysicsSerializer, TEXT("UPhysicsSerializer"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UPhysicsSerializer);
	UFunction* Z_Construct_UDelegateFunction_Engine_PlatformInterfaceDelegate__DelegateSignature()
	{
		struct _Script_Engine_eventPlatformInterfaceDelegate_Parms
		{
			FPlatformInterfaceDelegateResult Result;
		};
		UObject* Outer=Z_Construct_UPackage_Engine();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PlatformInterfaceDelegate__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00120000, 65535, sizeof(_Script_Engine_eventPlatformInterfaceDelegate_Parms));
			UProperty* NewProp_Result = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Result"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Result, _Script_Engine_eventPlatformInterfaceDelegate_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FPlatformInterfaceDelegateResult());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/PlatformInterfaceBase.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Generic platform interface delegate signature"));
#endif
		}
		return ReturnFunction;
	}
	UEnum* Z_Construct_UEnum_Engine_EPlatformInterfaceDataType()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EPlatformInterfaceDataType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EPlatformInterfaceDataType"), 0, Get_Z_Construct_UEnum_Engine_EPlatformInterfaceDataType_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EPlatformInterfaceDataType"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PIDT_None")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PIDT_Int")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PIDT_Float")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PIDT_String")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PIDT_Object")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PIDT_Custom")), 5));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PIDT_MAX")), 6));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/PlatformInterfaceBase.h"));
			MetaData->SetValue(ReturnEnum, TEXT("PIDT_Custom.ToolTip"), TEXT("A custom type where more than one value may be filled out."));
			MetaData->SetValue(ReturnEnum, TEXT("PIDT_None.ToolTip"), TEXT("No data type specified."));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("An enum for the types of data used in a PlatformInterfaceData struct."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EPlatformInterfaceDataType_CRC() { return 1360028978U; }
	UScriptStruct* Z_Construct_UScriptStruct_FDelegateArray()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FDelegateArray_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("DelegateArray"), sizeof(FDelegateArray), Get_Z_Construct_UScriptStruct_FDelegateArray_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DelegateArray"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FDelegateArray>, EStructFlags(0x00000005));
			UProperty* NewProp_Delegates = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Delegates"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Delegates, FDelegateArray), 0x0000008000000000);
			UProperty* NewProp_Delegates_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Delegates, TEXT("Delegates"), RF_Public|RF_Transient|RF_Native) UDelegateProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000080000, Z_Construct_UDelegateFunction_Engine_PlatformInterfaceDelegate__DelegateSignature());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/PlatformInterfaceBase.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Helper struct, since UnrealScript doesn't allow arrays of arrays, but\narrays of structs of arrays are okay."));
			MetaData->SetValue(NewProp_Delegates, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/PlatformInterfaceBase.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FDelegateArray_CRC() { return 779660687U; }
	UScriptStruct* Z_Construct_UScriptStruct_FPlatformInterfaceDelegateResult()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FPlatformInterfaceDelegateResult_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("PlatformInterfaceDelegateResult"), sizeof(FPlatformInterfaceDelegateResult), Get_Z_Construct_UScriptStruct_FPlatformInterfaceDelegateResult_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PlatformInterfaceDelegateResult"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FPlatformInterfaceDelegateResult>, EStructFlags(0x00000001));
			UProperty* NewProp_Data = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Data"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Data, FPlatformInterfaceDelegateResult), 0x0000000000000000, Z_Construct_UScriptStruct_FPlatformInterfaceData());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSuccessful, FPlatformInterfaceDelegateResult, bool);
			UProperty* NewProp_bSuccessful = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bSuccessful"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSuccessful, FPlatformInterfaceDelegateResult), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bSuccessful, FPlatformInterfaceDelegateResult), sizeof(bool), true);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/PlatformInterfaceBase.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Generic structure for returning most any kind of data from C++ to delegate functions"));
			MetaData->SetValue(NewProp_Data, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/PlatformInterfaceBase.h"));
			MetaData->SetValue(NewProp_Data, TEXT("ToolTip"), TEXT("The result actual data"));
			MetaData->SetValue(NewProp_bSuccessful, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/PlatformInterfaceBase.h"));
			MetaData->SetValue(NewProp_bSuccessful, TEXT("ToolTip"), TEXT("This is always usable, no matter the type"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FPlatformInterfaceDelegateResult_CRC() { return 2024460074U; }
	UScriptStruct* Z_Construct_UScriptStruct_FPlatformInterfaceData()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FPlatformInterfaceData_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("PlatformInterfaceData"), sizeof(FPlatformInterfaceData), Get_Z_Construct_UScriptStruct_FPlatformInterfaceData_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PlatformInterfaceData"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FPlatformInterfaceData>, EStructFlags(0x00000001));
			UProperty* NewProp_ObjectValue = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ObjectValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ObjectValue, FPlatformInterfaceData), 0x0000000000000000, Z_Construct_UClass_UObject_NoRegister());
			UProperty* NewProp_StringValue = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("StringValue"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(StringValue, FPlatformInterfaceData), 0x0000000000000000);
			UProperty* NewProp_FloatValue = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("FloatValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(FloatValue, FPlatformInterfaceData), 0x0000000000000000);
			UProperty* NewProp_IntValue = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("IntValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(IntValue, FPlatformInterfaceData), 0x0000000000000000);
			UProperty* NewProp_Type = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Type"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(Type, FPlatformInterfaceData), 0x0000000000000000, Z_Construct_UEnum_Engine_EPlatformInterfaceDataType());
			UProperty* NewProp_DataName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DataName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(DataName, FPlatformInterfaceData), 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/PlatformInterfaceBase.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Struct that encompasses the most common types of data. This is the data payload\nof PlatformInterfaceDelegateResult."));
			MetaData->SetValue(NewProp_ObjectValue, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/PlatformInterfaceBase.h"));
			MetaData->SetValue(NewProp_StringValue, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/PlatformInterfaceBase.h"));
			MetaData->SetValue(NewProp_FloatValue, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/PlatformInterfaceBase.h"));
			MetaData->SetValue(NewProp_IntValue, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/PlatformInterfaceBase.h"));
			MetaData->SetValue(NewProp_IntValue, TEXT("ToolTip"), TEXT("Various typed result values"));
			MetaData->SetValue(NewProp_Type, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/PlatformInterfaceBase.h"));
			MetaData->SetValue(NewProp_Type, TEXT("ToolTip"), TEXT("Specifies which value is valid for this structure"));
			MetaData->SetValue(NewProp_DataName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/PlatformInterfaceBase.h"));
			MetaData->SetValue(NewProp_DataName, TEXT("ToolTip"), TEXT("An optional tag for this data"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FPlatformInterfaceData_CRC() { return 1718743729U; }
	UClass* Z_Construct_UClass_UPlatformInterfaceBase_NoRegister()
	{
		return UPlatformInterfaceBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UPlatformInterfaceBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UPlatformInterfaceBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880088;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_AllDelegates = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AllDelegates"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(AllDelegates, UPlatformInterfaceBase), 0x0000008000000000);
				UProperty* NewProp_AllDelegates_Inner = new(EC_InternalUseOnlyConstructor, NewProp_AllDelegates, TEXT("AllDelegates"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000008000000000, Z_Construct_UScriptStruct_FDelegateArray());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/PlatformInterfaceBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/PlatformInterfaceBase.h"));
				MetaData->SetValue(NewProp_AllDelegates, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/PlatformInterfaceBase.h"));
				MetaData->SetValue(NewProp_AllDelegates, TEXT("ToolTip"), TEXT("Array of delegate arrays. Only add and remove via helper functions, and call via the helper delegate call function"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UPlatformInterfaceBase(Z_Construct_UClass_UPlatformInterfaceBase, TEXT("UPlatformInterfaceBase"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UPlatformInterfaceBase);
	UEnum* Z_Construct_UEnum_Engine_ECloudStorageDelegate()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_ECloudStorageDelegate_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ECloudStorageDelegate"), 0, Get_Z_Construct_UEnum_Engine_ECloudStorageDelegate_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ECloudStorageDelegate"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("CSD_KeyValueReadComplete")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("CSD_KeyValueWriteComplete")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("CSD_ValueChanged")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("CSD_DocumentQueryComplete")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("CSD_DocumentReadComplete")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("CSD_DocumentWriteComplete")), 5));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("CSD_DocumentConflictDetected")), 6));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("CSD_MAX")), 7));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("CSD_DocumentConflictDetected.ToolTip"), TEXT("Desc: Called when multiple machines have updated the document, and script needs to determine which one to use, via the Resolve functions."));
			MetaData->SetValue(ReturnEnum, TEXT("CSD_KeyValueReadComplete.ToolTip"), TEXT("@todo: Fill in the result descriptions for these guys (and the other PI subclasses)"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/CloudStorageBase.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("All the types of delegate callbacks that a CloudStorage subclass may receive from C++"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_ECloudStorageDelegate_CRC() { return 1088525166U; }
	UClass* Z_Construct_UClass_UCloudStorageBase_NoRegister()
	{
		return UCloudStorageBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UCloudStorageBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPlatformInterfaceBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UCloudStorageBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20800088;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSuppressDelegateCalls, UCloudStorageBase, uint8);
				UProperty* NewProp_bSuppressDelegateCalls = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bSuppressDelegateCalls"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSuppressDelegateCalls, UCloudStorageBase), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bSuppressDelegateCalls, UCloudStorageBase), sizeof(uint8), false);
				UProperty* NewProp_LocalCloudFiles = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LocalCloudFiles"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(LocalCloudFiles, UCloudStorageBase), 0x0000000000000000);
				UProperty* NewProp_LocalCloudFiles_Inner = new(EC_InternalUseOnlyConstructor, NewProp_LocalCloudFiles, TEXT("LocalCloudFiles"), RF_Public|RF_Transient|RF_Native) UStrProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/CloudStorageBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/CloudStorageBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Base class for the various platform interface classes."));
				MetaData->SetValue(NewProp_bSuppressDelegateCalls, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/CloudStorageBase.h"));
				MetaData->SetValue(NewProp_bSuppressDelegateCalls, TEXT("ToolTip"), TEXT("If true, delegate callbacks should be skipped."));
				MetaData->SetValue(NewProp_LocalCloudFiles, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/CloudStorageBase.h"));
				MetaData->SetValue(NewProp_LocalCloudFiles, TEXT("ToolTip"), TEXT("When using local storage (aka \"cloud emulation\"), this maintains a list of the file paths."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UCloudStorageBase(Z_Construct_UClass_UCloudStorageBase, TEXT("UCloudStorageBase"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UCloudStorageBase);
	UFunction* Z_Construct_UDelegateFunction_Engine_OnUserClosedAdvertisement__DelegateSignature()
	{
		UObject* Outer=Z_Construct_UPackage_Engine();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnUserClosedAdvertisement__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00120000, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/InGameAdManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Delegate called when user closes an ad (after clicking on banner). Base class already handles\npausing, so a delegate is only needed if you need extra handling.  If you set it to a PC or other actor\nfunction, make sure to set it back when switching levels."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UDelegateFunction_Engine_OnUserClickedBanner__DelegateSignature()
	{
		UObject* Outer=Z_Construct_UPackage_Engine();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnUserClickedBanner__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00120000, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/InGameAdManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Delegate called when user clicks on an banner ad. Base class already handles pausing,\nso a delegate is only needed if you need extra handling. If you set it to a PC or other actor\nfunction, make sure to set it back when switching levels."));
#endif
		}
		return ReturnFunction;
	}
	UEnum* Z_Construct_UEnum_Engine_EAdManagerDelegate()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EAdManagerDelegate_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EAdManagerDelegate"), 0, Get_Z_Construct_UEnum_Engine_EAdManagerDelegate_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EAdManagerDelegate"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("AMD_ClickedBanner")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("AMD_UserClosedAd")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("AMD_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/InGameAdManager.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EAdManagerDelegate_CRC() { return 3764054417U; }
	UClass* Z_Construct_UClass_UInGameAdManager_NoRegister()
	{
		return UInGameAdManager::StaticClass();
	}
	UClass* Z_Construct_UClass_UInGameAdManager()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPlatformInterfaceBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UInGameAdManager::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20800088;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ClosedAdDelegates = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ClosedAdDelegates"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ClosedAdDelegates, UInGameAdManager), 0x0000008000000000);
				UProperty* NewProp_ClosedAdDelegates_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ClosedAdDelegates, TEXT("ClosedAdDelegates"), RF_Public|RF_Transient|RF_Native) UDelegateProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000080000, Z_Construct_UDelegateFunction_Engine_OnUserClosedAdvertisement__DelegateSignature());
				UProperty* NewProp_ClickedBannerDelegates = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ClickedBannerDelegates"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ClickedBannerDelegates, UInGameAdManager), 0x0000008000000000);
				UProperty* NewProp_ClickedBannerDelegates_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ClickedBannerDelegates, TEXT("ClickedBannerDelegates"), RF_Public|RF_Transient|RF_Native) UDelegateProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000080000, Z_Construct_UDelegateFunction_Engine_OnUserClickedBanner__DelegateSignature());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bShouldPauseWhileAdOpen, UInGameAdManager, uint8);
				UProperty* NewProp_bShouldPauseWhileAdOpen = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bShouldPauseWhileAdOpen"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bShouldPauseWhileAdOpen, UInGameAdManager), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bShouldPauseWhileAdOpen, UInGameAdManager), sizeof(uint8), false);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/InGameAdManager.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/InGameAdManager.h"));
				MetaData->SetValue(NewProp_ClosedAdDelegates, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/InGameAdManager.h"));
				MetaData->SetValue(NewProp_ClosedAdDelegates, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_ClickedBannerDelegates, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/InGameAdManager.h"));
				MetaData->SetValue(NewProp_ClickedBannerDelegates, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_bShouldPauseWhileAdOpen, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/InGameAdManager.h"));
				MetaData->SetValue(NewProp_bShouldPauseWhileAdOpen, TEXT("ToolTip"), TEXT("If true, the game will pause when the user clicks on the ad, which could take over the screen"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UInGameAdManager(Z_Construct_UClass_UInGameAdManager, TEXT("UInGameAdManager"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UInGameAdManager);
	UEnum* Z_Construct_UEnum_Engine_EMicroTransactionResult()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EMicroTransactionResult_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EMicroTransactionResult"), 0, Get_Z_Construct_UEnum_Engine_EMicroTransactionResult_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EMicroTransactionResult"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("MTR_Succeeded")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("MTR_Failed")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("MTR_Canceled")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("MTR_RestoredFromServer")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("MTR_MAX")), 4));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/MicroTransactionBase.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Result of a purchase."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EMicroTransactionResult_CRC() { return 893544835U; }
	UEnum* Z_Construct_UEnum_Engine_EMicroTransactionDelegate()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EMicroTransactionDelegate_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EMicroTransactionDelegate"), 0, Get_Z_Construct_UEnum_Engine_EMicroTransactionDelegate_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EMicroTransactionDelegate"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("MTD_PurchaseQueryComplete")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("MTD_PurchaseComplete")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("MTD_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/MicroTransactionBase.h"));
			MetaData->SetValue(ReturnEnum, TEXT("MTD_PurchaseComplete.ToolTip"), TEXT("Data:Result code, and identifier of the product that completed.\nType:Custom\nDesc:IntValue will have one of the enums in EMicroTransactionResult, and StringValue\n     will have the Identifier from the PurchaseInfo that was bought with BeginPurchase\n     If MTR_Failed was returned, then LastError and LastErrorSolution should be filled\n             out with the most recent localized and possible resolutions."));
			MetaData->SetValue(ReturnEnum, TEXT("MTD_PurchaseQueryComplete.ToolTip"), TEXT("Data:None\nDesc:QueryForAvailablePurchases() is complete and AvailableProducts is ready for use."));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("All the types of delegate callbacks that a MicroTransaction subclass may receive from C++."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EMicroTransactionDelegate_CRC() { return 798178840U; }
	UScriptStruct* Z_Construct_UScriptStruct_FPurchaseInfo()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FPurchaseInfo_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("PurchaseInfo"), sizeof(FPurchaseInfo), Get_Z_Construct_UScriptStruct_FPurchaseInfo_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PurchaseInfo"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FPurchaseInfo>, EStructFlags(0x00000001));
			UProperty* NewProp_DisplayPrice = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DisplayPrice"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(DisplayPrice, FPurchaseInfo), 0x0000000000000000);
			UProperty* NewProp_DisplayDescription = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DisplayDescription"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(DisplayDescription, FPurchaseInfo), 0x0000000000000000);
			UProperty* NewProp_DisplayName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DisplayName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(DisplayName, FPurchaseInfo), 0x0000000000000000);
			UProperty* NewProp_Identifier = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Identifier"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Identifier, FPurchaseInfo), 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/MicroTransactionBase.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Purchase information structure"));
			MetaData->SetValue(NewProp_DisplayPrice, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/MicroTransactionBase.h"));
			MetaData->SetValue(NewProp_DisplayPrice, TEXT("ToolTip"), TEXT("Price displayable to the user"));
			MetaData->SetValue(NewProp_DisplayDescription, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/MicroTransactionBase.h"));
			MetaData->SetValue(NewProp_DisplayDescription, TEXT("ToolTip"), TEXT("Description displayable to the user"));
			MetaData->SetValue(NewProp_DisplayName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/MicroTransactionBase.h"));
			MetaData->SetValue(NewProp_DisplayName, TEXT("ToolTip"), TEXT("Name displayable to the user"));
			MetaData->SetValue(NewProp_Identifier, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/MicroTransactionBase.h"));
			MetaData->SetValue(NewProp_Identifier, TEXT("ToolTip"), TEXT("Unique identifier for the purchase"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FPurchaseInfo_CRC() { return 2205387584U; }
	UClass* Z_Construct_UClass_UMicroTransactionBase_NoRegister()
	{
		return UMicroTransactionBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UMicroTransactionBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPlatformInterfaceBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UMicroTransactionBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20800088;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_LastErrorSolution = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LastErrorSolution"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(LastErrorSolution, UMicroTransactionBase), 0x0000000000000000);
				UProperty* NewProp_LastError = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LastError"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(LastError, UMicroTransactionBase), 0x0000000000000000);
				UProperty* NewProp_AvailableProducts = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AvailableProducts"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(AvailableProducts, UMicroTransactionBase), 0x0000000000000000);
				UProperty* NewProp_AvailableProducts_Inner = new(EC_InternalUseOnlyConstructor, NewProp_AvailableProducts, TEXT("AvailableProducts"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FPurchaseInfo());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/MicroTransactionBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/MicroTransactionBase.h"));
				MetaData->SetValue(NewProp_LastErrorSolution, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/MicroTransactionBase.h"));
				MetaData->SetValue(NewProp_LastErrorSolution, TEXT("ToolTip"), TEXT("In case of errors, this will describe possible solutions (if there are any)"));
				MetaData->SetValue(NewProp_LastError, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/MicroTransactionBase.h"));
				MetaData->SetValue(NewProp_LastError, TEXT("ToolTip"), TEXT("In case of errors, this will describe the most recent error"));
				MetaData->SetValue(NewProp_AvailableProducts, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/MicroTransactionBase.h"));
				MetaData->SetValue(NewProp_AvailableProducts, TEXT("ToolTip"), TEXT("The list of products available to purchase, filled out by the time a MTD_PurchaseQueryComplete is fired"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMicroTransactionBase(Z_Construct_UClass_UMicroTransactionBase, TEXT("UMicroTransactionBase"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMicroTransactionBase);
	UEnum* Z_Construct_UEnum_Engine_ETwitterIntegrationDelegate()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_ETwitterIntegrationDelegate_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ETwitterIntegrationDelegate"), 0, Get_Z_Construct_UEnum_Engine_ETwitterIntegrationDelegate_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ETwitterIntegrationDelegate"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TID_AuthorizeComplete")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TID_TweetUIComplete")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TID_RequestComplete")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TID_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TwitterIntegrationBase.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_ETwitterIntegrationDelegate_CRC() { return 1557653494U; }
	UEnum* Z_Construct_UEnum_Engine_ETwitterRequestMethod()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_ETwitterRequestMethod_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ETwitterRequestMethod"), 0, Get_Z_Construct_UEnum_Engine_ETwitterRequestMethod_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ETwitterRequestMethod"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TRM_Get")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TRM_Post")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TRM_Delete")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TRM_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TwitterIntegrationBase.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("The possible twitter request methods"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_ETwitterRequestMethod_CRC() { return 2981716359U; }
	UFunction* Z_Construct_UFunction_UTwitterIntegrationBase_AuthorizeAccounts()
	{
		struct TwitterIntegrationBase_eventAuthorizeAccounts_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UTwitterIntegrationBase();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AuthorizeAccounts"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020400, 65535, sizeof(TwitterIntegrationBase_eventAuthorizeAccounts_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, TwitterIntegrationBase_eventAuthorizeAccounts_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, TwitterIntegrationBase_eventAuthorizeAccounts_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, TwitterIntegrationBase_eventAuthorizeAccounts_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TwitterIntegrationBase.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Starts the process of authorizing the local user(s). When TID_AuthorizeComplete is called, then GetNumAccounts()\nwill return a valid number of accounts\n\n@return true if the authorization process started, and TID_AuthorizeComplete delegates will be called"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTwitterIntegrationBase_CanShowTweetUI()
	{
		struct TwitterIntegrationBase_eventCanShowTweetUI_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UTwitterIntegrationBase();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CanShowTweetUI"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020400, 65535, sizeof(TwitterIntegrationBase_eventCanShowTweetUI_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, TwitterIntegrationBase_eventCanShowTweetUI_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, TwitterIntegrationBase_eventCanShowTweetUI_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, TwitterIntegrationBase_eventCanShowTweetUI_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TwitterIntegrationBase.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@return true if the user is allowed to use the Tweet UI"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTwitterIntegrationBase_GetAccountName()
	{
		struct TwitterIntegrationBase_eventGetAccountName_Parms
		{
			int32 AccountIndex;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UTwitterIntegrationBase();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetAccountName"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020400, 65535, sizeof(TwitterIntegrationBase_eventGetAccountName_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, TwitterIntegrationBase_eventGetAccountName_Parms), 0x0000000000000580);
			UProperty* NewProp_AccountIndex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AccountIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(AccountIndex, TwitterIntegrationBase_eventGetAccountName_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TwitterIntegrationBase.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@return the display name of the given Twitter account"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTwitterIntegrationBase_GetNumAccounts()
	{
		struct TwitterIntegrationBase_eventGetNumAccounts_Parms
		{
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UTwitterIntegrationBase();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetNumAccounts"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020400, 65535, sizeof(TwitterIntegrationBase_eventGetNumAccounts_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, TwitterIntegrationBase_eventGetNumAccounts_Parms), 0x0000000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TwitterIntegrationBase.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@return The number of accounts that were authorized"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTwitterIntegrationBase_Init()
	{
		UObject* Outer=Z_Construct_UClass_UTwitterIntegrationBase();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Init"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020400, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TwitterIntegrationBase.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Perform any needed initialization"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTwitterIntegrationBase_ShowTweetUI()
	{
		struct TwitterIntegrationBase_eventShowTweetUI_Parms
		{
			FString InitialMessage;
			FString URL;
			FString Picture;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UTwitterIntegrationBase();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ShowTweetUI"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020400, 65535, sizeof(TwitterIntegrationBase_eventShowTweetUI_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, TwitterIntegrationBase_eventShowTweetUI_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, TwitterIntegrationBase_eventShowTweetUI_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, TwitterIntegrationBase_eventShowTweetUI_Parms), sizeof(bool), true);
			UProperty* NewProp_Picture = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Picture"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Picture, TwitterIntegrationBase_eventShowTweetUI_Parms), 0x0000000000000080);
			UProperty* NewProp_URL = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("URL"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(URL, TwitterIntegrationBase_eventShowTweetUI_Parms), 0x0000000000000080);
			UProperty* NewProp_InitialMessage = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InitialMessage"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(InitialMessage, TwitterIntegrationBase_eventShowTweetUI_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TwitterIntegrationBase.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Kicks off a tweet, using the platform to show the UI. If this returns false, or you are on a platform that doesn't support the UI,\nyou can use the TwitterRequest method to perform a manual tweet using the Twitter API\n\n@param InitialMessage [optional] Initial message to show\n@param URL [optional] URL to attach to the tweet\n@param Picture [optional] Name of a picture (stored locally, platform subclass will do the searching for it) to add to the tweet\n\n@return true if a UI was displayed for the user to interact with, and a TID_TweetUIComplete will be sent"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTwitterIntegrationBase_TwitterRequest()
	{
		struct TwitterIntegrationBase_eventTwitterRequest_Parms
		{
			FString URL;
			TArray<FString> ParamKeysAndValues;
			TEnumAsByte<ETwitterRequestMethod> RequestMethod;
			int32 AccountIndex;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UTwitterIntegrationBase();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TwitterRequest"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00420400, 65535, sizeof(TwitterIntegrationBase_eventTwitterRequest_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, TwitterIntegrationBase_eventTwitterRequest_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, TwitterIntegrationBase_eventTwitterRequest_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, TwitterIntegrationBase_eventTwitterRequest_Parms), sizeof(bool), true);
			UProperty* NewProp_AccountIndex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AccountIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(AccountIndex, TwitterIntegrationBase_eventTwitterRequest_Parms), 0x0000000000000080);
			UProperty* NewProp_RequestMethod = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("RequestMethod"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(RequestMethod, TwitterIntegrationBase_eventTwitterRequest_Parms), 0x0000000000000080, Z_Construct_UEnum_Engine_ETwitterRequestMethod());
			UProperty* NewProp_ParamKeysAndValues = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ParamKeysAndValues"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ParamKeysAndValues, TwitterIntegrationBase_eventTwitterRequest_Parms), 0x0000000008000182);
			UProperty* NewProp_ParamKeysAndValues_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ParamKeysAndValues, TEXT("ParamKeysAndValues"), RF_Public|RF_Transient|RF_Native) UStrProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_URL = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("URL"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(URL, TwitterIntegrationBase_eventTwitterRequest_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TwitterIntegrationBase.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Kicks off a generic twitter request\n\n@param URL The URL for the twitter request\n@param KeysAndValues The extra parameters to pass to the request (request specific). Separate keys and values: < \"key1\", \"value1\", \"key2\", \"value2\" >\n@param Method The method for this request (get, post, delete)\n@param AccountIndex A user index if an account is needed, or -1 if an account isn't needed for the request\n\n@return true the request was sent off, and a TID_RequestComplete"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UTwitterIntegrationBase_NoRegister()
	{
		return UTwitterIntegrationBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UTwitterIntegrationBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPlatformInterfaceBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UTwitterIntegrationBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20800088;

				OuterClass->LinkChild(Z_Construct_UFunction_UTwitterIntegrationBase_AuthorizeAccounts());
				OuterClass->LinkChild(Z_Construct_UFunction_UTwitterIntegrationBase_CanShowTweetUI());
				OuterClass->LinkChild(Z_Construct_UFunction_UTwitterIntegrationBase_GetAccountName());
				OuterClass->LinkChild(Z_Construct_UFunction_UTwitterIntegrationBase_GetNumAccounts());
				OuterClass->LinkChild(Z_Construct_UFunction_UTwitterIntegrationBase_Init());
				OuterClass->LinkChild(Z_Construct_UFunction_UTwitterIntegrationBase_ShowTweetUI());
				OuterClass->LinkChild(Z_Construct_UFunction_UTwitterIntegrationBase_TwitterRequest());

				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UTwitterIntegrationBase_AuthorizeAccounts()); // 1744890867
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UTwitterIntegrationBase_CanShowTweetUI()); // 4213692857
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UTwitterIntegrationBase_GetAccountName()); // 84033915
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UTwitterIntegrationBase_GetNumAccounts()); // 1989741220
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UTwitterIntegrationBase_Init()); // 498666882
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UTwitterIntegrationBase_ShowTweetUI()); // 249783401
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UTwitterIntegrationBase_TwitterRequest()); // 1251684134
				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/TwitterIntegrationBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TwitterIntegrationBase.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UTwitterIntegrationBase(Z_Construct_UClass_UTwitterIntegrationBase, TEXT("UTwitterIntegrationBase"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UTwitterIntegrationBase);
	UFunction* Z_Construct_UFunction_UPlatformInterfaceWebResponse_GetHeader()
	{
		struct PlatformInterfaceWebResponse_eventGetHeader_Parms
		{
			int32 HeaderIndex;
			FString Header;
			FString Value;
		};
		UObject* Outer=Z_Construct_UClass_UPlatformInterfaceWebResponse();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetHeader"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00420400, 65535, sizeof(PlatformInterfaceWebResponse_eventGetHeader_Parms));
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Value, PlatformInterfaceWebResponse_eventGetHeader_Parms), 0x0000000000000180);
			UProperty* NewProp_Header = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Header"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Header, PlatformInterfaceWebResponse_eventGetHeader_Parms), 0x0000000000000180);
			UProperty* NewProp_HeaderIndex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("HeaderIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(HeaderIndex, PlatformInterfaceWebResponse_eventGetHeader_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/PlatformInterfaceWebResponse.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Retrieve the header and value for the given index of header/value pair"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPlatformInterfaceWebResponse_GetHeaderValue()
	{
		struct PlatformInterfaceWebResponse_eventGetHeaderValue_Parms
		{
			FString HeaderName;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPlatformInterfaceWebResponse();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetHeaderValue"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020400, 65535, sizeof(PlatformInterfaceWebResponse_eventGetHeaderValue_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, PlatformInterfaceWebResponse_eventGetHeaderValue_Parms), 0x0000000000000580);
			UProperty* NewProp_HeaderName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("HeaderName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(HeaderName, PlatformInterfaceWebResponse_eventGetHeaderValue_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/PlatformInterfaceWebResponse.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@return the value for the given header (or \"\" if no matching header)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPlatformInterfaceWebResponse_GetNumHeaders()
	{
		struct PlatformInterfaceWebResponse_eventGetNumHeaders_Parms
		{
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPlatformInterfaceWebResponse();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetNumHeaders"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020400, 65535, sizeof(PlatformInterfaceWebResponse_eventGetNumHeaders_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, PlatformInterfaceWebResponse_eventGetNumHeaders_Parms), 0x0000000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/PlatformInterfaceWebResponse.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@return the number of header/value pairs"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UPlatformInterfaceWebResponse_NoRegister()
	{
		return UPlatformInterfaceWebResponse::StaticClass();
	}
	UClass* Z_Construct_UClass_UPlatformInterfaceWebResponse()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UPlatformInterfaceWebResponse::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080088;

				OuterClass->LinkChild(Z_Construct_UFunction_UPlatformInterfaceWebResponse_GetHeader());
				OuterClass->LinkChild(Z_Construct_UFunction_UPlatformInterfaceWebResponse_GetHeaderValue());
				OuterClass->LinkChild(Z_Construct_UFunction_UPlatformInterfaceWebResponse_GetNumHeaders());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_BinaryResponse = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BinaryResponse"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(BinaryResponse, UPlatformInterfaceWebResponse), 0x0000000000000000);
				UProperty* NewProp_BinaryResponse_Inner = new(EC_InternalUseOnlyConstructor, NewProp_BinaryResponse, TEXT("BinaryResponse"), RF_Public|RF_Transient|RF_Native) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
				UProperty* NewProp_StringResponse = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StringResponse"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(StringResponse, UPlatformInterfaceWebResponse), 0x0000000000000000);
				UProperty* NewProp_Tag = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Tag"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Tag, UPlatformInterfaceWebResponse), 0x0000000000000000);
				UProperty* NewProp_ResponseCode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ResponseCode"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ResponseCode, UPlatformInterfaceWebResponse), 0x0000000000000000);
				UProperty* NewProp_OriginalURL = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OriginalURL"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(OriginalURL, UPlatformInterfaceWebResponse), 0x0000000000000000);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UPlatformInterfaceWebResponse_GetHeader()); // 2963098984
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UPlatformInterfaceWebResponse_GetHeaderValue()); // 115006411
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UPlatformInterfaceWebResponse_GetNumHeaders()); // 2421787236
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/PlatformInterfaceWebResponse.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/PlatformInterfaceWebResponse.h"));
				MetaData->SetValue(NewProp_BinaryResponse, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/PlatformInterfaceWebResponse.h"));
				MetaData->SetValue(NewProp_BinaryResponse, TEXT("ToolTip"), TEXT("For non-string results, this is the response"));
				MetaData->SetValue(NewProp_StringResponse, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/PlatformInterfaceWebResponse.h"));
				MetaData->SetValue(NewProp_StringResponse, TEXT("ToolTip"), TEXT("For string results, this is the response"));
				MetaData->SetValue(NewProp_Tag, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/PlatformInterfaceWebResponse.h"));
				MetaData->SetValue(NewProp_Tag, TEXT("ToolTip"), TEXT("A user-specified tag specified with the request"));
				MetaData->SetValue(NewProp_ResponseCode, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/PlatformInterfaceWebResponse.h"));
				MetaData->SetValue(NewProp_ResponseCode, TEXT("ToolTip"), TEXT("Result code from the response (200=OK, 404=Not Found, etc)"));
				MetaData->SetValue(NewProp_OriginalURL, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/PlatformInterfaceWebResponse.h"));
				MetaData->SetValue(NewProp_OriginalURL, TEXT("ToolTip"), TEXT("This holds the original requested URL"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UPlatformInterfaceWebResponse(Z_Construct_UClass_UPlatformInterfaceWebResponse, TEXT("UPlatformInterfaceWebResponse"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UPlatformInterfaceWebResponse);
	UClass* Z_Construct_UClass_UPlayer_NoRegister()
	{
		return UPlayer::StaticClass();
	}
	UClass* Z_Construct_UClass_UPlayer()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UPlayer::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x2000008C;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ConfiguredLanSpeed = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConfiguredLanSpeed"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ConfiguredLanSpeed, UPlayer), 0x0000000000044000);
				UProperty* NewProp_ConfiguredInternetSpeed = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConfiguredInternetSpeed"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ConfiguredInternetSpeed, UPlayer), 0x0000000000044000);
				UProperty* NewProp_CurrentNetSpeed = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CurrentNetSpeed"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(CurrentNetSpeed, UPlayer), 0x0000000000000000);
				UProperty* NewProp_PlayerController = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PlayerController"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(PlayerController, UPlayer), 0x0000000000002000, Z_Construct_UClass_APlayerController_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/Player.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Player.h"));
				MetaData->SetValue(NewProp_ConfiguredLanSpeed, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Player.h"));
				MetaData->SetValue(NewProp_ConfiguredLanSpeed, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_ConfiguredInternetSpeed, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Player.h"));
				MetaData->SetValue(NewProp_ConfiguredInternetSpeed, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_CurrentNetSpeed, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Player.h"));
				MetaData->SetValue(NewProp_CurrentNetSpeed, TEXT("ToolTip"), TEXT("the current speed of the connection"));
				MetaData->SetValue(NewProp_PlayerController, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Player.h"));
				MetaData->SetValue(NewProp_PlayerController, TEXT("ToolTip"), TEXT("The actor this player controls."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UPlayer(Z_Construct_UClass_UPlayer, TEXT("UPlayer"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UPlayer);
	UClass* Z_Construct_UClass_ULocalPlayer_NoRegister()
	{
		return ULocalPlayer::StaticClass();
	}
	UClass* Z_Construct_UClass_ULocalPlayer()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPlayer();
			Z_Construct_UPackage_Engine();
			OuterClass = ULocalPlayer::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x2010008C;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSentSplitJoin, ULocalPlayer, uint8);
				UProperty* NewProp_bSentSplitJoin = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bSentSplitJoin"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSentSplitJoin, ULocalPlayer), 0x0000000000022001, CPP_BOOL_PROPERTY_BITMASK(bSentSplitJoin, ULocalPlayer), sizeof(uint8), false);
				UProperty* NewProp_PendingLevelPlayerControllerClass = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PendingLevelPlayerControllerClass"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(PendingLevelPlayerControllerClass, ULocalPlayer), 0x0004000000000000, Z_Construct_UClass_APlayerController_NoRegister());
				UProperty* NewProp_AspectRatioAxisConstraint = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AspectRatioAxisConstraint"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(AspectRatioAxisConstraint, ULocalPlayer), 0x0000000000004000, Z_Construct_UEnum_Engine_EAspectRatioAxisConstraint());
				UProperty* NewProp_ViewportClient = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ViewportClient"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ViewportClient, ULocalPlayer), 0x0000000000000000, Z_Construct_UClass_UGameViewportClient_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/LocalPlayer.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/LocalPlayer.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Each player that is active on the current client has a LocalPlayer. It stays active across maps\nThere may be several spawned in the case of splitscreen/coop.\nThere may be 0 spawned on servers."));
				MetaData->SetValue(NewProp_bSentSplitJoin, TEXT("Category"), TEXT("LocalPlayer"));
				MetaData->SetValue(NewProp_bSentSplitJoin, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/LocalPlayer.h"));
				MetaData->SetValue(NewProp_bSentSplitJoin, TEXT("ToolTip"), TEXT("set when we've sent a split join request"));
				MetaData->SetValue(NewProp_PendingLevelPlayerControllerClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/LocalPlayer.h"));
				MetaData->SetValue(NewProp_PendingLevelPlayerControllerClass, TEXT("ToolTip"), TEXT("The class of PlayerController to spawn for players logging in."));
				MetaData->SetValue(NewProp_AspectRatioAxisConstraint, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/LocalPlayer.h"));
				MetaData->SetValue(NewProp_AspectRatioAxisConstraint, TEXT("ToolTip"), TEXT("How to constrain perspective viewport FOV"));
				MetaData->SetValue(NewProp_ViewportClient, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/LocalPlayer.h"));
				MetaData->SetValue(NewProp_ViewportClient, TEXT("ToolTip"), TEXT("The master viewport containing this player's view."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ULocalPlayer(Z_Construct_UClass_ULocalPlayer, TEXT("ULocalPlayer"));
	UClass* Z_Construct_UClass_UNetConnection_NoRegister()
	{
		return UNetConnection::StaticClass();
	}
	UClass* Z_Construct_UClass_UNetConnection()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPlayer();
			Z_Construct_UPackage_Engine();
			OuterClass = UNetConnection::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x2008008D;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_LastReceiveTime = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LastReceiveTime"), RF_Public|RF_Transient|RF_Native) UDoubleProperty(CPP_PROPERTY_BASE(LastReceiveTime, UNetConnection), 0x0000000000000000);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(InternalAck, UNetConnection, uint8);
				UProperty* NewProp_InternalAck = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InternalAck"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(InternalAck, UNetConnection), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(InternalAck, UNetConnection), sizeof(uint8), false);
				UProperty* NewProp_MaxPacket = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxPacket"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MaxPacket, UNetConnection), 0x0000000000000000);
				UProperty* NewProp_OwningActor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OwningActor"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(OwningActor, UNetConnection), 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
				UProperty* NewProp_ViewTarget = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ViewTarget"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ViewTarget, UNetConnection), 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
				UProperty* NewProp_SentTemporaries = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SentTemporaries"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(SentTemporaries, UNetConnection), 0x0000000000000000);
				UProperty* NewProp_SentTemporaries_Inner = new(EC_InternalUseOnlyConstructor, NewProp_SentTemporaries, TEXT("SentTemporaries"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
				UProperty* NewProp_OpenChannels = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OpenChannels"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(OpenChannels, UNetConnection), 0x0000000000000000);
				UProperty* NewProp_OpenChannels_Inner = new(EC_InternalUseOnlyConstructor, NewProp_OpenChannels, TEXT("OpenChannels"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UChannel_NoRegister());
				UProperty* NewProp_PackageMap = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PackageMap"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(PackageMap, UNetConnection), 0x0000000000000000, UPackageMap::StaticClass());
				UProperty* NewProp_Driver = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Driver"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Driver, UNetConnection), 0x0000000000000000, Z_Construct_UClass_UNetDriver_NoRegister());
				UProperty* NewProp_Children = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Children"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Children, UNetConnection), 0x0000000000002000);
				UProperty* NewProp_Children_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Children, TEXT("Children"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UChildConnection_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/NetConnection.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NetConnection.h"));
				MetaData->SetValue(NewProp_LastReceiveTime, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NetConnection.h"));
				MetaData->SetValue(NewProp_LastReceiveTime, TEXT("ToolTip"), TEXT("Internal."));
				MetaData->SetValue(NewProp_InternalAck, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NetConnection.h"));
				MetaData->SetValue(NewProp_InternalAck, TEXT("ToolTip"), TEXT("Maximum packet size."));
				MetaData->SetValue(NewProp_MaxPacket, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NetConnection.h"));
				MetaData->SetValue(NewProp_OwningActor, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NetConnection.h"));
				MetaData->SetValue(NewProp_OwningActor, TEXT("ToolTip"), TEXT("Reference to controlling actor (usually PlayerController)"));
				MetaData->SetValue(NewProp_ViewTarget, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NetConnection.h"));
				MetaData->SetValue(NewProp_ViewTarget, TEXT("ToolTip"), TEXT("The actor that is currently being viewed/controlled by the owning controller"));
				MetaData->SetValue(NewProp_SentTemporaries, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NetConnection.h"));
				MetaData->SetValue(NewProp_SentTemporaries, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_OpenChannels, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NetConnection.h"));
				MetaData->SetValue(NewProp_OpenChannels, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_PackageMap, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NetConnection.h"));
				MetaData->SetValue(NewProp_PackageMap, TEXT("ToolTip"), TEXT("Package map between local and remote. (negotiates net serialization)"));
				MetaData->SetValue(NewProp_Driver, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NetConnection.h"));
				MetaData->SetValue(NewProp_Driver, TEXT("ToolTip"), TEXT("Owning net driver"));
				MetaData->SetValue(NewProp_Children, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NetConnection.h"));
				MetaData->SetValue(NewProp_Children, TEXT("ToolTip"), TEXT("child connections for secondary viewports"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UNetConnection(Z_Construct_UClass_UNetConnection, TEXT("UNetConnection"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UNetConnection);
	UClass* Z_Construct_UClass_UChildConnection_NoRegister()
	{
		return UChildConnection::StaticClass();
	}
	UClass* Z_Construct_UClass_UChildConnection()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UNetConnection();
			Z_Construct_UPackage_Engine();
			OuterClass = UChildConnection::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x2008008C;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Parent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Parent"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Parent, UChildConnection), 0x0000000000002000, Z_Construct_UClass_UNetConnection_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/ChildConnection.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/ChildConnection.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Represents a secondary split screen connection that reroutes calls to the parent connection."));
				MetaData->SetValue(NewProp_Parent, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/ChildConnection.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UChildConnection(Z_Construct_UClass_UChildConnection, TEXT("UChildConnection"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UChildConnection);
	UClass* Z_Construct_UClass_UDemoNetConnection_NoRegister()
	{
		return UDemoNetConnection::StaticClass();
	}
	UClass* Z_Construct_UClass_UDemoNetConnection()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UNetConnection();
			Z_Construct_UPackage_Engine();
			OuterClass = UDemoNetConnection::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x2000008C;


				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/DemoNetConnection.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DemoNetConnection.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Simulated network connection for recording and playing back game sessions."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UDemoNetConnection(Z_Construct_UClass_UDemoNetConnection, TEXT("UDemoNetConnection"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UDemoNetConnection);
	UClass* Z_Construct_UClass_UPolys_NoRegister()
	{
		return UPolys::StaticClass();
	}
	UClass* Z_Construct_UClass_UPolys()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UPolys::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/Polys.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Polys.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UPolys(Z_Construct_UClass_UPolys, TEXT("UPolys"));
	UEnum* Z_Construct_UEnum_Engine_EReporterLineStyle()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EReporterLineStyle_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EReporterLineStyle"), 0, Get_Z_Construct_UEnum_Engine_EReporterLineStyle_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EReporterLineStyle"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EReporterLineStyle::Line")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EReporterLineStyle::Dash")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EReporterLineStyle::EReporterLineStyle_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Debug/ReporterBase.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Draw styles for lines."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EReporterLineStyle_CRC() { return 1828458216U; }
	UClass* Z_Construct_UClass_UReporterBase_NoRegister()
	{
		return UReporterBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UReporterBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UReporterBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Debug/ReporterBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Debug/ReporterBase.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UReporterBase(Z_Construct_UClass_UReporterBase, TEXT("UReporterBase"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UReporterBase);
	UEnum* Z_Construct_UEnum_Engine_ELegendPosition()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_ELegendPosition_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ELegendPosition"), 0, Get_Z_Construct_UEnum_Engine_ELegendPosition_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ELegendPosition"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ELegendPosition::Outside")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ELegendPosition::Inside")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ELegendPosition::ELegendPosition_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Debug/ReporterGraph.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_ELegendPosition_CRC() { return 3650334544U; }
	UEnum* Z_Construct_UEnum_Engine_EGraphDataStyle()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EGraphDataStyle_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EGraphDataStyle"), 0, Get_Z_Construct_UEnum_Engine_EGraphDataStyle_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EGraphDataStyle"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGraphDataStyle::Lines")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGraphDataStyle::Filled")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGraphDataStyle::EGraphDataStyle_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Debug/ReporterGraph.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Draw styles for data."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EGraphDataStyle_CRC() { return 2479707027U; }
	UEnum* Z_Construct_UEnum_Engine_EGraphAxisStyle()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EGraphAxisStyle_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EGraphAxisStyle"), 0, Get_Z_Construct_UEnum_Engine_EGraphAxisStyle_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EGraphAxisStyle"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGraphAxisStyle::Lines")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGraphAxisStyle::Notches")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGraphAxisStyle::Grid")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGraphAxisStyle::EGraphAxisStyle_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Debug/ReporterGraph.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Draw styles for axes."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EGraphAxisStyle_CRC() { return 2068285740U; }
	UClass* Z_Construct_UClass_UReporterGraph_NoRegister()
	{
		return UReporterGraph::StaticClass();
	}
	UClass* Z_Construct_UClass_UReporterGraph()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UReporterBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UReporterGraph::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Debug/ReporterGraph.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Debug/ReporterGraph.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UReporterGraph(Z_Construct_UClass_UReporterGraph, TEXT("UReporterGraph"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UReporterGraph);
	UClass* Z_Construct_UClass_UReverbEffect_NoRegister()
	{
		return UReverbEffect::StaticClass();
	}
	UClass* Z_Construct_UClass_UReverbEffect()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UReverbEffect::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_RoomRolloffFactor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RoomRolloffFactor"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(RoomRolloffFactor, UReverbEffect), 0x0000000000000001);
				UProperty* NewProp_AirAbsorptionGainHF = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AirAbsorptionGainHF"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(AirAbsorptionGainHF, UReverbEffect), 0x0000000000000001);
				UProperty* NewProp_LateDelay = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LateDelay"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(LateDelay, UReverbEffect), 0x0000000000000001);
				UProperty* NewProp_LateGain = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LateGain"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(LateGain, UReverbEffect), 0x0000000000000001);
				UProperty* NewProp_ReflectionsDelay = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ReflectionsDelay"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReflectionsDelay, UReverbEffect), 0x0000000000000001);
				UProperty* NewProp_ReflectionsGain = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ReflectionsGain"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReflectionsGain, UReverbEffect), 0x0000000000000001);
				UProperty* NewProp_DecayHFRatio = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DecayHFRatio"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DecayHFRatio, UReverbEffect), 0x0000000000000001);
				UProperty* NewProp_DecayTime = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DecayTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DecayTime, UReverbEffect), 0x0000000000000001);
				UProperty* NewProp_GainHF = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GainHF"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(GainHF, UReverbEffect), 0x0000000000000001);
				UProperty* NewProp_Gain = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Gain"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Gain, UReverbEffect), 0x0000000000000001);
				UProperty* NewProp_Diffusion = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Diffusion"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Diffusion, UReverbEffect), 0x0000000000000001);
				UProperty* NewProp_Density = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Density"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Density, UReverbEffect), 0x0000000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Sound/ReverbEffect.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/ReverbEffect.h"));
				MetaData->SetValue(NewProp_RoomRolloffFactor, TEXT("Category"), TEXT("ReverbParameters"));
				MetaData->SetValue(NewProp_RoomRolloffFactor, TEXT("ClampMax"), TEXT("10.0"));
				MetaData->SetValue(NewProp_RoomRolloffFactor, TEXT("ClampMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_RoomRolloffFactor, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/ReverbEffect.h"));
				MetaData->SetValue(NewProp_RoomRolloffFactor, TEXT("ToolTip"), TEXT("Room Rolloff - 0.0 < 0.0 < 10.0 - multiplies the attenuation due to distance"));
				MetaData->SetValue(NewProp_AirAbsorptionGainHF, TEXT("Category"), TEXT("ReverbParameters"));
				MetaData->SetValue(NewProp_AirAbsorptionGainHF, TEXT("ClampMax"), TEXT("1.0"));
				MetaData->SetValue(NewProp_AirAbsorptionGainHF, TEXT("ClampMin"), TEXT("0.892"));
				MetaData->SetValue(NewProp_AirAbsorptionGainHF, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/ReverbEffect.h"));
				MetaData->SetValue(NewProp_AirAbsorptionGainHF, TEXT("ToolTip"), TEXT("Air Absorption - 0.892 < 0.994 < 1.0 - lower value means more absorption"));
				MetaData->SetValue(NewProp_LateDelay, TEXT("Category"), TEXT("ReverbParameters"));
				MetaData->SetValue(NewProp_LateDelay, TEXT("ClampMax"), TEXT("0.1"));
				MetaData->SetValue(NewProp_LateDelay, TEXT("ClampMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_LateDelay, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/ReverbEffect.h"));
				MetaData->SetValue(NewProp_LateDelay, TEXT("ToolTip"), TEXT("Late Reverb Delay - 0.0 < 0.011 < 0.1 Seconds - time difference between late reverb and first reflections"));
				MetaData->SetValue(NewProp_LateGain, TEXT("Category"), TEXT("ReverbParameters"));
				MetaData->SetValue(NewProp_LateGain, TEXT("ClampMax"), TEXT("10.0"));
				MetaData->SetValue(NewProp_LateGain, TEXT("ClampMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_LateGain, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/ReverbEffect.h"));
				MetaData->SetValue(NewProp_LateGain, TEXT("ToolTip"), TEXT("Late Reverb Gain - 0.0 < 1.26 < 10.0 - gain of the late reverb"));
				MetaData->SetValue(NewProp_ReflectionsDelay, TEXT("Category"), TEXT("ReverbParameters"));
				MetaData->SetValue(NewProp_ReflectionsDelay, TEXT("ClampMax"), TEXT("0.3"));
				MetaData->SetValue(NewProp_ReflectionsDelay, TEXT("ClampMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_ReflectionsDelay, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/ReverbEffect.h"));
				MetaData->SetValue(NewProp_ReflectionsDelay, TEXT("ToolTip"), TEXT("Reflections Delay - 0.0 < 0.007 < 0.3 Seconds - the time between the listener receiving the direct path sound and the first reflection"));
				MetaData->SetValue(NewProp_ReflectionsGain, TEXT("Category"), TEXT("ReverbParameters"));
				MetaData->SetValue(NewProp_ReflectionsGain, TEXT("ClampMax"), TEXT("3.16"));
				MetaData->SetValue(NewProp_ReflectionsGain, TEXT("ClampMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_ReflectionsGain, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/ReverbEffect.h"));
				MetaData->SetValue(NewProp_ReflectionsGain, TEXT("ToolTip"), TEXT("Reflections Gain - 0.0 < 0.05 < 3.16 - controls the amount of initial reflections"));
				MetaData->SetValue(NewProp_DecayHFRatio, TEXT("Category"), TEXT("ReverbParameters"));
				MetaData->SetValue(NewProp_DecayHFRatio, TEXT("ClampMax"), TEXT("2.0"));
				MetaData->SetValue(NewProp_DecayHFRatio, TEXT("ClampMin"), TEXT("0.1"));
				MetaData->SetValue(NewProp_DecayHFRatio, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/ReverbEffect.h"));
				MetaData->SetValue(NewProp_DecayHFRatio, TEXT("ToolTip"), TEXT("Decay High Frequency Ratio - 0.1 < 0.83 < 2.0 - how much the quicker or slower the high frequencies decay relative to the lower frequencies."));
				MetaData->SetValue(NewProp_DecayTime, TEXT("Category"), TEXT("ReverbParameters"));
				MetaData->SetValue(NewProp_DecayTime, TEXT("ClampMax"), TEXT("20.0"));
				MetaData->SetValue(NewProp_DecayTime, TEXT("ClampMin"), TEXT("0.1"));
				MetaData->SetValue(NewProp_DecayTime, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/ReverbEffect.h"));
				MetaData->SetValue(NewProp_DecayTime, TEXT("ToolTip"), TEXT("Decay Time - 0.1 < 1.49 < 20.0 Seconds - larger is more reverb"));
				MetaData->SetValue(NewProp_GainHF, TEXT("Category"), TEXT("ReverbParameters"));
				MetaData->SetValue(NewProp_GainHF, TEXT("ClampMax"), TEXT("1.0"));
				MetaData->SetValue(NewProp_GainHF, TEXT("ClampMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_GainHF, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/ReverbEffect.h"));
				MetaData->SetValue(NewProp_GainHF, TEXT("ToolTip"), TEXT("Reverb Gain High Frequency - 0.0 < 0.89 < 1.0 - attenuates the high frequency reflected sound"));
				MetaData->SetValue(NewProp_Gain, TEXT("Category"), TEXT("ReverbParameters"));
				MetaData->SetValue(NewProp_Gain, TEXT("ClampMax"), TEXT("1.0"));
				MetaData->SetValue(NewProp_Gain, TEXT("ClampMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_Gain, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/ReverbEffect.h"));
				MetaData->SetValue(NewProp_Gain, TEXT("ToolTip"), TEXT("Reverb Gain - 0.0 < 0.32 < 1.0 - overall reverb gain - master volume control"));
				MetaData->SetValue(NewProp_Diffusion, TEXT("Category"), TEXT("ReverbParameters"));
				MetaData->SetValue(NewProp_Diffusion, TEXT("ClampMax"), TEXT("1.0"));
				MetaData->SetValue(NewProp_Diffusion, TEXT("ClampMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_Diffusion, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/ReverbEffect.h"));
				MetaData->SetValue(NewProp_Diffusion, TEXT("ToolTip"), TEXT("Diffusion - 0.0 < 1.0 < 1.0 - Echo density in the reverberation decay - lower is more grainy"));
				MetaData->SetValue(NewProp_Density, TEXT("Category"), TEXT("ReverbParameters"));
				MetaData->SetValue(NewProp_Density, TEXT("ClampMax"), TEXT("1.0"));
				MetaData->SetValue(NewProp_Density, TEXT("ClampMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_Density, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/ReverbEffect.h"));
				MetaData->SetValue(NewProp_Density, TEXT("ToolTip"), TEXT("Density - 0.0 < 1.0 < 1.0 - Coloration of the late reverb - lower value is more"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UReverbEffect(Z_Construct_UClass_UReverbEffect, TEXT("UReverbEffect"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UReverbEffect);
	UEnum* Z_Construct_UEnum_Engine_EConstraintTransform()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EConstraintTransform_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EConstraintTransform"), 0, Get_Z_Construct_UEnum_Engine_EConstraintTransform_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EConstraintTransform"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EConstraintTransform::Absolute")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EConstraintTransform::Relative")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EConstraintTransform::EConstraintTransform_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("Absolute.ToolTip"), TEXT("Absolute value."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/Rig.h"));
			MetaData->SetValue(ReturnEnum, TEXT("Relative.ToolTip"), TEXT("Apply relative transform from ref pose."));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Constraint Transform Type. - currently unused"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EConstraintTransform_CRC() { return 3018804638U; }
	UEnum* Z_Construct_UEnum_Engine_EControlConstraint()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EControlConstraint_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EControlConstraint"), 0, Get_Z_Construct_UEnum_Engine_EControlConstraint_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EControlConstraint"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EControlConstraint::Orientation")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EControlConstraint::Translation")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EControlConstraint::Max")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EControlConstraint::EControlConstraint_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("Max.ToolTip"), TEXT("Max Number."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/Rig.h"));
			MetaData->SetValue(ReturnEnum, TEXT("Orientation.ToolTip"), TEXT("Rotation constraint."));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Control Constraint Type"));
			MetaData->SetValue(ReturnEnum, TEXT("Translation.ToolTip"), TEXT("Translation constraint."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EControlConstraint_CRC() { return 389222213U; }
	UScriptStruct* Z_Construct_UScriptStruct_FTransformBase()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FTransformBase_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("TransformBase"), sizeof(FTransformBase), Get_Z_Construct_UScriptStruct_FTransformBase_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TransformBase"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FTransformBase>, EStructFlags(0x00000001));
			UProperty* NewProp_Constraints = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Constraints"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Constraints, FTransformBase), 0x0000000000000001, Z_Construct_UScriptStruct_FTransformBaseConstraint());
			NewProp_Constraints->ArrayDim = CPP_ARRAY_DIM(Constraints, FTransformBase);
			UProperty* NewProp_Node = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Node"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(Node, FTransformBase), 0x0000000000000001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/Rig.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("This is a mapping table between bone in a particular skeletal mesh and bone of this skeleton set."));
			MetaData->SetValue(NewProp_Constraints, TEXT("Category"), TEXT("FTransformBase"));
			MetaData->SetValue(NewProp_Constraints, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/Rig.h"));
			MetaData->SetValue(NewProp_Node, TEXT("Category"), TEXT("FTransformBase"));
			MetaData->SetValue(NewProp_Node, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/Rig.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FTransformBase_CRC() { return 2669357196U; }
	UScriptStruct* Z_Construct_UScriptStruct_FTransformBaseConstraint()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FTransformBaseConstraint_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("TransformBaseConstraint"), sizeof(FTransformBaseConstraint), Get_Z_Construct_UScriptStruct_FTransformBaseConstraint_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TransformBaseConstraint"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FTransformBaseConstraint>, EStructFlags(0x00000001));
			UProperty* NewProp_TransformConstraints = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TransformConstraints"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(TransformConstraints, FTransformBaseConstraint), 0x0000000000000001);
			UProperty* NewProp_TransformConstraints_Inner = new(EC_InternalUseOnlyConstructor, NewProp_TransformConstraints, TEXT("TransformConstraints"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FRigTransformConstraint());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/Rig.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("This defines what constraint it is defined"));
			MetaData->SetValue(NewProp_TransformConstraints, TEXT("Category"), TEXT("FTransformBaseConstraint"));
			MetaData->SetValue(NewProp_TransformConstraints, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/Rig.h"));
			MetaData->SetValue(NewProp_TransformConstraints, TEXT("ToolTip"), TEXT("What transform type *"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FTransformBaseConstraint_CRC() { return 3416046133U; }
	UScriptStruct* Z_Construct_UScriptStruct_FRigTransformConstraint()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FRigTransformConstraint_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("RigTransformConstraint"), sizeof(FRigTransformConstraint), Get_Z_Construct_UScriptStruct_FRigTransformConstraint_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RigTransformConstraint"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FRigTransformConstraint>, EStructFlags(0x00000001));
			UProperty* NewProp_Weight = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Weight"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Weight, FRigTransformConstraint), 0x0000000000000000);
			UProperty* NewProp_ParentSpace = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ParentSpace"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(ParentSpace, FRigTransformConstraint), 0x0000000000000001);
			UProperty* NewProp_TranformType = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TranformType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(TranformType, FRigTransformConstraint), 0x0000000000000000, Z_Construct_UEnum_Engine_EConstraintTransform());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/Rig.h"));
			MetaData->SetValue(NewProp_Weight, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/Rig.h"));
			MetaData->SetValue(NewProp_Weight, TEXT("ToolTip"), TEXT("EditAnywhere, Category=\"FTransformBaseConstraint\""));
			MetaData->SetValue(NewProp_ParentSpace, TEXT("Category"), TEXT("FTransformBaseConstraint"));
			MetaData->SetValue(NewProp_ParentSpace, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/Rig.h"));
			MetaData->SetValue(NewProp_ParentSpace, TEXT("ToolTip"), TEXT("Parent space that are define *"));
			MetaData->SetValue(NewProp_TranformType, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/Rig.h"));
			MetaData->SetValue(NewProp_TranformType, TEXT("ToolTip"), TEXT("EditAnywhere, Category=\"FTransformBaseConstraint\""));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FRigTransformConstraint_CRC() { return 1861092045U; }
	UScriptStruct* Z_Construct_UScriptStruct_FNode()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FNode_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("Node"), sizeof(FNode), Get_Z_Construct_UScriptStruct_FNode_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Node"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FNode>, EStructFlags(0x00000001));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAdvanced, FNode, bool);
			UProperty* NewProp_bAdvanced = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bAdvanced"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAdvanced, FNode), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bAdvanced, FNode), sizeof(bool), true);
			UProperty* NewProp_DisplayName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DisplayName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(DisplayName, FNode), 0x0000000000000001);
			UProperty* NewProp_Transform = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Transform"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Transform, FNode), 0x0000000000000000, Z_Construct_UScriptStruct_FTransform());
			UProperty* NewProp_ParentName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ParentName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(ParentName, FNode), 0x0000000000020001);
			UProperty* NewProp_Name = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Name"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(Name, FNode), 0x0000000000020001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/Rig.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Rig Controller for bone transform *"));
			MetaData->SetValue(NewProp_bAdvanced, TEXT("Category"), TEXT("FNode"));
			MetaData->SetValue(NewProp_bAdvanced, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/Rig.h"));
			MetaData->SetValue(NewProp_DisplayName, TEXT("Category"), TEXT("FNode"));
			MetaData->SetValue(NewProp_DisplayName, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/Rig.h"));
			MetaData->SetValue(NewProp_DisplayName, TEXT("ToolTip"), TEXT("This is Display Name where it will be used to display in Retarget Manager. This name has to be unique."));
			MetaData->SetValue(NewProp_Transform, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/Rig.h"));
			MetaData->SetValue(NewProp_Transform, TEXT("ToolTip"), TEXT("Absolute transform of the node. Hoping to use this data in the future to render"));
			MetaData->SetValue(NewProp_ParentName, TEXT("Category"), TEXT("FNode"));
			MetaData->SetValue(NewProp_ParentName, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/Rig.h"));
			MetaData->SetValue(NewProp_ParentName, TEXT("ToolTip"), TEXT("We save Parent Node but if the parent node is removed, it will reset to root"));
			MetaData->SetValue(NewProp_Name, TEXT("Category"), TEXT("FNode"));
			MetaData->SetValue(NewProp_Name, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/Rig.h"));
			MetaData->SetValue(NewProp_Name, TEXT("ToolTip"), TEXT("Name of the original node. We don't allow to change this. This is used for identity.*"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FNode_CRC() { return 2061879661U; }
	UClass* Z_Construct_UClass_URig_NoRegister()
	{
		return URig::StaticClass();
	}
	UClass* Z_Construct_UClass_URig()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = URig::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Nodes = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Nodes"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Nodes, URig), 0x0000000000000041);
				UProperty* NewProp_Nodes_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Nodes, TEXT("Nodes"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FNode());
				UProperty* NewProp_TransformBases = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TransformBases"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(TransformBases, URig), 0x0000000000000041);
				UProperty* NewProp_TransformBases_Inner = new(EC_InternalUseOnlyConstructor, NewProp_TransformBases, TEXT("TransformBases"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FTransformBase());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Animation/Rig.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/Rig.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("URig : that has rigging data for skeleton\n        - used for retargeting\n        - support to share different animations"));
				MetaData->SetValue(NewProp_Nodes, TEXT("Category"), TEXT("Rig"));
				MetaData->SetValue(NewProp_Nodes, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/Rig.h"));
				MetaData->SetValue(NewProp_Nodes, TEXT("ToolTip"), TEXT("Skeleton bone tree - each contains name and parent index*"));
				MetaData->SetValue(NewProp_TransformBases, TEXT("Category"), TEXT("Rig"));
				MetaData->SetValue(NewProp_TransformBases, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/Rig.h"));
				MetaData->SetValue(NewProp_TransformBases, TEXT("ToolTip"), TEXT("Skeleton bone tree - each contains name and parent index*"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_URig(Z_Construct_UClass_URig, TEXT("URig"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(URig);
	UClass* Z_Construct_UClass_USaveGame_NoRegister()
	{
		return USaveGame::StaticClass();
	}
	UClass* Z_Construct_UClass_USaveGame()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = USaveGame::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("GameFramework/SaveGame.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/SaveGame.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("This class acts as a base class for a save game object that can be used to save state about the game.\nWhen you create your own save game subclass, you would add member variables for the information that you want to save.\nThen when you want to save a game, create an instance of this object using CreateSaveGameObject, fill in the data, and use SaveGameToSlot, providing a slot name.\nTo load the game you then just use LoadGameFromSlot, and read the data from the resulting object.\n\n@see https://docs.unrealengine.com/latest/INT/Gameplay/SaveGame"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USaveGame(Z_Construct_UClass_USaveGame, TEXT("USaveGame"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(USaveGame);
	UClass* Z_Construct_UClass_UScriptViewportClient_NoRegister()
	{
		return UScriptViewportClient::StaticClass();
	}
	UClass* Z_Construct_UClass_UScriptViewportClient()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UScriptViewportClient::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000088;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/ScriptViewportClient.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/ScriptViewportClient.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UScriptViewportClient(Z_Construct_UClass_UScriptViewportClient, TEXT("UScriptViewportClient"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UScriptViewportClient);
	UScriptStruct* Z_Construct_UScriptStruct_FDebugDisplayProperty()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FDebugDisplayProperty_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("DebugDisplayProperty"), sizeof(FDebugDisplayProperty), Get_Z_Construct_UScriptStruct_FDebugDisplayProperty_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DebugDisplayProperty"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FDebugDisplayProperty>, EStructFlags(0x00000001));
			UProperty* NewProp_WithinClass = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("WithinClass"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(WithinClass, FDebugDisplayProperty), 0x0004000000000000, Z_Construct_UClass_UObject_NoRegister());
			UProperty* NewProp_Obj = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Obj"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Obj, FDebugDisplayProperty), 0x0000000000000000, Z_Construct_UClass_UObject_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DebugDisplayProperty.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Debug property display functionality to interact with this, use \"display\", \"displayall\", \"displayclear\"\n\n@see UGameViewportClient\n@see FDebugDisplayProperty\n@see DrawStatsHUD"));
			MetaData->SetValue(NewProp_WithinClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DebugDisplayProperty.h"));
			MetaData->SetValue(NewProp_WithinClass, TEXT("ToolTip"), TEXT("if Obj is a class and WithinClass is not nullptr, further limit the display to objects that have an Outer of WithinClass"));
			MetaData->SetValue(NewProp_Obj, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DebugDisplayProperty.h"));
			MetaData->SetValue(NewProp_Obj, TEXT("ToolTip"), TEXT("the object whose property to display. If this is a class, all objects of that class are drawn."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FDebugDisplayProperty_CRC() { return 2618100593U; }
	UFunction* Z_Construct_UFunction_UGameViewportClient_SetConsoleTarget()
	{
		struct GameViewportClient_eventSetConsoleTarget_Parms
		{
			int32 PlayerIndex;
		};
		UObject* Outer=Z_Construct_UClass_UGameViewportClient();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetConsoleTarget"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020600, 65535, sizeof(GameViewportClient_eventSetConsoleTarget_Parms));
			UProperty* NewProp_PlayerIndex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PlayerIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(PlayerIndex, GameViewportClient_eventSetConsoleTarget_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/GameViewportClient.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the player which console commands will be executed in the context of."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameViewportClient_ShowTitleSafeArea()
	{
		UObject* Outer=Z_Construct_UClass_UGameViewportClient();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ShowTitleSafeArea"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020600, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/GameViewportClient.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Exec for toggling the display of the title safe area"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameViewportClient_SSSwapControllers()
	{
		UObject* Outer=Z_Construct_UClass_UGameViewportClient();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SSSwapControllers"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020600, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/GameViewportClient.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Rotates controller ids among gameplayers, useful for testing splitscreen with only one controller."));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UGameViewportClient_NoRegister()
	{
		return UGameViewportClient::StaticClass();
	}
	UClass* Z_Construct_UClass_UGameViewportClient()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UScriptViewportClient();
			Z_Construct_UPackage_Engine();
			OuterClass = UGameViewportClient::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100088;

				OuterClass->LinkChild(Z_Construct_UFunction_UGameViewportClient_SetConsoleTarget());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameViewportClient_ShowTitleSafeArea());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameViewportClient_SSSwapControllers());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_GameInstance = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GameInstance"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(GameInstance, UGameViewportClient), 0x0000080000000000, Z_Construct_UClass_UGameInstance_NoRegister());
				UProperty* NewProp_World = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("World"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(World, UGameViewportClient), 0x0000080000000000, Z_Construct_UClass_UWorld_NoRegister());
				UProperty* NewProp_DebugProperties = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DebugProperties"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(DebugProperties, UGameViewportClient), 0x0000000000000000);
				UProperty* NewProp_DebugProperties_Inner = new(EC_InternalUseOnlyConstructor, NewProp_DebugProperties, TEXT("DebugProperties"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FDebugDisplayProperty());
				UProperty* NewProp_ViewportConsole = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ViewportConsole"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ViewportConsole, UGameViewportClient), 0x0000000000000000, Z_Construct_UClass_UConsole_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameViewportClient_SetConsoleTarget()); // 339785384
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameViewportClient_ShowTitleSafeArea()); // 3651655278
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameViewportClient_SSSwapControllers()); // 3407003018
				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/GameViewportClient.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/GameViewportClient.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("A game viewport (FViewport) is a high-level abstract interface for the\nplatform specific rendering, audio, and input subsystems.\nGameViewportClient is the engine's interface to a game viewport.\nExactly one GameViewportClient is created for each instance of the game.  The\nonly case (so far) where you might have a single instance of Engine, but\nmultiple instances of the game (and thus multiple GameViewportClients) is when\nyou have more than one PIE window running.\n\nResponsibilities:\npropagating input events to the global interactions list\n\n@see UGameViewportClient"));
				MetaData->SetValue(NewProp_GameInstance, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/GameViewportClient.h"));
				MetaData->SetValue(NewProp_World, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/GameViewportClient.h"));
				MetaData->SetValue(NewProp_World, TEXT("ToolTip"), TEXT("The relative world context for this viewport"));
				MetaData->SetValue(NewProp_DebugProperties, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/GameViewportClient.h"));
				MetaData->SetValue(NewProp_DebugProperties, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_ViewportConsole, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/GameViewportClient.h"));
				MetaData->SetValue(NewProp_ViewportConsole, TEXT("ToolTip"), TEXT("The viewport's console.   Might be null on consoles"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UGameViewportClient(Z_Construct_UClass_UGameViewportClient, TEXT("UGameViewportClient"));
	UClass* Z_Construct_UClass_USimpleConstructionScript_NoRegister()
	{
		return USimpleConstructionScript::StaticClass();
	}
	UClass* Z_Construct_UClass_USimpleConstructionScript()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = USimpleConstructionScript::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ActorComponentNodes = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ActorComponentNodes"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ActorComponentNodes_DEPRECATED, USimpleConstructionScript), 0x0000000020000000);
				UProperty* NewProp_ActorComponentNodes_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ActorComponentNodes, TEXT("ActorComponentNodes"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000020000000, Z_Construct_UClass_USCS_Node_NoRegister());
				UProperty* NewProp_RootNode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RootNode"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(RootNode_DEPRECATED, USimpleConstructionScript), 0x0000000020000000, Z_Construct_UClass_USCS_Node_NoRegister());
				UProperty* NewProp_DefaultSceneRootNode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultSceneRootNode"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(DefaultSceneRootNode, USimpleConstructionScript), 0x0000000000000000, Z_Construct_UClass_USCS_Node_NoRegister());
				UProperty* NewProp_RootNodes = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RootNodes"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(RootNodes, USimpleConstructionScript), 0x0000000000000000);
				UProperty* NewProp_RootNodes_Inner = new(EC_InternalUseOnlyConstructor, NewProp_RootNodes, TEXT("RootNodes"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_USCS_Node_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/SimpleConstructionScript.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SimpleConstructionScript.h"));
				MetaData->SetValue(NewProp_ActorComponentNodes, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SimpleConstructionScript.h"));
				MetaData->SetValue(NewProp_ActorComponentNodes, TEXT("ToolTip"), TEXT("(DEPRECATED) Actor Component based nodes are stored here.  They cannot be in the tree hierarchy"));
				MetaData->SetValue(NewProp_RootNode, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SimpleConstructionScript.h"));
				MetaData->SetValue(NewProp_RootNode, TEXT("ToolTip"), TEXT("(DEPRECATED) Root node of the construction script"));
				MetaData->SetValue(NewProp_DefaultSceneRootNode, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SimpleConstructionScript.h"));
				MetaData->SetValue(NewProp_DefaultSceneRootNode, TEXT("ToolTip"), TEXT("Default scene root node; used when no other nodes are available to use as the root"));
				MetaData->SetValue(NewProp_RootNodes, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SimpleConstructionScript.h"));
				MetaData->SetValue(NewProp_RootNodes, TEXT("ToolTip"), TEXT("Root nodes of the construction script"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USimpleConstructionScript(Z_Construct_UClass_USimpleConstructionScript, TEXT("USimpleConstructionScript"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(USimpleConstructionScript);
	UClass* Z_Construct_UClass_USCS_Node_NoRegister()
	{
		return USCS_Node::StaticClass();
	}
	UClass* Z_Construct_UClass_USCS_Node()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = USCS_Node::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bVariableNameAutoGenerated_DEPRECATED, USCS_Node, bool);
				UProperty* NewProp_bVariableNameAutoGenerated = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bVariableNameAutoGenerated"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bVariableNameAutoGenerated_DEPRECATED, USCS_Node), 0x0000000020000000, CPP_BOOL_PROPERTY_BITMASK(bVariableNameAutoGenerated_DEPRECATED, USCS_Node), sizeof(bool), true);
				UProperty* NewProp_NativeComponentName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NativeComponentName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(NativeComponentName_DEPRECATED, USCS_Node), 0x0000000020000000);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsNative_DEPRECATED, USCS_Node, bool);
				UProperty* NewProp_bIsNative = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsNative"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsNative_DEPRECATED, USCS_Node), 0x0000000020000000, CPP_BOOL_PROPERTY_BITMASK(bIsNative_DEPRECATED, USCS_Node), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsFalseRoot_DEPRECATED, USCS_Node, bool);
				UProperty* NewProp_bIsFalseRoot = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsFalseRoot"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsFalseRoot_DEPRECATED, USCS_Node), 0x0000000020000000, CPP_BOOL_PROPERTY_BITMASK(bIsFalseRoot_DEPRECATED, USCS_Node), sizeof(bool), true);
				UProperty* NewProp_VariableGuid = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VariableGuid"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(VariableGuid, USCS_Node), 0x0000000000000000, Z_Construct_UScriptStruct_FGuid());
				UProperty* NewProp_MetaDataArray = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MetaDataArray"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(MetaDataArray, USCS_Node), 0x0000000000000001);
				UProperty* NewProp_MetaDataArray_Inner = new(EC_InternalUseOnlyConstructor, NewProp_MetaDataArray, TEXT("MetaDataArray"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FBPVariableMetaDataEntry());
				UProperty* NewProp_ChildNodes = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ChildNodes"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ChildNodes, USCS_Node), 0x0000000000000000);
				UProperty* NewProp_ChildNodes_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ChildNodes, TEXT("ChildNodes"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_USCS_Node_NoRegister());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsParentComponentNative, USCS_Node, bool);
				UProperty* NewProp_bIsParentComponentNative = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsParentComponentNative"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsParentComponentNative, USCS_Node), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bIsParentComponentNative, USCS_Node), sizeof(bool), true);
				UProperty* NewProp_ParentComponentOwnerClassName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ParentComponentOwnerClassName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(ParentComponentOwnerClassName, USCS_Node), 0x0000000000000000);
				UProperty* NewProp_ParentComponentOrVariableName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ParentComponentOrVariableName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(ParentComponentOrVariableName, USCS_Node), 0x0000000000000000);
				UProperty* NewProp_AttachToName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AttachToName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(AttachToName, USCS_Node), 0x0000000000000000);
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_CategoryName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CategoryName"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(CategoryName, USCS_Node), 0x0000000800000000);
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_VariableName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VariableName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(VariableName, USCS_Node), 0x0000000000000000);
				UProperty* NewProp_ComponentTemplate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ComponentTemplate"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ComponentTemplate, USCS_Node), 0x0000000000080008, Z_Construct_UClass_UActorComponent_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/SCS_Node.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SCS_Node.h"));
				MetaData->SetValue(NewProp_bVariableNameAutoGenerated, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SCS_Node.h"));
				MetaData->SetValue(NewProp_bVariableNameAutoGenerated, TEXT("ToolTip"), TEXT("(DEPRECATED) If true, the variable name was a autogenerated and is not presented to the user"));
				MetaData->SetValue(NewProp_NativeComponentName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SCS_Node.h"));
				MetaData->SetValue(NewProp_NativeComponentName, TEXT("ToolTip"), TEXT("(DEPRECATED) If this is a native component, this is the name of the UActorComponent"));
				MetaData->SetValue(NewProp_bIsNative, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SCS_Node.h"));
				MetaData->SetValue(NewProp_bIsNative, TEXT("ToolTip"), TEXT("(DEPRECATED) Indicates if this is a native component or not"));
				MetaData->SetValue(NewProp_bIsFalseRoot, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SCS_Node.h"));
				MetaData->SetValue(NewProp_bIsFalseRoot, TEXT("ToolTip"), TEXT("(DEPRECATED)"));
				MetaData->SetValue(NewProp_VariableGuid, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SCS_Node.h"));
				MetaData->SetValue(NewProp_MetaDataArray, TEXT("Category"), TEXT("BPVariableDescription"));
				MetaData->SetValue(NewProp_MetaDataArray, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SCS_Node.h"));
				MetaData->SetValue(NewProp_MetaDataArray, TEXT("ToolTip"), TEXT("Metadata information for this Node"));
				MetaData->SetValue(NewProp_ChildNodes, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SCS_Node.h"));
				MetaData->SetValue(NewProp_ChildNodes, TEXT("ToolTip"), TEXT("Set of child nodes"));
				MetaData->SetValue(NewProp_bIsParentComponentNative, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SCS_Node.h"));
				MetaData->SetValue(NewProp_bIsParentComponentNative, TEXT("ToolTip"), TEXT("If the node is parented, this indicates whether or not the template is found in the CDO's Components array"));
				MetaData->SetValue(NewProp_ParentComponentOwnerClassName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SCS_Node.h"));
				MetaData->SetValue(NewProp_ParentComponentOwnerClassName, TEXT("ToolTip"), TEXT("If the node is attached to another node inherited from a parent Blueprint, this contains the name of the Blueprint parent class that owns the component template //@TODO: We can potentially remove this if/when inherited SCS component template instances are included in subobject serialization, as we could then infer that the owner class is always the same as the BP class."));
				MetaData->SetValue(NewProp_ParentComponentOrVariableName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SCS_Node.h"));
				MetaData->SetValue(NewProp_ParentComponentOrVariableName, TEXT("ToolTip"), TEXT("Component template or variable that Node might be parented to"));
				MetaData->SetValue(NewProp_AttachToName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SCS_Node.h"));
				MetaData->SetValue(NewProp_AttachToName, TEXT("ToolTip"), TEXT("Socket/Bone that Node might attach to"));
				MetaData->SetValue(NewProp_CategoryName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SCS_Node.h"));
				MetaData->SetValue(NewProp_CategoryName, TEXT("ToolTip"), TEXT("If non-None, the assigned category name"));
				MetaData->SetValue(NewProp_VariableName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SCS_Node.h"));
				MetaData->SetValue(NewProp_VariableName, TEXT("ToolTip"), TEXT("If non-None, creates a variable in the class and assigns the created blueprint to it"));
				MetaData->SetValue(NewProp_ComponentTemplate, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_ComponentTemplate, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SCS_Node.h"));
				MetaData->SetValue(NewProp_ComponentTemplate, TEXT("ToolTip"), TEXT("Template for the component to create"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USCS_Node(Z_Construct_UClass_USCS_Node, TEXT("USCS_Node"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(USCS_Node);
	UClass* Z_Construct_UClass_USelection_NoRegister()
	{
		return USelection::StaticClass();
	}
	UClass* Z_Construct_UClass_USelection()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = USelection::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100088;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/Selection.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Selection.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USelection(Z_Construct_UClass_USelection, TEXT("USelection"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(USelection);
	UEnum* Z_Construct_UEnum_Engine_EImpactDamageOverride()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EImpactDamageOverride_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EImpactDamageOverride"), 0, Get_Z_Construct_UEnum_Engine_EImpactDamageOverride_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EImpactDamageOverride"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("IDO_None")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("IDO_On")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("IDO_Off")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("IDO_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Chunks up to the depth DefaultImpactDamageDepth will take impact damage, unless IDO_On or IDO_Off is chosen."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EImpactDamageOverride_CRC() { return 3371746591U; }
	UScriptStruct* Z_Construct_UScriptStruct_FDestructibleParameters()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FDestructibleParameters_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("DestructibleParameters"), sizeof(FDestructibleParameters), Get_Z_Construct_UScriptStruct_FDestructibleParameters_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DestructibleParameters"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FDestructibleParameters>, EStructFlags(0x00000001));
			UProperty* NewProp_Flags = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Flags"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Flags, FDestructibleParameters), 0x0000000000000001, Z_Construct_UScriptStruct_FDestructibleParametersFlag());
			UProperty* NewProp_DepthParameters = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DepthParameters"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(DepthParameters, FDestructibleParameters), 0x0000000000000041);
			UProperty* NewProp_DepthParameters_Inner = new(EC_InternalUseOnlyConstructor, NewProp_DepthParameters, TEXT("DepthParameters"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FDestructibleDepthParameters());
			UProperty* NewProp_SpecialHierarchyDepths = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SpecialHierarchyDepths"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SpecialHierarchyDepths, FDestructibleParameters), 0x0000000000000001, Z_Construct_UScriptStruct_FDestructibleSpecialHierarchyDepths());
			UProperty* NewProp_AdvancedParameters = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("AdvancedParameters"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(AdvancedParameters, FDestructibleParameters), 0x0000000000000001, Z_Construct_UScriptStruct_FDestructibleAdvancedParameters());
			UProperty* NewProp_DebrisParameters = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DebrisParameters"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DebrisParameters, FDestructibleParameters), 0x0000000000000001, Z_Construct_UScriptStruct_FDestructibleDebrisParameters());
			UProperty* NewProp_DamageParameters = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DamageParameters"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DamageParameters, FDestructibleParameters), 0x0000000000000001, Z_Construct_UScriptStruct_FDestructibleDamageParameters());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Parameters that apply to a destructible actor."));
			MetaData->SetValue(NewProp_Flags, TEXT("Category"), TEXT("DestructibleParameters"));
			MetaData->SetValue(NewProp_Flags, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(NewProp_Flags, TEXT("ToolTip"), TEXT("A collection of flags defined in DestructibleParametersFlag."));
			MetaData->SetValue(NewProp_DepthParameters, TEXT("Category"), TEXT("DestructibleParameters"));
			MetaData->SetValue(NewProp_DepthParameters, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(NewProp_DepthParameters, TEXT("ToolTip"), TEXT("Parameters that apply to every chunk at a given level.\nthe element [0] of the array applies to the level 0 (unfractured) chunk, element [1] applies\nto the level 1 chunks, etc."));
			MetaData->SetValue(NewProp_SpecialHierarchyDepths, TEXT("Category"), TEXT("DestructibleParameters"));
			MetaData->SetValue(NewProp_SpecialHierarchyDepths, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(NewProp_SpecialHierarchyDepths, TEXT("ToolTip"), TEXT("Special hierarchy depths for various behaviors."));
			MetaData->SetValue(NewProp_AdvancedParameters, TEXT("Category"), TEXT("DestructibleParameters"));
			MetaData->SetValue(NewProp_AdvancedParameters, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(NewProp_AdvancedParameters, TEXT("ToolTip"), TEXT("Parameters that are less-often used.  See DestructibleAdvancedParameters."));
			MetaData->SetValue(NewProp_DebrisParameters, TEXT("Category"), TEXT("DestructibleParameters"));
			MetaData->SetValue(NewProp_DebrisParameters, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(NewProp_DebrisParameters, TEXT("ToolTip"), TEXT("Parameters that pertain to chunk debris-level settings.  See DestructibleDebrisParameters."));
			MetaData->SetValue(NewProp_DamageParameters, TEXT("Category"), TEXT("DestructibleParameters"));
			MetaData->SetValue(NewProp_DamageParameters, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(NewProp_DamageParameters, TEXT("ToolTip"), TEXT("Parameters that pertain to chunk damage.  See DestructibleDamageParameters."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FDestructibleParameters_CRC() { return 138917708U; }
	UScriptStruct* Z_Construct_UScriptStruct_FDestructibleSpecialHierarchyDepths()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FDestructibleSpecialHierarchyDepths_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("DestructibleSpecialHierarchyDepths"), sizeof(FDestructibleSpecialHierarchyDepths), Get_Z_Construct_UScriptStruct_FDestructibleSpecialHierarchyDepths_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DestructibleSpecialHierarchyDepths"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FDestructibleSpecialHierarchyDepths>, EStructFlags(0x00000001));
			UProperty* NewProp_EssentialDepth = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("EssentialDepth"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(EssentialDepth, FDestructibleSpecialHierarchyDepths), 0x0000000000000001);
			UProperty* NewProp_DebrisDepth = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DebrisDepth"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(DebrisDepth, FDestructibleSpecialHierarchyDepths), 0x0000000000000001);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnableDebris, FDestructibleSpecialHierarchyDepths, bool);
			UProperty* NewProp_bEnableDebris = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bEnableDebris"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnableDebris, FDestructibleSpecialHierarchyDepths), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bEnableDebris, FDestructibleSpecialHierarchyDepths), sizeof(bool), true);
			UProperty* NewProp_MinimumFractureDepth = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MinimumFractureDepth"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MinimumFractureDepth, FDestructibleSpecialHierarchyDepths), 0x0000000000000001);
			UProperty* NewProp_SupportDepth = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SupportDepth"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(SupportDepth, FDestructibleSpecialHierarchyDepths), 0x0000000000000001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Special hierarchy depths for various behaviors."));
			MetaData->SetValue(NewProp_EssentialDepth, TEXT("Category"), TEXT("DestructibleSpecialHierarchyDepths"));
			MetaData->SetValue(NewProp_EssentialDepth, TEXT("DisplayName"), TEXT("Essential LOD Depth"));
			MetaData->SetValue(NewProp_EssentialDepth, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(NewProp_EssentialDepth, TEXT("ToolTip"), TEXT("The chunk hierarchy depth up to which chunks will always be processed.  These chunks are considered\nto be essential either for gameplay or visually.\nThe minimum value is 0, meaning the level 0 chunk is always considered essential.\nDefault value is 0."));
			MetaData->SetValue(NewProp_DebrisDepth, TEXT("Category"), TEXT("DestructibleSpecialHierarchyDepths"));
			MetaData->SetValue(NewProp_DebrisDepth, TEXT("editcondition"), TEXT("bEnableDebris"));
			MetaData->SetValue(NewProp_DebrisDepth, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(NewProp_DebrisDepth, TEXT("ToolTip"), TEXT("The hierarchy depth at which chunks are considered to be \"debris.\""));
			MetaData->SetValue(NewProp_DebrisDepth, TEXT("UIMin"), TEXT("0"));
			MetaData->SetValue(NewProp_bEnableDebris, TEXT("Category"), TEXT("DestructibleSpecialHierarchyDepths"));
			MetaData->SetValue(NewProp_bEnableDebris, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(NewProp_bEnableDebris, TEXT("ToolTip"), TEXT("Enables debris at a specific depth level.\n@see DebrisDepth"));
			MetaData->SetValue(NewProp_MinimumFractureDepth, TEXT("Category"), TEXT("DestructibleSpecialHierarchyDepths"));
			MetaData->SetValue(NewProp_MinimumFractureDepth, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(NewProp_MinimumFractureDepth, TEXT("ToolTip"), TEXT("The chunks will not be broken free below this depth."));
			MetaData->SetValue(NewProp_SupportDepth, TEXT("Category"), TEXT("DestructibleSpecialHierarchyDepths"));
			MetaData->SetValue(NewProp_SupportDepth, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(NewProp_SupportDepth, TEXT("ToolTip"), TEXT("The chunk hierarchy depth at which to create a support graph.  Higher depth levels give more detailed support,\nbut will give a higher computational load.  Chunks below the support depth will never be supported."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FDestructibleSpecialHierarchyDepths_CRC() { return 2166845355U; }
	UScriptStruct* Z_Construct_UScriptStruct_FDestructibleAdvancedParameters()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FDestructibleAdvancedParameters_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("DestructibleAdvancedParameters"), sizeof(FDestructibleAdvancedParameters), Get_Z_Construct_UScriptStruct_FDestructibleAdvancedParameters_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DestructibleAdvancedParameters"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FDestructibleAdvancedParameters>, EStructFlags(0x00000001));
			UProperty* NewProp_FractureImpulseScale = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("FractureImpulseScale"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(FractureImpulseScale, FDestructibleAdvancedParameters), 0x0000000000000001);
			UProperty* NewProp_MaxChunkSpeed = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MaxChunkSpeed"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MaxChunkSpeed, FDestructibleAdvancedParameters), 0x0000000000000001);
			UProperty* NewProp_ImpactVelocityThreshold = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ImpactVelocityThreshold"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ImpactVelocityThreshold, FDestructibleAdvancedParameters), 0x0000000000000001);
			UProperty* NewProp_DamageCap = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DamageCap"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DamageCap, FDestructibleAdvancedParameters), 0x0000000000000001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Parameters that are less-often used."));
			MetaData->SetValue(NewProp_FractureImpulseScale, TEXT("Category"), TEXT("DestructibleAdvancedParameters"));
			MetaData->SetValue(NewProp_FractureImpulseScale, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(NewProp_FractureImpulseScale, TEXT("ToolTip"), TEXT("Scale factor used to apply an impulse force along the normal of chunk when fractured.  This is used\nin order to \"push\" the pieces out as they fracture."));
			MetaData->SetValue(NewProp_MaxChunkSpeed, TEXT("Category"), TEXT("DestructibleAdvancedParameters"));
			MetaData->SetValue(NewProp_MaxChunkSpeed, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(NewProp_MaxChunkSpeed, TEXT("ToolTip"), TEXT("If greater than 0, the chunks' speeds will not be allowed to exceed this value.  Use 0\nto disable this feature (this is the default)."));
			MetaData->SetValue(NewProp_ImpactVelocityThreshold, TEXT("Category"), TEXT("DestructibleAdvancedParameters"));
			MetaData->SetValue(NewProp_ImpactVelocityThreshold, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(NewProp_ImpactVelocityThreshold, TEXT("ToolTip"), TEXT("Large impact force may be reported if rigid bodies are spawned inside one another.  In this case the realative velocity of the two\nobjects will be low.  This variable allows the user to set a minimum velocity threshold for impacts to ensure that the objects are\nmoving at a min velocity in order for the impact force to be considered."));
			MetaData->SetValue(NewProp_DamageCap, TEXT("Category"), TEXT("DestructibleAdvancedParameters"));
			MetaData->SetValue(NewProp_DamageCap, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(NewProp_DamageCap, TEXT("ToolTip"), TEXT("Limits the amount of damage applied to a chunk.  This is useful for preventing the entire destructible\nfrom getting pulverized by a very large application of damage.  This can easily happen when impact damage is\nused, and the damage amount is proportional to the impact force (see forceToDamage)."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FDestructibleAdvancedParameters_CRC() { return 3268850874U; }
	UScriptStruct* Z_Construct_UScriptStruct_FDestructibleDebrisParameters()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FDestructibleDebrisParameters_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("DestructibleDebrisParameters"), sizeof(FDestructibleDebrisParameters), Get_Z_Construct_UScriptStruct_FDestructibleDebrisParameters_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DestructibleDebrisParameters"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FDestructibleDebrisParameters>, EStructFlags(0x00000001));
			UProperty* NewProp_ValidBounds = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ValidBounds"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ValidBounds, FDestructibleDebrisParameters), 0x0000000000000001, Z_Construct_UScriptStruct_FBox());
			UProperty* NewProp_DebrisMaxSeparationMax = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DebrisMaxSeparationMax"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DebrisMaxSeparationMax, FDestructibleDebrisParameters), 0x0000000000000001);
			UProperty* NewProp_DebrisMaxSeparationMin = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DebrisMaxSeparationMin"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DebrisMaxSeparationMin, FDestructibleDebrisParameters), 0x0000000000000001);
			UProperty* NewProp_DebrisLifetimeMax = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DebrisLifetimeMax"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DebrisLifetimeMax, FDestructibleDebrisParameters), 0x0000000000000001);
			UProperty* NewProp_DebrisLifetimeMin = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DebrisLifetimeMin"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DebrisLifetimeMin, FDestructibleDebrisParameters), 0x0000000000000001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Parameters that pertain to chunk debris-level settings."));
			MetaData->SetValue(NewProp_ValidBounds, TEXT("Category"), TEXT("DestructibleDebrisParameters"));
			MetaData->SetValue(NewProp_ValidBounds, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(NewProp_ValidBounds, TEXT("ToolTip"), TEXT("\"Debris chunks\" (see debrisDepth, above) will be destroyed if they leave this box.\nThe box translates with the destructible actor's initial position, but does not\nrotate or scale."));
			MetaData->SetValue(NewProp_DebrisMaxSeparationMax, TEXT("Category"), TEXT("DestructibleDebrisParameters"));
			MetaData->SetValue(NewProp_DebrisMaxSeparationMax, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(NewProp_DebrisMaxSeparationMin, TEXT("Category"), TEXT("DestructibleDebrisParameters"));
			MetaData->SetValue(NewProp_DebrisMaxSeparationMin, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(NewProp_DebrisMaxSeparationMin, TEXT("ToolTip"), TEXT("\"Debris chunks\" (see debrisDepth, above) will be destroyed if they are separated from\ntheir origin by a distance greater than maxSeparation.  The actual maxSeparation is\ninterpolated between these two values, based upon the module's LOD setting.  To disable\nmaxSeparation, clear the bDebrisMaxSeparation flag in the flags field.\nIf debrisMaxSeparationMax < debrisMaxSeparationMin, the mean of the two is used for both.\nDefault debrisMaxSeparationMin = 1.0, debrisMaxSeparationMax = 10.0f."));
			MetaData->SetValue(NewProp_DebrisLifetimeMax, TEXT("Category"), TEXT("DestructibleDebrisParameters"));
			MetaData->SetValue(NewProp_DebrisLifetimeMax, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(NewProp_DebrisLifetimeMin, TEXT("Category"), TEXT("DestructibleDebrisParameters"));
			MetaData->SetValue(NewProp_DebrisLifetimeMin, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(NewProp_DebrisLifetimeMin, TEXT("ToolTip"), TEXT("\"Debris chunks\" (see debrisDepth, above) will be destroyed after a time (in seconds)\nseparated from non-debris chunks.  The actual lifetime is interpolated between these\ntwo bDebrisTimeout, based upon the module's LOD setting.  To disable lifetime, clear the\nbDebrisTimeout flag in the flags field.\nIf debrisLifetimeMax < debrisLifetimeMin, the mean of the two is used for both.\nDefault debrisLifetimeMin = 1.0, debrisLifetimeMax = 10.0f."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FDestructibleDebrisParameters_CRC() { return 2851503949U; }
	UScriptStruct* Z_Construct_UScriptStruct_FDestructibleDamageParameters()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FDestructibleDamageParameters_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("DestructibleDamageParameters"), sizeof(FDestructibleDamageParameters), Get_Z_Construct_UScriptStruct_FDestructibleDamageParameters_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DestructibleDamageParameters"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FDestructibleDamageParameters>, EStructFlags(0x00000001));
			UProperty* NewProp_ImpactResistance = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ImpactResistance"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ImpactResistance, FDestructibleDamageParameters), 0x0000000000000001);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCustomImpactResistance, FDestructibleDamageParameters, bool);
			UProperty* NewProp_bCustomImpactResistance = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bCustomImpactResistance"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCustomImpactResistance, FDestructibleDamageParameters), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bCustomImpactResistance, FDestructibleDamageParameters), sizeof(bool), true);
			UProperty* NewProp_DefaultImpactDamageDepth = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DefaultImpactDamageDepth"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(DefaultImpactDamageDepth, FDestructibleDamageParameters), 0x0000000000000001);
			UProperty* NewProp_ImpactDamage = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ImpactDamage"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ImpactDamage, FDestructibleDamageParameters), 0x0000000000000001);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnableImpactDamage, FDestructibleDamageParameters, bool);
			UProperty* NewProp_bEnableImpactDamage = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bEnableImpactDamage"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnableImpactDamage, FDestructibleDamageParameters), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bEnableImpactDamage, FDestructibleDamageParameters), sizeof(bool), true);
			UProperty* NewProp_DamageSpread = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DamageSpread"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DamageSpread, FDestructibleDamageParameters), 0x0000000000000001);
			UProperty* NewProp_DamageThreshold = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DamageThreshold"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DamageThreshold, FDestructibleDamageParameters), 0x0000000000000001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Parameters that pertain to chunk damage."));
			MetaData->SetValue(NewProp_ImpactResistance, TEXT("Category"), TEXT("DestructibleDamageParameters"));
			MetaData->SetValue(NewProp_ImpactResistance, TEXT("ClampMin"), TEXT("0.001"));
			MetaData->SetValue(NewProp_ImpactResistance, TEXT("editcondition"), TEXT("bCustomImpactResistance"));
			MetaData->SetValue(NewProp_ImpactResistance, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(NewProp_ImpactResistance, TEXT("ToolTip"), TEXT("Controls how much resistance is applied to colliding objects. Weak materials like glass should set this to a low value so that objects will pass right through them during fracture.\n@see DepthParameters for per level control of ImpactResistance"));
			MetaData->SetValue(NewProp_ImpactResistance, TEXT("UIMin"), TEXT("0"));
			MetaData->SetValue(NewProp_bCustomImpactResistance, TEXT("Category"), TEXT("DestructibleDamageParameters"));
			MetaData->SetValue(NewProp_bCustomImpactResistance, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(NewProp_bCustomImpactResistance, TEXT("ToolTip"), TEXT("By default, objects that collide with destructibles will bounce back. Custom resistance allows for finer control of how much a destructible \"pushes back\" against a colliding object.\n@see ImpactResistance"));
			MetaData->SetValue(NewProp_DefaultImpactDamageDepth, TEXT("Category"), TEXT("DestructibleDamageParameters"));
			MetaData->SetValue(NewProp_DefaultImpactDamageDepth, TEXT("ClampMin"), TEXT("0"));
			MetaData->SetValue(NewProp_DefaultImpactDamageDepth, TEXT("editcondition"), TEXT("bEnableImpactDamage"));
			MetaData->SetValue(NewProp_DefaultImpactDamageDepth, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(NewProp_DefaultImpactDamageDepth, TEXT("ToolTip"), TEXT("Max depth level where impact damage is enabled. @see DepthParameters for per level control of ImpactDamage\nIf negative, impact damage is disabled"));
			MetaData->SetValue(NewProp_DefaultImpactDamageDepth, TEXT("UIMin"), TEXT("0"));
			MetaData->SetValue(NewProp_ImpactDamage, TEXT("Category"), TEXT("DestructibleDamageParameters"));
			MetaData->SetValue(NewProp_ImpactDamage, TEXT("editcondition"), TEXT("bEnableImpactDamage"));
			MetaData->SetValue(NewProp_ImpactDamage, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(NewProp_ImpactDamage, TEXT("ToolTip"), TEXT("Controls how much damage is applied upon collision. Damage = ImpactDamage * ImpactForce.\n@see DepthParameters for per level control of ImpactDamage"));
			MetaData->SetValue(NewProp_bEnableImpactDamage, TEXT("Category"), TEXT("DestructibleDamageParameters"));
			MetaData->SetValue(NewProp_bEnableImpactDamage, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(NewProp_bEnableImpactDamage, TEXT("ToolTip"), TEXT("Whether to apply damage to destructible when colliding with an object.\n@see ImpactDamage"));
			MetaData->SetValue(NewProp_DamageSpread, TEXT("Category"), TEXT("DestructibleDamageParameters"));
			MetaData->SetValue(NewProp_DamageSpread, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(NewProp_DamageSpread, TEXT("ToolTip"), TEXT("Controls how easily damage spreads. DamageRadius = Damage*DamageSpread. All chunks within DamageRadius will take damage. Full damage is taken at zero distance, and zero damage at the DamageRadius."));
			MetaData->SetValue(NewProp_DamageThreshold, TEXT("Category"), TEXT("DestructibleDamageParameters"));
			MetaData->SetValue(NewProp_DamageThreshold, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(NewProp_DamageThreshold, TEXT("ToolTip"), TEXT("The damage amount which will cause a chunk to fracture (break free)."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FDestructibleDamageParameters_CRC() { return 3397890310U; }
	UScriptStruct* Z_Construct_UScriptStruct_FDestructibleParametersFlag()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FDestructibleParametersFlag_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("DestructibleParametersFlag"), sizeof(FDestructibleParametersFlag), Get_Z_Construct_UScriptStruct_FDestructibleParametersFlag_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DestructibleParametersFlag"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FDestructibleParametersFlag>, EStructFlags(0x00000001));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bFormExtendedStructures, FDestructibleParametersFlag, uint8);
			UProperty* NewProp_bFormExtendedStructures = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bFormExtendedStructures"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bFormExtendedStructures, FDestructibleParametersFlag), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bFormExtendedStructures, FDestructibleParametersFlag), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseValidBounds, FDestructibleParametersFlag, uint8);
			UProperty* NewProp_bUseValidBounds = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bUseValidBounds"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseValidBounds, FDestructibleParametersFlag), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bUseValidBounds, FDestructibleParametersFlag), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAccurateRaycasts, FDestructibleParametersFlag, uint8);
			UProperty* NewProp_bAccurateRaycasts = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bAccurateRaycasts"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAccurateRaycasts, FDestructibleParametersFlag), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bAccurateRaycasts, FDestructibleParametersFlag), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCrumbleSmallestChunks, FDestructibleParametersFlag, uint8);
			UProperty* NewProp_bCrumbleSmallestChunks = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bCrumbleSmallestChunks"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCrumbleSmallestChunks, FDestructibleParametersFlag), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bCrumbleSmallestChunks, FDestructibleParametersFlag), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDebrisMaxSeparation, FDestructibleParametersFlag, uint8);
			UProperty* NewProp_bDebrisMaxSeparation = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bDebrisMaxSeparation"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDebrisMaxSeparation, FDestructibleParametersFlag), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bDebrisMaxSeparation, FDestructibleParametersFlag), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDebrisTimeout, FDestructibleParametersFlag, uint8);
			UProperty* NewProp_bDebrisTimeout = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bDebrisTimeout"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDebrisTimeout, FDestructibleParametersFlag), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bDebrisTimeout, FDestructibleParametersFlag), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bWorldSupport, FDestructibleParametersFlag, uint8);
			UProperty* NewProp_bWorldSupport = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bWorldSupport"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bWorldSupport, FDestructibleParametersFlag), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bWorldSupport, FDestructibleParametersFlag), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAssetDefinedSupport, FDestructibleParametersFlag, uint8);
			UProperty* NewProp_bAssetDefinedSupport = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bAssetDefinedSupport"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAssetDefinedSupport, FDestructibleParametersFlag), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bAssetDefinedSupport, FDestructibleParametersFlag), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAccumulateDamage, FDestructibleParametersFlag, uint8);
			UProperty* NewProp_bAccumulateDamage = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bAccumulateDamage"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAccumulateDamage, FDestructibleParametersFlag), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bAccumulateDamage, FDestructibleParametersFlag), sizeof(uint8), false);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Flags that apply to a destructible actor."));
			MetaData->SetValue(NewProp_bFormExtendedStructures, TEXT("Category"), TEXT("DestructibleParametersFlag"));
			MetaData->SetValue(NewProp_bFormExtendedStructures, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(NewProp_bFormExtendedStructures, TEXT("ToolTip"), TEXT("If initially static, the destructible will become part of an extended support structure if it is\nin contact with another static destructible that also has this flag set."));
			MetaData->SetValue(NewProp_bUseValidBounds, TEXT("Category"), TEXT("DestructibleParametersFlag"));
			MetaData->SetValue(NewProp_bUseValidBounds, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(NewProp_bUseValidBounds, TEXT("ToolTip"), TEXT("If set, the ValidBounds field of NxDestructibleParameters will be used.  These bounds are translated\n(but not scaled or rotated) to the origin of the destructible actor.  If a chunk or chunk island moves\noutside of those bounds, it is destroyed."));
			MetaData->SetValue(NewProp_bAccurateRaycasts, TEXT("Category"), TEXT("DestructibleParametersFlag"));
			MetaData->SetValue(NewProp_bAccurateRaycasts, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(NewProp_bAccurateRaycasts, TEXT("ToolTip"), TEXT("If set, the NxDestructibleActor::rayCast function will search within the nearest visible chunk hit\nfor collisions with child chunks.  This is used to get a better raycast position and normal, in\ncase the parent collision volume does not tightly fit the graphics mesh.  The returned chunk index\nwill always be that of the visible parent that is intersected, however."));
			MetaData->SetValue(NewProp_bCrumbleSmallestChunks, TEXT("Category"), TEXT("DestructibleParametersFlag"));
			MetaData->SetValue(NewProp_bCrumbleSmallestChunks, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(NewProp_bCrumbleSmallestChunks, TEXT("ToolTip"), TEXT("If set, the smallest chunks may be further broken down, either by fluid crumbles (if a crumble particle\nsystem is specified in the NxDestructibleActorDesc), or by simply removing the chunk if no crumble\nparticle system is specified.  Note: the \"smallest chunks\" are normally defined to be the deepest level\nof the fracture hierarchy.  However, they may be taken from higher levels of the hierarchy if\nNxModuleDestructible::setMaxChunkDepthOffset is called with a non-zero value."));
			MetaData->SetValue(NewProp_bDebrisMaxSeparation, TEXT("Category"), TEXT("DestructibleParametersFlag"));
			MetaData->SetValue(NewProp_bDebrisMaxSeparation, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(NewProp_bDebrisMaxSeparation, TEXT("ToolTip"), TEXT("Whether or not chunks at or deeper than the \"debris\" depth (see NxDestructibleParameters::debrisDepth)\nwill be removed if they separate too far from their origins.  The maxSeparation is a value between\nNxDestructibleParameters::debrisMaxSeparationMin and NxDestructibleParameters::debrisMaxSeparationMax,\nbased upon the destructible module's LOD setting."));
			MetaData->SetValue(NewProp_bDebrisTimeout, TEXT("Category"), TEXT("DestructibleParametersFlag"));
			MetaData->SetValue(NewProp_bDebrisTimeout, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(NewProp_bDebrisTimeout, TEXT("ToolTip"), TEXT("Whether or not chunks at or deeper than the \"debris\" depth (see NxDestructibleParameters::debrisDepth)\nwill time out.  The lifetime is a value between NxDestructibleParameters::debrisLifetimeMin and\nNxDestructibleParameters::debrisLifetimeMax, based upon the destructible module's LOD setting."));
			MetaData->SetValue(NewProp_bWorldSupport, TEXT("Category"), TEXT("DestructibleParametersFlag"));
			MetaData->SetValue(NewProp_bWorldSupport, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(NewProp_bWorldSupport, TEXT("ToolTip"), TEXT("If set, then chunks which overlap the NxScene's static geometry will have environmental support in\nstatic destructibles.\n\nNote: if both bAssetDefinedSupport and bWorldSupport are set, then chunks must be tagged as\n\"support\" chunks AND overlap the NxScene's static geometry in order to be environmentally supported."));
			MetaData->SetValue(NewProp_bAssetDefinedSupport, TEXT("Category"), TEXT("DestructibleParametersFlag"));
			MetaData->SetValue(NewProp_bAssetDefinedSupport, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(NewProp_bAssetDefinedSupport, TEXT("ToolTip"), TEXT("If set, then chunks which are tagged as \"support\" chunks (via NxDestructibleChunkDesc::isSupportChunk)\nwill have environmental support in static destructibles.\n\nNote: if both bAssetDefinedSupport and bWorldSupport are set, then chunks must be tagged as\n\"support\" chunks AND overlap the NxScene's static geometry in order to be environmentally supported."));
			MetaData->SetValue(NewProp_bAccumulateDamage, TEXT("Category"), TEXT("DestructibleParametersFlag"));
			MetaData->SetValue(NewProp_bAccumulateDamage, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(NewProp_bAccumulateDamage, TEXT("ToolTip"), TEXT("If set, chunks will \"remember\" damage applied to them, so that many applications of a damage amount\nbelow damageThreshold will eventually fracture the chunk.  If not set, a single application of\ndamage must exceed damageThreshold in order to fracture the chunk."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FDestructibleParametersFlag_CRC() { return 2975084687U; }
	UScriptStruct* Z_Construct_UScriptStruct_FDestructibleDepthParameters()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FDestructibleDepthParameters_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("DestructibleDepthParameters"), sizeof(FDestructibleDepthParameters), Get_Z_Construct_UScriptStruct_FDestructibleDepthParameters_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DestructibleDepthParameters"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FDestructibleDepthParameters>, EStructFlags(0x00000001));
			UProperty* NewProp_ImpactDamageOverride = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ImpactDamageOverride"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(ImpactDamageOverride, FDestructibleDepthParameters), 0x0000000000000001, Z_Construct_UEnum_Engine_EImpactDamageOverride());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Properties that may be set for all chunks at a particular depth in the fracture hierarchy."));
			MetaData->SetValue(NewProp_ImpactDamageOverride, TEXT("Category"), TEXT("DestructibleDepthParameters"));
			MetaData->SetValue(NewProp_ImpactDamageOverride, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(NewProp_ImpactDamageOverride, TEXT("ToolTip"), TEXT("Chunks up to the depth DefaultImpactDamageDepth will take impact damage, unless one of the override options (see EImpactDamageOverride) is chosen."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FDestructibleDepthParameters_CRC() { return 2962222415U; }
	UClass* Z_Construct_UClass_UDestructibleMesh_NoRegister()
	{
		return UDestructibleMesh::StaticClass();
	}
	UClass* Z_Construct_UClass_UDestructibleMesh()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USkeletalMesh();
			Z_Construct_UPackage_Engine();
			OuterClass = UDestructibleMesh::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_FractureChunkMeshes = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FractureChunkMeshes"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(FractureChunkMeshes, UDestructibleMesh), 0x0000000800002000);
				UProperty* NewProp_FractureChunkMeshes_Inner = new(EC_InternalUseOnlyConstructor, NewProp_FractureChunkMeshes, TEXT("FractureChunkMeshes"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000800000000, Z_Construct_UClass_UStaticMesh_NoRegister());
				UProperty* NewProp_SourceSMImportTimestamp = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SourceSMImportTimestamp"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SourceSMImportTimestamp, UDestructibleMesh), 0x0000000800000000, Z_Construct_UScriptStruct_FDateTime());
				UProperty* NewProp_SourceStaticMesh = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SourceStaticMesh"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(SourceStaticMesh, UDestructibleMesh), 0x0000000800000000, Z_Construct_UClass_UStaticMesh_NoRegister());
				UProperty* NewProp_FractureSettings = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FractureSettings"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(FractureSettings, UDestructibleMesh), 0x0002000800080008, Z_Construct_UClass_UDestructibleFractureSettings_NoRegister());
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_FractureEffects = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FractureEffects"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(FractureEffects, UDestructibleMesh), 0x0000000000000041);
				UProperty* NewProp_FractureEffects_Inner = new(EC_InternalUseOnlyConstructor, NewProp_FractureEffects, TEXT("FractureEffects"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FFractureEffect());
				UProperty* NewProp_DefaultDestructibleParameters = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultDestructibleParameters"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DefaultDestructibleParameters, UDestructibleMesh), 0x0000000000000001, Z_Construct_UScriptStruct_FDestructibleParameters());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Mesh LevelOfDetail Mirroring Physics Reimport Clothing Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/DestructibleMesh.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Holds an APEX destructible asset as well as an associated USkeletalMesh."));
				MetaData->SetValue(NewProp_FractureChunkMeshes, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
				MetaData->SetValue(NewProp_FractureChunkMeshes, TEXT("ToolTip"), TEXT("Array of static meshes to build the fracture chunks from"));
				MetaData->SetValue(NewProp_SourceSMImportTimestamp, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
				MetaData->SetValue(NewProp_SourceSMImportTimestamp, TEXT("ToolTip"), TEXT("Timestamp of the source static meshes last import at the time this destruction mesh has been generated."));
				MetaData->SetValue(NewProp_SourceStaticMesh, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
				MetaData->SetValue(NewProp_SourceStaticMesh, TEXT("ToolTip"), TEXT("Static mesh this destructible mesh is created from. Is nullptr if not created from a static mesh"));
				MetaData->SetValue(NewProp_FractureSettings, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_FractureSettings, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
				MetaData->SetValue(NewProp_FractureSettings, TEXT("ToolTip"), TEXT("Information used to author an NxDestructibleAsset"));
				MetaData->SetValue(NewProp_FractureEffects, TEXT("Category"), TEXT("Effects"));
				MetaData->SetValue(NewProp_FractureEffects, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
				MetaData->SetValue(NewProp_FractureEffects, TEXT("ToolTip"), TEXT("Fracture effects for each fracture level, unless overridden in the component."));
				MetaData->SetValue(NewProp_DefaultDestructibleParameters, TEXT("Category"), TEXT("DestructibleMesh"));
				MetaData->SetValue(NewProp_DefaultDestructibleParameters, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
				MetaData->SetValue(NewProp_DefaultDestructibleParameters, TEXT("ToolTip"), TEXT("Parameters controlling the destruction behavior."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UDestructibleMesh(Z_Construct_UClass_UDestructibleMesh, TEXT("UDestructibleMesh"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UDestructibleMesh);
	UFunction* Z_Construct_UFunction_USkeletalMeshSocket_GetSocketLocation()
	{
		struct SkeletalMeshSocket_eventGetSocketLocation_Parms
		{
			const USkeletalMeshComponent* SkelComp;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USkeletalMeshSocket();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetSocketLocation"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54820403, 65535, sizeof(SkeletalMeshSocket_eventGetSocketLocation_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SkeletalMeshSocket_eventGetSocketLocation_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_SkelComp = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SkelComp"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(SkelComp, SkeletalMeshSocket_eventGetSocketLocation_Parms), 0x0000000000080082, Z_Construct_UClass_USkeletalMeshComponent_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Components|SkeletalMesh"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SkeletalMeshSocket.h"));
			MetaData->SetValue(NewProp_SkelComp, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USkeletalMeshSocket_InitializeSocketFromLocation()
	{
		struct SkeletalMeshSocket_eventInitializeSocketFromLocation_Parms
		{
			const USkeletalMeshComponent* SkelComp;
			FVector WorldLocation;
			FVector WorldNormal;
		};
		UObject* Outer=Z_Construct_UClass_USkeletalMeshSocket();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("InitializeSocketFromLocation"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04820403, 65535, sizeof(SkeletalMeshSocket_eventInitializeSocketFromLocation_Parms));
			UProperty* NewProp_WorldNormal = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldNormal"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(WorldNormal, SkeletalMeshSocket_eventInitializeSocketFromLocation_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_WorldLocation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldLocation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(WorldLocation, SkeletalMeshSocket_eventInitializeSocketFromLocation_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_SkelComp = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SkelComp"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(SkelComp, SkeletalMeshSocket_eventInitializeSocketFromLocation_Parms), 0x0000000000080082, Z_Construct_UClass_USkeletalMeshComponent_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Components|SkeletalMesh"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SkeletalMeshSocket.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets BoneName, RelativeLocation and RelativeRotation based on closest bone to WorldLocation and WorldNormal"));
			MetaData->SetValue(NewProp_SkelComp, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_USkeletalMeshSocket_NoRegister()
	{
		return USkeletalMeshSocket::StaticClass();
	}
	UClass* Z_Construct_UClass_USkeletalMeshSocket()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = USkeletalMeshSocket::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;

				OuterClass->LinkChild(Z_Construct_UFunction_USkeletalMeshSocket_GetSocketLocation());
				OuterClass->LinkChild(Z_Construct_UFunction_USkeletalMeshSocket_InitializeSocketFromLocation());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bForceAlwaysAnimated, USkeletalMeshSocket, bool);
				UProperty* NewProp_bForceAlwaysAnimated = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bForceAlwaysAnimated"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bForceAlwaysAnimated, USkeletalMeshSocket), 0x0000000000000015, CPP_BOOL_PROPERTY_BITMASK(bForceAlwaysAnimated, USkeletalMeshSocket), sizeof(bool), true);
				UProperty* NewProp_RelativeScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RelativeScale"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(RelativeScale, USkeletalMeshSocket), 0x0000000000000015, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_RelativeRotation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RelativeRotation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(RelativeRotation, USkeletalMeshSocket), 0x0000000000000015, Z_Construct_UScriptStruct_FRotator());
				UProperty* NewProp_RelativeLocation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RelativeLocation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(RelativeLocation, USkeletalMeshSocket), 0x0000000000000015, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_BoneName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BoneName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(BoneName, USkeletalMeshSocket), 0x0000000000020015);
				UProperty* NewProp_SocketName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SocketName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(SocketName, USkeletalMeshSocket), 0x0000000000020015);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_USkeletalMeshSocket_GetSocketLocation()); // 1633511700
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_USkeletalMeshSocket_InitializeSocketFromLocation()); // 3678001702
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Actor"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/SkeletalMeshSocket.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SkeletalMeshSocket.h"));
				MetaData->SetValue(NewProp_bForceAlwaysAnimated, TEXT("Category"), TEXT("SkeletalMeshSocket"));
				MetaData->SetValue(NewProp_bForceAlwaysAnimated, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SkeletalMeshSocket.h"));
				MetaData->SetValue(NewProp_bForceAlwaysAnimated, TEXT("ToolTip"), TEXT("If true then the hierarchy of bones this socket is attached to will always be\n          evaluated, even if it had previously been removed due to the current lod setting"));
				MetaData->SetValue(NewProp_RelativeScale, TEXT("Category"), TEXT("SkeletalMeshSocket"));
				MetaData->SetValue(NewProp_RelativeScale, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SkeletalMeshSocket.h"));
				MetaData->SetValue(NewProp_RelativeRotation, TEXT("Category"), TEXT("SkeletalMeshSocket"));
				MetaData->SetValue(NewProp_RelativeRotation, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SkeletalMeshSocket.h"));
				MetaData->SetValue(NewProp_RelativeLocation, TEXT("Category"), TEXT("SkeletalMeshSocket"));
				MetaData->SetValue(NewProp_RelativeLocation, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SkeletalMeshSocket.h"));
				MetaData->SetValue(NewProp_BoneName, TEXT("Category"), TEXT("SkeletalMeshSocket"));
				MetaData->SetValue(NewProp_BoneName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SkeletalMeshSocket.h"));
				MetaData->SetValue(NewProp_SocketName, TEXT("Category"), TEXT("SkeletalMeshSocket"));
				MetaData->SetValue(NewProp_SocketName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SkeletalMeshSocket.h"));
				MetaData->SetValue(NewProp_SocketName, TEXT("ToolTip"), TEXT("Defines a named attachment location on the USkeletalMesh.\nThese are set up in editor and used as a shortcut instead of specifying\neverything explicitly to AttachComponent in the SkeletalMeshComponent.\nThe Outer of a SkeletalMeshSocket should always be the USkeletalMesh."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USkeletalMeshSocket(Z_Construct_UClass_USkeletalMeshSocket, TEXT("USkeletalMeshSocket"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(USkeletalMeshSocket);
	UClass* Z_Construct_UClass_USlateBrushAsset_NoRegister()
	{
		return USlateBrushAsset::StaticClass();
	}
	UClass* Z_Construct_UClass_USlateBrushAsset()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = USlateBrushAsset::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Brush = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Brush"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Brush, USlateBrushAsset), 0x0000000000000001, Z_Construct_UScriptStruct_FSlateBrush());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Slate/SlateBrushAsset.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Slate/SlateBrushAsset.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("An asset describing how a texture can exist in slate's DPI-aware environment\nand how this texture responds to resizing. e.g. Scale9-stretching? Tiling?"));
				MetaData->SetValue(NewProp_Brush, TEXT("Category"), TEXT("Brush"));
				MetaData->SetValue(NewProp_Brush, TEXT("ModuleRelativePath"), TEXT("Classes/Slate/SlateBrushAsset.h"));
				MetaData->SetValue(NewProp_Brush, TEXT("ShowOnlyInnerProperties"), TEXT(""));
				MetaData->SetValue(NewProp_Brush, TEXT("ToolTip"), TEXT("The slate brush resource describing the texture's behavior."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USlateBrushAsset(Z_Construct_UClass_USlateBrushAsset, TEXT("USlateBrushAsset"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(USlateBrushAsset);
	UEnum* Z_Construct_UEnum_Engine_EMaxConcurrentResolutionRule()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EMaxConcurrentResolutionRule_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EMaxConcurrentResolutionRule"), 0, Get_Z_Construct_UEnum_Engine_EMaxConcurrentResolutionRule_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EMaxConcurrentResolutionRule"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EMaxConcurrentResolutionRule::PreventNew")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EMaxConcurrentResolutionRule::StopOldest")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EMaxConcurrentResolutionRule::StopFarthestThenPreventNew")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EMaxConcurrentResolutionRule::StopFarthestThenOldest")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EMaxConcurrentResolutionRule::EMaxConcurrentResolutionRule_MAX")), 4));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundBase.h"));
			MetaData->SetValue(ReturnEnum, TEXT("PreventNew.ToolTip"), TEXT("When Max Concurrent sounds are active do not start a new sound."));
			MetaData->SetValue(ReturnEnum, TEXT("StopFarthestThenOldest.ToolTip"), TEXT("When Max Concurrent sounds are active stop the furthest sound.  If all sounds are the same distance then stop the oldest."));
			MetaData->SetValue(ReturnEnum, TEXT("StopFarthestThenPreventNew.ToolTip"), TEXT("When Max Concurrent sounds are active stop the furthest sound.  If all sounds are the same distance then do not start a new sound."));
			MetaData->SetValue(ReturnEnum, TEXT("StopOldest.ToolTip"), TEXT("When Max Concurrent sounds are active stop the oldest and start a new one."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EMaxConcurrentResolutionRule_CRC() { return 2878897422U; }
	UClass* Z_Construct_UClass_USoundBase_NoRegister()
	{
		return USoundBase::StaticClass();
	}
	UClass* Z_Construct_UClass_USoundBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = USoundBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20101081;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_AttenuationSettings = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AttenuationSettings"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(AttenuationSettings, USoundBase), 0x0000000000000001, Z_Construct_UClass_USoundAttenuation_NoRegister());
				UProperty* NewProp_Duration = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Duration"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Duration, USoundBase), 0x0000010000020015);
				UProperty* NewProp_MaxConcurrentPlayCount = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxConcurrentPlayCount"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MaxConcurrentPlayCount, USoundBase), 0x0000000000000001);
				UProperty* NewProp_MaxConcurrentResolutionRule = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxConcurrentResolutionRule"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(MaxConcurrentResolutionRule, USoundBase), 0x0000000000000001, Z_Construct_UEnum_Engine_EMaxConcurrentResolutionRule());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDebug, USoundBase, uint8);
				UProperty* NewProp_bDebug = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bDebug"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDebug, USoundBase), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bDebug, USoundBase), sizeof(uint8), false);
				UProperty* NewProp_SoundClassObject = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SoundClassObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(SoundClassObject, USoundBase), 0x0000080000000001, Z_Construct_UClass_USoundClass_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Sound/SoundBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundBase.h"));
				MetaData->SetValue(NewProp_AttenuationSettings, TEXT("Category"), TEXT("Attenuation"));
				MetaData->SetValue(NewProp_AttenuationSettings, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundBase.h"));
				MetaData->SetValue(NewProp_AttenuationSettings, TEXT("ToolTip"), TEXT("Attenuation settings package for the sound"));
				MetaData->SetValue(NewProp_Duration, TEXT("Category"), TEXT("Info"));
				MetaData->SetValue(NewProp_Duration, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundBase.h"));
				MetaData->SetValue(NewProp_Duration, TEXT("ToolTip"), TEXT("Duration of sound in seconds."));
				MetaData->SetValue(NewProp_MaxConcurrentPlayCount, TEXT("Category"), TEXT("Playback"));
				MetaData->SetValue(NewProp_MaxConcurrentPlayCount, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundBase.h"));
				MetaData->SetValue(NewProp_MaxConcurrentPlayCount, TEXT("ToolTip"), TEXT("Maximum number of times this sound can be played concurrently."));
				MetaData->SetValue(NewProp_MaxConcurrentResolutionRule, TEXT("Category"), TEXT("Playback"));
				MetaData->SetValue(NewProp_MaxConcurrentResolutionRule, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundBase.h"));
				MetaData->SetValue(NewProp_MaxConcurrentResolutionRule, TEXT("ToolTip"), TEXT("If we try to play a new version of this sound when at the max concurrent count how should it be resolved."));
				MetaData->SetValue(NewProp_bDebug, TEXT("Category"), TEXT("Playback"));
				MetaData->SetValue(NewProp_bDebug, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundBase.h"));
				MetaData->SetValue(NewProp_bDebug, TEXT("ToolTip"), TEXT("When \"stat sounds -debug\" has been specified, draw this sound's attenuation shape when the sound is audible. For debugging purpose only."));
				MetaData->SetValue(NewProp_SoundClassObject, TEXT("Category"), TEXT("Sound"));
				MetaData->SetValue(NewProp_SoundClassObject, TEXT("DisplayName"), TEXT("Sound Class"));
				MetaData->SetValue(NewProp_SoundClassObject, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundBase.h"));
				MetaData->SetValue(NewProp_SoundClassObject, TEXT("ToolTip"), TEXT("Sound class this sound belongs to"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USoundBase(Z_Construct_UClass_USoundBase, TEXT("USoundBase"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(USoundBase);
	UClass* Z_Construct_UClass_UDialogueSoundWaveProxy_NoRegister()
	{
		return UDialogueSoundWaveProxy::StaticClass();
	}
	UClass* Z_Construct_UClass_UDialogueSoundWaveProxy()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USoundBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UDialogueSoundWaveProxy::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20001080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Sound/DialogueSoundWaveProxy.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/DialogueSoundWaveProxy.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UDialogueSoundWaveProxy(Z_Construct_UClass_UDialogueSoundWaveProxy, TEXT("UDialogueSoundWaveProxy"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UDialogueSoundWaveProxy);
	UScriptStruct* Z_Construct_UScriptStruct_FSoundNodeEditorData()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FSoundNodeEditorData_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("SoundNodeEditorData"), sizeof(FSoundNodeEditorData), Get_Z_Construct_UScriptStruct_FSoundNodeEditorData_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SoundNodeEditorData"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FSoundNodeEditorData>, EStructFlags(0x00000001));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundCue.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FSoundNodeEditorData_CRC() { return 518996619U; }
	UClass* Z_Construct_UClass_USoundCue_NoRegister()
	{
		return USoundCue::StaticClass();
	}
	UClass* Z_Construct_UClass_USoundCue()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USoundBase();
			Z_Construct_UPackage_Engine();
			OuterClass = USoundCue::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20081080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_SoundCueGraph = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SoundCueGraph"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(SoundCueGraph, USoundCue), 0x0000000800000000, Z_Construct_UClass_UEdGraph_NoRegister());
				UProperty* NewProp_AllNodes = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AllNodes"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(AllNodes, USoundCue), 0x0000000800000000);
				UProperty* NewProp_AllNodes_Inner = new(EC_InternalUseOnlyConstructor, NewProp_AllNodes, TEXT("AllNodes"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000800000000, Z_Construct_UClass_USoundNode_NoRegister());
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_AttenuationOverrides = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AttenuationOverrides"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(AttenuationOverrides, USoundCue), 0x0000000000000001, Z_Construct_UScriptStruct_FAttenuationSettings());
				UProperty* NewProp_PitchMultiplier = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PitchMultiplier"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(PitchMultiplier, USoundCue), 0x0000010000000001);
				UProperty* NewProp_VolumeMultiplier = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VolumeMultiplier"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(VolumeMultiplier, USoundCue), 0x0000010000000001);
				UProperty* NewProp_FirstNode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FirstNode"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(FirstNode, USoundCue), 0x0000000000000000, Z_Construct_UClass_USoundNode_NoRegister());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverrideAttenuation, USoundCue, uint8);
				UProperty* NewProp_bOverrideAttenuation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bOverrideAttenuation"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverrideAttenuation, USoundCue), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bOverrideAttenuation, USoundCue), sizeof(uint8), false);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Sound/SoundCue.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundCue.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("The behavior of audio playback is defined within Sound Cues."));
				MetaData->SetValue(NewProp_SoundCueGraph, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundCue.h"));
				MetaData->SetValue(NewProp_AllNodes, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundCue.h"));
				MetaData->SetValue(NewProp_AttenuationOverrides, TEXT("Category"), TEXT("Attenuation"));
				MetaData->SetValue(NewProp_AttenuationOverrides, TEXT("EditCondition"), TEXT("bOverrideAttenuation"));
				MetaData->SetValue(NewProp_AttenuationOverrides, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundCue.h"));
				MetaData->SetValue(NewProp_AttenuationOverrides, TEXT("ToolTip"), TEXT("Attenuation settings to use if Override Attenuation is set to true"));
				MetaData->SetValue(NewProp_PitchMultiplier, TEXT("Category"), TEXT("Sound"));
				MetaData->SetValue(NewProp_PitchMultiplier, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundCue.h"));
				MetaData->SetValue(NewProp_PitchMultiplier, TEXT("ToolTip"), TEXT("Pitch multiplier for the Sound Cue"));
				MetaData->SetValue(NewProp_VolumeMultiplier, TEXT("Category"), TEXT("Sound"));
				MetaData->SetValue(NewProp_VolumeMultiplier, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundCue.h"));
				MetaData->SetValue(NewProp_VolumeMultiplier, TEXT("ToolTip"), TEXT("Volume multiplier for the Sound Cue"));
				MetaData->SetValue(NewProp_FirstNode, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundCue.h"));
				MetaData->SetValue(NewProp_bOverrideAttenuation, TEXT("Category"), TEXT("Attenuation"));
				MetaData->SetValue(NewProp_bOverrideAttenuation, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundCue.h"));
				MetaData->SetValue(NewProp_bOverrideAttenuation, TEXT("ToolTip"), TEXT("Indicates whether attenuation should use the Attenuation Overrides or the Attenuation Settings asset"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USoundCue(Z_Construct_UClass_USoundCue, TEXT("USoundCue"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(USoundCue);
	UEnum* Z_Construct_UEnum_Engine_ESoundGroup()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_ESoundGroup_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ESoundGroup"), 0, Get_Z_Construct_UEnum_Engine_ESoundGroup_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ESoundGroup"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("SOUNDGROUP_Default")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("SOUNDGROUP_Effects")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("SOUNDGROUP_UI")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("SOUNDGROUP_Music")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("SOUNDGROUP_Voice")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("SOUNDGROUP_GameSoundGroup1")), 5));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("SOUNDGROUP_GameSoundGroup2")), 6));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("SOUNDGROUP_GameSoundGroup3")), 7));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("SOUNDGROUP_GameSoundGroup4")), 8));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("SOUNDGROUP_GameSoundGroup5")), 9));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("SOUNDGROUP_GameSoundGroup6")), 10));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("SOUNDGROUP_GameSoundGroup7")), 11));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("SOUNDGROUP_GameSoundGroup8")), 12));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("SOUNDGROUP_GameSoundGroup9")), 13));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("SOUNDGROUP_GameSoundGroup10")), 14));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("SOUNDGROUP_GameSoundGroup11")), 15));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("SOUNDGROUP_GameSoundGroup12")), 16));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("SOUNDGROUP_GameSoundGroup13")), 17));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("SOUNDGROUP_GameSoundGroup14")), 18));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("SOUNDGROUP_GameSoundGroup15")), 19));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("SOUNDGROUP_GameSoundGroup16")), 20));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("SOUNDGROUP_GameSoundGroup17")), 21));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("SOUNDGROUP_GameSoundGroup18")), 22));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("SOUNDGROUP_GameSoundGroup19")), 23));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("SOUNDGROUP_GameSoundGroup20")), 24));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("SOUNDGROUP_MAX")), 25));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundGroups.h"));
			MetaData->SetValue(ReturnEnum, TEXT("SOUNDGROUP_Default.DisplayName"), TEXT("Default"));
			MetaData->SetValue(ReturnEnum, TEXT("SOUNDGROUP_Effects.DisplayName"), TEXT("Effects"));
			MetaData->SetValue(ReturnEnum, TEXT("SOUNDGROUP_GameSoundGroup1.Hidden"), TEXT(""));
			MetaData->SetValue(ReturnEnum, TEXT("SOUNDGROUP_GameSoundGroup10.Hidden"), TEXT(""));
			MetaData->SetValue(ReturnEnum, TEXT("SOUNDGROUP_GameSoundGroup11.Hidden"), TEXT(""));
			MetaData->SetValue(ReturnEnum, TEXT("SOUNDGROUP_GameSoundGroup12.Hidden"), TEXT(""));
			MetaData->SetValue(ReturnEnum, TEXT("SOUNDGROUP_GameSoundGroup13.Hidden"), TEXT(""));
			MetaData->SetValue(ReturnEnum, TEXT("SOUNDGROUP_GameSoundGroup14.Hidden"), TEXT(""));
			MetaData->SetValue(ReturnEnum, TEXT("SOUNDGROUP_GameSoundGroup15.Hidden"), TEXT(""));
			MetaData->SetValue(ReturnEnum, TEXT("SOUNDGROUP_GameSoundGroup16.Hidden"), TEXT(""));
			MetaData->SetValue(ReturnEnum, TEXT("SOUNDGROUP_GameSoundGroup17.Hidden"), TEXT(""));
			MetaData->SetValue(ReturnEnum, TEXT("SOUNDGROUP_GameSoundGroup18.Hidden"), TEXT(""));
			MetaData->SetValue(ReturnEnum, TEXT("SOUNDGROUP_GameSoundGroup19.Hidden"), TEXT(""));
			MetaData->SetValue(ReturnEnum, TEXT("SOUNDGROUP_GameSoundGroup2.Hidden"), TEXT(""));
			MetaData->SetValue(ReturnEnum, TEXT("SOUNDGROUP_GameSoundGroup20.Hidden"), TEXT(""));
			MetaData->SetValue(ReturnEnum, TEXT("SOUNDGROUP_GameSoundGroup3.Hidden"), TEXT(""));
			MetaData->SetValue(ReturnEnum, TEXT("SOUNDGROUP_GameSoundGroup4.Hidden"), TEXT(""));
			MetaData->SetValue(ReturnEnum, TEXT("SOUNDGROUP_GameSoundGroup5.Hidden"), TEXT(""));
			MetaData->SetValue(ReturnEnum, TEXT("SOUNDGROUP_GameSoundGroup6.Hidden"), TEXT(""));
			MetaData->SetValue(ReturnEnum, TEXT("SOUNDGROUP_GameSoundGroup7.Hidden"), TEXT(""));
			MetaData->SetValue(ReturnEnum, TEXT("SOUNDGROUP_GameSoundGroup8.Hidden"), TEXT(""));
			MetaData->SetValue(ReturnEnum, TEXT("SOUNDGROUP_GameSoundGroup9.Hidden"), TEXT(""));
			MetaData->SetValue(ReturnEnum, TEXT("SOUNDGROUP_Music.DisplayName"), TEXT("Music"));
			MetaData->SetValue(ReturnEnum, TEXT("SOUNDGROUP_UI.DisplayName"), TEXT("UI"));
			MetaData->SetValue(ReturnEnum, TEXT("SOUNDGROUP_Voice.DisplayName"), TEXT("Voice"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_ESoundGroup_CRC() { return 4233913218U; }
	UScriptStruct* Z_Construct_UScriptStruct_FSoundGroup()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FSoundGroup_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("SoundGroup"), sizeof(FSoundGroup), Get_Z_Construct_UScriptStruct_FSoundGroup_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SoundGroup"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FSoundGroup>, EStructFlags(0x00000001));
			UProperty* NewProp_DecompressedDuration = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DecompressedDuration"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DecompressedDuration, FSoundGroup), 0x0000000000004000);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAlwaysDecompressOnLoad, FSoundGroup, uint8);
			UProperty* NewProp_bAlwaysDecompressOnLoad = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bAlwaysDecompressOnLoad"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAlwaysDecompressOnLoad, FSoundGroup), 0x0000000000004000, CPP_BOOL_PROPERTY_BITMASK(bAlwaysDecompressOnLoad, FSoundGroup), sizeof(uint8), false);
			UProperty* NewProp_DisplayName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DisplayName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(DisplayName, FSoundGroup), 0x0000000000004000);
			UProperty* NewProp_SoundGroup = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SoundGroup"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(SoundGroup, FSoundGroup), 0x0000000000004000, Z_Construct_UEnum_Engine_ESoundGroup());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundGroups.h"));
			MetaData->SetValue(NewProp_DecompressedDuration, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundGroups.h"));
			MetaData->SetValue(NewProp_DecompressedDuration, TEXT("ToolTip"), TEXT("Sound duration in seconds below which sounds are entirely expanded to PCM at load time\nDisregarded if bAlwaysDecompressOnLoad is true"));
			MetaData->SetValue(NewProp_bAlwaysDecompressOnLoad, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundGroups.h"));
			MetaData->SetValue(NewProp_bAlwaysDecompressOnLoad, TEXT("ToolTip"), TEXT("Whether sounds in this group should always decompress on load"));
			MetaData->SetValue(NewProp_DisplayName, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundGroups.h"));
			MetaData->SetValue(NewProp_DisplayName, TEXT("ToolTip"), TEXT("An override display name for custom game sound groups"));
			MetaData->SetValue(NewProp_SoundGroup, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundGroups.h"));
			MetaData->SetValue(NewProp_SoundGroup, TEXT("ToolTip"), TEXT("The sound group enumeration we are setting values for"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FSoundGroup_CRC() { return 269061538U; }
	UClass* Z_Construct_UClass_USoundGroups_NoRegister()
	{
		return USoundGroups::StaticClass();
	}
	UClass* Z_Construct_UClass_USoundGroups()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = USoundGroups::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000085;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_SoundGroupProfiles = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SoundGroupProfiles"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(SoundGroupProfiles, USoundGroups), 0x0000000000004000);
				UProperty* NewProp_SoundGroupProfiles_Inner = new(EC_InternalUseOnlyConstructor, NewProp_SoundGroupProfiles, TEXT("SoundGroupProfiles"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000004000, Z_Construct_UScriptStruct_FSoundGroup());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Sound/SoundGroups.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundGroups.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("This class is a singleton initialized from the ini"));
				MetaData->SetValue(NewProp_SoundGroupProfiles, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundGroups.h"));
				MetaData->SetValue(NewProp_SoundGroupProfiles, TEXT("ToolTip"), TEXT("The ini editable array of profiles"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USoundGroups(Z_Construct_UClass_USoundGroups, TEXT("USoundGroups"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(USoundGroups);
	UEnum* Z_Construct_UEnum_Engine_EDecompressionType()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EDecompressionType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EDecompressionType"), 0, Get_Z_Construct_UEnum_Engine_EDecompressionType_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EDecompressionType"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("DTYPE_Setup")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("DTYPE_Invalid")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("DTYPE_Preview")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("DTYPE_Native")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("DTYPE_RealTime")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("DTYPE_Procedural")), 5));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("DTYPE_Xenon")), 6));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("DTYPE_Streaming")), 7));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("DTYPE_MAX")), 8));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundWave.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EDecompressionType_CRC() { return 3589868247U; }
	UScriptStruct* Z_Construct_UScriptStruct_FStreamedAudioPlatformData()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FStreamedAudioPlatformData_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("StreamedAudioPlatformData"), sizeof(FStreamedAudioPlatformData), Get_Z_Construct_UScriptStruct_FStreamedAudioPlatformData_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("StreamedAudioPlatformData"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FStreamedAudioPlatformData>, EStructFlags(0x00000001));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundWave.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Platform-specific data used streaming audio at runtime."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FStreamedAudioPlatformData_CRC() { return 549879885U; }
	UClass* Z_Construct_UClass_USoundWave_NoRegister()
	{
		return USoundWave::StaticClass();
	}
	UClass* Z_Construct_UClass_USoundWave()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USoundBase();
			Z_Construct_UPackage_Engine();
			OuterClass = USoundWave::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20901080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_AssetImportData = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AssetImportData"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(AssetImportData, USoundWave), 0x00020008000a0009, Z_Construct_UClass_UAssetImportData_NoRegister());
				UProperty* NewProp_SourceFileTimestamp = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SourceFileTimestamp"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(SourceFileTimestamp_DEPRECATED, USoundWave), 0x0000000820000000);
				UProperty* NewProp_SourceFilePath = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SourceFilePath"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(SourceFilePath_DEPRECATED, USoundWave), 0x0000000820000000);
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_LocalizedSubtitles = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LocalizedSubtitles"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(LocalizedSubtitles, USoundWave), 0x0000000000000000);
				UProperty* NewProp_LocalizedSubtitles_Inner = new(EC_InternalUseOnlyConstructor, NewProp_LocalizedSubtitles, TEXT("LocalizedSubtitles"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FLocalizedSubtitle());
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_Comment = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Comment"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Comment, USoundWave), 0x0000000800000001);
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_Subtitles = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Subtitles"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Subtitles, USoundWave), 0x0000000000000001);
				UProperty* NewProp_Subtitles_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Subtitles, TEXT("Subtitles"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FSubtitleCue());
				UProperty* NewProp_RawPCMDataSize = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RawPCMDataSize"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(RawPCMDataSize, USoundWave), 0x0000000000000000);
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_ChannelSizes = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ChannelSizes"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ChannelSizes, USoundWave), 0x0000000800000000);
				UProperty* NewProp_ChannelSizes_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ChannelSizes, TEXT("ChannelSizes"), RF_Public|RF_Transient|RF_Native) UIntProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000800000000);
				UProperty* NewProp_ChannelOffsets = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ChannelOffsets"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ChannelOffsets, USoundWave), 0x0000000800000000);
				UProperty* NewProp_ChannelOffsets_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ChannelOffsets, TEXT("ChannelOffsets"), RF_Public|RF_Transient|RF_Native) UIntProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000800000000);
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_SampleRate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SampleRate"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(SampleRate, USoundWave), 0x0000010000020001);
				UProperty* NewProp_NumChannels = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NumChannels"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(NumChannels, USoundWave), 0x0000010000020001);
				UProperty* NewProp_Pitch = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Pitch"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Pitch, USoundWave), 0x0000000000000001);
				UProperty* NewProp_Volume = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Volume"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Volume, USoundWave), 0x0000000000000001);
				UProperty* NewProp_SpokenText = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SpokenText"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(SpokenText, USoundWave), 0x0000000000000001);
				UProperty* NewProp_SoundGroup = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SoundGroup"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(SoundGroup, USoundWave), 0x0000000000000001, Z_Construct_UEnum_Engine_ESoundGroup());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSingleLine, USoundWave, uint8);
				UProperty* NewProp_bSingleLine = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bSingleLine"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSingleLine, USoundWave), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bSingleLine, USoundWave), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bManualWordWrap, USoundWave, uint8);
				UProperty* NewProp_bManualWordWrap = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bManualWordWrap"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bManualWordWrap, USoundWave), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bManualWordWrap, USoundWave), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bMature, USoundWave, uint8);
				UProperty* NewProp_bMature = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bMature"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bMature, USoundWave), 0x0000010000000001, CPP_BOOL_PROPERTY_BITMASK(bMature, USoundWave), sizeof(uint8), false);
				UProperty* NewProp_StreamingPriority = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StreamingPriority"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(StreamingPriority, USoundWave), 0x0000000000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bStreaming, USoundWave, uint8);
				UProperty* NewProp_bStreaming = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bStreaming"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bStreaming, USoundWave), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bStreaming, USoundWave), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLooping, USoundWave, uint8);
				UProperty* NewProp_bLooping = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bLooping"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLooping, USoundWave), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bLooping, USoundWave), sizeof(uint8), false);
				UProperty* NewProp_CompressionQuality = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CompressionQuality"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(CompressionQuality, USoundWave), 0x0000010000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Sound/SoundWave.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundWave.h"));
				MetaData->SetValue(NewProp_AssetImportData, TEXT("Category"), TEXT("ImportSettings"));
				MetaData->SetValue(NewProp_AssetImportData, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_AssetImportData, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundWave.h"));
				MetaData->SetValue(NewProp_SourceFileTimestamp, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundWave.h"));
				MetaData->SetValue(NewProp_SourceFilePath, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundWave.h"));
				MetaData->SetValue(NewProp_LocalizedSubtitles, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundWave.h"));
				MetaData->SetValue(NewProp_LocalizedSubtitles, TEXT("ToolTip"), TEXT("The array of the subtitles for each language. Generated at cook time."));
				MetaData->SetValue(NewProp_Comment, TEXT("Category"), TEXT("Subtitles"));
				MetaData->SetValue(NewProp_Comment, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundWave.h"));
				MetaData->SetValue(NewProp_Comment, TEXT("ToolTip"), TEXT("Provides contextual information for the sound to the translator."));
				MetaData->SetValue(NewProp_Subtitles, TEXT("Category"), TEXT("Subtitles"));
				MetaData->SetValue(NewProp_Subtitles, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundWave.h"));
				MetaData->SetValue(NewProp_Subtitles, TEXT("ToolTip"), TEXT("Subtitle cues.  If empty, use SpokenText as the subtitle.  Will often be empty,\nas the contents of the subtitle is commonly identical to what is spoken."));
				MetaData->SetValue(NewProp_RawPCMDataSize, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundWave.h"));
				MetaData->SetValue(NewProp_RawPCMDataSize, TEXT("ToolTip"), TEXT("Size of RawPCMData, or what RawPCMData would be if the sound was fully decompressed"));
				MetaData->SetValue(NewProp_ChannelSizes, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundWave.h"));
				MetaData->SetValue(NewProp_ChannelSizes, TEXT("ToolTip"), TEXT("Sizes of the bulk data for the source wav data"));
				MetaData->SetValue(NewProp_ChannelOffsets, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundWave.h"));
				MetaData->SetValue(NewProp_ChannelOffsets, TEXT("ToolTip"), TEXT("Offsets into the bulk data for the source wav data"));
				MetaData->SetValue(NewProp_SampleRate, TEXT("Category"), TEXT("Info"));
				MetaData->SetValue(NewProp_SampleRate, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundWave.h"));
				MetaData->SetValue(NewProp_SampleRate, TEXT("ToolTip"), TEXT("Cached sample rate for displaying in the tools"));
				MetaData->SetValue(NewProp_NumChannels, TEXT("Category"), TEXT("Info"));
				MetaData->SetValue(NewProp_NumChannels, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundWave.h"));
				MetaData->SetValue(NewProp_NumChannels, TEXT("ToolTip"), TEXT("Number of channels of multichannel data; 1 or 2 for regular mono and stereo files"));
				MetaData->SetValue(NewProp_Pitch, TEXT("Category"), TEXT("Sound"));
				MetaData->SetValue(NewProp_Pitch, TEXT("ClampMax"), TEXT("2.0"));
				MetaData->SetValue(NewProp_Pitch, TEXT("ClampMin"), TEXT("0.4"));
				MetaData->SetValue(NewProp_Pitch, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundWave.h"));
				MetaData->SetValue(NewProp_Pitch, TEXT("ToolTip"), TEXT("Playback pitch for sound - Minimum is 0.4, maximum is 2.0 - it is a simple linear multiplier to the SampleRate."));
				MetaData->SetValue(NewProp_Volume, TEXT("Category"), TEXT("Sound"));
				MetaData->SetValue(NewProp_Volume, TEXT("ClampMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_Volume, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundWave.h"));
				MetaData->SetValue(NewProp_Volume, TEXT("ToolTip"), TEXT("Playback volume of sound 0 to 1 - Default is 1.0."));
				MetaData->SetValue(NewProp_SpokenText, TEXT("Category"), TEXT("Subtitles"));
				MetaData->SetValue(NewProp_SpokenText, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundWave.h"));
				MetaData->SetValue(NewProp_SpokenText, TEXT("ToolTip"), TEXT("A localized version of the text that is actually spoken phonetically in the audio."));
				MetaData->SetValue(NewProp_SoundGroup, TEXT("Category"), TEXT("Sound"));
				MetaData->SetValue(NewProp_SoundGroup, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundWave.h"));
				MetaData->SetValue(NewProp_bSingleLine, TEXT("Category"), TEXT("Subtitles"));
				MetaData->SetValue(NewProp_bSingleLine, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundWave.h"));
				MetaData->SetValue(NewProp_bSingleLine, TEXT("ToolTip"), TEXT("If set to true the subtitles display as a sequence of single lines as opposed to multiline."));
				MetaData->SetValue(NewProp_bManualWordWrap, TEXT("Category"), TEXT("Subtitles"));
				MetaData->SetValue(NewProp_bManualWordWrap, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundWave.h"));
				MetaData->SetValue(NewProp_bManualWordWrap, TEXT("ToolTip"), TEXT("If set to true will disable automatic generation of line breaks - use if the subtitles have been split manually."));
				MetaData->SetValue(NewProp_bMature, TEXT("Category"), TEXT("Subtitles"));
				MetaData->SetValue(NewProp_bMature, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundWave.h"));
				MetaData->SetValue(NewProp_bMature, TEXT("ToolTip"), TEXT("If set to true if this sound is considered to contain mature/adult content."));
				MetaData->SetValue(NewProp_StreamingPriority, TEXT("Category"), TEXT("Streaming"));
				MetaData->SetValue(NewProp_StreamingPriority, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_StreamingPriority, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundWave.h"));
				MetaData->SetValue(NewProp_StreamingPriority, TEXT("ToolTip"), TEXT("Priority of this sound when streaming (lower priority streams may not always play)"));
				MetaData->SetValue(NewProp_bStreaming, TEXT("Category"), TEXT("Streaming"));
				MetaData->SetValue(NewProp_bStreaming, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundWave.h"));
				MetaData->SetValue(NewProp_bStreaming, TEXT("ToolTip"), TEXT("Whether this sound can be streamed to avoid increased memory usage"));
				MetaData->SetValue(NewProp_bLooping, TEXT("Category"), TEXT("SoundWave"));
				MetaData->SetValue(NewProp_bLooping, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundWave.h"));
				MetaData->SetValue(NewProp_bLooping, TEXT("ToolTip"), TEXT("If set, when played directly (not through a sound cue) the wave will be played looping."));
				MetaData->SetValue(NewProp_CompressionQuality, TEXT("Category"), TEXT("Compression"));
				MetaData->SetValue(NewProp_CompressionQuality, TEXT("ClampMax"), TEXT("100"));
				MetaData->SetValue(NewProp_CompressionQuality, TEXT("ClampMin"), TEXT("1"));
				MetaData->SetValue(NewProp_CompressionQuality, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundWave.h"));
				MetaData->SetValue(NewProp_CompressionQuality, TEXT("ToolTip"), TEXT("Platform agnostic compression quality. 1..100 with 1 being best compression and 100 being best quality."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USoundWave(Z_Construct_UClass_USoundWave, TEXT("USoundWave"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(USoundWave);
	UClass* Z_Construct_UClass_USoundWaveProcedural_NoRegister()
	{
		return USoundWaveProcedural::StaticClass();
	}
	UClass* Z_Construct_UClass_USoundWaveProcedural()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USoundWave();
			Z_Construct_UPackage_Engine();
			OuterClass = USoundWaveProcedural::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20901080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Sound/SoundWaveProcedural.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundWaveProcedural.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USoundWaveProcedural(Z_Construct_UClass_USoundWaveProcedural, TEXT("USoundWaveProcedural"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(USoundWaveProcedural);
	UEnum* Z_Construct_UEnum_Engine_EAudioOutputTarget()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EAudioOutputTarget_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EAudioOutputTarget"), 0, Get_Z_Construct_UEnum_Engine_EAudioOutputTarget_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EAudioOutputTarget"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EAudioOutputTarget::Speaker")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EAudioOutputTarget::Controller")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EAudioOutputTarget::ControllerFallbackToSpeaker")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EAudioOutputTarget::EAudioOutputTarget_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("Controller.ToolTip"), TEXT("Sound plays only from controller if present."));
			MetaData->SetValue(ReturnEnum, TEXT("ControllerFallbackToSpeaker.ToolTip"), TEXT("Sound plays on the controller if present. If not present, it plays from speakers."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundClass.h"));
			MetaData->SetValue(ReturnEnum, TEXT("Speaker.ToolTip"), TEXT("Sound plays only from speakers."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EAudioOutputTarget_CRC() { return 1459230032U; }
	UScriptStruct* Z_Construct_UScriptStruct_FPassiveSoundMixModifier()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FPassiveSoundMixModifier_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("PassiveSoundMixModifier"), sizeof(FPassiveSoundMixModifier), Get_Z_Construct_UScriptStruct_FPassiveSoundMixModifier_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PassiveSoundMixModifier"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FPassiveSoundMixModifier>, EStructFlags(0x00000001));
			UProperty* NewProp_MaxVolumeThreshold = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MaxVolumeThreshold"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MaxVolumeThreshold, FPassiveSoundMixModifier), 0x0000000000000001);
			UProperty* NewProp_MinVolumeThreshold = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MinVolumeThreshold"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MinVolumeThreshold, FPassiveSoundMixModifier), 0x0000000000000001);
			UProperty* NewProp_SoundMix = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SoundMix"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(SoundMix, FPassiveSoundMixModifier), 0x0000000000000001, Z_Construct_UClass_USoundMix_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundClass.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Structure containing information on a SoundMix to activate passively."));
			MetaData->SetValue(NewProp_MaxVolumeThreshold, TEXT("Category"), TEXT("PassiveSoundMixModifier"));
			MetaData->SetValue(NewProp_MaxVolumeThreshold, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundClass.h"));
			MetaData->SetValue(NewProp_MaxVolumeThreshold, TEXT("ToolTip"), TEXT("Maximum volume level required to activate SoundMix. Above this value the SoundMix will not be active."));
			MetaData->SetValue(NewProp_MinVolumeThreshold, TEXT("Category"), TEXT("PassiveSoundMixModifier"));
			MetaData->SetValue(NewProp_MinVolumeThreshold, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundClass.h"));
			MetaData->SetValue(NewProp_MinVolumeThreshold, TEXT("ToolTip"), TEXT("Minimum volume level required to activate SoundMix. Below this value the SoundMix will not be active."));
			MetaData->SetValue(NewProp_SoundMix, TEXT("Category"), TEXT("PassiveSoundMixModifier"));
			MetaData->SetValue(NewProp_SoundMix, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundClass.h"));
			MetaData->SetValue(NewProp_SoundMix, TEXT("ToolTip"), TEXT("The SoundMix to activate"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FPassiveSoundMixModifier_CRC() { return 2965846946U; }
	UScriptStruct* Z_Construct_UScriptStruct_FSoundClassProperties()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FSoundClassProperties_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("SoundClassProperties"), sizeof(FSoundClassProperties), Get_Z_Construct_UScriptStruct_FSoundClassProperties_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SoundClassProperties"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FSoundClassProperties>, EStructFlags(0x00000001));
			UProperty* NewProp_OutputTarget = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("OutputTarget"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(OutputTarget, FSoundClassProperties), 0x0000000000000001, Z_Construct_UEnum_Engine_EAudioOutputTarget());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bApplyAmbientVolumes, FSoundClassProperties, uint8);
			UProperty* NewProp_bApplyAmbientVolumes = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bApplyAmbientVolumes"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bApplyAmbientVolumes, FSoundClassProperties), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bApplyAmbientVolumes, FSoundClassProperties), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCenterChannelOnly, FSoundClassProperties, uint8);
			UProperty* NewProp_bCenterChannelOnly = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bCenterChannelOnly"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCenterChannelOnly, FSoundClassProperties), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bCenterChannelOnly, FSoundClassProperties), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bReverb, FSoundClassProperties, uint8);
			UProperty* NewProp_bReverb = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bReverb"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bReverb, FSoundClassProperties), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bReverb, FSoundClassProperties), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsMusic, FSoundClassProperties, uint8);
			UProperty* NewProp_bIsMusic = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bIsMusic"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsMusic, FSoundClassProperties), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bIsMusic, FSoundClassProperties), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsUISound, FSoundClassProperties, uint8);
			UProperty* NewProp_bIsUISound = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bIsUISound"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsUISound, FSoundClassProperties), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bIsUISound, FSoundClassProperties), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAlwaysPlay, FSoundClassProperties, uint8);
			UProperty* NewProp_bAlwaysPlay = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bAlwaysPlay"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAlwaysPlay, FSoundClassProperties), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bAlwaysPlay, FSoundClassProperties), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bApplyEffects, FSoundClassProperties, uint8);
			UProperty* NewProp_bApplyEffects = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bApplyEffects"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bApplyEffects, FSoundClassProperties), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bApplyEffects, FSoundClassProperties), sizeof(uint8), false);
			UProperty* NewProp_RadioFilterVolumeThreshold = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RadioFilterVolumeThreshold"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(RadioFilterVolumeThreshold, FSoundClassProperties), 0x0000000000000001);
			UProperty* NewProp_RadioFilterVolume = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RadioFilterVolume"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(RadioFilterVolume, FSoundClassProperties), 0x0000000000000001);
			UProperty* NewProp_VoiceCenterChannelVolume = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("VoiceCenterChannelVolume"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(VoiceCenterChannelVolume, FSoundClassProperties), 0x0000000000000001);
			UProperty* NewProp_LFEBleed = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LFEBleed"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(LFEBleed, FSoundClassProperties), 0x0000000000000001);
			UProperty* NewProp_StereoBleed = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("StereoBleed"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(StereoBleed, FSoundClassProperties), 0x0000000000000001);
			UProperty* NewProp_Pitch = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Pitch"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Pitch, FSoundClassProperties), 0x0000000000000001);
			UProperty* NewProp_Volume = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Volume"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Volume, FSoundClassProperties), 0x0000000000000001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundClass.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Structure containing configurable properties of a sound class."));
			MetaData->SetValue(NewProp_OutputTarget, TEXT("Category"), TEXT("SoundClassProperties"));
			MetaData->SetValue(NewProp_OutputTarget, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundClass.h"));
			MetaData->SetValue(NewProp_OutputTarget, TEXT("ToolTip"), TEXT("Which output target the sound should be played through"));
			MetaData->SetValue(NewProp_bApplyAmbientVolumes, TEXT("Category"), TEXT("SoundClassProperties"));
			MetaData->SetValue(NewProp_bApplyAmbientVolumes, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundClass.h"));
			MetaData->SetValue(NewProp_bApplyAmbientVolumes, TEXT("ToolTip"), TEXT("Whether the Interior/Exterior volume and LPF modifiers should be applied"));
			MetaData->SetValue(NewProp_bCenterChannelOnly, TEXT("Category"), TEXT("SoundClassProperties"));
			MetaData->SetValue(NewProp_bCenterChannelOnly, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundClass.h"));
			MetaData->SetValue(NewProp_bCenterChannelOnly, TEXT("ToolTip"), TEXT("Whether or not this sound class forces sounds to the center channel"));
			MetaData->SetValue(NewProp_bReverb, TEXT("Category"), TEXT("SoundClassProperties"));
			MetaData->SetValue(NewProp_bReverb, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundClass.h"));
			MetaData->SetValue(NewProp_bReverb, TEXT("ToolTip"), TEXT("Whether or not this sound class has reverb applied"));
			MetaData->SetValue(NewProp_bIsMusic, TEXT("Category"), TEXT("SoundClassProperties"));
			MetaData->SetValue(NewProp_bIsMusic, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundClass.h"));
			MetaData->SetValue(NewProp_bIsMusic, TEXT("ToolTip"), TEXT("Whether or not this is music (propagates only if parent is true)"));
			MetaData->SetValue(NewProp_bIsUISound, TEXT("Category"), TEXT("SoundClassProperties"));
			MetaData->SetValue(NewProp_bIsUISound, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundClass.h"));
			MetaData->SetValue(NewProp_bIsUISound, TEXT("ToolTip"), TEXT("Whether or not this sound plays when the game is paused in the UI"));
			MetaData->SetValue(NewProp_bAlwaysPlay, TEXT("Category"), TEXT("SoundClassProperties"));
			MetaData->SetValue(NewProp_bAlwaysPlay, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundClass.h"));
			MetaData->SetValue(NewProp_bAlwaysPlay, TEXT("ToolTip"), TEXT("Whether to artificially prioritise the component to play"));
			MetaData->SetValue(NewProp_bApplyEffects, TEXT("Category"), TEXT("SoundClassProperties"));
			MetaData->SetValue(NewProp_bApplyEffects, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundClass.h"));
			MetaData->SetValue(NewProp_bApplyEffects, TEXT("ToolTip"), TEXT("Sound mix voice - whether to apply audio effects"));
			MetaData->SetValue(NewProp_RadioFilterVolumeThreshold, TEXT("Category"), TEXT("SoundClassProperties"));
			MetaData->SetValue(NewProp_RadioFilterVolumeThreshold, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundClass.h"));
			MetaData->SetValue(NewProp_RadioFilterVolumeThreshold, TEXT("ToolTip"), TEXT("Volume at which the radio filter kicks in"));
			MetaData->SetValue(NewProp_RadioFilterVolume, TEXT("Category"), TEXT("SoundClassProperties"));
			MetaData->SetValue(NewProp_RadioFilterVolume, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundClass.h"));
			MetaData->SetValue(NewProp_RadioFilterVolume, TEXT("ToolTip"), TEXT("Volume of the radio filter effect"));
			MetaData->SetValue(NewProp_VoiceCenterChannelVolume, TEXT("Category"), TEXT("SoundClassProperties"));
			MetaData->SetValue(NewProp_VoiceCenterChannelVolume, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundClass.h"));
			MetaData->SetValue(NewProp_VoiceCenterChannelVolume, TEXT("ToolTip"), TEXT("Voice center channel volume - Not a multiplier (no propagation)"));
			MetaData->SetValue(NewProp_LFEBleed, TEXT("Category"), TEXT("SoundClassProperties"));
			MetaData->SetValue(NewProp_LFEBleed, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundClass.h"));
			MetaData->SetValue(NewProp_LFEBleed, TEXT("ToolTip"), TEXT("The amount of a sound to bleed to the LFE channel"));
			MetaData->SetValue(NewProp_StereoBleed, TEXT("Category"), TEXT("SoundClassProperties"));
			MetaData->SetValue(NewProp_StereoBleed, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundClass.h"));
			MetaData->SetValue(NewProp_StereoBleed, TEXT("ToolTip"), TEXT("The amount of stereo sounds to bleed to the rear speakers"));
			MetaData->SetValue(NewProp_Pitch, TEXT("Category"), TEXT("SoundClassProperties"));
			MetaData->SetValue(NewProp_Pitch, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundClass.h"));
			MetaData->SetValue(NewProp_Pitch, TEXT("ToolTip"), TEXT("Pitch multiplier."));
			MetaData->SetValue(NewProp_Volume, TEXT("Category"), TEXT("SoundClassProperties"));
			MetaData->SetValue(NewProp_Volume, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundClass.h"));
			MetaData->SetValue(NewProp_Volume, TEXT("ToolTip"), TEXT("Volume multiplier."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FSoundClassProperties_CRC() { return 2385568362U; }
	UScriptStruct* Z_Construct_UScriptStruct_FSoundClassEditorData()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FSoundClassEditorData_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("SoundClassEditorData"), sizeof(FSoundClassEditorData), Get_Z_Construct_UScriptStruct_FSoundClassEditorData_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SoundClassEditorData"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FSoundClassEditorData>, EStructFlags(0x00000001));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundClass.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FSoundClassEditorData_CRC() { return 4218378776U; }
	UClass* Z_Construct_UClass_USoundClass_NoRegister()
	{
		return USoundClass::StaticClass();
	}
	UClass* Z_Construct_UClass_USoundClass()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = USoundClass::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ParentClass = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ParentClass"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ParentClass, USoundClass), 0x0000000000000000, Z_Construct_UClass_USoundClass_NoRegister());
				UProperty* NewProp_PassiveSoundMixModifiers = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PassiveSoundMixModifiers"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(PassiveSoundMixModifiers, USoundClass), 0x0000000000000001);
				UProperty* NewProp_PassiveSoundMixModifiers_Inner = new(EC_InternalUseOnlyConstructor, NewProp_PassiveSoundMixModifiers, TEXT("PassiveSoundMixModifiers"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FPassiveSoundMixModifier());
				UProperty* NewProp_ChildClasses = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ChildClasses"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ChildClasses, USoundClass), 0x0000000000000001);
				UProperty* NewProp_ChildClasses_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ChildClasses, TEXT("ChildClasses"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_USoundClass_NoRegister());
				UProperty* NewProp_Properties = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Properties"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Properties, USoundClass), 0x0000000000000001, Z_Construct_UScriptStruct_FSoundClassProperties());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Sound/SoundClass.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundClass.h"));
				MetaData->SetValue(NewProp_ParentClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundClass.h"));
				MetaData->SetValue(NewProp_PassiveSoundMixModifiers, TEXT("Category"), TEXT("SoundClass"));
				MetaData->SetValue(NewProp_PassiveSoundMixModifiers, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundClass.h"));
				MetaData->SetValue(NewProp_PassiveSoundMixModifiers, TEXT("ToolTip"), TEXT("SoundMix Modifiers to activate automatically when a sound of this class is playing."));
				MetaData->SetValue(NewProp_ChildClasses, TEXT("Category"), TEXT("SoundClass"));
				MetaData->SetValue(NewProp_ChildClasses, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundClass.h"));
				MetaData->SetValue(NewProp_Properties, TEXT("Category"), TEXT("SoundClass"));
				MetaData->SetValue(NewProp_Properties, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundClass.h"));
				MetaData->SetValue(NewProp_Properties, TEXT("ToolTip"), TEXT("Configurable properties like volume and priority."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USoundClass(Z_Construct_UClass_USoundClass, TEXT("USoundClass"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(USoundClass);
	UScriptStruct* Z_Construct_UScriptStruct_FSoundClassAdjuster()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FSoundClassAdjuster_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("SoundClassAdjuster"), sizeof(FSoundClassAdjuster), Get_Z_Construct_UScriptStruct_FSoundClassAdjuster_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SoundClassAdjuster"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FSoundClassAdjuster>, EStructFlags(0x00000001));
			UProperty* NewProp_VoiceCenterChannelVolumeAdjuster = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("VoiceCenterChannelVolumeAdjuster"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(VoiceCenterChannelVolumeAdjuster, FSoundClassAdjuster), 0x0000000000000001);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bApplyToChildren, FSoundClassAdjuster, uint8);
			UProperty* NewProp_bApplyToChildren = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bApplyToChildren"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bApplyToChildren, FSoundClassAdjuster), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bApplyToChildren, FSoundClassAdjuster), sizeof(uint8), false);
			UProperty* NewProp_PitchAdjuster = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PitchAdjuster"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(PitchAdjuster, FSoundClassAdjuster), 0x0000000000000001);
			UProperty* NewProp_VolumeAdjuster = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("VolumeAdjuster"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(VolumeAdjuster, FSoundClassAdjuster), 0x0000000000000001);
			UProperty* NewProp_SoundClassObject = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SoundClassObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(SoundClassObject, FSoundClassAdjuster), 0x0000000000000001, Z_Construct_UClass_USoundClass_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundMix.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Elements of data for sound group volume control"));
			MetaData->SetValue(NewProp_VoiceCenterChannelVolumeAdjuster, TEXT("Category"), TEXT("SoundClassAdjuster"));
			MetaData->SetValue(NewProp_VoiceCenterChannelVolumeAdjuster, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundMix.h"));
			MetaData->SetValue(NewProp_VoiceCenterChannelVolumeAdjuster, TEXT("ToolTip"), TEXT("A multiplier applied to VoiceCenterChannelVolume."));
			MetaData->SetValue(NewProp_bApplyToChildren, TEXT("Category"), TEXT("SoundClassAdjuster"));
			MetaData->SetValue(NewProp_bApplyToChildren, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundMix.h"));
			MetaData->SetValue(NewProp_bApplyToChildren, TEXT("ToolTip"), TEXT("Set to true to apply this adjuster to all children of the sound class."));
			MetaData->SetValue(NewProp_PitchAdjuster, TEXT("Category"), TEXT("SoundClassAdjuster"));
			MetaData->SetValue(NewProp_PitchAdjuster, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundMix.h"));
			MetaData->SetValue(NewProp_PitchAdjuster, TEXT("ToolTip"), TEXT("A multiplier applied to the pitch."));
			MetaData->SetValue(NewProp_VolumeAdjuster, TEXT("Category"), TEXT("SoundClassAdjuster"));
			MetaData->SetValue(NewProp_VolumeAdjuster, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundMix.h"));
			MetaData->SetValue(NewProp_VolumeAdjuster, TEXT("ToolTip"), TEXT("A multiplier applied to the volume."));
			MetaData->SetValue(NewProp_SoundClassObject, TEXT("Category"), TEXT("SoundClassAdjuster"));
			MetaData->SetValue(NewProp_SoundClassObject, TEXT("DisplayName"), TEXT("Sound Class"));
			MetaData->SetValue(NewProp_SoundClassObject, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundMix.h"));
			MetaData->SetValue(NewProp_SoundClassObject, TEXT("ToolTip"), TEXT("The sound class this adjuster affects."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FSoundClassAdjuster_CRC() { return 4065555859U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAudioEQEffect()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FAudioEQEffect_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("AudioEQEffect"), sizeof(FAudioEQEffect), Get_Z_Construct_UScriptStruct_FAudioEQEffect_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AudioEQEffect"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FAudioEQEffect>, EStructFlags(0x00000001));
			UProperty* NewProp_LFGain = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LFGain"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(LFGain, FAudioEQEffect), 0x0000000000000001);
			UProperty* NewProp_LFFrequency = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LFFrequency"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(LFFrequency, FAudioEQEffect), 0x0000000000000001);
			UProperty* NewProp_MFGain = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MFGain"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MFGain, FAudioEQEffect), 0x0000000000000001);
			UProperty* NewProp_MFBandwidth = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MFBandwidth"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MFBandwidth, FAudioEQEffect), 0x0000000000000001);
			UProperty* NewProp_MFCutoffFrequency = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MFCutoffFrequency"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MFCutoffFrequency, FAudioEQEffect), 0x0000000000000001);
			UProperty* NewProp_HFGain = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("HFGain"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(HFGain, FAudioEQEffect), 0x0000000000000001);
			UProperty* NewProp_HFFrequency = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("HFFrequency"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(HFFrequency, FAudioEQEffect), 0x0000000000000001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundMix.h"));
			MetaData->SetValue(NewProp_LFGain, TEXT("Category"), TEXT("LowPass"));
			MetaData->SetValue(NewProp_LFGain, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundMix.h"));
			MetaData->SetValue(NewProp_LFGain, TEXT("ToolTip"), TEXT("Low frequency filter gain - 0.0 is silent, 1.0 is full volume."));
			MetaData->SetValue(NewProp_LFFrequency, TEXT("Category"), TEXT("LowPass"));
			MetaData->SetValue(NewProp_LFFrequency, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundMix.h"));
			MetaData->SetValue(NewProp_LFFrequency, TEXT("ToolTip"), TEXT("Low frequency filter cutoff frequency (Hz)"));
			MetaData->SetValue(NewProp_MFGain, TEXT("Category"), TEXT("BandPass"));
			MetaData->SetValue(NewProp_MFGain, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundMix.h"));
			MetaData->SetValue(NewProp_MFGain, TEXT("ToolTip"), TEXT("Middle (band) frequency filter gain - 0.0 is silent, 1.0 is full volume."));
			MetaData->SetValue(NewProp_MFBandwidth, TEXT("Category"), TEXT("BandPass"));
			MetaData->SetValue(NewProp_MFBandwidth, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundMix.h"));
			MetaData->SetValue(NewProp_MFBandwidth, TEXT("ToolTip"), TEXT("Middle (band) frequency filter bandwidth frequency (Hz) - Range (0.1 to 2.0)."));
			MetaData->SetValue(NewProp_MFCutoffFrequency, TEXT("Category"), TEXT("BandPass"));
			MetaData->SetValue(NewProp_MFCutoffFrequency, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundMix.h"));
			MetaData->SetValue(NewProp_MFCutoffFrequency, TEXT("ToolTip"), TEXT("Middle (band) frequency filter cutoff frequency (Hz)."));
			MetaData->SetValue(NewProp_HFGain, TEXT("Category"), TEXT("HighPass"));
			MetaData->SetValue(NewProp_HFGain, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundMix.h"));
			MetaData->SetValue(NewProp_HFGain, TEXT("ToolTip"), TEXT("High frequency gain - 0.0 is silent, 1.0 is full volume."));
			MetaData->SetValue(NewProp_HFFrequency, TEXT("Category"), TEXT("HighPass"));
			MetaData->SetValue(NewProp_HFFrequency, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundMix.h"));
			MetaData->SetValue(NewProp_HFFrequency, TEXT("ToolTip"), TEXT("High frequency filter cutoff frequency (Hz)"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAudioEQEffect_CRC() { return 1282098203U; }
	UClass* Z_Construct_UClass_USoundMix_NoRegister()
	{
		return USoundMix::StaticClass();
	}
	UClass* Z_Construct_UClass_USoundMix()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = USoundMix::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_FadeOutTime = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FadeOutTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(FadeOutTime, USoundMix), 0x0000000000000001);
				UProperty* NewProp_Duration = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Duration"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Duration, USoundMix), 0x0000000000000001);
				UProperty* NewProp_FadeInTime = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FadeInTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(FadeInTime, USoundMix), 0x0000000000000001);
				UProperty* NewProp_InitialDelay = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InitialDelay"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InitialDelay, USoundMix), 0x0000000000000001);
				UProperty* NewProp_SoundClassEffects = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SoundClassEffects"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(SoundClassEffects, USoundMix), 0x0000000000000001);
				UProperty* NewProp_SoundClassEffects_Inner = new(EC_InternalUseOnlyConstructor, NewProp_SoundClassEffects, TEXT("SoundClassEffects"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FSoundClassAdjuster());
				UProperty* NewProp_EQSettings = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EQSettings"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(EQSettings, USoundMix), 0x0000000000000001, Z_Construct_UScriptStruct_FAudioEQEffect());
				UProperty* NewProp_EQPriority = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EQPriority"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(EQPriority, USoundMix), 0x0000000000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bApplyEQ, USoundMix, uint8);
				UProperty* NewProp_bApplyEQ = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bApplyEQ"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bApplyEQ, USoundMix), 0x0000010000000001, CPP_BOOL_PROPERTY_BITMASK(bApplyEQ, USoundMix), sizeof(uint8), false);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Sound/SoundMix.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundMix.h"));
				MetaData->SetValue(NewProp_FadeOutTime, TEXT("Category"), TEXT("SoundMix"));
				MetaData->SetValue(NewProp_FadeOutTime, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundMix.h"));
				MetaData->SetValue(NewProp_FadeOutTime, TEXT("ToolTip"), TEXT("Time taken in seconds for the mix to fade out."));
				MetaData->SetValue(NewProp_Duration, TEXT("Category"), TEXT("SoundMix"));
				MetaData->SetValue(NewProp_Duration, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundMix.h"));
				MetaData->SetValue(NewProp_Duration, TEXT("ToolTip"), TEXT("Duration of mix, negative means it will be applied until another mix is set."));
				MetaData->SetValue(NewProp_FadeInTime, TEXT("Category"), TEXT("SoundMix"));
				MetaData->SetValue(NewProp_FadeInTime, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundMix.h"));
				MetaData->SetValue(NewProp_FadeInTime, TEXT("ToolTip"), TEXT("Time taken in seconds for the mix to fade in."));
				MetaData->SetValue(NewProp_InitialDelay, TEXT("Category"), TEXT("SoundMix"));
				MetaData->SetValue(NewProp_InitialDelay, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundMix.h"));
				MetaData->SetValue(NewProp_InitialDelay, TEXT("ToolTip"), TEXT("Initial delay in seconds before the the mix is applied."));
				MetaData->SetValue(NewProp_SoundClassEffects, TEXT("Category"), TEXT("SoundClasses"));
				MetaData->SetValue(NewProp_SoundClassEffects, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundMix.h"));
				MetaData->SetValue(NewProp_SoundClassEffects, TEXT("ToolTip"), TEXT("Array of changes to be applied to groups."));
				MetaData->SetValue(NewProp_EQSettings, TEXT("Category"), TEXT("EQ"));
				MetaData->SetValue(NewProp_EQSettings, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundMix.h"));
				MetaData->SetValue(NewProp_EQPriority, TEXT("Category"), TEXT("EQ"));
				MetaData->SetValue(NewProp_EQPriority, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundMix.h"));
				MetaData->SetValue(NewProp_bApplyEQ, TEXT("Category"), TEXT("EQ"));
				MetaData->SetValue(NewProp_bApplyEQ, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundMix.h"));
				MetaData->SetValue(NewProp_bApplyEQ, TEXT("ToolTip"), TEXT("Whether to apply the EQ effect"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USoundMix(Z_Construct_UClass_USoundMix, TEXT("USoundMix"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(USoundMix);
	UClass* Z_Construct_UClass_USoundNode_NoRegister()
	{
		return USoundNode::StaticClass();
	}
	UClass* Z_Construct_UClass_USoundNode()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = USoundNode::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20101081;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_GraphNode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GraphNode"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(GraphNode, USoundNode), 0x0000000800000000, Z_Construct_UClass_UEdGraphNode_NoRegister());
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_ChildNodes = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ChildNodes"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ChildNodes, USoundNode), 0x0000000000000000);
				UProperty* NewProp_ChildNodes_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ChildNodes, TEXT("ChildNodes"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_USoundNode_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Sound/SoundNode.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNode.h"));
				MetaData->SetValue(NewProp_GraphNode, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNode.h"));
				MetaData->SetValue(NewProp_GraphNode, TEXT("ToolTip"), TEXT("Node's Graph representation, used to get position."));
				MetaData->SetValue(NewProp_ChildNodes, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNode.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USoundNode(Z_Construct_UClass_USoundNode, TEXT("USoundNode"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(USoundNode);
	UClass* Z_Construct_UClass_USoundNodeAssetReferencer_NoRegister()
	{
		return USoundNodeAssetReferencer::StaticClass();
	}
	UClass* Z_Construct_UClass_USoundNodeAssetReferencer()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USoundNode();
			Z_Construct_UPackage_Engine();
			OuterClass = USoundNodeAssetReferencer::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20101081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Sound/SoundNodeAssetReferencer.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeAssetReferencer.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Sound node that contains a reference to the raw wave file to be played"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USoundNodeAssetReferencer(Z_Construct_UClass_USoundNodeAssetReferencer, TEXT("USoundNodeAssetReferencer"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(USoundNodeAssetReferencer);
	UClass* Z_Construct_UClass_USoundNodeWavePlayer_NoRegister()
	{
		return USoundNodeWavePlayer::StaticClass();
	}
	UClass* Z_Construct_UClass_USoundNodeWavePlayer()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USoundNodeAssetReferencer();
			Z_Construct_UPackage_Engine();
			OuterClass = USoundNodeWavePlayer::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20081080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLooping, USoundNodeWavePlayer, uint8);
				UProperty* NewProp_bLooping = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bLooping"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLooping, USoundNodeWavePlayer), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bLooping, USoundNodeWavePlayer), sizeof(uint8), false);
				UProperty* NewProp_SoundWave = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SoundWave"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(SoundWave, USoundNodeWavePlayer), 0x0000000000002000, Z_Construct_UClass_USoundWave_NoRegister());
				UProperty* NewProp_SoundWaveAssetPtr = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SoundWaveAssetPtr"), RF_Public|RF_Transient|RF_Native) UAssetObjectProperty(CPP_PROPERTY_BASE(SoundWaveAssetPtr, USoundNodeWavePlayer), 0x0004000000000001, Z_Construct_UClass_USoundWave_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Wave Player"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Sound/SoundNodeWavePlayer.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeWavePlayer.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Sound node that contains a reference to the raw wave file to be played"));
				MetaData->SetValue(NewProp_bLooping, TEXT("Category"), TEXT("WavePlayer"));
				MetaData->SetValue(NewProp_bLooping, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeWavePlayer.h"));
				MetaData->SetValue(NewProp_SoundWave, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeWavePlayer.h"));
				MetaData->SetValue(NewProp_SoundWaveAssetPtr, TEXT("Category"), TEXT("WavePlayer"));
				MetaData->SetValue(NewProp_SoundWaveAssetPtr, TEXT("DisplayName"), TEXT("Sound Wave"));
				MetaData->SetValue(NewProp_SoundWaveAssetPtr, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeWavePlayer.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USoundNodeWavePlayer(Z_Construct_UClass_USoundNodeWavePlayer, TEXT("USoundNodeWavePlayer"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(USoundNodeWavePlayer);
	UClass* Z_Construct_UClass_USoundNodeAttenuation_NoRegister()
	{
		return USoundNodeAttenuation::StaticClass();
	}
	UClass* Z_Construct_UClass_USoundNodeAttenuation()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USoundNode();
			Z_Construct_UPackage_Engine();
			OuterClass = USoundNodeAttenuation::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20081080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverrideAttenuation, USoundNodeAttenuation, uint8);
				UProperty* NewProp_bOverrideAttenuation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bOverrideAttenuation"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverrideAttenuation, USoundNodeAttenuation), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bOverrideAttenuation, USoundNodeAttenuation), sizeof(uint8), false);
				UProperty* NewProp_AttenuationOverrides = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AttenuationOverrides"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(AttenuationOverrides, USoundNodeAttenuation), 0x0000000000000001, Z_Construct_UScriptStruct_FAttenuationSettings());
				UProperty* NewProp_AttenuationSettings = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AttenuationSettings"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(AttenuationSettings, USoundNodeAttenuation), 0x0000000000000001, Z_Construct_UClass_USoundAttenuation_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Attenuation"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Sound/SoundNodeAttenuation.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeAttenuation.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Defines how a sound's volume changes based on distance to the listener"));
				MetaData->SetValue(NewProp_bOverrideAttenuation, TEXT("Category"), TEXT("Attenuation"));
				MetaData->SetValue(NewProp_bOverrideAttenuation, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeAttenuation.h"));
				MetaData->SetValue(NewProp_AttenuationOverrides, TEXT("Category"), TEXT("Attenuation"));
				MetaData->SetValue(NewProp_AttenuationOverrides, TEXT("EditCondition"), TEXT("bOverrideAttenuation"));
				MetaData->SetValue(NewProp_AttenuationOverrides, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeAttenuation.h"));
				MetaData->SetValue(NewProp_AttenuationSettings, TEXT("Category"), TEXT("Attenuation"));
				MetaData->SetValue(NewProp_AttenuationSettings, TEXT("EditCondition"), TEXT("!bOverrideAttenuation"));
				MetaData->SetValue(NewProp_AttenuationSettings, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeAttenuation.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USoundNodeAttenuation(Z_Construct_UClass_USoundNodeAttenuation, TEXT("USoundNodeAttenuation"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(USoundNodeAttenuation);
	UClass* Z_Construct_UClass_USoundNodeBranch_NoRegister()
	{
		return USoundNodeBranch::StaticClass();
	}
	UClass* Z_Construct_UClass_USoundNodeBranch()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USoundNode();
			Z_Construct_UPackage_Engine();
			OuterClass = USoundNodeBranch::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20081080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_BoolParameterName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BoolParameterName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(BoolParameterName, USoundNodeBranch), 0x0000000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Branch"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Sound/SoundNodeBranch.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeBranch.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Selects a child node based on the value of a boolean parameter"));
				MetaData->SetValue(NewProp_BoolParameterName, TEXT("Category"), TEXT("Branch"));
				MetaData->SetValue(NewProp_BoolParameterName, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeBranch.h"));
				MetaData->SetValue(NewProp_BoolParameterName, TEXT("ToolTip"), TEXT("The name of the boolean parameter to use to determine which branch we should take"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USoundNodeBranch(Z_Construct_UClass_USoundNodeBranch, TEXT("USoundNodeBranch"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(USoundNodeBranch);
	UClass* Z_Construct_UClass_USoundNodeConcatenator_NoRegister()
	{
		return USoundNodeConcatenator::StaticClass();
	}
	UClass* Z_Construct_UClass_USoundNodeConcatenator()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USoundNode();
			Z_Construct_UPackage_Engine();
			OuterClass = USoundNodeConcatenator::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20081080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_InputVolume = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InputVolume"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(InputVolume, USoundNodeConcatenator), 0x0000000000000041);
				UProperty* NewProp_InputVolume_Inner = new(EC_InternalUseOnlyConstructor, NewProp_InputVolume, TEXT("InputVolume"), RF_Public|RF_Transient|RF_Native) UFloatProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Concatenator"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Sound/SoundNodeConcatenator.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeConcatenator.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Plays child nodes sequentially"));
				MetaData->SetValue(NewProp_InputVolume, TEXT("Category"), TEXT("Concatenator"));
				MetaData->SetValue(NewProp_InputVolume, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeConcatenator.h"));
				MetaData->SetValue(NewProp_InputVolume, TEXT("ToolTip"), TEXT("Volume multiplier for each input."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USoundNodeConcatenator(Z_Construct_UClass_USoundNodeConcatenator, TEXT("USoundNodeConcatenator"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(USoundNodeConcatenator);
	UClass* Z_Construct_UClass_USoundNodeDelay_NoRegister()
	{
		return USoundNodeDelay::StaticClass();
	}
	UClass* Z_Construct_UClass_USoundNodeDelay()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USoundNode();
			Z_Construct_UPackage_Engine();
			OuterClass = USoundNodeDelay::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20081080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_DelayMax = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DelayMax"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DelayMax, USoundNodeDelay), 0x0000000000000001);
				UProperty* NewProp_DelayMin = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DelayMin"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DelayMin, USoundNodeDelay), 0x0000000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Delay"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Sound/SoundNodeDelay.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeDelay.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Defines a delay"));
				MetaData->SetValue(NewProp_DelayMax, TEXT("Category"), TEXT("Delay"));
				MetaData->SetValue(NewProp_DelayMax, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeDelay.h"));
				MetaData->SetValue(NewProp_DelayMax, TEXT("ToolTip"), TEXT("The upper bound of delay time in seconds."));
				MetaData->SetValue(NewProp_DelayMin, TEXT("Category"), TEXT("Delay"));
				MetaData->SetValue(NewProp_DelayMin, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeDelay.h"));
				MetaData->SetValue(NewProp_DelayMin, TEXT("ToolTip"), TEXT("The lower bound of delay time in seconds."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USoundNodeDelay(Z_Construct_UClass_USoundNodeDelay, TEXT("USoundNodeDelay"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(USoundNodeDelay);
	UClass* Z_Construct_UClass_USoundNodeDialoguePlayer_NoRegister()
	{
		return USoundNodeDialoguePlayer::StaticClass();
	}
	UClass* Z_Construct_UClass_USoundNodeDialoguePlayer()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USoundNode();
			Z_Construct_UPackage_Engine();
			OuterClass = USoundNodeDialoguePlayer::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20081080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLooping, USoundNodeDialoguePlayer, uint8);
				UProperty* NewProp_bLooping = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bLooping"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLooping, USoundNodeDialoguePlayer), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bLooping, USoundNodeDialoguePlayer), sizeof(uint8), false);
				UProperty* NewProp_DialogueWaveParameter = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DialogueWaveParameter"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DialogueWaveParameter, USoundNodeDialoguePlayer), 0x0000000000000001, Z_Construct_UScriptStruct_FDialogueWaveParameter());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Dialogue Player"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Sound/SoundNodeDialoguePlayer.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeDialoguePlayer.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Sound node that contains a reference to the dialogue table to pull from and be played"));
				MetaData->SetValue(NewProp_bLooping, TEXT("Category"), TEXT("DialoguePlayer"));
				MetaData->SetValue(NewProp_bLooping, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeDialoguePlayer.h"));
				MetaData->SetValue(NewProp_bLooping, TEXT("ToolTip"), TEXT("Whether the dialogue line should be played looping"));
				MetaData->SetValue(NewProp_DialogueWaveParameter, TEXT("Category"), TEXT("DialoguePlayer"));
				MetaData->SetValue(NewProp_DialogueWaveParameter, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeDialoguePlayer.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USoundNodeDialoguePlayer(Z_Construct_UClass_USoundNodeDialoguePlayer, TEXT("USoundNodeDialoguePlayer"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(USoundNodeDialoguePlayer);
	UScriptStruct* Z_Construct_UScriptStruct_FDistanceDatum()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FDistanceDatum_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("DistanceDatum"), sizeof(FDistanceDatum), Get_Z_Construct_UScriptStruct_FDistanceDatum_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DistanceDatum"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FDistanceDatum>, EStructFlags(0x00000001));
			UProperty* NewProp_Volume = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Volume"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Volume, FDistanceDatum), 0x0000000000000005);
			UProperty* NewProp_FadeOutDistanceEnd = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("FadeOutDistanceEnd"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(FadeOutDistanceEnd, FDistanceDatum), 0x0000000000000005);
			UProperty* NewProp_FadeOutDistanceStart = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("FadeOutDistanceStart"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(FadeOutDistanceStart, FDistanceDatum), 0x0000000000000005);
			UProperty* NewProp_FadeInDistanceEnd = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("FadeInDistanceEnd"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(FadeInDistanceEnd, FDistanceDatum), 0x0000000000000005);
			UProperty* NewProp_FadeInDistanceStart = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("FadeInDistanceStart"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(FadeInDistanceStart, FDistanceDatum), 0x0000000000000005);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeDistanceCrossFade.h"));
			MetaData->SetValue(NewProp_Volume, TEXT("Category"), TEXT("DistanceDatum"));
			MetaData->SetValue(NewProp_Volume, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeDistanceCrossFade.h"));
			MetaData->SetValue(NewProp_Volume, TEXT("ToolTip"), TEXT("The volume for which this Input should be played."));
			MetaData->SetValue(NewProp_FadeOutDistanceEnd, TEXT("Category"), TEXT("DistanceDatum"));
			MetaData->SetValue(NewProp_FadeOutDistanceEnd, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeDistanceCrossFade.h"));
			MetaData->SetValue(NewProp_FadeOutDistanceEnd, TEXT("ToolTip"), TEXT("The distance at which this sound is no longer audible."));
			MetaData->SetValue(NewProp_FadeOutDistanceStart, TEXT("Category"), TEXT("DistanceDatum"));
			MetaData->SetValue(NewProp_FadeOutDistanceStart, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeDistanceCrossFade.h"));
			MetaData->SetValue(NewProp_FadeOutDistanceStart, TEXT("ToolTip"), TEXT("The distance at which this sound starts fading out."));
			MetaData->SetValue(NewProp_FadeInDistanceEnd, TEXT("Category"), TEXT("DistanceDatum"));
			MetaData->SetValue(NewProp_FadeInDistanceEnd, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeDistanceCrossFade.h"));
			MetaData->SetValue(NewProp_FadeInDistanceEnd, TEXT("ToolTip"), TEXT("The distance at which this sound has faded in completely."));
			MetaData->SetValue(NewProp_FadeInDistanceStart, TEXT("Category"), TEXT("DistanceDatum"));
			MetaData->SetValue(NewProp_FadeInDistanceStart, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeDistanceCrossFade.h"));
			MetaData->SetValue(NewProp_FadeInDistanceStart, TEXT("ToolTip"), TEXT("The FadeInDistance at which to start hearing this sound.\n       * If you want to hear the sound up close then setting this to 0 might be a good option."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FDistanceDatum_CRC() { return 990299213U; }
	UClass* Z_Construct_UClass_USoundNodeDistanceCrossFade_NoRegister()
	{
		return USoundNodeDistanceCrossFade::StaticClass();
	}
	UClass* Z_Construct_UClass_USoundNodeDistanceCrossFade()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USoundNode();
			Z_Construct_UPackage_Engine();
			OuterClass = USoundNodeDistanceCrossFade::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20081080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_CrossFadeInput = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CrossFadeInput"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(CrossFadeInput, USoundNodeDistanceCrossFade), 0x0000000000000049);
				UProperty* NewProp_CrossFadeInput_Inner = new(EC_InternalUseOnlyConstructor, NewProp_CrossFadeInput, TEXT("CrossFadeInput"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000008, Z_Construct_UScriptStruct_FDistanceDatum());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Crossfade by Distance"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Sound/SoundNodeDistanceCrossFade.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeDistanceCrossFade.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("SoundNodeDistanceCrossFade\n\nThis node's purpose is to play different sounds based on the distance to the listener.\nThe node mixes between the N different sounds which are valid for the distance.  One should\nthink of a SoundNodeDistanceCrossFade as Mixer node which determines the set of nodes to\n\"mix in\" based on their distance to the sound.\n\nExample:\nYou have a gun that plays a fire sound.  At long distances you want a different sound than\nif you were up close.   So you use a SoundNodeDistanceCrossFade which will calculate the distance\na listener is from the sound and play either:  short distance, long distance, mix of short and long sounds.\n\nA SoundNodeDistanceCrossFade differs from an SoundNodeAttenuation in that any sound is only going\nbe played if it is within the MinRadius and MaxRadius.  So if you want the short distance sound to be\nheard by people close to it, the MinRadius should probably be 0\n\nThe volume curve for a SoundNodeDistanceCrossFade will look like this:\n\n                         Volume (of the input)\n   FadeInDistance.Max --> _________________ <-- FadeOutDistance.Min\n                         /                 \\\n                        /                   \\\n                       /                     \\\nFadeInDistance.Min -->/                       \\ <-- FadeOutDistance.Max"));
				MetaData->SetValue(NewProp_CrossFadeInput, TEXT("Category"), TEXT("CrossFade"));
				MetaData->SetValue(NewProp_CrossFadeInput, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeDistanceCrossFade.h"));
				MetaData->SetValue(NewProp_CrossFadeInput, TEXT("ToolTip"), TEXT("Each input needs to have the correct data filled in so the SoundNodeDistanceCrossFade is able\nto determine which sounds to play"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USoundNodeDistanceCrossFade(Z_Construct_UClass_USoundNodeDistanceCrossFade, TEXT("USoundNodeDistanceCrossFade"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(USoundNodeDistanceCrossFade);
	UClass* Z_Construct_UClass_USoundNodeParamCrossFade_NoRegister()
	{
		return USoundNodeParamCrossFade::StaticClass();
	}
	UClass* Z_Construct_UClass_USoundNodeParamCrossFade()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USoundNodeDistanceCrossFade();
			Z_Construct_UPackage_Engine();
			OuterClass = USoundNodeParamCrossFade::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20081080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ParamName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ParamName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(ParamName, USoundNodeParamCrossFade), 0x0000000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Crossfade by Param"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Sound/SoundNodeParamCrossFade.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeParamCrossFade.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Crossfades between different sounds based on a parameter"));
				MetaData->SetValue(NewProp_ParamName, TEXT("Category"), TEXT("CrossFade"));
				MetaData->SetValue(NewProp_ParamName, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeParamCrossFade.h"));
				MetaData->SetValue(NewProp_ParamName, TEXT("ToolTip"), TEXT("Parameter controlling cross fades."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USoundNodeParamCrossFade(Z_Construct_UClass_USoundNodeParamCrossFade, TEXT("USoundNodeParamCrossFade"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(USoundNodeParamCrossFade);
	UClass* Z_Construct_UClass_USoundNodeDoppler_NoRegister()
	{
		return USoundNodeDoppler::StaticClass();
	}
	UClass* Z_Construct_UClass_USoundNodeDoppler()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USoundNode();
			Z_Construct_UPackage_Engine();
			OuterClass = USoundNodeDoppler::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20001080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_DopplerIntensity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DopplerIntensity"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DopplerIntensity, USoundNodeDoppler), 0x0000000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Doppler"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Sound/SoundNodeDoppler.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeDoppler.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Computes doppler pitch shift"));
				MetaData->SetValue(NewProp_DopplerIntensity, TEXT("Category"), TEXT("Doppler"));
				MetaData->SetValue(NewProp_DopplerIntensity, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeDoppler.h"));
				MetaData->SetValue(NewProp_DopplerIntensity, TEXT("ToolTip"), TEXT("How much to scale the doppler shift (1.0 is normal)."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USoundNodeDoppler(Z_Construct_UClass_USoundNodeDoppler, TEXT("USoundNodeDoppler"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(USoundNodeDoppler);
	UClass* Z_Construct_UClass_USoundNodeEnveloper_NoRegister()
	{
		return USoundNodeEnveloper::StaticClass();
	}
	UClass* Z_Construct_UClass_USoundNodeEnveloper()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USoundNode();
			Z_Construct_UPackage_Engine();
			OuterClass = USoundNodeEnveloper::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_VolumeMax = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VolumeMax"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(VolumeMax, USoundNodeEnveloper), 0x0000000000000001);
				UProperty* NewProp_VolumeMin = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VolumeMin"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(VolumeMin, USoundNodeEnveloper), 0x0000000000000001);
				UProperty* NewProp_PitchMax = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PitchMax"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(PitchMax, USoundNodeEnveloper), 0x0000000000000001);
				UProperty* NewProp_PitchMin = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PitchMin"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(PitchMin, USoundNodeEnveloper), 0x0000000000000001);
				UProperty* NewProp_PitchCurve = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PitchCurve"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PitchCurve, USoundNodeEnveloper), 0x0000000000000001, Z_Construct_UScriptStruct_FRuntimeFloatCurve());
				UProperty* NewProp_VolumeCurve = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VolumeCurve"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(VolumeCurve, USoundNodeEnveloper), 0x0000000000000001, Z_Construct_UScriptStruct_FRuntimeFloatCurve());
				UProperty* NewProp_PitchInterpCurve = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PitchInterpCurve"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(PitchInterpCurve_DEPRECATED, USoundNodeEnveloper), 0x0000000020080008, Z_Construct_UClass_UDistributionFloatConstantCurve_NoRegister());
				UProperty* NewProp_VolumeInterpCurve = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VolumeInterpCurve"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(VolumeInterpCurve_DEPRECATED, USoundNodeEnveloper), 0x0000000020080008, Z_Construct_UClass_UDistributionFloatConstantCurve_NoRegister());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLoop, USoundNodeEnveloper, uint8);
				UProperty* NewProp_bLoop = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bLoop"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLoop, USoundNodeEnveloper), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bLoop, USoundNodeEnveloper), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLoopIndefinitely, USoundNodeEnveloper, uint8);
				UProperty* NewProp_bLoopIndefinitely = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bLoopIndefinitely"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLoopIndefinitely, USoundNodeEnveloper), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bLoopIndefinitely, USoundNodeEnveloper), sizeof(uint8), false);
				UProperty* NewProp_LoopCount = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LoopCount"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(LoopCount, USoundNodeEnveloper), 0x0000000000000001);
				UProperty* NewProp_DurationAfterLoop = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DurationAfterLoop"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DurationAfterLoop, USoundNodeEnveloper), 0x0000000000000001);
				UProperty* NewProp_LoopEnd = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LoopEnd"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(LoopEnd, USoundNodeEnveloper), 0x0000000000000001);
				UProperty* NewProp_LoopStart = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LoopStart"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(LoopStart, USoundNodeEnveloper), 0x0000000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Enveloper"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Sound/SoundNodeEnveloper.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeEnveloper.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Allows manipulation of volume and pitch over a set time period"));
				MetaData->SetValue(NewProp_VolumeMax, TEXT("Category"), TEXT("Modulation"));
				MetaData->SetValue(NewProp_VolumeMax, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeEnveloper.h"));
				MetaData->SetValue(NewProp_VolumeMax, TEXT("ToolTip"), TEXT("The upper bound of volume (1.0 is no change)"));
				MetaData->SetValue(NewProp_VolumeMin, TEXT("Category"), TEXT("Modulation"));
				MetaData->SetValue(NewProp_VolumeMin, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeEnveloper.h"));
				MetaData->SetValue(NewProp_VolumeMin, TEXT("ToolTip"), TEXT("The lower bound of volume (1.0 is no change)"));
				MetaData->SetValue(NewProp_PitchMax, TEXT("Category"), TEXT("Modulation"));
				MetaData->SetValue(NewProp_PitchMax, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeEnveloper.h"));
				MetaData->SetValue(NewProp_PitchMax, TEXT("ToolTip"), TEXT("The upper bound of pitch (1.0 is no change)"));
				MetaData->SetValue(NewProp_PitchMin, TEXT("Category"), TEXT("Modulation"));
				MetaData->SetValue(NewProp_PitchMin, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeEnveloper.h"));
				MetaData->SetValue(NewProp_PitchMin, TEXT("ToolTip"), TEXT("The lower bound of pitch (1.0 is no change)"));
				MetaData->SetValue(NewProp_PitchCurve, TEXT("Category"), TEXT("Envelope"));
				MetaData->SetValue(NewProp_PitchCurve, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeEnveloper.h"));
				MetaData->SetValue(NewProp_PitchCurve, TEXT("ToolTip"), TEXT("The distribution defining the pitch envelope."));
				MetaData->SetValue(NewProp_VolumeCurve, TEXT("Category"), TEXT("Envelope"));
				MetaData->SetValue(NewProp_VolumeCurve, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeEnveloper.h"));
				MetaData->SetValue(NewProp_VolumeCurve, TEXT("ToolTip"), TEXT("The distribution defining the volume envelope."));
				MetaData->SetValue(NewProp_PitchInterpCurve, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_PitchInterpCurve, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeEnveloper.h"));
				MetaData->SetValue(NewProp_VolumeInterpCurve, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_VolumeInterpCurve, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeEnveloper.h"));
				MetaData->SetValue(NewProp_bLoop, TEXT("Category"), TEXT("Looping"));
				MetaData->SetValue(NewProp_bLoop, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeEnveloper.h"));
				MetaData->SetValue(NewProp_bLoop, TEXT("ToolTip"), TEXT("If enabled, the envelope will loop using the loop settings."));
				MetaData->SetValue(NewProp_bLoopIndefinitely, TEXT("Category"), TEXT("Looping"));
				MetaData->SetValue(NewProp_bLoopIndefinitely, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeEnveloper.h"));
				MetaData->SetValue(NewProp_bLoopIndefinitely, TEXT("ToolTip"), TEXT("If enabled, the envelope will continue to loop indefenitely regardless of the Loop Count value."));
				MetaData->SetValue(NewProp_LoopCount, TEXT("Category"), TEXT("Looping"));
				MetaData->SetValue(NewProp_LoopCount, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeEnveloper.h"));
				MetaData->SetValue(NewProp_LoopCount, TEXT("ToolTip"), TEXT("The number of times the envelope should loop if looping is enabled and the envelope is not set to loop indefinitely."));
				MetaData->SetValue(NewProp_DurationAfterLoop, TEXT("Category"), TEXT("Looping"));
				MetaData->SetValue(NewProp_DurationAfterLoop, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeEnveloper.h"));
				MetaData->SetValue(NewProp_DurationAfterLoop, TEXT("ToolTip"), TEXT("The time in seconds it takes the evelope to fade out after the last loop is completed."));
				MetaData->SetValue(NewProp_LoopEnd, TEXT("Category"), TEXT("Looping"));
				MetaData->SetValue(NewProp_LoopEnd, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeEnveloper.h"));
				MetaData->SetValue(NewProp_LoopEnd, TEXT("ToolTip"), TEXT("The time in seconds where the envelope's loop ends."));
				MetaData->SetValue(NewProp_LoopStart, TEXT("Category"), TEXT("Looping"));
				MetaData->SetValue(NewProp_LoopStart, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeEnveloper.h"));
				MetaData->SetValue(NewProp_LoopStart, TEXT("ToolTip"), TEXT("The time in seconds where the envelope's loop begins."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USoundNodeEnveloper(Z_Construct_UClass_USoundNodeEnveloper, TEXT("USoundNodeEnveloper"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(USoundNodeEnveloper);
	UClass* Z_Construct_UClass_USoundNodeGroupControl_NoRegister()
	{
		return USoundNodeGroupControl::StaticClass();
	}
	UClass* Z_Construct_UClass_USoundNodeGroupControl()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USoundNode();
			Z_Construct_UPackage_Engine();
			OuterClass = USoundNodeGroupControl::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20081080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_GroupSizes = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GroupSizes"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(GroupSizes, USoundNodeGroupControl), 0x0000000000000041);
				UProperty* NewProp_GroupSizes_Inner = new(EC_InternalUseOnlyConstructor, NewProp_GroupSizes, TEXT("GroupSizes"), RF_Public|RF_Transient|RF_Native) UIntProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Group Control"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Sound/SoundNodeGroupControl.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeGroupControl.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Plays different sounds depending on the number of active sounds\nAny time a new sound is played, the first group that has an available slot will be chosen"));
				MetaData->SetValue(NewProp_GroupSizes, TEXT("Category"), TEXT("GroupControl"));
				MetaData->SetValue(NewProp_GroupSizes, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeGroupControl.h"));
				MetaData->SetValue(NewProp_GroupSizes, TEXT("ToolTip"), TEXT("How many active sounds are allowed for each group"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USoundNodeGroupControl(Z_Construct_UClass_USoundNodeGroupControl, TEXT("USoundNodeGroupControl"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(USoundNodeGroupControl);
	UClass* Z_Construct_UClass_USoundNodeLooping_NoRegister()
	{
		return USoundNodeLooping::StaticClass();
	}
	UClass* Z_Construct_UClass_USoundNodeLooping()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USoundNode();
			Z_Construct_UPackage_Engine();
			OuterClass = USoundNodeLooping::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20081080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLoopIndefinitely, USoundNodeLooping, uint8);
				UProperty* NewProp_bLoopIndefinitely = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bLoopIndefinitely"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLoopIndefinitely, USoundNodeLooping), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bLoopIndefinitely, USoundNodeLooping), sizeof(uint8), false);
				UProperty* NewProp_LoopCount = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LoopCount"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(LoopCount, USoundNodeLooping), 0x0000000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Looping"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Sound/SoundNodeLooping.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeLooping.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Defines how a sound loops; either indefinitely, or for a set number of times"));
				MetaData->SetValue(NewProp_bLoopIndefinitely, TEXT("Category"), TEXT("Looping"));
				MetaData->SetValue(NewProp_bLoopIndefinitely, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeLooping.h"));
				MetaData->SetValue(NewProp_bLoopIndefinitely, TEXT("ToolTip"), TEXT("If enabled, the node will continue to loop indefinitely regardless of the Loop Count value."));
				MetaData->SetValue(NewProp_LoopCount, TEXT("Category"), TEXT("Looping"));
				MetaData->SetValue(NewProp_LoopCount, TEXT("ClampMin"), TEXT("1"));
				MetaData->SetValue(NewProp_LoopCount, TEXT("EditCondition"), TEXT("!bLoopIndefinitely"));
				MetaData->SetValue(NewProp_LoopCount, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeLooping.h"));
				MetaData->SetValue(NewProp_LoopCount, TEXT("ToolTip"), TEXT("The amount of times to loop"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USoundNodeLooping(Z_Construct_UClass_USoundNodeLooping, TEXT("USoundNodeLooping"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(USoundNodeLooping);
	UClass* Z_Construct_UClass_USoundNodeMature_NoRegister()
	{
		return USoundNodeMature::StaticClass();
	}
	UClass* Z_Construct_UClass_USoundNodeMature()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USoundNode();
			Z_Construct_UPackage_Engine();
			OuterClass = USoundNodeMature::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20081080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Mature"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Sound/SoundNodeMature.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeMature.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("This SoundNode uses UEngine::bAllowMatureLanguage to determine whether child nodes\nthat have USoundWave::bMature=true should be played."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USoundNodeMature(Z_Construct_UClass_USoundNodeMature, TEXT("USoundNodeMature"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(USoundNodeMature);
	UClass* Z_Construct_UClass_USoundNodeMixer_NoRegister()
	{
		return USoundNodeMixer::StaticClass();
	}
	UClass* Z_Construct_UClass_USoundNodeMixer()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USoundNode();
			Z_Construct_UPackage_Engine();
			OuterClass = USoundNodeMixer::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20081080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_InputVolume = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InputVolume"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(InputVolume, USoundNodeMixer), 0x0000000000000049);
				UProperty* NewProp_InputVolume_Inner = new(EC_InternalUseOnlyConstructor, NewProp_InputVolume, TEXT("InputVolume"), RF_Public|RF_Transient|RF_Native) UFloatProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000008);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Mixer"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Sound/SoundNodeMixer.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeMixer.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Defines how concurrent sounds are mixed together"));
				MetaData->SetValue(NewProp_InputVolume, TEXT("Category"), TEXT("Mixer"));
				MetaData->SetValue(NewProp_InputVolume, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeMixer.h"));
				MetaData->SetValue(NewProp_InputVolume, TEXT("ToolTip"), TEXT("A volume for each input.  Automatically sized."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USoundNodeMixer(Z_Construct_UClass_USoundNodeMixer, TEXT("USoundNodeMixer"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(USoundNodeMixer);
	UClass* Z_Construct_UClass_USoundNodeModulator_NoRegister()
	{
		return USoundNodeModulator::StaticClass();
	}
	UClass* Z_Construct_UClass_USoundNodeModulator()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USoundNode();
			Z_Construct_UPackage_Engine();
			OuterClass = USoundNodeModulator::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20081080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_VolumeMax = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VolumeMax"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(VolumeMax, USoundNodeModulator), 0x0000000000000001);
				UProperty* NewProp_VolumeMin = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VolumeMin"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(VolumeMin, USoundNodeModulator), 0x0000000000000001);
				UProperty* NewProp_PitchMax = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PitchMax"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(PitchMax, USoundNodeModulator), 0x0000000000000001);
				UProperty* NewProp_PitchMin = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PitchMin"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(PitchMin, USoundNodeModulator), 0x0000000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Modulator"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Sound/SoundNodeModulator.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeModulator.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Defines a random volume and pitch modification when a sound starts"));
				MetaData->SetValue(NewProp_VolumeMax, TEXT("Category"), TEXT("Modulation"));
				MetaData->SetValue(NewProp_VolumeMax, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeModulator.h"));
				MetaData->SetValue(NewProp_VolumeMax, TEXT("ToolTip"), TEXT("The upper bound of volume (1.0 is no change)."));
				MetaData->SetValue(NewProp_VolumeMin, TEXT("Category"), TEXT("Modulation"));
				MetaData->SetValue(NewProp_VolumeMin, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeModulator.h"));
				MetaData->SetValue(NewProp_VolumeMin, TEXT("ToolTip"), TEXT("The lower bound of volume (1.0 is no change)."));
				MetaData->SetValue(NewProp_PitchMax, TEXT("Category"), TEXT("Modulation"));
				MetaData->SetValue(NewProp_PitchMax, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeModulator.h"));
				MetaData->SetValue(NewProp_PitchMax, TEXT("ToolTip"), TEXT("The upper bound of pitch (1.0 is no change)."));
				MetaData->SetValue(NewProp_PitchMin, TEXT("Category"), TEXT("Modulation"));
				MetaData->SetValue(NewProp_PitchMin, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeModulator.h"));
				MetaData->SetValue(NewProp_PitchMin, TEXT("ToolTip"), TEXT("The lower bound of pitch (1.0 is no change)."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USoundNodeModulator(Z_Construct_UClass_USoundNodeModulator, TEXT("USoundNodeModulator"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(USoundNodeModulator);
	UEnum* Z_Construct_UEnum_Engine_ModulationParamMode()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_ModulationParamMode_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ModulationParamMode"), 0, Get_Z_Construct_UEnum_Engine_ModulationParamMode_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ModulationParamMode"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("MPM_Normal")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("MPM_Abs")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("MPM_Direct")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("MPM_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeModulatorContinuous.h"));
			MetaData->SetValue(ReturnEnum, TEXT("MPM_Abs.DisplayName"), TEXT("Absolute"));
			MetaData->SetValue(ReturnEnum, TEXT("MPM_Abs.Tooltip"), TEXT("Same as Normal except that the input value is treated as an absolute value"));
			MetaData->SetValue(ReturnEnum, TEXT("MPM_Direct.DisplayName"), TEXT("Direct"));
			MetaData->SetValue(ReturnEnum, TEXT("MPM_Direct.Tooltip"), TEXT("Use the input value directly without scaling or reference to Min or Max input or output values"));
			MetaData->SetValue(ReturnEnum, TEXT("MPM_Normal.DisplayName"), TEXT("Normal"));
			MetaData->SetValue(ReturnEnum, TEXT("MPM_Normal.Tooltip"), TEXT("Clamps input value to the range (MinInput, MaxInput) then maps to the range (MinOutput, MaxOutput)"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_ModulationParamMode_CRC() { return 3369985235U; }
	UScriptStruct* Z_Construct_UScriptStruct_FModulatorContinuousParams()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FModulatorContinuousParams_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("ModulatorContinuousParams"), sizeof(FModulatorContinuousParams), Get_Z_Construct_UScriptStruct_FModulatorContinuousParams_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ModulatorContinuousParams"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FModulatorContinuousParams>, EStructFlags(0x00000001));
			UProperty* NewProp_ParamMode = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ParamMode"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(ParamMode, FModulatorContinuousParams), 0x0000000000000001, Z_Construct_UEnum_Engine_ModulationParamMode());
			UProperty* NewProp_MaxOutput = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MaxOutput"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MaxOutput, FModulatorContinuousParams), 0x0000000000000001);
			UProperty* NewProp_MinOutput = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MinOutput"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MinOutput, FModulatorContinuousParams), 0x0000000000000001);
			UProperty* NewProp_MaxInput = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MaxInput"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MaxInput, FModulatorContinuousParams), 0x0000000000000001);
			UProperty* NewProp_MinInput = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MinInput"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MinInput, FModulatorContinuousParams), 0x0000000000000001);
			UProperty* NewProp_Default = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Default"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Default, FModulatorContinuousParams), 0x0000000000000001);
			UProperty* NewProp_ParameterName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ParameterName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(ParameterName, FModulatorContinuousParams), 0x0000000000000001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeModulatorContinuous.h"));
			MetaData->SetValue(NewProp_ParamMode, TEXT("Category"), TEXT("ModulatorContinousParameters"));
			MetaData->SetValue(NewProp_ParamMode, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeModulatorContinuous.h"));
			MetaData->SetValue(NewProp_ParamMode, TEXT("ToolTip"), TEXT("The mode with which to treat the input value"));
			MetaData->SetValue(NewProp_MaxOutput, TEXT("Category"), TEXT("ModulatorContinousParameters"));
			MetaData->SetValue(NewProp_MaxOutput, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeModulatorContinuous.h"));
			MetaData->SetValue(NewProp_MaxOutput, TEXT("ToolTip"), TEXT("The maximum output value. The input value will be scaled from the range [MinInput, MaxInput] to [MinOut, MaxOutput]"));
			MetaData->SetValue(NewProp_MinOutput, TEXT("Category"), TEXT("ModulatorContinousParameters"));
			MetaData->SetValue(NewProp_MinOutput, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeModulatorContinuous.h"));
			MetaData->SetValue(NewProp_MinOutput, TEXT("ToolTip"), TEXT("The minimum output value. The input value will be scaled from the range [MinInput, MaxInput] to [MinOut, MaxOutput]"));
			MetaData->SetValue(NewProp_MaxInput, TEXT("Category"), TEXT("ModulatorContinousParameters"));
			MetaData->SetValue(NewProp_MaxInput, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeModulatorContinuous.h"));
			MetaData->SetValue(NewProp_MaxInput, TEXT("ToolTip"), TEXT("The maximum input value. Values will be clamped to the [MinInput, MaxInput] range."));
			MetaData->SetValue(NewProp_MinInput, TEXT("Category"), TEXT("ModulatorContinousParameters"));
			MetaData->SetValue(NewProp_MinInput, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeModulatorContinuous.h"));
			MetaData->SetValue(NewProp_MinInput, TEXT("ToolTip"), TEXT("The minimum input value. Values will be clamped to the [MinInput, MaxInput] range."));
			MetaData->SetValue(NewProp_Default, TEXT("Category"), TEXT("ModulatorContinousParameters"));
			MetaData->SetValue(NewProp_Default, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeModulatorContinuous.h"));
			MetaData->SetValue(NewProp_Default, TEXT("ToolTip"), TEXT("The default value to be used if the parameter is not found."));
			MetaData->SetValue(NewProp_ParameterName, TEXT("Category"), TEXT("ModulatorContinousParameters"));
			MetaData->SetValue(NewProp_ParameterName, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeModulatorContinuous.h"));
			MetaData->SetValue(NewProp_ParameterName, TEXT("ToolTip"), TEXT("The name of the sound instance parameter that specifies the current value."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FModulatorContinuousParams_CRC() { return 3118009760U; }
	UClass* Z_Construct_UClass_USoundNodeModulatorContinuous_NoRegister()
	{
		return USoundNodeModulatorContinuous::StaticClass();
	}
	UClass* Z_Construct_UClass_USoundNodeModulatorContinuous()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USoundNode();
			Z_Construct_UPackage_Engine();
			OuterClass = USoundNodeModulatorContinuous::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20001080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_VolumeModulationParams = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VolumeModulationParams"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(VolumeModulationParams, USoundNodeModulatorContinuous), 0x0000000000000001, Z_Construct_UScriptStruct_FModulatorContinuousParams());
				UProperty* NewProp_PitchModulationParams = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PitchModulationParams"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PitchModulationParams, USoundNodeModulatorContinuous), 0x0000000000000001, Z_Construct_UScriptStruct_FModulatorContinuousParams());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Continuous Modulator"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Sound/SoundNodeModulatorContinuous.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeModulatorContinuous.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Allows named parameter based manipulation of pitch and volume"));
				MetaData->SetValue(NewProp_VolumeModulationParams, TEXT("Category"), TEXT("ContinuousModulator"));
				MetaData->SetValue(NewProp_VolumeModulationParams, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeModulatorContinuous.h"));
				MetaData->SetValue(NewProp_PitchModulationParams, TEXT("Category"), TEXT("ContinuousModulator"));
				MetaData->SetValue(NewProp_PitchModulationParams, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeModulatorContinuous.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USoundNodeModulatorContinuous(Z_Construct_UClass_USoundNodeModulatorContinuous, TEXT("USoundNodeModulatorContinuous"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(USoundNodeModulatorContinuous);
	UClass* Z_Construct_UClass_USoundNodeOscillator_NoRegister()
	{
		return USoundNodeOscillator::StaticClass();
	}
	UClass* Z_Construct_UClass_USoundNodeOscillator()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USoundNode();
			Z_Construct_UPackage_Engine();
			OuterClass = USoundNodeOscillator::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20001080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_CenterMax = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CenterMax"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(CenterMax, USoundNodeOscillator), 0x0000000000000001);
				UProperty* NewProp_CenterMin = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CenterMin"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(CenterMin, USoundNodeOscillator), 0x0000000000000001);
				UProperty* NewProp_OffsetMax = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OffsetMax"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(OffsetMax, USoundNodeOscillator), 0x0000000000000001);
				UProperty* NewProp_OffsetMin = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OffsetMin"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(OffsetMin, USoundNodeOscillator), 0x0000000000000001);
				UProperty* NewProp_FrequencyMax = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FrequencyMax"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(FrequencyMax, USoundNodeOscillator), 0x0000000000000001);
				UProperty* NewProp_FrequencyMin = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FrequencyMin"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(FrequencyMin, USoundNodeOscillator), 0x0000000000000001);
				UProperty* NewProp_AmplitudeMax = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AmplitudeMax"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(AmplitudeMax, USoundNodeOscillator), 0x0000000000000001);
				UProperty* NewProp_AmplitudeMin = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AmplitudeMin"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(AmplitudeMin, USoundNodeOscillator), 0x0000000000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bModulatePitch, USoundNodeOscillator, uint8);
				UProperty* NewProp_bModulatePitch = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bModulatePitch"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bModulatePitch, USoundNodeOscillator), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bModulatePitch, USoundNodeOscillator), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bModulateVolume, USoundNodeOscillator, uint8);
				UProperty* NewProp_bModulateVolume = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bModulateVolume"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bModulateVolume, USoundNodeOscillator), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bModulateVolume, USoundNodeOscillator), sizeof(uint8), false);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Oscillator"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Sound/SoundNodeOscillator.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeOscillator.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Defines how a sound oscillates"));
				MetaData->SetValue(NewProp_CenterMax, TEXT("Category"), TEXT("Oscillator"));
				MetaData->SetValue(NewProp_CenterMax, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeOscillator.h"));
				MetaData->SetValue(NewProp_CenterMax, TEXT("ToolTip"), TEXT("A center of 0.5 would oscillate around 0.5."));
				MetaData->SetValue(NewProp_CenterMin, TEXT("Category"), TEXT("Oscillator"));
				MetaData->SetValue(NewProp_CenterMin, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeOscillator.h"));
				MetaData->SetValue(NewProp_CenterMin, TEXT("ToolTip"), TEXT("A center of 0.5 would oscillate around 0.5."));
				MetaData->SetValue(NewProp_OffsetMax, TEXT("Category"), TEXT("Oscillator"));
				MetaData->SetValue(NewProp_OffsetMax, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeOscillator.h"));
				MetaData->SetValue(NewProp_OffsetMax, TEXT("ToolTip"), TEXT("Offset into the sine wave. Value modded by 2 * PI."));
				MetaData->SetValue(NewProp_OffsetMin, TEXT("Category"), TEXT("Oscillator"));
				MetaData->SetValue(NewProp_OffsetMin, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeOscillator.h"));
				MetaData->SetValue(NewProp_OffsetMin, TEXT("ToolTip"), TEXT("Offset into the sine wave. Value modded by 2 * PI."));
				MetaData->SetValue(NewProp_FrequencyMax, TEXT("Category"), TEXT("Oscillator"));
				MetaData->SetValue(NewProp_FrequencyMax, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeOscillator.h"));
				MetaData->SetValue(NewProp_FrequencyMax, TEXT("ToolTip"), TEXT("A frequency of 20 would oscillate at 10Hz."));
				MetaData->SetValue(NewProp_FrequencyMin, TEXT("Category"), TEXT("Oscillator"));
				MetaData->SetValue(NewProp_FrequencyMin, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeOscillator.h"));
				MetaData->SetValue(NewProp_FrequencyMin, TEXT("ToolTip"), TEXT("A frequency of 20 would oscillate at 10Hz."));
				MetaData->SetValue(NewProp_AmplitudeMax, TEXT("Category"), TEXT("Oscillator"));
				MetaData->SetValue(NewProp_AmplitudeMax, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeOscillator.h"));
				MetaData->SetValue(NewProp_AmplitudeMax, TEXT("ToolTip"), TEXT("An amplitude of 0.25 would oscillate between 0.75 and 1.25."));
				MetaData->SetValue(NewProp_AmplitudeMin, TEXT("Category"), TEXT("Oscillator"));
				MetaData->SetValue(NewProp_AmplitudeMin, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeOscillator.h"));
				MetaData->SetValue(NewProp_AmplitudeMin, TEXT("ToolTip"), TEXT("An amplitude of 0.25 would oscillate between 0.75 and 1.25."));
				MetaData->SetValue(NewProp_bModulatePitch, TEXT("Category"), TEXT("Oscillator"));
				MetaData->SetValue(NewProp_bModulatePitch, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeOscillator.h"));
				MetaData->SetValue(NewProp_bModulatePitch, TEXT("ToolTip"), TEXT("Whether to oscillate pitch."));
				MetaData->SetValue(NewProp_bModulateVolume, TEXT("Category"), TEXT("Oscillator"));
				MetaData->SetValue(NewProp_bModulateVolume, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeOscillator.h"));
				MetaData->SetValue(NewProp_bModulateVolume, TEXT("ToolTip"), TEXT("Whether to oscillate volume."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USoundNodeOscillator(Z_Construct_UClass_USoundNodeOscillator, TEXT("USoundNodeOscillator"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(USoundNodeOscillator);
	UClass* Z_Construct_UClass_USoundNodeQualityLevel_NoRegister()
	{
		return USoundNodeQualityLevel::StaticClass();
	}
	UClass* Z_Construct_UClass_USoundNodeQualityLevel()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USoundNode();
			Z_Construct_UPackage_Engine();
			OuterClass = USoundNodeQualityLevel::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20081080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Quality Level"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Sound/SoundNodeQualityLevel.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeQualityLevel.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("This SoundNode uses GameUserSettings AudioQualityLevel (or the editor override) to choose which branch to play\nand at runtime will only load in to memory sound waves connected to the branch that will be selected"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USoundNodeQualityLevel(Z_Construct_UClass_USoundNodeQualityLevel, TEXT("USoundNodeQualityLevel"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(USoundNodeQualityLevel);
	UClass* Z_Construct_UClass_USoundNodeRandom_NoRegister()
	{
		return USoundNodeRandom::StaticClass();
	}
	UClass* Z_Construct_UClass_USoundNodeRandom()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USoundNode();
			Z_Construct_UPackage_Engine();
			OuterClass = USoundNodeRandom::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20081080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_PIEHiddenNodes = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PIEHiddenNodes"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(PIEHiddenNodes, USoundNodeRandom), 0x0000000800002000);
				UProperty* NewProp_PIEHiddenNodes_Inner = new(EC_InternalUseOnlyConstructor, NewProp_PIEHiddenNodes, TEXT("PIEHiddenNodes"), RF_Public|RF_Transient|RF_Native) UIntProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000800000000);
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_NumRandomUsed = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NumRandomUsed"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(NumRandomUsed, USoundNodeRandom), 0x0000000000002000);
				UProperty* NewProp_HasBeenUsed = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HasBeenUsed"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(HasBeenUsed, USoundNodeRandom), 0x0000000000002000);
				UProperty* NewProp_HasBeenUsed_Inner = new(EC_InternalUseOnlyConstructor, NewProp_HasBeenUsed, TEXT("HasBeenUsed"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, 0, sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bRandomizeWithoutReplacement, USoundNodeRandom, uint8);
				UProperty* NewProp_bRandomizeWithoutReplacement = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bRandomizeWithoutReplacement"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bRandomizeWithoutReplacement, USoundNodeRandom), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bRandomizeWithoutReplacement, USoundNodeRandom), sizeof(uint8), false);
				UProperty* NewProp_PreselectAtLevelLoad = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PreselectAtLevelLoad"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(PreselectAtLevelLoad, USoundNodeRandom), 0x0000000000000001);
				UProperty* NewProp_Weights = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Weights"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Weights, USoundNodeRandom), 0x0000000000000041);
				UProperty* NewProp_Weights_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Weights, TEXT("Weights"), RF_Public|RF_Transient|RF_Native) UFloatProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Random"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Sound/SoundNodeRandom.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeRandom.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Selects sounds from a random set"));
				MetaData->SetValue(NewProp_PIEHiddenNodes, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeRandom.h"));
				MetaData->SetValue(NewProp_PIEHiddenNodes, TEXT("ToolTip"), TEXT("Editor only list of nodes hidden to duplicate behavior of PreselectAtLevelLoad"));
				MetaData->SetValue(NewProp_NumRandomUsed, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeRandom.h"));
				MetaData->SetValue(NewProp_NumRandomUsed, TEXT("ToolTip"), TEXT("Counter var so we don't have to count all of the used sounds each time we choose a sound *"));
				MetaData->SetValue(NewProp_HasBeenUsed, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeRandom.h"));
				MetaData->SetValue(NewProp_HasBeenUsed, TEXT("ToolTip"), TEXT("Internal state of which sounds have been played.  This is only used at runtime\nto keep track of which sounds have been played"));
				MetaData->SetValue(NewProp_bRandomizeWithoutReplacement, TEXT("Category"), TEXT("Random"));
				MetaData->SetValue(NewProp_bRandomizeWithoutReplacement, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeRandom.h"));
				MetaData->SetValue(NewProp_bRandomizeWithoutReplacement, TEXT("ToolTip"), TEXT("Determines whether or not this SoundNodeRandom should randomize with or without\nreplacement.\n\nWithoutReplacement means that only nodes left will be valid for\nselection.  So with that, you are guarenteed to have only one occurrence of the\nsound played until all of the other sounds in the set have all been played.\n\nWithReplacement means that a node will be chosen and then placed back into the set.\nSo one could play the same sound over and over if the probabilities don't go your way :-)"));
				MetaData->SetValue(NewProp_PreselectAtLevelLoad, TEXT("Category"), TEXT("Random"));
				MetaData->SetValue(NewProp_PreselectAtLevelLoad, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeRandom.h"));
				MetaData->SetValue(NewProp_PreselectAtLevelLoad, TEXT("ToolTip"), TEXT("If greater than 0, then upon each level load such a number of inputs will be randomly selected\nand the rest will be removed. This can be used to cut down the memory usage of large randomizing\ncues."));
				MetaData->SetValue(NewProp_Weights, TEXT("Category"), TEXT("Random"));
				MetaData->SetValue(NewProp_Weights, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeRandom.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USoundNodeRandom(Z_Construct_UClass_USoundNodeRandom, TEXT("USoundNodeRandom"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(USoundNodeRandom);
	UClass* Z_Construct_UClass_USoundNodeSoundClass_NoRegister()
	{
		return USoundNodeSoundClass::StaticClass();
	}
	UClass* Z_Construct_UClass_USoundNodeSoundClass()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USoundNode();
			Z_Construct_UPackage_Engine();
			OuterClass = USoundNodeSoundClass::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20081080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_SoundClassOverride = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SoundClassOverride"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(SoundClassOverride, USoundNodeSoundClass), 0x0000000000000001, Z_Construct_UClass_USoundClass_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("SoundClass"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Sound/SoundNodeSoundClass.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeSoundClass.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Remaps the SoundClass of SoundWaves underneath this"));
				MetaData->SetValue(NewProp_SoundClassOverride, TEXT("Category"), TEXT("SoundClass"));
				MetaData->SetValue(NewProp_SoundClassOverride, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeSoundClass.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USoundNodeSoundClass(Z_Construct_UClass_USoundNodeSoundClass, TEXT("USoundNodeSoundClass"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(USoundNodeSoundClass);
	UClass* Z_Construct_UClass_USoundNodeSwitch_NoRegister()
	{
		return USoundNodeSwitch::StaticClass();
	}
	UClass* Z_Construct_UClass_USoundNodeSwitch()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USoundNode();
			Z_Construct_UPackage_Engine();
			OuterClass = USoundNodeSwitch::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20081080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_IntParameterName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("IntParameterName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(IntParameterName, USoundNodeSwitch), 0x0000000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Switch"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Sound/SoundNodeSwitch.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeSwitch.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Selects a child node based on the value of a integer parameter"));
				MetaData->SetValue(NewProp_IntParameterName, TEXT("Category"), TEXT("Switch"));
				MetaData->SetValue(NewProp_IntParameterName, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeSwitch.h"));
				MetaData->SetValue(NewProp_IntParameterName, TEXT("ToolTip"), TEXT("The name of the integer parameter to use to determine which branch we should take"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USoundNodeSwitch(Z_Construct_UClass_USoundNodeSwitch, TEXT("USoundNodeSwitch"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(USoundNodeSwitch);
	UClass* Z_Construct_UClass_USoundNodeWaveParam_NoRegister()
	{
		return USoundNodeWaveParam::StaticClass();
	}
	UClass* Z_Construct_UClass_USoundNodeWaveParam()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USoundNode();
			Z_Construct_UPackage_Engine();
			OuterClass = USoundNodeWaveParam::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20081080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_WaveParameterName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WaveParameterName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(WaveParameterName, USoundNodeWaveParam), 0x0000000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Wave Param"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Sound/SoundNodeWaveParam.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeWaveParam.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Sound node that takes a runtime parameter for the wave to play"));
				MetaData->SetValue(NewProp_WaveParameterName, TEXT("Category"), TEXT("WaveParam"));
				MetaData->SetValue(NewProp_WaveParameterName, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeWaveParam.h"));
				MetaData->SetValue(NewProp_WaveParameterName, TEXT("ToolTip"), TEXT("The name of the wave parameter to use to look up the SoundWave we should play"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USoundNodeWaveParam(Z_Construct_UClass_USoundNodeWaveParam, TEXT("USoundNodeWaveParam"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(USoundNodeWaveParam);
	UEnum* Z_Construct_UEnum_Engine_EOptimizationType()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EOptimizationType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EOptimizationType"), 0, Get_Z_Construct_UEnum_Engine_EOptimizationType_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EOptimizationType"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("OT_NumOfTriangles")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("OT_MaxDeviation")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("OT_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Enum specifying the reduction type to use when simplifying static meshes."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EOptimizationType_CRC() { return 153725312U; }
	UEnum* Z_Construct_UEnum_Engine_EImportanceLevel()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EImportanceLevel_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EImportanceLevel"), 0, Get_Z_Construct_UEnum_Engine_EImportanceLevel_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EImportanceLevel"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("IL_Off")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("IL_Lowest")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("IL_Low")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("IL_Normal")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("IL_High")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("IL_Highest")), 5));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TEMP_BROKEN2")), 6));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EImportanceLevel_MAX")), 7));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EImportanceLevel_CRC() { return 3288269212U; }
	UEnum* Z_Construct_UEnum_Engine_ENormalMode()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_ENormalMode_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ENormalMode"), 0, Get_Z_Construct_UEnum_Engine_ENormalMode_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ENormalMode"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("NM_PreserveSmoothingGroups")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("NM_RecalculateNormals")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("NM_RecalculateNormalsSmooth")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("NM_RecalculateNormalsHard")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TEMP_BROKEN")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ENormalMode_MAX")), 5));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Optimization settings used to simplify mesh LODs."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_ENormalMode_CRC() { return 340713124U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAssetEditorOrbitCameraPosition()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FAssetEditorOrbitCameraPosition_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("AssetEditorOrbitCameraPosition"), sizeof(FAssetEditorOrbitCameraPosition), Get_Z_Construct_UScriptStruct_FAssetEditorOrbitCameraPosition_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AssetEditorOrbitCameraPosition"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FAssetEditorOrbitCameraPosition>, EStructFlags(0x00000001));
			UProperty* NewProp_CamOrbitRotation = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CamOrbitRotation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(CamOrbitRotation, FAssetEditorOrbitCameraPosition), 0x0000000000000000, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_CamOrbitZoom = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CamOrbitZoom"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(CamOrbitZoom, FAssetEditorOrbitCameraPosition), 0x0000000000000000, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_CamOrbitPoint = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CamOrbitPoint"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(CamOrbitPoint, FAssetEditorOrbitCameraPosition), 0x0000000000000000, Z_Construct_UScriptStruct_FVector());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsSet, FAssetEditorOrbitCameraPosition, bool);
			UProperty* NewProp_bIsSet = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bIsSet"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsSet, FAssetEditorOrbitCameraPosition), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bIsSet, FAssetEditorOrbitCameraPosition), sizeof(bool), true);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
			MetaData->SetValue(NewProp_CamOrbitRotation, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
			MetaData->SetValue(NewProp_CamOrbitRotation, TEXT("ToolTip"), TEXT("The rotation to apply around the orbit point"));
			MetaData->SetValue(NewProp_CamOrbitZoom, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
			MetaData->SetValue(NewProp_CamOrbitZoom, TEXT("ToolTip"), TEXT("The distance of the camera from the orbit point"));
			MetaData->SetValue(NewProp_CamOrbitPoint, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
			MetaData->SetValue(NewProp_CamOrbitPoint, TEXT("ToolTip"), TEXT("The position to orbit the camera around"));
			MetaData->SetValue(NewProp_bIsSet, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
			MetaData->SetValue(NewProp_bIsSet, TEXT("ToolTip"), TEXT("Whether or not this has been set to a valid value"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAssetEditorOrbitCameraPosition_CRC() { return 1117835737U; }
	UScriptStruct* Z_Construct_UScriptStruct_FMeshSectionInfoMap()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FMeshSectionInfoMap_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("MeshSectionInfoMap"), sizeof(FMeshSectionInfoMap), Get_Z_Construct_UScriptStruct_FMeshSectionInfoMap_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MeshSectionInfoMap"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FMeshSectionInfoMap>, EStructFlags(0x00000001));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Map containing per-section settings for each section of each LOD."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FMeshSectionInfoMap_CRC() { return 1236145792U; }
	UScriptStruct* Z_Construct_UScriptStruct_FMeshSectionInfo()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FMeshSectionInfo_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("MeshSectionInfo"), sizeof(FMeshSectionInfo), Get_Z_Construct_UScriptStruct_FMeshSectionInfo_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MeshSectionInfo"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FMeshSectionInfo>, EStructFlags(0x00000001));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCastShadow, FMeshSectionInfo, bool);
			UProperty* NewProp_bCastShadow = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bCastShadow"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCastShadow, FMeshSectionInfo), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bCastShadow, FMeshSectionInfo), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnableCollision, FMeshSectionInfo, bool);
			UProperty* NewProp_bEnableCollision = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bEnableCollision"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnableCollision, FMeshSectionInfo), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bEnableCollision, FMeshSectionInfo), sizeof(bool), true);
			UProperty* NewProp_MaterialIndex = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MaterialIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MaterialIndex, FMeshSectionInfo), 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Per-section settings."));
			MetaData->SetValue(NewProp_bCastShadow, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
			MetaData->SetValue(NewProp_bCastShadow, TEXT("ToolTip"), TEXT("If true, this section will cast shadows."));
			MetaData->SetValue(NewProp_bEnableCollision, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
			MetaData->SetValue(NewProp_bEnableCollision, TEXT("ToolTip"), TEXT("If true, collision is enabled for this section."));
			MetaData->SetValue(NewProp_MaterialIndex, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
			MetaData->SetValue(NewProp_MaterialIndex, TEXT("ToolTip"), TEXT("Index in to the Materials array on UStaticMesh."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FMeshSectionInfo_CRC() { return 3953900182U; }
	UScriptStruct* Z_Construct_UScriptStruct_FStaticMeshSourceModel()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FStaticMeshSourceModel_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("StaticMeshSourceModel"), sizeof(FStaticMeshSourceModel), Get_Z_Construct_UScriptStruct_FStaticMeshSourceModel_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("StaticMeshSourceModel"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FStaticMeshSourceModel>, EStructFlags(0x00000001));
			UProperty* NewProp_ScreenSize = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ScreenSize"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ScreenSize, FStaticMeshSourceModel), 0x0000000000000001);
			UProperty* NewProp_LODDistance = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LODDistance"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(LODDistance_DEPRECATED, FStaticMeshSourceModel), 0x0000000020000000);
			UProperty* NewProp_ReductionSettings = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ReductionSettings"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReductionSettings, FStaticMeshSourceModel), 0x0000000000000001, Z_Construct_UScriptStruct_FMeshReductionSettings());
			UProperty* NewProp_BuildSettings = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BuildSettings"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(BuildSettings, FStaticMeshSourceModel), 0x0000000000000001, Z_Construct_UScriptStruct_FMeshBuildSettings());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Source model from which a renderable static mesh is built."));
			MetaData->SetValue(NewProp_ScreenSize, TEXT("Category"), TEXT("ReductionSettings"));
			MetaData->SetValue(NewProp_ScreenSize, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
			MetaData->SetValue(NewProp_ScreenSize, TEXT("ToolTip"), TEXT("ScreenSize to display this LOD"));
			MetaData->SetValue(NewProp_LODDistance, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
			MetaData->SetValue(NewProp_ReductionSettings, TEXT("Category"), TEXT("ReductionSettings"));
			MetaData->SetValue(NewProp_ReductionSettings, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
			MetaData->SetValue(NewProp_ReductionSettings, TEXT("ToolTip"), TEXT("Reduction settings to apply when building render data."));
			MetaData->SetValue(NewProp_BuildSettings, TEXT("Category"), TEXT("BuildSettings"));
			MetaData->SetValue(NewProp_BuildSettings, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
			MetaData->SetValue(NewProp_BuildSettings, TEXT("ToolTip"), TEXT("Settings applied when building the mesh."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FStaticMeshSourceModel_CRC() { return 1362492519U; }
	UScriptStruct* Z_Construct_UScriptStruct_FStaticMeshOptimizationSettings()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FStaticMeshOptimizationSettings_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("StaticMeshOptimizationSettings"), sizeof(FStaticMeshOptimizationSettings), Get_Z_Construct_UScriptStruct_FStaticMeshOptimizationSettings_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("StaticMeshOptimizationSettings"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FStaticMeshOptimizationSettings>, EStructFlags(0x00000001));
			UProperty* NewProp_ShadingImportance = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ShadingImportance"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(ShadingImportance, FStaticMeshOptimizationSettings), 0x0000000000000000);
			UProperty* NewProp_TextureImportance = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TextureImportance"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(TextureImportance, FStaticMeshOptimizationSettings), 0x0000000000000000);
			UProperty* NewProp_SilhouetteImportance = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SilhouetteImportance"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(SilhouetteImportance, FStaticMeshOptimizationSettings), 0x0000000000000000);
			UProperty* NewProp_NormalsThreshold = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("NormalsThreshold"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(NormalsThreshold, FStaticMeshOptimizationSettings), 0x0000000000000000);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bRecalcNormals, FStaticMeshOptimizationSettings, bool);
			UProperty* NewProp_bRecalcNormals = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bRecalcNormals"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bRecalcNormals, FStaticMeshOptimizationSettings), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bRecalcNormals, FStaticMeshOptimizationSettings), sizeof(bool), true);
			UProperty* NewProp_WeldingThreshold = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("WeldingThreshold"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(WeldingThreshold, FStaticMeshOptimizationSettings), 0x0000000000000000);
			UProperty* NewProp_MaxDeviationPercentage = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MaxDeviationPercentage"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MaxDeviationPercentage, FStaticMeshOptimizationSettings), 0x0000000000000000);
			UProperty* NewProp_NumOfTrianglesPercentage = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("NumOfTrianglesPercentage"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(NumOfTrianglesPercentage, FStaticMeshOptimizationSettings), 0x0000000000000000);
			UProperty* NewProp_ReductionMethod = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ReductionMethod"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(ReductionMethod, FStaticMeshOptimizationSettings), 0x0000000000000000, Z_Construct_UEnum_Engine_EOptimizationType());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Old optimization settings."));
			MetaData->SetValue(NewProp_ShadingImportance, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
			MetaData->SetValue(NewProp_ShadingImportance, TEXT("ToolTip"), TEXT("How important shading quality is."));
			MetaData->SetValue(NewProp_TextureImportance, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
			MetaData->SetValue(NewProp_TextureImportance, TEXT("ToolTip"), TEXT("How important texture density is (EImportanceLevel)."));
			MetaData->SetValue(NewProp_SilhouetteImportance, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
			MetaData->SetValue(NewProp_SilhouetteImportance, TEXT("ToolTip"), TEXT("How important the shape of the geometry is (EImportanceLevel)."));
			MetaData->SetValue(NewProp_NormalsThreshold, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
			MetaData->SetValue(NewProp_NormalsThreshold, TEXT("ToolTip"), TEXT("If the angle between two triangles are above this value, the normals will not be\n      smooth over the edge between those two triangles. Set in degrees. This is only used when PreserveNormals is set to false"));
			MetaData->SetValue(NewProp_bRecalcNormals, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
			MetaData->SetValue(NewProp_bRecalcNormals, TEXT("ToolTip"), TEXT("Whether Normal smoothing groups should be preserved. If false then NormalsThreshold is used *"));
			MetaData->SetValue(NewProp_WeldingThreshold, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
			MetaData->SetValue(NewProp_WeldingThreshold, TEXT("ToolTip"), TEXT("The welding threshold distance. Vertices under this distance will be welded."));
			MetaData->SetValue(NewProp_MaxDeviationPercentage, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
			MetaData->SetValue(NewProp_MaxDeviationPercentage, TEXT("ToolTip"), TEXT("If ReductionMethod equals SMOT_MaxDeviation this value is the maximum deviation from the base mesh as a percentage of the bounding sphere."));
			MetaData->SetValue(NewProp_NumOfTrianglesPercentage, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
			MetaData->SetValue(NewProp_NumOfTrianglesPercentage, TEXT("ToolTip"), TEXT("If ReductionMethod equals SMOT_NumOfTriangles this value is the ratio of triangles [0-1] to remove from the mesh"));
			MetaData->SetValue(NewProp_ReductionMethod, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
			MetaData->SetValue(NewProp_ReductionMethod, TEXT("ToolTip"), TEXT("The method to use when optimizing the skeletal mesh LOD"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FStaticMeshOptimizationSettings_CRC() { return 786583003U; }
	UFunction* Z_Construct_UFunction_UStaticMesh_GetBoundingBox()
	{
		struct StaticMesh_eventGetBoundingBox_Parms
		{
			FBox ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UStaticMesh();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetBoundingBox"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54820403, 65535, sizeof(StaticMesh_eventGetBoundingBox_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, StaticMesh_eventGetBoundingBox_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FBox());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("StaticMesh"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the bounding box, in local space including bounds extension(s), of the StaticMesh asset"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UStaticMesh_NoRegister()
	{
		return UStaticMesh::StaticClass();
	}
	UClass* Z_Construct_UClass_UStaticMesh()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UStaticMesh::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20882080;

				OuterClass->LinkChild(Z_Construct_UFunction_UStaticMesh_GetBoundingBox());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_NavCollision = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NavCollision"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(NavCollision, UStaticMesh), 0x00020000002a2009, Z_Construct_UClass_UNavCollision_NoRegister());
				UProperty* NewProp_AssetUserData = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AssetUserData"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(AssetUserData, UStaticMesh), 0x00000c8000000009);
				UProperty* NewProp_AssetUserData_Inner = new(EC_InternalUseOnlyConstructor, NewProp_AssetUserData, TEXT("AssetUserData"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0002000000080008, Z_Construct_UClass_UAssetUserData_NoRegister());
				UProperty* NewProp_ElementToIgnoreForTexFactor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ElementToIgnoreForTexFactor"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ElementToIgnoreForTexFactor, UStaticMesh), 0x0000080000000000);
				UProperty* NewProp_ExtendedBounds = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ExtendedBounds"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ExtendedBounds, UStaticMesh), 0x0000000000000000, Z_Construct_UScriptStruct_FBoxSphereBounds());
				UProperty* NewProp_NegativeBoundsExtension = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NegativeBoundsExtension"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(NegativeBoundsExtension, UStaticMesh), 0x0000040000010001, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_PositiveBoundsExtension = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PositiveBoundsExtension"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PositiveBoundsExtension, UStaticMesh), 0x0000040000010001, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_Sockets = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Sockets"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Sockets, UStaticMesh), 0x0000000000000000);
				UProperty* NewProp_Sockets_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Sockets, TEXT("Sockets"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UStaticMeshSocket_NoRegister());
#if WITH_EDITORONLY_DATA
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCustomizedCollision, UStaticMesh, bool);
				UProperty* NewProp_bCustomizedCollision = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bCustomizedCollision"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCustomizedCollision, UStaticMesh), 0x0000000800000001, CPP_BOOL_PROPERTY_BITMASK(bCustomizedCollision, UStaticMesh), sizeof(bool), true);
				UProperty* NewProp_EditorCameraPosition = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EditorCameraPosition"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(EditorCameraPosition, UStaticMesh), 0x0000000800000000, Z_Construct_UScriptStruct_FAssetEditorOrbitCameraPosition());
				UProperty* NewProp_ThumbnailInfo = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ThumbnailInfo"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ThumbnailInfo, UStaticMesh), 0x00020008000a0009, Z_Construct_UClass_UThumbnailInfo_NoRegister());
				UProperty* NewProp_SourceFileTimestamp = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SourceFileTimestamp"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(SourceFileTimestamp_DEPRECATED, UStaticMesh), 0x0000000820000000);
				UProperty* NewProp_SourceFilePath = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SourceFilePath"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(SourceFilePath_DEPRECATED, UStaticMesh), 0x0000000820000000);
				UProperty* NewProp_AssetImportData = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AssetImportData"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(AssetImportData, UStaticMesh), 0x00020008000a0009, Z_Construct_UClass_UAssetImportData_NoRegister());
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_LpvBiasMultiplier = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LpvBiasMultiplier"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(LpvBiasMultiplier, UStaticMesh), 0x0000000000000015);
				UProperty* NewProp_StreamingDistanceMultiplier = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StreamingDistanceMultiplier"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(StreamingDistanceMultiplier, UStaticMesh), 0x0000040000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bHasNavigationData, UStaticMesh, uint8);
				UProperty* NewProp_bHasNavigationData = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bHasNavigationData"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bHasNavigationData, UStaticMesh), 0x0000040000000001, CPP_BOOL_PROPERTY_BITMASK(bHasNavigationData, UStaticMesh), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bStripComplexCollisionForConsole_DEPRECATED, UStaticMesh, uint8);
				UProperty* NewProp_bStripComplexCollisionForConsole = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bStripComplexCollisionForConsole"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bStripComplexCollisionForConsole_DEPRECATED, UStaticMesh), 0x0000000020000000, CPP_BOOL_PROPERTY_BITMASK(bStripComplexCollisionForConsole_DEPRECATED, UStaticMesh), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseMaximumStreamingTexelRatio, UStaticMesh, uint8);
				UProperty* NewProp_bUseMaximumStreamingTexelRatio = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUseMaximumStreamingTexelRatio"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseMaximumStreamingTexelRatio, UStaticMesh), 0x0000040000000001, CPP_BOOL_PROPERTY_BITMASK(bUseMaximumStreamingTexelRatio, UStaticMesh), sizeof(uint8), false);
				UProperty* NewProp_BodySetup = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BodySetup"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(BodySetup, UStaticMesh), 0x0002000000282009, Z_Construct_UClass_UBodySetup_NoRegister());
				UProperty* NewProp_LightMapCoordinateIndex = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LightMapCoordinateIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(LightMapCoordinateIndex, UStaticMesh), 0x0000040000000001);
				UProperty* NewProp_LightMapResolution = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LightMapResolution"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(LightMapResolution, UStaticMesh), 0x0000000000000001);
				UProperty* NewProp_Materials = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Materials"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Materials, UStaticMesh), 0x0000000000000000);
				UProperty* NewProp_Materials_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Materials, TEXT("Materials"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UMaterialInterface_NoRegister());
				UProperty* NewProp_MinLOD = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MinLOD"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MinLOD, UStaticMesh), 0x0000000000000000);
#if WITH_EDITORONLY_DATA
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAutoComputeLODScreenSize, UStaticMesh, uint8);
				UProperty* NewProp_bAutoComputeLODScreenSize = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAutoComputeLODScreenSize"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAutoComputeLODScreenSize, UStaticMesh), 0x0000000800000000, CPP_BOOL_PROPERTY_BITMASK(bAutoComputeLODScreenSize, UStaticMesh), sizeof(uint8), false);
				UProperty* NewProp_LODGroup = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LODGroup"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(LODGroup, UStaticMesh), 0x0000000800000000);
				UProperty* NewProp_AutoLODPixelError = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AutoLODPixelError"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(AutoLODPixelError, UStaticMesh), 0x0000000800000000);
				UProperty* NewProp_SourceModels = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SourceModels"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(SourceModels, UStaticMesh), 0x0000000800000000);
				UProperty* NewProp_SourceModels_Inner = new(EC_InternalUseOnlyConstructor, NewProp_SourceModels, TEXT("SourceModels"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000800000000, Z_Construct_UScriptStruct_FStaticMeshSourceModel());
#endif // WITH_EDITORONLY_DATA
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UStaticMesh_GetBoundingBox()); // 3831336132
				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->Interfaces.Add(FImplementedInterface(Z_Construct_UClass_UInterface_CollisionDataProvider_NoRegister(), VTABLE_OFFSET(UStaticMesh, IInterface_CollisionDataProvider), false ));
				OuterClass->Interfaces.Add(FImplementedInterface(Z_Construct_UClass_UInterface_AssetUserData_NoRegister(), VTABLE_OFFSET(UStaticMesh, IInterface_AssetUserData), false ));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/StaticMesh.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("A StaticMesh is a piece of geometry that consists of a static set of polygons.\nStatic Meshes can be translated, rotated, and scaled, but they cannot have their vertices animated in any way. As such, they are more efficient\nto render than other types of geometry such as USkeletalMesh, and they are often the basic building block of levels created in the engine.\n\n@see https://docs.unrealengine.com/latest/INT/Engine/Content/Types/StaticMeshes/\n@see AStaticMeshActor, UStaticMeshComponent"));
				MetaData->SetValue(NewProp_NavCollision, TEXT("Category"), TEXT("Navigation"));
				MetaData->SetValue(NewProp_NavCollision, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_NavCollision, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
				MetaData->SetValue(NewProp_NavCollision, TEXT("ToolTip"), TEXT("Pre-build navigation collision"));
				MetaData->SetValue(NewProp_AssetUserData, TEXT("Category"), TEXT("StaticMesh"));
				MetaData->SetValue(NewProp_AssetUserData, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_AssetUserData, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
				MetaData->SetValue(NewProp_AssetUserData, TEXT("ToolTip"), TEXT("Array of user data stored with the asset"));
				MetaData->SetValue(NewProp_AssetUserData_Inner, TEXT("Category"), TEXT("StaticMesh"));
				MetaData->SetValue(NewProp_AssetUserData_Inner, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_AssetUserData_Inner, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
				MetaData->SetValue(NewProp_AssetUserData_Inner, TEXT("ToolTip"), TEXT("Array of user data stored with the asset"));
				MetaData->SetValue(NewProp_ElementToIgnoreForTexFactor, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
				MetaData->SetValue(NewProp_ElementToIgnoreForTexFactor, TEXT("ToolTip"), TEXT("Index of an element to ignore while gathering streaming texture factors.\nThis is useful to disregard automatically generated vertex data which breaks texture factor heuristics."));
				MetaData->SetValue(NewProp_ExtendedBounds, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
				MetaData->SetValue(NewProp_ExtendedBounds, TEXT("ToolTip"), TEXT("Original mesh bounds extended with Positive/NegativeBoundsExtension"));
				MetaData->SetValue(NewProp_NegativeBoundsExtension, TEXT("Category"), TEXT("StaticMesh"));
				MetaData->SetValue(NewProp_NegativeBoundsExtension, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
				MetaData->SetValue(NewProp_NegativeBoundsExtension, TEXT("ToolTip"), TEXT("Bound extension values in the negative direction of XYZ, positive value increases bound size"));
				MetaData->SetValue(NewProp_PositiveBoundsExtension, TEXT("Category"), TEXT("StaticMesh"));
				MetaData->SetValue(NewProp_PositiveBoundsExtension, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
				MetaData->SetValue(NewProp_PositiveBoundsExtension, TEXT("ToolTip"), TEXT("Bound extension values in the positive direction of XYZ, positive value increases bound size"));
				MetaData->SetValue(NewProp_Sockets, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
				MetaData->SetValue(NewProp_Sockets, TEXT("ToolTip"), TEXT("Array of named socket locations, set up in editor and used as a shortcut instead of specifying\neverything explicitly to AttachComponent in the StaticMeshComponent."));
				MetaData->SetValue(NewProp_bCustomizedCollision, TEXT("Category"), TEXT("Collision"));
				MetaData->SetValue(NewProp_bCustomizedCollision, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
				MetaData->SetValue(NewProp_bCustomizedCollision, TEXT("ToolTip"), TEXT("If the user has modified collision in any way or has custom collision imported. Used for determining if to auto generate collision on import"));
				MetaData->SetValue(NewProp_EditorCameraPosition, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
				MetaData->SetValue(NewProp_EditorCameraPosition, TEXT("ToolTip"), TEXT("The stored camera position to use as a default for the static mesh editor"));
				MetaData->SetValue(NewProp_ThumbnailInfo, TEXT("Category"), TEXT("Thumbnail"));
				MetaData->SetValue(NewProp_ThumbnailInfo, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_ThumbnailInfo, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
				MetaData->SetValue(NewProp_ThumbnailInfo, TEXT("ToolTip"), TEXT("Information for thumbnail rendering"));
				MetaData->SetValue(NewProp_SourceFileTimestamp, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
				MetaData->SetValue(NewProp_SourceFileTimestamp, TEXT("ToolTip"), TEXT("Date/Time-stamp of the file from the last import"));
				MetaData->SetValue(NewProp_SourceFilePath, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
				MetaData->SetValue(NewProp_SourceFilePath, TEXT("ToolTip"), TEXT("Path to the resource used to construct this static mesh"));
				MetaData->SetValue(NewProp_AssetImportData, TEXT("Category"), TEXT("ImportSettings"));
				MetaData->SetValue(NewProp_AssetImportData, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_AssetImportData, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
				MetaData->SetValue(NewProp_AssetImportData, TEXT("ToolTip"), TEXT("Importing data and options used for this mesh"));
				MetaData->SetValue(NewProp_LpvBiasMultiplier, TEXT("Category"), TEXT("StaticMesh"));
				MetaData->SetValue(NewProp_LpvBiasMultiplier, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
				MetaData->SetValue(NewProp_LpvBiasMultiplier, TEXT("ToolTip"), TEXT("Bias multiplier for Light Propagation Volume lighting"));
				MetaData->SetValue(NewProp_LpvBiasMultiplier, TEXT("UIMax"), TEXT("3.0"));
				MetaData->SetValue(NewProp_LpvBiasMultiplier, TEXT("UIMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_StreamingDistanceMultiplier, TEXT("Category"), TEXT("StaticMesh"));
				MetaData->SetValue(NewProp_StreamingDistanceMultiplier, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_StreamingDistanceMultiplier, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
				MetaData->SetValue(NewProp_StreamingDistanceMultiplier, TEXT("ToolTip"), TEXT("Allows artists to adjust the distance where textures using UV 0 are streamed in/out.\n1.0 is the default, whereas a higher value increases the streamed-in resolution.\nValue can be < 0 (from legcay content, or code changes)"));
				MetaData->SetValue(NewProp_bHasNavigationData, TEXT("Category"), TEXT("Navigation"));
				MetaData->SetValue(NewProp_bHasNavigationData, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
				MetaData->SetValue(NewProp_bHasNavigationData, TEXT("ToolTip"), TEXT("If true, mesh will have NavCollision property with additional data for navmesh generation and usage.\n          Set to false for distant meshes (always outside navigation bounds) to save memory on collision data."));
				MetaData->SetValue(NewProp_bStripComplexCollisionForConsole, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
				MetaData->SetValue(NewProp_bStripComplexCollisionForConsole, TEXT("ToolTip"), TEXT("If true, strips unwanted complex collision data aka kDOP tree when cooking for consoles.\n              On the Playstation 3 data of this mesh will be stored in video memory."));
				MetaData->SetValue(NewProp_bUseMaximumStreamingTexelRatio, TEXT("Category"), TEXT("StaticMesh"));
				MetaData->SetValue(NewProp_bUseMaximumStreamingTexelRatio, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
				MetaData->SetValue(NewProp_bUseMaximumStreamingTexelRatio, TEXT("ToolTip"), TEXT("If true, use a less-conservative method of mip LOD texture factor computation.  Requires mesh to be resaved to take effect as algorithm is applied on save"));
				MetaData->SetValue(NewProp_BodySetup, TEXT("Category"), TEXT("StaticMesh"));
				MetaData->SetValue(NewProp_BodySetup, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_BodySetup, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
				MetaData->SetValue(NewProp_BodySetup, TEXT("ToolTip"), TEXT("Physics data."));
				MetaData->SetValue(NewProp_LightMapCoordinateIndex, TEXT("Category"), TEXT("StaticMesh"));
				MetaData->SetValue(NewProp_LightMapCoordinateIndex, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
				MetaData->SetValue(NewProp_LightMapCoordinateIndex, TEXT("ToolTip"), TEXT("The light map coordinate index"));
				MetaData->SetValue(NewProp_LightMapResolution, TEXT("Category"), TEXT("StaticMesh"));
				MetaData->SetValue(NewProp_LightMapResolution, TEXT("FixedIncrement"), TEXT("4.0"));
				MetaData->SetValue(NewProp_LightMapResolution, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
				MetaData->SetValue(NewProp_LightMapResolution, TEXT("ToolTip"), TEXT("The light map resolution"));
				MetaData->SetValue(NewProp_Materials, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
				MetaData->SetValue(NewProp_Materials, TEXT("ToolTip"), TEXT("Materials used by this static mesh. Individual sections index in to this array."));
				MetaData->SetValue(NewProp_MinLOD, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
				MetaData->SetValue(NewProp_MinLOD, TEXT("ToolTip"), TEXT("Minimum LOD to use for rendering.  This is the default setting for the mesh and can be overridden by component settings."));
				MetaData->SetValue(NewProp_bAutoComputeLODScreenSize, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
				MetaData->SetValue(NewProp_bAutoComputeLODScreenSize, TEXT("ToolTip"), TEXT("If true, the distances at which LODs swap are computed automatically."));
				MetaData->SetValue(NewProp_LODGroup, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
				MetaData->SetValue(NewProp_LODGroup, TEXT("ToolTip"), TEXT("The LOD group to which this mesh belongs."));
				MetaData->SetValue(NewProp_AutoLODPixelError, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
				MetaData->SetValue(NewProp_AutoLODPixelError, TEXT("ToolTip"), TEXT("The pixel error allowed when computing auto LOD distances."));
				MetaData->SetValue(NewProp_SourceModels, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
				MetaData->SetValue(NewProp_SourceModels, TEXT("ToolTip"), TEXT("Imported raw mesh bulk data."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UStaticMesh(Z_Construct_UClass_UStaticMesh, TEXT("UStaticMesh"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UStaticMesh);
	UClass* Z_Construct_UClass_UStaticMeshSocket_NoRegister()
	{
		return UStaticMeshSocket::StaticClass();
	}
	UClass* Z_Construct_UClass_UStaticMeshSocket()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UStaticMeshSocket::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_PreviewStaticMesh = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PreviewStaticMesh"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(PreviewStaticMesh, UStaticMeshSocket), 0x0000000800000001, Z_Construct_UClass_UStaticMesh_NoRegister());
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_Tag = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Tag"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Tag, UStaticMeshSocket), 0x0000000000000005);
				UProperty* NewProp_RelativeScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RelativeScale"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(RelativeScale, UStaticMeshSocket), 0x0000000000000005, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_RelativeRotation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RelativeRotation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(RelativeRotation, UStaticMeshSocket), 0x0000000000000005, Z_Construct_UScriptStruct_FRotator());
				UProperty* NewProp_RelativeLocation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RelativeLocation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(RelativeLocation, UStaticMeshSocket), 0x0000000000000005, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_SocketName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SocketName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(SocketName, UStaticMeshSocket), 0x0000000000000014);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Actor"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/StaticMeshSocket.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMeshSocket.h"));
				MetaData->SetValue(NewProp_PreviewStaticMesh, TEXT("Category"), TEXT("StaticMeshSocket"));
				MetaData->SetValue(NewProp_PreviewStaticMesh, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMeshSocket.h"));
				MetaData->SetValue(NewProp_Tag, TEXT("Category"), TEXT("StaticMeshSocket"));
				MetaData->SetValue(NewProp_Tag, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMeshSocket.h"));
				MetaData->SetValue(NewProp_RelativeScale, TEXT("Category"), TEXT("StaticMeshSocket"));
				MetaData->SetValue(NewProp_RelativeScale, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMeshSocket.h"));
				MetaData->SetValue(NewProp_RelativeRotation, TEXT("Category"), TEXT("StaticMeshSocket"));
				MetaData->SetValue(NewProp_RelativeRotation, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMeshSocket.h"));
				MetaData->SetValue(NewProp_RelativeLocation, TEXT("Category"), TEXT("StaticMeshSocket"));
				MetaData->SetValue(NewProp_RelativeLocation, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMeshSocket.h"));
				MetaData->SetValue(NewProp_SocketName, TEXT("Category"), TEXT("StaticMeshSocket"));
				MetaData->SetValue(NewProp_SocketName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMeshSocket.h"));
				MetaData->SetValue(NewProp_SocketName, TEXT("ToolTip"), TEXT("Defines a named attachment location on the UStaticMesh.\nThese are set up in editor and used as a shortcut instead of specifying\neverything explicitly to AttachComponent in the StaticMeshComponent.\nThe Outer of a StaticMeshSocket should always be the UStaticMesh."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UStaticMeshSocket(Z_Construct_UClass_UStaticMeshSocket, TEXT("UStaticMeshSocket"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UStaticMeshSocket);
	UScriptStruct* Z_Construct_UScriptStruct_FSubsurfaceProfileStruct()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FSubsurfaceProfileStruct_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("SubsurfaceProfileStruct"), sizeof(FSubsurfaceProfileStruct), Get_Z_Construct_UScriptStruct_FSubsurfaceProfileStruct_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SubsurfaceProfileStruct"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FSubsurfaceProfileStruct>, EStructFlags(0x00000001));
			UProperty* NewProp_FalloffColor = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("FalloffColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(FalloffColor, FSubsurfaceProfileStruct), 0x0000000000000015, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_SubsurfaceColor = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SubsurfaceColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SubsurfaceColor, FSubsurfaceProfileStruct), 0x0000000000000015, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_ScatterRadius = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ScatterRadius"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ScatterRadius, FSubsurfaceProfileStruct), 0x0000000000000015);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SubsurfaceProfile.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("struct with all the settings we want in USubsurfaceProfile, separate to make it easer to pass this data around in the engine."));
			MetaData->SetValue(NewProp_FalloffColor, TEXT("Category"), TEXT("SubsurfaceProfileStruct"));
			MetaData->SetValue(NewProp_FalloffColor, TEXT("HideAlphaChannel"), TEXT(""));
			MetaData->SetValue(NewProp_FalloffColor, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SubsurfaceProfile.h"));
			MetaData->SetValue(NewProp_FalloffColor, TEXT("ToolTip"), TEXT("defines the per-channel falloff of the gradients\nproduced by the subsurface scattering events, can be used to fine tune the color of the gradients\n(called \"falloff\" in SeparableSSS, default there: 1, 0.37, 0.3)"));
			MetaData->SetValue(NewProp_SubsurfaceColor, TEXT("Category"), TEXT("SubsurfaceProfileStruct"));
			MetaData->SetValue(NewProp_SubsurfaceColor, TEXT("HideAlphaChannel"), TEXT(""));
			MetaData->SetValue(NewProp_SubsurfaceColor, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SubsurfaceProfile.h"));
			MetaData->SetValue(NewProp_SubsurfaceColor, TEXT("ToolTip"), TEXT("Specifies the how much of the diffuse light gets into the material,\ncan be seen as a per-channel mix factor between the original image,\nand the SSS-filtered image (called \"strength\" in SeparableSSS, default there: 0.48, 0.41, 0.28)"));
			MetaData->SetValue(NewProp_ScatterRadius, TEXT("Category"), TEXT("SubsurfaceProfileStruct"));
			MetaData->SetValue(NewProp_ScatterRadius, TEXT("ClampMax"), TEXT("1000.0"));
			MetaData->SetValue(NewProp_ScatterRadius, TEXT("ClampMin"), TEXT("0.1"));
			MetaData->SetValue(NewProp_ScatterRadius, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SubsurfaceProfile.h"));
			MetaData->SetValue(NewProp_ScatterRadius, TEXT("ToolTip"), TEXT("in world/unreal units (cm)"));
			MetaData->SetValue(NewProp_ScatterRadius, TEXT("UIMax"), TEXT("50.0"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FSubsurfaceProfileStruct_CRC() { return 249515033U; }
	UClass* Z_Construct_UClass_USubsurfaceProfile_NoRegister()
	{
		return USubsurfaceProfile::StaticClass();
	}
	UClass* Z_Construct_UClass_USubsurfaceProfile()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = USubsurfaceProfile::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Settings = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Settings"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Settings, USubsurfaceProfile), 0x0000000000000001, Z_Construct_UScriptStruct_FSubsurfaceProfileStruct());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("AutoExpandCategories"), TEXT("SubsurfaceProfile"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/SubsurfaceProfile.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SubsurfaceProfile.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Subsurface Scattering profile asset, can be specified at the material. Only for \"Subsurface Profile\" materials, is use during Screenspace Subsurface Scattering\nDon't change at runtime. All properties in here are per material - texture like variations need to come from properties that are in the GBuffer."));
				MetaData->SetValue(NewProp_Settings, TEXT("Category"), TEXT("USubsurfaceProfile"));
				MetaData->SetValue(NewProp_Settings, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SubsurfaceProfile.h"));
				MetaData->SetValue(NewProp_Settings, TEXT("ShowOnlyInnerProperties"), TEXT(""));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USubsurfaceProfile(Z_Construct_UClass_USubsurfaceProfile, TEXT("USubsurfaceProfile"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(USubsurfaceProfile);
	UClass* Z_Construct_UClass_UTextPropertyTestObject_NoRegister()
	{
		return UTextPropertyTestObject::StaticClass();
	}
	UClass* Z_Construct_UClass_UTextPropertyTestObject()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UTextPropertyTestObject::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_TransientText = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TransientText"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(TransientText, UTextPropertyTestObject), 0x0000000000000000);
				UProperty* NewProp_UndefaultedText = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UndefaultedText"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(UndefaultedText, UTextPropertyTestObject), 0x0000000000000000);
				UProperty* NewProp_DefaultedText = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultedText"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(DefaultedText, UTextPropertyTestObject), 0x0000000000000000);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Tests/TextPropertyTestObject.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/TextPropertyTestObject.h"));
				MetaData->SetValue(NewProp_TransientText, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/TextPropertyTestObject.h"));
				MetaData->SetValue(NewProp_UndefaultedText, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/TextPropertyTestObject.h"));
				MetaData->SetValue(NewProp_DefaultedText, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/TextPropertyTestObject.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UTextPropertyTestObject(Z_Construct_UClass_UTextPropertyTestObject, TEXT("UTextPropertyTestObject"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UTextPropertyTestObject);
	UEnum* Z_Construct_UEnum_Engine_ETextureSourceFormat()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_ETextureSourceFormat_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ETextureSourceFormat"), 0, Get_Z_Construct_UEnum_Engine_ETextureSourceFormat_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ETextureSourceFormat"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TSF_Invalid")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TSF_G8")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TSF_BGRA8")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TSF_BGRE8")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TSF_RGBA16")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TSF_RGBA16F")), 5));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TSF_RGBA8")), 6));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TSF_RGBE8")), 7));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TSF_MAX")), 8));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
			MetaData->SetValue(ReturnEnum, TEXT("TSF_RGBA8.ToolTip"), TEXT("@todo: Deprecated!"));
			MetaData->SetValue(ReturnEnum, TEXT("TSF_RGBE8.ToolTip"), TEXT("@todo: Deprecated!"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_ETextureSourceFormat_CRC() { return 4089610204U; }
	UEnum* Z_Construct_UEnum_Engine_ETextureSourceArtType()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_ETextureSourceArtType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ETextureSourceArtType"), 0, Get_Z_Construct_UEnum_Engine_ETextureSourceArtType_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ETextureSourceArtType"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TSAT_Uncompressed")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TSAT_PNGCompressed")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TSAT_DDSFile")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TSAT_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
			MetaData->SetValue(ReturnEnum, TEXT("TSAT_DDSFile.ToolTip"), TEXT("DDS file with header."));
			MetaData->SetValue(ReturnEnum, TEXT("TSAT_PNGCompressed.ToolTip"), TEXT("PNG compresed version of FColor Data[SrcWidth * SrcHeight]."));
			MetaData->SetValue(ReturnEnum, TEXT("TSAT_Uncompressed.ToolTip"), TEXT("FColor Data[SrcWidth * SrcHeight]."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_ETextureSourceArtType_CRC() { return 1797115469U; }
	UEnum* Z_Construct_UEnum_Engine_ETextureMipCount()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_ETextureMipCount_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ETextureMipCount"), 0, Get_Z_Construct_UEnum_Engine_ETextureMipCount_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ETextureMipCount"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TMC_ResidentMips")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TMC_AllMips")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TMC_AllMipsBiased")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TMC_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_ETextureMipCount_CRC() { return 2780658328U; }
	UEnum* Z_Construct_UEnum_Engine_ECompositeTextureMode()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_ECompositeTextureMode_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ECompositeTextureMode"), 0, Get_Z_Construct_UEnum_Engine_ECompositeTextureMode_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ECompositeTextureMode"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("CTM_Disabled")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("CTM_NormalRoughnessToRed")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("CTM_NormalRoughnessToGreen")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("CTM_NormalRoughnessToBlue")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("CTM_NormalRoughnessToAlpha")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("CTM_MAX")), 5));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("CTM_Disabled.DisplayName"), TEXT("Disabled"));
			MetaData->SetValue(ReturnEnum, TEXT("CTM_NormalRoughnessToAlpha.DisplayName"), TEXT("Add Normal Roughness To Alpha"));
			MetaData->SetValue(ReturnEnum, TEXT("CTM_NormalRoughnessToAlpha.ToolTip"), TEXT("CompositingTexture needs to be a normal map with the same or larger size."));
			MetaData->SetValue(ReturnEnum, TEXT("CTM_NormalRoughnessToBlue.DisplayName"), TEXT("Add Normal Roughness To Blue"));
			MetaData->SetValue(ReturnEnum, TEXT("CTM_NormalRoughnessToBlue.ToolTip"), TEXT("CompositingTexture needs to be a normal map with the same or larger size."));
			MetaData->SetValue(ReturnEnum, TEXT("CTM_NormalRoughnessToGreen.DisplayName"), TEXT("Add Normal Roughness To Green"));
			MetaData->SetValue(ReturnEnum, TEXT("CTM_NormalRoughnessToGreen.ToolTip"), TEXT("CompositingTexture needs to be a normal map with the same or larger size."));
			MetaData->SetValue(ReturnEnum, TEXT("CTM_NormalRoughnessToRed.DisplayName"), TEXT("Add Normal Roughness To Red"));
			MetaData->SetValue(ReturnEnum, TEXT("CTM_NormalRoughnessToRed.ToolTip"), TEXT("CompositingTexture needs to be a normal map with the same or larger size."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_ECompositeTextureMode_CRC() { return 3023437581U; }
	UEnum* Z_Construct_UEnum_Engine_TextureAddress()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_TextureAddress_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("TextureAddress"), 0, Get_Z_Construct_UEnum_Engine_TextureAddress_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TextureAddress"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TA_Wrap")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TA_Clamp")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TA_Mirror")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TA_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
			MetaData->SetValue(ReturnEnum, TEXT("TA_Clamp.DisplayName"), TEXT("Clamp"));
			MetaData->SetValue(ReturnEnum, TEXT("TA_Mirror.DisplayName"), TEXT("Mirror"));
			MetaData->SetValue(ReturnEnum, TEXT("TA_Wrap.DisplayName"), TEXT("Wrap"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_TextureAddress_CRC() { return 4110951383U; }
	UEnum* Z_Construct_UEnum_Engine_TextureFilter()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_TextureFilter_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("TextureFilter"), 0, Get_Z_Construct_UEnum_Engine_TextureFilter_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TextureFilter"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TF_Nearest")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TF_Bilinear")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TF_Trilinear")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TF_Default")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TF_MAX")), 4));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
			MetaData->SetValue(ReturnEnum, TEXT("TF_Bilinear.DisplayName"), TEXT("Bi-linear"));
			MetaData->SetValue(ReturnEnum, TEXT("TF_Default.DisplayName"), TEXT("Default (from Texture Group)"));
			MetaData->SetValue(ReturnEnum, TEXT("TF_Default.ToolTip"), TEXT("Use setting from the Texture Group."));
			MetaData->SetValue(ReturnEnum, TEXT("TF_Nearest.DisplayName"), TEXT("Nearest"));
			MetaData->SetValue(ReturnEnum, TEXT("TF_Trilinear.DisplayName"), TEXT("Tri-linear"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_TextureFilter_CRC() { return 1211565807U; }
	UEnum* Z_Construct_UEnum_Engine_TextureCompressionSettings()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_TextureCompressionSettings_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("TextureCompressionSettings"), 0, Get_Z_Construct_UEnum_Engine_TextureCompressionSettings_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TextureCompressionSettings"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TC_Default")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TC_Normalmap")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TC_Masks")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TC_Grayscale")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TC_Displacementmap")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TC_VectorDisplacementmap")), 5));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TC_HDR")), 6));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TC_EditorIcon")), 7));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TC_Alpha")), 8));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TC_DistanceFieldFont")), 9));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TC_HDR_Compressed")), 10));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TC_BC7")), 11));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TC_MAX")), 12));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
			MetaData->SetValue(ReturnEnum, TEXT("TC_Alpha.DisplayName"), TEXT("Alpha (no sRGB, BC4 on DX11)"));
			MetaData->SetValue(ReturnEnum, TEXT("TC_BC7.DisplayName"), TEXT("BC7 (DX11, optional A)"));
			MetaData->SetValue(ReturnEnum, TEXT("TC_Default.DisplayName"), TEXT("Default (DXT1/5, BC1/5 on DX11)"));
			MetaData->SetValue(ReturnEnum, TEXT("TC_Displacementmap.DisplayName"), TEXT("Displacementmap (8/16bit)"));
			MetaData->SetValue(ReturnEnum, TEXT("TC_DistanceFieldFont.DisplayName"), TEXT("DistanceFieldFont (R8)"));
			MetaData->SetValue(ReturnEnum, TEXT("TC_EditorIcon.DisplayName"), TEXT("UserInterface2D (RGBA)"));
			MetaData->SetValue(ReturnEnum, TEXT("TC_Grayscale.DisplayName"), TEXT("Grayscale (R8, RGB8 sRGB)"));
			MetaData->SetValue(ReturnEnum, TEXT("TC_HDR.DisplayName"), TEXT("HDR (RGB, no sRGB)"));
			MetaData->SetValue(ReturnEnum, TEXT("TC_HDR_Compressed.DisplayName"), TEXT("HDRCompressed (RGB, BC6H, DX11)"));
			MetaData->SetValue(ReturnEnum, TEXT("TC_Masks.DisplayName"), TEXT("Masks (no sRGB)"));
			MetaData->SetValue(ReturnEnum, TEXT("TC_Normalmap.DisplayName"), TEXT("Normalmap (DXT5, BC5 on DX11)"));
			MetaData->SetValue(ReturnEnum, TEXT("TC_VectorDisplacementmap.DisplayName"), TEXT("VectorDisplacementmap (RGBA8)"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("This needs to be mirrored in EditorFactories.cpp."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_TextureCompressionSettings_CRC() { return 1010554418U; }
	UScriptStruct* Z_Construct_UScriptStruct_FTexturePlatformData()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FTexturePlatformData_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("TexturePlatformData"), sizeof(FTexturePlatformData), Get_Z_Construct_UScriptStruct_FTexturePlatformData_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TexturePlatformData"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FTexturePlatformData>, EStructFlags(0x00000001));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Platform-specific data used by the texture resource at runtime."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FTexturePlatformData_CRC() { return 3349737671U; }
	UScriptStruct* Z_Construct_UScriptStruct_FTextureSource()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FTextureSource_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("TextureSource"), sizeof(FTextureSource), Get_Z_Construct_UScriptStruct_FTextureSource_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TextureSource"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FTextureSource>, EStructFlags(0x00000001));
#if WITH_EDITORONLY_DATA
			UProperty* NewProp_Format = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Format"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(Format, FTextureSource), 0x0000000800020001, Z_Construct_UEnum_Engine_ETextureSourceFormat());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bGuidIsHash, FTextureSource, bool);
			UProperty* NewProp_bGuidIsHash = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bGuidIsHash"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bGuidIsHash, FTextureSource), 0x0000000800020001, CPP_BOOL_PROPERTY_BITMASK(bGuidIsHash, FTextureSource), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bPNGCompressed, FTextureSource, bool);
			UProperty* NewProp_bPNGCompressed = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bPNGCompressed"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bPNGCompressed, FTextureSource), 0x0000000800020001, CPP_BOOL_PROPERTY_BITMASK(bPNGCompressed, FTextureSource), sizeof(bool), true);
			UProperty* NewProp_NumMips = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("NumMips"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(NumMips, FTextureSource), 0x0000000800020001);
			UProperty* NewProp_NumSlices = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("NumSlices"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(NumSlices, FTextureSource), 0x0000000800020001);
			UProperty* NewProp_SizeY = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SizeY"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(SizeY, FTextureSource), 0x0000000800020001);
			UProperty* NewProp_SizeX = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SizeX"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(SizeX, FTextureSource), 0x0000000800020001);
			UProperty* NewProp_Id = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Id"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Id, FTextureSource), 0x0000000800020001, Z_Construct_UScriptStruct_FGuid());
#endif // WITH_EDITORONLY_DATA
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Texture source data management."));
			MetaData->SetValue(NewProp_Format, TEXT("Category"), TEXT("TextureSource"));
			MetaData->SetValue(NewProp_Format, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
			MetaData->SetValue(NewProp_Format, TEXT("ToolTip"), TEXT("Format in which the source data is stored."));
			MetaData->SetValue(NewProp_bGuidIsHash, TEXT("Category"), TEXT("TextureSource"));
			MetaData->SetValue(NewProp_bGuidIsHash, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
			MetaData->SetValue(NewProp_bGuidIsHash, TEXT("ToolTip"), TEXT("Legacy textures use a hash instead of a GUID."));
			MetaData->SetValue(NewProp_bPNGCompressed, TEXT("Category"), TEXT("TextureSource"));
			MetaData->SetValue(NewProp_bPNGCompressed, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
			MetaData->SetValue(NewProp_bPNGCompressed, TEXT("ToolTip"), TEXT("RGBA8 source data is optionally compressed as PNG."));
			MetaData->SetValue(NewProp_NumMips, TEXT("Category"), TEXT("TextureSource"));
			MetaData->SetValue(NewProp_NumMips, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
			MetaData->SetValue(NewProp_NumMips, TEXT("ToolTip"), TEXT("Number of mips provided as source data for the texture."));
			MetaData->SetValue(NewProp_NumSlices, TEXT("Category"), TEXT("TextureSource"));
			MetaData->SetValue(NewProp_NumSlices, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
			MetaData->SetValue(NewProp_NumSlices, TEXT("ToolTip"), TEXT("Depth (volume textures) or faces (cube maps)."));
			MetaData->SetValue(NewProp_SizeY, TEXT("Category"), TEXT("TextureSource"));
			MetaData->SetValue(NewProp_SizeY, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
			MetaData->SetValue(NewProp_SizeY, TEXT("ToolTip"), TEXT("Height of the texture."));
			MetaData->SetValue(NewProp_SizeX, TEXT("Category"), TEXT("TextureSource"));
			MetaData->SetValue(NewProp_SizeX, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
			MetaData->SetValue(NewProp_SizeX, TEXT("ToolTip"), TEXT("Width of the texture."));
			MetaData->SetValue(NewProp_Id, TEXT("Category"), TEXT("TextureSource"));
			MetaData->SetValue(NewProp_Id, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
			MetaData->SetValue(NewProp_Id, TEXT("ToolTip"), TEXT("GUID used to track changes to the source data."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FTextureSource_CRC() { return 2083628176U; }
	UClass* Z_Construct_UClass_UTexture_NoRegister()
	{
		return UTexture::StaticClass();
	}
	UClass* Z_Construct_UClass_UTexture()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UTexture::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880081;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_LODGroup = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LODGroup"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(LODGroup, UTexture), 0x0000010000000005, Z_Construct_UEnum_Engine_TextureGroup());
				UProperty* NewProp_Filter = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Filter"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(Filter, UTexture), 0x0000050000000005, Z_Construct_UEnum_Engine_TextureFilter());
				UProperty* NewProp_CompressionSettings = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CompressionSettings"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(CompressionSettings, UTexture), 0x0000010000000005, Z_Construct_UEnum_Engine_TextureCompressionSettings());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAsyncResourceReleaseHasBeenStarted, UTexture, uint8);
				UProperty* NewProp_bAsyncResourceReleaseHasBeenStarted = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAsyncResourceReleaseHasBeenStarted"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAsyncResourceReleaseHasBeenStarted, UTexture), 0x0000000000002000, CPP_BOOL_PROPERTY_BITMASK(bAsyncResourceReleaseHasBeenStarted, UTexture), sizeof(uint8), false);
				UProperty* NewProp_CachedCombinedLODBias = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CachedCombinedLODBias"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(CachedCombinedLODBias, UTexture), 0x0000000000002000);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseCinematicMipLevels, UTexture, uint8);
				UProperty* NewProp_bUseCinematicMipLevels = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUseCinematicMipLevels"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseCinematicMipLevels, UTexture), 0x0000000000002000, CPP_BOOL_PROPERTY_BITMASK(bUseCinematicMipLevels, UTexture), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bNoTiling, UTexture, uint8);
				UProperty* NewProp_bNoTiling = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bNoTiling"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bNoTiling, UTexture), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bNoTiling, UTexture), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(NeverStream, UTexture, uint8);
				UProperty* NewProp_NeverStream = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NeverStream"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(NeverStream, UTexture), 0x0000050000000005, CPP_BOOL_PROPERTY_BITMASK(NeverStream, UTexture), sizeof(uint8), false);
#if WITH_EDITORONLY_DATA
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseLegacyGamma, UTexture, uint8);
				UProperty* NewProp_bUseLegacyGamma = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUseLegacyGamma"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseLegacyGamma, UTexture), 0x0000040800000005, CPP_BOOL_PROPERTY_BITMASK(bUseLegacyGamma, UTexture), sizeof(uint8), false);
#endif // WITH_EDITORONLY_DATA
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(SRGB, UTexture, uint8);
				UProperty* NewProp_SRGB = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SRGB"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(SRGB, UTexture), 0x0000010000000005, CPP_BOOL_PROPERTY_BITMASK(SRGB, UTexture), sizeof(uint8), false);
				UProperty* NewProp_NumCinematicMipLevels = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NumCinematicMipLevels"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(NumCinematicMipLevels, UTexture), 0x0000040000000005);
				UProperty* NewProp_LODBias = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LODBias"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(LODBias, UTexture), 0x0000010000000005);
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_CompositePower = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CompositePower"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(CompositePower, UTexture), 0x0000040800000005);
				UProperty* NewProp_CompositeTextureMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CompositeTextureMode"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(CompositeTextureMode, UTexture), 0x0000040800000005, Z_Construct_UEnum_Engine_ECompositeTextureMode());
				UProperty* NewProp_CompositeTexture = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CompositeTexture"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(CompositeTexture, UTexture), 0x0000000800000005, Z_Construct_UClass_UTexture_NoRegister());
				UProperty* NewProp_MipGenSettings = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MipGenSettings"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(MipGenSettings, UTexture), 0x0000000800000005, Z_Construct_UEnum_Engine_TextureMipGenSettings());
				UProperty* NewProp_ChromaKeyColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ChromaKeyColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ChromaKeyColor, UTexture), 0x0000000800000005, Z_Construct_UScriptStruct_FColor());
				UProperty* NewProp_ChromaKeyThreshold = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ChromaKeyThreshold"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ChromaKeyThreshold, UTexture), 0x0000000800000005);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bChromaKeyTexture, UTexture, bool);
				UProperty* NewProp_bChromaKeyTexture = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bChromaKeyTexture"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bChromaKeyTexture, UTexture), 0x0000000800000005, CPP_BOOL_PROPERTY_BITMASK(bChromaKeyTexture, UTexture), sizeof(bool), true);
				UProperty* NewProp_PaddingColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PaddingColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PaddingColor, UTexture), 0x0000000800000005, Z_Construct_UScriptStruct_FColor());
				UProperty* NewProp_PowerOfTwoMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PowerOfTwoMode"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(PowerOfTwoMode, UTexture), 0x0000000800000005, Z_Construct_UEnum_Engine_ETexturePowerOfTwoSetting());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bForcePVRTC4, UTexture, uint8);
				UProperty* NewProp_bForcePVRTC4 = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bForcePVRTC4"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bForcePVRTC4, UTexture), 0x0000000800000000, CPP_BOOL_PROPERTY_BITMASK(bForcePVRTC4, UTexture), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bFlipGreenChannel, UTexture, uint8);
				UProperty* NewProp_bFlipGreenChannel = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bFlipGreenChannel"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bFlipGreenChannel, UTexture), 0x0000040800000005, CPP_BOOL_PROPERTY_BITMASK(bFlipGreenChannel, UTexture), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bPreserveBorder, UTexture, uint8);
				UProperty* NewProp_bPreserveBorder = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bPreserveBorder"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bPreserveBorder, UTexture), 0x0000040800000005, CPP_BOOL_PROPERTY_BITMASK(bPreserveBorder, UTexture), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDitherMipMapAlpha, UTexture, uint8);
				UProperty* NewProp_bDitherMipMapAlpha = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bDitherMipMapAlpha"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDitherMipMapAlpha, UTexture), 0x0000040800000005, CPP_BOOL_PROPERTY_BITMASK(bDitherMipMapAlpha, UTexture), sizeof(uint8), false);
				UProperty* NewProp_MaxTextureSize = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxTextureSize"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MaxTextureSize, UTexture), 0x0000040800000015);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(DeferCompression, UTexture, uint8);
				UProperty* NewProp_DeferCompression = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DeferCompression"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(DeferCompression, UTexture), 0x0000000800000005, CPP_BOOL_PROPERTY_BITMASK(DeferCompression, UTexture), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(CompressionNone, UTexture, uint8);
				UProperty* NewProp_CompressionNone = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CompressionNone"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(CompressionNone, UTexture), 0x0000000800000000, CPP_BOOL_PROPERTY_BITMASK(CompressionNone, UTexture), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(CompressionNoAlpha, UTexture, uint8);
				UProperty* NewProp_CompressionNoAlpha = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CompressionNoAlpha"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(CompressionNoAlpha, UTexture), 0x0000000800000005, CPP_BOOL_PROPERTY_BITMASK(CompressionNoAlpha, UTexture), sizeof(uint8), false);
				UProperty* NewProp_AdjustMaxAlpha = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AdjustMaxAlpha"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(AdjustMaxAlpha, UTexture), 0x0000000800000005);
				UProperty* NewProp_AdjustMinAlpha = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AdjustMinAlpha"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(AdjustMinAlpha, UTexture), 0x0000000800000005);
				UProperty* NewProp_AdjustHue = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AdjustHue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(AdjustHue, UTexture), 0x0000000800000005);
				UProperty* NewProp_AdjustRGBCurve = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AdjustRGBCurve"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(AdjustRGBCurve, UTexture), 0x0000000800000005);
				UProperty* NewProp_AdjustSaturation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AdjustSaturation"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(AdjustSaturation, UTexture), 0x0000000800000005);
				UProperty* NewProp_AdjustVibrance = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AdjustVibrance"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(AdjustVibrance, UTexture), 0x0000000800000005);
				UProperty* NewProp_AdjustBrightnessCurve = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AdjustBrightnessCurve"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(AdjustBrightnessCurve, UTexture), 0x0000000800000005);
				UProperty* NewProp_AdjustBrightness = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AdjustBrightness"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(AdjustBrightness, UTexture), 0x0000000800000005);
				UProperty* NewProp_AssetImportData = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AssetImportData"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(AssetImportData, UTexture), 0x00020008000a0009, Z_Construct_UClass_UAssetImportData_NoRegister());
				UProperty* NewProp_SourceFilePath = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SourceFilePath"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(SourceFilePath_DEPRECATED, UTexture), 0x0000000820000000);
				UProperty* NewProp_LightingGuid = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LightingGuid"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LightingGuid, UTexture), 0x0000000800000000, Z_Construct_UScriptStruct_FGuid());
				UProperty* NewProp_Source = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Source"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Source, UTexture), 0x0000000800000000, Z_Construct_UScriptStruct_FTextureSource());
#endif // WITH_EDITORONLY_DATA
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/Texture.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_LODGroup, TEXT("Category"), TEXT("LevelOfDetail"));
				MetaData->SetValue(NewProp_LODGroup, TEXT("DisplayName"), TEXT("Texture Group"));
				MetaData->SetValue(NewProp_LODGroup, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_LODGroup, TEXT("ToolTip"), TEXT("Texture group this texture belongs to"));
				MetaData->SetValue(NewProp_Filter, TEXT("Category"), TEXT("Texture"));
				MetaData->SetValue(NewProp_Filter, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_Filter, TEXT("ToolTip"), TEXT("The texture filtering mode to use when sampling this texture."));
				MetaData->SetValue(NewProp_CompressionSettings, TEXT("Category"), TEXT("Compression"));
				MetaData->SetValue(NewProp_CompressionSettings, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_CompressionSettings, TEXT("ToolTip"), TEXT("Compression settings to use when building the texture."));
				MetaData->SetValue(NewProp_bAsyncResourceReleaseHasBeenStarted, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_bAsyncResourceReleaseHasBeenStarted, TEXT("ToolTip"), TEXT("Whether the async resource release process has already been kicked off or not"));
				MetaData->SetValue(NewProp_CachedCombinedLODBias, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_CachedCombinedLODBias, TEXT("ToolTip"), TEXT("Cached combined group and texture LOD bias to use."));
				MetaData->SetValue(NewProp_bUseCinematicMipLevels, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_bUseCinematicMipLevels, TEXT("ToolTip"), TEXT("Whether to use the extra cinematic quality mip-levels, when we're forcing mip-levels to be resident."));
				MetaData->SetValue(NewProp_bNoTiling, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_bNoTiling, TEXT("ToolTip"), TEXT("If true, the RHI texture will be created using TexCreate_NoTiling"));
				MetaData->SetValue(NewProp_NeverStream, TEXT("Category"), TEXT("Texture"));
				MetaData->SetValue(NewProp_NeverStream, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_bUseLegacyGamma, TEXT("Category"), TEXT("Texture"));
				MetaData->SetValue(NewProp_bUseLegacyGamma, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_bUseLegacyGamma, TEXT("ToolTip"), TEXT("A flag for using the simplified legacy gamma space e.g pow(color,1/2.2) for converting from FColor to FLinearColor, if we're doing sRGB."));
				MetaData->SetValue(NewProp_SRGB, TEXT("Category"), TEXT("Texture"));
				MetaData->SetValue(NewProp_SRGB, TEXT("DisplayName"), TEXT("sRGB"));
				MetaData->SetValue(NewProp_SRGB, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_SRGB, TEXT("ToolTip"), TEXT("This should be unchecked if using alpha channels individually as masks."));
				MetaData->SetValue(NewProp_NumCinematicMipLevels, TEXT("Category"), TEXT("LevelOfDetail"));
				MetaData->SetValue(NewProp_NumCinematicMipLevels, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_NumCinematicMipLevels, TEXT("ToolTip"), TEXT("Number of mip-levels to use for cinematic quality."));
				MetaData->SetValue(NewProp_LODBias, TEXT("Category"), TEXT("LevelOfDetail"));
				MetaData->SetValue(NewProp_LODBias, TEXT("DisplayName"), TEXT("LOD Bias"));
				MetaData->SetValue(NewProp_LODBias, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_LODBias, TEXT("ToolTip"), TEXT("A bias to the index of the top mip level to use."));
				MetaData->SetValue(NewProp_CompositePower, TEXT("Category"), TEXT("Compositing"));
				MetaData->SetValue(NewProp_CompositePower, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_CompositePower, TEXT("ToolTip"), TEXT("default 1, high values result in a stronger effect e.g 1, 2, 4, 8\nthis is no slider because the texture update would not be fast enough"));
				MetaData->SetValue(NewProp_CompositeTextureMode, TEXT("Category"), TEXT("Compositing"));
				MetaData->SetValue(NewProp_CompositeTextureMode, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_CompositeTextureMode, TEXT("ToolTip"), TEXT("defines how the CompositeTexture is applied, e.g. CTM_RoughnessFromNormalAlpha"));
				MetaData->SetValue(NewProp_CompositeTexture, TEXT("Category"), TEXT("Compositing"));
				MetaData->SetValue(NewProp_CompositeTexture, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_CompositeTexture, TEXT("ToolTip"), TEXT("Can be defined to modify the roughness based on the normal map variation (mostly from mip maps).\nMaxAlpha comes in handy to define a base roughness if no source alpha was there.\nMake sure the normal map has at least as many mips as this texture."));
				MetaData->SetValue(NewProp_MipGenSettings, TEXT("Category"), TEXT("LevelOfDetail"));
				MetaData->SetValue(NewProp_MipGenSettings, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_MipGenSettings, TEXT("ToolTip"), TEXT("Per asset specific setting to define the mip-map generation properties like sharpening and kernel size."));
				MetaData->SetValue(NewProp_ChromaKeyColor, TEXT("Category"), TEXT("Adjustments"));
				MetaData->SetValue(NewProp_ChromaKeyColor, TEXT("EditCondition"), TEXT("bChromaKeyTexture"));
				MetaData->SetValue(NewProp_ChromaKeyColor, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_ChromaKeyColor, TEXT("ToolTip"), TEXT("The color that will be replaced with transparent black if chroma keying is enabled"));
				MetaData->SetValue(NewProp_ChromaKeyThreshold, TEXT("Category"), TEXT("Adjustments"));
				MetaData->SetValue(NewProp_ChromaKeyThreshold, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_ChromaKeyThreshold, TEXT("EditCondition"), TEXT("bChromaKeyTexture"));
				MetaData->SetValue(NewProp_ChromaKeyThreshold, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_ChromaKeyThreshold, TEXT("ToolTip"), TEXT("The threshold that components have to match for the texel to be considered equal to the ChromaKeyColor when chroma keying (<=, set to 0 to require a perfect exact match)"));
				MetaData->SetValue(NewProp_bChromaKeyTexture, TEXT("Category"), TEXT("Adjustments"));
				MetaData->SetValue(NewProp_bChromaKeyTexture, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_bChromaKeyTexture, TEXT("ToolTip"), TEXT("Whether to chroma key the image, replacing any pixels that match ChromaKeyColor with transparent black"));
				MetaData->SetValue(NewProp_PaddingColor, TEXT("Category"), TEXT("Texture"));
				MetaData->SetValue(NewProp_PaddingColor, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_PaddingColor, TEXT("ToolTip"), TEXT("The color used to pad the texture out if it is resized due to PowerOfTwoMode"));
				MetaData->SetValue(NewProp_PowerOfTwoMode, TEXT("Category"), TEXT("Texture"));
				MetaData->SetValue(NewProp_PowerOfTwoMode, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_PowerOfTwoMode, TEXT("ToolTip"), TEXT("How to pad the texture to a power of 2 size (if necessary)"));
				MetaData->SetValue(NewProp_bForcePVRTC4, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_bForcePVRTC4, TEXT("ToolTip"), TEXT("For DXT1 textures, setting this will cause the texture to be twice the size, but better looking, on iPhone"));
				MetaData->SetValue(NewProp_bFlipGreenChannel, TEXT("Category"), TEXT("Texture"));
				MetaData->SetValue(NewProp_bFlipGreenChannel, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_bFlipGreenChannel, TEXT("ToolTip"), TEXT("When true the texture's green channel will be inverted. This is useful for some normal maps."));
				MetaData->SetValue(NewProp_bPreserveBorder, TEXT("Category"), TEXT("LevelOfDetail"));
				MetaData->SetValue(NewProp_bPreserveBorder, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_bPreserveBorder, TEXT("ToolTip"), TEXT("When true the texture's border will be preserved during mipmap generation."));
				MetaData->SetValue(NewProp_bDitherMipMapAlpha, TEXT("Category"), TEXT("Texture"));
				MetaData->SetValue(NewProp_bDitherMipMapAlpha, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_bDitherMipMapAlpha, TEXT("ToolTip"), TEXT("When true, the alpha channel of mip-maps and the base image are dithered for smooth LOD transitions."));
				MetaData->SetValue(NewProp_MaxTextureSize, TEXT("Category"), TEXT("Compression"));
				MetaData->SetValue(NewProp_MaxTextureSize, TEXT("ClampMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_MaxTextureSize, TEXT("DisplayName"), TEXT("Maximum Texture Size"));
				MetaData->SetValue(NewProp_MaxTextureSize, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_MaxTextureSize, TEXT("ToolTip"), TEXT("The maximum resolution for generated textures. A value of 0 means the maximum size for the format on each platform, except HDR long/lat cubemaps, which default to a resolution of 512."));
				MetaData->SetValue(NewProp_DeferCompression, TEXT("Category"), TEXT("Compression"));
				MetaData->SetValue(NewProp_DeferCompression, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_DeferCompression, TEXT("ToolTip"), TEXT("If enabled, defer compression of the texture until save."));
				MetaData->SetValue(NewProp_CompressionNone, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_CompressionNoAlpha, TEXT("Category"), TEXT("Compression"));
				MetaData->SetValue(NewProp_CompressionNoAlpha, TEXT("DisplayName"), TEXT("Compress Without Alpha"));
				MetaData->SetValue(NewProp_CompressionNoAlpha, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_CompressionNoAlpha, TEXT("ToolTip"), TEXT("If enabled, the texture's alpha channel will be discarded during compression"));
				MetaData->SetValue(NewProp_AdjustMaxAlpha, TEXT("Category"), TEXT("Adjustments"));
				MetaData->SetValue(NewProp_AdjustMaxAlpha, TEXT("DisplayName"), TEXT("Max Alpha"));
				MetaData->SetValue(NewProp_AdjustMaxAlpha, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_AdjustMaxAlpha, TEXT("ToolTip"), TEXT("Remaps the alpha to the specified min/max range, defines the new value of 1 (Non-destructive; Requires texture source art to be available.)"));
				MetaData->SetValue(NewProp_AdjustMinAlpha, TEXT("Category"), TEXT("Adjustments"));
				MetaData->SetValue(NewProp_AdjustMinAlpha, TEXT("DisplayName"), TEXT("Min Alpha"));
				MetaData->SetValue(NewProp_AdjustMinAlpha, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_AdjustMinAlpha, TEXT("ToolTip"), TEXT("Remaps the alpha to the specified min/max range, defines the new value of 0 (Non-destructive; Requires texture source art to be available.)"));
				MetaData->SetValue(NewProp_AdjustHue, TEXT("Category"), TEXT("Adjustments"));
				MetaData->SetValue(NewProp_AdjustHue, TEXT("ClampMax"), TEXT("360.0"));
				MetaData->SetValue(NewProp_AdjustHue, TEXT("ClampMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_AdjustHue, TEXT("DisplayName"), TEXT("Hue"));
				MetaData->SetValue(NewProp_AdjustHue, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_AdjustHue, TEXT("ToolTip"), TEXT("Static texture hue adjustment (0 - 360) (offsets HSV hue by value in degrees.)  (Non-destructive; Requires texture source art to be available.)"));
				MetaData->SetValue(NewProp_AdjustRGBCurve, TEXT("Category"), TEXT("Adjustments"));
				MetaData->SetValue(NewProp_AdjustRGBCurve, TEXT("DisplayName"), TEXT("RGBCurve"));
				MetaData->SetValue(NewProp_AdjustRGBCurve, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_AdjustRGBCurve, TEXT("ToolTip"), TEXT("Static texture RGB curve adjustment (raises linear-space RGB color to the specified power.)  (Non-destructive; Requires texture source art to be available.)"));
				MetaData->SetValue(NewProp_AdjustSaturation, TEXT("Category"), TEXT("Adjustments"));
				MetaData->SetValue(NewProp_AdjustSaturation, TEXT("DisplayName"), TEXT("Saturation"));
				MetaData->SetValue(NewProp_AdjustSaturation, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_AdjustSaturation, TEXT("ToolTip"), TEXT("Static texture saturation adjustment (scales HSV saturation.)  (Non-destructive; Requires texture source art to be available.)"));
				MetaData->SetValue(NewProp_AdjustVibrance, TEXT("Category"), TEXT("Adjustments"));
				MetaData->SetValue(NewProp_AdjustVibrance, TEXT("ClampMax"), TEXT("1.0"));
				MetaData->SetValue(NewProp_AdjustVibrance, TEXT("ClampMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_AdjustVibrance, TEXT("DisplayName"), TEXT("Vibrance"));
				MetaData->SetValue(NewProp_AdjustVibrance, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_AdjustVibrance, TEXT("ToolTip"), TEXT("Static texture \"vibrance\" adjustment (0 - 1) (HSV saturation algorithm adjustment.)  (Non-destructive; Requires texture source art to be available.)"));
				MetaData->SetValue(NewProp_AdjustBrightnessCurve, TEXT("Category"), TEXT("Adjustments"));
				MetaData->SetValue(NewProp_AdjustBrightnessCurve, TEXT("DisplayName"), TEXT("Brightness Curve"));
				MetaData->SetValue(NewProp_AdjustBrightnessCurve, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_AdjustBrightnessCurve, TEXT("ToolTip"), TEXT("Static texture curve adjustment (raises HSV value to the specified power.)  (Non-destructive; Requires texture source art to be available.)"));
				MetaData->SetValue(NewProp_AdjustBrightness, TEXT("Category"), TEXT("Adjustments"));
				MetaData->SetValue(NewProp_AdjustBrightness, TEXT("DisplayName"), TEXT("Brightness"));
				MetaData->SetValue(NewProp_AdjustBrightness, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_AdjustBrightness, TEXT("ToolTip"), TEXT("Static texture brightness adjustment (scales HSV value.)  (Non-destructive; Requires texture source art to be available.)"));
				MetaData->SetValue(NewProp_AssetImportData, TEXT("Category"), TEXT("ImportSettings"));
				MetaData->SetValue(NewProp_AssetImportData, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_AssetImportData, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_SourceFilePath, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_LightingGuid, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_LightingGuid, TEXT("ToolTip"), TEXT("Unique ID for this material, used for caching during distributed lighting"));
				MetaData->SetValue(NewProp_Source, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UTexture(Z_Construct_UClass_UTexture, TEXT("UTexture"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UTexture);
	UFunction* Z_Construct_UFunction_UTexture2D_Blueprint_GetSizeX()
	{
		struct Texture2D_eventBlueprint_GetSizeX_Parms
		{
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UTexture2D();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Blueprint_GetSizeX"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(Texture2D_eventBlueprint_GetSizeX_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, Texture2D_eventBlueprint_GetSizeX_Parms), 0x0000000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Rendering|Texture"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("GetSizeX"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture2D.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the X size of the texture, in pixels"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTexture2D_Blueprint_GetSizeY()
	{
		struct Texture2D_eventBlueprint_GetSizeY_Parms
		{
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UTexture2D();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Blueprint_GetSizeY"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(Texture2D_eventBlueprint_GetSizeY_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, Texture2D_eventBlueprint_GetSizeY_Parms), 0x0000000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Rendering|Texture"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("GetSizeY"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture2D.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the Y size of the texture, in pixels"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UTexture2D_NoRegister()
	{
		return UTexture2D::StaticClass();
	}
	UClass* Z_Construct_UClass_UTexture2D()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UTexture();
			Z_Construct_UPackage_Engine();
			OuterClass = UTexture2D::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880080;

				OuterClass->LinkChild(Z_Construct_UFunction_UTexture2D_Blueprint_GetSizeX());
				OuterClass->LinkChild(Z_Construct_UFunction_UTexture2D_Blueprint_GetSizeY());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_AddressY = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AddressY"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(AddressY, UTexture2D), 0x0000050000000005, Z_Construct_UEnum_Engine_TextureAddress());
				UProperty* NewProp_AddressX = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AddressX"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(AddressX, UTexture2D), 0x0000050000000005, Z_Construct_UEnum_Engine_TextureAddress());
#if WITH_EDITORONLY_DATA
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bHasBeenPaintedInEditor, UTexture2D, uint8);
				UProperty* NewProp_bHasBeenPaintedInEditor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bHasBeenPaintedInEditor"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bHasBeenPaintedInEditor, UTexture2D), 0x0000000800000000, CPP_BOOL_PROPERTY_BITMASK(bHasBeenPaintedInEditor, UTexture2D), sizeof(uint8), false);
#endif // WITH_EDITORONLY_DATA
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bGlobalForceMipLevelsToBeResident, UTexture2D, uint8);
				UProperty* NewProp_bGlobalForceMipLevelsToBeResident = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bGlobalForceMipLevelsToBeResident"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bGlobalForceMipLevelsToBeResident, UTexture2D), 0x0000040000000015, CPP_BOOL_PROPERTY_BITMASK(bGlobalForceMipLevelsToBeResident, UTexture2D), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bForceMiplevelsToBeResident, UTexture2D, uint8);
				UProperty* NewProp_bForceMiplevelsToBeResident = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bForceMiplevelsToBeResident"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bForceMiplevelsToBeResident, UTexture2D), 0x0000000000002000, CPP_BOOL_PROPERTY_BITMASK(bForceMiplevelsToBeResident, UTexture2D), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bHasCancelationPending, UTexture2D, uint8);
				UProperty* NewProp_bHasCancelationPending = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bHasCancelationPending"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bHasCancelationPending, UTexture2D), 0x0000000400002000, CPP_BOOL_PROPERTY_BITMASK(bHasCancelationPending, UTexture2D), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsStreamable, UTexture2D, uint8);
				UProperty* NewProp_bIsStreamable = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsStreamable"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsStreamable, UTexture2D), 0x0000000400002000, CPP_BOOL_PROPERTY_BITMASK(bIsStreamable, UTexture2D), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTemporarilyDisableStreaming, UTexture2D, uint8);
				UProperty* NewProp_bTemporarilyDisableStreaming = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bTemporarilyDisableStreaming"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTemporarilyDisableStreaming, UTexture2D), 0x0000000000002000, CPP_BOOL_PROPERTY_BITMASK(bTemporarilyDisableStreaming, UTexture2D), sizeof(uint8), false);
				UProperty* NewProp_ForceMipLevelsToBeResidentTimestamp = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ForceMipLevelsToBeResidentTimestamp"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ForceMipLevelsToBeResidentTimestamp, UTexture2D), 0x0000000000002000);
				UProperty* NewProp_ImportedSize = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ImportedSize"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ImportedSize, UTexture2D), 0x0000000000000000, Z_Construct_UScriptStruct_FIntPoint());
				UProperty* NewProp_FirstResourceMemMip = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FirstResourceMemMip"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(FirstResourceMemMip, UTexture2D), 0x0000000000000000);
				UProperty* NewProp_StreamingIndex = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StreamingIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(StreamingIndex, UTexture2D), 0x0000000400202000);
				UProperty* NewProp_ResidentMips = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ResidentMips"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ResidentMips, UTexture2D), 0x0000000400002000);
				UProperty* NewProp_RequestedMips = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RequestedMips"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(RequestedMips, UTexture2D), 0x0000000400002000);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UTexture2D_Blueprint_GetSizeX()); // 318364701
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UTexture2D_Blueprint_GetSizeY()); // 3877543247
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/Texture2D.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture2D.h"));
				MetaData->SetValue(NewProp_AddressY, TEXT("Category"), TEXT("Texture"));
				MetaData->SetValue(NewProp_AddressY, TEXT("DisplayName"), TEXT("Y-axis Tiling Method"));
				MetaData->SetValue(NewProp_AddressY, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture2D.h"));
				MetaData->SetValue(NewProp_AddressY, TEXT("ToolTip"), TEXT("The addressing mode to use for the Y axis."));
				MetaData->SetValue(NewProp_AddressX, TEXT("Category"), TEXT("Texture"));
				MetaData->SetValue(NewProp_AddressX, TEXT("DisplayName"), TEXT("X-axis Tiling Method"));
				MetaData->SetValue(NewProp_AddressX, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture2D.h"));
				MetaData->SetValue(NewProp_AddressX, TEXT("ToolTip"), TEXT("The addressing mode to use for the X axis."));
				MetaData->SetValue(NewProp_bHasBeenPaintedInEditor, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture2D.h"));
				MetaData->SetValue(NewProp_bHasBeenPaintedInEditor, TEXT("ToolTip"), TEXT("Whether the texture has been painted in the editor."));
				MetaData->SetValue(NewProp_bGlobalForceMipLevelsToBeResident, TEXT("Category"), TEXT("LevelOfDetail"));
				MetaData->SetValue(NewProp_bGlobalForceMipLevelsToBeResident, TEXT("DisplayName"), TEXT("Global Force Resident Mip Levels"));
				MetaData->SetValue(NewProp_bGlobalForceMipLevelsToBeResident, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture2D.h"));
				MetaData->SetValue(NewProp_bGlobalForceMipLevelsToBeResident, TEXT("ToolTip"), TEXT("Global and serialized version of ForceMiplevelsToBeResident."));
				MetaData->SetValue(NewProp_bForceMiplevelsToBeResident, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture2D.h"));
				MetaData->SetValue(NewProp_bForceMiplevelsToBeResident, TEXT("ToolTip"), TEXT("Override whether to fully stream even if texture hasn't been rendered."));
				MetaData->SetValue(NewProp_bHasCancelationPending, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture2D.h"));
				MetaData->SetValue(NewProp_bHasCancelationPending, TEXT("ToolTip"), TEXT("Whether the current texture mip change request is pending cancellation."));
				MetaData->SetValue(NewProp_bIsStreamable, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture2D.h"));
				MetaData->SetValue(NewProp_bIsStreamable, TEXT("ToolTip"), TEXT("Whether the texture is currently streamable or not."));
				MetaData->SetValue(NewProp_bTemporarilyDisableStreaming, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture2D.h"));
				MetaData->SetValue(NewProp_bTemporarilyDisableStreaming, TEXT("ToolTip"), TEXT("True if streaming is temporarily disabled so we can update subregions of this texture's resource\n      without streaming clobbering it. Automatically cleared before saving."));
				MetaData->SetValue(NewProp_ForceMipLevelsToBeResidentTimestamp, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture2D.h"));
				MetaData->SetValue(NewProp_ForceMipLevelsToBeResidentTimestamp, TEXT("ToolTip"), TEXT("WorldSettings timestamp that tells the streamer to force all miplevels to be resident up until that time."));
				MetaData->SetValue(NewProp_ImportedSize, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture2D.h"));
				MetaData->SetValue(NewProp_ImportedSize, TEXT("ToolTip"), TEXT("The imported size of the texture. Only valid on cooked builds when texture source is not\navailable. Access ONLY via the GetImportedSize() accessor!"));
				MetaData->SetValue(NewProp_FirstResourceMemMip, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture2D.h"));
				MetaData->SetValue(NewProp_FirstResourceMemMip, TEXT("ToolTip"), TEXT("keep track of first mip level used for ResourceMem creation"));
				MetaData->SetValue(NewProp_StreamingIndex, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture2D.h"));
				MetaData->SetValue(NewProp_StreamingIndex, TEXT("ToolTip"), TEXT("FStreamingTexture index used by the texture streaming system."));
				MetaData->SetValue(NewProp_ResidentMips, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture2D.h"));
				MetaData->SetValue(NewProp_ResidentMips, TEXT("ToolTip"), TEXT("Number of miplevels currently resident."));
				MetaData->SetValue(NewProp_RequestedMips, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture2D.h"));
				MetaData->SetValue(NewProp_RequestedMips, TEXT("ToolTip"), TEXT("Number of miplevels the texture should have resident."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UTexture2D(Z_Construct_UClass_UTexture2D, TEXT("UTexture2D"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UTexture2D);
	UClass* Z_Construct_UClass_ULightMapTexture2D_NoRegister()
	{
		return ULightMapTexture2D::StaticClass();
	}
	UClass* Z_Construct_UClass_ULightMapTexture2D()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UTexture2D();
			Z_Construct_UPackage_Engine();
			OuterClass = ULightMapTexture2D::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/LightMapTexture2D.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/LightMapTexture2D.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ULightMapTexture2D(Z_Construct_UClass_ULightMapTexture2D, TEXT("ULightMapTexture2D"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(ULightMapTexture2D);
	UClass* Z_Construct_UClass_UShadowMapTexture2D_NoRegister()
	{
		return UShadowMapTexture2D::StaticClass();
	}
	UClass* Z_Construct_UClass_UShadowMapTexture2D()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UTexture2D();
			Z_Construct_UPackage_Engine();
			OuterClass = UShadowMapTexture2D::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ShadowmapFlags = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ShadowmapFlags"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(ShadowmapFlags, UShadowMapTexture2D), 0x0000000000000000, Z_Construct_UEnum_Engine_EShadowMapFlags());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/ShadowMapTexture2D.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/ShadowMapTexture2D.h"));
				MetaData->SetValue(NewProp_ShadowmapFlags, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/ShadowMapTexture2D.h"));
				MetaData->SetValue(NewProp_ShadowmapFlags, TEXT("ToolTip"), TEXT("Bit-field with shadowmap flags."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UShadowMapTexture2D(Z_Construct_UClass_UShadowMapTexture2D, TEXT("UShadowMapTexture2D"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UShadowMapTexture2D);
	UClass* Z_Construct_UClass_UTextureLightProfile_NoRegister()
	{
		return UTextureLightProfile::StaticClass();
	}
	UClass* Z_Construct_UClass_UTextureLightProfile()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UTexture2D();
			Z_Construct_UPackage_Engine();
			OuterClass = UTextureLightProfile::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_TextureMultiplier = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TextureMultiplier"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(TextureMultiplier, UTextureLightProfile), 0x0000000000020001);
				UProperty* NewProp_Brightness = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Brightness"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Brightness, UTextureLightProfile), 0x0000010000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object CompositeTexture Texture2D Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/TextureLightProfile.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TextureLightProfile.h"));
				MetaData->SetValue(NewProp_TextureMultiplier, TEXT("Category"), TEXT("TextureLightProfile"));
				MetaData->SetValue(NewProp_TextureMultiplier, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TextureLightProfile.h"));
				MetaData->SetValue(NewProp_TextureMultiplier, TEXT("ToolTip"), TEXT("Multiplier to map texture value to result to integrate over the sphere to 1.0f"));
				MetaData->SetValue(NewProp_Brightness, TEXT("Category"), TEXT("TextureLightProfile"));
				MetaData->SetValue(NewProp_Brightness, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TextureLightProfile.h"));
				MetaData->SetValue(NewProp_Brightness, TEXT("ToolTip"), TEXT("Light brightness in Lumens, imported from IES profile, <= 0 if the profile is used for masking only. Use with InverseSquareFalloff."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UTextureLightProfile(Z_Construct_UClass_UTextureLightProfile, TEXT("UTextureLightProfile"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UTextureLightProfile);
	UClass* Z_Construct_UClass_UTexture2DDynamic_NoRegister()
	{
		return UTexture2DDynamic::StaticClass();
	}
	UClass* Z_Construct_UClass_UTexture2DDynamic()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UTexture();
			Z_Construct_UPackage_Engine();
			OuterClass = UTexture2DDynamic::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Format = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Format"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(Format, UTexture2DDynamic), 0x0000000000002000, Z_Construct_UEnum_CoreUObject_EPixelFormat());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/Texture2DDynamic.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture2DDynamic.h"));
				MetaData->SetValue(NewProp_Format, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture2DDynamic.h"));
				MetaData->SetValue(NewProp_Format, TEXT("ToolTip"), TEXT("The format of the texture."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UTexture2DDynamic(Z_Construct_UClass_UTexture2DDynamic, TEXT("UTexture2DDynamic"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UTexture2DDynamic);
	UClass* Z_Construct_UClass_UTextureCube_NoRegister()
	{
		return UTextureCube::StaticClass();
	}
	UClass* Z_Construct_UClass_UTextureCube()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UTexture();
			Z_Construct_UPackage_Engine();
			OuterClass = UTextureCube::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/TextureCube.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TextureCube.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UTextureCube(Z_Construct_UClass_UTextureCube, TEXT("UTextureCube"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UTextureCube);
	UClass* Z_Construct_UClass_UTextureRenderTarget_NoRegister()
	{
		return UTextureRenderTarget::StaticClass();
	}
	UClass* Z_Construct_UClass_UTextureRenderTarget()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UTexture();
			Z_Construct_UPackage_Engine();
			OuterClass = UTextureRenderTarget::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880081;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_TargetGamma = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TargetGamma"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(TargetGamma, UTextureRenderTarget), 0x0000000000000005);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/TextureRenderTarget.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TextureRenderTarget.h"));
				MetaData->SetValue(NewProp_TargetGamma, TEXT("Category"), TEXT("TextureRenderTarget"));
				MetaData->SetValue(NewProp_TargetGamma, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TextureRenderTarget.h"));
				MetaData->SetValue(NewProp_TargetGamma, TEXT("ToolTip"), TEXT("Will override FTextureRenderTarget2DResource::GetDisplayGamma if > 0."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UTextureRenderTarget(Z_Construct_UClass_UTextureRenderTarget, TEXT("UTextureRenderTarget"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UTextureRenderTarget);
	UClass* Z_Construct_UClass_UTextureRenderTarget2D_NoRegister()
	{
		return UTextureRenderTarget2D::StaticClass();
	}
	UClass* Z_Construct_UClass_UTextureRenderTarget2D()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UTextureRenderTarget();
			Z_Construct_UPackage_Engine();
			OuterClass = UTextureRenderTarget2D::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_OverrideFormat = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OverrideFormat"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(OverrideFormat, UTextureRenderTarget2D), 0x0000000000000000, Z_Construct_UEnum_CoreUObject_EPixelFormat());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAutoGenerateMips, UTextureRenderTarget2D, uint8);
				UProperty* NewProp_bAutoGenerateMips = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAutoGenerateMips"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAutoGenerateMips, UTextureRenderTarget2D), 0x0000010000000015, CPP_BOOL_PROPERTY_BITMASK(bAutoGenerateMips, UTextureRenderTarget2D), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bHDR, UTextureRenderTarget2D, uint8);
				UProperty* NewProp_bHDR = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bHDR"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bHDR, UTextureRenderTarget2D), 0x0000010000000015, CPP_BOOL_PROPERTY_BITMASK(bHDR, UTextureRenderTarget2D), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bForceLinearGamma, UTextureRenderTarget2D, uint8);
				UProperty* NewProp_bForceLinearGamma = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bForceLinearGamma"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bForceLinearGamma, UTextureRenderTarget2D), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bForceLinearGamma, UTextureRenderTarget2D), sizeof(uint8), false);
				UProperty* NewProp_AddressY = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AddressY"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(AddressY, UTextureRenderTarget2D), 0x0000010000000005, Z_Construct_UEnum_Engine_TextureAddress());
				UProperty* NewProp_AddressX = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AddressX"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(AddressX, UTextureRenderTarget2D), 0x0000010000000005, Z_Construct_UEnum_Engine_TextureAddress());
				UProperty* NewProp_ClearColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ClearColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ClearColor, UTextureRenderTarget2D), 0x0000000000000000, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_SizeY = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SizeY"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(SizeY, UTextureRenderTarget2D), 0x0000010000000015);
				UProperty* NewProp_SizeX = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SizeX"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(SizeX, UTextureRenderTarget2D), 0x0000010000000015);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Texture"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/TextureRenderTarget2D.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TextureRenderTarget2D.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("TextureRenderTarget2D\n\n2D render target texture resource. This can be used as a target\nfor rendering as well as rendered as a regular 2D texture resource."));
				MetaData->SetValue(NewProp_OverrideFormat, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TextureRenderTarget2D.h"));
				MetaData->SetValue(NewProp_OverrideFormat, TEXT("ToolTip"), TEXT("Normally the format is derived from bHDR, this allows code to set the format explicitly."));
				MetaData->SetValue(NewProp_bAutoGenerateMips, TEXT("Category"), TEXT("TextureRenderTarget2D"));
				MetaData->SetValue(NewProp_bAutoGenerateMips, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TextureRenderTarget2D.h"));
				MetaData->SetValue(NewProp_bAutoGenerateMips, TEXT("ToolTip"), TEXT("Whether to support Mip maps for this render target texture"));
				MetaData->SetValue(NewProp_bHDR, TEXT("Category"), TEXT("TextureRenderTarget2D"));
				MetaData->SetValue(NewProp_bHDR, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TextureRenderTarget2D.h"));
				MetaData->SetValue(NewProp_bHDR, TEXT("ToolTip"), TEXT("Whether to support storing HDR values, which requires more memory."));
				MetaData->SetValue(NewProp_bForceLinearGamma, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TextureRenderTarget2D.h"));
				MetaData->SetValue(NewProp_bForceLinearGamma, TEXT("ToolTip"), TEXT("True to force linear gamma space for this render target"));
				MetaData->SetValue(NewProp_AddressY, TEXT("Category"), TEXT("TextureRenderTarget2D"));
				MetaData->SetValue(NewProp_AddressY, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TextureRenderTarget2D.h"));
				MetaData->SetValue(NewProp_AddressY, TEXT("ToolTip"), TEXT("The addressing mode to use for the Y axis."));
				MetaData->SetValue(NewProp_AddressX, TEXT("Category"), TEXT("TextureRenderTarget2D"));
				MetaData->SetValue(NewProp_AddressX, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TextureRenderTarget2D.h"));
				MetaData->SetValue(NewProp_AddressX, TEXT("ToolTip"), TEXT("The addressing mode to use for the X axis."));
				MetaData->SetValue(NewProp_ClearColor, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TextureRenderTarget2D.h"));
				MetaData->SetValue(NewProp_ClearColor, TEXT("ToolTip"), TEXT("the color the texture is cleared to"));
				MetaData->SetValue(NewProp_SizeY, TEXT("Category"), TEXT("TextureRenderTarget2D"));
				MetaData->SetValue(NewProp_SizeY, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TextureRenderTarget2D.h"));
				MetaData->SetValue(NewProp_SizeY, TEXT("ToolTip"), TEXT("The height of the texture."));
				MetaData->SetValue(NewProp_SizeX, TEXT("Category"), TEXT("TextureRenderTarget2D"));
				MetaData->SetValue(NewProp_SizeX, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TextureRenderTarget2D.h"));
				MetaData->SetValue(NewProp_SizeX, TEXT("ToolTip"), TEXT("The width of the texture."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UTextureRenderTarget2D(Z_Construct_UClass_UTextureRenderTarget2D, TEXT("UTextureRenderTarget2D"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UTextureRenderTarget2D);
	UFunction* Z_Construct_UDelegateFunction_Engine_OnCanvasRenderTargetUpdate__DelegateSignature()
	{
		struct _Script_Engine_eventOnCanvasRenderTargetUpdate_Parms
		{
			UCanvas* Canvas;
			int32 Width;
			int32 Height;
		};
		UObject* Outer=Z_Construct_UPackage_Engine();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnCanvasRenderTargetUpdate__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535, sizeof(_Script_Engine_eventOnCanvasRenderTargetUpdate_Parms));
			UProperty* NewProp_Height = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Height"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Height, _Script_Engine_eventOnCanvasRenderTargetUpdate_Parms), 0x0000000000000080);
			UProperty* NewProp_Width = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Width"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Width, _Script_Engine_eventOnCanvasRenderTargetUpdate_Parms), 0x0000000000000080);
			UProperty* NewProp_Canvas = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Canvas"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Canvas, _Script_Engine_eventOnCanvasRenderTargetUpdate_Parms), 0x0000000000000080, Z_Construct_UClass_UCanvas_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/CanvasRenderTarget2D.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("This delegate is assignable through Blueprint and has similar functionality to the above."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCanvasRenderTarget2D_CreateCanvasRenderTarget2D()
	{
		struct CanvasRenderTarget2D_eventCreateCanvasRenderTarget2D_Parms
		{
			UObject* WorldContextObject;
			TSubclassOf<UCanvasRenderTarget2D>  CanvasRenderTarget2DClass;
			int32 Width;
			int32 Height;
			UCanvasRenderTarget2D* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UCanvasRenderTarget2D();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CreateCanvasRenderTarget2D"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(CanvasRenderTarget2D_eventCreateCanvasRenderTarget2D_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, CanvasRenderTarget2D_eventCreateCanvasRenderTarget2D_Parms), 0x0000000000000580, Z_Construct_UClass_UCanvasRenderTarget2D_NoRegister());
			UProperty* NewProp_Height = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Height"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Height, CanvasRenderTarget2D_eventCreateCanvasRenderTarget2D_Parms), 0x0000000000000080);
			UProperty* NewProp_Width = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Width"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Width, CanvasRenderTarget2D_eventCreateCanvasRenderTarget2D_Parms), 0x0000000000000080);
			UProperty* NewProp_CanvasRenderTarget2DClass = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CanvasRenderTarget2DClass"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(CanvasRenderTarget2DClass, CanvasRenderTarget2D_eventCreateCanvasRenderTarget2D_Parms), 0x0004000000000080, Z_Construct_UClass_UCanvasRenderTarget2D_NoRegister());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, CanvasRenderTarget2D_eventCreateCanvasRenderTarget2D_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Canvas Render Target 2D"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Height"), TEXT("1024"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Width"), TEXT("1024"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/CanvasRenderTarget2D.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Creates a new canvas render target and initializes it to the specified dimensions\n\n@param       WorldContextObject      The world where this render target will be rendered for\n@param       CanvasRenderTarget2DClass       Class of the render target.  Unless you want to use a special sub-class, you can simply pass UCanvasRenderTarget2D::StaticClass() here.\n@param       Width                           Width of the render target.\n@param       Height                          Height of the render target.\n\n@return                                              Returns the instanced render target."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCanvasRenderTarget2D_GetSize()
	{
		struct CanvasRenderTarget2D_eventGetSize_Parms
		{
			int32 Width;
			int32 Height;
		};
		UObject* Outer=Z_Construct_UClass_UCanvasRenderTarget2D();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetSize"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14420401, 65535, sizeof(CanvasRenderTarget2D_eventGetSize_Parms));
			UProperty* NewProp_Height = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Height"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Height, CanvasRenderTarget2D_eventGetSize_Parms), 0x0000000000000180);
			UProperty* NewProp_Width = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Width"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Width, CanvasRenderTarget2D_eventGetSize_Parms), 0x0000000000000180);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Canvas Render Target 2D"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/CanvasRenderTarget2D.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets a specific render target's size from the global map of canvas render targets.\n\n@param       Width   Output variable for the render target's width\n@param       Height  Output variable for the render target's height"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCanvasRenderTarget2D_ReceiveUpdate()
	{
		UObject* Outer=Z_Construct_UClass_UCanvasRenderTarget2D();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ReceiveUpdate"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08020800, 65535, sizeof(CanvasRenderTarget2D_eventReceiveUpdate_Parms));
			UProperty* NewProp_Height = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Height"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Height, CanvasRenderTarget2D_eventReceiveUpdate_Parms), 0x0000000000000080);
			UProperty* NewProp_Width = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Width"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Width, CanvasRenderTarget2D_eventReceiveUpdate_Parms), 0x0000000000000080);
			UProperty* NewProp_Canvas = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Canvas"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Canvas, CanvasRenderTarget2D_eventReceiveUpdate_Parms), 0x0000000000000080, Z_Construct_UClass_UCanvas_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Canvas Render Target 2D"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/CanvasRenderTarget2D.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Allows a Blueprint to implement how this Canvas Render Target 2D should be updated.\n\n@param       Canvas                          Canvas object that can be used to paint to the render target\n@param       Width                           Width of the render target.\n@param       Height                          Height of the render target."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCanvasRenderTarget2D_UpdateResource()
	{
		UObject* Outer=Z_Construct_UClass_UCanvasRenderTarget2D();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("UpdateResource"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020400, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Canvas Render Target 2D"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/CanvasRenderTarget2D.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Updates the the canvas render target texture's resource. This is where the render target will create or\nfind a canvas object to use.  It also calls UpdateResourceImmediate() to clear the render target texture\nfrom the deferred rendering list, to stop the texture from being cleared the next frame. From there it\nwill ask the rendering thread to set up the RHI viewport. The canvas is then set up for rendering and\nthen the user's update delegate is called.  The canvas is then flushed and the RHI resolves the\ntexture to make it available for rendering."));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UCanvasRenderTarget2D_NoRegister()
	{
		return UCanvasRenderTarget2D::StaticClass();
	}
	UClass* Z_Construct_UClass_UCanvasRenderTarget2D()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UTextureRenderTarget2D();
			Z_Construct_UPackage_Engine();
			OuterClass = UCanvasRenderTarget2D::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_UCanvasRenderTarget2D_CreateCanvasRenderTarget2D());
				OuterClass->LinkChild(Z_Construct_UFunction_UCanvasRenderTarget2D_GetSize());
				OuterClass->LinkChild(Z_Construct_UFunction_UCanvasRenderTarget2D_ReceiveUpdate());
				OuterClass->LinkChild(Z_Construct_UFunction_UCanvasRenderTarget2D_UpdateResource());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_World = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("World"), RF_Public|RF_Transient|RF_Native) UWeakObjectProperty(CPP_PROPERTY_BASE(World, UCanvasRenderTarget2D), 0x0004080000000000, Z_Construct_UClass_UWorld_NoRegister());
				UProperty* NewProp_OnCanvasRenderTargetUpdate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnCanvasRenderTargetUpdate"), RF_Public|RF_Transient|RF_Native) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnCanvasRenderTargetUpdate, UCanvasRenderTarget2D), 0x0000000010080000, Z_Construct_UDelegateFunction_Engine_OnCanvasRenderTargetUpdate__DelegateSignature());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCanvasRenderTarget2D_CreateCanvasRenderTarget2D()); // 2325173484
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCanvasRenderTarget2D_GetSize()); // 2107693803
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCanvasRenderTarget2D_ReceiveUpdate()); // 219277045
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCanvasRenderTarget2D_UpdateResource()); // 2251237860
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Texture"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/CanvasRenderTarget2D.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/CanvasRenderTarget2D.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("CanvasRenderTarget2D is 2D render target which exposes a Canvas interface to allow you to draw elements onto\nit directly.  Use FindCanvasRenderTarget2D() to find or create a render target texture by unique name, then\nbind a function to the OnCanvasRenderTargetUpdate delegate which will be called when the render target is\nupdated.  If you need to repaint your canvas every single frame, simply call UpdateResource() on it from a Tick\nfunction.  Also, remember to hold onto your new canvas render target with a reference so that it doesn't get\ngarbage collected."));
				MetaData->SetValue(NewProp_World, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/CanvasRenderTarget2D.h"));
				MetaData->SetValue(NewProp_World, TEXT("ToolTip"), TEXT("The world this render target will be used with"));
				MetaData->SetValue(NewProp_OnCanvasRenderTargetUpdate, TEXT("Category"), TEXT("Canvas Render Target 2D"));
				MetaData->SetValue(NewProp_OnCanvasRenderTargetUpdate, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/CanvasRenderTarget2D.h"));
				MetaData->SetValue(NewProp_OnCanvasRenderTargetUpdate, TEXT("ToolTip"), TEXT("Called when this Canvas Render Target is asked to update its texture resource."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UCanvasRenderTarget2D(Z_Construct_UClass_UCanvasRenderTarget2D, TEXT("UCanvasRenderTarget2D"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UCanvasRenderTarget2D);
	UClass* Z_Construct_UClass_UTextureRenderTargetCube_NoRegister()
	{
		return UTextureRenderTargetCube::StaticClass();
	}
	UClass* Z_Construct_UClass_UTextureRenderTargetCube()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UTextureRenderTarget();
			Z_Construct_UPackage_Engine();
			OuterClass = UTextureRenderTargetCube::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bForceLinearGamma, UTextureRenderTargetCube, uint8);
				UProperty* NewProp_bForceLinearGamma = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bForceLinearGamma"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bForceLinearGamma, UTextureRenderTargetCube), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bForceLinearGamma, UTextureRenderTargetCube), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bHDR, UTextureRenderTargetCube, uint8);
				UProperty* NewProp_bHDR = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bHDR"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bHDR, UTextureRenderTargetCube), 0x0000010000000015, CPP_BOOL_PROPERTY_BITMASK(bHDR, UTextureRenderTargetCube), sizeof(uint8), false);
				UProperty* NewProp_OverrideFormat = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OverrideFormat"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(OverrideFormat, UTextureRenderTargetCube), 0x0000000000000000, Z_Construct_UEnum_CoreUObject_EPixelFormat());
				UProperty* NewProp_ClearColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ClearColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ClearColor, UTextureRenderTargetCube), 0x0000000000000000, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_SizeX = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SizeX"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(SizeX, UTextureRenderTargetCube), 0x0000010000000005);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Texture"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/TextureRenderTargetCube.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TextureRenderTargetCube.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("TextureRenderTargetCube\n\nCube render target texture resource. This can be used as a target\nfor rendering as well as rendered as a regular cube texture resource."));
				MetaData->SetValue(NewProp_bForceLinearGamma, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TextureRenderTargetCube.h"));
				MetaData->SetValue(NewProp_bForceLinearGamma, TEXT("ToolTip"), TEXT("True to force linear gamma space for this render target"));
				MetaData->SetValue(NewProp_bHDR, TEXT("Category"), TEXT("TextureRenderTargetCube"));
				MetaData->SetValue(NewProp_bHDR, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TextureRenderTargetCube.h"));
				MetaData->SetValue(NewProp_bHDR, TEXT("ToolTip"), TEXT("Whether to support storing HDR values, which requires more memory."));
				MetaData->SetValue(NewProp_OverrideFormat, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TextureRenderTargetCube.h"));
				MetaData->SetValue(NewProp_OverrideFormat, TEXT("ToolTip"), TEXT("Normally the format is derived from bHDR, this allows code to set the format explicitly."));
				MetaData->SetValue(NewProp_ClearColor, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TextureRenderTargetCube.h"));
				MetaData->SetValue(NewProp_ClearColor, TEXT("ToolTip"), TEXT("the color the texture is cleared to"));
				MetaData->SetValue(NewProp_SizeX, TEXT("Category"), TEXT("TextureRenderTargetCube"));
				MetaData->SetValue(NewProp_SizeX, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TextureRenderTargetCube.h"));
				MetaData->SetValue(NewProp_SizeX, TEXT("ToolTip"), TEXT("The width of the texture."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UTextureRenderTargetCube(Z_Construct_UClass_UTextureRenderTargetCube, TEXT("UTextureRenderTargetCube"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UTextureRenderTargetCube);
	UClass* Z_Construct_UClass_UThumbnailInfo_NoRegister()
	{
		return UThumbnailInfo::StaticClass();
	}
	UClass* Z_Construct_UClass_UThumbnailInfo()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UThumbnailInfo::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("EditorFramework/ThumbnailInfo.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/EditorFramework/ThumbnailInfo.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UThumbnailInfo(Z_Construct_UClass_UThumbnailInfo, TEXT("UThumbnailInfo"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UThumbnailInfo);
	UScriptStruct* Z_Construct_UScriptStruct_FTTLinearColorTrack()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FTTLinearColorTrack_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("TTLinearColorTrack"), sizeof(FTTLinearColorTrack), Get_Z_Construct_UScriptStruct_FTTLinearColorTrack_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TTLinearColorTrack"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FTTTrackBase(), new UScriptStruct::TCppStructOps<FTTLinearColorTrack>, EStructFlags(0x00000001));
			UProperty* NewProp_CurveLinearColor = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CurveLinearColor"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(CurveLinearColor, FTTLinearColorTrack), 0x0000000000000000, Z_Construct_UClass_UCurveLinearColor_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TimelineTemplate.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Structure storing information about one color interpolation track"));
			MetaData->SetValue(NewProp_CurveLinearColor, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TimelineTemplate.h"));
			MetaData->SetValue(NewProp_CurveLinearColor, TEXT("ToolTip"), TEXT("Curve object used to define color value over time"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FTTLinearColorTrack_CRC() { return 466979825U; }
	UScriptStruct* Z_Construct_UScriptStruct_FTTVectorTrack()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FTTVectorTrack_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("TTVectorTrack"), sizeof(FTTVectorTrack), Get_Z_Construct_UScriptStruct_FTTVectorTrack_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TTVectorTrack"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FTTTrackBase(), new UScriptStruct::TCppStructOps<FTTVectorTrack>, EStructFlags(0x00000001));
			UProperty* NewProp_CurveVector = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CurveVector"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(CurveVector, FTTVectorTrack), 0x0000000000000000, Z_Construct_UClass_UCurveVector_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TimelineTemplate.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Structure storing information about one vector interpolation track"));
			MetaData->SetValue(NewProp_CurveVector, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TimelineTemplate.h"));
			MetaData->SetValue(NewProp_CurveVector, TEXT("ToolTip"), TEXT("Curve object used to define vector value over time"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FTTVectorTrack_CRC() { return 2904469708U; }
	UScriptStruct* Z_Construct_UScriptStruct_FTTFloatTrack()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FTTFloatTrack_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("TTFloatTrack"), sizeof(FTTFloatTrack), Get_Z_Construct_UScriptStruct_FTTFloatTrack_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TTFloatTrack"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FTTTrackBase(), new UScriptStruct::TCppStructOps<FTTFloatTrack>, EStructFlags(0x00000001));
			UProperty* NewProp_CurveFloat = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CurveFloat"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(CurveFloat, FTTFloatTrack), 0x0000000000000000, Z_Construct_UClass_UCurveFloat_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TimelineTemplate.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Structure storing information about one float interpolation track"));
			MetaData->SetValue(NewProp_CurveFloat, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TimelineTemplate.h"));
			MetaData->SetValue(NewProp_CurveFloat, TEXT("ToolTip"), TEXT("Curve object used to define float value over time"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FTTFloatTrack_CRC() { return 481049716U; }
	UScriptStruct* Z_Construct_UScriptStruct_FTTEventTrack()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FTTEventTrack_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("TTEventTrack"), sizeof(FTTEventTrack), Get_Z_Construct_UScriptStruct_FTTEventTrack_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TTEventTrack"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FTTTrackBase(), new UScriptStruct::TCppStructOps<FTTEventTrack>, EStructFlags(0x00000001));
			UProperty* NewProp_CurveKeys = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CurveKeys"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(CurveKeys, FTTEventTrack), 0x0000000000000000, Z_Construct_UClass_UCurveFloat_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TimelineTemplate.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Structure storing information about one event track"));
			MetaData->SetValue(NewProp_CurveKeys, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TimelineTemplate.h"));
			MetaData->SetValue(NewProp_CurveKeys, TEXT("ToolTip"), TEXT("Curve object used to store keys"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FTTEventTrack_CRC() { return 1362253885U; }
	UScriptStruct* Z_Construct_UScriptStruct_FTTTrackBase()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FTTTrackBase_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("TTTrackBase"), sizeof(FTTTrackBase), Get_Z_Construct_UScriptStruct_FTTTrackBase_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TTTrackBase"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FTTTrackBase>, EStructFlags(0x00000001));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsExternalCurve, FTTTrackBase, bool);
			UProperty* NewProp_bIsExternalCurve = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bIsExternalCurve"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsExternalCurve, FTTTrackBase), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bIsExternalCurve, FTTTrackBase), sizeof(bool), true);
			UProperty* NewProp_TrackName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TrackName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(TrackName, FTTTrackBase), 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TimelineTemplate.h"));
			MetaData->SetValue(NewProp_bIsExternalCurve, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TimelineTemplate.h"));
			MetaData->SetValue(NewProp_bIsExternalCurve, TEXT("ToolTip"), TEXT("Flag to identify internal/external curve"));
			MetaData->SetValue(NewProp_TrackName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TimelineTemplate.h"));
			MetaData->SetValue(NewProp_TrackName, TEXT("ToolTip"), TEXT("Name of this track"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FTTTrackBase_CRC() { return 1799703855U; }
	UClass* Z_Construct_UClass_UTimelineTemplate_NoRegister()
	{
		return UTimelineTemplate::StaticClass();
	}
	UClass* Z_Construct_UClass_UTimelineTemplate()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UTimelineTemplate::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_TimelineGuid = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TimelineGuid"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TimelineGuid, UTimelineTemplate), 0x0000000000200000, Z_Construct_UScriptStruct_FGuid());
				UProperty* NewProp_MetaDataArray = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MetaDataArray"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(MetaDataArray, UTimelineTemplate), 0x0000000000000001);
				UProperty* NewProp_MetaDataArray_Inner = new(EC_InternalUseOnlyConstructor, NewProp_MetaDataArray, TEXT("MetaDataArray"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FBPVariableMetaDataEntry());
				UProperty* NewProp_LinearColorTracks = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LinearColorTracks"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(LinearColorTracks, UTimelineTemplate), 0x0000000000000000);
				UProperty* NewProp_LinearColorTracks_Inner = new(EC_InternalUseOnlyConstructor, NewProp_LinearColorTracks, TEXT("LinearColorTracks"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FTTLinearColorTrack());
				UProperty* NewProp_VectorTracks = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VectorTracks"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(VectorTracks, UTimelineTemplate), 0x0000000000000000);
				UProperty* NewProp_VectorTracks_Inner = new(EC_InternalUseOnlyConstructor, NewProp_VectorTracks, TEXT("VectorTracks"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FTTVectorTrack());
				UProperty* NewProp_FloatTracks = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FloatTracks"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(FloatTracks, UTimelineTemplate), 0x0000000000000000);
				UProperty* NewProp_FloatTracks_Inner = new(EC_InternalUseOnlyConstructor, NewProp_FloatTracks, TEXT("FloatTracks"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FTTFloatTrack());
				UProperty* NewProp_EventTracks = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EventTracks"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(EventTracks, UTimelineTemplate), 0x0000000000000000);
				UProperty* NewProp_EventTracks_Inner = new(EC_InternalUseOnlyConstructor, NewProp_EventTracks, TEXT("EventTracks"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FTTEventTrack());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bValidatedAsWired, UTimelineTemplate, uint8);
				UProperty* NewProp_bValidatedAsWired = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bValidatedAsWired"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bValidatedAsWired, UTimelineTemplate), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bValidatedAsWired, UTimelineTemplate), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bReplicated, UTimelineTemplate, uint8);
				UProperty* NewProp_bReplicated = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bReplicated"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bReplicated, UTimelineTemplate), 0x0000000000000005, CPP_BOOL_PROPERTY_BITMASK(bReplicated, UTimelineTemplate), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLoop, UTimelineTemplate, uint8);
				UProperty* NewProp_bLoop = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bLoop"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLoop, UTimelineTemplate), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bLoop, UTimelineTemplate), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAutoPlay, UTimelineTemplate, uint8);
				UProperty* NewProp_bAutoPlay = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAutoPlay"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAutoPlay, UTimelineTemplate), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bAutoPlay, UTimelineTemplate), sizeof(uint8), false);
				UProperty* NewProp_LengthMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LengthMode"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(LengthMode, UTimelineTemplate), 0x0000000000000001, Z_Construct_UEnum_Engine_ETimelineLengthMode());
				UProperty* NewProp_TimelineLength = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TimelineLength"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(TimelineLength, UTimelineTemplate), 0x0000000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/TimelineTemplate.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TimelineTemplate.h"));
				MetaData->SetValue(NewProp_TimelineGuid, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TimelineTemplate.h"));
				MetaData->SetValue(NewProp_MetaDataArray, TEXT("Category"), TEXT("BPVariableDescription"));
				MetaData->SetValue(NewProp_MetaDataArray, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TimelineTemplate.h"));
				MetaData->SetValue(NewProp_MetaDataArray, TEXT("ToolTip"), TEXT("Metadata information for this timeline"));
				MetaData->SetValue(NewProp_LinearColorTracks, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TimelineTemplate.h"));
				MetaData->SetValue(NewProp_LinearColorTracks, TEXT("ToolTip"), TEXT("Set of linear color interpolation tracks"));
				MetaData->SetValue(NewProp_VectorTracks, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TimelineTemplate.h"));
				MetaData->SetValue(NewProp_VectorTracks, TEXT("ToolTip"), TEXT("Set of vector interpolation tracks"));
				MetaData->SetValue(NewProp_FloatTracks, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TimelineTemplate.h"));
				MetaData->SetValue(NewProp_FloatTracks, TEXT("ToolTip"), TEXT("Set of float interpolation tracks"));
				MetaData->SetValue(NewProp_EventTracks, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TimelineTemplate.h"));
				MetaData->SetValue(NewProp_EventTracks, TEXT("ToolTip"), TEXT("Set of event tracks"));
				MetaData->SetValue(NewProp_bValidatedAsWired, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TimelineTemplate.h"));
				MetaData->SetValue(NewProp_bValidatedAsWired, TEXT("ToolTip"), TEXT("Compiler Validated As Wired up"));
				MetaData->SetValue(NewProp_bReplicated, TEXT("Category"), TEXT("TimelineTemplate"));
				MetaData->SetValue(NewProp_bReplicated, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TimelineTemplate.h"));
				MetaData->SetValue(NewProp_bReplicated, TEXT("ToolTip"), TEXT("If we want the timeline to loop"));
				MetaData->SetValue(NewProp_bLoop, TEXT("Category"), TEXT("TimelineTemplate"));
				MetaData->SetValue(NewProp_bLoop, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TimelineTemplate.h"));
				MetaData->SetValue(NewProp_bLoop, TEXT("ToolTip"), TEXT("If we want the timeline to loop"));
				MetaData->SetValue(NewProp_bAutoPlay, TEXT("Category"), TEXT("TimelineTemplate"));
				MetaData->SetValue(NewProp_bAutoPlay, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TimelineTemplate.h"));
				MetaData->SetValue(NewProp_bAutoPlay, TEXT("ToolTip"), TEXT("If we want the timeline to auto-play"));
				MetaData->SetValue(NewProp_LengthMode, TEXT("Category"), TEXT("TimelineTemplate"));
				MetaData->SetValue(NewProp_LengthMode, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TimelineTemplate.h"));
				MetaData->SetValue(NewProp_LengthMode, TEXT("ToolTip"), TEXT("How we want the timeline to determine its own length (e.g. specified length, last keyframe)"));
				MetaData->SetValue(NewProp_TimelineLength, TEXT("Category"), TEXT("TimelineTemplate"));
				MetaData->SetValue(NewProp_TimelineLength, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TimelineTemplate.h"));
				MetaData->SetValue(NewProp_TimelineLength, TEXT("ToolTip"), TEXT("Length of this timeline"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UTimelineTemplate(Z_Construct_UClass_UTimelineTemplate, TEXT("UTimelineTemplate"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UTimelineTemplate);
	UScriptStruct* Z_Construct_UScriptStruct_FTouchInputControl()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FTouchInputControl_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("TouchInputControl"), sizeof(FTouchInputControl), Get_Z_Construct_UScriptStruct_FTouchInputControl_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TouchInputControl"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FTouchInputControl>, EStructFlags(0x00000001));
			UProperty* NewProp_AltInputKey = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("AltInputKey"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(AltInputKey, FTouchInputControl), 0x0000000000000001, Z_Construct_UScriptStruct_FKey());
			UProperty* NewProp_MainInputKey = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MainInputKey"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MainInputKey, FTouchInputControl), 0x0000000000000001, Z_Construct_UScriptStruct_FKey());
			UProperty* NewProp_InputScale = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("InputScale"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InputScale, FTouchInputControl), 0x0000000000000001, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_InteractionSize = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("InteractionSize"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InteractionSize, FTouchInputControl), 0x0000000000000001, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_ThumbSize = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ThumbSize"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ThumbSize, FTouchInputControl), 0x0000000000000001, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_VisualSize = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("VisualSize"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(VisualSize, FTouchInputControl), 0x0000000000000001, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_Center = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Center"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Center, FTouchInputControl), 0x0000000000000001, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_Image2 = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Image2"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Image2, FTouchInputControl), 0x0000000000000001, Z_Construct_UClass_UTexture2D_NoRegister());
			UProperty* NewProp_Image1 = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Image1"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Image1, FTouchInputControl), 0x0000000000000001, Z_Construct_UClass_UTexture2D_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/TouchInterface.h"));
			MetaData->SetValue(NewProp_AltInputKey, TEXT("Category"), TEXT("Control"));
			MetaData->SetValue(NewProp_AltInputKey, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/TouchInterface.h"));
			MetaData->SetValue(NewProp_AltInputKey, TEXT("ToolTip"), TEXT("The alternate input to send from this control (for sticks, this is the vertical axis)"));
			MetaData->SetValue(NewProp_MainInputKey, TEXT("Category"), TEXT("Control"));
			MetaData->SetValue(NewProp_MainInputKey, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/TouchInterface.h"));
			MetaData->SetValue(NewProp_MainInputKey, TEXT("ToolTip"), TEXT("The main input to send from this control (for sticks, this is the horizontal axis)"));
			MetaData->SetValue(NewProp_InputScale, TEXT("Category"), TEXT("Control"));
			MetaData->SetValue(NewProp_InputScale, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/TouchInterface.h"));
			MetaData->SetValue(NewProp_InputScale, TEXT("ToolTip"), TEXT("The scale for control input"));
			MetaData->SetValue(NewProp_InteractionSize, TEXT("Category"), TEXT("Control"));
			MetaData->SetValue(NewProp_InteractionSize, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/TouchInterface.h"));
			MetaData->SetValue(NewProp_InteractionSize, TEXT("ToolTip"), TEXT("The interactive size of the control (if <= 1.0, it's relative to screen, > 1.0 is absolute)"));
			MetaData->SetValue(NewProp_ThumbSize, TEXT("Category"), TEXT("Control"));
			MetaData->SetValue(NewProp_ThumbSize, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/TouchInterface.h"));
			MetaData->SetValue(NewProp_ThumbSize, TEXT("ToolTip"), TEXT("For sticks, the size of the thumb (if <= 1.0, it's relative to screen, > 1.0 is absolute)"));
			MetaData->SetValue(NewProp_VisualSize, TEXT("Category"), TEXT("Control"));
			MetaData->SetValue(NewProp_VisualSize, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/TouchInterface.h"));
			MetaData->SetValue(NewProp_VisualSize, TEXT("ToolTip"), TEXT("The size of the control (if <= 1.0, it's relative to screen, > 1.0 is absolute)"));
			MetaData->SetValue(NewProp_Center, TEXT("Category"), TEXT("Control"));
			MetaData->SetValue(NewProp_Center, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/TouchInterface.h"));
			MetaData->SetValue(NewProp_Center, TEXT("ToolTip"), TEXT("The center point of the control (if <= 1.0, it's relative to screen, > 1.0 is absolute)"));
			MetaData->SetValue(NewProp_Image2, TEXT("Category"), TEXT("Control"));
			MetaData->SetValue(NewProp_Image2, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/TouchInterface.h"));
			MetaData->SetValue(NewProp_Image2, TEXT("ToolTip"), TEXT("For sticks, this is the Background"));
			MetaData->SetValue(NewProp_Image1, TEXT("Category"), TEXT("Control"));
			MetaData->SetValue(NewProp_Image1, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/TouchInterface.h"));
			MetaData->SetValue(NewProp_Image1, TEXT("ToolTip"), TEXT("For sticks, this is the Thumb"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FTouchInputControl_CRC() { return 1950003865U; }
	UClass* Z_Construct_UClass_UTouchInterface_NoRegister()
	{
		return UTouchInterface::StaticClass();
	}
	UClass* Z_Construct_UClass_UTouchInterface()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UTouchInterface::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_StartupDelay = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StartupDelay"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(StartupDelay, UTouchInterface), 0x0000000000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bPreventRecenter, UTouchInterface, bool);
				UProperty* NewProp_bPreventRecenter = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bPreventRecenter"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bPreventRecenter, UTouchInterface), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bPreventRecenter, UTouchInterface), sizeof(bool), true);
				UProperty* NewProp_ActivationDelay = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ActivationDelay"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ActivationDelay, UTouchInterface), 0x0000000000000001);
				UProperty* NewProp_TimeUntilReset = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TimeUntilReset"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(TimeUntilReset, UTouchInterface), 0x0000000000000001);
				UProperty* NewProp_TimeUntilDeactive = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TimeUntilDeactive"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(TimeUntilDeactive, UTouchInterface), 0x0000000000000001);
				UProperty* NewProp_InactiveOpacity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InactiveOpacity"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InactiveOpacity, UTouchInterface), 0x0000000000000001);
				UProperty* NewProp_ActiveOpacity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ActiveOpacity"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ActiveOpacity, UTouchInterface), 0x0000000000000001);
				UProperty* NewProp_Controls = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Controls"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Controls, UTouchInterface), 0x0000000000000001);
				UProperty* NewProp_Controls_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Controls, TEXT("Controls"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FTouchInputControl());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("GameFramework/TouchInterface.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/TouchInterface.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Defines an interface by which touch input can be controlled using any number of buttons and virtual joysticks"));
				MetaData->SetValue(NewProp_StartupDelay, TEXT("Category"), TEXT("TouchInterface"));
				MetaData->SetValue(NewProp_StartupDelay, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/TouchInterface.h"));
				MetaData->SetValue(NewProp_StartupDelay, TEXT("ToolTip"), TEXT("Delay at startup before virtual joystick is drawn"));
				MetaData->SetValue(NewProp_bPreventRecenter, TEXT("Category"), TEXT("TouchInterface"));
				MetaData->SetValue(NewProp_bPreventRecenter, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/TouchInterface.h"));
				MetaData->SetValue(NewProp_bPreventRecenter, TEXT("ToolTip"), TEXT("Whether to prevent joystick re-center"));
				MetaData->SetValue(NewProp_ActivationDelay, TEXT("Category"), TEXT("TouchInterface"));
				MetaData->SetValue(NewProp_ActivationDelay, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/TouchInterface.h"));
				MetaData->SetValue(NewProp_ActivationDelay, TEXT("ToolTip"), TEXT("How long after joystick enabled for touch (0.0 will disable this feature)"));
				MetaData->SetValue(NewProp_TimeUntilReset, TEXT("Category"), TEXT("TouchInterface"));
				MetaData->SetValue(NewProp_TimeUntilReset, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/TouchInterface.h"));
				MetaData->SetValue(NewProp_TimeUntilReset, TEXT("ToolTip"), TEXT("How long after going inactive will controls reset/recenter themselves (0.0 will disable this feature)"));
				MetaData->SetValue(NewProp_TimeUntilDeactive, TEXT("Category"), TEXT("TouchInterface"));
				MetaData->SetValue(NewProp_TimeUntilDeactive, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/TouchInterface.h"));
				MetaData->SetValue(NewProp_TimeUntilDeactive, TEXT("ToolTip"), TEXT("How long after user interaction will all controls fade out to Inactive Opacity"));
				MetaData->SetValue(NewProp_InactiveOpacity, TEXT("Category"), TEXT("TouchInterface"));
				MetaData->SetValue(NewProp_InactiveOpacity, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/TouchInterface.h"));
				MetaData->SetValue(NewProp_InactiveOpacity, TEXT("ToolTip"), TEXT("Opacity (0.0 - 1.0) of all controls while no controls are active"));
				MetaData->SetValue(NewProp_ActiveOpacity, TEXT("Category"), TEXT("TouchInterface"));
				MetaData->SetValue(NewProp_ActiveOpacity, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/TouchInterface.h"));
				MetaData->SetValue(NewProp_ActiveOpacity, TEXT("ToolTip"), TEXT("Opacity (0.0 - 1.0) of all controls while any control is active"));
				MetaData->SetValue(NewProp_Controls, TEXT("Category"), TEXT("TouchInterface"));
				MetaData->SetValue(NewProp_Controls, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/TouchInterface.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UTouchInterface(Z_Construct_UClass_UTouchInterface, TEXT("UTouchInterface"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UTouchInterface);
	UClass* Z_Construct_UClass_UUserDefinedEnum_NoRegister()
	{
		return UUserDefinedEnum::StaticClass();
	}
	UClass* Z_Construct_UClass_UUserDefinedEnum()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			UEnum::StaticClass();
			Z_Construct_UPackage_Engine();
			OuterClass = UUserDefinedEnum::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_DisplayNames = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DisplayNames"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(DisplayNames, UUserDefinedEnum), 0x0000000000000000);
				UProperty* NewProp_DisplayNames_Inner = new(EC_InternalUseOnlyConstructor, NewProp_DisplayNames, TEXT("DisplayNames"), RF_Public|RF_Transient|RF_Native) UTextProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_UniqueNameIndex = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UniqueNameIndex"), RF_Public|RF_Transient|RF_Native) UUInt32Property(CPP_PROPERTY_BASE(UniqueNameIndex, UUserDefinedEnum), 0x0000000800000000);
#endif // WITH_EDITORONLY_DATA
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/UserDefinedEnum.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/UserDefinedEnum.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("An Enumeration is a list of named values."));
				MetaData->SetValue(NewProp_DisplayNames, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/UserDefinedEnum.h"));
				MetaData->SetValue(NewProp_DisplayNames, TEXT("ToolTip"), TEXT("Names stored in \"DisplayName\" meta data. They are duplicated here,\nso functions like UKismetNodeHelperLibrary::GetEnumeratorUserFriendlyName can use them\noutside the editor. (When meta data are not loaded).\nTo sync DisplayNames with meta-data use FEnumEditorUtils::EnsureAllDisplayNamesExist."));
				MetaData->SetValue(NewProp_UniqueNameIndex, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/UserDefinedEnum.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UUserDefinedEnum(Z_Construct_UClass_UUserDefinedEnum, TEXT("UUserDefinedEnum"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UUserDefinedEnum);
	UEnum* Z_Construct_UEnum_Engine_EUserDefinedStructureStatus()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EUserDefinedStructureStatus_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EUserDefinedStructureStatus"), 0, Get_Z_Construct_UEnum_Engine_EUserDefinedStructureStatus_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EUserDefinedStructureStatus"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("UDSS_UpToDate")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("UDSS_Dirty")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("UDSS_Error")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("UDSS_Duplicate")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("UDSS_MAX")), 4));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/UserDefinedStruct.h"));
			MetaData->SetValue(ReturnEnum, TEXT("UDSS_Dirty.ToolTip"), TEXT("Struct has been modified but not recompiled."));
			MetaData->SetValue(ReturnEnum, TEXT("UDSS_Duplicate.ToolTip"), TEXT("Struct is a duplicate, the original one was changed."));
			MetaData->SetValue(ReturnEnum, TEXT("UDSS_Error.ToolTip"), TEXT("Struct tried but failed to be compiled."));
			MetaData->SetValue(ReturnEnum, TEXT("UDSS_UpToDate.ToolTip"), TEXT("Struct is in an unknown state."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EUserDefinedStructureStatus_CRC() { return 1381815576U; }
	UClass* Z_Construct_UClass_UUserDefinedStruct_NoRegister()
	{
		return UUserDefinedStruct::StaticClass();
	}
	UClass* Z_Construct_UClass_UUserDefinedStruct()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			UScriptStruct::StaticClass();
			Z_Construct_UPackage_Engine();
			OuterClass = UUserDefinedStruct::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Guid = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Guid"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Guid, UUserDefinedStruct), 0x0000000000000000, Z_Construct_UScriptStruct_FGuid());
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_EditorData = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EditorData"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(EditorData, UUserDefinedStruct), 0x0000000800000000, Z_Construct_UClass_UObject_NoRegister());
				UProperty* NewProp_ErrorMessage = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ErrorMessage"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ErrorMessage, UUserDefinedStruct), 0x0000000800000000);
				UProperty* NewProp_PrimaryStruct = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PrimaryStruct"), RF_Public|RF_Transient|RF_Native) UWeakObjectProperty(CPP_PROPERTY_BASE(PrimaryStruct, UUserDefinedStruct), 0x0004000800002000, Z_Construct_UClass_UUserDefinedStruct_NoRegister());
				UProperty* NewProp_Status = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Status"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(Status, UUserDefinedStruct), 0x0000000800000000, Z_Construct_UEnum_Engine_EUserDefinedStructureStatus());
#endif // WITH_EDITORONLY_DATA
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/UserDefinedStruct.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/UserDefinedStruct.h"));
				MetaData->SetValue(NewProp_Guid, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/UserDefinedStruct.h"));
				MetaData->SetValue(NewProp_EditorData, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/UserDefinedStruct.h"));
				MetaData->SetValue(NewProp_ErrorMessage, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/UserDefinedStruct.h"));
				MetaData->SetValue(NewProp_PrimaryStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/UserDefinedStruct.h"));
				MetaData->SetValue(NewProp_PrimaryStruct, TEXT("ToolTip"), TEXT("the original struct, when current struct isn't a temporary duplicate, the field should be null"));
				MetaData->SetValue(NewProp_Status, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/UserDefinedStruct.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UUserDefinedStruct(Z_Construct_UClass_UUserDefinedStruct, TEXT("UUserDefinedStruct"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UUserDefinedStruct);
	UClass* Z_Construct_UClass_UVectorField_NoRegister()
	{
		return UVectorField::StaticClass();
	}
	UClass* Z_Construct_UClass_UVectorField()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UVectorField::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Intensity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Intensity"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Intensity, UVectorField), 0x0000000000000001);
				UProperty* NewProp_Bounds = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Bounds"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Bounds, UVectorField), 0x0000000000000001, Z_Construct_UScriptStruct_FBox());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("VectorField/VectorField.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/VectorField/VectorField.h"));
				MetaData->SetValue(NewProp_Intensity, TEXT("Category"), TEXT("VectorField"));
				MetaData->SetValue(NewProp_Intensity, TEXT("ModuleRelativePath"), TEXT("Classes/VectorField/VectorField.h"));
				MetaData->SetValue(NewProp_Intensity, TEXT("ToolTip"), TEXT("The intensity with which to multiplie vectors in this field."));
				MetaData->SetValue(NewProp_Bounds, TEXT("Category"), TEXT("VectorFieldBounds"));
				MetaData->SetValue(NewProp_Bounds, TEXT("ModuleRelativePath"), TEXT("Classes/VectorField/VectorField.h"));
				MetaData->SetValue(NewProp_Bounds, TEXT("ToolTip"), TEXT("Bounds of the volume in local space."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UVectorField(Z_Construct_UClass_UVectorField, TEXT("UVectorField"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UVectorField);
	UEnum* Z_Construct_UEnum_Engine_EVectorFieldConstructionOp()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EVectorFieldConstructionOp_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EVectorFieldConstructionOp"), 0, Get_Z_Construct_UEnum_Engine_EVectorFieldConstructionOp_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EVectorFieldConstructionOp"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("VFCO_Extrude")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("VFCO_Revolve")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("VFCO_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/VectorField/VectorFieldAnimated.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Operation used to construct the vector field from a 2D texture."));
			MetaData->SetValue(ReturnEnum, TEXT("VFCO_Extrude.DisplayName"), TEXT("Extrude"));
			MetaData->SetValue(ReturnEnum, TEXT("VFCO_Revolve.DisplayName"), TEXT("Revolve"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EVectorFieldConstructionOp_CRC() { return 1798995562U; }
	UClass* Z_Construct_UClass_UVectorFieldAnimated_NoRegister()
	{
		return UVectorFieldAnimated::StaticClass();
	}
	UClass* Z_Construct_UClass_UVectorFieldAnimated()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UVectorField();
			Z_Construct_UPackage_Engine();
			OuterClass = UVectorFieldAnimated::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_NoiseMax = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NoiseMax"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(NoiseMax, UVectorFieldAnimated), 0x0000000000000001);
				UProperty* NewProp_NoiseScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NoiseScale"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(NoiseScale, UVectorFieldAnimated), 0x0000000000000001);
				UProperty* NewProp_NoiseField = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NoiseField"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(NoiseField, UVectorFieldAnimated), 0x0000000000000001, Z_Construct_UClass_UVectorFieldStatic_NoRegister());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLoop, UVectorFieldAnimated, uint8);
				UProperty* NewProp_bLoop = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bLoop"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLoop, UVectorFieldAnimated), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bLoop, UVectorFieldAnimated), sizeof(uint8), false);
				UProperty* NewProp_FramesPerSecond = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FramesPerSecond"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(FramesPerSecond, UVectorFieldAnimated), 0x0000000000000001);
				UProperty* NewProp_FrameCount = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FrameCount"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(FrameCount, UVectorFieldAnimated), 0x0000000000000001);
				UProperty* NewProp_SubImagesY = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SubImagesY"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(SubImagesY, UVectorFieldAnimated), 0x0000000000000001);
				UProperty* NewProp_SubImagesX = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SubImagesX"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(SubImagesX, UVectorFieldAnimated), 0x0000000000000001);
				UProperty* NewProp_VolumeSizeZ = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VolumeSizeZ"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(VolumeSizeZ, UVectorFieldAnimated), 0x0000000000000001);
				UProperty* NewProp_VolumeSizeY = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VolumeSizeY"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(VolumeSizeY, UVectorFieldAnimated), 0x0000000000000001);
				UProperty* NewProp_VolumeSizeX = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VolumeSizeX"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(VolumeSizeX, UVectorFieldAnimated), 0x0000000000000001);
				UProperty* NewProp_ConstructionOp = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConstructionOp"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(ConstructionOp, UVectorFieldAnimated), 0x0000000000000001, Z_Construct_UEnum_Engine_EVectorFieldConstructionOp());
				UProperty* NewProp_Texture = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Texture"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Texture, UVectorFieldAnimated), 0x0000000000000001, Z_Construct_UClass_UTexture2D_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("VectorField/VectorFieldAnimated.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/VectorField/VectorFieldAnimated.h"));
				MetaData->SetValue(NewProp_NoiseMax, TEXT("Category"), TEXT("Noise"));
				MetaData->SetValue(NewProp_NoiseMax, TEXT("ModuleRelativePath"), TEXT("Classes/VectorField/VectorFieldAnimated.h"));
				MetaData->SetValue(NewProp_NoiseMax, TEXT("ToolTip"), TEXT("The maximum magnitude of noise vectors to apply."));
				MetaData->SetValue(NewProp_NoiseScale, TEXT("Category"), TEXT("Noise"));
				MetaData->SetValue(NewProp_NoiseScale, TEXT("ModuleRelativePath"), TEXT("Classes/VectorField/VectorFieldAnimated.h"));
				MetaData->SetValue(NewProp_NoiseScale, TEXT("ToolTip"), TEXT("Scale to apply to vectors in the noise field."));
				MetaData->SetValue(NewProp_NoiseField, TEXT("Category"), TEXT("Noise"));
				MetaData->SetValue(NewProp_NoiseField, TEXT("ModuleRelativePath"), TEXT("Classes/VectorField/VectorFieldAnimated.h"));
				MetaData->SetValue(NewProp_NoiseField, TEXT("ToolTip"), TEXT("A static vector field used to add noise."));
				MetaData->SetValue(NewProp_bLoop, TEXT("Category"), TEXT("Animation"));
				MetaData->SetValue(NewProp_bLoop, TEXT("ModuleRelativePath"), TEXT("Classes/VectorField/VectorFieldAnimated.h"));
				MetaData->SetValue(NewProp_bLoop, TEXT("ToolTip"), TEXT("Whether or not the simulation should loop."));
				MetaData->SetValue(NewProp_FramesPerSecond, TEXT("Category"), TEXT("Animation"));
				MetaData->SetValue(NewProp_FramesPerSecond, TEXT("ModuleRelativePath"), TEXT("Classes/VectorField/VectorFieldAnimated.h"));
				MetaData->SetValue(NewProp_FramesPerSecond, TEXT("ToolTip"), TEXT("The rate at which to interpolate between frames."));
				MetaData->SetValue(NewProp_FrameCount, TEXT("Category"), TEXT("Reconstruction"));
				MetaData->SetValue(NewProp_FrameCount, TEXT("ModuleRelativePath"), TEXT("Classes/VectorField/VectorFieldAnimated.h"));
				MetaData->SetValue(NewProp_FrameCount, TEXT("ToolTip"), TEXT("The number of frames in the atlas."));
				MetaData->SetValue(NewProp_SubImagesY, TEXT("Category"), TEXT("Reconstruction"));
				MetaData->SetValue(NewProp_SubImagesY, TEXT("ModuleRelativePath"), TEXT("Classes/VectorField/VectorFieldAnimated.h"));
				MetaData->SetValue(NewProp_SubImagesY, TEXT("ToolTip"), TEXT("The number of vertical subimages in the texture atlas."));
				MetaData->SetValue(NewProp_SubImagesX, TEXT("Category"), TEXT("Reconstruction"));
				MetaData->SetValue(NewProp_SubImagesX, TEXT("ModuleRelativePath"), TEXT("Classes/VectorField/VectorFieldAnimated.h"));
				MetaData->SetValue(NewProp_SubImagesX, TEXT("ToolTip"), TEXT("The number of horizontal subimages in the texture atlas."));
				MetaData->SetValue(NewProp_VolumeSizeZ, TEXT("Category"), TEXT("Reconstruction"));
				MetaData->SetValue(NewProp_VolumeSizeZ, TEXT("ModuleRelativePath"), TEXT("Classes/VectorField/VectorFieldAnimated.h"));
				MetaData->SetValue(NewProp_VolumeSizeZ, TEXT("ToolTip"), TEXT("The size of the volume. Valid sizes: 16, 32, 64."));
				MetaData->SetValue(NewProp_VolumeSizeY, TEXT("Category"), TEXT("Reconstruction"));
				MetaData->SetValue(NewProp_VolumeSizeY, TEXT("ModuleRelativePath"), TEXT("Classes/VectorField/VectorFieldAnimated.h"));
				MetaData->SetValue(NewProp_VolumeSizeY, TEXT("ToolTip"), TEXT("The size of the volume. Valid sizes: 16, 32, 64."));
				MetaData->SetValue(NewProp_VolumeSizeX, TEXT("Category"), TEXT("Reconstruction"));
				MetaData->SetValue(NewProp_VolumeSizeX, TEXT("ModuleRelativePath"), TEXT("Classes/VectorField/VectorFieldAnimated.h"));
				MetaData->SetValue(NewProp_VolumeSizeX, TEXT("ToolTip"), TEXT("The size of the volume. Valid sizes: 16, 32, 64."));
				MetaData->SetValue(NewProp_ConstructionOp, TEXT("Category"), TEXT("Reconstruction"));
				MetaData->SetValue(NewProp_ConstructionOp, TEXT("ModuleRelativePath"), TEXT("Classes/VectorField/VectorFieldAnimated.h"));
				MetaData->SetValue(NewProp_ConstructionOp, TEXT("ToolTip"), TEXT("The operation used to construct the vector field."));
				MetaData->SetValue(NewProp_Texture, TEXT("Category"), TEXT("Reconstruction"));
				MetaData->SetValue(NewProp_Texture, TEXT("ModuleRelativePath"), TEXT("Classes/VectorField/VectorFieldAnimated.h"));
				MetaData->SetValue(NewProp_Texture, TEXT("ToolTip"), TEXT("The texture from which to create the vector field."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UVectorFieldAnimated(Z_Construct_UClass_UVectorFieldAnimated, TEXT("UVectorFieldAnimated"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UVectorFieldAnimated);
	UClass* Z_Construct_UClass_UVectorFieldStatic_NoRegister()
	{
		return UVectorFieldStatic::StaticClass();
	}
	UClass* Z_Construct_UClass_UVectorFieldStatic()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UVectorField();
			Z_Construct_UPackage_Engine();
			OuterClass = UVectorFieldStatic::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_AssetImportData = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AssetImportData"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(AssetImportData, UVectorFieldStatic), 0x00020008000a0009, Z_Construct_UClass_UAssetImportData_NoRegister());
				UProperty* NewProp_SourceFilePath = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SourceFilePath"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(SourceFilePath_DEPRECATED, UVectorFieldStatic), 0x0000000820000000);
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_SizeZ = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SizeZ"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(SizeZ, UVectorFieldStatic), 0x0000000000020001);
				UProperty* NewProp_SizeY = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SizeY"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(SizeY, UVectorFieldStatic), 0x0000000000020001);
				UProperty* NewProp_SizeX = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SizeX"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(SizeX, UVectorFieldStatic), 0x0000000000020001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("VectorFieldBounds"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("VectorField/VectorFieldStatic.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/VectorField/VectorFieldStatic.h"));
				MetaData->SetValue(NewProp_AssetImportData, TEXT("Category"), TEXT("ImportSettings"));
				MetaData->SetValue(NewProp_AssetImportData, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_AssetImportData, TEXT("ModuleRelativePath"), TEXT("Classes/VectorField/VectorFieldStatic.h"));
				MetaData->SetValue(NewProp_SourceFilePath, TEXT("ModuleRelativePath"), TEXT("Classes/VectorField/VectorFieldStatic.h"));
				MetaData->SetValue(NewProp_SizeZ, TEXT("Category"), TEXT("VectorFieldStatic"));
				MetaData->SetValue(NewProp_SizeZ, TEXT("ModuleRelativePath"), TEXT("Classes/VectorField/VectorFieldStatic.h"));
				MetaData->SetValue(NewProp_SizeZ, TEXT("ToolTip"), TEXT("Size of the vector field volume."));
				MetaData->SetValue(NewProp_SizeY, TEXT("Category"), TEXT("VectorFieldStatic"));
				MetaData->SetValue(NewProp_SizeY, TEXT("ModuleRelativePath"), TEXT("Classes/VectorField/VectorFieldStatic.h"));
				MetaData->SetValue(NewProp_SizeY, TEXT("ToolTip"), TEXT("Size of the vector field volume."));
				MetaData->SetValue(NewProp_SizeX, TEXT("Category"), TEXT("VectorFieldStatic"));
				MetaData->SetValue(NewProp_SizeX, TEXT("ModuleRelativePath"), TEXT("Classes/VectorField/VectorFieldStatic.h"));
				MetaData->SetValue(NewProp_SizeX, TEXT("ToolTip"), TEXT("Size of the vector field volume."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UVectorFieldStatic(Z_Construct_UClass_UVectorFieldStatic, TEXT("UVectorFieldStatic"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UVectorFieldStatic);
	UFunction* Z_Construct_UFunction_UVehicleWheel_GetRotationAngle()
	{
		struct VehicleWheel_eventGetRotationAngle_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVehicleWheel();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetRotationAngle"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(VehicleWheel_eventGetRotationAngle_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, VehicleWheel_eventGetRotationAngle_Parms), 0x0000000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Game|Components|WheeledVehicleMovement"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Vehicles/VehicleWheel.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVehicleWheel_GetSteerAngle()
	{
		struct VehicleWheel_eventGetSteerAngle_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVehicleWheel();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetSteerAngle"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(VehicleWheel_eventGetSteerAngle_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, VehicleWheel_eventGetSteerAngle_Parms), 0x0000000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Game|Components|WheeledVehicleMovement"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Vehicles/VehicleWheel.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVehicleWheel_GetSuspensionOffset()
	{
		struct VehicleWheel_eventGetSuspensionOffset_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVehicleWheel();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetSuspensionOffset"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(VehicleWheel_eventGetSuspensionOffset_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, VehicleWheel_eventGetSuspensionOffset_Parms), 0x0000000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Game|Components|WheeledVehicleMovement"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Vehicles/VehicleWheel.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UVehicleWheel_NoRegister()
	{
		return UVehicleWheel::StaticClass();
	}
	UClass* Z_Construct_UClass_UVehicleWheel()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UVehicleWheel::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_UVehicleWheel_GetRotationAngle());
				OuterClass->LinkChild(Z_Construct_UFunction_UVehicleWheel_GetSteerAngle());
				OuterClass->LinkChild(Z_Construct_UFunction_UVehicleWheel_GetSuspensionOffset());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Velocity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Velocity"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Velocity, UVehicleWheel), 0x0000000000002000, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_OldLocation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OldLocation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(OldLocation, UVehicleWheel), 0x0000000000002000, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_Location = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Location"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Location, UVehicleWheel), 0x0000000000002000, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_DebugLatForce = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DebugLatForce"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DebugLatForce, UVehicleWheel), 0x0000000000002000);
				UProperty* NewProp_DebugLongForce = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DebugLongForce"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DebugLongForce, UVehicleWheel), 0x0000000000002000);
				UProperty* NewProp_DebugWheelTorque = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DebugWheelTorque"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DebugWheelTorque, UVehicleWheel), 0x0000000000002000);
				UProperty* NewProp_DebugNormalizedTireLoad = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DebugNormalizedTireLoad"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DebugNormalizedTireLoad, UVehicleWheel), 0x0000000000002000);
				UProperty* NewProp_DebugLatSlip = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DebugLatSlip"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DebugLatSlip, UVehicleWheel), 0x0000000000002000);
				UProperty* NewProp_DebugLongSlip = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DebugLongSlip"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DebugLongSlip, UVehicleWheel), 0x0000000000002000);
				UProperty* NewProp_WheelIndex = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WheelIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(WheelIndex, UVehicleWheel), 0x0000000000002000);
				UProperty* NewProp_VehicleSim = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VehicleSim"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(VehicleSim, UVehicleWheel), 0x0000000000082008, Z_Construct_UClass_UWheeledVehicleMovementComponent_NoRegister());
				UProperty* NewProp_MaxHandBrakeTorque = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxHandBrakeTorque"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MaxHandBrakeTorque, UVehicleWheel), 0x0000000000000001);
				UProperty* NewProp_MaxBrakeTorque = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxBrakeTorque"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MaxBrakeTorque, UVehicleWheel), 0x0000000000000001);
				UProperty* NewProp_SuspensionDampingRatio = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SuspensionDampingRatio"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(SuspensionDampingRatio, UVehicleWheel), 0x0000000000000001);
				UProperty* NewProp_SuspensionNaturalFrequency = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SuspensionNaturalFrequency"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(SuspensionNaturalFrequency, UVehicleWheel), 0x0000000000000001);
				UProperty* NewProp_SuspensionMaxDrop = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SuspensionMaxDrop"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(SuspensionMaxDrop, UVehicleWheel), 0x0000000000000001);
				UProperty* NewProp_SuspensionMaxRaise = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SuspensionMaxRaise"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(SuspensionMaxRaise, UVehicleWheel), 0x0000000000000001);
				UProperty* NewProp_SuspensionForceOffset = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SuspensionForceOffset"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(SuspensionForceOffset, UVehicleWheel), 0x0000000000000001);
				UProperty* NewProp_LongStiffValue = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LongStiffValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(LongStiffValue, UVehicleWheel), 0x0000000000000001);
				UProperty* NewProp_LatStiffValue = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LatStiffValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(LatStiffValue, UVehicleWheel), 0x0000000000000001);
				UProperty* NewProp_LatStiffMaxLoad = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LatStiffMaxLoad"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(LatStiffMaxLoad, UVehicleWheel), 0x0000000000000001);
				UProperty* NewProp_TireType = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TireType"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(TireType, UVehicleWheel), 0x0000000000000001, Z_Construct_UClass_UTireType_NoRegister());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAffectedByHandbrake, UVehicleWheel, bool);
				UProperty* NewProp_bAffectedByHandbrake = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAffectedByHandbrake"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAffectedByHandbrake, UVehicleWheel), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bAffectedByHandbrake, UVehicleWheel), sizeof(bool), true);
				UProperty* NewProp_SteerAngle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SteerAngle"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(SteerAngle, UVehicleWheel), 0x0000000000000001);
				UProperty* NewProp_DampingRate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DampingRate"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DampingRate, UVehicleWheel), 0x0000000000000001);
				UProperty* NewProp_Mass = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Mass"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Mass, UVehicleWheel), 0x0000000000000001);
				UProperty* NewProp_ShapeWidth = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ShapeWidth"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ShapeWidth, UVehicleWheel), 0x0000000000000001);
				UProperty* NewProp_ShapeRadius = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ShapeRadius"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ShapeRadius, UVehicleWheel), 0x0000000000000001);
				UProperty* NewProp_Offset = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Offset"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Offset, UVehicleWheel), 0x0000000000000001, Z_Construct_UScriptStruct_FVector());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAutoAdjustCollisionSize, UVehicleWheel, bool);
				UProperty* NewProp_bAutoAdjustCollisionSize = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAutoAdjustCollisionSize"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAutoAdjustCollisionSize, UVehicleWheel), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bAutoAdjustCollisionSize, UVehicleWheel), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDontCreateShape, UVehicleWheel, bool);
				UProperty* NewProp_bDontCreateShape = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bDontCreateShape"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDontCreateShape, UVehicleWheel), 0x0000000000010001, CPP_BOOL_PROPERTY_BITMASK(bDontCreateShape, UVehicleWheel), sizeof(bool), true);
				UProperty* NewProp_CollisionMesh = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CollisionMesh"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(CollisionMesh, UVehicleWheel), 0x0000000000010001, Z_Construct_UClass_UStaticMesh_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UVehicleWheel_GetRotationAngle()); // 2247831221
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UVehicleWheel_GetSteerAngle()); // 2826750398
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UVehicleWheel_GetSuspensionOffset()); // 39814026
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Vehicles/VehicleWheel.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Vehicles/VehicleWheel.h"));
				MetaData->SetValue(NewProp_Velocity, TEXT("ModuleRelativePath"), TEXT("Classes/Vehicles/VehicleWheel.h"));
				MetaData->SetValue(NewProp_Velocity, TEXT("ToolTip"), TEXT("Current velocity of the wheel center (change in location over time)"));
				MetaData->SetValue(NewProp_OldLocation, TEXT("ModuleRelativePath"), TEXT("Classes/Vehicles/VehicleWheel.h"));
				MetaData->SetValue(NewProp_OldLocation, TEXT("ToolTip"), TEXT("Worldspace location of this wheel last frame"));
				MetaData->SetValue(NewProp_Location, TEXT("ModuleRelativePath"), TEXT("Classes/Vehicles/VehicleWheel.h"));
				MetaData->SetValue(NewProp_Location, TEXT("ToolTip"), TEXT("Worldspace location of this wheel"));
				MetaData->SetValue(NewProp_DebugLatForce, TEXT("ModuleRelativePath"), TEXT("Classes/Vehicles/VehicleWheel.h"));
				MetaData->SetValue(NewProp_DebugLatForce, TEXT("ToolTip"), TEXT("Lateral force the wheel is applying to the chassis"));
				MetaData->SetValue(NewProp_DebugLongForce, TEXT("ModuleRelativePath"), TEXT("Classes/Vehicles/VehicleWheel.h"));
				MetaData->SetValue(NewProp_DebugLongForce, TEXT("ToolTip"), TEXT("Longitudinal force the wheel is applying to the chassis"));
				MetaData->SetValue(NewProp_DebugWheelTorque, TEXT("ModuleRelativePath"), TEXT("Classes/Vehicles/VehicleWheel.h"));
				MetaData->SetValue(NewProp_DebugWheelTorque, TEXT("ToolTip"), TEXT("Wheel torque"));
				MetaData->SetValue(NewProp_DebugNormalizedTireLoad, TEXT("ModuleRelativePath"), TEXT("Classes/Vehicles/VehicleWheel.h"));
				MetaData->SetValue(NewProp_DebugNormalizedTireLoad, TEXT("ToolTip"), TEXT("How much force the tire experiences at rest devided by how much force it is experiencing now"));
				MetaData->SetValue(NewProp_DebugLatSlip, TEXT("ModuleRelativePath"), TEXT("Classes/Vehicles/VehicleWheel.h"));
				MetaData->SetValue(NewProp_DebugLatSlip, TEXT("ToolTip"), TEXT("Lateral slip experienced by the wheel"));
				MetaData->SetValue(NewProp_DebugLongSlip, TEXT("ModuleRelativePath"), TEXT("Classes/Vehicles/VehicleWheel.h"));
				MetaData->SetValue(NewProp_DebugLongSlip, TEXT("ToolTip"), TEXT("Longitudinal slip experienced by the wheel"));
				MetaData->SetValue(NewProp_WheelIndex, TEXT("ModuleRelativePath"), TEXT("Classes/Vehicles/VehicleWheel.h"));
				MetaData->SetValue(NewProp_WheelIndex, TEXT("ToolTip"), TEXT("Our index in the vehicle's (and setup's) wheels array"));
				MetaData->SetValue(NewProp_VehicleSim, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_VehicleSim, TEXT("ModuleRelativePath"), TEXT("Classes/Vehicles/VehicleWheel.h"));
				MetaData->SetValue(NewProp_VehicleSim, TEXT("ToolTip"), TEXT("The vehicle that owns us"));
				MetaData->SetValue(NewProp_MaxHandBrakeTorque, TEXT("Category"), TEXT("Brakes"));
				MetaData->SetValue(NewProp_MaxHandBrakeTorque, TEXT("ModuleRelativePath"), TEXT("Classes/Vehicles/VehicleWheel.h"));
				MetaData->SetValue(NewProp_MaxHandBrakeTorque, TEXT("ToolTip"), TEXT("Max handbrake brake torque for this wheel (Nm). A handbrake should have a stronger brake torque\nthan the brake. This will be ignored for wheels that are not affected by the handbrake."));
				MetaData->SetValue(NewProp_MaxBrakeTorque, TEXT("Category"), TEXT("Brakes"));
				MetaData->SetValue(NewProp_MaxBrakeTorque, TEXT("ModuleRelativePath"), TEXT("Classes/Vehicles/VehicleWheel.h"));
				MetaData->SetValue(NewProp_MaxBrakeTorque, TEXT("ToolTip"), TEXT("max brake torque for this wheel (Nm)"));
				MetaData->SetValue(NewProp_SuspensionDampingRatio, TEXT("Category"), TEXT("Suspension"));
				MetaData->SetValue(NewProp_SuspensionDampingRatio, TEXT("ModuleRelativePath"), TEXT("Classes/Vehicles/VehicleWheel.h"));
				MetaData->SetValue(NewProp_SuspensionDampingRatio, TEXT("ToolTip"), TEXT("The rate at which energy is dissipated from the spring. Standard cars have values between 0.8 and 1.2.\nvalues < 1 are more sluggish, values > 1 or more twitchy"));
				MetaData->SetValue(NewProp_SuspensionNaturalFrequency, TEXT("Category"), TEXT("Suspension"));
				MetaData->SetValue(NewProp_SuspensionNaturalFrequency, TEXT("ModuleRelativePath"), TEXT("Classes/Vehicles/VehicleWheel.h"));
				MetaData->SetValue(NewProp_SuspensionNaturalFrequency, TEXT("ToolTip"), TEXT("Oscillation frequency of suspension. Standard cars have values between 5 and 10"));
				MetaData->SetValue(NewProp_SuspensionMaxDrop, TEXT("Category"), TEXT("Suspension"));
				MetaData->SetValue(NewProp_SuspensionMaxDrop, TEXT("ModuleRelativePath"), TEXT("Classes/Vehicles/VehicleWheel.h"));
				MetaData->SetValue(NewProp_SuspensionMaxDrop, TEXT("ToolTip"), TEXT("How far the wheel can drop below the resting position"));
				MetaData->SetValue(NewProp_SuspensionMaxRaise, TEXT("Category"), TEXT("Suspension"));
				MetaData->SetValue(NewProp_SuspensionMaxRaise, TEXT("ModuleRelativePath"), TEXT("Classes/Vehicles/VehicleWheel.h"));
				MetaData->SetValue(NewProp_SuspensionMaxRaise, TEXT("ToolTip"), TEXT("How far the wheel can go above the resting position"));
				MetaData->SetValue(NewProp_SuspensionForceOffset, TEXT("Category"), TEXT("Suspension"));
				MetaData->SetValue(NewProp_SuspensionForceOffset, TEXT("ModuleRelativePath"), TEXT("Classes/Vehicles/VehicleWheel.h"));
				MetaData->SetValue(NewProp_SuspensionForceOffset, TEXT("ToolTip"), TEXT("Vertical offset from vehicle center of mass where suspension forces are applied"));
				MetaData->SetValue(NewProp_LongStiffValue, TEXT("Category"), TEXT("Tire"));
				MetaData->SetValue(NewProp_LongStiffValue, TEXT("ModuleRelativePath"), TEXT("Classes/Vehicles/VehicleWheel.h"));
				MetaData->SetValue(NewProp_LongStiffValue, TEXT("ToolTip"), TEXT("How much longitudinal stiffness to have given longitudinal slip"));
				MetaData->SetValue(NewProp_LatStiffValue, TEXT("Category"), TEXT("Tire"));
				MetaData->SetValue(NewProp_LatStiffValue, TEXT("ClampMin"), TEXT("0.01"));
				MetaData->SetValue(NewProp_LatStiffValue, TEXT("ModuleRelativePath"), TEXT("Classes/Vehicles/VehicleWheel.h"));
				MetaData->SetValue(NewProp_LatStiffValue, TEXT("ToolTip"), TEXT("How much lateral stiffness to have given lateral slip"));
				MetaData->SetValue(NewProp_LatStiffValue, TEXT("UIMin"), TEXT("0.01"));
				MetaData->SetValue(NewProp_LatStiffMaxLoad, TEXT("Category"), TEXT("Tire"));
				MetaData->SetValue(NewProp_LatStiffMaxLoad, TEXT("ClampMin"), TEXT("0.01"));
				MetaData->SetValue(NewProp_LatStiffMaxLoad, TEXT("ModuleRelativePath"), TEXT("Classes/Vehicles/VehicleWheel.h"));
				MetaData->SetValue(NewProp_LatStiffMaxLoad, TEXT("ToolTip"), TEXT("Max normalized tire load at which the tire can deliver no more lateral stiffness no matter how much extra load is applied to the tire."));
				MetaData->SetValue(NewProp_LatStiffMaxLoad, TEXT("UIMin"), TEXT("0.01"));
				MetaData->SetValue(NewProp_TireType, TEXT("Category"), TEXT("Tire"));
				MetaData->SetValue(NewProp_TireType, TEXT("ModuleRelativePath"), TEXT("Classes/Vehicles/VehicleWheel.h"));
				MetaData->SetValue(NewProp_TireType, TEXT("ToolTip"), TEXT("Tire type for the wheel. Determines friction"));
				MetaData->SetValue(NewProp_bAffectedByHandbrake, TEXT("Category"), TEXT("Wheel"));
				MetaData->SetValue(NewProp_bAffectedByHandbrake, TEXT("ModuleRelativePath"), TEXT("Classes/Vehicles/VehicleWheel.h"));
				MetaData->SetValue(NewProp_bAffectedByHandbrake, TEXT("ToolTip"), TEXT("Whether handbrake should affect this wheel"));
				MetaData->SetValue(NewProp_SteerAngle, TEXT("Category"), TEXT("WheelsSetup"));
				MetaData->SetValue(NewProp_SteerAngle, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_SteerAngle, TEXT("ModuleRelativePath"), TEXT("Classes/Vehicles/VehicleWheel.h"));
				MetaData->SetValue(NewProp_SteerAngle, TEXT("ToolTip"), TEXT("steer angle in degrees for this wheel"));
				MetaData->SetValue(NewProp_SteerAngle, TEXT("UIMin"), TEXT("0"));
				MetaData->SetValue(NewProp_DampingRate, TEXT("Category"), TEXT("Wheel"));
				MetaData->SetValue(NewProp_DampingRate, TEXT("ClampMin"), TEXT("0.01"));
				MetaData->SetValue(NewProp_DampingRate, TEXT("ModuleRelativePath"), TEXT("Classes/Vehicles/VehicleWheel.h"));
				MetaData->SetValue(NewProp_DampingRate, TEXT("ToolTip"), TEXT("Damping rate for this wheel (Kgm^2/s)"));
				MetaData->SetValue(NewProp_DampingRate, TEXT("UIMin"), TEXT("0.01"));
				MetaData->SetValue(NewProp_Mass, TEXT("Category"), TEXT("Wheel"));
				MetaData->SetValue(NewProp_Mass, TEXT("ClampMin"), TEXT("0.01"));
				MetaData->SetValue(NewProp_Mass, TEXT("ModuleRelativePath"), TEXT("Classes/Vehicles/VehicleWheel.h"));
				MetaData->SetValue(NewProp_Mass, TEXT("ToolTip"), TEXT("Mass of this wheel"));
				MetaData->SetValue(NewProp_Mass, TEXT("UIMin"), TEXT("0.01"));
				MetaData->SetValue(NewProp_ShapeWidth, TEXT("Category"), TEXT("Wheel"));
				MetaData->SetValue(NewProp_ShapeWidth, TEXT("ClampMin"), TEXT("0.01"));
				MetaData->SetValue(NewProp_ShapeWidth, TEXT("ModuleRelativePath"), TEXT("Classes/Vehicles/VehicleWheel.h"));
				MetaData->SetValue(NewProp_ShapeWidth, TEXT("ToolTip"), TEXT("Width of the wheel"));
				MetaData->SetValue(NewProp_ShapeWidth, TEXT("UIMin"), TEXT("0.01"));
				MetaData->SetValue(NewProp_ShapeRadius, TEXT("Category"), TEXT("Wheel"));
				MetaData->SetValue(NewProp_ShapeRadius, TEXT("ClampMin"), TEXT("0.01"));
				MetaData->SetValue(NewProp_ShapeRadius, TEXT("ModuleRelativePath"), TEXT("Classes/Vehicles/VehicleWheel.h"));
				MetaData->SetValue(NewProp_ShapeRadius, TEXT("ToolTip"), TEXT("Radius of the wheel"));
				MetaData->SetValue(NewProp_ShapeRadius, TEXT("UIMin"), TEXT("0.01"));
				MetaData->SetValue(NewProp_Offset, TEXT("Category"), TEXT("Wheel"));
				MetaData->SetValue(NewProp_Offset, TEXT("ModuleRelativePath"), TEXT("Classes/Vehicles/VehicleWheel.h"));
				MetaData->SetValue(NewProp_Offset, TEXT("ToolTip"), TEXT("If BoneName is specified, offset the wheel from the bone's location.\nOtherwise this offsets the wheel from the vehicle's origin."));
				MetaData->SetValue(NewProp_bAutoAdjustCollisionSize, TEXT("Category"), TEXT("Shape"));
				MetaData->SetValue(NewProp_bAutoAdjustCollisionSize, TEXT("ModuleRelativePath"), TEXT("Classes/Vehicles/VehicleWheel.h"));
				MetaData->SetValue(NewProp_bAutoAdjustCollisionSize, TEXT("ToolTip"), TEXT("If true, ShapeRadius and ShapeWidth will be used to automatically scale collision taken from CollisionMesh to match wheel size.\nIf false, size of CollisionMesh won't be changed. Use if you want to scale wheels manually."));
				MetaData->SetValue(NewProp_bDontCreateShape, TEXT("Category"), TEXT("Shape"));
				MetaData->SetValue(NewProp_bDontCreateShape, TEXT("ModuleRelativePath"), TEXT("Classes/Vehicles/VehicleWheel.h"));
				MetaData->SetValue(NewProp_bDontCreateShape, TEXT("ToolTip"), TEXT("If set, shape won't be created, but mapped from chassis mesh"));
				MetaData->SetValue(NewProp_CollisionMesh, TEXT("Category"), TEXT("Shape"));
				MetaData->SetValue(NewProp_CollisionMesh, TEXT("ModuleRelativePath"), TEXT("Classes/Vehicles/VehicleWheel.h"));
				MetaData->SetValue(NewProp_CollisionMesh, TEXT("ToolTip"), TEXT("Static mesh with collision setup for wheel, will be used to create wheel shape\n(if empty, sphere will be added as wheel shape, check bDontCreateShape flag)"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UVehicleWheel(Z_Construct_UClass_UVehicleWheel, TEXT("UVehicleWheel"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UVehicleWheel);
	UClass* Z_Construct_UClass_UVertexAnimBase_NoRegister()
	{
		return UVertexAnimBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UVertexAnimBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UVertexAnimBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080081;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_BaseSkelMesh = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BaseSkelMesh"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(BaseSkelMesh, UVertexAnimBase), 0x0000010000000000, Z_Construct_UClass_USkeletalMesh_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Animation/VertexAnim/VertexAnimBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/VertexAnim/VertexAnimBase.h"));
				MetaData->SetValue(NewProp_BaseSkelMesh, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/VertexAnim/VertexAnimBase.h"));
				MetaData->SetValue(NewProp_BaseSkelMesh, TEXT("ToolTip"), TEXT("USkeletalMesh that this vertex animation works on."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UVertexAnimBase(Z_Construct_UClass_UVertexAnimBase, TEXT("UVertexAnimBase"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UVertexAnimBase);
	UClass* Z_Construct_UClass_UMorphTarget_NoRegister()
	{
		return UMorphTarget::StaticClass();
	}
	UClass* Z_Construct_UClass_UMorphTarget()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UVertexAnimBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UMorphTarget::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Animation/VertexAnim/MorphTarget.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/VertexAnim/MorphTarget.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMorphTarget(Z_Construct_UClass_UMorphTarget, TEXT("UMorphTarget"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMorphTarget);
	UClass* Z_Construct_UClass_UVertexAnimation_NoRegister()
	{
		return UVertexAnimation::StaticClass();
	}
	UClass* Z_Construct_UClass_UVertexAnimation()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UVertexAnimBase();
			Z_Construct_UPackage_Engine();
			OuterClass = UVertexAnimation::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_NumAnimatedVerts = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NumAnimatedVerts"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(NumAnimatedVerts, UVertexAnimation), 0x0000000000000000);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Animation/VertexAnim/VertexAnimation.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/VertexAnim/VertexAnimation.h"));
				MetaData->SetValue(NewProp_NumAnimatedVerts, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/VertexAnim/VertexAnimation.h"));
				MetaData->SetValue(NewProp_NumAnimatedVerts, TEXT("ToolTip"), TEXT("Number of verts animated by this animation, should be size of Deltas array in each frame"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UVertexAnimation(Z_Construct_UClass_UVertexAnimation, TEXT("UVertexAnimation"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UVertexAnimation);
	UClass* Z_Construct_UClass_UVisualLoggerAutomationTests_NoRegister()
	{
		return UVisualLoggerAutomationTests::StaticClass();
	}
	UClass* Z_Construct_UClass_UVisualLoggerAutomationTests()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UVisualLoggerAutomationTests::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000288;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("UObject"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("VisualLogger/VisualLoggerAutomationTests.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("false"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/VisualLogger/VisualLoggerAutomationTests.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UVisualLoggerAutomationTests(Z_Construct_UClass_UVisualLoggerAutomationTests, TEXT("UVisualLoggerAutomationTests"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UVisualLoggerAutomationTests);
	UClass* Z_Construct_UClass_UWorldComposition_NoRegister()
	{
		return UWorldComposition::StaticClass();
	}
	UClass* Z_Construct_UClass_UWorldComposition()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Engine();
			OuterClass = UWorldComposition::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100084;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_RebaseOriginDistance = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RebaseOriginDistance"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(RebaseOriginDistance, UWorldComposition), 0x0000000000004000);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bRebaseOriginIn3DSpace, UWorldComposition, bool);
				UProperty* NewProp_bRebaseOriginIn3DSpace = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bRebaseOriginIn3DSpace"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bRebaseOriginIn3DSpace, UWorldComposition), 0x0000000000004000, CPP_BOOL_PROPERTY_BITMASK(bRebaseOriginIn3DSpace, UWorldComposition), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLoadAllTilesDuringCinematic, UWorldComposition, bool);
				UProperty* NewProp_bLoadAllTilesDuringCinematic = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bLoadAllTilesDuringCinematic"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLoadAllTilesDuringCinematic, UWorldComposition), 0x0000000000004000, CPP_BOOL_PROPERTY_BITMASK(bLoadAllTilesDuringCinematic, UWorldComposition), sizeof(bool), true);
				UProperty* NewProp_TilesStreamingTimeThreshold = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TilesStreamingTimeThreshold"), RF_Public|RF_Transient|RF_Native) UDoubleProperty(CPP_PROPERTY_BASE(TilesStreamingTimeThreshold, UWorldComposition), 0x0000000000004000);
				UProperty* NewProp_TilesStreaming = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TilesStreaming"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(TilesStreaming, UWorldComposition), 0x0000000000002000);
				UProperty* NewProp_TilesStreaming_Inner = new(EC_InternalUseOnlyConstructor, NewProp_TilesStreaming, TEXT("TilesStreaming"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_ULevelStreaming_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/WorldComposition.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/WorldComposition.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("WorldComposition represents world structure:\n    - Holds list of all level packages participating in this world and theirs base parameters (bounding boxes, offset from origin)\n    - Holds list of streaming level objects to stream in and out based on distance from current view point\n - Handles properly levels repositioning during level loading and saving"));
				MetaData->SetValue(NewProp_RebaseOriginDistance, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/WorldComposition.h"));
				MetaData->SetValue(NewProp_RebaseOriginDistance, TEXT("ToolTip"), TEXT("Maximum distance to current view point where we should initiate origin rebasing"));
				MetaData->SetValue(NewProp_bRebaseOriginIn3DSpace, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/WorldComposition.h"));
				MetaData->SetValue(NewProp_bRebaseOriginIn3DSpace, TEXT("ToolTip"), TEXT("Whether to rebase origin in 3D space, otherwise only on XY plane"));
				MetaData->SetValue(NewProp_bLoadAllTilesDuringCinematic, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/WorldComposition.h"));
				MetaData->SetValue(NewProp_bLoadAllTilesDuringCinematic, TEXT("ToolTip"), TEXT("Whether all distance dependent tiles should be loaded and visible during cinematic"));
				MetaData->SetValue(NewProp_TilesStreamingTimeThreshold, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/WorldComposition.h"));
				MetaData->SetValue(NewProp_TilesStreamingTimeThreshold, TEXT("ToolTip"), TEXT("Time threshold between tile streaming state changes"));
				MetaData->SetValue(NewProp_TilesStreaming, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/WorldComposition.h"));
				MetaData->SetValue(NewProp_TilesStreaming, TEXT("ToolTip"), TEXT("Streaming level objects for each tile"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UWorldComposition(Z_Construct_UClass_UWorldComposition, TEXT("UWorldComposition"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UWorldComposition);
	UEnum* Z_Construct_UEnum_Engine_EPinHidingMode()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EPinHidingMode_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EPinHidingMode"), 0, Get_Z_Construct_UEnum_Engine_EPinHidingMode_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EPinHidingMode"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPinHidingMode::NeverAsPin")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPinHidingMode::PinHiddenByDefault")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPinHidingMode::PinShownByDefault")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPinHidingMode::AlwaysAsPin")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPinHidingMode::EPinHidingMode_MAX")), 4));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("AlwaysAsPin.ToolTip"), TEXT("Always show this property as a pin; it never makes sense to edit it in the details panel (default for FPoseLink properties)."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNodeBase.h"));
			MetaData->SetValue(ReturnEnum, TEXT("NeverAsPin.ToolTip"), TEXT("Never show this property as a pin, it is only editable in the details panel (default for everything but FPoseLink properties)."));
			MetaData->SetValue(ReturnEnum, TEXT("PinHiddenByDefault.ToolTip"), TEXT("Hide this property by default, but allow the user to expose it as a pin via the details panel."));
			MetaData->SetValue(ReturnEnum, TEXT("PinShownByDefault.ToolTip"), TEXT("Show this property as a pin by default, but allow the user to hide it via the details panel."));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("The display mode of editable values on an animation node."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EPinHidingMode_CRC() { return 3564784224U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_Base()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_Base_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("AnimNode_Base"), sizeof(FAnimNode_Base), Get_Z_Construct_UScriptStruct_FAnimNode_Base_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_Base"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FAnimNode_Base>, EStructFlags(0x00000201));
			UProperty* NewProp_EvaluateGraphExposedInputs = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("EvaluateGraphExposedInputs"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(EvaluateGraphExposedInputs, FAnimNode_Base), 0x0000000000000000, Z_Construct_UScriptStruct_FExposedValueHandler());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNodeBase.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("This is the base of all runtime animation nodes\n\nTo create a new animation node:\n  Create a struct derived from FAnimNode_Base - this is your runtime node\n  Create a class derived from UAnimGraphNode_Base, containing an instance of your runtime node as a member - this is your visual/editor-only node"));
			MetaData->SetValue(NewProp_EvaluateGraphExposedInputs, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNodeBase.h"));
			MetaData->SetValue(NewProp_EvaluateGraphExposedInputs, TEXT("ToolTip"), TEXT("The default handler for graph-exposed inputs"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_Base_CRC() { return 696407469U; }
	UScriptStruct* Z_Construct_UScriptStruct_FExposedValueHandler()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FExposedValueHandler_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("ExposedValueHandler"), sizeof(FExposedValueHandler), Get_Z_Construct_UScriptStruct_FExposedValueHandler_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ExposedValueHandler"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FExposedValueHandler>, EStructFlags(0x00000001));
			UProperty* NewProp_BoundFunction = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BoundFunction"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(BoundFunction, FExposedValueHandler), 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNodeBase.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("An exposed value updater"));
			MetaData->SetValue(NewProp_BoundFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNodeBase.h"));
			MetaData->SetValue(NewProp_BoundFunction, TEXT("ToolTip"), TEXT("The function to call to update associated properties (can be NULL)"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FExposedValueHandler_CRC() { return 799382760U; }
	UScriptStruct* Z_Construct_UScriptStruct_FComponentSpacePoseLink()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FComponentSpacePoseLink_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("ComponentSpacePoseLink"), sizeof(FComponentSpacePoseLink), Get_Z_Construct_UScriptStruct_FComponentSpacePoseLink_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ComponentSpacePoseLink"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FPoseLinkBase(), new UScriptStruct::TCppStructOps<FComponentSpacePoseLink>, EStructFlags(0x00000201));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNodeBase.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("A component-space pose link to another node"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FComponentSpacePoseLink_CRC() { return 1909281763U; }
	UScriptStruct* Z_Construct_UScriptStruct_FPoseLink()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FPoseLink_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("PoseLink"), sizeof(FPoseLink), Get_Z_Construct_UScriptStruct_FPoseLink_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PoseLink"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FPoseLinkBase(), new UScriptStruct::TCppStructOps<FPoseLink>, EStructFlags(0x00000201));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNodeBase.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("A local-space pose link to another node"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FPoseLink_CRC() { return 3680982282U; }
	UScriptStruct* Z_Construct_UScriptStruct_FPoseLinkBase()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FPoseLinkBase_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("PoseLinkBase"), sizeof(FPoseLinkBase), Get_Z_Construct_UScriptStruct_FPoseLinkBase_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PoseLinkBase"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FPoseLinkBase>, EStructFlags(0x00000201));
#if WITH_EDITORONLY_DATA
			UProperty* NewProp_SourceLinkID = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SourceLinkID"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(SourceLinkID, FPoseLinkBase), 0x0000000800000000);
#endif // WITH_EDITORONLY_DATA
			UProperty* NewProp_LinkID = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LinkID"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(LinkID, FPoseLinkBase), 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNodeBase.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("A pose link to another node"));
			MetaData->SetValue(NewProp_SourceLinkID, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNodeBase.h"));
			MetaData->SetValue(NewProp_SourceLinkID, TEXT("ToolTip"), TEXT("The source link ID, used for debug visualization."));
			MetaData->SetValue(NewProp_LinkID, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNodeBase.h"));
			MetaData->SetValue(NewProp_LinkID, TEXT("ToolTip"), TEXT("Serialized link ID, used to build the non-serialized pointer map."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FPoseLinkBase_CRC() { return 1349282015U; }
	UScriptStruct* Z_Construct_UScriptStruct_FInputScaleBias()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FInputScaleBias_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("InputScaleBias"), sizeof(FInputScaleBias), Get_Z_Construct_UScriptStruct_FInputScaleBias_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("InputScaleBias"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FInputScaleBias>, EStructFlags(0x00000201));
			UProperty* NewProp_Bias = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Bias"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Bias, FInputScaleBias), 0x0000000000000005);
			UProperty* NewProp_Scale = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Scale"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Scale, FInputScaleBias), 0x0000000000000005);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/InputScaleBias.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Input scaling struct"));
			MetaData->SetValue(NewProp_Bias, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_Bias, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/InputScaleBias.h"));
			MetaData->SetValue(NewProp_Scale, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_Scale, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/InputScaleBias.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FInputScaleBias_CRC() { return 3282878677U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_ApplyAdditive()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_ApplyAdditive_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("AnimNode_ApplyAdditive"), sizeof(FAnimNode_ApplyAdditive), Get_Z_Construct_UScriptStruct_FAnimNode_ApplyAdditive_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_ApplyAdditive"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_Base(), new UScriptStruct::TCppStructOps<FAnimNode_ApplyAdditive>, EStructFlags(0x00000201));
			UProperty* NewProp_AlphaScaleBias = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("AlphaScaleBias"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(AlphaScaleBias, FAnimNode_ApplyAdditive), 0x0000000000000005, Z_Construct_UScriptStruct_FInputScaleBias());
			UProperty* NewProp_Alpha = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Alpha"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Alpha, FAnimNode_ApplyAdditive), 0x0000000000000005);
			UProperty* NewProp_Additive = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Additive"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Additive, FAnimNode_ApplyAdditive), 0x0000000000000005, Z_Construct_UScriptStruct_FPoseLink());
			UProperty* NewProp_Base = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Base"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Base, FAnimNode_ApplyAdditive), 0x0000000000000005, Z_Construct_UScriptStruct_FPoseLink());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_ApplyAdditive.h"));
			MetaData->SetValue(NewProp_AlphaScaleBias, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_AlphaScaleBias, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_ApplyAdditive.h"));
			MetaData->SetValue(NewProp_Alpha, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_Alpha, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_ApplyAdditive.h"));
			MetaData->SetValue(NewProp_Alpha, TEXT("PinShownByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_Additive, TEXT("Category"), TEXT("Links"));
			MetaData->SetValue(NewProp_Additive, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_ApplyAdditive.h"));
			MetaData->SetValue(NewProp_Base, TEXT("Category"), TEXT("Links"));
			MetaData->SetValue(NewProp_Base, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_ApplyAdditive.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_ApplyAdditive_CRC() { return 3125437647U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_AssetPlayerBase()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_AssetPlayerBase_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("AnimNode_AssetPlayerBase"), sizeof(FAnimNode_AssetPlayerBase), Get_Z_Construct_UScriptStruct_FAnimNode_AssetPlayerBase_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_AssetPlayerBase"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_Base(), new UScriptStruct::TCppStructOps<FAnimNode_AssetPlayerBase>, EStructFlags(0x00000201));
			UProperty* NewProp_InternalTimeAccumulator = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("InternalTimeAccumulator"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InternalTimeAccumulator, FAnimNode_AssetPlayerBase), 0x0000080000002004);
			UProperty* NewProp_BlendWeight = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BlendWeight"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(BlendWeight, FAnimNode_AssetPlayerBase), 0x0000080000002004);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIgnoreForRelevancyTest, FAnimNode_AssetPlayerBase, bool);
			UProperty* NewProp_bIgnoreForRelevancyTest = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bIgnoreForRelevancyTest"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIgnoreForRelevancyTest, FAnimNode_AssetPlayerBase), 0x0000000000000005, CPP_BOOL_PROPERTY_BITMASK(bIgnoreForRelevancyTest, FAnimNode_AssetPlayerBase), sizeof(bool), true);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_AssetPlayerBase.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Base class for any asset playing anim node"));
			MetaData->SetValue(NewProp_InternalTimeAccumulator, TEXT("Category"), TEXT("DoNotEdit"));
			MetaData->SetValue(NewProp_InternalTimeAccumulator, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_AssetPlayerBase.h"));
			MetaData->SetValue(NewProp_InternalTimeAccumulator, TEXT("ToolTip"), TEXT("Accumulated time used to reference the asset in this node"));
			MetaData->SetValue(NewProp_BlendWeight, TEXT("Category"), TEXT("DoNotEdit"));
			MetaData->SetValue(NewProp_BlendWeight, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_AssetPlayerBase.h"));
			MetaData->SetValue(NewProp_BlendWeight, TEXT("ToolTip"), TEXT("Last encountered blendweight for this node"));
			MetaData->SetValue(NewProp_bIgnoreForRelevancyTest, TEXT("Category"), TEXT("Relevancy"));
			MetaData->SetValue(NewProp_bIgnoreForRelevancyTest, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_AssetPlayerBase.h"));
			MetaData->SetValue(NewProp_bIgnoreForRelevancyTest, TEXT("PinHiddenByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_bIgnoreForRelevancyTest, TEXT("ToolTip"), TEXT("If true, \"Relevant anim\" nodes that look for the highest weighted animation in a state will ignore\nthis node"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_AssetPlayerBase_CRC() { return 695586948U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_BlendListBase()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_BlendListBase_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("AnimNode_BlendListBase"), sizeof(FAnimNode_BlendListBase), Get_Z_Construct_UScriptStruct_FAnimNode_BlendListBase_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_BlendListBase"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_Base(), new UScriptStruct::TCppStructOps<FAnimNode_BlendListBase>, EStructFlags(0x00000201));
			UProperty* NewProp_LastActiveChildIndex = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LastActiveChildIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(LastActiveChildIndex, FAnimNode_BlendListBase), 0x0000080000000000);
			UProperty* NewProp_RemainingBlendTimes = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RemainingBlendTimes"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(RemainingBlendTimes, FAnimNode_BlendListBase), 0x0000080000000000);
			UProperty* NewProp_RemainingBlendTimes_Inner = new(EC_InternalUseOnlyConstructor, NewProp_RemainingBlendTimes, TEXT("RemainingBlendTimes"), RF_Public|RF_Transient|RF_Native) UFloatProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_BlendWeights = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BlendWeights"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(BlendWeights, FAnimNode_BlendListBase), 0x0000080000000000);
			UProperty* NewProp_BlendWeights_Inner = new(EC_InternalUseOnlyConstructor, NewProp_BlendWeights, TEXT("BlendWeights"), RF_Public|RF_Transient|RF_Native) UFloatProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_Blends = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Blends"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Blends, FAnimNode_BlendListBase), 0x0000000000000000);
			UProperty* NewProp_Blends_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Blends, TEXT("Blends"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FAlphaBlend());
			UProperty* NewProp_CustomBlendCurve = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CustomBlendCurve"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(CustomBlendCurve, FAnimNode_BlendListBase), 0x0000000000000001, Z_Construct_UClass_UCurveFloat_NoRegister());
			UProperty* NewProp_BlendType = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BlendType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(BlendType, FAnimNode_BlendListBase), 0x0000000000000001, Z_Construct_UEnum_Engine_EAlphaBlendOption());
			UProperty* NewProp_BlendTime = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BlendTime"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(BlendTime, FAnimNode_BlendListBase), 0x0000000000000045);
			UProperty* NewProp_BlendTime_Inner = new(EC_InternalUseOnlyConstructor, NewProp_BlendTime, TEXT("BlendTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_BlendPose = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BlendPose"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(BlendPose, FAnimNode_BlendListBase), 0x0000000000000045);
			UProperty* NewProp_BlendPose_Inner = new(EC_InternalUseOnlyConstructor, NewProp_BlendPose, TEXT("BlendPose"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FPoseLink());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_BlendListBase.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Blend list node; has many children"));
			MetaData->SetValue(NewProp_LastActiveChildIndex, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_BlendListBase.h"));
			MetaData->SetValue(NewProp_RemainingBlendTimes, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_BlendListBase.h"));
			MetaData->SetValue(NewProp_BlendWeights, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_BlendListBase.h"));
			MetaData->SetValue(NewProp_Blends, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_BlendListBase.h"));
			MetaData->SetValue(NewProp_CustomBlendCurve, TEXT("Category"), TEXT("BlendType"));
			MetaData->SetValue(NewProp_CustomBlendCurve, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_BlendListBase.h"));
			MetaData->SetValue(NewProp_BlendType, TEXT("Category"), TEXT("BlendType"));
			MetaData->SetValue(NewProp_BlendType, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_BlendListBase.h"));
			MetaData->SetValue(NewProp_BlendTime, TEXT("Category"), TEXT("Config"));
			MetaData->SetValue(NewProp_BlendTime, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_BlendListBase.h"));
			MetaData->SetValue(NewProp_BlendTime, TEXT("PinShownByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_BlendPose, TEXT("Category"), TEXT("Links"));
			MetaData->SetValue(NewProp_BlendPose, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_BlendListBase.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_BlendListBase_CRC() { return 3693784478U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_BlendListByBool()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_BlendListByBool_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("AnimNode_BlendListByBool"), sizeof(FAnimNode_BlendListByBool), Get_Z_Construct_UScriptStruct_FAnimNode_BlendListByBool_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_BlendListByBool"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_BlendListBase(), new UScriptStruct::TCppStructOps<FAnimNode_BlendListByBool>, EStructFlags(0x00000201));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bActiveValue, FAnimNode_BlendListByBool, bool);
			UProperty* NewProp_bActiveValue = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bActiveValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bActiveValue, FAnimNode_BlendListByBool), 0x0000000000000005, CPP_BOOL_PROPERTY_BITMASK(bActiveValue, FAnimNode_BlendListByBool), sizeof(bool), true);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_BlendListByBool.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("This node is effectively a 'branch', picking one of two input poses based on an input Boolean value"));
			MetaData->SetValue(NewProp_bActiveValue, TEXT("AlwaysAsPin"), TEXT(""));
			MetaData->SetValue(NewProp_bActiveValue, TEXT("Category"), TEXT("Runtime"));
			MetaData->SetValue(NewProp_bActiveValue, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_BlendListByBool.h"));
			MetaData->SetValue(NewProp_bActiveValue, TEXT("ToolTip"), TEXT("Which input should be connected to the output?"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_BlendListByBool_CRC() { return 2972033473U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_BlendListByEnum()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_BlendListByEnum_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("AnimNode_BlendListByEnum"), sizeof(FAnimNode_BlendListByEnum), Get_Z_Construct_UScriptStruct_FAnimNode_BlendListByEnum_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_BlendListByEnum"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_BlendListBase(), new UScriptStruct::TCppStructOps<FAnimNode_BlendListByEnum>, EStructFlags(0x00000201));
			UProperty* NewProp_ActiveEnumValue = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ActiveEnumValue"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(ActiveEnumValue, FAnimNode_BlendListByEnum), 0x0000000000000005);
			UProperty* NewProp_EnumToPoseIndex = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("EnumToPoseIndex"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(EnumToPoseIndex, FAnimNode_BlendListByEnum), 0x0000000000000000);
			UProperty* NewProp_EnumToPoseIndex_Inner = new(EC_InternalUseOnlyConstructor, NewProp_EnumToPoseIndex, TEXT("EnumToPoseIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_BlendListByEnum.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Blend List by Enum, it changes based on enum input that enters"));
			MetaData->SetValue(NewProp_ActiveEnumValue, TEXT("AlwaysAsPin"), TEXT(""));
			MetaData->SetValue(NewProp_ActiveEnumValue, TEXT("Category"), TEXT("Runtime"));
			MetaData->SetValue(NewProp_ActiveEnumValue, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_BlendListByEnum.h"));
			MetaData->SetValue(NewProp_ActiveEnumValue, TEXT("ToolTip"), TEXT("The currently selected pose (as an enum value)"));
			MetaData->SetValue(NewProp_EnumToPoseIndex, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_BlendListByEnum.h"));
			MetaData->SetValue(NewProp_EnumToPoseIndex, TEXT("ToolTip"), TEXT("Mapping from enum value to BlendPose index; there will be one entry per entry in the enum; entries out of range always map to pose index 0"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_BlendListByEnum_CRC() { return 2385294499U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_BlendListByInt()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_BlendListByInt_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("AnimNode_BlendListByInt"), sizeof(FAnimNode_BlendListByInt), Get_Z_Construct_UScriptStruct_FAnimNode_BlendListByInt_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_BlendListByInt"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_BlendListBase(), new UScriptStruct::TCppStructOps<FAnimNode_BlendListByInt>, EStructFlags(0x00000201));
			UProperty* NewProp_ActiveChildIndex = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ActiveChildIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ActiveChildIndex, FAnimNode_BlendListByInt), 0x0000000000000005);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_BlendListByInt.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Blend list node; has many children"));
			MetaData->SetValue(NewProp_ActiveChildIndex, TEXT("AlwaysAsPin"), TEXT(""));
			MetaData->SetValue(NewProp_ActiveChildIndex, TEXT("Category"), TEXT("Runtime"));
			MetaData->SetValue(NewProp_ActiveChildIndex, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_BlendListByInt.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_BlendListByInt_CRC() { return 3376765597U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_BlendSpacePlayer()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_BlendSpacePlayer_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("AnimNode_BlendSpacePlayer"), sizeof(FAnimNode_BlendSpacePlayer), Get_Z_Construct_UScriptStruct_FAnimNode_BlendSpacePlayer_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_BlendSpacePlayer"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_AssetPlayerBase(), new UScriptStruct::TCppStructOps<FAnimNode_BlendSpacePlayer>, EStructFlags(0x00000201));
			UProperty* NewProp_BlendSampleDataCache = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BlendSampleDataCache"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(BlendSampleDataCache, FAnimNode_BlendSpacePlayer), 0x0000080000000000);
			UProperty* NewProp_BlendSampleDataCache_Inner = new(EC_InternalUseOnlyConstructor, NewProp_BlendSampleDataCache, TEXT("BlendSampleDataCache"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FBlendSampleData());
			UProperty* NewProp_BlendFilter = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BlendFilter"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(BlendFilter, FAnimNode_BlendSpacePlayer), 0x0000080000000000, Z_Construct_UScriptStruct_FBlendFilter());
			UProperty* NewProp_GroupRole = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("GroupRole"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(GroupRole, FAnimNode_BlendSpacePlayer), 0x0000000000000000, Z_Construct_UEnum_Engine_EAnimGroupRole());
			UProperty* NewProp_GroupIndex = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("GroupIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(GroupIndex, FAnimNode_BlendSpacePlayer), 0x0000000000000000);
			UProperty* NewProp_BlendSpace = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BlendSpace"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(BlendSpace, FAnimNode_BlendSpacePlayer), 0x0000000000000005, Z_Construct_UClass_UBlendSpaceBase_NoRegister());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLoop, FAnimNode_BlendSpacePlayer, bool);
			UProperty* NewProp_bLoop = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bLoop"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLoop, FAnimNode_BlendSpacePlayer), 0x0000000000000005, CPP_BOOL_PROPERTY_BITMASK(bLoop, FAnimNode_BlendSpacePlayer), sizeof(bool), true);
			UProperty* NewProp_PlayRate = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PlayRate"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(PlayRate, FAnimNode_BlendSpacePlayer), 0x0000000000000005);
			UProperty* NewProp_Z = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Z"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Z, FAnimNode_BlendSpacePlayer), 0x0000000000000005);
			UProperty* NewProp_Y = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Y"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Y, FAnimNode_BlendSpacePlayer), 0x0000000000000005);
			UProperty* NewProp_X = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("X"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(X, FAnimNode_BlendSpacePlayer), 0x0000000000000005);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_BlendSpacePlayer.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("@TODO: Comment"));
			MetaData->SetValue(NewProp_BlendSampleDataCache, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_BlendSpacePlayer.h"));
			MetaData->SetValue(NewProp_BlendFilter, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_BlendSpacePlayer.h"));
			MetaData->SetValue(NewProp_GroupRole, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_BlendSpacePlayer.h"));
			MetaData->SetValue(NewProp_GroupRole, TEXT("ToolTip"), TEXT("The role this player can assume within the group (ignored if GroupIndex is INDEX_NONE)"));
			MetaData->SetValue(NewProp_GroupIndex, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_BlendSpacePlayer.h"));
			MetaData->SetValue(NewProp_GroupIndex, TEXT("ToolTip"), TEXT("The group index, assigned at compile time based on the editoronly GroupName (or INDEX_NONE if it is not part of any group)"));
			MetaData->SetValue(NewProp_BlendSpace, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_BlendSpace, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_BlendSpacePlayer.h"));
			MetaData->SetValue(NewProp_BlendSpace, TEXT("PinHiddenByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_BlendSpace, TEXT("ToolTip"), TEXT("The blendspace asset to play"));
			MetaData->SetValue(NewProp_bLoop, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_bLoop, TEXT("DefaultValue"), TEXT("true"));
			MetaData->SetValue(NewProp_bLoop, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_BlendSpacePlayer.h"));
			MetaData->SetValue(NewProp_bLoop, TEXT("PinHiddenByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_bLoop, TEXT("ToolTip"), TEXT("Should the animation continue looping when it reaches the end?"));
			MetaData->SetValue(NewProp_PlayRate, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_PlayRate, TEXT("DefaultValue"), TEXT("1.0"));
			MetaData->SetValue(NewProp_PlayRate, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_BlendSpacePlayer.h"));
			MetaData->SetValue(NewProp_PlayRate, TEXT("PinHiddenByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_PlayRate, TEXT("ToolTip"), TEXT("The play rate multiplier. Can be negative, which will cause the animation to play in reverse."));
			MetaData->SetValue(NewProp_Z, TEXT("Category"), TEXT("Coordinates"));
			MetaData->SetValue(NewProp_Z, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_BlendSpacePlayer.h"));
			MetaData->SetValue(NewProp_Z, TEXT("PinHiddenByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_Z, TEXT("ToolTip"), TEXT("The Z coordinate to sample in the blendspace"));
			MetaData->SetValue(NewProp_Y, TEXT("Category"), TEXT("Coordinates"));
			MetaData->SetValue(NewProp_Y, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_BlendSpacePlayer.h"));
			MetaData->SetValue(NewProp_Y, TEXT("PinShownByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_Y, TEXT("ToolTip"), TEXT("The Y coordinate to sample in the blendspace"));
			MetaData->SetValue(NewProp_X, TEXT("Category"), TEXT("Coordinates"));
			MetaData->SetValue(NewProp_X, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_BlendSpacePlayer.h"));
			MetaData->SetValue(NewProp_X, TEXT("PinShownByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_X, TEXT("ToolTip"), TEXT("The X coordinate to sample in the blendspace"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_BlendSpacePlayer_CRC() { return 586785438U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_BlendSpaceEvaluator()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_BlendSpaceEvaluator_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("AnimNode_BlendSpaceEvaluator"), sizeof(FAnimNode_BlendSpaceEvaluator), Get_Z_Construct_UScriptStruct_FAnimNode_BlendSpaceEvaluator_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_BlendSpaceEvaluator"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_BlendSpacePlayer(), new UScriptStruct::TCppStructOps<FAnimNode_BlendSpaceEvaluator>, EStructFlags(0x00000201));
			UProperty* NewProp_NormalizedTime = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("NormalizedTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(NormalizedTime, FAnimNode_BlendSpaceEvaluator), 0x0000000000000005);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_BlendSpaceEvaluator.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Evaluates a point in a blendspace, using a specific time input rather than advancing time internally.\nTypically the playback position of the animation for this node will represent something other than time, like jump height.\nThis node will not trigger any notifies present in the associated sequence."));
			MetaData->SetValue(NewProp_NormalizedTime, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_NormalizedTime, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_BlendSpaceEvaluator.h"));
			MetaData->SetValue(NewProp_NormalizedTime, TEXT("PinShownByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_NormalizedTime, TEXT("ToolTip"), TEXT("Normalized time between [0,1]. The actual length of a blendspace is dynamic based on the coordinate, so it is exposed as a normalized value."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_BlendSpaceEvaluator_CRC() { return 489485963U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_LayeredBoneBlend()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_LayeredBoneBlend_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("AnimNode_LayeredBoneBlend"), sizeof(FAnimNode_LayeredBoneBlend), Get_Z_Construct_UScriptStruct_FAnimNode_LayeredBoneBlend_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_LayeredBoneBlend"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_Base(), new UScriptStruct::TCppStructOps<FAnimNode_LayeredBoneBlend>, EStructFlags(0x00000201));
			UProperty* NewProp_CurveBlendOption = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CurveBlendOption"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(CurveBlendOption, FAnimNode_LayeredBoneBlend), 0x0000000000000005, Z_Construct_UEnum_Engine_ECurveBlendOption());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bMeshSpaceRotationBlend, FAnimNode_LayeredBoneBlend, bool);
			UProperty* NewProp_bMeshSpaceRotationBlend = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bMeshSpaceRotationBlend"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bMeshSpaceRotationBlend, FAnimNode_LayeredBoneBlend), 0x0000000000000005, CPP_BOOL_PROPERTY_BITMASK(bMeshSpaceRotationBlend, FAnimNode_LayeredBoneBlend), sizeof(bool), true);
			UProperty* NewProp_BlendWeights = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BlendWeights"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(BlendWeights, FAnimNode_LayeredBoneBlend), 0x0000000000000045);
			UProperty* NewProp_BlendWeights_Inner = new(EC_InternalUseOnlyConstructor, NewProp_BlendWeights, TEXT("BlendWeights"), RF_Public|RF_Transient|RF_Native) UFloatProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_LayerSetup = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LayerSetup"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(LayerSetup, FAnimNode_LayeredBoneBlend), 0x0000000000000045);
			UProperty* NewProp_LayerSetup_Inner = new(EC_InternalUseOnlyConstructor, NewProp_LayerSetup, TEXT("LayerSetup"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FInputBlendPose());
			UProperty* NewProp_BlendPoses = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BlendPoses"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(BlendPoses, FAnimNode_LayeredBoneBlend), 0x0000000000000045);
			UProperty* NewProp_BlendPoses_Inner = new(EC_InternalUseOnlyConstructor, NewProp_BlendPoses, TEXT("BlendPoses"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FPoseLink());
			UProperty* NewProp_BasePose = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BasePose"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(BasePose, FAnimNode_LayeredBoneBlend), 0x0000000000000005, Z_Construct_UScriptStruct_FPoseLink());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_LayeredBoneBlend.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Layered blend (per bone); has dynamic number of blendposes that can blend per different bone sets"));
			MetaData->SetValue(NewProp_CurveBlendOption, TEXT("Category"), TEXT("Config"));
			MetaData->SetValue(NewProp_CurveBlendOption, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_LayeredBoneBlend.h"));
			MetaData->SetValue(NewProp_bMeshSpaceRotationBlend, TEXT("Category"), TEXT("Config"));
			MetaData->SetValue(NewProp_bMeshSpaceRotationBlend, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_LayeredBoneBlend.h"));
			MetaData->SetValue(NewProp_BlendWeights, TEXT("Category"), TEXT("Runtime"));
			MetaData->SetValue(NewProp_BlendWeights, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_LayeredBoneBlend.h"));
			MetaData->SetValue(NewProp_BlendWeights, TEXT("PinShownByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_LayerSetup, TEXT("Category"), TEXT("Config"));
			MetaData->SetValue(NewProp_LayerSetup, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_LayeredBoneBlend.h"));
			MetaData->SetValue(NewProp_BlendPoses, TEXT("Category"), TEXT("Links"));
			MetaData->SetValue(NewProp_BlendPoses, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_LayeredBoneBlend.h"));
			MetaData->SetValue(NewProp_BlendPoses, TEXT("ToolTip"), TEXT("@TODO: Anim: Comment these members"));
			MetaData->SetValue(NewProp_BasePose, TEXT("Category"), TEXT("Links"));
			MetaData->SetValue(NewProp_BasePose, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_LayeredBoneBlend.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_LayeredBoneBlend_CRC() { return 2542031435U; }
	UEnum* Z_Construct_UEnum_Engine_ERefPoseType()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_ERefPoseType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ERefPoseType"), 0, Get_Z_Construct_UEnum_Engine_ERefPoseType_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ERefPoseType"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EIT_LocalSpace")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EIT_Additive")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EIT_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_RefPose.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_ERefPoseType_CRC() { return 228555962U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_MeshSpaceRefPose()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_MeshSpaceRefPose_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("AnimNode_MeshSpaceRefPose"), sizeof(FAnimNode_MeshSpaceRefPose), Get_Z_Construct_UScriptStruct_FAnimNode_MeshSpaceRefPose_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_MeshSpaceRefPose"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_Base(), new UScriptStruct::TCppStructOps<FAnimNode_MeshSpaceRefPose>, EStructFlags(0x00000201));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_RefPose.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_MeshSpaceRefPose_CRC() { return 3383093165U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_RefPose()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_RefPose_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("AnimNode_RefPose"), sizeof(FAnimNode_RefPose), Get_Z_Construct_UScriptStruct_FAnimNode_RefPose_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_RefPose"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_Base(), new UScriptStruct::TCppStructOps<FAnimNode_RefPose>, EStructFlags(0x00000201));
			UProperty* NewProp_RefPoseType = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RefPoseType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(RefPoseType, FAnimNode_RefPose), 0x0000000000000000, Z_Construct_UEnum_Engine_ERefPoseType());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_RefPose.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("RefPose pose nodes - ref pose or additive RefPose pose"));
			MetaData->SetValue(NewProp_RefPoseType, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_RefPose.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_RefPose_CRC() { return 3496002490U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_Root()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_Root_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("AnimNode_Root"), sizeof(FAnimNode_Root), Get_Z_Construct_UScriptStruct_FAnimNode_Root_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_Root"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_Base(), new UScriptStruct::TCppStructOps<FAnimNode_Root>, EStructFlags(0x00000201));
			UProperty* NewProp_Result = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Result"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Result, FAnimNode_Root), 0x0000000000000005, Z_Construct_UScriptStruct_FPoseLink());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_Root.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Root node of an animation tree (sink)"));
			MetaData->SetValue(NewProp_Result, TEXT("Category"), TEXT("Links"));
			MetaData->SetValue(NewProp_Result, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_Root.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_Root_CRC() { return 2050725356U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_RotateRootBone()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_RotateRootBone_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("AnimNode_RotateRootBone"), sizeof(FAnimNode_RotateRootBone), Get_Z_Construct_UScriptStruct_FAnimNode_RotateRootBone_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_RotateRootBone"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_Base(), new UScriptStruct::TCppStructOps<FAnimNode_RotateRootBone>, EStructFlags(0x00000201));
			UProperty* NewProp_MeshToComponent = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MeshToComponent"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MeshToComponent, FAnimNode_RotateRootBone), 0x0000000000000005, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_Yaw = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Yaw"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Yaw, FAnimNode_RotateRootBone), 0x0000000000000005);
			UProperty* NewProp_Pitch = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Pitch"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Pitch, FAnimNode_RotateRootBone), 0x0000000000000005);
			UProperty* NewProp_BasePose = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BasePose"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(BasePose, FAnimNode_RotateRootBone), 0x0000000000000005, Z_Construct_UScriptStruct_FPoseLink());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_RotateRootBone.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("@TODO: Comment"));
			MetaData->SetValue(NewProp_MeshToComponent, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_MeshToComponent, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_RotateRootBone.h"));
			MetaData->SetValue(NewProp_MeshToComponent, TEXT("PinShownByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_Yaw, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_Yaw, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_RotateRootBone.h"));
			MetaData->SetValue(NewProp_Yaw, TEXT("PinShownByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_Pitch, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_Pitch, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_RotateRootBone.h"));
			MetaData->SetValue(NewProp_Pitch, TEXT("PinShownByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_BasePose, TEXT("Category"), TEXT("Links"));
			MetaData->SetValue(NewProp_BasePose, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_RotateRootBone.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_RotateRootBone_CRC() { return 3453839012U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_RotationOffsetBlendSpace()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_RotationOffsetBlendSpace_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("AnimNode_RotationOffsetBlendSpace"), sizeof(FAnimNode_RotationOffsetBlendSpace), Get_Z_Construct_UScriptStruct_FAnimNode_RotationOffsetBlendSpace_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_RotationOffsetBlendSpace"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_BlendSpacePlayer(), new UScriptStruct::TCppStructOps<FAnimNode_RotationOffsetBlendSpace>, EStructFlags(0x00000201));
			UProperty* NewProp_BasePose = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BasePose"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(BasePose, FAnimNode_RotationOffsetBlendSpace), 0x0000000000000005, Z_Construct_UScriptStruct_FPoseLink());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_RotationOffsetBlendSpace.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("@TODO: Comment"));
			MetaData->SetValue(NewProp_BasePose, TEXT("Category"), TEXT("Links"));
			MetaData->SetValue(NewProp_BasePose, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_RotationOffsetBlendSpace.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_RotationOffsetBlendSpace_CRC() { return 3186692013U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_SaveCachedPose()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_SaveCachedPose_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("AnimNode_SaveCachedPose"), sizeof(FAnimNode_SaveCachedPose), Get_Z_Construct_UScriptStruct_FAnimNode_SaveCachedPose_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_SaveCachedPose"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_Base(), new UScriptStruct::TCppStructOps<FAnimNode_SaveCachedPose>, EStructFlags(0x00000201));
			UProperty* NewProp_Pose = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Pose"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Pose, FAnimNode_SaveCachedPose), 0x0000000000000005, Z_Construct_UScriptStruct_FPoseLink());
			UProperty* NewProp_LastEvaluatedContextCounter = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LastEvaluatedContextCounter"), RF_Public|RF_Transient|RF_Native) UInt16Property(CPP_PROPERTY_BASE(LastEvaluatedContextCounter, FAnimNode_SaveCachedPose), 0x0000000000002000);
			UProperty* NewProp_LastUpdatedContextCounter = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LastUpdatedContextCounter"), RF_Public|RF_Transient|RF_Native) UInt16Property(CPP_PROPERTY_BASE(LastUpdatedContextCounter, FAnimNode_SaveCachedPose), 0x0000000000002000);
			UProperty* NewProp_LastCacheBonesContextCounter = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LastCacheBonesContextCounter"), RF_Public|RF_Transient|RF_Native) UInt16Property(CPP_PROPERTY_BASE(LastCacheBonesContextCounter, FAnimNode_SaveCachedPose), 0x0000000000002000);
			UProperty* NewProp_LastInitializedContextCounter = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LastInitializedContextCounter"), RF_Public|RF_Transient|RF_Native) UInt16Property(CPP_PROPERTY_BASE(LastInitializedContextCounter, FAnimNode_SaveCachedPose), 0x0000000000002000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_SaveCachedPose.h"));
			MetaData->SetValue(NewProp_Pose, TEXT("Category"), TEXT("Links"));
			MetaData->SetValue(NewProp_Pose, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_SaveCachedPose.h"));
			MetaData->SetValue(NewProp_LastEvaluatedContextCounter, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_SaveCachedPose.h"));
			MetaData->SetValue(NewProp_LastUpdatedContextCounter, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_SaveCachedPose.h"));
			MetaData->SetValue(NewProp_LastCacheBonesContextCounter, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_SaveCachedPose.h"));
			MetaData->SetValue(NewProp_LastInitializedContextCounter, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_SaveCachedPose.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_SaveCachedPose_CRC() { return 2367531658U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_SequenceEvaluator()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_SequenceEvaluator_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("AnimNode_SequenceEvaluator"), sizeof(FAnimNode_SequenceEvaluator), Get_Z_Construct_UScriptStruct_FAnimNode_SequenceEvaluator_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_SequenceEvaluator"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_AssetPlayerBase(), new UScriptStruct::TCppStructOps<FAnimNode_SequenceEvaluator>, EStructFlags(0x00000201));
			UProperty* NewProp_ExplicitTime = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ExplicitTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ExplicitTime, FAnimNode_SequenceEvaluator), 0x0000000000000005);
			UProperty* NewProp_Sequence = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Sequence"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Sequence, FAnimNode_SequenceEvaluator), 0x0000000000000005, Z_Construct_UClass_UAnimSequenceBase_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_SequenceEvaluator.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Evaluates a point in an anim sequence, using a specific time input rather than advancing time internally.\nTypically the playback position of the animation for this node will represent something other than time, like jump height.\nThis node will not trigger any notifies present in the associated sequence."));
			MetaData->SetValue(NewProp_ExplicitTime, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_ExplicitTime, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_SequenceEvaluator.h"));
			MetaData->SetValue(NewProp_ExplicitTime, TEXT("PinShownByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_ExplicitTime, TEXT("ToolTip"), TEXT("The time at which to evaluate the associated sequence"));
			MetaData->SetValue(NewProp_Sequence, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_Sequence, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_SequenceEvaluator.h"));
			MetaData->SetValue(NewProp_Sequence, TEXT("PinHiddenByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_Sequence, TEXT("ToolTip"), TEXT("The animation sequence asset to evaluate"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_SequenceEvaluator_CRC() { return 2064711067U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_SequencePlayer()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_SequencePlayer_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("AnimNode_SequencePlayer"), sizeof(FAnimNode_SequencePlayer), Get_Z_Construct_UScriptStruct_FAnimNode_SequencePlayer_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_SequencePlayer"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_AssetPlayerBase(), new UScriptStruct::TCppStructOps<FAnimNode_SequencePlayer>, EStructFlags(0x00000201));
			UProperty* NewProp_GroupRole = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("GroupRole"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(GroupRole, FAnimNode_SequencePlayer), 0x0000000000000000, Z_Construct_UEnum_Engine_EAnimGroupRole());
			UProperty* NewProp_GroupIndex = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("GroupIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(GroupIndex, FAnimNode_SequencePlayer), 0x0000000000000000);
			UProperty* NewProp_PlayRate = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PlayRate"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(PlayRate, FAnimNode_SequencePlayer), 0x0000000000000005);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLoopAnimation, FAnimNode_SequencePlayer, bool);
			UProperty* NewProp_bLoopAnimation = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bLoopAnimation"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLoopAnimation, FAnimNode_SequencePlayer), 0x0000000000000005, CPP_BOOL_PROPERTY_BITMASK(bLoopAnimation, FAnimNode_SequencePlayer), sizeof(bool), true);
			UProperty* NewProp_Sequence = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Sequence"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Sequence, FAnimNode_SequencePlayer), 0x0000000000000005, Z_Construct_UClass_UAnimSequenceBase_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_SequencePlayer.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Sequence player node"));
			MetaData->SetValue(NewProp_GroupRole, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_SequencePlayer.h"));
			MetaData->SetValue(NewProp_GroupRole, TEXT("ToolTip"), TEXT("The role this player can assume within the group (ignored if GroupIndex is INDEX_NONE)"));
			MetaData->SetValue(NewProp_GroupIndex, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_SequencePlayer.h"));
			MetaData->SetValue(NewProp_GroupIndex, TEXT("ToolTip"), TEXT("The group index, assigned at compile time based on the editoronly GroupName (or INDEX_NONE if it is not part of any group)"));
			MetaData->SetValue(NewProp_PlayRate, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_PlayRate, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_SequencePlayer.h"));
			MetaData->SetValue(NewProp_PlayRate, TEXT("PinHiddenByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_PlayRate, TEXT("ToolTip"), TEXT("The play rate multiplier. Can be negative, which will cause the animation to play in reverse."));
			MetaData->SetValue(NewProp_bLoopAnimation, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_bLoopAnimation, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_SequencePlayer.h"));
			MetaData->SetValue(NewProp_bLoopAnimation, TEXT("PinHiddenByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_bLoopAnimation, TEXT("ToolTip"), TEXT("Should the animation continue looping when it reaches the end?"));
			MetaData->SetValue(NewProp_Sequence, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_Sequence, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_SequencePlayer.h"));
			MetaData->SetValue(NewProp_Sequence, TEXT("PinHiddenByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_Sequence, TEXT("ToolTip"), TEXT("The animation sequence asset to play"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_SequencePlayer_CRC() { return 2385264890U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_Slot()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_Slot_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("AnimNode_Slot"), sizeof(FAnimNode_Slot), Get_Z_Construct_UScriptStruct_FAnimNode_Slot_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_Slot"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_Base(), new UScriptStruct::TCppStructOps<FAnimNode_Slot>, EStructFlags(0x00000201));
			UProperty* NewProp_LastSlotNodeInitializationCounter = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LastSlotNodeInitializationCounter"), RF_Public|RF_Transient|RF_Native) UInt16Property(CPP_PROPERTY_BASE(LastSlotNodeInitializationCounter, FAnimNode_Slot), 0x0000000000002000);
			UProperty* NewProp_SlotName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SlotName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(SlotName, FAnimNode_Slot), 0x0000000000000005);
			UProperty* NewProp_Source = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Source"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Source, FAnimNode_Slot), 0x0000000000000005, Z_Construct_UScriptStruct_FPoseLink());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_Slot.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("An animation slot node normally acts as a passthru, but a montage or PlaySlotAnimation call from\ngame code can cause an animation to blend in and be played on the slot temporarily, overriding the\nSource input."));
			MetaData->SetValue(NewProp_LastSlotNodeInitializationCounter, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_Slot.h"));
			MetaData->SetValue(NewProp_LastSlotNodeInitializationCounter, TEXT("ToolTip"), TEXT("Counter to register slot node just once per initialization"));
			MetaData->SetValue(NewProp_SlotName, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_SlotName, TEXT("CustomizeProperty"), TEXT(""));
			MetaData->SetValue(NewProp_SlotName, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_Slot.h"));
			MetaData->SetValue(NewProp_SlotName, TEXT("ToolTip"), TEXT("The name of this slot, exposed to gameplay code, etc..."));
			MetaData->SetValue(NewProp_Source, TEXT("Category"), TEXT("Links"));
			MetaData->SetValue(NewProp_Source, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_Slot.h"));
			MetaData->SetValue(NewProp_Source, TEXT("ToolTip"), TEXT("The source input, passed thru to the output unless a montage or slot animation is currently playing"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_Slot_CRC() { return 3100548315U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_StateMachine()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_StateMachine_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("AnimNode_StateMachine"), sizeof(FAnimNode_StateMachine), Get_Z_Construct_UScriptStruct_FAnimNode_StateMachine_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_StateMachine"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_Base(), new UScriptStruct::TCppStructOps<FAnimNode_StateMachine>, EStructFlags(0x00000201));
			UProperty* NewProp_ElapsedTime = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ElapsedTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ElapsedTime, FAnimNode_StateMachine), 0x0000080000000000);
			UProperty* NewProp_CurrentState = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CurrentState"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(CurrentState, FAnimNode_StateMachine), 0x0000080000000000);
			UProperty* NewProp_MaxTransitionsPerFrame = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MaxTransitionsPerFrame"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MaxTransitionsPerFrame, FAnimNode_StateMachine), 0x0000000000000001);
			UProperty* NewProp_StateMachineIndexInClass = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("StateMachineIndexInClass"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(StateMachineIndexInClass, FAnimNode_StateMachine), 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_StateMachine.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("State machine node"));
			MetaData->SetValue(NewProp_ElapsedTime, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_StateMachine.h"));
			MetaData->SetValue(NewProp_ElapsedTime, TEXT("ToolTip"), TEXT("Elapsed time since entering the current state"));
			MetaData->SetValue(NewProp_CurrentState, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_StateMachine.h"));
			MetaData->SetValue(NewProp_CurrentState, TEXT("ToolTip"), TEXT("The current state within the state machine"));
			MetaData->SetValue(NewProp_MaxTransitionsPerFrame, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_MaxTransitionsPerFrame, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_StateMachine.h"));
			MetaData->SetValue(NewProp_MaxTransitionsPerFrame, TEXT("ToolTip"), TEXT("The maximum number of transitions that can be taken by this machine 'simultaneously' in a single frame"));
			MetaData->SetValue(NewProp_StateMachineIndexInClass, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_StateMachine.h"));
			MetaData->SetValue(NewProp_StateMachineIndexInClass, TEXT("ToolTip"), TEXT("Index into the BakedStateMachines array in the owning UAnimBlueprintGeneratedClass"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_StateMachine_CRC() { return 2047373186U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimationPotentialTransition()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimationPotentialTransition_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("AnimationPotentialTransition"), sizeof(FAnimationPotentialTransition), Get_Z_Construct_UScriptStruct_FAnimationPotentialTransition_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimationPotentialTransition"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FAnimationPotentialTransition>, EStructFlags(0x00000001));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_StateMachine.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimationPotentialTransition_CRC() { return 3208142024U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimationActiveTransitionEntry()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimationActiveTransitionEntry_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("AnimationActiveTransitionEntry"), sizeof(FAnimationActiveTransitionEntry), Get_Z_Construct_UScriptStruct_FAnimationActiveTransitionEntry_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimationActiveTransitionEntry"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FAnimationActiveTransitionEntry>, EStructFlags(0x00000001));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_StateMachine.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Information about an active transition on the transition stack"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimationActiveTransitionEntry_CRC() { return 2007205688U; }
	UEnum* Z_Construct_UEnum_Engine_EEvaluatorMode()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EEvaluatorMode_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EEvaluatorMode"), 0, Get_Z_Construct_UEnum_Engine_EEvaluatorMode_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EEvaluatorMode"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EEvaluatorMode::EM_Standard")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EEvaluatorMode::EM_Freeze")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EEvaluatorMode::EM_DelayedFreeze")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EEvaluatorMode::EM_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("EM_DelayedFreeze.DisplayName"), TEXT("Delayed Freeze"));
			MetaData->SetValue(ReturnEnum, TEXT("EM_DelayedFreeze.ToolTip"), TEXT("DataSource is ticked and evaluated for a given number of frames, then freezes after and uses the cached pose for future frames."));
			MetaData->SetValue(ReturnEnum, TEXT("EM_Freeze.DisplayName"), TEXT("Freeze"));
			MetaData->SetValue(ReturnEnum, TEXT("EM_Freeze.ToolTip"), TEXT("DataSource is never ticked and only evaluated on the first frame. Every frame after uses the cached pose from the first frame."));
			MetaData->SetValue(ReturnEnum, TEXT("EM_Standard.DisplayName"), TEXT("Standard"));
			MetaData->SetValue(ReturnEnum, TEXT("EM_Standard.ToolTip"), TEXT("DataSource is ticked and evaluated every frame."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_TransitionPoseEvaluator.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Determines the behavior this node will use when updating and evaluating."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EEvaluatorMode_CRC() { return 285907574U; }
	UEnum* Z_Construct_UEnum_Engine_EEvaluatorDataSource()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EEvaluatorDataSource_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EEvaluatorDataSource"), 0, Get_Z_Construct_UEnum_Engine_EEvaluatorDataSource_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EEvaluatorDataSource"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EEvaluatorDataSource::EDS_SourcePose")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EEvaluatorDataSource::EDS_DestinationPose")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EEvaluatorDataSource::EDS_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("EDS_DestinationPose.DisplayName"), TEXT("Destination Pose"));
			MetaData->SetValue(ReturnEnum, TEXT("EDS_SourcePose.DisplayName"), TEXT("Source Pose"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_TransitionPoseEvaluator.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Indicates which state is being evaluated by this node (source or destination)."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EEvaluatorDataSource_CRC() { return 4245099560U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_TransitionPoseEvaluator()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_TransitionPoseEvaluator_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("AnimNode_TransitionPoseEvaluator"), sizeof(FAnimNode_TransitionPoseEvaluator), Get_Z_Construct_UScriptStruct_FAnimNode_TransitionPoseEvaluator_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_TransitionPoseEvaluator"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_Base(), new UScriptStruct::TCppStructOps<FAnimNode_TransitionPoseEvaluator>, EStructFlags(0x00000201));
			UProperty* NewProp_CacheFramesRemaining = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CacheFramesRemaining"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(CacheFramesRemaining, FAnimNode_TransitionPoseEvaluator), 0x0000000000002000);
			UProperty* NewProp_FramesToCachePose = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("FramesToCachePose"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(FramesToCachePose, FAnimNode_TransitionPoseEvaluator), 0x0000000000000005);
			UProperty* NewProp_EvaluatorMode = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("EvaluatorMode"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(EvaluatorMode, FAnimNode_TransitionPoseEvaluator), 0x0000000000000005, Z_Construct_UEnum_Engine_EEvaluatorMode());
			UProperty* NewProp_DataSource = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DataSource"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(DataSource, FAnimNode_TransitionPoseEvaluator), 0x0000000000000005, Z_Construct_UEnum_Engine_EEvaluatorDataSource());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_TransitionPoseEvaluator.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Animation data node for state machine transitions.\nCan be set to supply either the animation data from the transition source (From State) or the transition destination (To State)."));
			MetaData->SetValue(NewProp_CacheFramesRemaining, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_TransitionPoseEvaluator.h"));
			MetaData->SetValue(NewProp_FramesToCachePose, TEXT("Category"), TEXT("Pose"));
			MetaData->SetValue(NewProp_FramesToCachePose, TEXT("ClampMin"), TEXT("1"));
			MetaData->SetValue(NewProp_FramesToCachePose, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_TransitionPoseEvaluator.h"));
			MetaData->SetValue(NewProp_FramesToCachePose, TEXT("NeverAsPin"), TEXT(""));
			MetaData->SetValue(NewProp_FramesToCachePose, TEXT("UIMin"), TEXT("1"));
			MetaData->SetValue(NewProp_EvaluatorMode, TEXT("Category"), TEXT("Pose"));
			MetaData->SetValue(NewProp_EvaluatorMode, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_TransitionPoseEvaluator.h"));
			MetaData->SetValue(NewProp_EvaluatorMode, TEXT("NeverAsPin"), TEXT(""));
			MetaData->SetValue(NewProp_DataSource, TEXT("Category"), TEXT("Pose"));
			MetaData->SetValue(NewProp_DataSource, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_TransitionPoseEvaluator.h"));
			MetaData->SetValue(NewProp_DataSource, TEXT("NeverAsPin"), TEXT(""));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_TransitionPoseEvaluator_CRC() { return 3658894285U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_TransitionResult()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_TransitionResult_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("AnimNode_TransitionResult"), sizeof(FAnimNode_TransitionResult), Get_Z_Construct_UScriptStruct_FAnimNode_TransitionResult_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_TransitionResult"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_Base(), new UScriptStruct::TCppStructOps<FAnimNode_TransitionResult>, EStructFlags(0x00000201));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCanEnterTransition, FAnimNode_TransitionResult, bool);
			UProperty* NewProp_bCanEnterTransition = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bCanEnterTransition"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCanEnterTransition, FAnimNode_TransitionResult), 0x0000000000000005, CPP_BOOL_PROPERTY_BITMASK(bCanEnterTransition, FAnimNode_TransitionResult), sizeof(bool), true);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_TransitionResult.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Root node of a state machine transition graph"));
			MetaData->SetValue(NewProp_bCanEnterTransition, TEXT("AlwaysAsPin"), TEXT(""));
			MetaData->SetValue(NewProp_bCanEnterTransition, TEXT("Category"), TEXT("Result"));
			MetaData->SetValue(NewProp_bCanEnterTransition, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_TransitionResult.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_TransitionResult_CRC() { return 390161467U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimationNode_TwoWayBlend()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimationNode_TwoWayBlend_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("AnimationNode_TwoWayBlend"), sizeof(FAnimationNode_TwoWayBlend), Get_Z_Construct_UScriptStruct_FAnimationNode_TwoWayBlend_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimationNode_TwoWayBlend"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_Base(), new UScriptStruct::TCppStructOps<FAnimationNode_TwoWayBlend>, EStructFlags(0x00000201));
			UProperty* NewProp_AlphaScaleBias = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("AlphaScaleBias"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(AlphaScaleBias, FAnimationNode_TwoWayBlend), 0x0000000000000005, Z_Construct_UScriptStruct_FInputScaleBias());
			UProperty* NewProp_Alpha = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Alpha"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Alpha, FAnimationNode_TwoWayBlend), 0x0000000000000005);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("B"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(B, FAnimationNode_TwoWayBlend), 0x0000000000000005, Z_Construct_UScriptStruct_FPoseLink());
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("A"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(A, FAnimationNode_TwoWayBlend), 0x0000000000000005, Z_Construct_UScriptStruct_FPoseLink());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_TwoWayBlend.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("This represents a baked transition"));
			MetaData->SetValue(NewProp_AlphaScaleBias, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_AlphaScaleBias, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_TwoWayBlend.h"));
			MetaData->SetValue(NewProp_Alpha, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_Alpha, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_TwoWayBlend.h"));
			MetaData->SetValue(NewProp_Alpha, TEXT("PinShownByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_B, TEXT("Category"), TEXT("Links"));
			MetaData->SetValue(NewProp_B, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_TwoWayBlend.h"));
			MetaData->SetValue(NewProp_A, TEXT("Category"), TEXT("Links"));
			MetaData->SetValue(NewProp_A, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_TwoWayBlend.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimationNode_TwoWayBlend_CRC() { return 4212180285U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_UseCachedPose()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_UseCachedPose_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("AnimNode_UseCachedPose"), sizeof(FAnimNode_UseCachedPose), Get_Z_Construct_UScriptStruct_FAnimNode_UseCachedPose_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_UseCachedPose"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_Base(), new UScriptStruct::TCppStructOps<FAnimNode_UseCachedPose>, EStructFlags(0x00000201));
			UProperty* NewProp_LinkToCachingNode = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LinkToCachingNode"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LinkToCachingNode, FAnimNode_UseCachedPose), 0x0000000000000000, Z_Construct_UScriptStruct_FPoseLink());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_UseCachedPose.h"));
			MetaData->SetValue(NewProp_LinkToCachingNode, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_UseCachedPose.h"));
			MetaData->SetValue(NewProp_LinkToCachingNode, TEXT("ToolTip"), TEXT("Note: This link is intentionally not public; it's wired up during compilation"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_UseCachedPose_CRC() { return 2451706743U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_ConvertLocalToComponentSpace()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_ConvertLocalToComponentSpace_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("AnimNode_ConvertLocalToComponentSpace"), sizeof(FAnimNode_ConvertLocalToComponentSpace), Get_Z_Construct_UScriptStruct_FAnimNode_ConvertLocalToComponentSpace_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_ConvertLocalToComponentSpace"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_Base(), new UScriptStruct::TCppStructOps<FAnimNode_ConvertLocalToComponentSpace>, EStructFlags(0x00000201));
			UProperty* NewProp_LocalPose = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LocalPose"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LocalPose, FAnimNode_ConvertLocalToComponentSpace), 0x0000000000000005, Z_Construct_UScriptStruct_FPoseLink());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNodeSpaceConversions.h"));
			MetaData->SetValue(NewProp_LocalPose, TEXT("Category"), TEXT("Links"));
			MetaData->SetValue(NewProp_LocalPose, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNodeSpaceConversions.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_ConvertLocalToComponentSpace_CRC() { return 1331789454U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_ConvertComponentToLocalSpace()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_ConvertComponentToLocalSpace_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("AnimNode_ConvertComponentToLocalSpace"), sizeof(FAnimNode_ConvertComponentToLocalSpace), Get_Z_Construct_UScriptStruct_FAnimNode_ConvertComponentToLocalSpace_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_ConvertComponentToLocalSpace"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_Base(), new UScriptStruct::TCppStructOps<FAnimNode_ConvertComponentToLocalSpace>, EStructFlags(0x00000201));
			UProperty* NewProp_ComponentPose = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ComponentPose"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ComponentPose, FAnimNode_ConvertComponentToLocalSpace), 0x0000000000000005, Z_Construct_UScriptStruct_FComponentSpacePoseLink());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNodeSpaceConversions.h"));
			MetaData->SetValue(NewProp_ComponentPose, TEXT("Category"), TEXT("Links"));
			MetaData->SetValue(NewProp_ComponentPose, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNodeSpaceConversions.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_ConvertComponentToLocalSpace_CRC() { return 418945776U; }
	UEnum* Z_Construct_UEnum_Engine_ECameraAlphaBlendMode()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_ECameraAlphaBlendMode_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ECameraAlphaBlendMode"), 0, Get_Z_Construct_UEnum_Engine_ECameraAlphaBlendMode_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ECameraAlphaBlendMode"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ECameraAlphaBlendMode::CABM_Linear")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ECameraAlphaBlendMode::CABM_Cubic")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ECameraAlphaBlendMode::CABM_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("CABM_Cubic.DisplayName"), TEXT("Cubic"));
			MetaData->SetValue(ReturnEnum, TEXT("CABM_Linear.DisplayName"), TEXT("Linear"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Camera/CameraStackTypes.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("@TODO: Document"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_ECameraAlphaBlendMode_CRC() { return 1649416248U; }
	UScriptStruct* Z_Construct_UScriptStruct_FDummySpacerCameraTypes()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FDummySpacerCameraTypes_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("DummySpacerCameraTypes"), sizeof(FDummySpacerCameraTypes), Get_Z_Construct_UScriptStruct_FDummySpacerCameraTypes_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DummySpacerCameraTypes"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FDummySpacerCameraTypes>, EStructFlags(0x00000001));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Camera/CameraStackTypes.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("NOTE:\nThis code is work in progress - do not use these types until this comment is removed."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FDummySpacerCameraTypes_CRC() { return 1143445295U; }
	UScriptStruct* Z_Construct_UScriptStruct_FStreamableManager()
	{
		UPackage* Outer=Z_Construct_UPackage_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FStreamableManager_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("StreamableManager"), sizeof(FStreamableManager), Get_Z_Construct_UScriptStruct_FStreamableManager_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("StreamableManager"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FStreamableManager>, EStructFlags(0x00000201));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StreamableManager.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FStreamableManager_CRC() { return 2130567298U; }
	UPackage* Z_Construct_UPackage_Engine()
	{
		static UPackage* ReturnPackage = NULL;
		if (!ReturnPackage)
		{
			ReturnPackage = CastChecked<UPackage>(StaticFindObjectFast(UPackage::StaticClass(), NULL, FName(TEXT("/Script/Engine")), false, false));
			ReturnPackage->SetPackageFlags(PKG_CompiledIn | 0x00000000);
			FGuid Guid;
			Guid.A = 0xEC084ECF;
			Guid.B = 0x5412E1E3;
			Guid.C = 0x00000000;
			Guid.D = 0x00000000;
			ReturnPackage->SetGuid(Guid);

			Z_Construct_UScriptStruct_FDistributionLookupTable();
			Z_Construct_UScriptStruct_FRawDistribution();
			Z_Construct_UScriptStruct_FFloatDistribution();
			Z_Construct_UScriptStruct_FVectorDistribution();
			Z_Construct_UScriptStruct_FVector4Distribution();
			Z_Construct_UScriptStruct_FExpressionInput();
			Z_Construct_UScriptStruct_FMaterialAttributesInput();
			Z_Construct_UScriptStruct_FExpressionOutput();
			Z_Construct_UScriptStruct_FMaterialInput();
			Z_Construct_UScriptStruct_FColorMaterialInput();
			Z_Construct_UScriptStruct_FScalarMaterialInput();
			Z_Construct_UScriptStruct_FVectorMaterialInput();
			Z_Construct_UScriptStruct_FVector2MaterialInput();
			Z_Construct_UDelegateFunction_Engine_TimerDynamicDelegate__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_PhysicsVolumeChanged__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_TakeAnyDamageSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_TakePointDamageSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_ActorBeginOverlapSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_ActorEndOverlapSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_ActorHitSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_ActorBeginCursorOverSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_ActorEndCursorOverSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_ActorOnClickedSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_ActorOnReleasedSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_ActorOnInputTouchBeginSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_ActorOnInputTouchEndSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_ActorBeginTouchOverSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_ActorEndTouchOverSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_ActorDestroyedSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_ActorEndPlaySignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_OnNavDataGenerigEvent__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_OnNavigationPathUpdated__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_SmartLinkReachedSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_ComponentHitSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_ComponentBeginOverlapSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_ComponentEndOverlapSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_ComponentWakeSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_ComponentSleepSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_ComponentBeginCursorOverSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_ComponentEndCursorOverSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_ComponentOnClickedSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_ComponentOnReleasedSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_ComponentOnInputTouchBeginSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_ComponentOnInputTouchEndSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_ComponentBeginTouchOverSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_ComponentEndTouchOverSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_ConstraintBrokenSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_OnMontageStartedMCDelegate__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_OnMontageEndedMCDelegate__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_OnMontageBlendingOutStartedMCDelegate__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_PostEvaluateAnimEvent__DelegateSignature();
			Z_Construct_UDelegateFunction_UApplicationLifecycleComponent_ApplicationLifetimeDelegate__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_OnAudioFinished__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_OnQueueSubtitles__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_ComponentFractureSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_InputActionHandlerDynamicSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_InputTouchHandlerDynamicSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_InputAxisHandlerDynamicSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_InputVectorAxisHandlerDynamicSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_InputGestureHandlerDynamicSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_UInterpToMovementComponent_OnInterpToReverseDelegate__DelegateSignature();
			Z_Construct_UDelegateFunction_UInterpToMovementComponent_OnInterpToStopDelegate__DelegateSignature();
			Z_Construct_UDelegateFunction_UInterpToMovementComponent_OnInterpToWaitBeginDelegate__DelegateSignature();
			Z_Construct_UDelegateFunction_UInterpToMovementComponent_OnInterpToWaitEndDelegate__DelegateSignature();
			Z_Construct_UDelegateFunction_UInterpToMovementComponent_OnInterpToResetDelegate__DelegateSignature();
			Z_Construct_UDelegateFunction_UPlatformEventsComponent_PlatformEventDelegate__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_OnTimelineEvent__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_OnTimelineFloat__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_OnTimelineVector__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_OnTimelineLinearColor__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_InstigatedAnyDamageSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_OnCanvasRenderTargetUpdate__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_PlatformInterfaceDelegate__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_OnUserClickedBanner__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_OnUserClosedAdvertisement__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_LevelStreamingLoadedStatus__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_LevelStreamingVisibilityStatus__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_MovementModeChangedSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_CharacterMovementUpdatedSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_CharacterReachedApexSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_UProjectileMovementComponent_OnProjectileBounceDelegate__DelegateSignature();
			Z_Construct_UDelegateFunction_UProjectileMovementComponent_OnProjectileStopDelegate__DelegateSignature();
			Z_Construct_UDelegateFunction_UKismetSystemLibrary_OnAssetLoaded__DelegateSignature();
			Z_Construct_UDelegateFunction_UKismetSystemLibrary_OnAssetClassLoaded__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_OnMatineeEvent__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_ParticleSpawnSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_ParticleBurstSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_ParticleDeathSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_ParticleCollisionSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_OnSystemFinished__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_ActorFractureSignature__DelegateSignature();
		}
		return ReturnPackage;
	}
#endif

PRAGMA_ENABLE_DEPRECATION_WARNINGS
