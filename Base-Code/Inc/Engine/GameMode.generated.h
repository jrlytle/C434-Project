// Copyright 1998-2015 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	C++ class header boilerplate exported from UnrealHeaderTool.
	This is automatically generated by the tools.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "ObjectBase.h"

PRAGMA_DISABLE_DEPRECATION_WARNINGS
class APlayerController;
class AActor;
class AController;
class APlayerState;
class APawn;
class UObject;
#ifdef ENGINE_GameMode_generated_h
#error "GameMode.generated.h already included, missing '#pragma once' in GameMode.h"
#endif
#define ENGINE_GameMode_generated_h

#define Engine_Source_Runtime_Engine_Classes_GameFramework_GameMode_h_38_GENERATED_BODY \
	friend ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FGameClassShortName(); \
	ENGINE_API static class UScriptStruct* StaticStruct();


#define Engine_Source_Runtime_Engine_Classes_GameFramework_GameMode_h_67_RPC_WRAPPERS \
	virtual bool PlayerCanRestart_Implementation(APlayerController* Player); \
	virtual AActor* ChoosePlayerStart_Implementation(AController* Player); \
	virtual AActor* FindPlayerStart_Implementation(AController* Player, const FString& IncomingName); \
	virtual bool CanSpectate_Implementation(APlayerController* Viewer, APlayerState* ViewTarget); \
	virtual APawn* SpawnDefaultPawnFor_Implementation(AController* NewPlayer, AActor* StartSpot); \
	virtual void InitStartSpot_Implementation(AActor* StartSpot, AController* NewPlayer); \
	virtual UClass* GetDefaultPawnClassForController_Implementation(AController* InController); \
	virtual bool MustSpectate_Implementation(APlayerController* NewPlayerController) const; \
	virtual bool ShouldReset_Implementation(AActor* ActorToReset); \
	virtual bool ReadyToEndMatch_Implementation(); \
	virtual bool ReadyToStartMatch_Implementation(); \
 \
	DECLARE_FUNCTION(execPlayerCanRestart) \
	{ \
		P_GET_OBJECT(APlayerController,Z_Param_Player); \
		P_FINISH; \
		*(bool*)Z_Param__Result=this->PlayerCanRestart_Implementation(Z_Param_Player); \
	} \
 \
	DECLARE_FUNCTION(execChoosePlayerStart) \
	{ \
		P_GET_OBJECT(AController,Z_Param_Player); \
		P_FINISH; \
		*(AActor**)Z_Param__Result=this->ChoosePlayerStart_Implementation(Z_Param_Player); \
	} \
 \
	DECLARE_FUNCTION(execK2_FindPlayerStart) \
	{ \
		P_GET_OBJECT(AController,Z_Param_Player); \
		P_FINISH; \
		*(AActor**)Z_Param__Result=this->K2_FindPlayerStart(Z_Param_Player); \
	} \
 \
	DECLARE_FUNCTION(execFindPlayerStart) \
	{ \
		P_GET_OBJECT(AController,Z_Param_Player); \
		P_GET_PROPERTY(UStrProperty,Z_Param_IncomingName); \
		P_FINISH; \
		*(AActor**)Z_Param__Result=this->FindPlayerStart_Implementation(Z_Param_Player,Z_Param_IncomingName); \
	} \
 \
	DECLARE_FUNCTION(execChangeName) \
	{ \
		P_GET_OBJECT(AController,Z_Param_Controller); \
		P_GET_PROPERTY(UStrProperty,Z_Param_NewName); \
		P_GET_UBOOL(Z_Param_bNameChange); \
		P_FINISH; \
		this->ChangeName(Z_Param_Controller,Z_Param_NewName,Z_Param_bNameChange); \
	} \
 \
	DECLARE_FUNCTION(execCanSpectate) \
	{ \
		P_GET_OBJECT(APlayerController,Z_Param_Viewer); \
		P_GET_OBJECT(APlayerState,Z_Param_ViewTarget); \
		P_FINISH; \
		*(bool*)Z_Param__Result=this->CanSpectate_Implementation(Z_Param_Viewer,Z_Param_ViewTarget); \
	} \
 \
	DECLARE_FUNCTION(execSpawnDefaultPawnFor) \
	{ \
		P_GET_OBJECT(AController,Z_Param_NewPlayer); \
		P_GET_OBJECT(AActor,Z_Param_StartSpot); \
		P_FINISH; \
		*(APawn**)Z_Param__Result=this->SpawnDefaultPawnFor_Implementation(Z_Param_NewPlayer,Z_Param_StartSpot); \
	} \
 \
	DECLARE_FUNCTION(execInitStartSpot) \
	{ \
		P_GET_OBJECT(AActor,Z_Param_StartSpot); \
		P_GET_OBJECT(AController,Z_Param_NewPlayer); \
		P_FINISH; \
		this->InitStartSpot_Implementation(Z_Param_StartSpot,Z_Param_NewPlayer); \
	} \
 \
	DECLARE_FUNCTION(execGetDefaultPawnClassForController) \
	{ \
		P_GET_OBJECT(AController,Z_Param_InController); \
		P_FINISH; \
		*(UClass**)Z_Param__Result=this->GetDefaultPawnClassForController_Implementation(Z_Param_InController); \
	} \
 \
	DECLARE_FUNCTION(execMustSpectate) \
	{ \
		P_GET_OBJECT(APlayerController,Z_Param_NewPlayerController); \
		P_FINISH; \
		*(bool*)Z_Param__Result=this->MustSpectate_Implementation(Z_Param_NewPlayerController); \
	} \
 \
	DECLARE_FUNCTION(execGetNumPlayers) \
	{ \
		P_FINISH; \
		*(int32*)Z_Param__Result=this->GetNumPlayers(); \
	} \
 \
	DECLARE_FUNCTION(execResetLevel) \
	{ \
		P_FINISH; \
		this->ResetLevel(); \
	} \
 \
	DECLARE_FUNCTION(execShouldReset) \
	{ \
		P_GET_OBJECT(AActor,Z_Param_ActorToReset); \
		P_FINISH; \
		*(bool*)Z_Param__Result=this->ShouldReset_Implementation(Z_Param_ActorToReset); \
	} \
 \
	DECLARE_FUNCTION(execSetBandwidthLimit) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_AsyncIOBandwidthLimit); \
		P_FINISH; \
		this->SetBandwidthLimit(Z_Param_AsyncIOBandwidthLimit); \
	} \
 \
	DECLARE_FUNCTION(execReadyToEndMatch) \
	{ \
		P_FINISH; \
		*(bool*)Z_Param__Result=this->ReadyToEndMatch_Implementation(); \
	} \
 \
	DECLARE_FUNCTION(execReadyToStartMatch) \
	{ \
		P_FINISH; \
		*(bool*)Z_Param__Result=this->ReadyToStartMatch_Implementation(); \
	} \
 \
	DECLARE_FUNCTION(execAbortMatch) \
	{ \
		P_FINISH; \
		this->AbortMatch(); \
	} \
 \
	DECLARE_FUNCTION(execReturnToMainMenuHost) \
	{ \
		P_FINISH; \
		this->ReturnToMainMenuHost(); \
	} \
 \
	DECLARE_FUNCTION(execRestartGame) \
	{ \
		P_FINISH; \
		this->RestartGame(); \
	} \
 \
	DECLARE_FUNCTION(execEndMatch) \
	{ \
		P_FINISH; \
		this->EndMatch(); \
	} \
 \
	DECLARE_FUNCTION(execStartMatch) \
	{ \
		P_FINISH; \
		this->StartMatch(); \
	} \
 \
	DECLARE_FUNCTION(execStartPlay) \
	{ \
		P_FINISH; \
		this->StartPlay(); \
	} \
 \
	DECLARE_FUNCTION(execHasMatchEnded) \
	{ \
		P_FINISH; \
		*(bool*)Z_Param__Result=this->HasMatchEnded(); \
	} \
 \
	DECLARE_FUNCTION(execIsMatchInProgress) \
	{ \
		P_FINISH; \
		*(bool*)Z_Param__Result=this->IsMatchInProgress(); \
	} \
 \
	DECLARE_FUNCTION(execHasMatchStarted) \
	{ \
		P_FINISH; \
		*(bool*)Z_Param__Result=this->HasMatchStarted(); \
	} \
 \
	DECLARE_FUNCTION(execGetMatchState) \
	{ \
		P_FINISH; \
		*(FName*)Z_Param__Result=this->GetMatchState(); \
	}


#define Engine_Source_Runtime_Engine_Classes_GameFramework_GameMode_h_67_RPC_WRAPPERS_NO_PURE_DECLS \
	virtual bool PlayerCanRestart_Implementation(APlayerController* Player); \
	virtual AActor* ChoosePlayerStart_Implementation(AController* Player); \
	virtual AActor* FindPlayerStart_Implementation(AController* Player, const FString& IncomingName); \
	virtual bool CanSpectate_Implementation(APlayerController* Viewer, APlayerState* ViewTarget); \
	virtual APawn* SpawnDefaultPawnFor_Implementation(AController* NewPlayer, AActor* StartSpot); \
	virtual void InitStartSpot_Implementation(AActor* StartSpot, AController* NewPlayer); \
	virtual UClass* GetDefaultPawnClassForController_Implementation(AController* InController); \
	virtual bool MustSpectate_Implementation(APlayerController* NewPlayerController) const; \
	virtual bool ShouldReset_Implementation(AActor* ActorToReset); \
	virtual bool ReadyToEndMatch_Implementation(); \
	virtual bool ReadyToStartMatch_Implementation(); \
 \
	DECLARE_FUNCTION(execPlayerCanRestart) \
	{ \
		P_GET_OBJECT(APlayerController,Z_Param_Player); \
		P_FINISH; \
		*(bool*)Z_Param__Result=this->PlayerCanRestart_Implementation(Z_Param_Player); \
	} \
 \
	DECLARE_FUNCTION(execChoosePlayerStart) \
	{ \
		P_GET_OBJECT(AController,Z_Param_Player); \
		P_FINISH; \
		*(AActor**)Z_Param__Result=this->ChoosePlayerStart_Implementation(Z_Param_Player); \
	} \
 \
	DECLARE_FUNCTION(execK2_FindPlayerStart) \
	{ \
		P_GET_OBJECT(AController,Z_Param_Player); \
		P_FINISH; \
		*(AActor**)Z_Param__Result=this->K2_FindPlayerStart(Z_Param_Player); \
	} \
 \
	DECLARE_FUNCTION(execFindPlayerStart) \
	{ \
		P_GET_OBJECT(AController,Z_Param_Player); \
		P_GET_PROPERTY(UStrProperty,Z_Param_IncomingName); \
		P_FINISH; \
		*(AActor**)Z_Param__Result=this->FindPlayerStart_Implementation(Z_Param_Player,Z_Param_IncomingName); \
	} \
 \
	DECLARE_FUNCTION(execChangeName) \
	{ \
		P_GET_OBJECT(AController,Z_Param_Controller); \
		P_GET_PROPERTY(UStrProperty,Z_Param_NewName); \
		P_GET_UBOOL(Z_Param_bNameChange); \
		P_FINISH; \
		this->ChangeName(Z_Param_Controller,Z_Param_NewName,Z_Param_bNameChange); \
	} \
 \
	DECLARE_FUNCTION(execCanSpectate) \
	{ \
		P_GET_OBJECT(APlayerController,Z_Param_Viewer); \
		P_GET_OBJECT(APlayerState,Z_Param_ViewTarget); \
		P_FINISH; \
		*(bool*)Z_Param__Result=this->CanSpectate_Implementation(Z_Param_Viewer,Z_Param_ViewTarget); \
	} \
 \
	DECLARE_FUNCTION(execSpawnDefaultPawnFor) \
	{ \
		P_GET_OBJECT(AController,Z_Param_NewPlayer); \
		P_GET_OBJECT(AActor,Z_Param_StartSpot); \
		P_FINISH; \
		*(APawn**)Z_Param__Result=this->SpawnDefaultPawnFor_Implementation(Z_Param_NewPlayer,Z_Param_StartSpot); \
	} \
 \
	DECLARE_FUNCTION(execInitStartSpot) \
	{ \
		P_GET_OBJECT(AActor,Z_Param_StartSpot); \
		P_GET_OBJECT(AController,Z_Param_NewPlayer); \
		P_FINISH; \
		this->InitStartSpot_Implementation(Z_Param_StartSpot,Z_Param_NewPlayer); \
	} \
 \
	DECLARE_FUNCTION(execGetDefaultPawnClassForController) \
	{ \
		P_GET_OBJECT(AController,Z_Param_InController); \
		P_FINISH; \
		*(UClass**)Z_Param__Result=this->GetDefaultPawnClassForController_Implementation(Z_Param_InController); \
	} \
 \
	DECLARE_FUNCTION(execMustSpectate) \
	{ \
		P_GET_OBJECT(APlayerController,Z_Param_NewPlayerController); \
		P_FINISH; \
		*(bool*)Z_Param__Result=this->MustSpectate_Implementation(Z_Param_NewPlayerController); \
	} \
 \
	DECLARE_FUNCTION(execGetNumPlayers) \
	{ \
		P_FINISH; \
		*(int32*)Z_Param__Result=this->GetNumPlayers(); \
	} \
 \
	DECLARE_FUNCTION(execResetLevel) \
	{ \
		P_FINISH; \
		this->ResetLevel(); \
	} \
 \
	DECLARE_FUNCTION(execShouldReset) \
	{ \
		P_GET_OBJECT(AActor,Z_Param_ActorToReset); \
		P_FINISH; \
		*(bool*)Z_Param__Result=this->ShouldReset_Implementation(Z_Param_ActorToReset); \
	} \
 \
	DECLARE_FUNCTION(execSetBandwidthLimit) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_AsyncIOBandwidthLimit); \
		P_FINISH; \
		this->SetBandwidthLimit(Z_Param_AsyncIOBandwidthLimit); \
	} \
 \
	DECLARE_FUNCTION(execReadyToEndMatch) \
	{ \
		P_FINISH; \
		*(bool*)Z_Param__Result=this->ReadyToEndMatch_Implementation(); \
	} \
 \
	DECLARE_FUNCTION(execReadyToStartMatch) \
	{ \
		P_FINISH; \
		*(bool*)Z_Param__Result=this->ReadyToStartMatch_Implementation(); \
	} \
 \
	DECLARE_FUNCTION(execAbortMatch) \
	{ \
		P_FINISH; \
		this->AbortMatch(); \
	} \
 \
	DECLARE_FUNCTION(execReturnToMainMenuHost) \
	{ \
		P_FINISH; \
		this->ReturnToMainMenuHost(); \
	} \
 \
	DECLARE_FUNCTION(execRestartGame) \
	{ \
		P_FINISH; \
		this->RestartGame(); \
	} \
 \
	DECLARE_FUNCTION(execEndMatch) \
	{ \
		P_FINISH; \
		this->EndMatch(); \
	} \
 \
	DECLARE_FUNCTION(execStartMatch) \
	{ \
		P_FINISH; \
		this->StartMatch(); \
	} \
 \
	DECLARE_FUNCTION(execStartPlay) \
	{ \
		P_FINISH; \
		this->StartPlay(); \
	} \
 \
	DECLARE_FUNCTION(execHasMatchEnded) \
	{ \
		P_FINISH; \
		*(bool*)Z_Param__Result=this->HasMatchEnded(); \
	} \
 \
	DECLARE_FUNCTION(execIsMatchInProgress) \
	{ \
		P_FINISH; \
		*(bool*)Z_Param__Result=this->IsMatchInProgress(); \
	} \
 \
	DECLARE_FUNCTION(execHasMatchStarted) \
	{ \
		P_FINISH; \
		*(bool*)Z_Param__Result=this->HasMatchStarted(); \
	} \
 \
	DECLARE_FUNCTION(execGetMatchState) \
	{ \
		P_FINISH; \
		*(FName*)Z_Param__Result=this->GetMatchState(); \
	}


#define Engine_Source_Runtime_Engine_Classes_GameFramework_GameMode_h_67_EVENT_PARMS \
	struct GameMode_eventCanSpectate_Parms \
	{ \
		APlayerController* Viewer; \
		APlayerState* ViewTarget; \
		bool ReturnValue; \
 \
		/** Constructor, intializes return property only **/ \
		GameMode_eventCanSpectate_Parms() \
			: ReturnValue(false) \
		{ \
		} \
	}; \
	struct GameMode_eventChoosePlayerStart_Parms \
	{ \
		AController* Player; \
		AActor* ReturnValue; \
 \
		/** Constructor, intializes return property only **/ \
		GameMode_eventChoosePlayerStart_Parms() \
			: ReturnValue(NULL) \
		{ \
		} \
	}; \
	struct GameMode_eventFindPlayerStart_Parms \
	{ \
		AController* Player; \
		FString IncomingName; \
		AActor* ReturnValue; \
 \
		/** Constructor, intializes return property only **/ \
		GameMode_eventFindPlayerStart_Parms() \
			: ReturnValue(NULL) \
		{ \
		} \
	}; \
	struct GameMode_eventGetDefaultPawnClassForController_Parms \
	{ \
		AController* InController; \
		UClass* ReturnValue; \
 \
		/** Constructor, intializes return property only **/ \
		GameMode_eventGetDefaultPawnClassForController_Parms() \
			: ReturnValue(NULL) \
		{ \
		} \
	}; \
	struct GameMode_eventInitStartSpot_Parms \
	{ \
		AActor* StartSpot; \
		AController* NewPlayer; \
	}; \
	struct GameMode_eventK2_OnChangeName_Parms \
	{ \
		AController* Other; \
		FString NewName; \
		bool bNameChange; \
	}; \
	struct GameMode_eventK2_OnLogout_Parms \
	{ \
		AController* ExitingController; \
	}; \
	struct GameMode_eventK2_OnRestartPlayer_Parms \
	{ \
		AController* NewPlayer; \
	}; \
	struct GameMode_eventK2_OnSetMatchState_Parms \
	{ \
		FName NewState; \
	}; \
	struct GameMode_eventK2_OnSwapPlayerControllers_Parms \
	{ \
		APlayerController* OldPC; \
		APlayerController* NewPC; \
	}; \
	struct GameMode_eventK2_PostLogin_Parms \
	{ \
		APlayerController* NewPlayer; \
	}; \
	struct GameMode_eventMustSpectate_Parms \
	{ \
		APlayerController* NewPlayerController; \
		bool ReturnValue; \
 \
		/** Constructor, intializes return property only **/ \
		GameMode_eventMustSpectate_Parms() \
			: ReturnValue(false) \
		{ \
		} \
	}; \
	struct GameMode_eventPlayerCanRestart_Parms \
	{ \
		APlayerController* Player; \
		bool ReturnValue; \
 \
		/** Constructor, intializes return property only **/ \
		GameMode_eventPlayerCanRestart_Parms() \
			: ReturnValue(false) \
		{ \
		} \
	}; \
	struct GameMode_eventReadyToEndMatch_Parms \
	{ \
		bool ReturnValue; \
 \
		/** Constructor, intializes return property only **/ \
		GameMode_eventReadyToEndMatch_Parms() \
			: ReturnValue(false) \
		{ \
		} \
	}; \
	struct GameMode_eventReadyToStartMatch_Parms \
	{ \
		bool ReturnValue; \
 \
		/** Constructor, intializes return property only **/ \
		GameMode_eventReadyToStartMatch_Parms() \
			: ReturnValue(false) \
		{ \
		} \
	}; \
	struct GameMode_eventShouldReset_Parms \
	{ \
		AActor* ActorToReset; \
		bool ReturnValue; \
 \
		/** Constructor, intializes return property only **/ \
		GameMode_eventShouldReset_Parms() \
			: ReturnValue(false) \
		{ \
		} \
	}; \
	struct GameMode_eventSpawnDefaultPawnFor_Parms \
	{ \
		AController* NewPlayer; \
		AActor* StartSpot; \
		APawn* ReturnValue; \
 \
		/** Constructor, intializes return property only **/ \
		GameMode_eventSpawnDefaultPawnFor_Parms() \
			: ReturnValue(NULL) \
		{ \
		} \
	};


extern ENGINE_API  FName ENGINE_CanSpectate;
extern ENGINE_API  FName ENGINE_ChoosePlayerStart;
extern ENGINE_API  FName ENGINE_FindPlayerStart;
extern ENGINE_API  FName ENGINE_GetDefaultPawnClassForController;
extern ENGINE_API  FName ENGINE_InitStartSpot;
extern ENGINE_API  FName ENGINE_K2_OnChangeName;
extern ENGINE_API  FName ENGINE_K2_OnLogout;
extern ENGINE_API  FName ENGINE_K2_OnRestartPlayer;
extern ENGINE_API  FName ENGINE_K2_OnSetMatchState;
extern ENGINE_API  FName ENGINE_K2_OnSwapPlayerControllers;
extern ENGINE_API  FName ENGINE_K2_PostLogin;
extern ENGINE_API  FName ENGINE_MustSpectate;
extern ENGINE_API  FName ENGINE_PlayerCanRestart;
extern ENGINE_API  FName ENGINE_ReadyToEndMatch;
extern ENGINE_API  FName ENGINE_ReadyToStartMatch;
extern ENGINE_API  FName ENGINE_ShouldReset;
extern ENGINE_API  FName ENGINE_SpawnDefaultPawnFor;
#define Engine_Source_Runtime_Engine_Classes_GameFramework_GameMode_h_67_CALLBACK_WRAPPERS
#define Engine_Source_Runtime_Engine_Classes_GameFramework_GameMode_h_67_INCLASS_NO_PURE_DECLS \
	private: \
	static void StaticRegisterNativesAGameMode(); \
	friend ENGINE_API class UClass* Z_Construct_UClass_AGameMode(); \
	public: \
	DECLARE_CLASS(AGameMode, AInfo, COMPILED_IN_FLAGS(0 | CLASS_Transient | CLASS_Config), 0, Engine, NO_API) \
	DECLARE_SERIALIZER(AGameMode) \
	/** Indicates whether the class is compiled into the engine */    enum {IsIntrinsic=COMPILED_IN_INTRINSIC}; \
	static const TCHAR* StaticConfigName() {return TEXT("Game");} \
 \
	virtual UObject* _getUObject() const override { return const_cast<AGameMode*>(this); }


#define Engine_Source_Runtime_Engine_Classes_GameFramework_GameMode_h_67_INCLASS \
	private: \
	static void StaticRegisterNativesAGameMode(); \
	friend ENGINE_API class UClass* Z_Construct_UClass_AGameMode(); \
	public: \
	DECLARE_CLASS(AGameMode, AInfo, COMPILED_IN_FLAGS(0 | CLASS_Transient | CLASS_Config), 0, Engine, NO_API) \
	DECLARE_SERIALIZER(AGameMode) \
	/** Indicates whether the class is compiled into the engine */    enum {IsIntrinsic=COMPILED_IN_INTRINSIC}; \
	static const TCHAR* StaticConfigName() {return TEXT("Game");} \
 \
	virtual UObject* _getUObject() const override { return const_cast<AGameMode*>(this); }


#define Engine_Source_Runtime_Engine_Classes_GameFramework_GameMode_h_67_STANDARD_CONSTRUCTORS \
	/** Standard constructor, called after all reflected properties have been initialized */ \
	NO_API AGameMode(const FObjectInitializer& ObjectInitializer = FObjectInitializer::Get()); \
	DEFINE_DEFAULT_OBJECT_INITIALIZER_CONSTRUCTOR_CALL(AGameMode) \
	DECLARE_VTABLE_PTR_HELPER_CTOR(NO_API, AGameMode); \
DEFINE_VTABLE_PTR_HELPER_CTOR_CALLER(AGameMode); \
private: \
	/** Private copy-constructor, should never be used */ \
	NO_API AGameMode(const AGameMode& InCopy); \
public:


#define Engine_Source_Runtime_Engine_Classes_GameFramework_GameMode_h_67_ENHANCED_CONSTRUCTORS \
	/** Standard constructor, called after all reflected properties have been initialized */ \
	NO_API AGameMode(const FObjectInitializer& ObjectInitializer = FObjectInitializer::Get()) : Super(ObjectInitializer) { }; \
private: \
	/** Private copy-constructor, should never be used */ \
	NO_API AGameMode(const AGameMode& InCopy); \
public: \
	DECLARE_VTABLE_PTR_HELPER_CTOR(NO_API, AGameMode); \
DEFINE_VTABLE_PTR_HELPER_CTOR_CALLER(AGameMode); \
	DEFINE_DEFAULT_OBJECT_INITIALIZER_CONSTRUCTOR_CALL(AGameMode)


#define Engine_Source_Runtime_Engine_Classes_GameFramework_GameMode_h_64_PROLOG \
	Engine_Source_Runtime_Engine_Classes_GameFramework_GameMode_h_67_EVENT_PARMS


#define Engine_Source_Runtime_Engine_Classes_GameFramework_GameMode_h_67_GENERATED_BODY_LEGACY \
PRAGMA_DISABLE_DEPRECATION_WARNINGS \
public: \
	Engine_Source_Runtime_Engine_Classes_GameFramework_GameMode_h_67_RPC_WRAPPERS \
	Engine_Source_Runtime_Engine_Classes_GameFramework_GameMode_h_67_CALLBACK_WRAPPERS \
	Engine_Source_Runtime_Engine_Classes_GameFramework_GameMode_h_67_INCLASS \
	Engine_Source_Runtime_Engine_Classes_GameFramework_GameMode_h_67_STANDARD_CONSTRUCTORS \
public: \
PRAGMA_ENABLE_DEPRECATION_WARNINGS


#define Engine_Source_Runtime_Engine_Classes_GameFramework_GameMode_h_67_GENERATED_BODY \
PRAGMA_DISABLE_DEPRECATION_WARNINGS \
public: \
	Engine_Source_Runtime_Engine_Classes_GameFramework_GameMode_h_67_RPC_WRAPPERS_NO_PURE_DECLS \
	Engine_Source_Runtime_Engine_Classes_GameFramework_GameMode_h_67_CALLBACK_WRAPPERS \
	Engine_Source_Runtime_Engine_Classes_GameFramework_GameMode_h_67_INCLASS_NO_PURE_DECLS \
	Engine_Source_Runtime_Engine_Classes_GameFramework_GameMode_h_67_ENHANCED_CONSTRUCTORS \
static_assert(false, "Unknown access specifier for GENERATED_BODY() macro in class GameMode."); \
PRAGMA_ENABLE_DEPRECATION_WARNINGS


#undef CURRENT_FILE_ID
#define CURRENT_FILE_ID Engine_Source_Runtime_Engine_Classes_GameFramework_GameMode_h


PRAGMA_ENABLE_DEPRECATION_WARNINGS
