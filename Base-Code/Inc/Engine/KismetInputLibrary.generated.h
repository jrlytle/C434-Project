// Copyright 1998-2015 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	C++ class header boilerplate exported from UnrealHeaderTool.
	This is automatically generated by the tools.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "ObjectBase.h"

PRAGMA_DISABLE_DEPRECATION_WARNINGS
struct FControllerEvent;
struct FKey;
struct FPointerEvent;
struct FVector2D;
struct FAnalogInputEvent;
struct FKeyEvent;
struct FInputEvent;
#ifdef ENGINE_KismetInputLibrary_generated_h
#error "KismetInputLibrary.generated.h already included, missing '#pragma once' in KismetInputLibrary.h"
#endif
#define ENGINE_KismetInputLibrary_generated_h

#define Engine_Source_Runtime_Engine_Classes_Kismet_KismetInputLibrary_h_12_RPC_WRAPPERS \
 \
	DECLARE_FUNCTION(execControllerEvent_GetAnalogValue) \
	{ \
		P_GET_STRUCT_REF(FControllerEvent,Z_Param_Out_Input); \
		P_FINISH; \
		*(float*)Z_Param__Result=UKismetInputLibrary::ControllerEvent_GetAnalogValue(Z_Param_Out_Input); \
	} \
 \
	DECLARE_FUNCTION(execControllerEvent_GetUserIndex) \
	{ \
		P_GET_STRUCT_REF(FControllerEvent,Z_Param_Out_Input); \
		P_FINISH; \
		*(int32*)Z_Param__Result=UKismetInputLibrary::ControllerEvent_GetUserIndex(Z_Param_Out_Input); \
	} \
 \
	DECLARE_FUNCTION(execControllerEvent_GetEffectingButton) \
	{ \
		P_GET_STRUCT_REF(FControllerEvent,Z_Param_Out_Input); \
		P_FINISH; \
		*(FKey*)Z_Param__Result=UKismetInputLibrary::ControllerEvent_GetEffectingButton(Z_Param_Out_Input); \
	} \
 \
	DECLARE_FUNCTION(execPointerEvent_GetGestureDelta) \
	{ \
		P_GET_STRUCT_REF(FPointerEvent,Z_Param_Out_Input); \
		P_FINISH; \
		*(FVector2D*)Z_Param__Result=UKismetInputLibrary::PointerEvent_GetGestureDelta(Z_Param_Out_Input); \
	} \
 \
	DECLARE_FUNCTION(execPointerEvent_IsTouchEvent) \
	{ \
		P_GET_STRUCT_REF(FPointerEvent,Z_Param_Out_Input); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UKismetInputLibrary::PointerEvent_IsTouchEvent(Z_Param_Out_Input); \
	} \
 \
	DECLARE_FUNCTION(execPointerEvent_GetTouchpadIndex) \
	{ \
		P_GET_STRUCT_REF(FPointerEvent,Z_Param_Out_Input); \
		P_FINISH; \
		*(int32*)Z_Param__Result=UKismetInputLibrary::PointerEvent_GetTouchpadIndex(Z_Param_Out_Input); \
	} \
 \
	DECLARE_FUNCTION(execPointerEvent_GetPointerIndex) \
	{ \
		P_GET_STRUCT_REF(FPointerEvent,Z_Param_Out_Input); \
		P_FINISH; \
		*(int32*)Z_Param__Result=UKismetInputLibrary::PointerEvent_GetPointerIndex(Z_Param_Out_Input); \
	} \
 \
	DECLARE_FUNCTION(execPointerEvent_GetUserIndex) \
	{ \
		P_GET_STRUCT_REF(FPointerEvent,Z_Param_Out_Input); \
		P_FINISH; \
		*(int32*)Z_Param__Result=UKismetInputLibrary::PointerEvent_GetUserIndex(Z_Param_Out_Input); \
	} \
 \
	DECLARE_FUNCTION(execPointerEvent_GetWheelDelta) \
	{ \
		P_GET_STRUCT_REF(FPointerEvent,Z_Param_Out_Input); \
		P_FINISH; \
		*(float*)Z_Param__Result=UKismetInputLibrary::PointerEvent_GetWheelDelta(Z_Param_Out_Input); \
	} \
 \
	DECLARE_FUNCTION(execPointerEvent_GetEffectingButton) \
	{ \
		P_GET_STRUCT_REF(FPointerEvent,Z_Param_Out_Input); \
		P_FINISH; \
		*(FKey*)Z_Param__Result=UKismetInputLibrary::PointerEvent_GetEffectingButton(Z_Param_Out_Input); \
	} \
 \
	DECLARE_FUNCTION(execPointerEvent_IsMouseButtonDown) \
	{ \
		P_GET_STRUCT_REF(FPointerEvent,Z_Param_Out_Input); \
		P_GET_STRUCT(FKey,Z_Param_MouseButton); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UKismetInputLibrary::PointerEvent_IsMouseButtonDown(Z_Param_Out_Input,Z_Param_MouseButton); \
	} \
 \
	DECLARE_FUNCTION(execPointerEvent_GetCursorDelta) \
	{ \
		P_GET_STRUCT_REF(FPointerEvent,Z_Param_Out_Input); \
		P_FINISH; \
		*(FVector2D*)Z_Param__Result=UKismetInputLibrary::PointerEvent_GetCursorDelta(Z_Param_Out_Input); \
	} \
 \
	DECLARE_FUNCTION(execPointerEvent_GetLastScreenSpacePosition) \
	{ \
		P_GET_STRUCT_REF(FPointerEvent,Z_Param_Out_Input); \
		P_FINISH; \
		*(FVector2D*)Z_Param__Result=UKismetInputLibrary::PointerEvent_GetLastScreenSpacePosition(Z_Param_Out_Input); \
	} \
 \
	DECLARE_FUNCTION(execPointerEvent_GetScreenSpacePosition) \
	{ \
		P_GET_STRUCT_REF(FPointerEvent,Z_Param_Out_Input); \
		P_FINISH; \
		*(FVector2D*)Z_Param__Result=UKismetInputLibrary::PointerEvent_GetScreenSpacePosition(Z_Param_Out_Input); \
	} \
 \
	DECLARE_FUNCTION(execGetAnalogValue) \
	{ \
		P_GET_STRUCT_REF(FAnalogInputEvent,Z_Param_Out_Input); \
		P_FINISH; \
		*(float*)Z_Param__Result=UKismetInputLibrary::GetAnalogValue(Z_Param_Out_Input); \
	} \
 \
	DECLARE_FUNCTION(execGetUserIndex) \
	{ \
		P_GET_STRUCT_REF(FKeyEvent,Z_Param_Out_Input); \
		P_FINISH; \
		*(int32*)Z_Param__Result=UKismetInputLibrary::GetUserIndex(Z_Param_Out_Input); \
	} \
 \
	DECLARE_FUNCTION(execGetKey) \
	{ \
		P_GET_STRUCT_REF(FKeyEvent,Z_Param_Out_Input); \
		P_FINISH; \
		*(FKey*)Z_Param__Result=UKismetInputLibrary::GetKey(Z_Param_Out_Input); \
	} \
 \
	DECLARE_FUNCTION(execInputEvent_IsRightCommandDown) \
	{ \
		P_GET_STRUCT_REF(FInputEvent,Z_Param_Out_Input); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UKismetInputLibrary::InputEvent_IsRightCommandDown(Z_Param_Out_Input); \
	} \
 \
	DECLARE_FUNCTION(execInputEvent_IsLeftCommandDown) \
	{ \
		P_GET_STRUCT_REF(FInputEvent,Z_Param_Out_Input); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UKismetInputLibrary::InputEvent_IsLeftCommandDown(Z_Param_Out_Input); \
	} \
 \
	DECLARE_FUNCTION(execInputEvent_IsCommandDown) \
	{ \
		P_GET_STRUCT_REF(FInputEvent,Z_Param_Out_Input); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UKismetInputLibrary::InputEvent_IsCommandDown(Z_Param_Out_Input); \
	} \
 \
	DECLARE_FUNCTION(execInputEvent_IsRightAltDown) \
	{ \
		P_GET_STRUCT_REF(FInputEvent,Z_Param_Out_Input); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UKismetInputLibrary::InputEvent_IsRightAltDown(Z_Param_Out_Input); \
	} \
 \
	DECLARE_FUNCTION(execInputEvent_IsLeftAltDown) \
	{ \
		P_GET_STRUCT_REF(FInputEvent,Z_Param_Out_Input); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UKismetInputLibrary::InputEvent_IsLeftAltDown(Z_Param_Out_Input); \
	} \
 \
	DECLARE_FUNCTION(execInputEvent_IsAltDown) \
	{ \
		P_GET_STRUCT_REF(FInputEvent,Z_Param_Out_Input); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UKismetInputLibrary::InputEvent_IsAltDown(Z_Param_Out_Input); \
	} \
 \
	DECLARE_FUNCTION(execInputEvent_IsRightControlDown) \
	{ \
		P_GET_STRUCT_REF(FInputEvent,Z_Param_Out_Input); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UKismetInputLibrary::InputEvent_IsRightControlDown(Z_Param_Out_Input); \
	} \
 \
	DECLARE_FUNCTION(execInputEvent_IsLeftControlDown) \
	{ \
		P_GET_STRUCT_REF(FInputEvent,Z_Param_Out_Input); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UKismetInputLibrary::InputEvent_IsLeftControlDown(Z_Param_Out_Input); \
	} \
 \
	DECLARE_FUNCTION(execInputEvent_IsControlDown) \
	{ \
		P_GET_STRUCT_REF(FInputEvent,Z_Param_Out_Input); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UKismetInputLibrary::InputEvent_IsControlDown(Z_Param_Out_Input); \
	} \
 \
	DECLARE_FUNCTION(execInputEvent_IsRightShiftDown) \
	{ \
		P_GET_STRUCT_REF(FInputEvent,Z_Param_Out_Input); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UKismetInputLibrary::InputEvent_IsRightShiftDown(Z_Param_Out_Input); \
	} \
 \
	DECLARE_FUNCTION(execInputEvent_IsLeftShiftDown) \
	{ \
		P_GET_STRUCT_REF(FInputEvent,Z_Param_Out_Input); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UKismetInputLibrary::InputEvent_IsLeftShiftDown(Z_Param_Out_Input); \
	} \
 \
	DECLARE_FUNCTION(execInputEvent_IsShiftDown) \
	{ \
		P_GET_STRUCT_REF(FInputEvent,Z_Param_Out_Input); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UKismetInputLibrary::InputEvent_IsShiftDown(Z_Param_Out_Input); \
	} \
 \
	DECLARE_FUNCTION(execInputEvent_IsRepeat) \
	{ \
		P_GET_STRUCT_REF(FInputEvent,Z_Param_Out_Input); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UKismetInputLibrary::InputEvent_IsRepeat(Z_Param_Out_Input); \
	} \
 \
	DECLARE_FUNCTION(execKey_GetDisplayName) \
	{ \
		P_GET_STRUCT_REF(FKey,Z_Param_Out_Key); \
		P_FINISH; \
		*(FText*)Z_Param__Result=UKismetInputLibrary::Key_GetDisplayName(Z_Param_Out_Key); \
	} \
 \
	DECLARE_FUNCTION(execKey_IsVectorAxis) \
	{ \
		P_GET_STRUCT_REF(FKey,Z_Param_Out_Key); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UKismetInputLibrary::Key_IsVectorAxis(Z_Param_Out_Key); \
	} \
 \
	DECLARE_FUNCTION(execKey_IsFloatAxis) \
	{ \
		P_GET_STRUCT_REF(FKey,Z_Param_Out_Key); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UKismetInputLibrary::Key_IsFloatAxis(Z_Param_Out_Key); \
	} \
 \
	DECLARE_FUNCTION(execKey_IsKeyboardKey) \
	{ \
		P_GET_STRUCT_REF(FKey,Z_Param_Out_Key); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UKismetInputLibrary::Key_IsKeyboardKey(Z_Param_Out_Key); \
	} \
 \
	DECLARE_FUNCTION(execKey_IsMouseButton) \
	{ \
		P_GET_STRUCT_REF(FKey,Z_Param_Out_Key); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UKismetInputLibrary::Key_IsMouseButton(Z_Param_Out_Key); \
	} \
 \
	DECLARE_FUNCTION(execKey_IsGamepadKey) \
	{ \
		P_GET_STRUCT_REF(FKey,Z_Param_Out_Key); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UKismetInputLibrary::Key_IsGamepadKey(Z_Param_Out_Key); \
	} \
 \
	DECLARE_FUNCTION(execKey_IsModifierKey) \
	{ \
		P_GET_STRUCT_REF(FKey,Z_Param_Out_Key); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UKismetInputLibrary::Key_IsModifierKey(Z_Param_Out_Key); \
	} \
 \
	DECLARE_FUNCTION(execEqualEqual_KeyKey) \
	{ \
		P_GET_STRUCT(FKey,Z_Param_A); \
		P_GET_STRUCT(FKey,Z_Param_B); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UKismetInputLibrary::EqualEqual_KeyKey(Z_Param_A,Z_Param_B); \
	} \
 \
	DECLARE_FUNCTION(execCalibrateTilt) \
	{ \
		P_FINISH; \
		UKismetInputLibrary::CalibrateTilt(); \
	}


#define Engine_Source_Runtime_Engine_Classes_Kismet_KismetInputLibrary_h_12_RPC_WRAPPERS_NO_PURE_DECLS \
 \
	DECLARE_FUNCTION(execControllerEvent_GetAnalogValue) \
	{ \
		P_GET_STRUCT_REF(FControllerEvent,Z_Param_Out_Input); \
		P_FINISH; \
		*(float*)Z_Param__Result=UKismetInputLibrary::ControllerEvent_GetAnalogValue(Z_Param_Out_Input); \
	} \
 \
	DECLARE_FUNCTION(execControllerEvent_GetUserIndex) \
	{ \
		P_GET_STRUCT_REF(FControllerEvent,Z_Param_Out_Input); \
		P_FINISH; \
		*(int32*)Z_Param__Result=UKismetInputLibrary::ControllerEvent_GetUserIndex(Z_Param_Out_Input); \
	} \
 \
	DECLARE_FUNCTION(execControllerEvent_GetEffectingButton) \
	{ \
		P_GET_STRUCT_REF(FControllerEvent,Z_Param_Out_Input); \
		P_FINISH; \
		*(FKey*)Z_Param__Result=UKismetInputLibrary::ControllerEvent_GetEffectingButton(Z_Param_Out_Input); \
	} \
 \
	DECLARE_FUNCTION(execPointerEvent_GetGestureDelta) \
	{ \
		P_GET_STRUCT_REF(FPointerEvent,Z_Param_Out_Input); \
		P_FINISH; \
		*(FVector2D*)Z_Param__Result=UKismetInputLibrary::PointerEvent_GetGestureDelta(Z_Param_Out_Input); \
	} \
 \
	DECLARE_FUNCTION(execPointerEvent_IsTouchEvent) \
	{ \
		P_GET_STRUCT_REF(FPointerEvent,Z_Param_Out_Input); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UKismetInputLibrary::PointerEvent_IsTouchEvent(Z_Param_Out_Input); \
	} \
 \
	DECLARE_FUNCTION(execPointerEvent_GetTouchpadIndex) \
	{ \
		P_GET_STRUCT_REF(FPointerEvent,Z_Param_Out_Input); \
		P_FINISH; \
		*(int32*)Z_Param__Result=UKismetInputLibrary::PointerEvent_GetTouchpadIndex(Z_Param_Out_Input); \
	} \
 \
	DECLARE_FUNCTION(execPointerEvent_GetPointerIndex) \
	{ \
		P_GET_STRUCT_REF(FPointerEvent,Z_Param_Out_Input); \
		P_FINISH; \
		*(int32*)Z_Param__Result=UKismetInputLibrary::PointerEvent_GetPointerIndex(Z_Param_Out_Input); \
	} \
 \
	DECLARE_FUNCTION(execPointerEvent_GetUserIndex) \
	{ \
		P_GET_STRUCT_REF(FPointerEvent,Z_Param_Out_Input); \
		P_FINISH; \
		*(int32*)Z_Param__Result=UKismetInputLibrary::PointerEvent_GetUserIndex(Z_Param_Out_Input); \
	} \
 \
	DECLARE_FUNCTION(execPointerEvent_GetWheelDelta) \
	{ \
		P_GET_STRUCT_REF(FPointerEvent,Z_Param_Out_Input); \
		P_FINISH; \
		*(float*)Z_Param__Result=UKismetInputLibrary::PointerEvent_GetWheelDelta(Z_Param_Out_Input); \
	} \
 \
	DECLARE_FUNCTION(execPointerEvent_GetEffectingButton) \
	{ \
		P_GET_STRUCT_REF(FPointerEvent,Z_Param_Out_Input); \
		P_FINISH; \
		*(FKey*)Z_Param__Result=UKismetInputLibrary::PointerEvent_GetEffectingButton(Z_Param_Out_Input); \
	} \
 \
	DECLARE_FUNCTION(execPointerEvent_IsMouseButtonDown) \
	{ \
		P_GET_STRUCT_REF(FPointerEvent,Z_Param_Out_Input); \
		P_GET_STRUCT(FKey,Z_Param_MouseButton); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UKismetInputLibrary::PointerEvent_IsMouseButtonDown(Z_Param_Out_Input,Z_Param_MouseButton); \
	} \
 \
	DECLARE_FUNCTION(execPointerEvent_GetCursorDelta) \
	{ \
		P_GET_STRUCT_REF(FPointerEvent,Z_Param_Out_Input); \
		P_FINISH; \
		*(FVector2D*)Z_Param__Result=UKismetInputLibrary::PointerEvent_GetCursorDelta(Z_Param_Out_Input); \
	} \
 \
	DECLARE_FUNCTION(execPointerEvent_GetLastScreenSpacePosition) \
	{ \
		P_GET_STRUCT_REF(FPointerEvent,Z_Param_Out_Input); \
		P_FINISH; \
		*(FVector2D*)Z_Param__Result=UKismetInputLibrary::PointerEvent_GetLastScreenSpacePosition(Z_Param_Out_Input); \
	} \
 \
	DECLARE_FUNCTION(execPointerEvent_GetScreenSpacePosition) \
	{ \
		P_GET_STRUCT_REF(FPointerEvent,Z_Param_Out_Input); \
		P_FINISH; \
		*(FVector2D*)Z_Param__Result=UKismetInputLibrary::PointerEvent_GetScreenSpacePosition(Z_Param_Out_Input); \
	} \
 \
	DECLARE_FUNCTION(execGetAnalogValue) \
	{ \
		P_GET_STRUCT_REF(FAnalogInputEvent,Z_Param_Out_Input); \
		P_FINISH; \
		*(float*)Z_Param__Result=UKismetInputLibrary::GetAnalogValue(Z_Param_Out_Input); \
	} \
 \
	DECLARE_FUNCTION(execGetUserIndex) \
	{ \
		P_GET_STRUCT_REF(FKeyEvent,Z_Param_Out_Input); \
		P_FINISH; \
		*(int32*)Z_Param__Result=UKismetInputLibrary::GetUserIndex(Z_Param_Out_Input); \
	} \
 \
	DECLARE_FUNCTION(execGetKey) \
	{ \
		P_GET_STRUCT_REF(FKeyEvent,Z_Param_Out_Input); \
		P_FINISH; \
		*(FKey*)Z_Param__Result=UKismetInputLibrary::GetKey(Z_Param_Out_Input); \
	} \
 \
	DECLARE_FUNCTION(execInputEvent_IsRightCommandDown) \
	{ \
		P_GET_STRUCT_REF(FInputEvent,Z_Param_Out_Input); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UKismetInputLibrary::InputEvent_IsRightCommandDown(Z_Param_Out_Input); \
	} \
 \
	DECLARE_FUNCTION(execInputEvent_IsLeftCommandDown) \
	{ \
		P_GET_STRUCT_REF(FInputEvent,Z_Param_Out_Input); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UKismetInputLibrary::InputEvent_IsLeftCommandDown(Z_Param_Out_Input); \
	} \
 \
	DECLARE_FUNCTION(execInputEvent_IsCommandDown) \
	{ \
		P_GET_STRUCT_REF(FInputEvent,Z_Param_Out_Input); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UKismetInputLibrary::InputEvent_IsCommandDown(Z_Param_Out_Input); \
	} \
 \
	DECLARE_FUNCTION(execInputEvent_IsRightAltDown) \
	{ \
		P_GET_STRUCT_REF(FInputEvent,Z_Param_Out_Input); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UKismetInputLibrary::InputEvent_IsRightAltDown(Z_Param_Out_Input); \
	} \
 \
	DECLARE_FUNCTION(execInputEvent_IsLeftAltDown) \
	{ \
		P_GET_STRUCT_REF(FInputEvent,Z_Param_Out_Input); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UKismetInputLibrary::InputEvent_IsLeftAltDown(Z_Param_Out_Input); \
	} \
 \
	DECLARE_FUNCTION(execInputEvent_IsAltDown) \
	{ \
		P_GET_STRUCT_REF(FInputEvent,Z_Param_Out_Input); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UKismetInputLibrary::InputEvent_IsAltDown(Z_Param_Out_Input); \
	} \
 \
	DECLARE_FUNCTION(execInputEvent_IsRightControlDown) \
	{ \
		P_GET_STRUCT_REF(FInputEvent,Z_Param_Out_Input); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UKismetInputLibrary::InputEvent_IsRightControlDown(Z_Param_Out_Input); \
	} \
 \
	DECLARE_FUNCTION(execInputEvent_IsLeftControlDown) \
	{ \
		P_GET_STRUCT_REF(FInputEvent,Z_Param_Out_Input); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UKismetInputLibrary::InputEvent_IsLeftControlDown(Z_Param_Out_Input); \
	} \
 \
	DECLARE_FUNCTION(execInputEvent_IsControlDown) \
	{ \
		P_GET_STRUCT_REF(FInputEvent,Z_Param_Out_Input); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UKismetInputLibrary::InputEvent_IsControlDown(Z_Param_Out_Input); \
	} \
 \
	DECLARE_FUNCTION(execInputEvent_IsRightShiftDown) \
	{ \
		P_GET_STRUCT_REF(FInputEvent,Z_Param_Out_Input); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UKismetInputLibrary::InputEvent_IsRightShiftDown(Z_Param_Out_Input); \
	} \
 \
	DECLARE_FUNCTION(execInputEvent_IsLeftShiftDown) \
	{ \
		P_GET_STRUCT_REF(FInputEvent,Z_Param_Out_Input); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UKismetInputLibrary::InputEvent_IsLeftShiftDown(Z_Param_Out_Input); \
	} \
 \
	DECLARE_FUNCTION(execInputEvent_IsShiftDown) \
	{ \
		P_GET_STRUCT_REF(FInputEvent,Z_Param_Out_Input); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UKismetInputLibrary::InputEvent_IsShiftDown(Z_Param_Out_Input); \
	} \
 \
	DECLARE_FUNCTION(execInputEvent_IsRepeat) \
	{ \
		P_GET_STRUCT_REF(FInputEvent,Z_Param_Out_Input); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UKismetInputLibrary::InputEvent_IsRepeat(Z_Param_Out_Input); \
	} \
 \
	DECLARE_FUNCTION(execKey_GetDisplayName) \
	{ \
		P_GET_STRUCT_REF(FKey,Z_Param_Out_Key); \
		P_FINISH; \
		*(FText*)Z_Param__Result=UKismetInputLibrary::Key_GetDisplayName(Z_Param_Out_Key); \
	} \
 \
	DECLARE_FUNCTION(execKey_IsVectorAxis) \
	{ \
		P_GET_STRUCT_REF(FKey,Z_Param_Out_Key); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UKismetInputLibrary::Key_IsVectorAxis(Z_Param_Out_Key); \
	} \
 \
	DECLARE_FUNCTION(execKey_IsFloatAxis) \
	{ \
		P_GET_STRUCT_REF(FKey,Z_Param_Out_Key); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UKismetInputLibrary::Key_IsFloatAxis(Z_Param_Out_Key); \
	} \
 \
	DECLARE_FUNCTION(execKey_IsKeyboardKey) \
	{ \
		P_GET_STRUCT_REF(FKey,Z_Param_Out_Key); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UKismetInputLibrary::Key_IsKeyboardKey(Z_Param_Out_Key); \
	} \
 \
	DECLARE_FUNCTION(execKey_IsMouseButton) \
	{ \
		P_GET_STRUCT_REF(FKey,Z_Param_Out_Key); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UKismetInputLibrary::Key_IsMouseButton(Z_Param_Out_Key); \
	} \
 \
	DECLARE_FUNCTION(execKey_IsGamepadKey) \
	{ \
		P_GET_STRUCT_REF(FKey,Z_Param_Out_Key); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UKismetInputLibrary::Key_IsGamepadKey(Z_Param_Out_Key); \
	} \
 \
	DECLARE_FUNCTION(execKey_IsModifierKey) \
	{ \
		P_GET_STRUCT_REF(FKey,Z_Param_Out_Key); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UKismetInputLibrary::Key_IsModifierKey(Z_Param_Out_Key); \
	} \
 \
	DECLARE_FUNCTION(execEqualEqual_KeyKey) \
	{ \
		P_GET_STRUCT(FKey,Z_Param_A); \
		P_GET_STRUCT(FKey,Z_Param_B); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UKismetInputLibrary::EqualEqual_KeyKey(Z_Param_A,Z_Param_B); \
	} \
 \
	DECLARE_FUNCTION(execCalibrateTilt) \
	{ \
		P_FINISH; \
		UKismetInputLibrary::CalibrateTilt(); \
	}


#define Engine_Source_Runtime_Engine_Classes_Kismet_KismetInputLibrary_h_12_INCLASS_NO_PURE_DECLS \
	private: \
	static void StaticRegisterNativesUKismetInputLibrary(); \
	friend ENGINE_API class UClass* Z_Construct_UClass_UKismetInputLibrary(); \
	public: \
	DECLARE_CLASS(UKismetInputLibrary, UBlueprintFunctionLibrary, COMPILED_IN_FLAGS(0), 0, Engine, NO_API) \
	DECLARE_SERIALIZER(UKismetInputLibrary) \
	/** Indicates whether the class is compiled into the engine */    enum {IsIntrinsic=COMPILED_IN_INTRINSIC}; \
	virtual UObject* _getUObject() const override { return const_cast<UKismetInputLibrary*>(this); }


#define Engine_Source_Runtime_Engine_Classes_Kismet_KismetInputLibrary_h_12_INCLASS \
	private: \
	static void StaticRegisterNativesUKismetInputLibrary(); \
	friend ENGINE_API class UClass* Z_Construct_UClass_UKismetInputLibrary(); \
	public: \
	DECLARE_CLASS(UKismetInputLibrary, UBlueprintFunctionLibrary, COMPILED_IN_FLAGS(0), 0, Engine, NO_API) \
	DECLARE_SERIALIZER(UKismetInputLibrary) \
	/** Indicates whether the class is compiled into the engine */    enum {IsIntrinsic=COMPILED_IN_INTRINSIC}; \
	virtual UObject* _getUObject() const override { return const_cast<UKismetInputLibrary*>(this); }


#define Engine_Source_Runtime_Engine_Classes_Kismet_KismetInputLibrary_h_12_STANDARD_CONSTRUCTORS \
	/** Standard constructor, called after all reflected properties have been initialized */ \
	NO_API UKismetInputLibrary(const FObjectInitializer& ObjectInitializer = FObjectInitializer::Get()); \
	DEFINE_DEFAULT_OBJECT_INITIALIZER_CONSTRUCTOR_CALL(UKismetInputLibrary) \
	DECLARE_VTABLE_PTR_HELPER_CTOR(NO_API, UKismetInputLibrary); \
DEFINE_VTABLE_PTR_HELPER_CTOR_CALLER(UKismetInputLibrary); \
private: \
	/** Private copy-constructor, should never be used */ \
	NO_API UKismetInputLibrary(const UKismetInputLibrary& InCopy); \
public:


#define Engine_Source_Runtime_Engine_Classes_Kismet_KismetInputLibrary_h_12_ENHANCED_CONSTRUCTORS \
	/** Standard constructor, called after all reflected properties have been initialized */ \
	NO_API UKismetInputLibrary(const FObjectInitializer& ObjectInitializer = FObjectInitializer::Get()) : Super(ObjectInitializer) { }; \
private: \
	/** Private copy-constructor, should never be used */ \
	NO_API UKismetInputLibrary(const UKismetInputLibrary& InCopy); \
public: \
	DECLARE_VTABLE_PTR_HELPER_CTOR(NO_API, UKismetInputLibrary); \
DEFINE_VTABLE_PTR_HELPER_CTOR_CALLER(UKismetInputLibrary); \
	DEFINE_DEFAULT_OBJECT_INITIALIZER_CONSTRUCTOR_CALL(UKismetInputLibrary)


#define Engine_Source_Runtime_Engine_Classes_Kismet_KismetInputLibrary_h_9_PROLOG
#define Engine_Source_Runtime_Engine_Classes_Kismet_KismetInputLibrary_h_12_GENERATED_BODY_LEGACY \
PRAGMA_DISABLE_DEPRECATION_WARNINGS \
public: \
	Engine_Source_Runtime_Engine_Classes_Kismet_KismetInputLibrary_h_12_RPC_WRAPPERS \
	Engine_Source_Runtime_Engine_Classes_Kismet_KismetInputLibrary_h_12_INCLASS \
	Engine_Source_Runtime_Engine_Classes_Kismet_KismetInputLibrary_h_12_STANDARD_CONSTRUCTORS \
public: \
PRAGMA_ENABLE_DEPRECATION_WARNINGS


#define Engine_Source_Runtime_Engine_Classes_Kismet_KismetInputLibrary_h_12_GENERATED_BODY \
PRAGMA_DISABLE_DEPRECATION_WARNINGS \
public: \
	Engine_Source_Runtime_Engine_Classes_Kismet_KismetInputLibrary_h_12_RPC_WRAPPERS_NO_PURE_DECLS \
	Engine_Source_Runtime_Engine_Classes_Kismet_KismetInputLibrary_h_12_INCLASS_NO_PURE_DECLS \
	Engine_Source_Runtime_Engine_Classes_Kismet_KismetInputLibrary_h_12_ENHANCED_CONSTRUCTORS \
static_assert(false, "Unknown access specifier for GENERATED_BODY() macro in class KismetInputLibrary."); \
PRAGMA_ENABLE_DEPRECATION_WARNINGS


#undef CURRENT_FILE_ID
#define CURRENT_FILE_ID Engine_Source_Runtime_Engine_Classes_Kismet_KismetInputLibrary_h


PRAGMA_ENABLE_DEPRECATION_WARNINGS
