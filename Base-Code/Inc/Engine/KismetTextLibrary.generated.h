// Copyright 1998-2015 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	C++ class header boilerplate exported from UnrealHeaderTool.
	This is automatically generated by the tools.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "ObjectBase.h"

PRAGMA_DISABLE_DEPRECATION_WARNINGS
struct FFormatTextArgument;
struct FTimespan;
struct FDateTime;
#ifdef ENGINE_KismetTextLibrary_generated_h
#error "KismetTextLibrary.generated.h already included, missing '#pragma once' in KismetTextLibrary.h"
#endif
#define ENGINE_KismetTextLibrary_generated_h

#define Engine_Source_Runtime_Engine_Classes_Kismet_KismetTextLibrary_h_34_GENERATED_BODY \
	friend ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FFormatTextArgument(); \
	ENGINE_API static class UScriptStruct* StaticStruct();


#define Engine_Source_Runtime_Engine_Classes_Kismet_KismetTextLibrary_h_46_RPC_WRAPPERS \
 \
	DECLARE_FUNCTION(execFormat) \
	{ \
		P_GET_PROPERTY(UTextProperty,Z_Param_InPattern); \
		P_GET_TARRAY(FFormatTextArgument,Z_Param_InArgs); \
		P_FINISH; \
		*(FText*)Z_Param__Result=UKismetTextLibrary::Format(Z_Param_InPattern,Z_Param_InArgs); \
	} \
 \
	DECLARE_FUNCTION(execAsTimespan_Timespan) \
	{ \
		P_GET_STRUCT_REF(FTimespan,Z_Param_Out_InTimespan); \
		P_FINISH; \
		*(FText*)Z_Param__Result=UKismetTextLibrary::AsTimespan_Timespan(Z_Param_Out_InTimespan); \
	} \
 \
	DECLARE_FUNCTION(execAsTime_DateTime) \
	{ \
		P_GET_STRUCT_REF(FDateTime,Z_Param_Out_In); \
		P_FINISH; \
		*(FText*)Z_Param__Result=UKismetTextLibrary::AsTime_DateTime(Z_Param_Out_In); \
	} \
 \
	DECLARE_FUNCTION(execAsDateTime_DateTime) \
	{ \
		P_GET_STRUCT_REF(FDateTime,Z_Param_Out_In); \
		P_FINISH; \
		*(FText*)Z_Param__Result=UKismetTextLibrary::AsDateTime_DateTime(Z_Param_Out_In); \
	} \
 \
	DECLARE_FUNCTION(execAsDate_DateTime) \
	{ \
		P_GET_STRUCT_REF(FDateTime,Z_Param_Out_InDateTime); \
		P_FINISH; \
		*(FText*)Z_Param__Result=UKismetTextLibrary::AsDate_DateTime(Z_Param_Out_InDateTime); \
	} \
 \
	DECLARE_FUNCTION(execAsPercent_Float) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Value); \
		P_GET_PROPERTY(UByteProperty,Z_Param_RoundingMode); \
		P_GET_UBOOL(Z_Param_bUseGrouping); \
		P_GET_PROPERTY(UIntProperty,Z_Param_MinimumIntegralDigits); \
		P_GET_PROPERTY(UIntProperty,Z_Param_MaximumIntegralDigits); \
		P_GET_PROPERTY(UIntProperty,Z_Param_MinimumFractionalDigits); \
		P_GET_PROPERTY(UIntProperty,Z_Param_MaximumFractionalDigits); \
		P_FINISH; \
		*(FText*)Z_Param__Result=UKismetTextLibrary::AsPercent_Float(Z_Param_Value,ERoundingMode(Z_Param_RoundingMode),Z_Param_bUseGrouping,Z_Param_MinimumIntegralDigits,Z_Param_MaximumIntegralDigits,Z_Param_MinimumFractionalDigits,Z_Param_MaximumFractionalDigits); \
	} \
 \
	DECLARE_FUNCTION(execAsCurrency_Float) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Value); \
		P_GET_PROPERTY(UByteProperty,Z_Param_RoundingMode); \
		P_GET_UBOOL(Z_Param_bUseGrouping); \
		P_GET_PROPERTY(UIntProperty,Z_Param_MinimumIntegralDigits); \
		P_GET_PROPERTY(UIntProperty,Z_Param_MaximumIntegralDigits); \
		P_GET_PROPERTY(UIntProperty,Z_Param_MinimumFractionalDigits); \
		P_GET_PROPERTY(UIntProperty,Z_Param_MaximumFractionalDigits); \
		P_GET_PROPERTY(UStrProperty,Z_Param_CurrencyCode); \
		P_FINISH; \
		*(FText*)Z_Param__Result=UKismetTextLibrary::AsCurrency_Float(Z_Param_Value,ERoundingMode(Z_Param_RoundingMode),Z_Param_bUseGrouping,Z_Param_MinimumIntegralDigits,Z_Param_MaximumIntegralDigits,Z_Param_MinimumFractionalDigits,Z_Param_MaximumFractionalDigits,Z_Param_CurrencyCode); \
	} \
 \
	DECLARE_FUNCTION(execAsCurrency_Integer) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_Value); \
		P_GET_PROPERTY(UByteProperty,Z_Param_RoundingMode); \
		P_GET_UBOOL(Z_Param_bUseGrouping); \
		P_GET_PROPERTY(UIntProperty,Z_Param_MinimumIntegralDigits); \
		P_GET_PROPERTY(UIntProperty,Z_Param_MaximumIntegralDigits); \
		P_GET_PROPERTY(UIntProperty,Z_Param_MinimumFractionalDigits); \
		P_GET_PROPERTY(UIntProperty,Z_Param_MaximumFractionalDigits); \
		P_GET_PROPERTY(UStrProperty,Z_Param_CurrencyCode); \
		P_FINISH; \
		*(FText*)Z_Param__Result=UKismetTextLibrary::AsCurrency_Integer(Z_Param_Value,ERoundingMode(Z_Param_RoundingMode),Z_Param_bUseGrouping,Z_Param_MinimumIntegralDigits,Z_Param_MaximumIntegralDigits,Z_Param_MinimumFractionalDigits,Z_Param_MaximumFractionalDigits,Z_Param_CurrencyCode); \
	} \
 \
	DECLARE_FUNCTION(execConv_FloatToText) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Value); \
		P_GET_PROPERTY(UByteProperty,Z_Param_RoundingMode); \
		P_GET_UBOOL(Z_Param_bUseGrouping); \
		P_GET_PROPERTY(UIntProperty,Z_Param_MinimumIntegralDigits); \
		P_GET_PROPERTY(UIntProperty,Z_Param_MaximumIntegralDigits); \
		P_GET_PROPERTY(UIntProperty,Z_Param_MinimumFractionalDigits); \
		P_GET_PROPERTY(UIntProperty,Z_Param_MaximumFractionalDigits); \
		P_FINISH; \
		*(FText*)Z_Param__Result=UKismetTextLibrary::Conv_FloatToText(Z_Param_Value,ERoundingMode(Z_Param_RoundingMode),Z_Param_bUseGrouping,Z_Param_MinimumIntegralDigits,Z_Param_MaximumIntegralDigits,Z_Param_MinimumFractionalDigits,Z_Param_MaximumFractionalDigits); \
	} \
 \
	DECLARE_FUNCTION(execConv_IntToText) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_Value); \
		P_GET_UBOOL(Z_Param_bUseGrouping); \
		P_GET_PROPERTY(UIntProperty,Z_Param_MinimumIntegralDigits); \
		P_GET_PROPERTY(UIntProperty,Z_Param_MaximumIntegralDigits); \
		P_FINISH; \
		*(FText*)Z_Param__Result=UKismetTextLibrary::Conv_IntToText(Z_Param_Value,Z_Param_bUseGrouping,Z_Param_MinimumIntegralDigits,Z_Param_MaximumIntegralDigits); \
	} \
 \
	DECLARE_FUNCTION(execConv_ByteToText) \
	{ \
		P_GET_PROPERTY(UByteProperty,Z_Param_Value); \
		P_FINISH; \
		*(FText*)Z_Param__Result=UKismetTextLibrary::Conv_ByteToText(Z_Param_Value); \
	} \
 \
	DECLARE_FUNCTION(execConv_BoolToText) \
	{ \
		P_GET_UBOOL(Z_Param_InBool); \
		P_FINISH; \
		*(FText*)Z_Param__Result=UKismetTextLibrary::Conv_BoolToText(Z_Param_InBool); \
	} \
 \
	DECLARE_FUNCTION(execNotEqual_IgnoreCase_TextText) \
	{ \
		P_GET_PROPERTY_REF(UTextProperty,Z_Param_Out_A); \
		P_GET_PROPERTY_REF(UTextProperty,Z_Param_Out_B); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UKismetTextLibrary::NotEqual_IgnoreCase_TextText(Z_Param_Out_A,Z_Param_Out_B); \
	} \
 \
	DECLARE_FUNCTION(execNotEqual_TextText) \
	{ \
		P_GET_PROPERTY_REF(UTextProperty,Z_Param_Out_A); \
		P_GET_PROPERTY_REF(UTextProperty,Z_Param_Out_B); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UKismetTextLibrary::NotEqual_TextText(Z_Param_Out_A,Z_Param_Out_B); \
	} \
 \
	DECLARE_FUNCTION(execEqualEqual_IgnoreCase_TextText) \
	{ \
		P_GET_PROPERTY_REF(UTextProperty,Z_Param_Out_A); \
		P_GET_PROPERTY_REF(UTextProperty,Z_Param_Out_B); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UKismetTextLibrary::EqualEqual_IgnoreCase_TextText(Z_Param_Out_A,Z_Param_Out_B); \
	} \
 \
	DECLARE_FUNCTION(execEqualEqual_TextText) \
	{ \
		P_GET_PROPERTY_REF(UTextProperty,Z_Param_Out_A); \
		P_GET_PROPERTY_REF(UTextProperty,Z_Param_Out_B); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UKismetTextLibrary::EqualEqual_TextText(Z_Param_Out_A,Z_Param_Out_B); \
	} \
 \
	DECLARE_FUNCTION(execFindTextInLocalizationTable) \
	{ \
		P_GET_PROPERTY(UStrProperty,Z_Param_Namespace); \
		P_GET_PROPERTY(UStrProperty,Z_Param_Key); \
		P_GET_PROPERTY_REF(UTextProperty,Z_Param_Out_OutText); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UKismetTextLibrary::FindTextInLocalizationTable(Z_Param_Namespace,Z_Param_Key,Z_Param_Out_OutText); \
	} \
 \
	DECLARE_FUNCTION(execGetEmptyText) \
	{ \
		P_FINISH; \
		*(FText*)Z_Param__Result=UKismetTextLibrary::GetEmptyText(); \
	} \
 \
	DECLARE_FUNCTION(execTextTrimPrecedingAndTrailing) \
	{ \
		P_GET_PROPERTY_REF(UTextProperty,Z_Param_Out_InText); \
		P_FINISH; \
		*(FText*)Z_Param__Result=UKismetTextLibrary::TextTrimPrecedingAndTrailing(Z_Param_Out_InText); \
	} \
 \
	DECLARE_FUNCTION(execTextTrimTrailing) \
	{ \
		P_GET_PROPERTY_REF(UTextProperty,Z_Param_Out_InText); \
		P_FINISH; \
		*(FText*)Z_Param__Result=UKismetTextLibrary::TextTrimTrailing(Z_Param_Out_InText); \
	} \
 \
	DECLARE_FUNCTION(execTextTrimPreceding) \
	{ \
		P_GET_PROPERTY_REF(UTextProperty,Z_Param_Out_InText); \
		P_FINISH; \
		*(FText*)Z_Param__Result=UKismetTextLibrary::TextTrimPreceding(Z_Param_Out_InText); \
	} \
 \
	DECLARE_FUNCTION(execTextIsCultureInvariant) \
	{ \
		P_GET_PROPERTY_REF(UTextProperty,Z_Param_Out_InText); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UKismetTextLibrary::TextIsCultureInvariant(Z_Param_Out_InText); \
	} \
 \
	DECLARE_FUNCTION(execTextIsTransient) \
	{ \
		P_GET_PROPERTY_REF(UTextProperty,Z_Param_Out_InText); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UKismetTextLibrary::TextIsTransient(Z_Param_Out_InText); \
	} \
 \
	DECLARE_FUNCTION(execTextIsEmpty) \
	{ \
		P_GET_PROPERTY_REF(UTextProperty,Z_Param_Out_InText); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UKismetTextLibrary::TextIsEmpty(Z_Param_Out_InText); \
	} \
 \
	DECLARE_FUNCTION(execConv_NameToText) \
	{ \
		P_GET_PROPERTY(UNameProperty,Z_Param_InName); \
		P_FINISH; \
		*(FText*)Z_Param__Result=UKismetTextLibrary::Conv_NameToText(Z_Param_InName); \
	} \
 \
	DECLARE_FUNCTION(execConv_StringToText) \
	{ \
		P_GET_PROPERTY(UStrProperty,Z_Param_InString); \
		P_FINISH; \
		*(FText*)Z_Param__Result=UKismetTextLibrary::Conv_StringToText(Z_Param_InString); \
	} \
 \
	DECLARE_FUNCTION(execConv_TextToString) \
	{ \
		P_GET_PROPERTY_REF(UTextProperty,Z_Param_Out_InText); \
		P_FINISH; \
		*(FString*)Z_Param__Result=UKismetTextLibrary::Conv_TextToString(Z_Param_Out_InText); \
	}


#define Engine_Source_Runtime_Engine_Classes_Kismet_KismetTextLibrary_h_46_RPC_WRAPPERS_NO_PURE_DECLS \
 \
	DECLARE_FUNCTION(execFormat) \
	{ \
		P_GET_PROPERTY(UTextProperty,Z_Param_InPattern); \
		P_GET_TARRAY(FFormatTextArgument,Z_Param_InArgs); \
		P_FINISH; \
		*(FText*)Z_Param__Result=UKismetTextLibrary::Format(Z_Param_InPattern,Z_Param_InArgs); \
	} \
 \
	DECLARE_FUNCTION(execAsTimespan_Timespan) \
	{ \
		P_GET_STRUCT_REF(FTimespan,Z_Param_Out_InTimespan); \
		P_FINISH; \
		*(FText*)Z_Param__Result=UKismetTextLibrary::AsTimespan_Timespan(Z_Param_Out_InTimespan); \
	} \
 \
	DECLARE_FUNCTION(execAsTime_DateTime) \
	{ \
		P_GET_STRUCT_REF(FDateTime,Z_Param_Out_In); \
		P_FINISH; \
		*(FText*)Z_Param__Result=UKismetTextLibrary::AsTime_DateTime(Z_Param_Out_In); \
	} \
 \
	DECLARE_FUNCTION(execAsDateTime_DateTime) \
	{ \
		P_GET_STRUCT_REF(FDateTime,Z_Param_Out_In); \
		P_FINISH; \
		*(FText*)Z_Param__Result=UKismetTextLibrary::AsDateTime_DateTime(Z_Param_Out_In); \
	} \
 \
	DECLARE_FUNCTION(execAsDate_DateTime) \
	{ \
		P_GET_STRUCT_REF(FDateTime,Z_Param_Out_InDateTime); \
		P_FINISH; \
		*(FText*)Z_Param__Result=UKismetTextLibrary::AsDate_DateTime(Z_Param_Out_InDateTime); \
	} \
 \
	DECLARE_FUNCTION(execAsPercent_Float) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Value); \
		P_GET_PROPERTY(UByteProperty,Z_Param_RoundingMode); \
		P_GET_UBOOL(Z_Param_bUseGrouping); \
		P_GET_PROPERTY(UIntProperty,Z_Param_MinimumIntegralDigits); \
		P_GET_PROPERTY(UIntProperty,Z_Param_MaximumIntegralDigits); \
		P_GET_PROPERTY(UIntProperty,Z_Param_MinimumFractionalDigits); \
		P_GET_PROPERTY(UIntProperty,Z_Param_MaximumFractionalDigits); \
		P_FINISH; \
		*(FText*)Z_Param__Result=UKismetTextLibrary::AsPercent_Float(Z_Param_Value,ERoundingMode(Z_Param_RoundingMode),Z_Param_bUseGrouping,Z_Param_MinimumIntegralDigits,Z_Param_MaximumIntegralDigits,Z_Param_MinimumFractionalDigits,Z_Param_MaximumFractionalDigits); \
	} \
 \
	DECLARE_FUNCTION(execAsCurrency_Float) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Value); \
		P_GET_PROPERTY(UByteProperty,Z_Param_RoundingMode); \
		P_GET_UBOOL(Z_Param_bUseGrouping); \
		P_GET_PROPERTY(UIntProperty,Z_Param_MinimumIntegralDigits); \
		P_GET_PROPERTY(UIntProperty,Z_Param_MaximumIntegralDigits); \
		P_GET_PROPERTY(UIntProperty,Z_Param_MinimumFractionalDigits); \
		P_GET_PROPERTY(UIntProperty,Z_Param_MaximumFractionalDigits); \
		P_GET_PROPERTY(UStrProperty,Z_Param_CurrencyCode); \
		P_FINISH; \
		*(FText*)Z_Param__Result=UKismetTextLibrary::AsCurrency_Float(Z_Param_Value,ERoundingMode(Z_Param_RoundingMode),Z_Param_bUseGrouping,Z_Param_MinimumIntegralDigits,Z_Param_MaximumIntegralDigits,Z_Param_MinimumFractionalDigits,Z_Param_MaximumFractionalDigits,Z_Param_CurrencyCode); \
	} \
 \
	DECLARE_FUNCTION(execAsCurrency_Integer) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_Value); \
		P_GET_PROPERTY(UByteProperty,Z_Param_RoundingMode); \
		P_GET_UBOOL(Z_Param_bUseGrouping); \
		P_GET_PROPERTY(UIntProperty,Z_Param_MinimumIntegralDigits); \
		P_GET_PROPERTY(UIntProperty,Z_Param_MaximumIntegralDigits); \
		P_GET_PROPERTY(UIntProperty,Z_Param_MinimumFractionalDigits); \
		P_GET_PROPERTY(UIntProperty,Z_Param_MaximumFractionalDigits); \
		P_GET_PROPERTY(UStrProperty,Z_Param_CurrencyCode); \
		P_FINISH; \
		*(FText*)Z_Param__Result=UKismetTextLibrary::AsCurrency_Integer(Z_Param_Value,ERoundingMode(Z_Param_RoundingMode),Z_Param_bUseGrouping,Z_Param_MinimumIntegralDigits,Z_Param_MaximumIntegralDigits,Z_Param_MinimumFractionalDigits,Z_Param_MaximumFractionalDigits,Z_Param_CurrencyCode); \
	} \
 \
	DECLARE_FUNCTION(execConv_FloatToText) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Value); \
		P_GET_PROPERTY(UByteProperty,Z_Param_RoundingMode); \
		P_GET_UBOOL(Z_Param_bUseGrouping); \
		P_GET_PROPERTY(UIntProperty,Z_Param_MinimumIntegralDigits); \
		P_GET_PROPERTY(UIntProperty,Z_Param_MaximumIntegralDigits); \
		P_GET_PROPERTY(UIntProperty,Z_Param_MinimumFractionalDigits); \
		P_GET_PROPERTY(UIntProperty,Z_Param_MaximumFractionalDigits); \
		P_FINISH; \
		*(FText*)Z_Param__Result=UKismetTextLibrary::Conv_FloatToText(Z_Param_Value,ERoundingMode(Z_Param_RoundingMode),Z_Param_bUseGrouping,Z_Param_MinimumIntegralDigits,Z_Param_MaximumIntegralDigits,Z_Param_MinimumFractionalDigits,Z_Param_MaximumFractionalDigits); \
	} \
 \
	DECLARE_FUNCTION(execConv_IntToText) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_Value); \
		P_GET_UBOOL(Z_Param_bUseGrouping); \
		P_GET_PROPERTY(UIntProperty,Z_Param_MinimumIntegralDigits); \
		P_GET_PROPERTY(UIntProperty,Z_Param_MaximumIntegralDigits); \
		P_FINISH; \
		*(FText*)Z_Param__Result=UKismetTextLibrary::Conv_IntToText(Z_Param_Value,Z_Param_bUseGrouping,Z_Param_MinimumIntegralDigits,Z_Param_MaximumIntegralDigits); \
	} \
 \
	DECLARE_FUNCTION(execConv_ByteToText) \
	{ \
		P_GET_PROPERTY(UByteProperty,Z_Param_Value); \
		P_FINISH; \
		*(FText*)Z_Param__Result=UKismetTextLibrary::Conv_ByteToText(Z_Param_Value); \
	} \
 \
	DECLARE_FUNCTION(execConv_BoolToText) \
	{ \
		P_GET_UBOOL(Z_Param_InBool); \
		P_FINISH; \
		*(FText*)Z_Param__Result=UKismetTextLibrary::Conv_BoolToText(Z_Param_InBool); \
	} \
 \
	DECLARE_FUNCTION(execNotEqual_IgnoreCase_TextText) \
	{ \
		P_GET_PROPERTY_REF(UTextProperty,Z_Param_Out_A); \
		P_GET_PROPERTY_REF(UTextProperty,Z_Param_Out_B); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UKismetTextLibrary::NotEqual_IgnoreCase_TextText(Z_Param_Out_A,Z_Param_Out_B); \
	} \
 \
	DECLARE_FUNCTION(execNotEqual_TextText) \
	{ \
		P_GET_PROPERTY_REF(UTextProperty,Z_Param_Out_A); \
		P_GET_PROPERTY_REF(UTextProperty,Z_Param_Out_B); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UKismetTextLibrary::NotEqual_TextText(Z_Param_Out_A,Z_Param_Out_B); \
	} \
 \
	DECLARE_FUNCTION(execEqualEqual_IgnoreCase_TextText) \
	{ \
		P_GET_PROPERTY_REF(UTextProperty,Z_Param_Out_A); \
		P_GET_PROPERTY_REF(UTextProperty,Z_Param_Out_B); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UKismetTextLibrary::EqualEqual_IgnoreCase_TextText(Z_Param_Out_A,Z_Param_Out_B); \
	} \
 \
	DECLARE_FUNCTION(execEqualEqual_TextText) \
	{ \
		P_GET_PROPERTY_REF(UTextProperty,Z_Param_Out_A); \
		P_GET_PROPERTY_REF(UTextProperty,Z_Param_Out_B); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UKismetTextLibrary::EqualEqual_TextText(Z_Param_Out_A,Z_Param_Out_B); \
	} \
 \
	DECLARE_FUNCTION(execFindTextInLocalizationTable) \
	{ \
		P_GET_PROPERTY(UStrProperty,Z_Param_Namespace); \
		P_GET_PROPERTY(UStrProperty,Z_Param_Key); \
		P_GET_PROPERTY_REF(UTextProperty,Z_Param_Out_OutText); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UKismetTextLibrary::FindTextInLocalizationTable(Z_Param_Namespace,Z_Param_Key,Z_Param_Out_OutText); \
	} \
 \
	DECLARE_FUNCTION(execGetEmptyText) \
	{ \
		P_FINISH; \
		*(FText*)Z_Param__Result=UKismetTextLibrary::GetEmptyText(); \
	} \
 \
	DECLARE_FUNCTION(execTextTrimPrecedingAndTrailing) \
	{ \
		P_GET_PROPERTY_REF(UTextProperty,Z_Param_Out_InText); \
		P_FINISH; \
		*(FText*)Z_Param__Result=UKismetTextLibrary::TextTrimPrecedingAndTrailing(Z_Param_Out_InText); \
	} \
 \
	DECLARE_FUNCTION(execTextTrimTrailing) \
	{ \
		P_GET_PROPERTY_REF(UTextProperty,Z_Param_Out_InText); \
		P_FINISH; \
		*(FText*)Z_Param__Result=UKismetTextLibrary::TextTrimTrailing(Z_Param_Out_InText); \
	} \
 \
	DECLARE_FUNCTION(execTextTrimPreceding) \
	{ \
		P_GET_PROPERTY_REF(UTextProperty,Z_Param_Out_InText); \
		P_FINISH; \
		*(FText*)Z_Param__Result=UKismetTextLibrary::TextTrimPreceding(Z_Param_Out_InText); \
	} \
 \
	DECLARE_FUNCTION(execTextIsCultureInvariant) \
	{ \
		P_GET_PROPERTY_REF(UTextProperty,Z_Param_Out_InText); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UKismetTextLibrary::TextIsCultureInvariant(Z_Param_Out_InText); \
	} \
 \
	DECLARE_FUNCTION(execTextIsTransient) \
	{ \
		P_GET_PROPERTY_REF(UTextProperty,Z_Param_Out_InText); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UKismetTextLibrary::TextIsTransient(Z_Param_Out_InText); \
	} \
 \
	DECLARE_FUNCTION(execTextIsEmpty) \
	{ \
		P_GET_PROPERTY_REF(UTextProperty,Z_Param_Out_InText); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UKismetTextLibrary::TextIsEmpty(Z_Param_Out_InText); \
	} \
 \
	DECLARE_FUNCTION(execConv_NameToText) \
	{ \
		P_GET_PROPERTY(UNameProperty,Z_Param_InName); \
		P_FINISH; \
		*(FText*)Z_Param__Result=UKismetTextLibrary::Conv_NameToText(Z_Param_InName); \
	} \
 \
	DECLARE_FUNCTION(execConv_StringToText) \
	{ \
		P_GET_PROPERTY(UStrProperty,Z_Param_InString); \
		P_FINISH; \
		*(FText*)Z_Param__Result=UKismetTextLibrary::Conv_StringToText(Z_Param_InString); \
	} \
 \
	DECLARE_FUNCTION(execConv_TextToString) \
	{ \
		P_GET_PROPERTY_REF(UTextProperty,Z_Param_Out_InText); \
		P_FINISH; \
		*(FString*)Z_Param__Result=UKismetTextLibrary::Conv_TextToString(Z_Param_Out_InText); \
	}


#define Engine_Source_Runtime_Engine_Classes_Kismet_KismetTextLibrary_h_46_INCLASS_NO_PURE_DECLS \
	private: \
	static void StaticRegisterNativesUKismetTextLibrary(); \
	friend ENGINE_API class UClass* Z_Construct_UClass_UKismetTextLibrary(); \
	public: \
	DECLARE_CLASS(UKismetTextLibrary, UBlueprintFunctionLibrary, COMPILED_IN_FLAGS(0), 0, Engine, NO_API) \
	DECLARE_SERIALIZER(UKismetTextLibrary) \
	/** Indicates whether the class is compiled into the engine */    enum {IsIntrinsic=COMPILED_IN_INTRINSIC}; \
	virtual UObject* _getUObject() const override { return const_cast<UKismetTextLibrary*>(this); }


#define Engine_Source_Runtime_Engine_Classes_Kismet_KismetTextLibrary_h_46_INCLASS \
	private: \
	static void StaticRegisterNativesUKismetTextLibrary(); \
	friend ENGINE_API class UClass* Z_Construct_UClass_UKismetTextLibrary(); \
	public: \
	DECLARE_CLASS(UKismetTextLibrary, UBlueprintFunctionLibrary, COMPILED_IN_FLAGS(0), 0, Engine, NO_API) \
	DECLARE_SERIALIZER(UKismetTextLibrary) \
	/** Indicates whether the class is compiled into the engine */    enum {IsIntrinsic=COMPILED_IN_INTRINSIC}; \
	virtual UObject* _getUObject() const override { return const_cast<UKismetTextLibrary*>(this); }


#define Engine_Source_Runtime_Engine_Classes_Kismet_KismetTextLibrary_h_46_STANDARD_CONSTRUCTORS \
	/** Standard constructor, called after all reflected properties have been initialized */ \
	NO_API UKismetTextLibrary(const FObjectInitializer& ObjectInitializer = FObjectInitializer::Get()); \
	DEFINE_DEFAULT_OBJECT_INITIALIZER_CONSTRUCTOR_CALL(UKismetTextLibrary) \
	DECLARE_VTABLE_PTR_HELPER_CTOR(NO_API, UKismetTextLibrary); \
DEFINE_VTABLE_PTR_HELPER_CTOR_CALLER(UKismetTextLibrary); \
private: \
	/** Private copy-constructor, should never be used */ \
	NO_API UKismetTextLibrary(const UKismetTextLibrary& InCopy); \
public:


#define Engine_Source_Runtime_Engine_Classes_Kismet_KismetTextLibrary_h_46_ENHANCED_CONSTRUCTORS \
	/** Standard constructor, called after all reflected properties have been initialized */ \
	NO_API UKismetTextLibrary(const FObjectInitializer& ObjectInitializer = FObjectInitializer::Get()) : Super(ObjectInitializer) { }; \
private: \
	/** Private copy-constructor, should never be used */ \
	NO_API UKismetTextLibrary(const UKismetTextLibrary& InCopy); \
public: \
	DECLARE_VTABLE_PTR_HELPER_CTOR(NO_API, UKismetTextLibrary); \
DEFINE_VTABLE_PTR_HELPER_CTOR_CALLER(UKismetTextLibrary); \
	DEFINE_DEFAULT_OBJECT_INITIALIZER_CONSTRUCTOR_CALL(UKismetTextLibrary)


#define Engine_Source_Runtime_Engine_Classes_Kismet_KismetTextLibrary_h_43_PROLOG
#define Engine_Source_Runtime_Engine_Classes_Kismet_KismetTextLibrary_h_46_GENERATED_BODY_LEGACY \
PRAGMA_DISABLE_DEPRECATION_WARNINGS \
public: \
	Engine_Source_Runtime_Engine_Classes_Kismet_KismetTextLibrary_h_46_RPC_WRAPPERS \
	Engine_Source_Runtime_Engine_Classes_Kismet_KismetTextLibrary_h_46_INCLASS \
	Engine_Source_Runtime_Engine_Classes_Kismet_KismetTextLibrary_h_46_STANDARD_CONSTRUCTORS \
public: \
PRAGMA_ENABLE_DEPRECATION_WARNINGS


#define Engine_Source_Runtime_Engine_Classes_Kismet_KismetTextLibrary_h_46_GENERATED_BODY \
PRAGMA_DISABLE_DEPRECATION_WARNINGS \
public: \
	Engine_Source_Runtime_Engine_Classes_Kismet_KismetTextLibrary_h_46_RPC_WRAPPERS_NO_PURE_DECLS \
	Engine_Source_Runtime_Engine_Classes_Kismet_KismetTextLibrary_h_46_INCLASS_NO_PURE_DECLS \
	Engine_Source_Runtime_Engine_Classes_Kismet_KismetTextLibrary_h_46_ENHANCED_CONSTRUCTORS \
static_assert(false, "Unknown access specifier for GENERATED_BODY() macro in class KismetTextLibrary."); \
PRAGMA_ENABLE_DEPRECATION_WARNINGS


#undef CURRENT_FILE_ID
#define CURRENT_FILE_ID Engine_Source_Runtime_Engine_Classes_Kismet_KismetTextLibrary_h


#define FOREACH_ENUM_EROUNDINGMODE(op) \
	op(HalfToEven) \
	op(HalfFromZero) \
	op(HalfToZero) \
	op(FromZero) \
	op(ToZero) \
	op(ToNegativeInfinity) \
	op(ToPositiveInfinity) 
PRAGMA_ENABLE_DEPRECATION_WARNINGS
