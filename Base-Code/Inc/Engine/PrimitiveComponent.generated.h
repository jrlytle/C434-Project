// Copyright 1998-2015 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	C++ class header boilerplate exported from UnrealHeaderTool.
	This is automatically generated by the tools.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "ObjectBase.h"

PRAGMA_DISABLE_DEPRECATION_WARNINGS
class UPrimitiveComponent;
class AActor;
struct FHitResult;
struct FVector;
class APawn;
class UPhysicalMaterial;
struct FWalkableSlopeOverride;
class UMaterialInterface;
class UMaterialInstanceDynamic;
struct FOverlapInfo;
class UObject;
#ifdef ENGINE_PrimitiveComponent_generated_h
#error "PrimitiveComponent.generated.h already included, missing '#pragma once' in PrimitiveComponent.h"
#endif
#define ENGINE_PrimitiveComponent_generated_h

#define Engine_Source_Runtime_Engine_Classes_Components_PrimitiveComponent_h_75_GENERATED_BODY \
	friend ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSpriteCategoryInfo(); \
	ENGINE_API static class UScriptStruct* StaticStruct();


#define Engine_Source_Runtime_Engine_Classes_Components_PrimitiveComponent_h_111_DELEGATE \
struct _Script_Engine_eventComponentEndTouchOverSignature_Parms \
{ \
	TEnumAsByte<ETouchIndex::Type> FingerIndex; \
	UPrimitiveComponent* TouchedComponent; \
}; \
static inline void FComponentEndTouchOverSignature_DelegateWrapper(const FMulticastScriptDelegate& ComponentEndTouchOverSignature, ETouchIndex::Type FingerIndex, UPrimitiveComponent* TouchedComponent) \
{ \
	_Script_Engine_eventComponentEndTouchOverSignature_Parms Parms; \
	Parms.FingerIndex=FingerIndex; \
	Parms.TouchedComponent=TouchedComponent; \
	ComponentEndTouchOverSignature.ProcessMulticastDelegate<UObject>(&Parms); \
}


#define Engine_Source_Runtime_Engine_Classes_Components_PrimitiveComponent_h_110_DELEGATE \
struct _Script_Engine_eventComponentBeginTouchOverSignature_Parms \
{ \
	TEnumAsByte<ETouchIndex::Type> FingerIndex; \
	UPrimitiveComponent* TouchedComponent; \
}; \
static inline void FComponentBeginTouchOverSignature_DelegateWrapper(const FMulticastScriptDelegate& ComponentBeginTouchOverSignature, ETouchIndex::Type FingerIndex, UPrimitiveComponent* TouchedComponent) \
{ \
	_Script_Engine_eventComponentBeginTouchOverSignature_Parms Parms; \
	Parms.FingerIndex=FingerIndex; \
	Parms.TouchedComponent=TouchedComponent; \
	ComponentBeginTouchOverSignature.ProcessMulticastDelegate<UObject>(&Parms); \
}


#define Engine_Source_Runtime_Engine_Classes_Components_PrimitiveComponent_h_109_DELEGATE \
struct _Script_Engine_eventComponentOnInputTouchEndSignature_Parms \
{ \
	TEnumAsByte<ETouchIndex::Type> FingerIndex; \
	UPrimitiveComponent* TouchedComponent; \
}; \
static inline void FComponentOnInputTouchEndSignature_DelegateWrapper(const FMulticastScriptDelegate& ComponentOnInputTouchEndSignature, ETouchIndex::Type FingerIndex, UPrimitiveComponent* TouchedComponent) \
{ \
	_Script_Engine_eventComponentOnInputTouchEndSignature_Parms Parms; \
	Parms.FingerIndex=FingerIndex; \
	Parms.TouchedComponent=TouchedComponent; \
	ComponentOnInputTouchEndSignature.ProcessMulticastDelegate<UObject>(&Parms); \
}


#define Engine_Source_Runtime_Engine_Classes_Components_PrimitiveComponent_h_108_DELEGATE \
struct _Script_Engine_eventComponentOnInputTouchBeginSignature_Parms \
{ \
	TEnumAsByte<ETouchIndex::Type> FingerIndex; \
	UPrimitiveComponent* TouchedComponent; \
}; \
static inline void FComponentOnInputTouchBeginSignature_DelegateWrapper(const FMulticastScriptDelegate& ComponentOnInputTouchBeginSignature, ETouchIndex::Type FingerIndex, UPrimitiveComponent* TouchedComponent) \
{ \
	_Script_Engine_eventComponentOnInputTouchBeginSignature_Parms Parms; \
	Parms.FingerIndex=FingerIndex; \
	Parms.TouchedComponent=TouchedComponent; \
	ComponentOnInputTouchBeginSignature.ProcessMulticastDelegate<UObject>(&Parms); \
}


#define Engine_Source_Runtime_Engine_Classes_Components_PrimitiveComponent_h_107_DELEGATE \
struct _Script_Engine_eventComponentOnReleasedSignature_Parms \
{ \
	UPrimitiveComponent* TouchedComponent; \
}; \
static inline void FComponentOnReleasedSignature_DelegateWrapper(const FMulticastScriptDelegate& ComponentOnReleasedSignature, UPrimitiveComponent* TouchedComponent) \
{ \
	_Script_Engine_eventComponentOnReleasedSignature_Parms Parms; \
	Parms.TouchedComponent=TouchedComponent; \
	ComponentOnReleasedSignature.ProcessMulticastDelegate<UObject>(&Parms); \
}


#define Engine_Source_Runtime_Engine_Classes_Components_PrimitiveComponent_h_106_DELEGATE \
struct _Script_Engine_eventComponentOnClickedSignature_Parms \
{ \
	UPrimitiveComponent* TouchedComponent; \
}; \
static inline void FComponentOnClickedSignature_DelegateWrapper(const FMulticastScriptDelegate& ComponentOnClickedSignature, UPrimitiveComponent* TouchedComponent) \
{ \
	_Script_Engine_eventComponentOnClickedSignature_Parms Parms; \
	Parms.TouchedComponent=TouchedComponent; \
	ComponentOnClickedSignature.ProcessMulticastDelegate<UObject>(&Parms); \
}


#define Engine_Source_Runtime_Engine_Classes_Components_PrimitiveComponent_h_105_DELEGATE \
struct _Script_Engine_eventComponentEndCursorOverSignature_Parms \
{ \
	UPrimitiveComponent* TouchedComponent; \
}; \
static inline void FComponentEndCursorOverSignature_DelegateWrapper(const FMulticastScriptDelegate& ComponentEndCursorOverSignature, UPrimitiveComponent* TouchedComponent) \
{ \
	_Script_Engine_eventComponentEndCursorOverSignature_Parms Parms; \
	Parms.TouchedComponent=TouchedComponent; \
	ComponentEndCursorOverSignature.ProcessMulticastDelegate<UObject>(&Parms); \
}


#define Engine_Source_Runtime_Engine_Classes_Components_PrimitiveComponent_h_104_DELEGATE \
struct _Script_Engine_eventComponentBeginCursorOverSignature_Parms \
{ \
	UPrimitiveComponent* TouchedComponent; \
}; \
static inline void FComponentBeginCursorOverSignature_DelegateWrapper(const FMulticastScriptDelegate& ComponentBeginCursorOverSignature, UPrimitiveComponent* TouchedComponent) \
{ \
	_Script_Engine_eventComponentBeginCursorOverSignature_Parms Parms; \
	Parms.TouchedComponent=TouchedComponent; \
	ComponentBeginCursorOverSignature.ProcessMulticastDelegate<UObject>(&Parms); \
}


#define Engine_Source_Runtime_Engine_Classes_Components_PrimitiveComponent_h_102_DELEGATE \
struct _Script_Engine_eventComponentSleepSignature_Parms \
{ \
	FName BoneName; \
}; \
static inline void FComponentSleepSignature_DelegateWrapper(const FMulticastScriptDelegate& ComponentSleepSignature, FName BoneName) \
{ \
	_Script_Engine_eventComponentSleepSignature_Parms Parms; \
	Parms.BoneName=BoneName; \
	ComponentSleepSignature.ProcessMulticastDelegate<UObject>(&Parms); \
}


#define Engine_Source_Runtime_Engine_Classes_Components_PrimitiveComponent_h_100_DELEGATE \
struct _Script_Engine_eventComponentWakeSignature_Parms \
{ \
	FName BoneName; \
}; \
static inline void FComponentWakeSignature_DelegateWrapper(const FMulticastScriptDelegate& ComponentWakeSignature, FName BoneName) \
{ \
	_Script_Engine_eventComponentWakeSignature_Parms Parms; \
	Parms.BoneName=BoneName; \
	ComponentWakeSignature.ProcessMulticastDelegate<UObject>(&Parms); \
}


#define Engine_Source_Runtime_Engine_Classes_Components_PrimitiveComponent_h_98_DELEGATE \
struct _Script_Engine_eventComponentEndOverlapSignature_Parms \
{ \
	AActor* OtherActor; \
	UPrimitiveComponent* OtherComp; \
	int32 OtherBodyIndex; \
}; \
static inline void FComponentEndOverlapSignature_DelegateWrapper(const FMulticastScriptDelegate& ComponentEndOverlapSignature, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32 OtherBodyIndex) \
{ \
	_Script_Engine_eventComponentEndOverlapSignature_Parms Parms; \
	Parms.OtherActor=OtherActor; \
	Parms.OtherComp=OtherComp; \
	Parms.OtherBodyIndex=OtherBodyIndex; \
	ComponentEndOverlapSignature.ProcessMulticastDelegate<UObject>(&Parms); \
}


#define Engine_Source_Runtime_Engine_Classes_Components_PrimitiveComponent_h_96_DELEGATE \
struct _Script_Engine_eventComponentBeginOverlapSignature_Parms \
{ \
	AActor* OtherActor; \
	UPrimitiveComponent* OtherComp; \
	int32 OtherBodyIndex; \
	bool bFromSweep; \
	FHitResult SweepResult; \
}; \
static inline void FComponentBeginOverlapSignature_DelegateWrapper(const FMulticastScriptDelegate& ComponentBeginOverlapSignature, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const FHitResult& SweepResult) \
{ \
	_Script_Engine_eventComponentBeginOverlapSignature_Parms Parms; \
	Parms.OtherActor=OtherActor; \
	Parms.OtherComp=OtherComp; \
	Parms.OtherBodyIndex=OtherBodyIndex; \
	Parms.bFromSweep=bFromSweep ? true : false; \
	Parms.SweepResult=SweepResult; \
	ComponentBeginOverlapSignature.ProcessMulticastDelegate<UObject>(&Parms); \
}


#define Engine_Source_Runtime_Engine_Classes_Components_PrimitiveComponent_h_94_DELEGATE \
struct _Script_Engine_eventComponentHitSignature_Parms \
{ \
	AActor* OtherActor; \
	UPrimitiveComponent* OtherComp; \
	FVector NormalImpulse; \
	FHitResult Hit; \
}; \
static inline void FComponentHitSignature_DelegateWrapper(const FMulticastScriptDelegate& ComponentHitSignature, AActor* OtherActor, UPrimitiveComponent* OtherComp, FVector NormalImpulse, const FHitResult& Hit) \
{ \
	_Script_Engine_eventComponentHitSignature_Parms Parms; \
	Parms.OtherActor=OtherActor; \
	Parms.OtherComp=OtherComp; \
	Parms.NormalImpulse=NormalImpulse; \
	Parms.Hit=Hit; \
	ComponentHitSignature.ProcessMulticastDelegate<UObject>(&Parms); \
}




#define Engine_Source_Runtime_Engine_Classes_Components_PrimitiveComponent_h_121_RPC_WRAPPERS \
 \
	DECLARE_FUNCTION(execCanCharacterStepUp) \
	{ \
		P_GET_OBJECT(APawn,Z_Param_Pawn); \
		P_FINISH; \
		*(bool*)Z_Param__Result=this->CanCharacterStepUp(Z_Param_Pawn); \
	} \
 \
	DECLARE_FUNCTION(execSetCullDistance) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_NewCullDistance); \
		P_FINISH; \
		this->SetCullDistance(Z_Param_NewCullDistance); \
	} \
 \
	DECLARE_FUNCTION(execSetPhysMaterialOverride) \
	{ \
		P_GET_OBJECT(UPhysicalMaterial,Z_Param_NewPhysMaterial); \
		P_FINISH; \
		this->SetPhysMaterialOverride(Z_Param_NewPhysMaterial); \
	} \
 \
	DECLARE_FUNCTION(execSetCollisionResponseToAllChannels) \
	{ \
		P_GET_PROPERTY(UByteProperty,Z_Param_NewResponse); \
		P_FINISH; \
		this->SetCollisionResponseToAllChannels(ECollisionResponse(Z_Param_NewResponse)); \
	} \
 \
	DECLARE_FUNCTION(execSetCollisionResponseToChannel) \
	{ \
		P_GET_PROPERTY(UByteProperty,Z_Param_Channel); \
		P_GET_PROPERTY(UByteProperty,Z_Param_NewResponse); \
		P_FINISH; \
		this->SetCollisionResponseToChannel(ECollisionChannel(Z_Param_Channel),ECollisionResponse(Z_Param_NewResponse)); \
	} \
 \
	DECLARE_FUNCTION(execScaleByMomentOfInertia) \
	{ \
		P_GET_STRUCT(FVector,Z_Param_InputVector); \
		P_GET_PROPERTY(UNameProperty,Z_Param_BoneName); \
		P_FINISH; \
		*(FVector*)Z_Param__Result=this->ScaleByMomentOfInertia(Z_Param_InputVector,Z_Param_BoneName); \
	} \
 \
	DECLARE_FUNCTION(execGetInertiaTensor) \
	{ \
		P_GET_PROPERTY(UNameProperty,Z_Param_BoneName); \
		P_FINISH; \
		*(FVector*)Z_Param__Result=this->GetInertiaTensor(Z_Param_BoneName); \
	} \
 \
	DECLARE_FUNCTION(execGetMass) \
	{ \
		P_FINISH; \
		*(float*)Z_Param__Result=this->GetMass(); \
	} \
 \
	DECLARE_FUNCTION(execSetMassOverrideInKg) \
	{ \
		P_GET_PROPERTY(UNameProperty,Z_Param_BoneName); \
		P_GET_PROPERTY(UFloatProperty,Z_Param_MassInKg); \
		P_GET_UBOOL(Z_Param_bOverrideMass); \
		P_FINISH; \
		this->SetMassOverrideInKg(Z_Param_BoneName,Z_Param_MassInKg,Z_Param_bOverrideMass); \
	} \
 \
	DECLARE_FUNCTION(execSetAllMassScale) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_InMassScale); \
		P_FINISH; \
		this->SetAllMassScale(Z_Param_InMassScale); \
	} \
 \
	DECLARE_FUNCTION(execGetMassScale) \
	{ \
		P_GET_PROPERTY(UNameProperty,Z_Param_BoneName); \
		P_FINISH; \
		*(float*)Z_Param__Result=this->GetMassScale(Z_Param_BoneName); \
	} \
 \
	DECLARE_FUNCTION(execSetMassScale) \
	{ \
		P_GET_PROPERTY(UNameProperty,Z_Param_BoneName); \
		P_GET_PROPERTY(UFloatProperty,Z_Param_InMassScale); \
		P_FINISH; \
		this->SetMassScale(Z_Param_BoneName,Z_Param_InMassScale); \
	} \
 \
	DECLARE_FUNCTION(execGetAngularDamping) \
	{ \
		P_FINISH; \
		*(float*)Z_Param__Result=this->GetAngularDamping(); \
	} \
 \
	DECLARE_FUNCTION(execSetAngularDamping) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_InDamping); \
		P_FINISH; \
		this->SetAngularDamping(Z_Param_InDamping); \
	} \
 \
	DECLARE_FUNCTION(execGetLinearDamping) \
	{ \
		P_FINISH; \
		*(float*)Z_Param__Result=this->GetLinearDamping(); \
	} \
 \
	DECLARE_FUNCTION(execSetLinearDamping) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_InDamping); \
		P_FINISH; \
		this->SetLinearDamping(Z_Param_InDamping); \
	} \
 \
	DECLARE_FUNCTION(execIsGravityEnabled) \
	{ \
		P_FINISH; \
		*(bool*)Z_Param__Result=this->IsGravityEnabled(); \
	} \
 \
	DECLARE_FUNCTION(execSetEnableGravity) \
	{ \
		P_GET_UBOOL(Z_Param_bGravityEnabled); \
		P_FINISH; \
		this->SetEnableGravity(Z_Param_bGravityEnabled); \
	} \
 \
	DECLARE_FUNCTION(execWakeAllRigidBodies) \
	{ \
		P_FINISH; \
		this->WakeAllRigidBodies(); \
	} \
 \
	DECLARE_FUNCTION(execGetCollisionObjectType) \
	{ \
		P_FINISH; \
		*(TEnumAsByte<ECollisionChannel>*)Z_Param__Result=this->GetCollisionObjectType(); \
	} \
 \
	DECLARE_FUNCTION(execGetCollisionResponseToChannel) \
	{ \
		P_GET_PROPERTY(UByteProperty,Z_Param_Channel); \
		P_FINISH; \
		*(TEnumAsByte<ECollisionResponse>*)Z_Param__Result=this->GetCollisionResponseToChannel(ECollisionChannel(Z_Param_Channel)); \
	} \
 \
	DECLARE_FUNCTION(execGetClosestPointOnCollision) \
	{ \
		P_GET_STRUCT_REF(FVector,Z_Param_Out_Point); \
		P_GET_STRUCT_REF(FVector,Z_Param_Out_OutPointOnBody); \
		P_GET_PROPERTY(UNameProperty,Z_Param_BoneName); \
		P_FINISH; \
		*(float*)Z_Param__Result=this->GetClosestPointOnCollision(Z_Param_Out_Point,Z_Param_Out_OutPointOnBody,Z_Param_BoneName); \
	} \
 \
	DECLARE_FUNCTION(execGetNumMaterials) \
	{ \
		P_FINISH; \
		*(int32*)Z_Param__Result=this->GetNumMaterials(); \
	} \
 \
	DECLARE_FUNCTION(execSetRenderInMainPass) \
	{ \
		P_GET_UBOOL(Z_Param_bValue); \
		P_FINISH; \
		this->SetRenderInMainPass(Z_Param_bValue); \
	} \
 \
	DECLARE_FUNCTION(execSetCustomDepthStencilValue) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_Value); \
		P_FINISH; \
		this->SetCustomDepthStencilValue(Z_Param_Value); \
	} \
 \
	DECLARE_FUNCTION(execSetRenderCustomDepth) \
	{ \
		P_GET_UBOOL(Z_Param_bValue); \
		P_FINISH; \
		this->SetRenderCustomDepth(Z_Param_bValue); \
	} \
 \
	DECLARE_FUNCTION(execK2_LineTraceComponent) \
	{ \
		P_GET_STRUCT(FVector,Z_Param_TraceStart); \
		P_GET_STRUCT(FVector,Z_Param_TraceEnd); \
		P_GET_UBOOL(Z_Param_bTraceComplex); \
		P_GET_UBOOL(Z_Param_bShowTrace); \
		P_GET_STRUCT_REF(FVector,Z_Param_Out_HitLocation); \
		P_GET_STRUCT_REF(FVector,Z_Param_Out_HitNormal); \
		P_GET_PROPERTY_REF(UNameProperty,Z_Param_Out_BoneName); \
		P_FINISH; \
		*(bool*)Z_Param__Result=this->K2_LineTraceComponent(Z_Param_TraceStart,Z_Param_TraceEnd,Z_Param_bTraceComplex,Z_Param_bShowTrace,Z_Param_Out_HitLocation,Z_Param_Out_HitNormal,Z_Param_Out_BoneName); \
	} \
 \
	DECLARE_FUNCTION(execSetCollisionObjectType) \
	{ \
		P_GET_PROPERTY(UByteProperty,Z_Param_Channel); \
		P_FINISH; \
		this->SetCollisionObjectType(ECollisionChannel(Z_Param_Channel)); \
	} \
 \
	DECLARE_FUNCTION(execGetCollisionProfileName) \
	{ \
		P_FINISH; \
		*(FName*)Z_Param__Result=this->GetCollisionProfileName(); \
	} \
 \
	DECLARE_FUNCTION(execSetCollisionProfileName) \
	{ \
		P_GET_PROPERTY(UNameProperty,Z_Param_InCollisionProfileName); \
		P_FINISH; \
		this->SetCollisionProfileName(Z_Param_InCollisionProfileName); \
	} \
 \
	DECLARE_FUNCTION(execSetCollisionEnabled) \
	{ \
		P_GET_PROPERTY(UByteProperty,Z_Param_NewType); \
		P_FINISH; \
		this->SetCollisionEnabled(ECollisionEnabled::Type(Z_Param_NewType)); \
	} \
 \
	DECLARE_FUNCTION(execSetTranslucentSortPriority) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_NewTranslucentSortPriority); \
		P_FINISH; \
		this->SetTranslucentSortPriority(Z_Param_NewTranslucentSortPriority); \
	} \
 \
	DECLARE_FUNCTION(execSetCastShadow) \
	{ \
		P_GET_UBOOL(Z_Param_NewCastShadow); \
		P_FINISH; \
		this->SetCastShadow(Z_Param_NewCastShadow); \
	} \
 \
	DECLARE_FUNCTION(execSetOnlyOwnerSee) \
	{ \
		P_GET_UBOOL(Z_Param_bNewOnlyOwnerSee); \
		P_FINISH; \
		this->SetOnlyOwnerSee(Z_Param_bNewOnlyOwnerSee); \
	} \
 \
	DECLARE_FUNCTION(execSetOwnerNoSee) \
	{ \
		P_GET_UBOOL(Z_Param_bNewOwnerNoSee); \
		P_FINISH; \
		this->SetOwnerNoSee(Z_Param_bNewOwnerNoSee); \
	} \
 \
	DECLARE_FUNCTION(execSetNotifyRigidBodyCollision) \
	{ \
		P_GET_UBOOL(Z_Param_bNewNotifyRigidBodyCollision); \
		P_FINISH; \
		this->SetNotifyRigidBodyCollision(Z_Param_bNewNotifyRigidBodyCollision); \
	} \
 \
	DECLARE_FUNCTION(execPutRigidBodyToSleep) \
	{ \
		P_GET_PROPERTY(UNameProperty,Z_Param_BoneName); \
		P_FINISH; \
		this->PutRigidBodyToSleep(Z_Param_BoneName); \
	} \
 \
	DECLARE_FUNCTION(execWakeRigidBody) \
	{ \
		P_GET_PROPERTY(UNameProperty,Z_Param_BoneName); \
		P_FINISH; \
		this->WakeRigidBody(Z_Param_BoneName); \
	} \
 \
	DECLARE_FUNCTION(execSetCenterOfMass) \
	{ \
		P_GET_STRUCT(FVector,Z_Param_CenterOfMassOffset); \
		P_GET_PROPERTY(UNameProperty,Z_Param_BoneName); \
		P_FINISH; \
		this->SetCenterOfMass(Z_Param_CenterOfMassOffset,Z_Param_BoneName); \
	} \
 \
	DECLARE_FUNCTION(execGetCenterOfMass) \
	{ \
		P_GET_PROPERTY(UNameProperty,Z_Param_BoneName); \
		P_FINISH; \
		*(FVector*)Z_Param__Result=this->GetCenterOfMass(Z_Param_BoneName); \
	} \
 \
	DECLARE_FUNCTION(execGetPhysicsAngularVelocity) \
	{ \
		P_GET_PROPERTY(UNameProperty,Z_Param_BoneName); \
		P_FINISH; \
		*(FVector*)Z_Param__Result=this->GetPhysicsAngularVelocity(Z_Param_BoneName); \
	} \
 \
	DECLARE_FUNCTION(execSetPhysicsMaxAngularVelocity) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_NewMaxAngVel); \
		P_GET_UBOOL(Z_Param_bAddToCurrent); \
		P_GET_PROPERTY(UNameProperty,Z_Param_BoneName); \
		P_FINISH; \
		this->SetPhysicsMaxAngularVelocity(Z_Param_NewMaxAngVel,Z_Param_bAddToCurrent,Z_Param_BoneName); \
	} \
 \
	DECLARE_FUNCTION(execSetPhysicsAngularVelocity) \
	{ \
		P_GET_STRUCT(FVector,Z_Param_NewAngVel); \
		P_GET_UBOOL(Z_Param_bAddToCurrent); \
		P_GET_PROPERTY(UNameProperty,Z_Param_BoneName); \
		P_FINISH; \
		this->SetPhysicsAngularVelocity(Z_Param_NewAngVel,Z_Param_bAddToCurrent,Z_Param_BoneName); \
	} \
 \
	DECLARE_FUNCTION(execSetAllPhysicsLinearVelocity) \
	{ \
		P_GET_STRUCT(FVector,Z_Param_NewVel); \
		P_GET_UBOOL(Z_Param_bAddToCurrent); \
		P_FINISH; \
		this->SetAllPhysicsLinearVelocity(Z_Param_NewVel,Z_Param_bAddToCurrent); \
	} \
 \
	DECLARE_FUNCTION(execGetPhysicsLinearVelocityAtPoint) \
	{ \
		P_GET_STRUCT(FVector,Z_Param_Point); \
		P_GET_PROPERTY(UNameProperty,Z_Param_BoneName); \
		P_FINISH; \
		*(FVector*)Z_Param__Result=this->GetPhysicsLinearVelocityAtPoint(Z_Param_Point,Z_Param_BoneName); \
	} \
 \
	DECLARE_FUNCTION(execGetPhysicsLinearVelocity) \
	{ \
		P_GET_PROPERTY(UNameProperty,Z_Param_BoneName); \
		P_FINISH; \
		*(FVector*)Z_Param__Result=this->GetPhysicsLinearVelocity(Z_Param_BoneName); \
	} \
 \
	DECLARE_FUNCTION(execSetPhysicsLinearVelocity) \
	{ \
		P_GET_STRUCT(FVector,Z_Param_NewVel); \
		P_GET_UBOOL(Z_Param_bAddToCurrent); \
		P_GET_PROPERTY(UNameProperty,Z_Param_BoneName); \
		P_FINISH; \
		this->SetPhysicsLinearVelocity(Z_Param_NewVel,Z_Param_bAddToCurrent,Z_Param_BoneName); \
	} \
 \
	DECLARE_FUNCTION(execAddTorque) \
	{ \
		P_GET_STRUCT(FVector,Z_Param_Torque); \
		P_GET_PROPERTY(UNameProperty,Z_Param_BoneName); \
		P_GET_UBOOL(Z_Param_bAccelChange); \
		P_FINISH; \
		this->AddTorque(Z_Param_Torque,Z_Param_BoneName,Z_Param_bAccelChange); \
	} \
 \
	DECLARE_FUNCTION(execAddRadialForce) \
	{ \
		P_GET_STRUCT(FVector,Z_Param_Origin); \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Radius); \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Strength); \
		P_GET_PROPERTY(UByteProperty,Z_Param_Falloff); \
		P_GET_UBOOL(Z_Param_bAccelChange); \
		P_FINISH; \
		this->AddRadialForce(Z_Param_Origin,Z_Param_Radius,Z_Param_Strength,ERadialImpulseFalloff(Z_Param_Falloff),Z_Param_bAccelChange); \
	} \
 \
	DECLARE_FUNCTION(execAddForceAtLocation) \
	{ \
		P_GET_STRUCT(FVector,Z_Param_Force); \
		P_GET_STRUCT(FVector,Z_Param_Location); \
		P_GET_PROPERTY(UNameProperty,Z_Param_BoneName); \
		P_FINISH; \
		this->AddForceAtLocation(Z_Param_Force,Z_Param_Location,Z_Param_BoneName); \
	} \
 \
	DECLARE_FUNCTION(execAddForce) \
	{ \
		P_GET_STRUCT(FVector,Z_Param_Force); \
		P_GET_PROPERTY(UNameProperty,Z_Param_BoneName); \
		P_GET_UBOOL(Z_Param_bAccelChange); \
		P_FINISH; \
		this->AddForce(Z_Param_Force,Z_Param_BoneName,Z_Param_bAccelChange); \
	} \
 \
	DECLARE_FUNCTION(execAddRadialImpulse) \
	{ \
		P_GET_STRUCT(FVector,Z_Param_Origin); \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Radius); \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Strength); \
		P_GET_PROPERTY(UByteProperty,Z_Param_Falloff); \
		P_GET_UBOOL(Z_Param_bVelChange); \
		P_FINISH; \
		this->AddRadialImpulse(Z_Param_Origin,Z_Param_Radius,Z_Param_Strength,ERadialImpulseFalloff(Z_Param_Falloff),Z_Param_bVelChange); \
	} \
 \
	DECLARE_FUNCTION(execAddImpulseAtLocation) \
	{ \
		P_GET_STRUCT(FVector,Z_Param_Impulse); \
		P_GET_STRUCT(FVector,Z_Param_Location); \
		P_GET_PROPERTY(UNameProperty,Z_Param_BoneName); \
		P_FINISH; \
		this->AddImpulseAtLocation(Z_Param_Impulse,Z_Param_Location,Z_Param_BoneName); \
	} \
 \
	DECLARE_FUNCTION(execAddAngularImpulse) \
	{ \
		P_GET_STRUCT(FVector,Z_Param_Impulse); \
		P_GET_PROPERTY(UNameProperty,Z_Param_BoneName); \
		P_GET_UBOOL(Z_Param_bVelChange); \
		P_FINISH; \
		this->AddAngularImpulse(Z_Param_Impulse,Z_Param_BoneName,Z_Param_bVelChange); \
	} \
 \
	DECLARE_FUNCTION(execAddImpulse) \
	{ \
		P_GET_STRUCT(FVector,Z_Param_Impulse); \
		P_GET_PROPERTY(UNameProperty,Z_Param_BoneName); \
		P_GET_UBOOL(Z_Param_bVelChange); \
		P_FINISH; \
		this->AddImpulse(Z_Param_Impulse,Z_Param_BoneName,Z_Param_bVelChange); \
	} \
 \
	DECLARE_FUNCTION(execSetConstraintMode) \
	{ \
		P_GET_PROPERTY(UByteProperty,Z_Param_ConstraintMode); \
		P_FINISH; \
		this->SetConstraintMode(EDOFMode::Type(Z_Param_ConstraintMode)); \
	} \
 \
	DECLARE_FUNCTION(execSetLockedAxis) \
	{ \
		P_GET_PROPERTY(UByteProperty,Z_Param_LockedAxis); \
		P_FINISH; \
		this->SetLockedAxis(EDOFMode::Type(Z_Param_LockedAxis)); \
	} \
 \
	DECLARE_FUNCTION(execSetSimulatePhysics) \
	{ \
		P_GET_UBOOL(Z_Param_bSimulate); \
		P_FINISH; \
		this->SetSimulatePhysics(Z_Param_bSimulate); \
	} \
 \
	DECLARE_FUNCTION(execSetWalkableSlopeOverride) \
	{ \
		P_GET_STRUCT_REF(FWalkableSlopeOverride,Z_Param_Out_NewOverride); \
		P_FINISH; \
		this->SetWalkableSlopeOverride(Z_Param_Out_NewOverride); \
	} \
 \
	DECLARE_FUNCTION(execGetWalkableSlopeOverride) \
	{ \
		P_FINISH; \
		*(FWalkableSlopeOverride*)Z_Param__Result=this->GetWalkableSlopeOverride(); \
	} \
 \
	DECLARE_FUNCTION(execCreateDynamicMaterialInstance) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_ElementIndex); \
		P_GET_OBJECT(UMaterialInterface,Z_Param_SourceMaterial); \
		P_FINISH; \
		*(UMaterialInstanceDynamic**)Z_Param__Result=this->CreateDynamicMaterialInstance(Z_Param_ElementIndex,Z_Param_SourceMaterial); \
	} \
 \
	DECLARE_FUNCTION(execCreateAndSetMaterialInstanceDynamicFromMaterial) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_ElementIndex); \
		P_GET_OBJECT(UMaterialInterface,Z_Param_Parent); \
		P_FINISH; \
		*(UMaterialInstanceDynamic**)Z_Param__Result=this->CreateAndSetMaterialInstanceDynamicFromMaterial(Z_Param_ElementIndex,Z_Param_Parent); \
	} \
 \
	DECLARE_FUNCTION(execCreateAndSetMaterialInstanceDynamic) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_ElementIndex); \
		P_FINISH; \
		*(UMaterialInstanceDynamic**)Z_Param__Result=this->CreateAndSetMaterialInstanceDynamic(Z_Param_ElementIndex); \
	} \
 \
	DECLARE_FUNCTION(execSetMaterial) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_ElementIndex); \
		P_GET_OBJECT(UMaterialInterface,Z_Param_Material); \
		P_FINISH; \
		this->SetMaterial(Z_Param_ElementIndex,Z_Param_Material); \
	} \
 \
	DECLARE_FUNCTION(execGetMaterial) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_ElementIndex); \
		P_FINISH; \
		*(UMaterialInterface**)Z_Param__Result=this->GetMaterial(Z_Param_ElementIndex); \
	} \
 \
	DECLARE_FUNCTION(execGetOverlapInfos) \
	{ \
		P_FINISH; \
		*(TArray<FOverlapInfo>*)Z_Param__Result=this->GetOverlapInfos(); \
	} \
 \
	DECLARE_FUNCTION(execGetOverlappingComponents) \
	{ \
		P_GET_TARRAY_REF(UPrimitiveComponent*,Z_Param_Out_InOverlappingComponents); \
		P_FINISH; \
		this->GetOverlappingComponents(Z_Param_Out_InOverlappingComponents); \
	} \
 \
	DECLARE_FUNCTION(execGetOverlappingActors) \
	{ \
		P_GET_TARRAY_REF(AActor*,Z_Param_Out_OverlappingActors); \
		P_GET_OBJECT(UClass,Z_Param_ClassFilter); \
		P_FINISH; \
		this->GetOverlappingActors(Z_Param_Out_OverlappingActors,Z_Param_ClassFilter); \
	} \
 \
	DECLARE_FUNCTION(execIsOverlappingActor) \
	{ \
		P_GET_OBJECT(AActor,Z_Param_Other); \
		P_FINISH; \
		*(bool*)Z_Param__Result=this->IsOverlappingActor(Z_Param_Other); \
	} \
 \
	DECLARE_FUNCTION(execIsOverlappingComponent) \
	{ \
		P_GET_OBJECT(UPrimitiveComponent,Z_Param_OtherComp); \
		P_FINISH; \
		*(bool*)Z_Param__Result=this->IsOverlappingComponent(Z_Param_OtherComp); \
	} \
 \
	DECLARE_FUNCTION(execClearMoveIgnoreActors) \
	{ \
		P_FINISH; \
		this->ClearMoveIgnoreActors(); \
	} \
 \
	DECLARE_FUNCTION(execCopyArrayOfMoveIgnoreActors) \
	{ \
		P_FINISH; \
		*(TArray<AActor*>*)Z_Param__Result=this->CopyArrayOfMoveIgnoreActors(); \
	} \
 \
	DECLARE_FUNCTION(execIgnoreActorWhenMoving) \
	{ \
		P_GET_OBJECT(AActor,Z_Param_Actor); \
		P_GET_UBOOL(Z_Param_bShouldIgnore); \
		P_FINISH; \
		this->IgnoreActorWhenMoving(Z_Param_Actor,Z_Param_bShouldIgnore); \
	}


#define Engine_Source_Runtime_Engine_Classes_Components_PrimitiveComponent_h_121_RPC_WRAPPERS_NO_PURE_DECLS \
 \
	DECLARE_FUNCTION(execCanCharacterStepUp) \
	{ \
		P_GET_OBJECT(APawn,Z_Param_Pawn); \
		P_FINISH; \
		*(bool*)Z_Param__Result=this->CanCharacterStepUp(Z_Param_Pawn); \
	} \
 \
	DECLARE_FUNCTION(execSetCullDistance) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_NewCullDistance); \
		P_FINISH; \
		this->SetCullDistance(Z_Param_NewCullDistance); \
	} \
 \
	DECLARE_FUNCTION(execSetPhysMaterialOverride) \
	{ \
		P_GET_OBJECT(UPhysicalMaterial,Z_Param_NewPhysMaterial); \
		P_FINISH; \
		this->SetPhysMaterialOverride(Z_Param_NewPhysMaterial); \
	} \
 \
	DECLARE_FUNCTION(execSetCollisionResponseToAllChannels) \
	{ \
		P_GET_PROPERTY(UByteProperty,Z_Param_NewResponse); \
		P_FINISH; \
		this->SetCollisionResponseToAllChannels(ECollisionResponse(Z_Param_NewResponse)); \
	} \
 \
	DECLARE_FUNCTION(execSetCollisionResponseToChannel) \
	{ \
		P_GET_PROPERTY(UByteProperty,Z_Param_Channel); \
		P_GET_PROPERTY(UByteProperty,Z_Param_NewResponse); \
		P_FINISH; \
		this->SetCollisionResponseToChannel(ECollisionChannel(Z_Param_Channel),ECollisionResponse(Z_Param_NewResponse)); \
	} \
 \
	DECLARE_FUNCTION(execScaleByMomentOfInertia) \
	{ \
		P_GET_STRUCT(FVector,Z_Param_InputVector); \
		P_GET_PROPERTY(UNameProperty,Z_Param_BoneName); \
		P_FINISH; \
		*(FVector*)Z_Param__Result=this->ScaleByMomentOfInertia(Z_Param_InputVector,Z_Param_BoneName); \
	} \
 \
	DECLARE_FUNCTION(execGetInertiaTensor) \
	{ \
		P_GET_PROPERTY(UNameProperty,Z_Param_BoneName); \
		P_FINISH; \
		*(FVector*)Z_Param__Result=this->GetInertiaTensor(Z_Param_BoneName); \
	} \
 \
	DECLARE_FUNCTION(execGetMass) \
	{ \
		P_FINISH; \
		*(float*)Z_Param__Result=this->GetMass(); \
	} \
 \
	DECLARE_FUNCTION(execSetMassOverrideInKg) \
	{ \
		P_GET_PROPERTY(UNameProperty,Z_Param_BoneName); \
		P_GET_PROPERTY(UFloatProperty,Z_Param_MassInKg); \
		P_GET_UBOOL(Z_Param_bOverrideMass); \
		P_FINISH; \
		this->SetMassOverrideInKg(Z_Param_BoneName,Z_Param_MassInKg,Z_Param_bOverrideMass); \
	} \
 \
	DECLARE_FUNCTION(execSetAllMassScale) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_InMassScale); \
		P_FINISH; \
		this->SetAllMassScale(Z_Param_InMassScale); \
	} \
 \
	DECLARE_FUNCTION(execGetMassScale) \
	{ \
		P_GET_PROPERTY(UNameProperty,Z_Param_BoneName); \
		P_FINISH; \
		*(float*)Z_Param__Result=this->GetMassScale(Z_Param_BoneName); \
	} \
 \
	DECLARE_FUNCTION(execSetMassScale) \
	{ \
		P_GET_PROPERTY(UNameProperty,Z_Param_BoneName); \
		P_GET_PROPERTY(UFloatProperty,Z_Param_InMassScale); \
		P_FINISH; \
		this->SetMassScale(Z_Param_BoneName,Z_Param_InMassScale); \
	} \
 \
	DECLARE_FUNCTION(execGetAngularDamping) \
	{ \
		P_FINISH; \
		*(float*)Z_Param__Result=this->GetAngularDamping(); \
	} \
 \
	DECLARE_FUNCTION(execSetAngularDamping) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_InDamping); \
		P_FINISH; \
		this->SetAngularDamping(Z_Param_InDamping); \
	} \
 \
	DECLARE_FUNCTION(execGetLinearDamping) \
	{ \
		P_FINISH; \
		*(float*)Z_Param__Result=this->GetLinearDamping(); \
	} \
 \
	DECLARE_FUNCTION(execSetLinearDamping) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_InDamping); \
		P_FINISH; \
		this->SetLinearDamping(Z_Param_InDamping); \
	} \
 \
	DECLARE_FUNCTION(execIsGravityEnabled) \
	{ \
		P_FINISH; \
		*(bool*)Z_Param__Result=this->IsGravityEnabled(); \
	} \
 \
	DECLARE_FUNCTION(execSetEnableGravity) \
	{ \
		P_GET_UBOOL(Z_Param_bGravityEnabled); \
		P_FINISH; \
		this->SetEnableGravity(Z_Param_bGravityEnabled); \
	} \
 \
	DECLARE_FUNCTION(execWakeAllRigidBodies) \
	{ \
		P_FINISH; \
		this->WakeAllRigidBodies(); \
	} \
 \
	DECLARE_FUNCTION(execGetCollisionObjectType) \
	{ \
		P_FINISH; \
		*(TEnumAsByte<ECollisionChannel>*)Z_Param__Result=this->GetCollisionObjectType(); \
	} \
 \
	DECLARE_FUNCTION(execGetCollisionResponseToChannel) \
	{ \
		P_GET_PROPERTY(UByteProperty,Z_Param_Channel); \
		P_FINISH; \
		*(TEnumAsByte<ECollisionResponse>*)Z_Param__Result=this->GetCollisionResponseToChannel(ECollisionChannel(Z_Param_Channel)); \
	} \
 \
	DECLARE_FUNCTION(execGetClosestPointOnCollision) \
	{ \
		P_GET_STRUCT_REF(FVector,Z_Param_Out_Point); \
		P_GET_STRUCT_REF(FVector,Z_Param_Out_OutPointOnBody); \
		P_GET_PROPERTY(UNameProperty,Z_Param_BoneName); \
		P_FINISH; \
		*(float*)Z_Param__Result=this->GetClosestPointOnCollision(Z_Param_Out_Point,Z_Param_Out_OutPointOnBody,Z_Param_BoneName); \
	} \
 \
	DECLARE_FUNCTION(execGetNumMaterials) \
	{ \
		P_FINISH; \
		*(int32*)Z_Param__Result=this->GetNumMaterials(); \
	} \
 \
	DECLARE_FUNCTION(execSetRenderInMainPass) \
	{ \
		P_GET_UBOOL(Z_Param_bValue); \
		P_FINISH; \
		this->SetRenderInMainPass(Z_Param_bValue); \
	} \
 \
	DECLARE_FUNCTION(execSetCustomDepthStencilValue) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_Value); \
		P_FINISH; \
		this->SetCustomDepthStencilValue(Z_Param_Value); \
	} \
 \
	DECLARE_FUNCTION(execSetRenderCustomDepth) \
	{ \
		P_GET_UBOOL(Z_Param_bValue); \
		P_FINISH; \
		this->SetRenderCustomDepth(Z_Param_bValue); \
	} \
 \
	DECLARE_FUNCTION(execK2_LineTraceComponent) \
	{ \
		P_GET_STRUCT(FVector,Z_Param_TraceStart); \
		P_GET_STRUCT(FVector,Z_Param_TraceEnd); \
		P_GET_UBOOL(Z_Param_bTraceComplex); \
		P_GET_UBOOL(Z_Param_bShowTrace); \
		P_GET_STRUCT_REF(FVector,Z_Param_Out_HitLocation); \
		P_GET_STRUCT_REF(FVector,Z_Param_Out_HitNormal); \
		P_GET_PROPERTY_REF(UNameProperty,Z_Param_Out_BoneName); \
		P_FINISH; \
		*(bool*)Z_Param__Result=this->K2_LineTraceComponent(Z_Param_TraceStart,Z_Param_TraceEnd,Z_Param_bTraceComplex,Z_Param_bShowTrace,Z_Param_Out_HitLocation,Z_Param_Out_HitNormal,Z_Param_Out_BoneName); \
	} \
 \
	DECLARE_FUNCTION(execSetCollisionObjectType) \
	{ \
		P_GET_PROPERTY(UByteProperty,Z_Param_Channel); \
		P_FINISH; \
		this->SetCollisionObjectType(ECollisionChannel(Z_Param_Channel)); \
	} \
 \
	DECLARE_FUNCTION(execGetCollisionProfileName) \
	{ \
		P_FINISH; \
		*(FName*)Z_Param__Result=this->GetCollisionProfileName(); \
	} \
 \
	DECLARE_FUNCTION(execSetCollisionProfileName) \
	{ \
		P_GET_PROPERTY(UNameProperty,Z_Param_InCollisionProfileName); \
		P_FINISH; \
		this->SetCollisionProfileName(Z_Param_InCollisionProfileName); \
	} \
 \
	DECLARE_FUNCTION(execSetCollisionEnabled) \
	{ \
		P_GET_PROPERTY(UByteProperty,Z_Param_NewType); \
		P_FINISH; \
		this->SetCollisionEnabled(ECollisionEnabled::Type(Z_Param_NewType)); \
	} \
 \
	DECLARE_FUNCTION(execSetTranslucentSortPriority) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_NewTranslucentSortPriority); \
		P_FINISH; \
		this->SetTranslucentSortPriority(Z_Param_NewTranslucentSortPriority); \
	} \
 \
	DECLARE_FUNCTION(execSetCastShadow) \
	{ \
		P_GET_UBOOL(Z_Param_NewCastShadow); \
		P_FINISH; \
		this->SetCastShadow(Z_Param_NewCastShadow); \
	} \
 \
	DECLARE_FUNCTION(execSetOnlyOwnerSee) \
	{ \
		P_GET_UBOOL(Z_Param_bNewOnlyOwnerSee); \
		P_FINISH; \
		this->SetOnlyOwnerSee(Z_Param_bNewOnlyOwnerSee); \
	} \
 \
	DECLARE_FUNCTION(execSetOwnerNoSee) \
	{ \
		P_GET_UBOOL(Z_Param_bNewOwnerNoSee); \
		P_FINISH; \
		this->SetOwnerNoSee(Z_Param_bNewOwnerNoSee); \
	} \
 \
	DECLARE_FUNCTION(execSetNotifyRigidBodyCollision) \
	{ \
		P_GET_UBOOL(Z_Param_bNewNotifyRigidBodyCollision); \
		P_FINISH; \
		this->SetNotifyRigidBodyCollision(Z_Param_bNewNotifyRigidBodyCollision); \
	} \
 \
	DECLARE_FUNCTION(execPutRigidBodyToSleep) \
	{ \
		P_GET_PROPERTY(UNameProperty,Z_Param_BoneName); \
		P_FINISH; \
		this->PutRigidBodyToSleep(Z_Param_BoneName); \
	} \
 \
	DECLARE_FUNCTION(execWakeRigidBody) \
	{ \
		P_GET_PROPERTY(UNameProperty,Z_Param_BoneName); \
		P_FINISH; \
		this->WakeRigidBody(Z_Param_BoneName); \
	} \
 \
	DECLARE_FUNCTION(execSetCenterOfMass) \
	{ \
		P_GET_STRUCT(FVector,Z_Param_CenterOfMassOffset); \
		P_GET_PROPERTY(UNameProperty,Z_Param_BoneName); \
		P_FINISH; \
		this->SetCenterOfMass(Z_Param_CenterOfMassOffset,Z_Param_BoneName); \
	} \
 \
	DECLARE_FUNCTION(execGetCenterOfMass) \
	{ \
		P_GET_PROPERTY(UNameProperty,Z_Param_BoneName); \
		P_FINISH; \
		*(FVector*)Z_Param__Result=this->GetCenterOfMass(Z_Param_BoneName); \
	} \
 \
	DECLARE_FUNCTION(execGetPhysicsAngularVelocity) \
	{ \
		P_GET_PROPERTY(UNameProperty,Z_Param_BoneName); \
		P_FINISH; \
		*(FVector*)Z_Param__Result=this->GetPhysicsAngularVelocity(Z_Param_BoneName); \
	} \
 \
	DECLARE_FUNCTION(execSetPhysicsMaxAngularVelocity) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_NewMaxAngVel); \
		P_GET_UBOOL(Z_Param_bAddToCurrent); \
		P_GET_PROPERTY(UNameProperty,Z_Param_BoneName); \
		P_FINISH; \
		this->SetPhysicsMaxAngularVelocity(Z_Param_NewMaxAngVel,Z_Param_bAddToCurrent,Z_Param_BoneName); \
	} \
 \
	DECLARE_FUNCTION(execSetPhysicsAngularVelocity) \
	{ \
		P_GET_STRUCT(FVector,Z_Param_NewAngVel); \
		P_GET_UBOOL(Z_Param_bAddToCurrent); \
		P_GET_PROPERTY(UNameProperty,Z_Param_BoneName); \
		P_FINISH; \
		this->SetPhysicsAngularVelocity(Z_Param_NewAngVel,Z_Param_bAddToCurrent,Z_Param_BoneName); \
	} \
 \
	DECLARE_FUNCTION(execSetAllPhysicsLinearVelocity) \
	{ \
		P_GET_STRUCT(FVector,Z_Param_NewVel); \
		P_GET_UBOOL(Z_Param_bAddToCurrent); \
		P_FINISH; \
		this->SetAllPhysicsLinearVelocity(Z_Param_NewVel,Z_Param_bAddToCurrent); \
	} \
 \
	DECLARE_FUNCTION(execGetPhysicsLinearVelocityAtPoint) \
	{ \
		P_GET_STRUCT(FVector,Z_Param_Point); \
		P_GET_PROPERTY(UNameProperty,Z_Param_BoneName); \
		P_FINISH; \
		*(FVector*)Z_Param__Result=this->GetPhysicsLinearVelocityAtPoint(Z_Param_Point,Z_Param_BoneName); \
	} \
 \
	DECLARE_FUNCTION(execGetPhysicsLinearVelocity) \
	{ \
		P_GET_PROPERTY(UNameProperty,Z_Param_BoneName); \
		P_FINISH; \
		*(FVector*)Z_Param__Result=this->GetPhysicsLinearVelocity(Z_Param_BoneName); \
	} \
 \
	DECLARE_FUNCTION(execSetPhysicsLinearVelocity) \
	{ \
		P_GET_STRUCT(FVector,Z_Param_NewVel); \
		P_GET_UBOOL(Z_Param_bAddToCurrent); \
		P_GET_PROPERTY(UNameProperty,Z_Param_BoneName); \
		P_FINISH; \
		this->SetPhysicsLinearVelocity(Z_Param_NewVel,Z_Param_bAddToCurrent,Z_Param_BoneName); \
	} \
 \
	DECLARE_FUNCTION(execAddTorque) \
	{ \
		P_GET_STRUCT(FVector,Z_Param_Torque); \
		P_GET_PROPERTY(UNameProperty,Z_Param_BoneName); \
		P_GET_UBOOL(Z_Param_bAccelChange); \
		P_FINISH; \
		this->AddTorque(Z_Param_Torque,Z_Param_BoneName,Z_Param_bAccelChange); \
	} \
 \
	DECLARE_FUNCTION(execAddRadialForce) \
	{ \
		P_GET_STRUCT(FVector,Z_Param_Origin); \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Radius); \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Strength); \
		P_GET_PROPERTY(UByteProperty,Z_Param_Falloff); \
		P_GET_UBOOL(Z_Param_bAccelChange); \
		P_FINISH; \
		this->AddRadialForce(Z_Param_Origin,Z_Param_Radius,Z_Param_Strength,ERadialImpulseFalloff(Z_Param_Falloff),Z_Param_bAccelChange); \
	} \
 \
	DECLARE_FUNCTION(execAddForceAtLocation) \
	{ \
		P_GET_STRUCT(FVector,Z_Param_Force); \
		P_GET_STRUCT(FVector,Z_Param_Location); \
		P_GET_PROPERTY(UNameProperty,Z_Param_BoneName); \
		P_FINISH; \
		this->AddForceAtLocation(Z_Param_Force,Z_Param_Location,Z_Param_BoneName); \
	} \
 \
	DECLARE_FUNCTION(execAddForce) \
	{ \
		P_GET_STRUCT(FVector,Z_Param_Force); \
		P_GET_PROPERTY(UNameProperty,Z_Param_BoneName); \
		P_GET_UBOOL(Z_Param_bAccelChange); \
		P_FINISH; \
		this->AddForce(Z_Param_Force,Z_Param_BoneName,Z_Param_bAccelChange); \
	} \
 \
	DECLARE_FUNCTION(execAddRadialImpulse) \
	{ \
		P_GET_STRUCT(FVector,Z_Param_Origin); \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Radius); \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Strength); \
		P_GET_PROPERTY(UByteProperty,Z_Param_Falloff); \
		P_GET_UBOOL(Z_Param_bVelChange); \
		P_FINISH; \
		this->AddRadialImpulse(Z_Param_Origin,Z_Param_Radius,Z_Param_Strength,ERadialImpulseFalloff(Z_Param_Falloff),Z_Param_bVelChange); \
	} \
 \
	DECLARE_FUNCTION(execAddImpulseAtLocation) \
	{ \
		P_GET_STRUCT(FVector,Z_Param_Impulse); \
		P_GET_STRUCT(FVector,Z_Param_Location); \
		P_GET_PROPERTY(UNameProperty,Z_Param_BoneName); \
		P_FINISH; \
		this->AddImpulseAtLocation(Z_Param_Impulse,Z_Param_Location,Z_Param_BoneName); \
	} \
 \
	DECLARE_FUNCTION(execAddAngularImpulse) \
	{ \
		P_GET_STRUCT(FVector,Z_Param_Impulse); \
		P_GET_PROPERTY(UNameProperty,Z_Param_BoneName); \
		P_GET_UBOOL(Z_Param_bVelChange); \
		P_FINISH; \
		this->AddAngularImpulse(Z_Param_Impulse,Z_Param_BoneName,Z_Param_bVelChange); \
	} \
 \
	DECLARE_FUNCTION(execAddImpulse) \
	{ \
		P_GET_STRUCT(FVector,Z_Param_Impulse); \
		P_GET_PROPERTY(UNameProperty,Z_Param_BoneName); \
		P_GET_UBOOL(Z_Param_bVelChange); \
		P_FINISH; \
		this->AddImpulse(Z_Param_Impulse,Z_Param_BoneName,Z_Param_bVelChange); \
	} \
 \
	DECLARE_FUNCTION(execSetConstraintMode) \
	{ \
		P_GET_PROPERTY(UByteProperty,Z_Param_ConstraintMode); \
		P_FINISH; \
		this->SetConstraintMode(EDOFMode::Type(Z_Param_ConstraintMode)); \
	} \
 \
	DECLARE_FUNCTION(execSetLockedAxis) \
	{ \
		P_GET_PROPERTY(UByteProperty,Z_Param_LockedAxis); \
		P_FINISH; \
		this->SetLockedAxis(EDOFMode::Type(Z_Param_LockedAxis)); \
	} \
 \
	DECLARE_FUNCTION(execSetSimulatePhysics) \
	{ \
		P_GET_UBOOL(Z_Param_bSimulate); \
		P_FINISH; \
		this->SetSimulatePhysics(Z_Param_bSimulate); \
	} \
 \
	DECLARE_FUNCTION(execSetWalkableSlopeOverride) \
	{ \
		P_GET_STRUCT_REF(FWalkableSlopeOverride,Z_Param_Out_NewOverride); \
		P_FINISH; \
		this->SetWalkableSlopeOverride(Z_Param_Out_NewOverride); \
	} \
 \
	DECLARE_FUNCTION(execGetWalkableSlopeOverride) \
	{ \
		P_FINISH; \
		*(FWalkableSlopeOverride*)Z_Param__Result=this->GetWalkableSlopeOverride(); \
	} \
 \
	DECLARE_FUNCTION(execCreateDynamicMaterialInstance) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_ElementIndex); \
		P_GET_OBJECT(UMaterialInterface,Z_Param_SourceMaterial); \
		P_FINISH; \
		*(UMaterialInstanceDynamic**)Z_Param__Result=this->CreateDynamicMaterialInstance(Z_Param_ElementIndex,Z_Param_SourceMaterial); \
	} \
 \
	DECLARE_FUNCTION(execCreateAndSetMaterialInstanceDynamicFromMaterial) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_ElementIndex); \
		P_GET_OBJECT(UMaterialInterface,Z_Param_Parent); \
		P_FINISH; \
		*(UMaterialInstanceDynamic**)Z_Param__Result=this->CreateAndSetMaterialInstanceDynamicFromMaterial(Z_Param_ElementIndex,Z_Param_Parent); \
	} \
 \
	DECLARE_FUNCTION(execCreateAndSetMaterialInstanceDynamic) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_ElementIndex); \
		P_FINISH; \
		*(UMaterialInstanceDynamic**)Z_Param__Result=this->CreateAndSetMaterialInstanceDynamic(Z_Param_ElementIndex); \
	} \
 \
	DECLARE_FUNCTION(execSetMaterial) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_ElementIndex); \
		P_GET_OBJECT(UMaterialInterface,Z_Param_Material); \
		P_FINISH; \
		this->SetMaterial(Z_Param_ElementIndex,Z_Param_Material); \
	} \
 \
	DECLARE_FUNCTION(execGetMaterial) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_ElementIndex); \
		P_FINISH; \
		*(UMaterialInterface**)Z_Param__Result=this->GetMaterial(Z_Param_ElementIndex); \
	} \
 \
	DECLARE_FUNCTION(execGetOverlapInfos) \
	{ \
		P_FINISH; \
		*(TArray<FOverlapInfo>*)Z_Param__Result=this->GetOverlapInfos(); \
	} \
 \
	DECLARE_FUNCTION(execGetOverlappingComponents) \
	{ \
		P_GET_TARRAY_REF(UPrimitiveComponent*,Z_Param_Out_InOverlappingComponents); \
		P_FINISH; \
		this->GetOverlappingComponents(Z_Param_Out_InOverlappingComponents); \
	} \
 \
	DECLARE_FUNCTION(execGetOverlappingActors) \
	{ \
		P_GET_TARRAY_REF(AActor*,Z_Param_Out_OverlappingActors); \
		P_GET_OBJECT(UClass,Z_Param_ClassFilter); \
		P_FINISH; \
		this->GetOverlappingActors(Z_Param_Out_OverlappingActors,Z_Param_ClassFilter); \
	} \
 \
	DECLARE_FUNCTION(execIsOverlappingActor) \
	{ \
		P_GET_OBJECT(AActor,Z_Param_Other); \
		P_FINISH; \
		*(bool*)Z_Param__Result=this->IsOverlappingActor(Z_Param_Other); \
	} \
 \
	DECLARE_FUNCTION(execIsOverlappingComponent) \
	{ \
		P_GET_OBJECT(UPrimitiveComponent,Z_Param_OtherComp); \
		P_FINISH; \
		*(bool*)Z_Param__Result=this->IsOverlappingComponent(Z_Param_OtherComp); \
	} \
 \
	DECLARE_FUNCTION(execClearMoveIgnoreActors) \
	{ \
		P_FINISH; \
		this->ClearMoveIgnoreActors(); \
	} \
 \
	DECLARE_FUNCTION(execCopyArrayOfMoveIgnoreActors) \
	{ \
		P_FINISH; \
		*(TArray<AActor*>*)Z_Param__Result=this->CopyArrayOfMoveIgnoreActors(); \
	} \
 \
	DECLARE_FUNCTION(execIgnoreActorWhenMoving) \
	{ \
		P_GET_OBJECT(AActor,Z_Param_Actor); \
		P_GET_UBOOL(Z_Param_bShouldIgnore); \
		P_FINISH; \
		this->IgnoreActorWhenMoving(Z_Param_Actor,Z_Param_bShouldIgnore); \
	}


#define Engine_Source_Runtime_Engine_Classes_Components_PrimitiveComponent_h_121_INCLASS_NO_PURE_DECLS \
	private: \
	static void StaticRegisterNativesUPrimitiveComponent(); \
	friend ENGINE_API class UClass* Z_Construct_UClass_UPrimitiveComponent(); \
	public: \
	DECLARE_CLASS(UPrimitiveComponent, USceneComponent, COMPILED_IN_FLAGS(CLASS_Abstract), CASTCLASS_UPrimitiveComponent, Engine, NO_API) \
	DECLARE_SERIALIZER(UPrimitiveComponent) \
	/** Indicates whether the class is compiled into the engine */    enum {IsIntrinsic=COMPILED_IN_INTRINSIC}; \
	virtual UObject* _getUObject() const override { return const_cast<UPrimitiveComponent*>(this); }


#define Engine_Source_Runtime_Engine_Classes_Components_PrimitiveComponent_h_121_INCLASS \
	private: \
	static void StaticRegisterNativesUPrimitiveComponent(); \
	friend ENGINE_API class UClass* Z_Construct_UClass_UPrimitiveComponent(); \
	public: \
	DECLARE_CLASS(UPrimitiveComponent, USceneComponent, COMPILED_IN_FLAGS(CLASS_Abstract), CASTCLASS_UPrimitiveComponent, Engine, NO_API) \
	DECLARE_SERIALIZER(UPrimitiveComponent) \
	/** Indicates whether the class is compiled into the engine */    enum {IsIntrinsic=COMPILED_IN_INTRINSIC}; \
	virtual UObject* _getUObject() const override { return const_cast<UPrimitiveComponent*>(this); }


#define Engine_Source_Runtime_Engine_Classes_Components_PrimitiveComponent_h_121_STANDARD_CONSTRUCTORS \
	/** Standard constructor, called after all reflected properties have been initialized */ \
	NO_API UPrimitiveComponent(const FObjectInitializer& ObjectInitializer = FObjectInitializer::Get()); \
	DEFINE_DEFAULT_OBJECT_INITIALIZER_CONSTRUCTOR_CALL(UPrimitiveComponent) \
	DECLARE_VTABLE_PTR_HELPER_CTOR(NO_API, UPrimitiveComponent); \
DEFINE_VTABLE_PTR_HELPER_CTOR_CALLER(UPrimitiveComponent); \
private: \
	/** Private copy-constructor, should never be used */ \
	NO_API UPrimitiveComponent(const UPrimitiveComponent& InCopy); \
public:


#define Engine_Source_Runtime_Engine_Classes_Components_PrimitiveComponent_h_121_ENHANCED_CONSTRUCTORS \
private: \
	/** Private copy-constructor, should never be used */ \
	NO_API UPrimitiveComponent(const UPrimitiveComponent& InCopy); \
public: \
	DECLARE_VTABLE_PTR_HELPER_CTOR(NO_API, UPrimitiveComponent); \
DEFINE_VTABLE_PTR_HELPER_CTOR_CALLER(UPrimitiveComponent); \
	DEFINE_DEFAULT_OBJECT_INITIALIZER_CONSTRUCTOR_CALL(UPrimitiveComponent)


#define Engine_Source_Runtime_Engine_Classes_Components_PrimitiveComponent_h_118_PROLOG
#define Engine_Source_Runtime_Engine_Classes_Components_PrimitiveComponent_h_121_GENERATED_BODY_LEGACY \
PRAGMA_DISABLE_DEPRECATION_WARNINGS \
public: \
	Engine_Source_Runtime_Engine_Classes_Components_PrimitiveComponent_h_121_RPC_WRAPPERS \
	Engine_Source_Runtime_Engine_Classes_Components_PrimitiveComponent_h_121_INCLASS \
	Engine_Source_Runtime_Engine_Classes_Components_PrimitiveComponent_h_121_STANDARD_CONSTRUCTORS \
public: \
PRAGMA_ENABLE_DEPRECATION_WARNINGS


#define Engine_Source_Runtime_Engine_Classes_Components_PrimitiveComponent_h_121_GENERATED_BODY \
PRAGMA_DISABLE_DEPRECATION_WARNINGS \
public: \
	Engine_Source_Runtime_Engine_Classes_Components_PrimitiveComponent_h_121_RPC_WRAPPERS_NO_PURE_DECLS \
	Engine_Source_Runtime_Engine_Classes_Components_PrimitiveComponent_h_121_INCLASS_NO_PURE_DECLS \
	Engine_Source_Runtime_Engine_Classes_Components_PrimitiveComponent_h_121_ENHANCED_CONSTRUCTORS \
private: \
PRAGMA_ENABLE_DEPRECATION_WARNINGS


#undef CURRENT_FILE_ID
#define CURRENT_FILE_ID Engine_Source_Runtime_Engine_Classes_Components_PrimitiveComponent_h


#define FOREACH_ENUM_EHASCUSTOMNAVIGABLEGEOMETRY(op) \
	op(EHasCustomNavigableGeometry::No) \
	op(EHasCustomNavigableGeometry::Yes) \
	op(EHasCustomNavigableGeometry::EvenIfNotCollidable) \
	op(EHasCustomNavigableGeometry::DontExport) 
#define FOREACH_ENUM_ECANBECHARACTERBASE(op) \
	op(ECB_No) \
	op(ECB_Yes) \
	op(ECB_Owner) 
PRAGMA_ENABLE_DEPRECATION_WARNINGS
