// Copyright 1998-2015 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	C++ class header boilerplate exported from UnrealHeaderTool.
	This is automatically generated by the tools.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "ObjectBase.h"

PRAGMA_DISABLE_DEPRECATION_WARNINGS
struct FVector;
struct FTransform;
struct FRotator;
struct FQuat;
struct FLinearColor;
#ifdef ENGINE_SplineComponent_generated_h
#error "SplineComponent.generated.h already included, missing '#pragma once' in SplineComponent.h"
#endif
#define ENGINE_SplineComponent_generated_h

#define Engine_Source_Runtime_Engine_Classes_Components_SplineComponent_h_42_RPC_WRAPPERS \
 \
	DECLARE_FUNCTION(execGetScaleAtTime) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Time); \
		P_GET_UBOOL(Z_Param_bUseConstantVelocity); \
		P_FINISH; \
		*(FVector*)Z_Param__Result=this->GetScaleAtTime(Z_Param_Time,Z_Param_bUseConstantVelocity); \
	} \
 \
	DECLARE_FUNCTION(execGetRollAtTime) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Time); \
		P_GET_PROPERTY(UByteProperty,Z_Param_CoordinateSpace); \
		P_GET_UBOOL(Z_Param_bUseConstantVelocity); \
		P_FINISH; \
		*(float*)Z_Param__Result=this->GetRollAtTime(Z_Param_Time,ESplineCoordinateSpace::Type(Z_Param_CoordinateSpace),Z_Param_bUseConstantVelocity); \
	} \
 \
	DECLARE_FUNCTION(execGetTransformAtTime) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Time); \
		P_GET_PROPERTY(UByteProperty,Z_Param_CoordinateSpace); \
		P_GET_UBOOL(Z_Param_bUseConstantVelocity); \
		P_GET_UBOOL(Z_Param_bUseScale); \
		P_FINISH; \
		*(FTransform*)Z_Param__Result=this->GetTransformAtTime(Z_Param_Time,ESplineCoordinateSpace::Type(Z_Param_CoordinateSpace),Z_Param_bUseConstantVelocity,Z_Param_bUseScale); \
	} \
 \
	DECLARE_FUNCTION(execGetRightVectorAtTime) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Time); \
		P_GET_PROPERTY(UByteProperty,Z_Param_CoordinateSpace); \
		P_GET_UBOOL(Z_Param_bUseConstantVelocity); \
		P_FINISH; \
		*(FVector*)Z_Param__Result=this->GetRightVectorAtTime(Z_Param_Time,ESplineCoordinateSpace::Type(Z_Param_CoordinateSpace),Z_Param_bUseConstantVelocity); \
	} \
 \
	DECLARE_FUNCTION(execGetUpVectorAtTime) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Time); \
		P_GET_PROPERTY(UByteProperty,Z_Param_CoordinateSpace); \
		P_GET_UBOOL(Z_Param_bUseConstantVelocity); \
		P_FINISH; \
		*(FVector*)Z_Param__Result=this->GetUpVectorAtTime(Z_Param_Time,ESplineCoordinateSpace::Type(Z_Param_CoordinateSpace),Z_Param_bUseConstantVelocity); \
	} \
 \
	DECLARE_FUNCTION(execGetWorldRotationAtTime) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Time); \
		P_GET_UBOOL(Z_Param_bUseConstantVelocity); \
		P_FINISH; \
		*(FRotator*)Z_Param__Result=this->GetWorldRotationAtTime(Z_Param_Time,Z_Param_bUseConstantVelocity); \
	} \
 \
	DECLARE_FUNCTION(execGetRotationAtTime) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Time); \
		P_GET_PROPERTY(UByteProperty,Z_Param_CoordinateSpace); \
		P_GET_UBOOL(Z_Param_bUseConstantVelocity); \
		P_FINISH; \
		*(FRotator*)Z_Param__Result=this->GetRotationAtTime(Z_Param_Time,ESplineCoordinateSpace::Type(Z_Param_CoordinateSpace),Z_Param_bUseConstantVelocity); \
	} \
 \
	DECLARE_FUNCTION(execGetQuaternionAtTime) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Time); \
		P_GET_PROPERTY(UByteProperty,Z_Param_CoordinateSpace); \
		P_GET_UBOOL(Z_Param_bUseConstantVelocity); \
		P_FINISH; \
		*(FQuat*)Z_Param__Result=this->GetQuaternionAtTime(Z_Param_Time,ESplineCoordinateSpace::Type(Z_Param_CoordinateSpace),Z_Param_bUseConstantVelocity); \
	} \
 \
	DECLARE_FUNCTION(execGetTangentAtTime) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Time); \
		P_GET_PROPERTY(UByteProperty,Z_Param_CoordinateSpace); \
		P_GET_UBOOL(Z_Param_bUseConstantVelocity); \
		P_FINISH; \
		*(FVector*)Z_Param__Result=this->GetTangentAtTime(Z_Param_Time,ESplineCoordinateSpace::Type(Z_Param_CoordinateSpace),Z_Param_bUseConstantVelocity); \
	} \
 \
	DECLARE_FUNCTION(execGetWorldDirectionAtTime) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Time); \
		P_GET_UBOOL(Z_Param_bUseConstantVelocity); \
		P_FINISH; \
		*(FVector*)Z_Param__Result=this->GetWorldDirectionAtTime(Z_Param_Time,Z_Param_bUseConstantVelocity); \
	} \
 \
	DECLARE_FUNCTION(execGetDirectionAtTime) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Time); \
		P_GET_PROPERTY(UByteProperty,Z_Param_CoordinateSpace); \
		P_GET_UBOOL(Z_Param_bUseConstantVelocity); \
		P_FINISH; \
		*(FVector*)Z_Param__Result=this->GetDirectionAtTime(Z_Param_Time,ESplineCoordinateSpace::Type(Z_Param_CoordinateSpace),Z_Param_bUseConstantVelocity); \
	} \
 \
	DECLARE_FUNCTION(execGetWorldLocationAtTime) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Time); \
		P_GET_UBOOL(Z_Param_bUseConstantVelocity); \
		P_FINISH; \
		*(FVector*)Z_Param__Result=this->GetWorldLocationAtTime(Z_Param_Time,Z_Param_bUseConstantVelocity); \
	} \
 \
	DECLARE_FUNCTION(execGetLocationAtTime) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Time); \
		P_GET_PROPERTY(UByteProperty,Z_Param_CoordinateSpace); \
		P_GET_UBOOL(Z_Param_bUseConstantVelocity); \
		P_FINISH; \
		*(FVector*)Z_Param__Result=this->GetLocationAtTime(Z_Param_Time,ESplineCoordinateSpace::Type(Z_Param_CoordinateSpace),Z_Param_bUseConstantVelocity); \
	} \
 \
	DECLARE_FUNCTION(execGetTransformAtDistanceAlongSpline) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Distance); \
		P_GET_PROPERTY(UByteProperty,Z_Param_CoordinateSpace); \
		P_GET_UBOOL(Z_Param_bUseScale); \
		P_FINISH; \
		*(FTransform*)Z_Param__Result=this->GetTransformAtDistanceAlongSpline(Z_Param_Distance,ESplineCoordinateSpace::Type(Z_Param_CoordinateSpace),Z_Param_bUseScale); \
	} \
 \
	DECLARE_FUNCTION(execGetScaleAtDistanceAlongSpline) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Distance); \
		P_FINISH; \
		*(FVector*)Z_Param__Result=this->GetScaleAtDistanceAlongSpline(Z_Param_Distance); \
	} \
 \
	DECLARE_FUNCTION(execGetRollAtDistanceAlongSpline) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Distance); \
		P_GET_PROPERTY(UByteProperty,Z_Param_CoordinateSpace); \
		P_FINISH; \
		*(float*)Z_Param__Result=this->GetRollAtDistanceAlongSpline(Z_Param_Distance,ESplineCoordinateSpace::Type(Z_Param_CoordinateSpace)); \
	} \
 \
	DECLARE_FUNCTION(execGetRightVectorAtDistanceAlongSpline) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Distance); \
		P_GET_PROPERTY(UByteProperty,Z_Param_CoordinateSpace); \
		P_FINISH; \
		*(FVector*)Z_Param__Result=this->GetRightVectorAtDistanceAlongSpline(Z_Param_Distance,ESplineCoordinateSpace::Type(Z_Param_CoordinateSpace)); \
	} \
 \
	DECLARE_FUNCTION(execGetUpVectorAtDistanceAlongSpline) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Distance); \
		P_GET_PROPERTY(UByteProperty,Z_Param_CoordinateSpace); \
		P_FINISH; \
		*(FVector*)Z_Param__Result=this->GetUpVectorAtDistanceAlongSpline(Z_Param_Distance,ESplineCoordinateSpace::Type(Z_Param_CoordinateSpace)); \
	} \
 \
	DECLARE_FUNCTION(execGetWorldRotationAtDistanceAlongSpline) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Distance); \
		P_FINISH; \
		*(FRotator*)Z_Param__Result=this->GetWorldRotationAtDistanceAlongSpline(Z_Param_Distance); \
	} \
 \
	DECLARE_FUNCTION(execGetRotationAtDistanceAlongSpline) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Distance); \
		P_GET_PROPERTY(UByteProperty,Z_Param_CoordinateSpace); \
		P_FINISH; \
		*(FRotator*)Z_Param__Result=this->GetRotationAtDistanceAlongSpline(Z_Param_Distance,ESplineCoordinateSpace::Type(Z_Param_CoordinateSpace)); \
	} \
 \
	DECLARE_FUNCTION(execGetQuaternionAtDistanceAlongSpline) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Distance); \
		P_GET_PROPERTY(UByteProperty,Z_Param_CoordinateSpace); \
		P_FINISH; \
		*(FQuat*)Z_Param__Result=this->GetQuaternionAtDistanceAlongSpline(Z_Param_Distance,ESplineCoordinateSpace::Type(Z_Param_CoordinateSpace)); \
	} \
 \
	DECLARE_FUNCTION(execGetWorldTangentAtDistanceAlongSpline) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Distance); \
		P_FINISH; \
		*(FVector*)Z_Param__Result=this->GetWorldTangentAtDistanceAlongSpline(Z_Param_Distance); \
	} \
 \
	DECLARE_FUNCTION(execGetTangentAtDistanceAlongSpline) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Distance); \
		P_GET_PROPERTY(UByteProperty,Z_Param_CoordinateSpace); \
		P_FINISH; \
		*(FVector*)Z_Param__Result=this->GetTangentAtDistanceAlongSpline(Z_Param_Distance,ESplineCoordinateSpace::Type(Z_Param_CoordinateSpace)); \
	} \
 \
	DECLARE_FUNCTION(execGetWorldDirectionAtDistanceAlongSpline) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Distance); \
		P_FINISH; \
		*(FVector*)Z_Param__Result=this->GetWorldDirectionAtDistanceAlongSpline(Z_Param_Distance); \
	} \
 \
	DECLARE_FUNCTION(execGetDirectionAtDistanceAlongSpline) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Distance); \
		P_GET_PROPERTY(UByteProperty,Z_Param_CoordinateSpace); \
		P_FINISH; \
		*(FVector*)Z_Param__Result=this->GetDirectionAtDistanceAlongSpline(Z_Param_Distance,ESplineCoordinateSpace::Type(Z_Param_CoordinateSpace)); \
	} \
 \
	DECLARE_FUNCTION(execGetWorldLocationAtDistanceAlongSpline) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Distance); \
		P_FINISH; \
		*(FVector*)Z_Param__Result=this->GetWorldLocationAtDistanceAlongSpline(Z_Param_Distance); \
	} \
 \
	DECLARE_FUNCTION(execGetLocationAtDistanceAlongSpline) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Distance); \
		P_GET_PROPERTY(UByteProperty,Z_Param_CoordinateSpace); \
		P_FINISH; \
		*(FVector*)Z_Param__Result=this->GetLocationAtDistanceAlongSpline(Z_Param_Distance,ESplineCoordinateSpace::Type(Z_Param_CoordinateSpace)); \
	} \
 \
	DECLARE_FUNCTION(execGetInputKeyAtDistanceAlongSpline) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Distance); \
		P_FINISH; \
		*(float*)Z_Param__Result=this->GetInputKeyAtDistanceAlongSpline(Z_Param_Distance); \
	} \
 \
	DECLARE_FUNCTION(execGetDefaultUpVector) \
	{ \
		P_GET_PROPERTY(UByteProperty,Z_Param_CoordinateSpace); \
		P_FINISH; \
		*(FVector*)Z_Param__Result=this->GetDefaultUpVector(ESplineCoordinateSpace::Type(Z_Param_CoordinateSpace)); \
	} \
 \
	DECLARE_FUNCTION(execSetDefaultUpVector) \
	{ \
		P_GET_STRUCT_REF(FVector,Z_Param_Out_UpVector); \
		P_GET_PROPERTY(UByteProperty,Z_Param_CoordinateSpace); \
		P_FINISH; \
		this->SetDefaultUpVector(Z_Param_Out_UpVector,ESplineCoordinateSpace::Type(Z_Param_CoordinateSpace)); \
	} \
 \
	DECLARE_FUNCTION(execGetSplineLength) \
	{ \
		P_FINISH; \
		*(float*)Z_Param__Result=this->GetSplineLength(); \
	} \
 \
	DECLARE_FUNCTION(execGetDistanceAlongSplineAtSplinePoint) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_PointIndex); \
		P_FINISH; \
		*(float*)Z_Param__Result=this->GetDistanceAlongSplineAtSplinePoint(Z_Param_PointIndex); \
	} \
 \
	DECLARE_FUNCTION(execGetLocalLocationAndTangentAtSplinePoint) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_PointIndex); \
		P_GET_STRUCT_REF(FVector,Z_Param_Out_LocalLocation); \
		P_GET_STRUCT_REF(FVector,Z_Param_Out_LocalTangent); \
		P_FINISH; \
		this->GetLocalLocationAndTangentAtSplinePoint(Z_Param_PointIndex,Z_Param_Out_LocalLocation,Z_Param_Out_LocalTangent); \
	} \
 \
	DECLARE_FUNCTION(execGetLocationAndTangentAtSplinePoint) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_PointIndex); \
		P_GET_STRUCT_REF(FVector,Z_Param_Out_Location); \
		P_GET_STRUCT_REF(FVector,Z_Param_Out_Tangent); \
		P_GET_PROPERTY(UByteProperty,Z_Param_CoordinateSpace); \
		P_FINISH; \
		this->GetLocationAndTangentAtSplinePoint(Z_Param_PointIndex,Z_Param_Out_Location,Z_Param_Out_Tangent,ESplineCoordinateSpace::Type(Z_Param_CoordinateSpace)); \
	} \
 \
	DECLARE_FUNCTION(execGetTransformAtSplinePoint) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_PointIndex); \
		P_GET_PROPERTY(UByteProperty,Z_Param_CoordinateSpace); \
		P_GET_UBOOL(Z_Param_bUseScale); \
		P_FINISH; \
		*(FTransform*)Z_Param__Result=this->GetTransformAtSplinePoint(Z_Param_PointIndex,ESplineCoordinateSpace::Type(Z_Param_CoordinateSpace),Z_Param_bUseScale); \
	} \
 \
	DECLARE_FUNCTION(execGetScaleAtSplinePoint) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_PointIndex); \
		P_FINISH; \
		*(FVector*)Z_Param__Result=this->GetScaleAtSplinePoint(Z_Param_PointIndex); \
	} \
 \
	DECLARE_FUNCTION(execGetRollAtSplinePoint) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_PointIndex); \
		P_GET_PROPERTY(UByteProperty,Z_Param_CoordinateSpace); \
		P_FINISH; \
		*(float*)Z_Param__Result=this->GetRollAtSplinePoint(Z_Param_PointIndex,ESplineCoordinateSpace::Type(Z_Param_CoordinateSpace)); \
	} \
 \
	DECLARE_FUNCTION(execGetRightVectorAtSplinePoint) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_PointIndex); \
		P_GET_PROPERTY(UByteProperty,Z_Param_CoordinateSpace); \
		P_FINISH; \
		*(FVector*)Z_Param__Result=this->GetRightVectorAtSplinePoint(Z_Param_PointIndex,ESplineCoordinateSpace::Type(Z_Param_CoordinateSpace)); \
	} \
 \
	DECLARE_FUNCTION(execGetUpVectorAtSplinePoint) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_PointIndex); \
		P_GET_PROPERTY(UByteProperty,Z_Param_CoordinateSpace); \
		P_FINISH; \
		*(FVector*)Z_Param__Result=this->GetUpVectorAtSplinePoint(Z_Param_PointIndex,ESplineCoordinateSpace::Type(Z_Param_CoordinateSpace)); \
	} \
 \
	DECLARE_FUNCTION(execGetRotationAtSplinePoint) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_PointIndex); \
		P_GET_PROPERTY(UByteProperty,Z_Param_CoordinateSpace); \
		P_FINISH; \
		*(FRotator*)Z_Param__Result=this->GetRotationAtSplinePoint(Z_Param_PointIndex,ESplineCoordinateSpace::Type(Z_Param_CoordinateSpace)); \
	} \
 \
	DECLARE_FUNCTION(execGetQuaternionAtSplinePoint) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_PointIndex); \
		P_GET_PROPERTY(UByteProperty,Z_Param_CoordinateSpace); \
		P_FINISH; \
		*(FQuat*)Z_Param__Result=this->GetQuaternionAtSplinePoint(Z_Param_PointIndex,ESplineCoordinateSpace::Type(Z_Param_CoordinateSpace)); \
	} \
 \
	DECLARE_FUNCTION(execGetTangentAtSplinePoint) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_PointIndex); \
		P_GET_PROPERTY(UByteProperty,Z_Param_CoordinateSpace); \
		P_FINISH; \
		*(FVector*)Z_Param__Result=this->GetTangentAtSplinePoint(Z_Param_PointIndex,ESplineCoordinateSpace::Type(Z_Param_CoordinateSpace)); \
	} \
 \
	DECLARE_FUNCTION(execGetDirectionAtSplinePoint) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_PointIndex); \
		P_GET_PROPERTY(UByteProperty,Z_Param_CoordinateSpace); \
		P_FINISH; \
		*(FVector*)Z_Param__Result=this->GetDirectionAtSplinePoint(Z_Param_PointIndex,ESplineCoordinateSpace::Type(Z_Param_CoordinateSpace)); \
	} \
 \
	DECLARE_FUNCTION(execGetWorldLocationAtSplinePoint) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_PointIndex); \
		P_FINISH; \
		*(FVector*)Z_Param__Result=this->GetWorldLocationAtSplinePoint(Z_Param_PointIndex); \
	} \
 \
	DECLARE_FUNCTION(execGetLocationAtSplinePoint) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_PointIndex); \
		P_GET_PROPERTY(UByteProperty,Z_Param_CoordinateSpace); \
		P_FINISH; \
		*(FVector*)Z_Param__Result=this->GetLocationAtSplinePoint(Z_Param_PointIndex,ESplineCoordinateSpace::Type(Z_Param_CoordinateSpace)); \
	} \
 \
	DECLARE_FUNCTION(execGetNumberOfSplinePoints) \
	{ \
		P_FINISH; \
		*(int32*)Z_Param__Result=this->GetNumberOfSplinePoints(); \
	} \
 \
	DECLARE_FUNCTION(execSetSplinePointType) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_PointIndex); \
		P_GET_PROPERTY(UByteProperty,Z_Param_Type); \
		P_FINISH; \
		this->SetSplinePointType(Z_Param_PointIndex,ESplinePointType::Type(Z_Param_Type)); \
	} \
 \
	DECLARE_FUNCTION(execGetSplinePointType) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_PointIndex); \
		P_FINISH; \
		*(TEnumAsByte<ESplinePointType::Type>*)Z_Param__Result=this->GetSplinePointType(Z_Param_PointIndex); \
	} \
 \
	DECLARE_FUNCTION(execSetTangentAtSplinePoint) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_PointIndex); \
		P_GET_STRUCT_REF(FVector,Z_Param_Out_InTangent); \
		P_GET_PROPERTY(UByteProperty,Z_Param_CoordinateSpace); \
		P_FINISH; \
		this->SetTangentAtSplinePoint(Z_Param_PointIndex,Z_Param_Out_InTangent,ESplineCoordinateSpace::Type(Z_Param_CoordinateSpace)); \
	} \
 \
	DECLARE_FUNCTION(execSetWorldLocationAtSplinePoint) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_PointIndex); \
		P_GET_STRUCT_REF(FVector,Z_Param_Out_InLocation); \
		P_FINISH; \
		this->SetWorldLocationAtSplinePoint(Z_Param_PointIndex,Z_Param_Out_InLocation); \
	} \
 \
	DECLARE_FUNCTION(execSetLocationAtSplinePoint) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_PointIndex); \
		P_GET_STRUCT_REF(FVector,Z_Param_Out_InLocation); \
		P_GET_PROPERTY(UByteProperty,Z_Param_CoordinateSpace); \
		P_FINISH; \
		this->SetLocationAtSplinePoint(Z_Param_PointIndex,Z_Param_Out_InLocation,ESplineCoordinateSpace::Type(Z_Param_CoordinateSpace)); \
	} \
 \
	DECLARE_FUNCTION(execSetSplineLocalPoints) \
	{ \
		P_GET_TARRAY_REF(FVector,Z_Param_Out_Points); \
		P_FINISH; \
		this->SetSplineLocalPoints(Z_Param_Out_Points); \
	} \
 \
	DECLARE_FUNCTION(execSetSplineWorldPoints) \
	{ \
		P_GET_TARRAY_REF(FVector,Z_Param_Out_Points); \
		P_FINISH; \
		this->SetSplineWorldPoints(Z_Param_Out_Points); \
	} \
 \
	DECLARE_FUNCTION(execSetSplinePoints) \
	{ \
		P_GET_TARRAY_REF(FVector,Z_Param_Out_Points); \
		P_GET_PROPERTY(UByteProperty,Z_Param_CoordinateSpace); \
		P_FINISH; \
		this->SetSplinePoints(Z_Param_Out_Points,ESplineCoordinateSpace::Type(Z_Param_CoordinateSpace)); \
	} \
 \
	DECLARE_FUNCTION(execAddSplineLocalPoint) \
	{ \
		P_GET_STRUCT_REF(FVector,Z_Param_Out_Position); \
		P_FINISH; \
		this->AddSplineLocalPoint(Z_Param_Out_Position); \
	} \
 \
	DECLARE_FUNCTION(execAddSplineWorldPoint) \
	{ \
		P_GET_STRUCT_REF(FVector,Z_Param_Out_Position); \
		P_FINISH; \
		this->AddSplineWorldPoint(Z_Param_Out_Position); \
	} \
 \
	DECLARE_FUNCTION(execAddSplinePoint) \
	{ \
		P_GET_STRUCT_REF(FVector,Z_Param_Out_Position); \
		P_GET_PROPERTY(UByteProperty,Z_Param_CoordinateSpace); \
		P_FINISH; \
		this->AddSplinePoint(Z_Param_Out_Position,ESplineCoordinateSpace::Type(Z_Param_CoordinateSpace)); \
	} \
 \
	DECLARE_FUNCTION(execClearSplinePoints) \
	{ \
		P_FINISH; \
		this->ClearSplinePoints(); \
	} \
 \
	DECLARE_FUNCTION(execIsClosedLoop) \
	{ \
		P_FINISH; \
		*(bool*)Z_Param__Result=this->IsClosedLoop(); \
	} \
 \
	DECLARE_FUNCTION(execSetClosedLoop) \
	{ \
		P_GET_UBOOL(Z_Param_bInClosedLoop); \
		P_FINISH; \
		this->SetClosedLoop(Z_Param_bInClosedLoop); \
	} \
 \
	DECLARE_FUNCTION(execSetSelectedSplineSegmentColor) \
	{ \
		P_GET_STRUCT_REF(FLinearColor,Z_Param_Out_SegmentColor); \
		P_FINISH; \
		this->SetSelectedSplineSegmentColor(Z_Param_Out_SegmentColor); \
	} \
 \
	DECLARE_FUNCTION(execSetUnselectedSplineSegmentColor) \
	{ \
		P_GET_STRUCT_REF(FLinearColor,Z_Param_Out_SegmentColor); \
		P_FINISH; \
		this->SetUnselectedSplineSegmentColor(Z_Param_Out_SegmentColor); \
	}


#define Engine_Source_Runtime_Engine_Classes_Components_SplineComponent_h_42_RPC_WRAPPERS_NO_PURE_DECLS \
 \
	DECLARE_FUNCTION(execGetScaleAtTime) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Time); \
		P_GET_UBOOL(Z_Param_bUseConstantVelocity); \
		P_FINISH; \
		*(FVector*)Z_Param__Result=this->GetScaleAtTime(Z_Param_Time,Z_Param_bUseConstantVelocity); \
	} \
 \
	DECLARE_FUNCTION(execGetRollAtTime) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Time); \
		P_GET_PROPERTY(UByteProperty,Z_Param_CoordinateSpace); \
		P_GET_UBOOL(Z_Param_bUseConstantVelocity); \
		P_FINISH; \
		*(float*)Z_Param__Result=this->GetRollAtTime(Z_Param_Time,ESplineCoordinateSpace::Type(Z_Param_CoordinateSpace),Z_Param_bUseConstantVelocity); \
	} \
 \
	DECLARE_FUNCTION(execGetTransformAtTime) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Time); \
		P_GET_PROPERTY(UByteProperty,Z_Param_CoordinateSpace); \
		P_GET_UBOOL(Z_Param_bUseConstantVelocity); \
		P_GET_UBOOL(Z_Param_bUseScale); \
		P_FINISH; \
		*(FTransform*)Z_Param__Result=this->GetTransformAtTime(Z_Param_Time,ESplineCoordinateSpace::Type(Z_Param_CoordinateSpace),Z_Param_bUseConstantVelocity,Z_Param_bUseScale); \
	} \
 \
	DECLARE_FUNCTION(execGetRightVectorAtTime) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Time); \
		P_GET_PROPERTY(UByteProperty,Z_Param_CoordinateSpace); \
		P_GET_UBOOL(Z_Param_bUseConstantVelocity); \
		P_FINISH; \
		*(FVector*)Z_Param__Result=this->GetRightVectorAtTime(Z_Param_Time,ESplineCoordinateSpace::Type(Z_Param_CoordinateSpace),Z_Param_bUseConstantVelocity); \
	} \
 \
	DECLARE_FUNCTION(execGetUpVectorAtTime) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Time); \
		P_GET_PROPERTY(UByteProperty,Z_Param_CoordinateSpace); \
		P_GET_UBOOL(Z_Param_bUseConstantVelocity); \
		P_FINISH; \
		*(FVector*)Z_Param__Result=this->GetUpVectorAtTime(Z_Param_Time,ESplineCoordinateSpace::Type(Z_Param_CoordinateSpace),Z_Param_bUseConstantVelocity); \
	} \
 \
	DECLARE_FUNCTION(execGetWorldRotationAtTime) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Time); \
		P_GET_UBOOL(Z_Param_bUseConstantVelocity); \
		P_FINISH; \
		*(FRotator*)Z_Param__Result=this->GetWorldRotationAtTime(Z_Param_Time,Z_Param_bUseConstantVelocity); \
	} \
 \
	DECLARE_FUNCTION(execGetRotationAtTime) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Time); \
		P_GET_PROPERTY(UByteProperty,Z_Param_CoordinateSpace); \
		P_GET_UBOOL(Z_Param_bUseConstantVelocity); \
		P_FINISH; \
		*(FRotator*)Z_Param__Result=this->GetRotationAtTime(Z_Param_Time,ESplineCoordinateSpace::Type(Z_Param_CoordinateSpace),Z_Param_bUseConstantVelocity); \
	} \
 \
	DECLARE_FUNCTION(execGetQuaternionAtTime) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Time); \
		P_GET_PROPERTY(UByteProperty,Z_Param_CoordinateSpace); \
		P_GET_UBOOL(Z_Param_bUseConstantVelocity); \
		P_FINISH; \
		*(FQuat*)Z_Param__Result=this->GetQuaternionAtTime(Z_Param_Time,ESplineCoordinateSpace::Type(Z_Param_CoordinateSpace),Z_Param_bUseConstantVelocity); \
	} \
 \
	DECLARE_FUNCTION(execGetTangentAtTime) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Time); \
		P_GET_PROPERTY(UByteProperty,Z_Param_CoordinateSpace); \
		P_GET_UBOOL(Z_Param_bUseConstantVelocity); \
		P_FINISH; \
		*(FVector*)Z_Param__Result=this->GetTangentAtTime(Z_Param_Time,ESplineCoordinateSpace::Type(Z_Param_CoordinateSpace),Z_Param_bUseConstantVelocity); \
	} \
 \
	DECLARE_FUNCTION(execGetWorldDirectionAtTime) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Time); \
		P_GET_UBOOL(Z_Param_bUseConstantVelocity); \
		P_FINISH; \
		*(FVector*)Z_Param__Result=this->GetWorldDirectionAtTime(Z_Param_Time,Z_Param_bUseConstantVelocity); \
	} \
 \
	DECLARE_FUNCTION(execGetDirectionAtTime) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Time); \
		P_GET_PROPERTY(UByteProperty,Z_Param_CoordinateSpace); \
		P_GET_UBOOL(Z_Param_bUseConstantVelocity); \
		P_FINISH; \
		*(FVector*)Z_Param__Result=this->GetDirectionAtTime(Z_Param_Time,ESplineCoordinateSpace::Type(Z_Param_CoordinateSpace),Z_Param_bUseConstantVelocity); \
	} \
 \
	DECLARE_FUNCTION(execGetWorldLocationAtTime) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Time); \
		P_GET_UBOOL(Z_Param_bUseConstantVelocity); \
		P_FINISH; \
		*(FVector*)Z_Param__Result=this->GetWorldLocationAtTime(Z_Param_Time,Z_Param_bUseConstantVelocity); \
	} \
 \
	DECLARE_FUNCTION(execGetLocationAtTime) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Time); \
		P_GET_PROPERTY(UByteProperty,Z_Param_CoordinateSpace); \
		P_GET_UBOOL(Z_Param_bUseConstantVelocity); \
		P_FINISH; \
		*(FVector*)Z_Param__Result=this->GetLocationAtTime(Z_Param_Time,ESplineCoordinateSpace::Type(Z_Param_CoordinateSpace),Z_Param_bUseConstantVelocity); \
	} \
 \
	DECLARE_FUNCTION(execGetTransformAtDistanceAlongSpline) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Distance); \
		P_GET_PROPERTY(UByteProperty,Z_Param_CoordinateSpace); \
		P_GET_UBOOL(Z_Param_bUseScale); \
		P_FINISH; \
		*(FTransform*)Z_Param__Result=this->GetTransformAtDistanceAlongSpline(Z_Param_Distance,ESplineCoordinateSpace::Type(Z_Param_CoordinateSpace),Z_Param_bUseScale); \
	} \
 \
	DECLARE_FUNCTION(execGetScaleAtDistanceAlongSpline) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Distance); \
		P_FINISH; \
		*(FVector*)Z_Param__Result=this->GetScaleAtDistanceAlongSpline(Z_Param_Distance); \
	} \
 \
	DECLARE_FUNCTION(execGetRollAtDistanceAlongSpline) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Distance); \
		P_GET_PROPERTY(UByteProperty,Z_Param_CoordinateSpace); \
		P_FINISH; \
		*(float*)Z_Param__Result=this->GetRollAtDistanceAlongSpline(Z_Param_Distance,ESplineCoordinateSpace::Type(Z_Param_CoordinateSpace)); \
	} \
 \
	DECLARE_FUNCTION(execGetRightVectorAtDistanceAlongSpline) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Distance); \
		P_GET_PROPERTY(UByteProperty,Z_Param_CoordinateSpace); \
		P_FINISH; \
		*(FVector*)Z_Param__Result=this->GetRightVectorAtDistanceAlongSpline(Z_Param_Distance,ESplineCoordinateSpace::Type(Z_Param_CoordinateSpace)); \
	} \
 \
	DECLARE_FUNCTION(execGetUpVectorAtDistanceAlongSpline) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Distance); \
		P_GET_PROPERTY(UByteProperty,Z_Param_CoordinateSpace); \
		P_FINISH; \
		*(FVector*)Z_Param__Result=this->GetUpVectorAtDistanceAlongSpline(Z_Param_Distance,ESplineCoordinateSpace::Type(Z_Param_CoordinateSpace)); \
	} \
 \
	DECLARE_FUNCTION(execGetWorldRotationAtDistanceAlongSpline) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Distance); \
		P_FINISH; \
		*(FRotator*)Z_Param__Result=this->GetWorldRotationAtDistanceAlongSpline(Z_Param_Distance); \
	} \
 \
	DECLARE_FUNCTION(execGetRotationAtDistanceAlongSpline) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Distance); \
		P_GET_PROPERTY(UByteProperty,Z_Param_CoordinateSpace); \
		P_FINISH; \
		*(FRotator*)Z_Param__Result=this->GetRotationAtDistanceAlongSpline(Z_Param_Distance,ESplineCoordinateSpace::Type(Z_Param_CoordinateSpace)); \
	} \
 \
	DECLARE_FUNCTION(execGetQuaternionAtDistanceAlongSpline) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Distance); \
		P_GET_PROPERTY(UByteProperty,Z_Param_CoordinateSpace); \
		P_FINISH; \
		*(FQuat*)Z_Param__Result=this->GetQuaternionAtDistanceAlongSpline(Z_Param_Distance,ESplineCoordinateSpace::Type(Z_Param_CoordinateSpace)); \
	} \
 \
	DECLARE_FUNCTION(execGetWorldTangentAtDistanceAlongSpline) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Distance); \
		P_FINISH; \
		*(FVector*)Z_Param__Result=this->GetWorldTangentAtDistanceAlongSpline(Z_Param_Distance); \
	} \
 \
	DECLARE_FUNCTION(execGetTangentAtDistanceAlongSpline) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Distance); \
		P_GET_PROPERTY(UByteProperty,Z_Param_CoordinateSpace); \
		P_FINISH; \
		*(FVector*)Z_Param__Result=this->GetTangentAtDistanceAlongSpline(Z_Param_Distance,ESplineCoordinateSpace::Type(Z_Param_CoordinateSpace)); \
	} \
 \
	DECLARE_FUNCTION(execGetWorldDirectionAtDistanceAlongSpline) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Distance); \
		P_FINISH; \
		*(FVector*)Z_Param__Result=this->GetWorldDirectionAtDistanceAlongSpline(Z_Param_Distance); \
	} \
 \
	DECLARE_FUNCTION(execGetDirectionAtDistanceAlongSpline) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Distance); \
		P_GET_PROPERTY(UByteProperty,Z_Param_CoordinateSpace); \
		P_FINISH; \
		*(FVector*)Z_Param__Result=this->GetDirectionAtDistanceAlongSpline(Z_Param_Distance,ESplineCoordinateSpace::Type(Z_Param_CoordinateSpace)); \
	} \
 \
	DECLARE_FUNCTION(execGetWorldLocationAtDistanceAlongSpline) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Distance); \
		P_FINISH; \
		*(FVector*)Z_Param__Result=this->GetWorldLocationAtDistanceAlongSpline(Z_Param_Distance); \
	} \
 \
	DECLARE_FUNCTION(execGetLocationAtDistanceAlongSpline) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Distance); \
		P_GET_PROPERTY(UByteProperty,Z_Param_CoordinateSpace); \
		P_FINISH; \
		*(FVector*)Z_Param__Result=this->GetLocationAtDistanceAlongSpline(Z_Param_Distance,ESplineCoordinateSpace::Type(Z_Param_CoordinateSpace)); \
	} \
 \
	DECLARE_FUNCTION(execGetInputKeyAtDistanceAlongSpline) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Distance); \
		P_FINISH; \
		*(float*)Z_Param__Result=this->GetInputKeyAtDistanceAlongSpline(Z_Param_Distance); \
	} \
 \
	DECLARE_FUNCTION(execGetDefaultUpVector) \
	{ \
		P_GET_PROPERTY(UByteProperty,Z_Param_CoordinateSpace); \
		P_FINISH; \
		*(FVector*)Z_Param__Result=this->GetDefaultUpVector(ESplineCoordinateSpace::Type(Z_Param_CoordinateSpace)); \
	} \
 \
	DECLARE_FUNCTION(execSetDefaultUpVector) \
	{ \
		P_GET_STRUCT_REF(FVector,Z_Param_Out_UpVector); \
		P_GET_PROPERTY(UByteProperty,Z_Param_CoordinateSpace); \
		P_FINISH; \
		this->SetDefaultUpVector(Z_Param_Out_UpVector,ESplineCoordinateSpace::Type(Z_Param_CoordinateSpace)); \
	} \
 \
	DECLARE_FUNCTION(execGetSplineLength) \
	{ \
		P_FINISH; \
		*(float*)Z_Param__Result=this->GetSplineLength(); \
	} \
 \
	DECLARE_FUNCTION(execGetDistanceAlongSplineAtSplinePoint) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_PointIndex); \
		P_FINISH; \
		*(float*)Z_Param__Result=this->GetDistanceAlongSplineAtSplinePoint(Z_Param_PointIndex); \
	} \
 \
	DECLARE_FUNCTION(execGetLocalLocationAndTangentAtSplinePoint) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_PointIndex); \
		P_GET_STRUCT_REF(FVector,Z_Param_Out_LocalLocation); \
		P_GET_STRUCT_REF(FVector,Z_Param_Out_LocalTangent); \
		P_FINISH; \
		this->GetLocalLocationAndTangentAtSplinePoint(Z_Param_PointIndex,Z_Param_Out_LocalLocation,Z_Param_Out_LocalTangent); \
	} \
 \
	DECLARE_FUNCTION(execGetLocationAndTangentAtSplinePoint) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_PointIndex); \
		P_GET_STRUCT_REF(FVector,Z_Param_Out_Location); \
		P_GET_STRUCT_REF(FVector,Z_Param_Out_Tangent); \
		P_GET_PROPERTY(UByteProperty,Z_Param_CoordinateSpace); \
		P_FINISH; \
		this->GetLocationAndTangentAtSplinePoint(Z_Param_PointIndex,Z_Param_Out_Location,Z_Param_Out_Tangent,ESplineCoordinateSpace::Type(Z_Param_CoordinateSpace)); \
	} \
 \
	DECLARE_FUNCTION(execGetTransformAtSplinePoint) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_PointIndex); \
		P_GET_PROPERTY(UByteProperty,Z_Param_CoordinateSpace); \
		P_GET_UBOOL(Z_Param_bUseScale); \
		P_FINISH; \
		*(FTransform*)Z_Param__Result=this->GetTransformAtSplinePoint(Z_Param_PointIndex,ESplineCoordinateSpace::Type(Z_Param_CoordinateSpace),Z_Param_bUseScale); \
	} \
 \
	DECLARE_FUNCTION(execGetScaleAtSplinePoint) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_PointIndex); \
		P_FINISH; \
		*(FVector*)Z_Param__Result=this->GetScaleAtSplinePoint(Z_Param_PointIndex); \
	} \
 \
	DECLARE_FUNCTION(execGetRollAtSplinePoint) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_PointIndex); \
		P_GET_PROPERTY(UByteProperty,Z_Param_CoordinateSpace); \
		P_FINISH; \
		*(float*)Z_Param__Result=this->GetRollAtSplinePoint(Z_Param_PointIndex,ESplineCoordinateSpace::Type(Z_Param_CoordinateSpace)); \
	} \
 \
	DECLARE_FUNCTION(execGetRightVectorAtSplinePoint) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_PointIndex); \
		P_GET_PROPERTY(UByteProperty,Z_Param_CoordinateSpace); \
		P_FINISH; \
		*(FVector*)Z_Param__Result=this->GetRightVectorAtSplinePoint(Z_Param_PointIndex,ESplineCoordinateSpace::Type(Z_Param_CoordinateSpace)); \
	} \
 \
	DECLARE_FUNCTION(execGetUpVectorAtSplinePoint) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_PointIndex); \
		P_GET_PROPERTY(UByteProperty,Z_Param_CoordinateSpace); \
		P_FINISH; \
		*(FVector*)Z_Param__Result=this->GetUpVectorAtSplinePoint(Z_Param_PointIndex,ESplineCoordinateSpace::Type(Z_Param_CoordinateSpace)); \
	} \
 \
	DECLARE_FUNCTION(execGetRotationAtSplinePoint) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_PointIndex); \
		P_GET_PROPERTY(UByteProperty,Z_Param_CoordinateSpace); \
		P_FINISH; \
		*(FRotator*)Z_Param__Result=this->GetRotationAtSplinePoint(Z_Param_PointIndex,ESplineCoordinateSpace::Type(Z_Param_CoordinateSpace)); \
	} \
 \
	DECLARE_FUNCTION(execGetQuaternionAtSplinePoint) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_PointIndex); \
		P_GET_PROPERTY(UByteProperty,Z_Param_CoordinateSpace); \
		P_FINISH; \
		*(FQuat*)Z_Param__Result=this->GetQuaternionAtSplinePoint(Z_Param_PointIndex,ESplineCoordinateSpace::Type(Z_Param_CoordinateSpace)); \
	} \
 \
	DECLARE_FUNCTION(execGetTangentAtSplinePoint) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_PointIndex); \
		P_GET_PROPERTY(UByteProperty,Z_Param_CoordinateSpace); \
		P_FINISH; \
		*(FVector*)Z_Param__Result=this->GetTangentAtSplinePoint(Z_Param_PointIndex,ESplineCoordinateSpace::Type(Z_Param_CoordinateSpace)); \
	} \
 \
	DECLARE_FUNCTION(execGetDirectionAtSplinePoint) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_PointIndex); \
		P_GET_PROPERTY(UByteProperty,Z_Param_CoordinateSpace); \
		P_FINISH; \
		*(FVector*)Z_Param__Result=this->GetDirectionAtSplinePoint(Z_Param_PointIndex,ESplineCoordinateSpace::Type(Z_Param_CoordinateSpace)); \
	} \
 \
	DECLARE_FUNCTION(execGetWorldLocationAtSplinePoint) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_PointIndex); \
		P_FINISH; \
		*(FVector*)Z_Param__Result=this->GetWorldLocationAtSplinePoint(Z_Param_PointIndex); \
	} \
 \
	DECLARE_FUNCTION(execGetLocationAtSplinePoint) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_PointIndex); \
		P_GET_PROPERTY(UByteProperty,Z_Param_CoordinateSpace); \
		P_FINISH; \
		*(FVector*)Z_Param__Result=this->GetLocationAtSplinePoint(Z_Param_PointIndex,ESplineCoordinateSpace::Type(Z_Param_CoordinateSpace)); \
	} \
 \
	DECLARE_FUNCTION(execGetNumberOfSplinePoints) \
	{ \
		P_FINISH; \
		*(int32*)Z_Param__Result=this->GetNumberOfSplinePoints(); \
	} \
 \
	DECLARE_FUNCTION(execSetSplinePointType) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_PointIndex); \
		P_GET_PROPERTY(UByteProperty,Z_Param_Type); \
		P_FINISH; \
		this->SetSplinePointType(Z_Param_PointIndex,ESplinePointType::Type(Z_Param_Type)); \
	} \
 \
	DECLARE_FUNCTION(execGetSplinePointType) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_PointIndex); \
		P_FINISH; \
		*(TEnumAsByte<ESplinePointType::Type>*)Z_Param__Result=this->GetSplinePointType(Z_Param_PointIndex); \
	} \
 \
	DECLARE_FUNCTION(execSetTangentAtSplinePoint) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_PointIndex); \
		P_GET_STRUCT_REF(FVector,Z_Param_Out_InTangent); \
		P_GET_PROPERTY(UByteProperty,Z_Param_CoordinateSpace); \
		P_FINISH; \
		this->SetTangentAtSplinePoint(Z_Param_PointIndex,Z_Param_Out_InTangent,ESplineCoordinateSpace::Type(Z_Param_CoordinateSpace)); \
	} \
 \
	DECLARE_FUNCTION(execSetWorldLocationAtSplinePoint) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_PointIndex); \
		P_GET_STRUCT_REF(FVector,Z_Param_Out_InLocation); \
		P_FINISH; \
		this->SetWorldLocationAtSplinePoint(Z_Param_PointIndex,Z_Param_Out_InLocation); \
	} \
 \
	DECLARE_FUNCTION(execSetLocationAtSplinePoint) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_PointIndex); \
		P_GET_STRUCT_REF(FVector,Z_Param_Out_InLocation); \
		P_GET_PROPERTY(UByteProperty,Z_Param_CoordinateSpace); \
		P_FINISH; \
		this->SetLocationAtSplinePoint(Z_Param_PointIndex,Z_Param_Out_InLocation,ESplineCoordinateSpace::Type(Z_Param_CoordinateSpace)); \
	} \
 \
	DECLARE_FUNCTION(execSetSplineLocalPoints) \
	{ \
		P_GET_TARRAY_REF(FVector,Z_Param_Out_Points); \
		P_FINISH; \
		this->SetSplineLocalPoints(Z_Param_Out_Points); \
	} \
 \
	DECLARE_FUNCTION(execSetSplineWorldPoints) \
	{ \
		P_GET_TARRAY_REF(FVector,Z_Param_Out_Points); \
		P_FINISH; \
		this->SetSplineWorldPoints(Z_Param_Out_Points); \
	} \
 \
	DECLARE_FUNCTION(execSetSplinePoints) \
	{ \
		P_GET_TARRAY_REF(FVector,Z_Param_Out_Points); \
		P_GET_PROPERTY(UByteProperty,Z_Param_CoordinateSpace); \
		P_FINISH; \
		this->SetSplinePoints(Z_Param_Out_Points,ESplineCoordinateSpace::Type(Z_Param_CoordinateSpace)); \
	} \
 \
	DECLARE_FUNCTION(execAddSplineLocalPoint) \
	{ \
		P_GET_STRUCT_REF(FVector,Z_Param_Out_Position); \
		P_FINISH; \
		this->AddSplineLocalPoint(Z_Param_Out_Position); \
	} \
 \
	DECLARE_FUNCTION(execAddSplineWorldPoint) \
	{ \
		P_GET_STRUCT_REF(FVector,Z_Param_Out_Position); \
		P_FINISH; \
		this->AddSplineWorldPoint(Z_Param_Out_Position); \
	} \
 \
	DECLARE_FUNCTION(execAddSplinePoint) \
	{ \
		P_GET_STRUCT_REF(FVector,Z_Param_Out_Position); \
		P_GET_PROPERTY(UByteProperty,Z_Param_CoordinateSpace); \
		P_FINISH; \
		this->AddSplinePoint(Z_Param_Out_Position,ESplineCoordinateSpace::Type(Z_Param_CoordinateSpace)); \
	} \
 \
	DECLARE_FUNCTION(execClearSplinePoints) \
	{ \
		P_FINISH; \
		this->ClearSplinePoints(); \
	} \
 \
	DECLARE_FUNCTION(execIsClosedLoop) \
	{ \
		P_FINISH; \
		*(bool*)Z_Param__Result=this->IsClosedLoop(); \
	} \
 \
	DECLARE_FUNCTION(execSetClosedLoop) \
	{ \
		P_GET_UBOOL(Z_Param_bInClosedLoop); \
		P_FINISH; \
		this->SetClosedLoop(Z_Param_bInClosedLoop); \
	} \
 \
	DECLARE_FUNCTION(execSetSelectedSplineSegmentColor) \
	{ \
		P_GET_STRUCT_REF(FLinearColor,Z_Param_Out_SegmentColor); \
		P_FINISH; \
		this->SetSelectedSplineSegmentColor(Z_Param_Out_SegmentColor); \
	} \
 \
	DECLARE_FUNCTION(execSetUnselectedSplineSegmentColor) \
	{ \
		P_GET_STRUCT_REF(FLinearColor,Z_Param_Out_SegmentColor); \
		P_FINISH; \
		this->SetUnselectedSplineSegmentColor(Z_Param_Out_SegmentColor); \
	}


#define Engine_Source_Runtime_Engine_Classes_Components_SplineComponent_h_42_INCLASS_NO_PURE_DECLS \
	private: \
	static void StaticRegisterNativesUSplineComponent(); \
	friend ENGINE_API class UClass* Z_Construct_UClass_USplineComponent(); \
	public: \
	DECLARE_CLASS(USplineComponent, UPrimitiveComponent, COMPILED_IN_FLAGS(0), 0, Engine, NO_API) \
	DECLARE_SERIALIZER(USplineComponent) \
	/** Indicates whether the class is compiled into the engine */    enum {IsIntrinsic=COMPILED_IN_INTRINSIC}; \
	virtual UObject* _getUObject() const override { return const_cast<USplineComponent*>(this); }


#define Engine_Source_Runtime_Engine_Classes_Components_SplineComponent_h_42_INCLASS \
	private: \
	static void StaticRegisterNativesUSplineComponent(); \
	friend ENGINE_API class UClass* Z_Construct_UClass_USplineComponent(); \
	public: \
	DECLARE_CLASS(USplineComponent, UPrimitiveComponent, COMPILED_IN_FLAGS(0), 0, Engine, NO_API) \
	DECLARE_SERIALIZER(USplineComponent) \
	/** Indicates whether the class is compiled into the engine */    enum {IsIntrinsic=COMPILED_IN_INTRINSIC}; \
	virtual UObject* _getUObject() const override { return const_cast<USplineComponent*>(this); }


#define Engine_Source_Runtime_Engine_Classes_Components_SplineComponent_h_42_STANDARD_CONSTRUCTORS \
	/** Standard constructor, called after all reflected properties have been initialized */ \
	NO_API USplineComponent(const FObjectInitializer& ObjectInitializer = FObjectInitializer::Get()); \
	DEFINE_DEFAULT_OBJECT_INITIALIZER_CONSTRUCTOR_CALL(USplineComponent) \
	DECLARE_VTABLE_PTR_HELPER_CTOR(NO_API, USplineComponent); \
DEFINE_VTABLE_PTR_HELPER_CTOR_CALLER(USplineComponent); \
private: \
	/** Private copy-constructor, should never be used */ \
	NO_API USplineComponent(const USplineComponent& InCopy); \
public:


#define Engine_Source_Runtime_Engine_Classes_Components_SplineComponent_h_42_ENHANCED_CONSTRUCTORS \
	/** Standard constructor, called after all reflected properties have been initialized */ \
	NO_API USplineComponent(const FObjectInitializer& ObjectInitializer = FObjectInitializer::Get()) : Super(ObjectInitializer) { }; \
private: \
	/** Private copy-constructor, should never be used */ \
	NO_API USplineComponent(const USplineComponent& InCopy); \
public: \
	DECLARE_VTABLE_PTR_HELPER_CTOR(NO_API, USplineComponent); \
DEFINE_VTABLE_PTR_HELPER_CTOR_CALLER(USplineComponent); \
	DEFINE_DEFAULT_OBJECT_INITIALIZER_CONSTRUCTOR_CALL(USplineComponent)


#define Engine_Source_Runtime_Engine_Classes_Components_SplineComponent_h_39_PROLOG
#define Engine_Source_Runtime_Engine_Classes_Components_SplineComponent_h_42_GENERATED_BODY_LEGACY \
PRAGMA_DISABLE_DEPRECATION_WARNINGS \
public: \
	Engine_Source_Runtime_Engine_Classes_Components_SplineComponent_h_42_RPC_WRAPPERS \
	Engine_Source_Runtime_Engine_Classes_Components_SplineComponent_h_42_INCLASS \
	Engine_Source_Runtime_Engine_Classes_Components_SplineComponent_h_42_STANDARD_CONSTRUCTORS \
public: \
PRAGMA_ENABLE_DEPRECATION_WARNINGS


#define Engine_Source_Runtime_Engine_Classes_Components_SplineComponent_h_42_GENERATED_BODY \
PRAGMA_DISABLE_DEPRECATION_WARNINGS \
public: \
	Engine_Source_Runtime_Engine_Classes_Components_SplineComponent_h_42_RPC_WRAPPERS_NO_PURE_DECLS \
	Engine_Source_Runtime_Engine_Classes_Components_SplineComponent_h_42_INCLASS_NO_PURE_DECLS \
	Engine_Source_Runtime_Engine_Classes_Components_SplineComponent_h_42_ENHANCED_CONSTRUCTORS \
static_assert(false, "Unknown access specifier for GENERATED_BODY() macro in class SplineComponent."); \
PRAGMA_ENABLE_DEPRECATION_WARNINGS


#undef CURRENT_FILE_ID
#define CURRENT_FILE_ID Engine_Source_Runtime_Engine_Classes_Components_SplineComponent_h


#define FOREACH_ENUM_ESPLINECOORDINATESPACE(op) \
	op(ESplineCoordinateSpace::Local) \
	op(ESplineCoordinateSpace::World) 
#define FOREACH_ENUM_ESPLINEPOINTTYPE(op) \
	op(ESplinePointType::Linear) \
	op(ESplinePointType::Curve) \
	op(ESplinePointType::Constant) \
	op(ESplinePointType::CurveClamped) \
	op(ESplinePointType::CurveCustomTangent) 
PRAGMA_ENABLE_DEPRECATION_WARNINGS
