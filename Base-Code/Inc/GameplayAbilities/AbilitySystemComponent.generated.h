// Copyright 1998-2015 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	C++ class header boilerplate exported from UnrealHeaderTool.
	This is automatically generated by the tools.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "ObjectBase.h"

PRAGMA_DISABLE_DEPRECATION_WARNINGS
struct FGameplayAbilitySpecHandle;
struct FPredictionKey;
struct FGameplayAbilityTargetDataHandle;
struct FGameplayTag;
class UAnimMontage;
struct FGameplayEventData;
struct FGameplayAbilityActivationInfo;
class UGameplayAbility;
struct FGameplayTagContainer;
struct FGameplayEffectSpecForRPC;
struct FGameplayEffectContextHandle;
struct FGameplayCueParameters;
class UGameplayEffect;
struct FActiveGameplayEffectHandle;
class UAbilitySystemComponent;
struct FGameplayAttribute;
struct FGameplayEffectSpecHandle;
class UAttributeSet;
class UDataTable;
#ifdef GAMEPLAYABILITIES_AbilitySystemComponent_generated_h
#error "AbilitySystemComponent.generated.h already included, missing '#pragma once' in AbilitySystemComponent.h"
#endif
#define GAMEPLAYABILITIES_AbilitySystemComponent_generated_h

#define Engine_Source_Runtime_GameplayAbilities_Public_AbilitySystemComponent_h_65_DELEGATE \
static inline void FAbilityConfirmOrCancel_DelegateWrapper(const FMulticastScriptDelegate& AbilityConfirmOrCancel) \
{ \
	AbilityConfirmOrCancel.ProcessMulticastDelegate<UObject>(NULL); \
}


#define Engine_Source_Runtime_GameplayAbilities_Public_AbilitySystemComponent_h_62_DELEGATE \
struct AbilitySystemComponent_eventAbilityAbilityKey_Parms \
{ \
	int32 InputID; \
}; \
static inline void FAbilityAbilityKey_DelegateWrapper(const FMulticastScriptDelegate& AbilityAbilityKey, int32 InputID) \
{ \
	AbilitySystemComponent_eventAbilityAbilityKey_Parms Parms; \
	Parms.InputID=InputID; \
	AbilityAbilityKey.ProcessMulticastDelegate<UObject>(&Parms); \
}




#define Engine_Source_Runtime_GameplayAbilities_Public_AbilitySystemComponent_h_59_RPC_WRAPPERS \
	virtual bool ServerSetInputReleased_Validate(FGameplayAbilitySpecHandle ); \
	virtual void ServerSetInputReleased_Implementation(FGameplayAbilitySpecHandle AbilityHandle); \
	virtual bool ServerSetInputPressed_Validate(FGameplayAbilitySpecHandle ); \
	virtual void ServerSetInputPressed_Implementation(FGameplayAbilitySpecHandle AbilityHandle); \
	virtual bool ServerSetReplicatedTargetDataCancelled_Validate(FGameplayAbilitySpecHandle , FPredictionKey , FPredictionKey ); \
	virtual void ServerSetReplicatedTargetDataCancelled_Implementation(FGameplayAbilitySpecHandle AbilityHandle, FPredictionKey AbilityOriginalPredictionKey, FPredictionKey CurrentPredictionKey); \
	virtual bool ServerSetReplicatedTargetData_Validate(FGameplayAbilitySpecHandle , FPredictionKey , FGameplayAbilityTargetDataHandle , FGameplayTag , FPredictionKey ); \
	virtual void ServerSetReplicatedTargetData_Implementation(FGameplayAbilitySpecHandle AbilityHandle, FPredictionKey AbilityOriginalPredictionKey, FGameplayAbilityTargetDataHandle ReplicatedTargetDataHandle, FGameplayTag ApplicationTag, FPredictionKey CurrentPredictionKey); \
	virtual void ClientSetReplicatedEvent_Implementation(EAbilityGenericReplicatedEvent::Type EventType, FGameplayAbilitySpecHandle AbilityHandle, FPredictionKey AbilityOriginalPredictionKey); \
	virtual bool ServerSetReplicatedEvent_Validate(EAbilityGenericReplicatedEvent::Type , FGameplayAbilitySpecHandle , FPredictionKey , FPredictionKey ); \
	virtual void ServerSetReplicatedEvent_Implementation(EAbilityGenericReplicatedEvent::Type EventType, FGameplayAbilitySpecHandle AbilityHandle, FPredictionKey AbilityOriginalPredictionKey, FPredictionKey CurrentPredictionKey); \
	virtual bool ServerCurrentMontageJumpToSectionName_Validate(UAnimMontage* , FName ); \
	virtual void ServerCurrentMontageJumpToSectionName_Implementation(UAnimMontage* ClientAnimMontage, FName SectionName); \
	virtual bool ServerCurrentMontageSetNextSectionName_Validate(UAnimMontage* , float , FName , FName ); \
	virtual void ServerCurrentMontageSetNextSectionName_Implementation(UAnimMontage* ClientAnimMontage, float ClientPosition, FName SectionName, FName NextSectionName); \
	virtual void ClientActivateAbilitySucceedWithEventData_Implementation(FGameplayAbilitySpecHandle AbilityToActivate, FPredictionKey PredictionKey, FGameplayEventData TriggerEventData); \
	virtual void ClientActivateAbilitySucceed_Implementation(FGameplayAbilitySpecHandle AbilityToActivate, FPredictionKey PredictionKey); \
	virtual void ClientActivateAbilityFailed_Implementation(FGameplayAbilitySpecHandle AbilityToActivate, int16 PredictionKey); \
	virtual void ClientCancelAbility_Implementation(FGameplayAbilitySpecHandle AbilityToCancel, FGameplayAbilityActivationInfo ActivationInfo); \
	virtual bool ServerCancelAbility_Validate(FGameplayAbilitySpecHandle , FGameplayAbilityActivationInfo ); \
	virtual void ServerCancelAbility_Implementation(FGameplayAbilitySpecHandle AbilityToCancel, FGameplayAbilityActivationInfo ActivationInfo); \
	virtual void ClientEndAbility_Implementation(FGameplayAbilitySpecHandle AbilityToEnd, FGameplayAbilityActivationInfo ActivationInfo); \
	virtual bool ServerEndAbility_Validate(FGameplayAbilitySpecHandle , FGameplayAbilityActivationInfo , FPredictionKey ); \
	virtual void ServerEndAbility_Implementation(FGameplayAbilitySpecHandle AbilityToEnd, FGameplayAbilityActivationInfo ActivationInfo, FPredictionKey PredictionKey); \
	virtual void ClientTryActivateAbility_Implementation(FGameplayAbilitySpecHandle AbilityToActivate); \
	virtual bool ServerTryActivateAbilityWithEventData_Validate(FGameplayAbilitySpecHandle , bool , FPredictionKey , FGameplayEventData ); \
	virtual void ServerTryActivateAbilityWithEventData_Implementation(FGameplayAbilitySpecHandle AbilityToActivate, bool InputPressed, FPredictionKey PredictionKey, FGameplayEventData TriggerEventData); \
	virtual bool ServerTryActivateAbility_Validate(FGameplayAbilitySpecHandle , bool , FPredictionKey ); \
	virtual void ServerTryActivateAbility_Implementation(FGameplayAbilitySpecHandle AbilityToActivate, bool InputPressed, FPredictionKey PredictionKey); \
	virtual void NetMulticast_InvokeGameplayCueAddedAndWhileActive_FromSpec_Implementation(const FGameplayEffectSpecForRPC& Spec, FPredictionKey PredictionKey); \
	virtual void NetMulticast_InvokeGameplayCueAdded_Implementation(const FGameplayTag GameplayCueTag, FPredictionKey PredictionKey, FGameplayEffectContextHandle EffectContext); \
	virtual void NetMulticast_InvokeGameplayCueExecuted_WithParams_Implementation(const FGameplayTag GameplayCueTag, FPredictionKey PredictionKey, FGameplayCueParameters GameplayCueParameters); \
	virtual void NetMulticast_InvokeGameplayCueExecuted_Implementation(const FGameplayTag GameplayCueTag, FPredictionKey PredictionKey, FGameplayEffectContextHandle EffectContext); \
	virtual void NetMulticast_InvokeGameplayCueExecuted_FromSpec_Implementation(const FGameplayEffectSpecForRPC Spec, FPredictionKey PredictionKey); \
 \
	DECLARE_FUNCTION(execOnRep_GameplayEffects) \
	{ \
		P_FINISH; \
		this->OnRep_GameplayEffects(); \
	} \
 \
	DECLARE_FUNCTION(execServerSetInputReleased) \
	{ \
		P_GET_STRUCT(FGameplayAbilitySpecHandle,Z_Param_AbilityHandle); \
		P_FINISH; \
		if (!this->ServerSetInputReleased_Validate(Z_Param_AbilityHandle)) \
		{ \
			RPC_ValidateFailed(TEXT("ServerSetInputReleased_Validate")); \
			return; \
		} \
		this->ServerSetInputReleased_Implementation(Z_Param_AbilityHandle); \
	} \
 \
	DECLARE_FUNCTION(execServerSetInputPressed) \
	{ \
		P_GET_STRUCT(FGameplayAbilitySpecHandle,Z_Param_AbilityHandle); \
		P_FINISH; \
		if (!this->ServerSetInputPressed_Validate(Z_Param_AbilityHandle)) \
		{ \
			RPC_ValidateFailed(TEXT("ServerSetInputPressed_Validate")); \
			return; \
		} \
		this->ServerSetInputPressed_Implementation(Z_Param_AbilityHandle); \
	} \
 \
	DECLARE_FUNCTION(execServerSetReplicatedTargetDataCancelled) \
	{ \
		P_GET_STRUCT(FGameplayAbilitySpecHandle,Z_Param_AbilityHandle); \
		P_GET_STRUCT(FPredictionKey,Z_Param_AbilityOriginalPredictionKey); \
		P_GET_STRUCT(FPredictionKey,Z_Param_CurrentPredictionKey); \
		P_FINISH; \
		if (!this->ServerSetReplicatedTargetDataCancelled_Validate(Z_Param_AbilityHandle,Z_Param_AbilityOriginalPredictionKey,Z_Param_CurrentPredictionKey)) \
		{ \
			RPC_ValidateFailed(TEXT("ServerSetReplicatedTargetDataCancelled_Validate")); \
			return; \
		} \
		this->ServerSetReplicatedTargetDataCancelled_Implementation(Z_Param_AbilityHandle,Z_Param_AbilityOriginalPredictionKey,Z_Param_CurrentPredictionKey); \
	} \
 \
	DECLARE_FUNCTION(execServerSetReplicatedTargetData) \
	{ \
		P_GET_STRUCT(FGameplayAbilitySpecHandle,Z_Param_AbilityHandle); \
		P_GET_STRUCT(FPredictionKey,Z_Param_AbilityOriginalPredictionKey); \
		P_GET_STRUCT(FGameplayAbilityTargetDataHandle,Z_Param_ReplicatedTargetDataHandle); \
		P_GET_STRUCT(FGameplayTag,Z_Param_ApplicationTag); \
		P_GET_STRUCT(FPredictionKey,Z_Param_CurrentPredictionKey); \
		P_FINISH; \
		if (!this->ServerSetReplicatedTargetData_Validate(Z_Param_AbilityHandle,Z_Param_AbilityOriginalPredictionKey,Z_Param_ReplicatedTargetDataHandle,Z_Param_ApplicationTag,Z_Param_CurrentPredictionKey)) \
		{ \
			RPC_ValidateFailed(TEXT("ServerSetReplicatedTargetData_Validate")); \
			return; \
		} \
		this->ServerSetReplicatedTargetData_Implementation(Z_Param_AbilityHandle,Z_Param_AbilityOriginalPredictionKey,Z_Param_ReplicatedTargetDataHandle,Z_Param_ApplicationTag,Z_Param_CurrentPredictionKey); \
	} \
 \
	DECLARE_FUNCTION(execClientSetReplicatedEvent) \
	{ \
		P_GET_PROPERTY(UByteProperty,Z_Param_EventType); \
		P_GET_STRUCT(FGameplayAbilitySpecHandle,Z_Param_AbilityHandle); \
		P_GET_STRUCT(FPredictionKey,Z_Param_AbilityOriginalPredictionKey); \
		P_FINISH; \
		this->ClientSetReplicatedEvent_Implementation(EAbilityGenericReplicatedEvent::Type(Z_Param_EventType),Z_Param_AbilityHandle,Z_Param_AbilityOriginalPredictionKey); \
	} \
 \
	DECLARE_FUNCTION(execServerSetReplicatedEvent) \
	{ \
		P_GET_PROPERTY(UByteProperty,Z_Param_EventType); \
		P_GET_STRUCT(FGameplayAbilitySpecHandle,Z_Param_AbilityHandle); \
		P_GET_STRUCT(FPredictionKey,Z_Param_AbilityOriginalPredictionKey); \
		P_GET_STRUCT(FPredictionKey,Z_Param_CurrentPredictionKey); \
		P_FINISH; \
		if (!this->ServerSetReplicatedEvent_Validate(EAbilityGenericReplicatedEvent::Type(Z_Param_EventType),Z_Param_AbilityHandle,Z_Param_AbilityOriginalPredictionKey,Z_Param_CurrentPredictionKey)) \
		{ \
			RPC_ValidateFailed(TEXT("ServerSetReplicatedEvent_Validate")); \
			return; \
		} \
		this->ServerSetReplicatedEvent_Implementation(EAbilityGenericReplicatedEvent::Type(Z_Param_EventType),Z_Param_AbilityHandle,Z_Param_AbilityOriginalPredictionKey,Z_Param_CurrentPredictionKey); \
	} \
 \
	DECLARE_FUNCTION(execOnRep_OwningActor) \
	{ \
		P_FINISH; \
		this->OnRep_OwningActor(); \
	} \
 \
	DECLARE_FUNCTION(execServerCurrentMontageJumpToSectionName) \
	{ \
		P_GET_OBJECT(UAnimMontage,Z_Param_ClientAnimMontage); \
		P_GET_PROPERTY(UNameProperty,Z_Param_SectionName); \
		P_FINISH; \
		if (!this->ServerCurrentMontageJumpToSectionName_Validate(Z_Param_ClientAnimMontage,Z_Param_SectionName)) \
		{ \
			RPC_ValidateFailed(TEXT("ServerCurrentMontageJumpToSectionName_Validate")); \
			return; \
		} \
		this->ServerCurrentMontageJumpToSectionName_Implementation(Z_Param_ClientAnimMontage,Z_Param_SectionName); \
	} \
 \
	DECLARE_FUNCTION(execServerCurrentMontageSetNextSectionName) \
	{ \
		P_GET_OBJECT(UAnimMontage,Z_Param_ClientAnimMontage); \
		P_GET_PROPERTY(UFloatProperty,Z_Param_ClientPosition); \
		P_GET_PROPERTY(UNameProperty,Z_Param_SectionName); \
		P_GET_PROPERTY(UNameProperty,Z_Param_NextSectionName); \
		P_FINISH; \
		if (!this->ServerCurrentMontageSetNextSectionName_Validate(Z_Param_ClientAnimMontage,Z_Param_ClientPosition,Z_Param_SectionName,Z_Param_NextSectionName)) \
		{ \
			RPC_ValidateFailed(TEXT("ServerCurrentMontageSetNextSectionName_Validate")); \
			return; \
		} \
		this->ServerCurrentMontageSetNextSectionName_Implementation(Z_Param_ClientAnimMontage,Z_Param_ClientPosition,Z_Param_SectionName,Z_Param_NextSectionName); \
	} \
 \
	DECLARE_FUNCTION(execOnRep_ReplicatedAnimMontage) \
	{ \
		P_FINISH; \
		this->OnRep_ReplicatedAnimMontage(); \
	} \
 \
	DECLARE_FUNCTION(execTargetCancel) \
	{ \
		P_FINISH; \
		this->TargetCancel(); \
	} \
 \
	DECLARE_FUNCTION(execTargetConfirm) \
	{ \
		P_FINISH; \
		this->TargetConfirm(); \
	} \
 \
	DECLARE_FUNCTION(execSetUserAbilityActivationInhibited) \
	{ \
		P_GET_UBOOL(Z_Param_NewInhibit); \
		P_FINISH; \
		this->SetUserAbilityActivationInhibited(Z_Param_NewInhibit); \
	} \
 \
	DECLARE_FUNCTION(execGetUserAbilityActivationInhibited) \
	{ \
		P_FINISH; \
		*(bool*)Z_Param__Result=this->GetUserAbilityActivationInhibited(); \
	} \
 \
	DECLARE_FUNCTION(execClientActivateAbilitySucceedWithEventData) \
	{ \
		P_GET_STRUCT(FGameplayAbilitySpecHandle,Z_Param_AbilityToActivate); \
		P_GET_STRUCT(FPredictionKey,Z_Param_PredictionKey); \
		P_GET_STRUCT(FGameplayEventData,Z_Param_TriggerEventData); \
		P_FINISH; \
		this->ClientActivateAbilitySucceedWithEventData_Implementation(Z_Param_AbilityToActivate,Z_Param_PredictionKey,Z_Param_TriggerEventData); \
	} \
 \
	DECLARE_FUNCTION(execClientActivateAbilitySucceed) \
	{ \
		P_GET_STRUCT(FGameplayAbilitySpecHandle,Z_Param_AbilityToActivate); \
		P_GET_STRUCT(FPredictionKey,Z_Param_PredictionKey); \
		P_FINISH; \
		this->ClientActivateAbilitySucceed_Implementation(Z_Param_AbilityToActivate,Z_Param_PredictionKey); \
	} \
 \
	DECLARE_FUNCTION(execClientActivateAbilityFailed) \
	{ \
		P_GET_STRUCT(FGameplayAbilitySpecHandle,Z_Param_AbilityToActivate); \
		P_GET_PROPERTY(UInt16Property,Z_Param_PredictionKey); \
		P_FINISH; \
		this->ClientActivateAbilityFailed_Implementation(Z_Param_AbilityToActivate,Z_Param_PredictionKey); \
	} \
 \
	DECLARE_FUNCTION(execClientCancelAbility) \
	{ \
		P_GET_STRUCT(FGameplayAbilitySpecHandle,Z_Param_AbilityToCancel); \
		P_GET_STRUCT(FGameplayAbilityActivationInfo,Z_Param_ActivationInfo); \
		P_FINISH; \
		this->ClientCancelAbility_Implementation(Z_Param_AbilityToCancel,Z_Param_ActivationInfo); \
	} \
 \
	DECLARE_FUNCTION(execServerCancelAbility) \
	{ \
		P_GET_STRUCT(FGameplayAbilitySpecHandle,Z_Param_AbilityToCancel); \
		P_GET_STRUCT(FGameplayAbilityActivationInfo,Z_Param_ActivationInfo); \
		P_FINISH; \
		if (!this->ServerCancelAbility_Validate(Z_Param_AbilityToCancel,Z_Param_ActivationInfo)) \
		{ \
			RPC_ValidateFailed(TEXT("ServerCancelAbility_Validate")); \
			return; \
		} \
		this->ServerCancelAbility_Implementation(Z_Param_AbilityToCancel,Z_Param_ActivationInfo); \
	} \
 \
	DECLARE_FUNCTION(execClientEndAbility) \
	{ \
		P_GET_STRUCT(FGameplayAbilitySpecHandle,Z_Param_AbilityToEnd); \
		P_GET_STRUCT(FGameplayAbilityActivationInfo,Z_Param_ActivationInfo); \
		P_FINISH; \
		this->ClientEndAbility_Implementation(Z_Param_AbilityToEnd,Z_Param_ActivationInfo); \
	} \
 \
	DECLARE_FUNCTION(execServerEndAbility) \
	{ \
		P_GET_STRUCT(FGameplayAbilitySpecHandle,Z_Param_AbilityToEnd); \
		P_GET_STRUCT(FGameplayAbilityActivationInfo,Z_Param_ActivationInfo); \
		P_GET_STRUCT(FPredictionKey,Z_Param_PredictionKey); \
		P_FINISH; \
		if (!this->ServerEndAbility_Validate(Z_Param_AbilityToEnd,Z_Param_ActivationInfo,Z_Param_PredictionKey)) \
		{ \
			RPC_ValidateFailed(TEXT("ServerEndAbility_Validate")); \
			return; \
		} \
		this->ServerEndAbility_Implementation(Z_Param_AbilityToEnd,Z_Param_ActivationInfo,Z_Param_PredictionKey); \
	} \
 \
	DECLARE_FUNCTION(execClientTryActivateAbility) \
	{ \
		P_GET_STRUCT(FGameplayAbilitySpecHandle,Z_Param_AbilityToActivate); \
		P_FINISH; \
		this->ClientTryActivateAbility_Implementation(Z_Param_AbilityToActivate); \
	} \
 \
	DECLARE_FUNCTION(execServerTryActivateAbilityWithEventData) \
	{ \
		P_GET_STRUCT(FGameplayAbilitySpecHandle,Z_Param_AbilityToActivate); \
		P_GET_UBOOL(Z_Param_InputPressed); \
		P_GET_STRUCT(FPredictionKey,Z_Param_PredictionKey); \
		P_GET_STRUCT(FGameplayEventData,Z_Param_TriggerEventData); \
		P_FINISH; \
		if (!this->ServerTryActivateAbilityWithEventData_Validate(Z_Param_AbilityToActivate,Z_Param_InputPressed,Z_Param_PredictionKey,Z_Param_TriggerEventData)) \
		{ \
			RPC_ValidateFailed(TEXT("ServerTryActivateAbilityWithEventData_Validate")); \
			return; \
		} \
		this->ServerTryActivateAbilityWithEventData_Implementation(Z_Param_AbilityToActivate,Z_Param_InputPressed,Z_Param_PredictionKey,Z_Param_TriggerEventData); \
	} \
 \
	DECLARE_FUNCTION(execServerTryActivateAbility) \
	{ \
		P_GET_STRUCT(FGameplayAbilitySpecHandle,Z_Param_AbilityToActivate); \
		P_GET_UBOOL(Z_Param_InputPressed); \
		P_GET_STRUCT(FPredictionKey,Z_Param_PredictionKey); \
		P_FINISH; \
		if (!this->ServerTryActivateAbility_Validate(Z_Param_AbilityToActivate,Z_Param_InputPressed,Z_Param_PredictionKey)) \
		{ \
			RPC_ValidateFailed(TEXT("ServerTryActivateAbility_Validate")); \
			return; \
		} \
		this->ServerTryActivateAbility_Implementation(Z_Param_AbilityToActivate,Z_Param_InputPressed,Z_Param_PredictionKey); \
	} \
 \
	DECLARE_FUNCTION(execOnRep_ActivateAbilities) \
	{ \
		P_FINISH; \
		this->OnRep_ActivateAbilities(); \
	} \
 \
	DECLARE_FUNCTION(execTryActivateAbilityByClass) \
	{ \
		P_GET_OBJECT(UClass,Z_Param_InAbilityToActivate); \
		P_GET_UBOOL(Z_Param_bAllowRemoteActivation); \
		P_FINISH; \
		*(bool*)Z_Param__Result=this->TryActivateAbilityByClass(Z_Param_InAbilityToActivate,Z_Param_bAllowRemoteActivation); \
	} \
 \
	DECLARE_FUNCTION(execTryActivateAbilitiesByTag) \
	{ \
		P_GET_STRUCT_REF(FGameplayTagContainer,Z_Param_Out_GameplayTagContainer); \
		P_GET_UBOOL(Z_Param_bAllowRemoteActivation); \
		P_FINISH; \
		*(bool*)Z_Param__Result=this->TryActivateAbilitiesByTag(Z_Param_Out_GameplayTagContainer,Z_Param_bAllowRemoteActivation); \
	} \
 \
	DECLARE_FUNCTION(execIsGameplayCueActive) \
	{ \
		P_GET_STRUCT(FGameplayTag,Z_Param_GameplayCueTag); \
		P_FINISH; \
		*(bool*)Z_Param__Result=this->IsGameplayCueActive(Z_Param_GameplayCueTag); \
	} \
 \
	DECLARE_FUNCTION(execNetMulticast_InvokeGameplayCueAddedAndWhileActive_FromSpec) \
	{ \
		P_GET_STRUCT(FGameplayEffectSpecForRPC,Z_Param_Spec); \
		P_GET_STRUCT(FPredictionKey,Z_Param_PredictionKey); \
		P_FINISH; \
		this->NetMulticast_InvokeGameplayCueAddedAndWhileActive_FromSpec_Implementation(Z_Param_Spec,Z_Param_PredictionKey); \
	} \
 \
	DECLARE_FUNCTION(execNetMulticast_InvokeGameplayCueAdded) \
	{ \
		P_GET_STRUCT(FGameplayTag,Z_Param_GameplayCueTag); \
		P_GET_STRUCT(FPredictionKey,Z_Param_PredictionKey); \
		P_GET_STRUCT(FGameplayEffectContextHandle,Z_Param_EffectContext); \
		P_FINISH; \
		this->NetMulticast_InvokeGameplayCueAdded_Implementation(Z_Param_GameplayCueTag,Z_Param_PredictionKey,Z_Param_EffectContext); \
	} \
 \
	DECLARE_FUNCTION(execNetMulticast_InvokeGameplayCueExecuted_WithParams) \
	{ \
		P_GET_STRUCT(FGameplayTag,Z_Param_GameplayCueTag); \
		P_GET_STRUCT(FPredictionKey,Z_Param_PredictionKey); \
		P_GET_STRUCT(FGameplayCueParameters,Z_Param_GameplayCueParameters); \
		P_FINISH; \
		this->NetMulticast_InvokeGameplayCueExecuted_WithParams_Implementation(Z_Param_GameplayCueTag,Z_Param_PredictionKey,Z_Param_GameplayCueParameters); \
	} \
 \
	DECLARE_FUNCTION(execNetMulticast_InvokeGameplayCueExecuted) \
	{ \
		P_GET_STRUCT(FGameplayTag,Z_Param_GameplayCueTag); \
		P_GET_STRUCT(FPredictionKey,Z_Param_PredictionKey); \
		P_GET_STRUCT(FGameplayEffectContextHandle,Z_Param_EffectContext); \
		P_FINISH; \
		this->NetMulticast_InvokeGameplayCueExecuted_Implementation(Z_Param_GameplayCueTag,Z_Param_PredictionKey,Z_Param_EffectContext); \
	} \
 \
	DECLARE_FUNCTION(execNetMulticast_InvokeGameplayCueExecuted_FromSpec) \
	{ \
		P_GET_STRUCT(FGameplayEffectSpecForRPC,Z_Param_Spec); \
		P_GET_STRUCT(FPredictionKey,Z_Param_PredictionKey); \
		P_FINISH; \
		this->NetMulticast_InvokeGameplayCueExecuted_FromSpec_Implementation(Z_Param_Spec,Z_Param_PredictionKey); \
	} \
 \
	DECLARE_FUNCTION(execRemoveActiveEffectsWithTags) \
	{ \
		P_GET_STRUCT(FGameplayTagContainer,Z_Param_Tags); \
		P_FINISH; \
		this->RemoveActiveEffectsWithTags(Z_Param_Tags); \
	} \
 \
	DECLARE_FUNCTION(execK2_ApplyGameplayEffectToSelf) \
	{ \
		P_GET_OBJECT(UGameplayEffect,Z_Param_GameplayEffect); \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Level); \
		P_GET_STRUCT(FGameplayEffectContextHandle,Z_Param_EffectContext); \
		P_FINISH; \
		*(FActiveGameplayEffectHandle*)Z_Param__Result=this->K2_ApplyGameplayEffectToSelf(Z_Param_GameplayEffect,Z_Param_Level,Z_Param_EffectContext); \
	} \
 \
	DECLARE_FUNCTION(execBP_ApplyGameplayEffectToSelf) \
	{ \
		P_GET_OBJECT(UClass,Z_Param_GameplayEffectClass); \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Level); \
		P_GET_STRUCT(FGameplayEffectContextHandle,Z_Param_EffectContext); \
		P_FINISH; \
		*(FActiveGameplayEffectHandle*)Z_Param__Result=this->BP_ApplyGameplayEffectToSelf(Z_Param_GameplayEffectClass,Z_Param_Level,Z_Param_EffectContext); \
	} \
 \
	DECLARE_FUNCTION(execK2_ApplyGameplayEffectToTarget) \
	{ \
		P_GET_OBJECT(UGameplayEffect,Z_Param_GameplayEffect); \
		P_GET_OBJECT(UAbilitySystemComponent,Z_Param_Target); \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Level); \
		P_GET_STRUCT(FGameplayEffectContextHandle,Z_Param_Context); \
		P_FINISH; \
		*(FActiveGameplayEffectHandle*)Z_Param__Result=this->K2_ApplyGameplayEffectToTarget(Z_Param_GameplayEffect,Z_Param_Target,Z_Param_Level,Z_Param_Context); \
	} \
 \
	DECLARE_FUNCTION(execBP_ApplyGameplayEffectToTarget) \
	{ \
		P_GET_OBJECT(UClass,Z_Param_GameplayEffectClass); \
		P_GET_OBJECT(UAbilitySystemComponent,Z_Param_Target); \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Level); \
		P_GET_STRUCT(FGameplayEffectContextHandle,Z_Param_Context); \
		P_FINISH; \
		*(FActiveGameplayEffectHandle*)Z_Param__Result=this->BP_ApplyGameplayEffectToTarget(Z_Param_GameplayEffectClass,Z_Param_Target,Z_Param_Level,Z_Param_Context); \
	} \
 \
	DECLARE_FUNCTION(execGetGameplayEffectMagnitude) \
	{ \
		P_GET_STRUCT(FActiveGameplayEffectHandle,Z_Param_Handle); \
		P_GET_STRUCT(FGameplayAttribute,Z_Param_Attribute); \
		P_FINISH; \
		*(float*)Z_Param__Result=this->GetGameplayEffectMagnitude(Z_Param_Handle,Z_Param_Attribute); \
	} \
 \
	DECLARE_FUNCTION(execSetActiveGameplayEffectLevel) \
	{ \
		P_GET_STRUCT(FActiveGameplayEffectHandle,Z_Param_ActiveHandle); \
		P_GET_PROPERTY(UIntProperty,Z_Param_NewLevel); \
		P_FINISH; \
		this->SetActiveGameplayEffectLevel(Z_Param_ActiveHandle,Z_Param_NewLevel); \
	} \
 \
	DECLARE_FUNCTION(execGetGameplayEffectCount) \
	{ \
		P_GET_OBJECT(UClass,Z_Param_SourceGameplayEffect); \
		P_GET_OBJECT(UAbilitySystemComponent,Z_Param_OptionalInstigatorFilterComponent); \
		P_FINISH; \
		*(int32*)Z_Param__Result=this->GetGameplayEffectCount(Z_Param_SourceGameplayEffect,Z_Param_OptionalInstigatorFilterComponent); \
	} \
 \
	DECLARE_FUNCTION(execGetEffectContext) \
	{ \
		P_FINISH; \
		*(FGameplayEffectContextHandle*)Z_Param__Result=this->GetEffectContext(); \
	} \
 \
	DECLARE_FUNCTION(execGetOutgoingSpec) \
	{ \
		P_GET_OBJECT(UGameplayEffect,Z_Param_GameplayEffect); \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Level); \
		P_FINISH; \
		*(FGameplayEffectSpecHandle*)Z_Param__Result=this->GetOutgoingSpec(Z_Param_GameplayEffect,Z_Param_Level); \
	} \
 \
	DECLARE_FUNCTION(execMakeOutgoingSpec) \
	{ \
		P_GET_OBJECT(UClass,Z_Param_GameplayEffectClass); \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Level); \
		P_GET_STRUCT(FGameplayEffectContextHandle,Z_Param_Context); \
		P_FINISH; \
		*(FGameplayEffectSpecHandle*)Z_Param__Result=this->MakeOutgoingSpec(Z_Param_GameplayEffectClass,Z_Param_Level,Z_Param_Context); \
	} \
 \
	DECLARE_FUNCTION(execRemoveActiveGameplayEffectBySourceEffect) \
	{ \
		P_GET_OBJECT(UClass,Z_Param_GameplayEffect); \
		P_GET_OBJECT(UAbilitySystemComponent,Z_Param_InstigatorAbilitySystemComponent); \
		P_GET_PROPERTY(UIntProperty,Z_Param_StacksToRemove); \
		P_FINISH; \
		this->RemoveActiveGameplayEffectBySourceEffect(Z_Param_GameplayEffect,Z_Param_InstigatorAbilitySystemComponent,Z_Param_StacksToRemove); \
	} \
 \
	DECLARE_FUNCTION(execRemoveActiveGameplayEffect) \
	{ \
		P_GET_STRUCT(FActiveGameplayEffectHandle,Z_Param_Handle); \
		P_GET_PROPERTY(UIntProperty,Z_Param_StacksToRemove); \
		P_FINISH; \
		*(bool*)Z_Param__Result=this->RemoveActiveGameplayEffect(Z_Param_Handle,Z_Param_StacksToRemove); \
	} \
 \
	DECLARE_FUNCTION(execBP_ApplyGameplayEffectSpecToSelf) \
	{ \
		P_GET_STRUCT_REF(FGameplayEffectSpecHandle,Z_Param_Out_SpecHandle); \
		P_FINISH; \
		*(FActiveGameplayEffectHandle*)Z_Param__Result=this->BP_ApplyGameplayEffectSpecToSelf(Z_Param_Out_SpecHandle); \
	} \
 \
	DECLARE_FUNCTION(execBP_ApplyGameplayEffectSpecToTarget) \
	{ \
		P_GET_STRUCT_REF(FGameplayEffectSpecHandle,Z_Param_Out_SpecHandle); \
		P_GET_OBJECT(UAbilitySystemComponent,Z_Param_Target); \
		P_FINISH; \
		*(FActiveGameplayEffectHandle*)Z_Param__Result=this->BP_ApplyGameplayEffectSpecToTarget(Z_Param_Out_SpecHandle,Z_Param_Target); \
	} \
 \
	DECLARE_FUNCTION(execOnRep_PredictionKey) \
	{ \
		P_FINISH; \
		this->OnRep_PredictionKey(); \
	} \
 \
	DECLARE_FUNCTION(execK2_InitStats) \
	{ \
		P_GET_OBJECT(UClass,Z_Param_Attributes); \
		P_GET_OBJECT(UDataTable,Z_Param_DataTable); \
		P_FINISH; \
		this->K2_InitStats(Z_Param_Attributes,Z_Param_DataTable); \
	}


#define Engine_Source_Runtime_GameplayAbilities_Public_AbilitySystemComponent_h_59_RPC_WRAPPERS_NO_PURE_DECLS \
	virtual bool ServerSetInputReleased_Validate(FGameplayAbilitySpecHandle ); \
	virtual void ServerSetInputReleased_Implementation(FGameplayAbilitySpecHandle AbilityHandle); \
	virtual bool ServerSetInputPressed_Validate(FGameplayAbilitySpecHandle ); \
	virtual void ServerSetInputPressed_Implementation(FGameplayAbilitySpecHandle AbilityHandle); \
	virtual bool ServerSetReplicatedTargetDataCancelled_Validate(FGameplayAbilitySpecHandle , FPredictionKey , FPredictionKey ); \
	virtual void ServerSetReplicatedTargetDataCancelled_Implementation(FGameplayAbilitySpecHandle AbilityHandle, FPredictionKey AbilityOriginalPredictionKey, FPredictionKey CurrentPredictionKey); \
	virtual bool ServerSetReplicatedTargetData_Validate(FGameplayAbilitySpecHandle , FPredictionKey , FGameplayAbilityTargetDataHandle , FGameplayTag , FPredictionKey ); \
	virtual void ServerSetReplicatedTargetData_Implementation(FGameplayAbilitySpecHandle AbilityHandle, FPredictionKey AbilityOriginalPredictionKey, FGameplayAbilityTargetDataHandle ReplicatedTargetDataHandle, FGameplayTag ApplicationTag, FPredictionKey CurrentPredictionKey); \
	virtual void ClientSetReplicatedEvent_Implementation(EAbilityGenericReplicatedEvent::Type EventType, FGameplayAbilitySpecHandle AbilityHandle, FPredictionKey AbilityOriginalPredictionKey); \
	virtual bool ServerSetReplicatedEvent_Validate(EAbilityGenericReplicatedEvent::Type , FGameplayAbilitySpecHandle , FPredictionKey , FPredictionKey ); \
	virtual void ServerSetReplicatedEvent_Implementation(EAbilityGenericReplicatedEvent::Type EventType, FGameplayAbilitySpecHandle AbilityHandle, FPredictionKey AbilityOriginalPredictionKey, FPredictionKey CurrentPredictionKey); \
	virtual bool ServerCurrentMontageJumpToSectionName_Validate(UAnimMontage* , FName ); \
	virtual void ServerCurrentMontageJumpToSectionName_Implementation(UAnimMontage* ClientAnimMontage, FName SectionName); \
	virtual bool ServerCurrentMontageSetNextSectionName_Validate(UAnimMontage* , float , FName , FName ); \
	virtual void ServerCurrentMontageSetNextSectionName_Implementation(UAnimMontage* ClientAnimMontage, float ClientPosition, FName SectionName, FName NextSectionName); \
	virtual void ClientActivateAbilitySucceedWithEventData_Implementation(FGameplayAbilitySpecHandle AbilityToActivate, FPredictionKey PredictionKey, FGameplayEventData TriggerEventData); \
	virtual void ClientActivateAbilitySucceed_Implementation(FGameplayAbilitySpecHandle AbilityToActivate, FPredictionKey PredictionKey); \
	virtual void ClientActivateAbilityFailed_Implementation(FGameplayAbilitySpecHandle AbilityToActivate, int16 PredictionKey); \
	virtual void ClientCancelAbility_Implementation(FGameplayAbilitySpecHandle AbilityToCancel, FGameplayAbilityActivationInfo ActivationInfo); \
	virtual bool ServerCancelAbility_Validate(FGameplayAbilitySpecHandle , FGameplayAbilityActivationInfo ); \
	virtual void ServerCancelAbility_Implementation(FGameplayAbilitySpecHandle AbilityToCancel, FGameplayAbilityActivationInfo ActivationInfo); \
	virtual void ClientEndAbility_Implementation(FGameplayAbilitySpecHandle AbilityToEnd, FGameplayAbilityActivationInfo ActivationInfo); \
	virtual bool ServerEndAbility_Validate(FGameplayAbilitySpecHandle , FGameplayAbilityActivationInfo , FPredictionKey ); \
	virtual void ServerEndAbility_Implementation(FGameplayAbilitySpecHandle AbilityToEnd, FGameplayAbilityActivationInfo ActivationInfo, FPredictionKey PredictionKey); \
	virtual void ClientTryActivateAbility_Implementation(FGameplayAbilitySpecHandle AbilityToActivate); \
	virtual bool ServerTryActivateAbilityWithEventData_Validate(FGameplayAbilitySpecHandle , bool , FPredictionKey , FGameplayEventData ); \
	virtual void ServerTryActivateAbilityWithEventData_Implementation(FGameplayAbilitySpecHandle AbilityToActivate, bool InputPressed, FPredictionKey PredictionKey, FGameplayEventData TriggerEventData); \
	virtual bool ServerTryActivateAbility_Validate(FGameplayAbilitySpecHandle , bool , FPredictionKey ); \
	virtual void ServerTryActivateAbility_Implementation(FGameplayAbilitySpecHandle AbilityToActivate, bool InputPressed, FPredictionKey PredictionKey); \
	virtual void NetMulticast_InvokeGameplayCueAddedAndWhileActive_FromSpec_Implementation(const FGameplayEffectSpecForRPC& Spec, FPredictionKey PredictionKey); \
	virtual void NetMulticast_InvokeGameplayCueAdded_Implementation(const FGameplayTag GameplayCueTag, FPredictionKey PredictionKey, FGameplayEffectContextHandle EffectContext); \
	virtual void NetMulticast_InvokeGameplayCueExecuted_WithParams_Implementation(const FGameplayTag GameplayCueTag, FPredictionKey PredictionKey, FGameplayCueParameters GameplayCueParameters); \
	virtual void NetMulticast_InvokeGameplayCueExecuted_Implementation(const FGameplayTag GameplayCueTag, FPredictionKey PredictionKey, FGameplayEffectContextHandle EffectContext); \
	virtual void NetMulticast_InvokeGameplayCueExecuted_FromSpec_Implementation(const FGameplayEffectSpecForRPC Spec, FPredictionKey PredictionKey); \
 \
	DECLARE_FUNCTION(execOnRep_GameplayEffects) \
	{ \
		P_FINISH; \
		this->OnRep_GameplayEffects(); \
	} \
 \
	DECLARE_FUNCTION(execServerSetInputReleased) \
	{ \
		P_GET_STRUCT(FGameplayAbilitySpecHandle,Z_Param_AbilityHandle); \
		P_FINISH; \
		if (!this->ServerSetInputReleased_Validate(Z_Param_AbilityHandle)) \
		{ \
			RPC_ValidateFailed(TEXT("ServerSetInputReleased_Validate")); \
			return; \
		} \
		this->ServerSetInputReleased_Implementation(Z_Param_AbilityHandle); \
	} \
 \
	DECLARE_FUNCTION(execServerSetInputPressed) \
	{ \
		P_GET_STRUCT(FGameplayAbilitySpecHandle,Z_Param_AbilityHandle); \
		P_FINISH; \
		if (!this->ServerSetInputPressed_Validate(Z_Param_AbilityHandle)) \
		{ \
			RPC_ValidateFailed(TEXT("ServerSetInputPressed_Validate")); \
			return; \
		} \
		this->ServerSetInputPressed_Implementation(Z_Param_AbilityHandle); \
	} \
 \
	DECLARE_FUNCTION(execServerSetReplicatedTargetDataCancelled) \
	{ \
		P_GET_STRUCT(FGameplayAbilitySpecHandle,Z_Param_AbilityHandle); \
		P_GET_STRUCT(FPredictionKey,Z_Param_AbilityOriginalPredictionKey); \
		P_GET_STRUCT(FPredictionKey,Z_Param_CurrentPredictionKey); \
		P_FINISH; \
		if (!this->ServerSetReplicatedTargetDataCancelled_Validate(Z_Param_AbilityHandle,Z_Param_AbilityOriginalPredictionKey,Z_Param_CurrentPredictionKey)) \
		{ \
			RPC_ValidateFailed(TEXT("ServerSetReplicatedTargetDataCancelled_Validate")); \
			return; \
		} \
		this->ServerSetReplicatedTargetDataCancelled_Implementation(Z_Param_AbilityHandle,Z_Param_AbilityOriginalPredictionKey,Z_Param_CurrentPredictionKey); \
	} \
 \
	DECLARE_FUNCTION(execServerSetReplicatedTargetData) \
	{ \
		P_GET_STRUCT(FGameplayAbilitySpecHandle,Z_Param_AbilityHandle); \
		P_GET_STRUCT(FPredictionKey,Z_Param_AbilityOriginalPredictionKey); \
		P_GET_STRUCT(FGameplayAbilityTargetDataHandle,Z_Param_ReplicatedTargetDataHandle); \
		P_GET_STRUCT(FGameplayTag,Z_Param_ApplicationTag); \
		P_GET_STRUCT(FPredictionKey,Z_Param_CurrentPredictionKey); \
		P_FINISH; \
		if (!this->ServerSetReplicatedTargetData_Validate(Z_Param_AbilityHandle,Z_Param_AbilityOriginalPredictionKey,Z_Param_ReplicatedTargetDataHandle,Z_Param_ApplicationTag,Z_Param_CurrentPredictionKey)) \
		{ \
			RPC_ValidateFailed(TEXT("ServerSetReplicatedTargetData_Validate")); \
			return; \
		} \
		this->ServerSetReplicatedTargetData_Implementation(Z_Param_AbilityHandle,Z_Param_AbilityOriginalPredictionKey,Z_Param_ReplicatedTargetDataHandle,Z_Param_ApplicationTag,Z_Param_CurrentPredictionKey); \
	} \
 \
	DECLARE_FUNCTION(execClientSetReplicatedEvent) \
	{ \
		P_GET_PROPERTY(UByteProperty,Z_Param_EventType); \
		P_GET_STRUCT(FGameplayAbilitySpecHandle,Z_Param_AbilityHandle); \
		P_GET_STRUCT(FPredictionKey,Z_Param_AbilityOriginalPredictionKey); \
		P_FINISH; \
		this->ClientSetReplicatedEvent_Implementation(EAbilityGenericReplicatedEvent::Type(Z_Param_EventType),Z_Param_AbilityHandle,Z_Param_AbilityOriginalPredictionKey); \
	} \
 \
	DECLARE_FUNCTION(execServerSetReplicatedEvent) \
	{ \
		P_GET_PROPERTY(UByteProperty,Z_Param_EventType); \
		P_GET_STRUCT(FGameplayAbilitySpecHandle,Z_Param_AbilityHandle); \
		P_GET_STRUCT(FPredictionKey,Z_Param_AbilityOriginalPredictionKey); \
		P_GET_STRUCT(FPredictionKey,Z_Param_CurrentPredictionKey); \
		P_FINISH; \
		if (!this->ServerSetReplicatedEvent_Validate(EAbilityGenericReplicatedEvent::Type(Z_Param_EventType),Z_Param_AbilityHandle,Z_Param_AbilityOriginalPredictionKey,Z_Param_CurrentPredictionKey)) \
		{ \
			RPC_ValidateFailed(TEXT("ServerSetReplicatedEvent_Validate")); \
			return; \
		} \
		this->ServerSetReplicatedEvent_Implementation(EAbilityGenericReplicatedEvent::Type(Z_Param_EventType),Z_Param_AbilityHandle,Z_Param_AbilityOriginalPredictionKey,Z_Param_CurrentPredictionKey); \
	} \
 \
	DECLARE_FUNCTION(execOnRep_OwningActor) \
	{ \
		P_FINISH; \
		this->OnRep_OwningActor(); \
	} \
 \
	DECLARE_FUNCTION(execServerCurrentMontageJumpToSectionName) \
	{ \
		P_GET_OBJECT(UAnimMontage,Z_Param_ClientAnimMontage); \
		P_GET_PROPERTY(UNameProperty,Z_Param_SectionName); \
		P_FINISH; \
		if (!this->ServerCurrentMontageJumpToSectionName_Validate(Z_Param_ClientAnimMontage,Z_Param_SectionName)) \
		{ \
			RPC_ValidateFailed(TEXT("ServerCurrentMontageJumpToSectionName_Validate")); \
			return; \
		} \
		this->ServerCurrentMontageJumpToSectionName_Implementation(Z_Param_ClientAnimMontage,Z_Param_SectionName); \
	} \
 \
	DECLARE_FUNCTION(execServerCurrentMontageSetNextSectionName) \
	{ \
		P_GET_OBJECT(UAnimMontage,Z_Param_ClientAnimMontage); \
		P_GET_PROPERTY(UFloatProperty,Z_Param_ClientPosition); \
		P_GET_PROPERTY(UNameProperty,Z_Param_SectionName); \
		P_GET_PROPERTY(UNameProperty,Z_Param_NextSectionName); \
		P_FINISH; \
		if (!this->ServerCurrentMontageSetNextSectionName_Validate(Z_Param_ClientAnimMontage,Z_Param_ClientPosition,Z_Param_SectionName,Z_Param_NextSectionName)) \
		{ \
			RPC_ValidateFailed(TEXT("ServerCurrentMontageSetNextSectionName_Validate")); \
			return; \
		} \
		this->ServerCurrentMontageSetNextSectionName_Implementation(Z_Param_ClientAnimMontage,Z_Param_ClientPosition,Z_Param_SectionName,Z_Param_NextSectionName); \
	} \
 \
	DECLARE_FUNCTION(execOnRep_ReplicatedAnimMontage) \
	{ \
		P_FINISH; \
		this->OnRep_ReplicatedAnimMontage(); \
	} \
 \
	DECLARE_FUNCTION(execTargetCancel) \
	{ \
		P_FINISH; \
		this->TargetCancel(); \
	} \
 \
	DECLARE_FUNCTION(execTargetConfirm) \
	{ \
		P_FINISH; \
		this->TargetConfirm(); \
	} \
 \
	DECLARE_FUNCTION(execSetUserAbilityActivationInhibited) \
	{ \
		P_GET_UBOOL(Z_Param_NewInhibit); \
		P_FINISH; \
		this->SetUserAbilityActivationInhibited(Z_Param_NewInhibit); \
	} \
 \
	DECLARE_FUNCTION(execGetUserAbilityActivationInhibited) \
	{ \
		P_FINISH; \
		*(bool*)Z_Param__Result=this->GetUserAbilityActivationInhibited(); \
	} \
 \
	DECLARE_FUNCTION(execClientActivateAbilitySucceedWithEventData) \
	{ \
		P_GET_STRUCT(FGameplayAbilitySpecHandle,Z_Param_AbilityToActivate); \
		P_GET_STRUCT(FPredictionKey,Z_Param_PredictionKey); \
		P_GET_STRUCT(FGameplayEventData,Z_Param_TriggerEventData); \
		P_FINISH; \
		this->ClientActivateAbilitySucceedWithEventData_Implementation(Z_Param_AbilityToActivate,Z_Param_PredictionKey,Z_Param_TriggerEventData); \
	} \
 \
	DECLARE_FUNCTION(execClientActivateAbilitySucceed) \
	{ \
		P_GET_STRUCT(FGameplayAbilitySpecHandle,Z_Param_AbilityToActivate); \
		P_GET_STRUCT(FPredictionKey,Z_Param_PredictionKey); \
		P_FINISH; \
		this->ClientActivateAbilitySucceed_Implementation(Z_Param_AbilityToActivate,Z_Param_PredictionKey); \
	} \
 \
	DECLARE_FUNCTION(execClientActivateAbilityFailed) \
	{ \
		P_GET_STRUCT(FGameplayAbilitySpecHandle,Z_Param_AbilityToActivate); \
		P_GET_PROPERTY(UInt16Property,Z_Param_PredictionKey); \
		P_FINISH; \
		this->ClientActivateAbilityFailed_Implementation(Z_Param_AbilityToActivate,Z_Param_PredictionKey); \
	} \
 \
	DECLARE_FUNCTION(execClientCancelAbility) \
	{ \
		P_GET_STRUCT(FGameplayAbilitySpecHandle,Z_Param_AbilityToCancel); \
		P_GET_STRUCT(FGameplayAbilityActivationInfo,Z_Param_ActivationInfo); \
		P_FINISH; \
		this->ClientCancelAbility_Implementation(Z_Param_AbilityToCancel,Z_Param_ActivationInfo); \
	} \
 \
	DECLARE_FUNCTION(execServerCancelAbility) \
	{ \
		P_GET_STRUCT(FGameplayAbilitySpecHandle,Z_Param_AbilityToCancel); \
		P_GET_STRUCT(FGameplayAbilityActivationInfo,Z_Param_ActivationInfo); \
		P_FINISH; \
		if (!this->ServerCancelAbility_Validate(Z_Param_AbilityToCancel,Z_Param_ActivationInfo)) \
		{ \
			RPC_ValidateFailed(TEXT("ServerCancelAbility_Validate")); \
			return; \
		} \
		this->ServerCancelAbility_Implementation(Z_Param_AbilityToCancel,Z_Param_ActivationInfo); \
	} \
 \
	DECLARE_FUNCTION(execClientEndAbility) \
	{ \
		P_GET_STRUCT(FGameplayAbilitySpecHandle,Z_Param_AbilityToEnd); \
		P_GET_STRUCT(FGameplayAbilityActivationInfo,Z_Param_ActivationInfo); \
		P_FINISH; \
		this->ClientEndAbility_Implementation(Z_Param_AbilityToEnd,Z_Param_ActivationInfo); \
	} \
 \
	DECLARE_FUNCTION(execServerEndAbility) \
	{ \
		P_GET_STRUCT(FGameplayAbilitySpecHandle,Z_Param_AbilityToEnd); \
		P_GET_STRUCT(FGameplayAbilityActivationInfo,Z_Param_ActivationInfo); \
		P_GET_STRUCT(FPredictionKey,Z_Param_PredictionKey); \
		P_FINISH; \
		if (!this->ServerEndAbility_Validate(Z_Param_AbilityToEnd,Z_Param_ActivationInfo,Z_Param_PredictionKey)) \
		{ \
			RPC_ValidateFailed(TEXT("ServerEndAbility_Validate")); \
			return; \
		} \
		this->ServerEndAbility_Implementation(Z_Param_AbilityToEnd,Z_Param_ActivationInfo,Z_Param_PredictionKey); \
	} \
 \
	DECLARE_FUNCTION(execClientTryActivateAbility) \
	{ \
		P_GET_STRUCT(FGameplayAbilitySpecHandle,Z_Param_AbilityToActivate); \
		P_FINISH; \
		this->ClientTryActivateAbility_Implementation(Z_Param_AbilityToActivate); \
	} \
 \
	DECLARE_FUNCTION(execServerTryActivateAbilityWithEventData) \
	{ \
		P_GET_STRUCT(FGameplayAbilitySpecHandle,Z_Param_AbilityToActivate); \
		P_GET_UBOOL(Z_Param_InputPressed); \
		P_GET_STRUCT(FPredictionKey,Z_Param_PredictionKey); \
		P_GET_STRUCT(FGameplayEventData,Z_Param_TriggerEventData); \
		P_FINISH; \
		if (!this->ServerTryActivateAbilityWithEventData_Validate(Z_Param_AbilityToActivate,Z_Param_InputPressed,Z_Param_PredictionKey,Z_Param_TriggerEventData)) \
		{ \
			RPC_ValidateFailed(TEXT("ServerTryActivateAbilityWithEventData_Validate")); \
			return; \
		} \
		this->ServerTryActivateAbilityWithEventData_Implementation(Z_Param_AbilityToActivate,Z_Param_InputPressed,Z_Param_PredictionKey,Z_Param_TriggerEventData); \
	} \
 \
	DECLARE_FUNCTION(execServerTryActivateAbility) \
	{ \
		P_GET_STRUCT(FGameplayAbilitySpecHandle,Z_Param_AbilityToActivate); \
		P_GET_UBOOL(Z_Param_InputPressed); \
		P_GET_STRUCT(FPredictionKey,Z_Param_PredictionKey); \
		P_FINISH; \
		if (!this->ServerTryActivateAbility_Validate(Z_Param_AbilityToActivate,Z_Param_InputPressed,Z_Param_PredictionKey)) \
		{ \
			RPC_ValidateFailed(TEXT("ServerTryActivateAbility_Validate")); \
			return; \
		} \
		this->ServerTryActivateAbility_Implementation(Z_Param_AbilityToActivate,Z_Param_InputPressed,Z_Param_PredictionKey); \
	} \
 \
	DECLARE_FUNCTION(execOnRep_ActivateAbilities) \
	{ \
		P_FINISH; \
		this->OnRep_ActivateAbilities(); \
	} \
 \
	DECLARE_FUNCTION(execTryActivateAbilityByClass) \
	{ \
		P_GET_OBJECT(UClass,Z_Param_InAbilityToActivate); \
		P_GET_UBOOL(Z_Param_bAllowRemoteActivation); \
		P_FINISH; \
		*(bool*)Z_Param__Result=this->TryActivateAbilityByClass(Z_Param_InAbilityToActivate,Z_Param_bAllowRemoteActivation); \
	} \
 \
	DECLARE_FUNCTION(execTryActivateAbilitiesByTag) \
	{ \
		P_GET_STRUCT_REF(FGameplayTagContainer,Z_Param_Out_GameplayTagContainer); \
		P_GET_UBOOL(Z_Param_bAllowRemoteActivation); \
		P_FINISH; \
		*(bool*)Z_Param__Result=this->TryActivateAbilitiesByTag(Z_Param_Out_GameplayTagContainer,Z_Param_bAllowRemoteActivation); \
	} \
 \
	DECLARE_FUNCTION(execIsGameplayCueActive) \
	{ \
		P_GET_STRUCT(FGameplayTag,Z_Param_GameplayCueTag); \
		P_FINISH; \
		*(bool*)Z_Param__Result=this->IsGameplayCueActive(Z_Param_GameplayCueTag); \
	} \
 \
	DECLARE_FUNCTION(execNetMulticast_InvokeGameplayCueAddedAndWhileActive_FromSpec) \
	{ \
		P_GET_STRUCT(FGameplayEffectSpecForRPC,Z_Param_Spec); \
		P_GET_STRUCT(FPredictionKey,Z_Param_PredictionKey); \
		P_FINISH; \
		this->NetMulticast_InvokeGameplayCueAddedAndWhileActive_FromSpec_Implementation(Z_Param_Spec,Z_Param_PredictionKey); \
	} \
 \
	DECLARE_FUNCTION(execNetMulticast_InvokeGameplayCueAdded) \
	{ \
		P_GET_STRUCT(FGameplayTag,Z_Param_GameplayCueTag); \
		P_GET_STRUCT(FPredictionKey,Z_Param_PredictionKey); \
		P_GET_STRUCT(FGameplayEffectContextHandle,Z_Param_EffectContext); \
		P_FINISH; \
		this->NetMulticast_InvokeGameplayCueAdded_Implementation(Z_Param_GameplayCueTag,Z_Param_PredictionKey,Z_Param_EffectContext); \
	} \
 \
	DECLARE_FUNCTION(execNetMulticast_InvokeGameplayCueExecuted_WithParams) \
	{ \
		P_GET_STRUCT(FGameplayTag,Z_Param_GameplayCueTag); \
		P_GET_STRUCT(FPredictionKey,Z_Param_PredictionKey); \
		P_GET_STRUCT(FGameplayCueParameters,Z_Param_GameplayCueParameters); \
		P_FINISH; \
		this->NetMulticast_InvokeGameplayCueExecuted_WithParams_Implementation(Z_Param_GameplayCueTag,Z_Param_PredictionKey,Z_Param_GameplayCueParameters); \
	} \
 \
	DECLARE_FUNCTION(execNetMulticast_InvokeGameplayCueExecuted) \
	{ \
		P_GET_STRUCT(FGameplayTag,Z_Param_GameplayCueTag); \
		P_GET_STRUCT(FPredictionKey,Z_Param_PredictionKey); \
		P_GET_STRUCT(FGameplayEffectContextHandle,Z_Param_EffectContext); \
		P_FINISH; \
		this->NetMulticast_InvokeGameplayCueExecuted_Implementation(Z_Param_GameplayCueTag,Z_Param_PredictionKey,Z_Param_EffectContext); \
	} \
 \
	DECLARE_FUNCTION(execNetMulticast_InvokeGameplayCueExecuted_FromSpec) \
	{ \
		P_GET_STRUCT(FGameplayEffectSpecForRPC,Z_Param_Spec); \
		P_GET_STRUCT(FPredictionKey,Z_Param_PredictionKey); \
		P_FINISH; \
		this->NetMulticast_InvokeGameplayCueExecuted_FromSpec_Implementation(Z_Param_Spec,Z_Param_PredictionKey); \
	} \
 \
	DECLARE_FUNCTION(execRemoveActiveEffectsWithTags) \
	{ \
		P_GET_STRUCT(FGameplayTagContainer,Z_Param_Tags); \
		P_FINISH; \
		this->RemoveActiveEffectsWithTags(Z_Param_Tags); \
	} \
 \
	DECLARE_FUNCTION(execK2_ApplyGameplayEffectToSelf) \
	{ \
		P_GET_OBJECT(UGameplayEffect,Z_Param_GameplayEffect); \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Level); \
		P_GET_STRUCT(FGameplayEffectContextHandle,Z_Param_EffectContext); \
		P_FINISH; \
		*(FActiveGameplayEffectHandle*)Z_Param__Result=this->K2_ApplyGameplayEffectToSelf(Z_Param_GameplayEffect,Z_Param_Level,Z_Param_EffectContext); \
	} \
 \
	DECLARE_FUNCTION(execBP_ApplyGameplayEffectToSelf) \
	{ \
		P_GET_OBJECT(UClass,Z_Param_GameplayEffectClass); \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Level); \
		P_GET_STRUCT(FGameplayEffectContextHandle,Z_Param_EffectContext); \
		P_FINISH; \
		*(FActiveGameplayEffectHandle*)Z_Param__Result=this->BP_ApplyGameplayEffectToSelf(Z_Param_GameplayEffectClass,Z_Param_Level,Z_Param_EffectContext); \
	} \
 \
	DECLARE_FUNCTION(execK2_ApplyGameplayEffectToTarget) \
	{ \
		P_GET_OBJECT(UGameplayEffect,Z_Param_GameplayEffect); \
		P_GET_OBJECT(UAbilitySystemComponent,Z_Param_Target); \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Level); \
		P_GET_STRUCT(FGameplayEffectContextHandle,Z_Param_Context); \
		P_FINISH; \
		*(FActiveGameplayEffectHandle*)Z_Param__Result=this->K2_ApplyGameplayEffectToTarget(Z_Param_GameplayEffect,Z_Param_Target,Z_Param_Level,Z_Param_Context); \
	} \
 \
	DECLARE_FUNCTION(execBP_ApplyGameplayEffectToTarget) \
	{ \
		P_GET_OBJECT(UClass,Z_Param_GameplayEffectClass); \
		P_GET_OBJECT(UAbilitySystemComponent,Z_Param_Target); \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Level); \
		P_GET_STRUCT(FGameplayEffectContextHandle,Z_Param_Context); \
		P_FINISH; \
		*(FActiveGameplayEffectHandle*)Z_Param__Result=this->BP_ApplyGameplayEffectToTarget(Z_Param_GameplayEffectClass,Z_Param_Target,Z_Param_Level,Z_Param_Context); \
	} \
 \
	DECLARE_FUNCTION(execGetGameplayEffectMagnitude) \
	{ \
		P_GET_STRUCT(FActiveGameplayEffectHandle,Z_Param_Handle); \
		P_GET_STRUCT(FGameplayAttribute,Z_Param_Attribute); \
		P_FINISH; \
		*(float*)Z_Param__Result=this->GetGameplayEffectMagnitude(Z_Param_Handle,Z_Param_Attribute); \
	} \
 \
	DECLARE_FUNCTION(execSetActiveGameplayEffectLevel) \
	{ \
		P_GET_STRUCT(FActiveGameplayEffectHandle,Z_Param_ActiveHandle); \
		P_GET_PROPERTY(UIntProperty,Z_Param_NewLevel); \
		P_FINISH; \
		this->SetActiveGameplayEffectLevel(Z_Param_ActiveHandle,Z_Param_NewLevel); \
	} \
 \
	DECLARE_FUNCTION(execGetGameplayEffectCount) \
	{ \
		P_GET_OBJECT(UClass,Z_Param_SourceGameplayEffect); \
		P_GET_OBJECT(UAbilitySystemComponent,Z_Param_OptionalInstigatorFilterComponent); \
		P_FINISH; \
		*(int32*)Z_Param__Result=this->GetGameplayEffectCount(Z_Param_SourceGameplayEffect,Z_Param_OptionalInstigatorFilterComponent); \
	} \
 \
	DECLARE_FUNCTION(execGetEffectContext) \
	{ \
		P_FINISH; \
		*(FGameplayEffectContextHandle*)Z_Param__Result=this->GetEffectContext(); \
	} \
 \
	DECLARE_FUNCTION(execGetOutgoingSpec) \
	{ \
		P_GET_OBJECT(UGameplayEffect,Z_Param_GameplayEffect); \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Level); \
		P_FINISH; \
		*(FGameplayEffectSpecHandle*)Z_Param__Result=this->GetOutgoingSpec(Z_Param_GameplayEffect,Z_Param_Level); \
	} \
 \
	DECLARE_FUNCTION(execMakeOutgoingSpec) \
	{ \
		P_GET_OBJECT(UClass,Z_Param_GameplayEffectClass); \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Level); \
		P_GET_STRUCT(FGameplayEffectContextHandle,Z_Param_Context); \
		P_FINISH; \
		*(FGameplayEffectSpecHandle*)Z_Param__Result=this->MakeOutgoingSpec(Z_Param_GameplayEffectClass,Z_Param_Level,Z_Param_Context); \
	} \
 \
	DECLARE_FUNCTION(execRemoveActiveGameplayEffectBySourceEffect) \
	{ \
		P_GET_OBJECT(UClass,Z_Param_GameplayEffect); \
		P_GET_OBJECT(UAbilitySystemComponent,Z_Param_InstigatorAbilitySystemComponent); \
		P_GET_PROPERTY(UIntProperty,Z_Param_StacksToRemove); \
		P_FINISH; \
		this->RemoveActiveGameplayEffectBySourceEffect(Z_Param_GameplayEffect,Z_Param_InstigatorAbilitySystemComponent,Z_Param_StacksToRemove); \
	} \
 \
	DECLARE_FUNCTION(execRemoveActiveGameplayEffect) \
	{ \
		P_GET_STRUCT(FActiveGameplayEffectHandle,Z_Param_Handle); \
		P_GET_PROPERTY(UIntProperty,Z_Param_StacksToRemove); \
		P_FINISH; \
		*(bool*)Z_Param__Result=this->RemoveActiveGameplayEffect(Z_Param_Handle,Z_Param_StacksToRemove); \
	} \
 \
	DECLARE_FUNCTION(execBP_ApplyGameplayEffectSpecToSelf) \
	{ \
		P_GET_STRUCT_REF(FGameplayEffectSpecHandle,Z_Param_Out_SpecHandle); \
		P_FINISH; \
		*(FActiveGameplayEffectHandle*)Z_Param__Result=this->BP_ApplyGameplayEffectSpecToSelf(Z_Param_Out_SpecHandle); \
	} \
 \
	DECLARE_FUNCTION(execBP_ApplyGameplayEffectSpecToTarget) \
	{ \
		P_GET_STRUCT_REF(FGameplayEffectSpecHandle,Z_Param_Out_SpecHandle); \
		P_GET_OBJECT(UAbilitySystemComponent,Z_Param_Target); \
		P_FINISH; \
		*(FActiveGameplayEffectHandle*)Z_Param__Result=this->BP_ApplyGameplayEffectSpecToTarget(Z_Param_Out_SpecHandle,Z_Param_Target); \
	} \
 \
	DECLARE_FUNCTION(execOnRep_PredictionKey) \
	{ \
		P_FINISH; \
		this->OnRep_PredictionKey(); \
	} \
 \
	DECLARE_FUNCTION(execK2_InitStats) \
	{ \
		P_GET_OBJECT(UClass,Z_Param_Attributes); \
		P_GET_OBJECT(UDataTable,Z_Param_DataTable); \
		P_FINISH; \
		this->K2_InitStats(Z_Param_Attributes,Z_Param_DataTable); \
	}


#define Engine_Source_Runtime_GameplayAbilities_Public_AbilitySystemComponent_h_59_EVENT_PARMS \
	struct AbilitySystemComponent_eventClientActivateAbilityFailed_Parms \
	{ \
		FGameplayAbilitySpecHandle AbilityToActivate; \
		int16 PredictionKey; \
	}; \
	struct AbilitySystemComponent_eventClientActivateAbilitySucceed_Parms \
	{ \
		FGameplayAbilitySpecHandle AbilityToActivate; \
		FPredictionKey PredictionKey; \
	}; \
	struct AbilitySystemComponent_eventClientActivateAbilitySucceedWithEventData_Parms \
	{ \
		FGameplayAbilitySpecHandle AbilityToActivate; \
		FPredictionKey PredictionKey; \
		FGameplayEventData TriggerEventData; \
	}; \
	struct AbilitySystemComponent_eventClientCancelAbility_Parms \
	{ \
		FGameplayAbilitySpecHandle AbilityToCancel; \
		FGameplayAbilityActivationInfo ActivationInfo; \
	}; \
	struct AbilitySystemComponent_eventClientEndAbility_Parms \
	{ \
		FGameplayAbilitySpecHandle AbilityToEnd; \
		FGameplayAbilityActivationInfo ActivationInfo; \
	}; \
	struct AbilitySystemComponent_eventClientSetReplicatedEvent_Parms \
	{ \
		TEnumAsByte<EAbilityGenericReplicatedEvent::Type> EventType; \
		FGameplayAbilitySpecHandle AbilityHandle; \
		FPredictionKey AbilityOriginalPredictionKey; \
	}; \
	struct AbilitySystemComponent_eventClientTryActivateAbility_Parms \
	{ \
		FGameplayAbilitySpecHandle AbilityToActivate; \
	}; \
	struct AbilitySystemComponent_eventNetMulticast_InvokeGameplayCueAdded_Parms \
	{ \
		FGameplayTag GameplayCueTag; \
		FPredictionKey PredictionKey; \
		FGameplayEffectContextHandle EffectContext; \
	}; \
	struct AbilitySystemComponent_eventNetMulticast_InvokeGameplayCueAddedAndWhileActive_FromSpec_Parms \
	{ \
		FGameplayEffectSpecForRPC Spec; \
		FPredictionKey PredictionKey; \
	}; \
	struct AbilitySystemComponent_eventNetMulticast_InvokeGameplayCueExecuted_Parms \
	{ \
		FGameplayTag GameplayCueTag; \
		FPredictionKey PredictionKey; \
		FGameplayEffectContextHandle EffectContext; \
	}; \
	struct AbilitySystemComponent_eventNetMulticast_InvokeGameplayCueExecuted_FromSpec_Parms \
	{ \
		FGameplayEffectSpecForRPC Spec; \
		FPredictionKey PredictionKey; \
	}; \
	struct AbilitySystemComponent_eventNetMulticast_InvokeGameplayCueExecuted_WithParams_Parms \
	{ \
		FGameplayTag GameplayCueTag; \
		FPredictionKey PredictionKey; \
		FGameplayCueParameters GameplayCueParameters; \
	}; \
	struct AbilitySystemComponent_eventServerCancelAbility_Parms \
	{ \
		FGameplayAbilitySpecHandle AbilityToCancel; \
		FGameplayAbilityActivationInfo ActivationInfo; \
	}; \
	struct AbilitySystemComponent_eventServerCurrentMontageJumpToSectionName_Parms \
	{ \
		UAnimMontage* ClientAnimMontage; \
		FName SectionName; \
	}; \
	struct AbilitySystemComponent_eventServerCurrentMontageSetNextSectionName_Parms \
	{ \
		UAnimMontage* ClientAnimMontage; \
		float ClientPosition; \
		FName SectionName; \
		FName NextSectionName; \
	}; \
	struct AbilitySystemComponent_eventServerEndAbility_Parms \
	{ \
		FGameplayAbilitySpecHandle AbilityToEnd; \
		FGameplayAbilityActivationInfo ActivationInfo; \
		FPredictionKey PredictionKey; \
	}; \
	struct AbilitySystemComponent_eventServerSetInputPressed_Parms \
	{ \
		FGameplayAbilitySpecHandle AbilityHandle; \
	}; \
	struct AbilitySystemComponent_eventServerSetInputReleased_Parms \
	{ \
		FGameplayAbilitySpecHandle AbilityHandle; \
	}; \
	struct AbilitySystemComponent_eventServerSetReplicatedEvent_Parms \
	{ \
		TEnumAsByte<EAbilityGenericReplicatedEvent::Type> EventType; \
		FGameplayAbilitySpecHandle AbilityHandle; \
		FPredictionKey AbilityOriginalPredictionKey; \
		FPredictionKey CurrentPredictionKey; \
	}; \
	struct AbilitySystemComponent_eventServerSetReplicatedTargetData_Parms \
	{ \
		FGameplayAbilitySpecHandle AbilityHandle; \
		FPredictionKey AbilityOriginalPredictionKey; \
		FGameplayAbilityTargetDataHandle ReplicatedTargetDataHandle; \
		FGameplayTag ApplicationTag; \
		FPredictionKey CurrentPredictionKey; \
	}; \
	struct AbilitySystemComponent_eventServerSetReplicatedTargetDataCancelled_Parms \
	{ \
		FGameplayAbilitySpecHandle AbilityHandle; \
		FPredictionKey AbilityOriginalPredictionKey; \
		FPredictionKey CurrentPredictionKey; \
	}; \
	struct AbilitySystemComponent_eventServerTryActivateAbility_Parms \
	{ \
		FGameplayAbilitySpecHandle AbilityToActivate; \
		bool InputPressed; \
		FPredictionKey PredictionKey; \
	}; \
	struct AbilitySystemComponent_eventServerTryActivateAbilityWithEventData_Parms \
	{ \
		FGameplayAbilitySpecHandle AbilityToActivate; \
		bool InputPressed; \
		FPredictionKey PredictionKey; \
		FGameplayEventData TriggerEventData; \
	};


extern GAMEPLAYABILITIES_API  FName GAMEPLAYABILITIES_ClientActivateAbilityFailed;
extern GAMEPLAYABILITIES_API  FName GAMEPLAYABILITIES_ClientActivateAbilitySucceed;
extern GAMEPLAYABILITIES_API  FName GAMEPLAYABILITIES_ClientActivateAbilitySucceedWithEventData;
extern GAMEPLAYABILITIES_API  FName GAMEPLAYABILITIES_ClientCancelAbility;
extern GAMEPLAYABILITIES_API  FName GAMEPLAYABILITIES_ClientEndAbility;
extern GAMEPLAYABILITIES_API  FName GAMEPLAYABILITIES_ClientSetReplicatedEvent;
extern GAMEPLAYABILITIES_API  FName GAMEPLAYABILITIES_ClientTryActivateAbility;
extern GAMEPLAYABILITIES_API  FName GAMEPLAYABILITIES_NetMulticast_InvokeGameplayCueAdded;
extern GAMEPLAYABILITIES_API  FName GAMEPLAYABILITIES_NetMulticast_InvokeGameplayCueAddedAndWhileActive_FromSpec;
extern GAMEPLAYABILITIES_API  FName GAMEPLAYABILITIES_NetMulticast_InvokeGameplayCueExecuted;
extern GAMEPLAYABILITIES_API  FName GAMEPLAYABILITIES_NetMulticast_InvokeGameplayCueExecuted_FromSpec;
extern GAMEPLAYABILITIES_API  FName GAMEPLAYABILITIES_NetMulticast_InvokeGameplayCueExecuted_WithParams;
extern GAMEPLAYABILITIES_API  FName GAMEPLAYABILITIES_ServerCancelAbility;
extern GAMEPLAYABILITIES_API  FName GAMEPLAYABILITIES_ServerCurrentMontageJumpToSectionName;
extern GAMEPLAYABILITIES_API  FName GAMEPLAYABILITIES_ServerCurrentMontageSetNextSectionName;
extern GAMEPLAYABILITIES_API  FName GAMEPLAYABILITIES_ServerEndAbility;
extern GAMEPLAYABILITIES_API  FName GAMEPLAYABILITIES_ServerSetInputPressed;
extern GAMEPLAYABILITIES_API  FName GAMEPLAYABILITIES_ServerSetInputReleased;
extern GAMEPLAYABILITIES_API  FName GAMEPLAYABILITIES_ServerSetReplicatedEvent;
extern GAMEPLAYABILITIES_API  FName GAMEPLAYABILITIES_ServerSetReplicatedTargetData;
extern GAMEPLAYABILITIES_API  FName GAMEPLAYABILITIES_ServerSetReplicatedTargetDataCancelled;
extern GAMEPLAYABILITIES_API  FName GAMEPLAYABILITIES_ServerTryActivateAbility;
extern GAMEPLAYABILITIES_API  FName GAMEPLAYABILITIES_ServerTryActivateAbilityWithEventData;
#define Engine_Source_Runtime_GameplayAbilities_Public_AbilitySystemComponent_h_59_CALLBACK_WRAPPERS
#define Engine_Source_Runtime_GameplayAbilities_Public_AbilitySystemComponent_h_59_INCLASS_NO_PURE_DECLS \
	private: \
	static void StaticRegisterNativesUAbilitySystemComponent(); \
	friend GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UAbilitySystemComponent(); \
	public: \
	DECLARE_CLASS(UAbilitySystemComponent, UGameplayTasksComponent, COMPILED_IN_FLAGS(0), 0, GameplayAbilities, NO_API) \
	DECLARE_SERIALIZER(UAbilitySystemComponent) \
	/** Indicates whether the class is compiled into the engine */    enum {IsIntrinsic=COMPILED_IN_INTRINSIC}; \
	virtual UObject* _getUObject() const override { return const_cast<UAbilitySystemComponent*>(this); } \
	void GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimeProps) const override;


#define Engine_Source_Runtime_GameplayAbilities_Public_AbilitySystemComponent_h_59_INCLASS \
	private: \
	static void StaticRegisterNativesUAbilitySystemComponent(); \
	friend GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UAbilitySystemComponent(); \
	public: \
	DECLARE_CLASS(UAbilitySystemComponent, UGameplayTasksComponent, COMPILED_IN_FLAGS(0), 0, GameplayAbilities, NO_API) \
	DECLARE_SERIALIZER(UAbilitySystemComponent) \
	/** Indicates whether the class is compiled into the engine */    enum {IsIntrinsic=COMPILED_IN_INTRINSIC}; \
	virtual UObject* _getUObject() const override { return const_cast<UAbilitySystemComponent*>(this); } \
	void GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimeProps) const override;


#define Engine_Source_Runtime_GameplayAbilities_Public_AbilitySystemComponent_h_59_STANDARD_CONSTRUCTORS \
	/** Standard constructor, called after all reflected properties have been initialized */ \
	NO_API UAbilitySystemComponent(const FObjectInitializer& ObjectInitializer = FObjectInitializer::Get()); \
	DEFINE_DEFAULT_OBJECT_INITIALIZER_CONSTRUCTOR_CALL(UAbilitySystemComponent) \
	DECLARE_VTABLE_PTR_HELPER_CTOR(NO_API, UAbilitySystemComponent); \
DEFINE_VTABLE_PTR_HELPER_CTOR_CALLER(UAbilitySystemComponent); \
private: \
	/** Private copy-constructor, should never be used */ \
	NO_API UAbilitySystemComponent(const UAbilitySystemComponent& InCopy); \
public:


#define Engine_Source_Runtime_GameplayAbilities_Public_AbilitySystemComponent_h_59_ENHANCED_CONSTRUCTORS \
	/** Standard constructor, called after all reflected properties have been initialized */ \
	NO_API UAbilitySystemComponent(const FObjectInitializer& ObjectInitializer = FObjectInitializer::Get()) : Super(ObjectInitializer) { }; \
private: \
	/** Private copy-constructor, should never be used */ \
	NO_API UAbilitySystemComponent(const UAbilitySystemComponent& InCopy); \
public: \
	DECLARE_VTABLE_PTR_HELPER_CTOR(NO_API, UAbilitySystemComponent); \
DEFINE_VTABLE_PTR_HELPER_CTOR_CALLER(UAbilitySystemComponent); \
	DEFINE_DEFAULT_OBJECT_INITIALIZER_CONSTRUCTOR_CALL(UAbilitySystemComponent)


#define Engine_Source_Runtime_GameplayAbilities_Public_AbilitySystemComponent_h_56_PROLOG \
	Engine_Source_Runtime_GameplayAbilities_Public_AbilitySystemComponent_h_59_EVENT_PARMS


#define Engine_Source_Runtime_GameplayAbilities_Public_AbilitySystemComponent_h_59_GENERATED_BODY_LEGACY \
PRAGMA_DISABLE_DEPRECATION_WARNINGS \
public: \
	Engine_Source_Runtime_GameplayAbilities_Public_AbilitySystemComponent_h_59_RPC_WRAPPERS \
	Engine_Source_Runtime_GameplayAbilities_Public_AbilitySystemComponent_h_59_CALLBACK_WRAPPERS \
	Engine_Source_Runtime_GameplayAbilities_Public_AbilitySystemComponent_h_59_INCLASS \
	Engine_Source_Runtime_GameplayAbilities_Public_AbilitySystemComponent_h_59_STANDARD_CONSTRUCTORS \
public: \
PRAGMA_ENABLE_DEPRECATION_WARNINGS


#define Engine_Source_Runtime_GameplayAbilities_Public_AbilitySystemComponent_h_59_GENERATED_BODY \
PRAGMA_DISABLE_DEPRECATION_WARNINGS \
public: \
	Engine_Source_Runtime_GameplayAbilities_Public_AbilitySystemComponent_h_59_RPC_WRAPPERS_NO_PURE_DECLS \
	Engine_Source_Runtime_GameplayAbilities_Public_AbilitySystemComponent_h_59_CALLBACK_WRAPPERS \
	Engine_Source_Runtime_GameplayAbilities_Public_AbilitySystemComponent_h_59_INCLASS_NO_PURE_DECLS \
	Engine_Source_Runtime_GameplayAbilities_Public_AbilitySystemComponent_h_59_ENHANCED_CONSTRUCTORS \
static_assert(false, "Unknown access specifier for GENERATED_BODY() macro in class AbilitySystemComponent."); \
PRAGMA_ENABLE_DEPRECATION_WARNINGS


#undef CURRENT_FILE_ID
#define CURRENT_FILE_ID Engine_Source_Runtime_GameplayAbilities_Public_AbilitySystemComponent_h


PRAGMA_ENABLE_DEPRECATION_WARNINGS
