// Copyright 1998-2015 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Boilerplate C++ definitions for a single module.
	This is automatically generated by UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "Private/AbilitySystemPrivatePCH.h"
#include "GameplayAbilities.generated.dep.h"
PRAGMA_DISABLE_DEPRECATION_WARNINGS
void EmptyLinkFunctionForGeneratedCodeGameplayAbilities() {}
class UScriptStruct* FAttributeMetaData::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FAttributeMetaData();
		extern GAMEPLAYABILITIES_API uint32 Get_Z_Construct_UScriptStruct_FAttributeMetaData_CRC();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FAttributeMetaData, Z_Construct_UPackage_GameplayAbilities(), TEXT("AttributeMetaData"), sizeof(FAttributeMetaData), Get_Z_Construct_UScriptStruct_FAttributeMetaData_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FAttributeMetaData(FAttributeMetaData::StaticStruct, TEXT("/Script/GameplayAbilities"));
static struct FScriptStruct_GameplayAbilities_StaticRegisterNativesFAttributeMetaData
{
	FScriptStruct_GameplayAbilities_StaticRegisterNativesFAttributeMetaData()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("AttributeMetaData")),new UScriptStruct::TCppStructOps<FAttributeMetaData>);
	}
} ScriptStruct_GameplayAbilities_StaticRegisterNativesFAttributeMetaData;
class UScriptStruct* FScalableFloat::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FScalableFloat();
		extern GAMEPLAYABILITIES_API uint32 Get_Z_Construct_UScriptStruct_FScalableFloat_CRC();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FScalableFloat, Z_Construct_UPackage_GameplayAbilities(), TEXT("ScalableFloat"), sizeof(FScalableFloat), Get_Z_Construct_UScriptStruct_FScalableFloat_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FScalableFloat(FScalableFloat::StaticStruct, TEXT("/Script/GameplayAbilities"));
static struct FScriptStruct_GameplayAbilities_StaticRegisterNativesFScalableFloat
{
	FScriptStruct_GameplayAbilities_StaticRegisterNativesFScalableFloat()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("ScalableFloat")),new UScriptStruct::TCppStructOps<FScalableFloat>);
	}
} ScriptStruct_GameplayAbilities_StaticRegisterNativesFScalableFloat;
class UScriptStruct* FGlobalCurveDataOverride::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGlobalCurveDataOverride();
		extern GAMEPLAYABILITIES_API uint32 Get_Z_Construct_UScriptStruct_FGlobalCurveDataOverride_CRC();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FGlobalCurveDataOverride, Z_Construct_UPackage_GameplayAbilities(), TEXT("GlobalCurveDataOverride"), sizeof(FGlobalCurveDataOverride), Get_Z_Construct_UScriptStruct_FGlobalCurveDataOverride_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FGlobalCurveDataOverride(FGlobalCurveDataOverride::StaticStruct, TEXT("/Script/GameplayAbilities"));
static struct FScriptStruct_GameplayAbilities_StaticRegisterNativesFGlobalCurveDataOverride
{
	FScriptStruct_GameplayAbilities_StaticRegisterNativesFGlobalCurveDataOverride()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("GlobalCurveDataOverride")),new UScriptStruct::TCppStructOps<FGlobalCurveDataOverride>);
	}
} ScriptStruct_GameplayAbilities_StaticRegisterNativesFGlobalCurveDataOverride;
class UScriptStruct* FGameplayAttribute::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayAttribute();
		extern GAMEPLAYABILITIES_API uint32 Get_Z_Construct_UScriptStruct_FGameplayAttribute_CRC();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FGameplayAttribute, Z_Construct_UPackage_GameplayAbilities(), TEXT("GameplayAttribute"), sizeof(FGameplayAttribute), Get_Z_Construct_UScriptStruct_FGameplayAttribute_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FGameplayAttribute(FGameplayAttribute::StaticStruct, TEXT("/Script/GameplayAbilities"));
static struct FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayAttribute
{
	FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayAttribute()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("GameplayAttribute")),new UScriptStruct::TCppStructOps<FGameplayAttribute>);
	}
} ScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayAttribute;
	void UAttributeSet::StaticRegisterNativesUAttributeSet()
	{
	}
	IMPLEMENT_CLASS(UAttributeSet, 3831697634);
class UScriptStruct* FPredictionKey::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FPredictionKey();
		extern GAMEPLAYABILITIES_API uint32 Get_Z_Construct_UScriptStruct_FPredictionKey_CRC();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FPredictionKey, Z_Construct_UPackage_GameplayAbilities(), TEXT("PredictionKey"), sizeof(FPredictionKey), Get_Z_Construct_UScriptStruct_FPredictionKey_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FPredictionKey(FPredictionKey::StaticStruct, TEXT("/Script/GameplayAbilities"));
static struct FScriptStruct_GameplayAbilities_StaticRegisterNativesFPredictionKey
{
	FScriptStruct_GameplayAbilities_StaticRegisterNativesFPredictionKey()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("PredictionKey")),new UScriptStruct::TCppStructOps<FPredictionKey>);
	}
} ScriptStruct_GameplayAbilities_StaticRegisterNativesFPredictionKey;
static class UEnum* EGameplayTagEventType_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UEnum* Z_Construct_UEnum_GameplayAbilities_EGameplayTagEventType();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticEnum(Z_Construct_UEnum_GameplayAbilities_EGameplayTagEventType, Z_Construct_UPackage_GameplayAbilities(), TEXT("EGameplayTagEventType"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EGameplayTagEventType(EGameplayTagEventType_StaticEnum, TEXT("/Script/GameplayAbilities"));
static class UEnum* EGameplayCueEvent_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UEnum* Z_Construct_UEnum_GameplayAbilities_EGameplayCueEvent();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticEnum(Z_Construct_UEnum_GameplayAbilities_EGameplayCueEvent, Z_Construct_UPackage_GameplayAbilities(), TEXT("EGameplayCueEvent"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EGameplayCueEvent(EGameplayCueEvent_StaticEnum, TEXT("/Script/GameplayAbilities"));
static class UEnum* EGameplayEffectStackingType_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UEnum* Z_Construct_UEnum_GameplayAbilities_EGameplayEffectStackingType();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticEnum(Z_Construct_UEnum_GameplayAbilities_EGameplayEffectStackingType, Z_Construct_UPackage_GameplayAbilities(), TEXT("EGameplayEffectStackingType"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EGameplayEffectStackingType(EGameplayEffectStackingType_StaticEnum, TEXT("/Script/GameplayAbilities"));
static class UEnum* EGameplayEffectAttributeCaptureSource_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UEnum* Z_Construct_UEnum_GameplayAbilities_EGameplayEffectAttributeCaptureSource();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticEnum(Z_Construct_UEnum_GameplayAbilities_EGameplayEffectAttributeCaptureSource, Z_Construct_UPackage_GameplayAbilities(), TEXT("EGameplayEffectAttributeCaptureSource"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EGameplayEffectAttributeCaptureSource(EGameplayEffectAttributeCaptureSource_StaticEnum, TEXT("/Script/GameplayAbilities"));
static class UEnum* EGameplayModOp_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UEnum* Z_Construct_UEnum_GameplayAbilities_EGameplayModOp();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticEnum(Z_Construct_UEnum_GameplayAbilities_EGameplayModOp, Z_Construct_UPackage_GameplayAbilities(), TEXT("EGameplayModOp"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EGameplayModOp(EGameplayModOp_StaticEnum, TEXT("/Script/GameplayAbilities"));
class UScriptStruct* FGameplayEffectSpecHandle::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayEffectSpecHandle();
		extern GAMEPLAYABILITIES_API uint32 Get_Z_Construct_UScriptStruct_FGameplayEffectSpecHandle_CRC();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FGameplayEffectSpecHandle, Z_Construct_UPackage_GameplayAbilities(), TEXT("GameplayEffectSpecHandle"), sizeof(FGameplayEffectSpecHandle), Get_Z_Construct_UScriptStruct_FGameplayEffectSpecHandle_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FGameplayEffectSpecHandle(FGameplayEffectSpecHandle::StaticStruct, TEXT("/Script/GameplayAbilities"));
static struct FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayEffectSpecHandle
{
	FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayEffectSpecHandle()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("GameplayEffectSpecHandle")),new UScriptStruct::TCppStructOps<FGameplayEffectSpecHandle>);
	}
} ScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayEffectSpecHandle;
class UScriptStruct* FTagContainerAggregator::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FTagContainerAggregator();
		extern GAMEPLAYABILITIES_API uint32 Get_Z_Construct_UScriptStruct_FTagContainerAggregator_CRC();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FTagContainerAggregator, Z_Construct_UPackage_GameplayAbilities(), TEXT("TagContainerAggregator"), sizeof(FTagContainerAggregator), Get_Z_Construct_UScriptStruct_FTagContainerAggregator_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FTagContainerAggregator(FTagContainerAggregator::StaticStruct, TEXT("/Script/GameplayAbilities"));
static struct FScriptStruct_GameplayAbilities_StaticRegisterNativesFTagContainerAggregator
{
	FScriptStruct_GameplayAbilities_StaticRegisterNativesFTagContainerAggregator()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("TagContainerAggregator")),new UScriptStruct::TCppStructOps<FTagContainerAggregator>);
	}
} ScriptStruct_GameplayAbilities_StaticRegisterNativesFTagContainerAggregator;
class UScriptStruct* FGameplayTagRequirements::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayTagRequirements();
		extern GAMEPLAYABILITIES_API uint32 Get_Z_Construct_UScriptStruct_FGameplayTagRequirements_CRC();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FGameplayTagRequirements, Z_Construct_UPackage_GameplayAbilities(), TEXT("GameplayTagRequirements"), sizeof(FGameplayTagRequirements), Get_Z_Construct_UScriptStruct_FGameplayTagRequirements_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FGameplayTagRequirements(FGameplayTagRequirements::StaticStruct, TEXT("/Script/GameplayAbilities"));
static struct FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayTagRequirements
{
	FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayTagRequirements()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("GameplayTagRequirements")),new UScriptStruct::TCppStructOps<FGameplayTagRequirements>);
	}
} ScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayTagRequirements;
class UScriptStruct* FGameplayCueParameters::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayCueParameters();
		extern GAMEPLAYABILITIES_API uint32 Get_Z_Construct_UScriptStruct_FGameplayCueParameters_CRC();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FGameplayCueParameters, Z_Construct_UPackage_GameplayAbilities(), TEXT("GameplayCueParameters"), sizeof(FGameplayCueParameters), Get_Z_Construct_UScriptStruct_FGameplayCueParameters_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FGameplayCueParameters(FGameplayCueParameters::StaticStruct, TEXT("/Script/GameplayAbilities"));
static struct FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayCueParameters
{
	FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayCueParameters()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("GameplayCueParameters")),new UScriptStruct::TCppStructOps<FGameplayCueParameters>);
	}
} ScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayCueParameters;
class UScriptStruct* FGameplayEffectContextHandle::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayEffectContextHandle();
		extern GAMEPLAYABILITIES_API uint32 Get_Z_Construct_UScriptStruct_FGameplayEffectContextHandle_CRC();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FGameplayEffectContextHandle, Z_Construct_UPackage_GameplayAbilities(), TEXT("GameplayEffectContextHandle"), sizeof(FGameplayEffectContextHandle), Get_Z_Construct_UScriptStruct_FGameplayEffectContextHandle_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FGameplayEffectContextHandle(FGameplayEffectContextHandle::StaticStruct, TEXT("/Script/GameplayAbilities"));
static struct FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayEffectContextHandle
{
	FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayEffectContextHandle()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("GameplayEffectContextHandle")),new UScriptStruct::TCppStructOps<FGameplayEffectContextHandle>);
	}
} ScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayEffectContextHandle;
class UScriptStruct* FGameplayEffectContext::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayEffectContext();
		extern GAMEPLAYABILITIES_API uint32 Get_Z_Construct_UScriptStruct_FGameplayEffectContext_CRC();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FGameplayEffectContext, Z_Construct_UPackage_GameplayAbilities(), TEXT("GameplayEffectContext"), sizeof(FGameplayEffectContext), Get_Z_Construct_UScriptStruct_FGameplayEffectContext_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FGameplayEffectContext(FGameplayEffectContext::StaticStruct, TEXT("/Script/GameplayAbilities"));
static struct FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayEffectContext
{
	FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayEffectContext()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("GameplayEffectContext")),new UScriptStruct::TCppStructOps<FGameplayEffectContext>);
	}
} ScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayEffectContext;
class UScriptStruct* FGameplayEffectAttributeCaptureDefinition::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayEffectAttributeCaptureDefinition();
		extern GAMEPLAYABILITIES_API uint32 Get_Z_Construct_UScriptStruct_FGameplayEffectAttributeCaptureDefinition_CRC();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FGameplayEffectAttributeCaptureDefinition, Z_Construct_UPackage_GameplayAbilities(), TEXT("GameplayEffectAttributeCaptureDefinition"), sizeof(FGameplayEffectAttributeCaptureDefinition), Get_Z_Construct_UScriptStruct_FGameplayEffectAttributeCaptureDefinition_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FGameplayEffectAttributeCaptureDefinition(FGameplayEffectAttributeCaptureDefinition::StaticStruct, TEXT("/Script/GameplayAbilities"));
static struct FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayEffectAttributeCaptureDefinition
{
	FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayEffectAttributeCaptureDefinition()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("GameplayEffectAttributeCaptureDefinition")),new UScriptStruct::TCppStructOps<FGameplayEffectAttributeCaptureDefinition>);
	}
} ScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayEffectAttributeCaptureDefinition;
class UScriptStruct* FGameplayModifierEvaluatedData::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayModifierEvaluatedData();
		extern GAMEPLAYABILITIES_API uint32 Get_Z_Construct_UScriptStruct_FGameplayModifierEvaluatedData_CRC();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FGameplayModifierEvaluatedData, Z_Construct_UPackage_GameplayAbilities(), TEXT("GameplayModifierEvaluatedData"), sizeof(FGameplayModifierEvaluatedData), Get_Z_Construct_UScriptStruct_FGameplayModifierEvaluatedData_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FGameplayModifierEvaluatedData(FGameplayModifierEvaluatedData::StaticStruct, TEXT("/Script/GameplayAbilities"));
static struct FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayModifierEvaluatedData
{
	FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayModifierEvaluatedData()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("GameplayModifierEvaluatedData")),new UScriptStruct::TCppStructOps<FGameplayModifierEvaluatedData>);
	}
} ScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayModifierEvaluatedData;
class UScriptStruct* FActiveGameplayEffectHandle::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FActiveGameplayEffectHandle();
		extern GAMEPLAYABILITIES_API uint32 Get_Z_Construct_UScriptStruct_FActiveGameplayEffectHandle_CRC();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FActiveGameplayEffectHandle, Z_Construct_UPackage_GameplayAbilities(), TEXT("ActiveGameplayEffectHandle"), sizeof(FActiveGameplayEffectHandle), Get_Z_Construct_UScriptStruct_FActiveGameplayEffectHandle_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FActiveGameplayEffectHandle(FActiveGameplayEffectHandle::StaticStruct, TEXT("/Script/GameplayAbilities"));
static struct FScriptStruct_GameplayAbilities_StaticRegisterNativesFActiveGameplayEffectHandle
{
	FScriptStruct_GameplayAbilities_StaticRegisterNativesFActiveGameplayEffectHandle()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("ActiveGameplayEffectHandle")),new UScriptStruct::TCppStructOps<FActiveGameplayEffectHandle>);
	}
} ScriptStruct_GameplayAbilities_StaticRegisterNativesFActiveGameplayEffectHandle;
static class UEnum* EAbilityGenericReplicatedEvent_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UEnum* Z_Construct_UEnum_GameplayAbilities_EAbilityGenericReplicatedEvent();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticEnum(Z_Construct_UEnum_GameplayAbilities_EAbilityGenericReplicatedEvent, Z_Construct_UPackage_GameplayAbilities(), TEXT("EAbilityGenericReplicatedEvent"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EAbilityGenericReplicatedEvent(EAbilityGenericReplicatedEvent_StaticEnum, TEXT("/Script/GameplayAbilities"));
static class UEnum* EGameplayAbilityTargetingLocationType_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UEnum* Z_Construct_UEnum_GameplayAbilities_EGameplayAbilityTargetingLocationType();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticEnum(Z_Construct_UEnum_GameplayAbilities_EGameplayAbilityTargetingLocationType, Z_Construct_UPackage_GameplayAbilities(), TEXT("EGameplayAbilityTargetingLocationType"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EGameplayAbilityTargetingLocationType(EGameplayAbilityTargetingLocationType_StaticEnum, TEXT("/Script/GameplayAbilities"));
static class UEnum* EGameplayTargetingConfirmation_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UEnum* Z_Construct_UEnum_GameplayAbilities_EGameplayTargetingConfirmation();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticEnum(Z_Construct_UEnum_GameplayAbilities_EGameplayTargetingConfirmation, Z_Construct_UPackage_GameplayAbilities(), TEXT("EGameplayTargetingConfirmation"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EGameplayTargetingConfirmation(EGameplayTargetingConfirmation_StaticEnum, TEXT("/Script/GameplayAbilities"));
class UScriptStruct* FGameplayAbilityTargetData_SingleTargetHit::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayAbilityTargetData_SingleTargetHit();
		extern GAMEPLAYABILITIES_API uint32 Get_Z_Construct_UScriptStruct_FGameplayAbilityTargetData_SingleTargetHit_CRC();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FGameplayAbilityTargetData_SingleTargetHit, Z_Construct_UPackage_GameplayAbilities(), TEXT("GameplayAbilityTargetData_SingleTargetHit"), sizeof(FGameplayAbilityTargetData_SingleTargetHit), Get_Z_Construct_UScriptStruct_FGameplayAbilityTargetData_SingleTargetHit_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FGameplayAbilityTargetData_SingleTargetHit(FGameplayAbilityTargetData_SingleTargetHit::StaticStruct, TEXT("/Script/GameplayAbilities"));
static struct FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayAbilityTargetData_SingleTargetHit
{
	FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayAbilityTargetData_SingleTargetHit()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("GameplayAbilityTargetData_SingleTargetHit")),new UScriptStruct::TCppStructOps<FGameplayAbilityTargetData_SingleTargetHit>);
	}
} ScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayAbilityTargetData_SingleTargetHit;
class UScriptStruct* FGameplayAbilityTargetData_ActorArray::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayAbilityTargetData_ActorArray();
		extern GAMEPLAYABILITIES_API uint32 Get_Z_Construct_UScriptStruct_FGameplayAbilityTargetData_ActorArray_CRC();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FGameplayAbilityTargetData_ActorArray, Z_Construct_UPackage_GameplayAbilities(), TEXT("GameplayAbilityTargetData_ActorArray"), sizeof(FGameplayAbilityTargetData_ActorArray), Get_Z_Construct_UScriptStruct_FGameplayAbilityTargetData_ActorArray_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FGameplayAbilityTargetData_ActorArray(FGameplayAbilityTargetData_ActorArray::StaticStruct, TEXT("/Script/GameplayAbilities"));
static struct FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayAbilityTargetData_ActorArray
{
	FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayAbilityTargetData_ActorArray()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("GameplayAbilityTargetData_ActorArray")),new UScriptStruct::TCppStructOps<FGameplayAbilityTargetData_ActorArray>);
	}
} ScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayAbilityTargetData_ActorArray;
class UScriptStruct* FGameplayAbilityTargetData_LocationInfo::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayAbilityTargetData_LocationInfo();
		extern GAMEPLAYABILITIES_API uint32 Get_Z_Construct_UScriptStruct_FGameplayAbilityTargetData_LocationInfo_CRC();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FGameplayAbilityTargetData_LocationInfo, Z_Construct_UPackage_GameplayAbilities(), TEXT("GameplayAbilityTargetData_LocationInfo"), sizeof(FGameplayAbilityTargetData_LocationInfo), Get_Z_Construct_UScriptStruct_FGameplayAbilityTargetData_LocationInfo_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FGameplayAbilityTargetData_LocationInfo(FGameplayAbilityTargetData_LocationInfo::StaticStruct, TEXT("/Script/GameplayAbilities"));
static struct FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayAbilityTargetData_LocationInfo
{
	FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayAbilityTargetData_LocationInfo()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("GameplayAbilityTargetData_LocationInfo")),new UScriptStruct::TCppStructOps<FGameplayAbilityTargetData_LocationInfo>);
	}
} ScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayAbilityTargetData_LocationInfo;
class UScriptStruct* FGameplayAbilityTargetingLocationInfo::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayAbilityTargetingLocationInfo();
		extern GAMEPLAYABILITIES_API uint32 Get_Z_Construct_UScriptStruct_FGameplayAbilityTargetingLocationInfo_CRC();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FGameplayAbilityTargetingLocationInfo, Z_Construct_UPackage_GameplayAbilities(), TEXT("GameplayAbilityTargetingLocationInfo"), sizeof(FGameplayAbilityTargetingLocationInfo), Get_Z_Construct_UScriptStruct_FGameplayAbilityTargetingLocationInfo_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FGameplayAbilityTargetingLocationInfo(FGameplayAbilityTargetingLocationInfo::StaticStruct, TEXT("/Script/GameplayAbilities"));
static struct FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayAbilityTargetingLocationInfo
{
	FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayAbilityTargetingLocationInfo()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("GameplayAbilityTargetingLocationInfo")),new UScriptStruct::TCppStructOps<FGameplayAbilityTargetingLocationInfo>);
	}
} ScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayAbilityTargetingLocationInfo;
class UScriptStruct* FGameplayAbilityTargetDataHandle::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayAbilityTargetDataHandle();
		extern GAMEPLAYABILITIES_API uint32 Get_Z_Construct_UScriptStruct_FGameplayAbilityTargetDataHandle_CRC();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FGameplayAbilityTargetDataHandle, Z_Construct_UPackage_GameplayAbilities(), TEXT("GameplayAbilityTargetDataHandle"), sizeof(FGameplayAbilityTargetDataHandle), Get_Z_Construct_UScriptStruct_FGameplayAbilityTargetDataHandle_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FGameplayAbilityTargetDataHandle(FGameplayAbilityTargetDataHandle::StaticStruct, TEXT("/Script/GameplayAbilities"));
static struct FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayAbilityTargetDataHandle
{
	FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayAbilityTargetDataHandle()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("GameplayAbilityTargetDataHandle")),new UScriptStruct::TCppStructOps<FGameplayAbilityTargetDataHandle>);
	}
} ScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayAbilityTargetDataHandle;
class UScriptStruct* FGameplayAbilityTargetData::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayAbilityTargetData();
		extern GAMEPLAYABILITIES_API uint32 Get_Z_Construct_UScriptStruct_FGameplayAbilityTargetData_CRC();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FGameplayAbilityTargetData, Z_Construct_UPackage_GameplayAbilities(), TEXT("GameplayAbilityTargetData"), sizeof(FGameplayAbilityTargetData), Get_Z_Construct_UScriptStruct_FGameplayAbilityTargetData_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FGameplayAbilityTargetData(FGameplayAbilityTargetData::StaticStruct, TEXT("/Script/GameplayAbilities"));
static struct FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayAbilityTargetData
{
	FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayAbilityTargetData()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("GameplayAbilityTargetData")),new UScriptStruct::TCppStructOps<FGameplayAbilityTargetData>);
	}
} ScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayAbilityTargetData;
static class UEnum* EGameplayEffectGrantedAbilityRemovePolicy_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UEnum* Z_Construct_UEnum_GameplayAbilities_EGameplayEffectGrantedAbilityRemovePolicy();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticEnum(Z_Construct_UEnum_GameplayAbilities_EGameplayEffectGrantedAbilityRemovePolicy, Z_Construct_UPackage_GameplayAbilities(), TEXT("EGameplayEffectGrantedAbilityRemovePolicy"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EGameplayEffectGrantedAbilityRemovePolicy(EGameplayEffectGrantedAbilityRemovePolicy_StaticEnum, TEXT("/Script/GameplayAbilities"));
static class UEnum* EGameplayAbilityActivationMode_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UEnum* Z_Construct_UEnum_GameplayAbilities_EGameplayAbilityActivationMode();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticEnum(Z_Construct_UEnum_GameplayAbilities_EGameplayAbilityActivationMode, Z_Construct_UPackage_GameplayAbilities(), TEXT("EGameplayAbilityActivationMode"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EGameplayAbilityActivationMode(EGameplayAbilityActivationMode_StaticEnum, TEXT("/Script/GameplayAbilities"));
class UScriptStruct* FGameplayAbilitySpecContainer::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayAbilitySpecContainer();
		extern GAMEPLAYABILITIES_API uint32 Get_Z_Construct_UScriptStruct_FGameplayAbilitySpecContainer_CRC();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FGameplayAbilitySpecContainer, Z_Construct_UPackage_GameplayAbilities(), TEXT("GameplayAbilitySpecContainer"), sizeof(FGameplayAbilitySpecContainer), Get_Z_Construct_UScriptStruct_FGameplayAbilitySpecContainer_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FGameplayAbilitySpecContainer(FGameplayAbilitySpecContainer::StaticStruct, TEXT("/Script/GameplayAbilities"));
static struct FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayAbilitySpecContainer
{
	FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayAbilitySpecContainer()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("GameplayAbilitySpecContainer")),new UScriptStruct::TCppStructOps<FGameplayAbilitySpecContainer>);
	}
} ScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayAbilitySpecContainer;
class UScriptStruct* FGameplayAbilitySpec::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayAbilitySpec();
		extern GAMEPLAYABILITIES_API uint32 Get_Z_Construct_UScriptStruct_FGameplayAbilitySpec_CRC();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FGameplayAbilitySpec, Z_Construct_UPackage_GameplayAbilities(), TEXT("GameplayAbilitySpec"), sizeof(FGameplayAbilitySpec), Get_Z_Construct_UScriptStruct_FGameplayAbilitySpec_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FGameplayAbilitySpec(FGameplayAbilitySpec::StaticStruct, TEXT("/Script/GameplayAbilities"));
static struct FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayAbilitySpec
{
	FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayAbilitySpec()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("GameplayAbilitySpec")),new UScriptStruct::TCppStructOps<FGameplayAbilitySpec>);
	}
} ScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayAbilitySpec;
class UScriptStruct* FGameplayAbilityActivationInfo::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayAbilityActivationInfo();
		extern GAMEPLAYABILITIES_API uint32 Get_Z_Construct_UScriptStruct_FGameplayAbilityActivationInfo_CRC();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FGameplayAbilityActivationInfo, Z_Construct_UPackage_GameplayAbilities(), TEXT("GameplayAbilityActivationInfo"), sizeof(FGameplayAbilityActivationInfo), Get_Z_Construct_UScriptStruct_FGameplayAbilityActivationInfo_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FGameplayAbilityActivationInfo(FGameplayAbilityActivationInfo::StaticStruct, TEXT("/Script/GameplayAbilities"));
static struct FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayAbilityActivationInfo
{
	FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayAbilityActivationInfo()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("GameplayAbilityActivationInfo")),new UScriptStruct::TCppStructOps<FGameplayAbilityActivationInfo>);
	}
} ScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayAbilityActivationInfo;
class UScriptStruct* FGameplayAbilitySpecDef::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayAbilitySpecDef();
		extern GAMEPLAYABILITIES_API uint32 Get_Z_Construct_UScriptStruct_FGameplayAbilitySpecDef_CRC();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FGameplayAbilitySpecDef, Z_Construct_UPackage_GameplayAbilities(), TEXT("GameplayAbilitySpecDef"), sizeof(FGameplayAbilitySpecDef), Get_Z_Construct_UScriptStruct_FGameplayAbilitySpecDef_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FGameplayAbilitySpecDef(FGameplayAbilitySpecDef::StaticStruct, TEXT("/Script/GameplayAbilities"));
static struct FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayAbilitySpecDef
{
	FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayAbilitySpecDef()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("GameplayAbilitySpecDef")),new UScriptStruct::TCppStructOps<FGameplayAbilitySpecDef>);
	}
} ScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayAbilitySpecDef;
class UScriptStruct* FGameplayAbilitySpecHandle::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayAbilitySpecHandle();
		extern GAMEPLAYABILITIES_API uint32 Get_Z_Construct_UScriptStruct_FGameplayAbilitySpecHandle_CRC();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FGameplayAbilitySpecHandle, Z_Construct_UPackage_GameplayAbilities(), TEXT("GameplayAbilitySpecHandle"), sizeof(FGameplayAbilitySpecHandle), Get_Z_Construct_UScriptStruct_FGameplayAbilitySpecHandle_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FGameplayAbilitySpecHandle(FGameplayAbilitySpecHandle::StaticStruct, TEXT("/Script/GameplayAbilities"));
static struct FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayAbilitySpecHandle
{
	FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayAbilitySpecHandle()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("GameplayAbilitySpecHandle")),new UScriptStruct::TCppStructOps<FGameplayAbilitySpecHandle>);
	}
} ScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayAbilitySpecHandle;
	void UGameplayEffectCalculation::StaticRegisterNativesUGameplayEffectCalculation()
	{
	}
	IMPLEMENT_CLASS(UGameplayEffectCalculation, 3857483195);
static class UEnum* EGameplayEffectStackingPeriodPolicy_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UEnum* Z_Construct_UEnum_GameplayAbilities_EGameplayEffectStackingPeriodPolicy();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticEnum(Z_Construct_UEnum_GameplayAbilities_EGameplayEffectStackingPeriodPolicy, Z_Construct_UPackage_GameplayAbilities(), TEXT("EGameplayEffectStackingPeriodPolicy"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EGameplayEffectStackingPeriodPolicy(EGameplayEffectStackingPeriodPolicy_StaticEnum, TEXT("/Script/GameplayAbilities"));
static class UEnum* EGameplayEffectStackingDurationPolicy_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UEnum* Z_Construct_UEnum_GameplayAbilities_EGameplayEffectStackingDurationPolicy();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticEnum(Z_Construct_UEnum_GameplayAbilities_EGameplayEffectStackingDurationPolicy, Z_Construct_UPackage_GameplayAbilities(), TEXT("EGameplayEffectStackingDurationPolicy"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EGameplayEffectStackingDurationPolicy(EGameplayEffectStackingDurationPolicy_StaticEnum, TEXT("/Script/GameplayAbilities"));
static class UEnum* EGameplayEffectDurationType_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UEnum* Z_Construct_UEnum_GameplayAbilities_EGameplayEffectDurationType();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticEnum(Z_Construct_UEnum_GameplayAbilities_EGameplayEffectDurationType, Z_Construct_UPackage_GameplayAbilities(), TEXT("EGameplayEffectDurationType"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EGameplayEffectDurationType(EGameplayEffectDurationType_StaticEnum, TEXT("/Script/GameplayAbilities"));
static class UEnum* EAttributeBasedFloatCalculationType_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UEnum* Z_Construct_UEnum_GameplayAbilities_EAttributeBasedFloatCalculationType();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticEnum(Z_Construct_UEnum_GameplayAbilities_EAttributeBasedFloatCalculationType, Z_Construct_UPackage_GameplayAbilities(), TEXT("EAttributeBasedFloatCalculationType"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EAttributeBasedFloatCalculationType(EAttributeBasedFloatCalculationType_StaticEnum, TEXT("/Script/GameplayAbilities"));
static class UEnum* EGameplayEffectMagnitudeCalculation_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UEnum* Z_Construct_UEnum_GameplayAbilities_EGameplayEffectMagnitudeCalculation();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticEnum(Z_Construct_UEnum_GameplayAbilities_EGameplayEffectMagnitudeCalculation, Z_Construct_UPackage_GameplayAbilities(), TEXT("EGameplayEffectMagnitudeCalculation"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EGameplayEffectMagnitudeCalculation(EGameplayEffectMagnitudeCalculation_StaticEnum, TEXT("/Script/GameplayAbilities"));
class UScriptStruct* FActiveGameplayEffectsContainer::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FActiveGameplayEffectsContainer();
		extern GAMEPLAYABILITIES_API uint32 Get_Z_Construct_UScriptStruct_FActiveGameplayEffectsContainer_CRC();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FActiveGameplayEffectsContainer, Z_Construct_UPackage_GameplayAbilities(), TEXT("ActiveGameplayEffectsContainer"), sizeof(FActiveGameplayEffectsContainer), Get_Z_Construct_UScriptStruct_FActiveGameplayEffectsContainer_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FActiveGameplayEffectsContainer(FActiveGameplayEffectsContainer::StaticStruct, TEXT("/Script/GameplayAbilities"));
static struct FScriptStruct_GameplayAbilities_StaticRegisterNativesFActiveGameplayEffectsContainer
{
	FScriptStruct_GameplayAbilities_StaticRegisterNativesFActiveGameplayEffectsContainer()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("ActiveGameplayEffectsContainer")),new UScriptStruct::TCppStructOps<FActiveGameplayEffectsContainer>);
	}
} ScriptStruct_GameplayAbilities_StaticRegisterNativesFActiveGameplayEffectsContainer;
class UScriptStruct* FActiveGameplayEffectQuery::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FActiveGameplayEffectQuery();
		extern GAMEPLAYABILITIES_API uint32 Get_Z_Construct_UScriptStruct_FActiveGameplayEffectQuery_CRC();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FActiveGameplayEffectQuery, Z_Construct_UPackage_GameplayAbilities(), TEXT("ActiveGameplayEffectQuery"), sizeof(FActiveGameplayEffectQuery), Get_Z_Construct_UScriptStruct_FActiveGameplayEffectQuery_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FActiveGameplayEffectQuery(FActiveGameplayEffectQuery::StaticStruct, TEXT("/Script/GameplayAbilities"));
static struct FScriptStruct_GameplayAbilities_StaticRegisterNativesFActiveGameplayEffectQuery
{
	FScriptStruct_GameplayAbilities_StaticRegisterNativesFActiveGameplayEffectQuery()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("ActiveGameplayEffectQuery")),new UScriptStruct::TCppStructOps<FActiveGameplayEffectQuery>);
	}
} ScriptStruct_GameplayAbilities_StaticRegisterNativesFActiveGameplayEffectQuery;
class UScriptStruct* FGameplayEffectQuery::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayEffectQuery();
		extern GAMEPLAYABILITIES_API uint32 Get_Z_Construct_UScriptStruct_FGameplayEffectQuery_CRC();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FGameplayEffectQuery, Z_Construct_UPackage_GameplayAbilities(), TEXT("GameplayEffectQuery"), sizeof(FGameplayEffectQuery), Get_Z_Construct_UScriptStruct_FGameplayEffectQuery_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FGameplayEffectQuery(FGameplayEffectQuery::StaticStruct, TEXT("/Script/GameplayAbilities"));
static struct FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayEffectQuery
{
	FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayEffectQuery()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("GameplayEffectQuery")),new UScriptStruct::TCppStructOps<FGameplayEffectQuery>);
	}
} ScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayEffectQuery;
class UScriptStruct* FActiveGameplayEffect::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FActiveGameplayEffect();
		extern GAMEPLAYABILITIES_API uint32 Get_Z_Construct_UScriptStruct_FActiveGameplayEffect_CRC();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FActiveGameplayEffect, Z_Construct_UPackage_GameplayAbilities(), TEXT("ActiveGameplayEffect"), sizeof(FActiveGameplayEffect), Get_Z_Construct_UScriptStruct_FActiveGameplayEffect_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FActiveGameplayEffect(FActiveGameplayEffect::StaticStruct, TEXT("/Script/GameplayAbilities"));
static struct FScriptStruct_GameplayAbilities_StaticRegisterNativesFActiveGameplayEffect
{
	FScriptStruct_GameplayAbilities_StaticRegisterNativesFActiveGameplayEffect()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("ActiveGameplayEffect")),new UScriptStruct::TCppStructOps<FActiveGameplayEffect>);
	}
} ScriptStruct_GameplayAbilities_StaticRegisterNativesFActiveGameplayEffect;
class UScriptStruct* FGameplayEffectSpecForRPC::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayEffectSpecForRPC();
		extern GAMEPLAYABILITIES_API uint32 Get_Z_Construct_UScriptStruct_FGameplayEffectSpecForRPC_CRC();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FGameplayEffectSpecForRPC, Z_Construct_UPackage_GameplayAbilities(), TEXT("GameplayEffectSpecForRPC"), sizeof(FGameplayEffectSpecForRPC), Get_Z_Construct_UScriptStruct_FGameplayEffectSpecForRPC_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FGameplayEffectSpecForRPC(FGameplayEffectSpecForRPC::StaticStruct, TEXT("/Script/GameplayAbilities"));
static struct FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayEffectSpecForRPC
{
	FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayEffectSpecForRPC()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("GameplayEffectSpecForRPC")),new UScriptStruct::TCppStructOps<FGameplayEffectSpecForRPC>);
	}
} ScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayEffectSpecForRPC;
class UScriptStruct* FGameplayEffectSpec::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayEffectSpec();
		extern GAMEPLAYABILITIES_API uint32 Get_Z_Construct_UScriptStruct_FGameplayEffectSpec_CRC();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FGameplayEffectSpec, Z_Construct_UPackage_GameplayAbilities(), TEXT("GameplayEffectSpec"), sizeof(FGameplayEffectSpec), Get_Z_Construct_UScriptStruct_FGameplayEffectSpec_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FGameplayEffectSpec(FGameplayEffectSpec::StaticStruct, TEXT("/Script/GameplayAbilities"));
static struct FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayEffectSpec
{
	FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayEffectSpec()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("GameplayEffectSpec")),new UScriptStruct::TCppStructOps<FGameplayEffectSpec>);
	}
} ScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayEffectSpec;
class UScriptStruct* FGameplayEffectAttributeCaptureSpecContainer::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayEffectAttributeCaptureSpecContainer();
		extern GAMEPLAYABILITIES_API uint32 Get_Z_Construct_UScriptStruct_FGameplayEffectAttributeCaptureSpecContainer_CRC();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FGameplayEffectAttributeCaptureSpecContainer, Z_Construct_UPackage_GameplayAbilities(), TEXT("GameplayEffectAttributeCaptureSpecContainer"), sizeof(FGameplayEffectAttributeCaptureSpecContainer), Get_Z_Construct_UScriptStruct_FGameplayEffectAttributeCaptureSpecContainer_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FGameplayEffectAttributeCaptureSpecContainer(FGameplayEffectAttributeCaptureSpecContainer::StaticStruct, TEXT("/Script/GameplayAbilities"));
static struct FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayEffectAttributeCaptureSpecContainer
{
	FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayEffectAttributeCaptureSpecContainer()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("GameplayEffectAttributeCaptureSpecContainer")),new UScriptStruct::TCppStructOps<FGameplayEffectAttributeCaptureSpecContainer>);
	}
} ScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayEffectAttributeCaptureSpecContainer;
class UScriptStruct* FGameplayEffectAttributeCaptureSpec::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayEffectAttributeCaptureSpec();
		extern GAMEPLAYABILITIES_API uint32 Get_Z_Construct_UScriptStruct_FGameplayEffectAttributeCaptureSpec_CRC();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FGameplayEffectAttributeCaptureSpec, Z_Construct_UPackage_GameplayAbilities(), TEXT("GameplayEffectAttributeCaptureSpec"), sizeof(FGameplayEffectAttributeCaptureSpec), Get_Z_Construct_UScriptStruct_FGameplayEffectAttributeCaptureSpec_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FGameplayEffectAttributeCaptureSpec(FGameplayEffectAttributeCaptureSpec::StaticStruct, TEXT("/Script/GameplayAbilities"));
static struct FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayEffectAttributeCaptureSpec
{
	FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayEffectAttributeCaptureSpec()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("GameplayEffectAttributeCaptureSpec")),new UScriptStruct::TCppStructOps<FGameplayEffectAttributeCaptureSpec>);
	}
} ScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayEffectAttributeCaptureSpec;
class UScriptStruct* FGameplayEffectModifiedAttribute::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayEffectModifiedAttribute();
		extern GAMEPLAYABILITIES_API uint32 Get_Z_Construct_UScriptStruct_FGameplayEffectModifiedAttribute_CRC();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FGameplayEffectModifiedAttribute, Z_Construct_UPackage_GameplayAbilities(), TEXT("GameplayEffectModifiedAttribute"), sizeof(FGameplayEffectModifiedAttribute), Get_Z_Construct_UScriptStruct_FGameplayEffectModifiedAttribute_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FGameplayEffectModifiedAttribute(FGameplayEffectModifiedAttribute::StaticStruct, TEXT("/Script/GameplayAbilities"));
static struct FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayEffectModifiedAttribute
{
	FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayEffectModifiedAttribute()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("GameplayEffectModifiedAttribute")),new UScriptStruct::TCppStructOps<FGameplayEffectModifiedAttribute>);
	}
} ScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayEffectModifiedAttribute;
class UScriptStruct* FModifierSpec::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FModifierSpec();
		extern GAMEPLAYABILITIES_API uint32 Get_Z_Construct_UScriptStruct_FModifierSpec_CRC();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FModifierSpec, Z_Construct_UPackage_GameplayAbilities(), TEXT("ModifierSpec"), sizeof(FModifierSpec), Get_Z_Construct_UScriptStruct_FModifierSpec_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FModifierSpec(FModifierSpec::StaticStruct, TEXT("/Script/GameplayAbilities"));
static struct FScriptStruct_GameplayAbilities_StaticRegisterNativesFModifierSpec
{
	FScriptStruct_GameplayAbilities_StaticRegisterNativesFModifierSpec()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("ModifierSpec")),new UScriptStruct::TCppStructOps<FModifierSpec>);
	}
} ScriptStruct_GameplayAbilities_StaticRegisterNativesFModifierSpec;
class UScriptStruct* FInheritedTagContainer::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FInheritedTagContainer();
		extern GAMEPLAYABILITIES_API uint32 Get_Z_Construct_UScriptStruct_FInheritedTagContainer_CRC();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FInheritedTagContainer, Z_Construct_UPackage_GameplayAbilities(), TEXT("InheritedTagContainer"), sizeof(FInheritedTagContainer), Get_Z_Construct_UScriptStruct_FInheritedTagContainer_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FInheritedTagContainer(FInheritedTagContainer::StaticStruct, TEXT("/Script/GameplayAbilities"));
static struct FScriptStruct_GameplayAbilities_StaticRegisterNativesFInheritedTagContainer
{
	FScriptStruct_GameplayAbilities_StaticRegisterNativesFInheritedTagContainer()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("InheritedTagContainer")),new UScriptStruct::TCppStructOps<FInheritedTagContainer>);
	}
} ScriptStruct_GameplayAbilities_StaticRegisterNativesFInheritedTagContainer;
class UScriptStruct* FGameplayEffectCue::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayEffectCue();
		extern GAMEPLAYABILITIES_API uint32 Get_Z_Construct_UScriptStruct_FGameplayEffectCue_CRC();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FGameplayEffectCue, Z_Construct_UPackage_GameplayAbilities(), TEXT("GameplayEffectCue"), sizeof(FGameplayEffectCue), Get_Z_Construct_UScriptStruct_FGameplayEffectCue_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FGameplayEffectCue(FGameplayEffectCue::StaticStruct, TEXT("/Script/GameplayAbilities"));
static struct FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayEffectCue
{
	FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayEffectCue()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("GameplayEffectCue")),new UScriptStruct::TCppStructOps<FGameplayEffectCue>);
	}
} ScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayEffectCue;
class UScriptStruct* FGameplayModifierInfo::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayModifierInfo();
		extern GAMEPLAYABILITIES_API uint32 Get_Z_Construct_UScriptStruct_FGameplayModifierInfo_CRC();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FGameplayModifierInfo, Z_Construct_UPackage_GameplayAbilities(), TEXT("GameplayModifierInfo"), sizeof(FGameplayModifierInfo), Get_Z_Construct_UScriptStruct_FGameplayModifierInfo_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FGameplayModifierInfo(FGameplayModifierInfo::StaticStruct, TEXT("/Script/GameplayAbilities"));
static struct FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayModifierInfo
{
	FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayModifierInfo()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("GameplayModifierInfo")),new UScriptStruct::TCppStructOps<FGameplayModifierInfo>);
	}
} ScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayModifierInfo;
class UScriptStruct* FGameplayEffectExecutionDefinition::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayEffectExecutionDefinition();
		extern GAMEPLAYABILITIES_API uint32 Get_Z_Construct_UScriptStruct_FGameplayEffectExecutionDefinition_CRC();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FGameplayEffectExecutionDefinition, Z_Construct_UPackage_GameplayAbilities(), TEXT("GameplayEffectExecutionDefinition"), sizeof(FGameplayEffectExecutionDefinition), Get_Z_Construct_UScriptStruct_FGameplayEffectExecutionDefinition_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FGameplayEffectExecutionDefinition(FGameplayEffectExecutionDefinition::StaticStruct, TEXT("/Script/GameplayAbilities"));
static struct FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayEffectExecutionDefinition
{
	FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayEffectExecutionDefinition()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("GameplayEffectExecutionDefinition")),new UScriptStruct::TCppStructOps<FGameplayEffectExecutionDefinition>);
	}
} ScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayEffectExecutionDefinition;
class UScriptStruct* FGameplayEffectExecutionScopedModifierInfo::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayEffectExecutionScopedModifierInfo();
		extern GAMEPLAYABILITIES_API uint32 Get_Z_Construct_UScriptStruct_FGameplayEffectExecutionScopedModifierInfo_CRC();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FGameplayEffectExecutionScopedModifierInfo, Z_Construct_UPackage_GameplayAbilities(), TEXT("GameplayEffectExecutionScopedModifierInfo"), sizeof(FGameplayEffectExecutionScopedModifierInfo), Get_Z_Construct_UScriptStruct_FGameplayEffectExecutionScopedModifierInfo_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FGameplayEffectExecutionScopedModifierInfo(FGameplayEffectExecutionScopedModifierInfo::StaticStruct, TEXT("/Script/GameplayAbilities"));
static struct FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayEffectExecutionScopedModifierInfo
{
	FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayEffectExecutionScopedModifierInfo()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("GameplayEffectExecutionScopedModifierInfo")),new UScriptStruct::TCppStructOps<FGameplayEffectExecutionScopedModifierInfo>);
	}
} ScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayEffectExecutionScopedModifierInfo;
class UScriptStruct* FGameplayEffectModifierMagnitude::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayEffectModifierMagnitude();
		extern GAMEPLAYABILITIES_API uint32 Get_Z_Construct_UScriptStruct_FGameplayEffectModifierMagnitude_CRC();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FGameplayEffectModifierMagnitude, Z_Construct_UPackage_GameplayAbilities(), TEXT("GameplayEffectModifierMagnitude"), sizeof(FGameplayEffectModifierMagnitude), Get_Z_Construct_UScriptStruct_FGameplayEffectModifierMagnitude_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FGameplayEffectModifierMagnitude(FGameplayEffectModifierMagnitude::StaticStruct, TEXT("/Script/GameplayAbilities"));
static struct FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayEffectModifierMagnitude
{
	FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayEffectModifierMagnitude()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("GameplayEffectModifierMagnitude")),new UScriptStruct::TCppStructOps<FGameplayEffectModifierMagnitude>);
	}
} ScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayEffectModifierMagnitude;
class UScriptStruct* FSetByCallerFloat::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FSetByCallerFloat();
		extern GAMEPLAYABILITIES_API uint32 Get_Z_Construct_UScriptStruct_FSetByCallerFloat_CRC();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FSetByCallerFloat, Z_Construct_UPackage_GameplayAbilities(), TEXT("SetByCallerFloat"), sizeof(FSetByCallerFloat), Get_Z_Construct_UScriptStruct_FSetByCallerFloat_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FSetByCallerFloat(FSetByCallerFloat::StaticStruct, TEXT("/Script/GameplayAbilities"));
static struct FScriptStruct_GameplayAbilities_StaticRegisterNativesFSetByCallerFloat
{
	FScriptStruct_GameplayAbilities_StaticRegisterNativesFSetByCallerFloat()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("SetByCallerFloat")),new UScriptStruct::TCppStructOps<FSetByCallerFloat>);
	}
} ScriptStruct_GameplayAbilities_StaticRegisterNativesFSetByCallerFloat;
class UScriptStruct* FCustomCalculationBasedFloat::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FCustomCalculationBasedFloat();
		extern GAMEPLAYABILITIES_API uint32 Get_Z_Construct_UScriptStruct_FCustomCalculationBasedFloat_CRC();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FCustomCalculationBasedFloat, Z_Construct_UPackage_GameplayAbilities(), TEXT("CustomCalculationBasedFloat"), sizeof(FCustomCalculationBasedFloat), Get_Z_Construct_UScriptStruct_FCustomCalculationBasedFloat_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FCustomCalculationBasedFloat(FCustomCalculationBasedFloat::StaticStruct, TEXT("/Script/GameplayAbilities"));
static struct FScriptStruct_GameplayAbilities_StaticRegisterNativesFCustomCalculationBasedFloat
{
	FScriptStruct_GameplayAbilities_StaticRegisterNativesFCustomCalculationBasedFloat()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("CustomCalculationBasedFloat")),new UScriptStruct::TCppStructOps<FCustomCalculationBasedFloat>);
	}
} ScriptStruct_GameplayAbilities_StaticRegisterNativesFCustomCalculationBasedFloat;
class UScriptStruct* FAttributeBasedFloat::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FAttributeBasedFloat();
		extern GAMEPLAYABILITIES_API uint32 Get_Z_Construct_UScriptStruct_FAttributeBasedFloat_CRC();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FAttributeBasedFloat, Z_Construct_UPackage_GameplayAbilities(), TEXT("AttributeBasedFloat"), sizeof(FAttributeBasedFloat), Get_Z_Construct_UScriptStruct_FAttributeBasedFloat_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FAttributeBasedFloat(FAttributeBasedFloat::StaticStruct, TEXT("/Script/GameplayAbilities"));
static struct FScriptStruct_GameplayAbilities_StaticRegisterNativesFAttributeBasedFloat
{
	FScriptStruct_GameplayAbilities_StaticRegisterNativesFAttributeBasedFloat()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("AttributeBasedFloat")),new UScriptStruct::TCppStructOps<FAttributeBasedFloat>);
	}
} ScriptStruct_GameplayAbilities_StaticRegisterNativesFAttributeBasedFloat;
	void UGameplayEffect::StaticRegisterNativesUGameplayEffect()
	{
	}
	IMPLEMENT_CLASS(UGameplayEffect, 881619926);
static class UEnum* EGameplayAbilityTriggerSource_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UEnum* Z_Construct_UEnum_GameplayAbilities_EGameplayAbilityTriggerSource();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticEnum(Z_Construct_UEnum_GameplayAbilities_EGameplayAbilityTriggerSource, Z_Construct_UPackage_GameplayAbilities(), TEXT("EGameplayAbilityTriggerSource"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EGameplayAbilityTriggerSource(EGameplayAbilityTriggerSource_StaticEnum, TEXT("/Script/GameplayAbilities"));
static class UEnum* EGameplayAbilityReplicationPolicy_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UEnum* Z_Construct_UEnum_GameplayAbilities_EGameplayAbilityReplicationPolicy();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticEnum(Z_Construct_UEnum_GameplayAbilities_EGameplayAbilityReplicationPolicy, Z_Construct_UPackage_GameplayAbilities(), TEXT("EGameplayAbilityReplicationPolicy"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EGameplayAbilityReplicationPolicy(EGameplayAbilityReplicationPolicy_StaticEnum, TEXT("/Script/GameplayAbilities"));
static class UEnum* EGameplayAbilityNetExecutionPolicy_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UEnum* Z_Construct_UEnum_GameplayAbilities_EGameplayAbilityNetExecutionPolicy();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticEnum(Z_Construct_UEnum_GameplayAbilities_EGameplayAbilityNetExecutionPolicy, Z_Construct_UPackage_GameplayAbilities(), TEXT("EGameplayAbilityNetExecutionPolicy"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EGameplayAbilityNetExecutionPolicy(EGameplayAbilityNetExecutionPolicy_StaticEnum, TEXT("/Script/GameplayAbilities"));
static class UEnum* EGameplayAbilityInstancingPolicy_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UEnum* Z_Construct_UEnum_GameplayAbilities_EGameplayAbilityInstancingPolicy();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticEnum(Z_Construct_UEnum_GameplayAbilities_EGameplayAbilityInstancingPolicy, Z_Construct_UPackage_GameplayAbilities(), TEXT("EGameplayAbilityInstancingPolicy"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EGameplayAbilityInstancingPolicy(EGameplayAbilityInstancingPolicy_StaticEnum, TEXT("/Script/GameplayAbilities"));
class UScriptStruct* FAttributeDefaults::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FAttributeDefaults();
		extern GAMEPLAYABILITIES_API uint32 Get_Z_Construct_UScriptStruct_FAttributeDefaults_CRC();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FAttributeDefaults, Z_Construct_UPackage_GameplayAbilities(), TEXT("AttributeDefaults"), sizeof(FAttributeDefaults), Get_Z_Construct_UScriptStruct_FAttributeDefaults_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FAttributeDefaults(FAttributeDefaults::StaticStruct, TEXT("/Script/GameplayAbilities"));
static struct FScriptStruct_GameplayAbilities_StaticRegisterNativesFAttributeDefaults
{
	FScriptStruct_GameplayAbilities_StaticRegisterNativesFAttributeDefaults()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("AttributeDefaults")),new UScriptStruct::TCppStructOps<FAttributeDefaults>);
	}
} ScriptStruct_GameplayAbilities_StaticRegisterNativesFAttributeDefaults;
class UScriptStruct* FGameplayEventData::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayEventData();
		extern GAMEPLAYABILITIES_API uint32 Get_Z_Construct_UScriptStruct_FGameplayEventData_CRC();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FGameplayEventData, Z_Construct_UPackage_GameplayAbilities(), TEXT("GameplayEventData"), sizeof(FGameplayEventData), Get_Z_Construct_UScriptStruct_FGameplayEventData_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FGameplayEventData(FGameplayEventData::StaticStruct, TEXT("/Script/GameplayAbilities"));
static struct FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayEventData
{
	FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayEventData()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("GameplayEventData")),new UScriptStruct::TCppStructOps<FGameplayEventData>);
	}
} ScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayEventData;
class UScriptStruct* FGameplayAbilityLocalAnimMontage::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayAbilityLocalAnimMontage();
		extern GAMEPLAYABILITIES_API uint32 Get_Z_Construct_UScriptStruct_FGameplayAbilityLocalAnimMontage_CRC();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FGameplayAbilityLocalAnimMontage, Z_Construct_UPackage_GameplayAbilities(), TEXT("GameplayAbilityLocalAnimMontage"), sizeof(FGameplayAbilityLocalAnimMontage), Get_Z_Construct_UScriptStruct_FGameplayAbilityLocalAnimMontage_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FGameplayAbilityLocalAnimMontage(FGameplayAbilityLocalAnimMontage::StaticStruct, TEXT("/Script/GameplayAbilities"));
static struct FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayAbilityLocalAnimMontage
{
	FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayAbilityLocalAnimMontage()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("GameplayAbilityLocalAnimMontage")),new UScriptStruct::TCppStructOps<FGameplayAbilityLocalAnimMontage>);
	}
} ScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayAbilityLocalAnimMontage;
class UScriptStruct* FGameplayAbilityRepAnimMontage::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayAbilityRepAnimMontage();
		extern GAMEPLAYABILITIES_API uint32 Get_Z_Construct_UScriptStruct_FGameplayAbilityRepAnimMontage_CRC();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FGameplayAbilityRepAnimMontage, Z_Construct_UPackage_GameplayAbilities(), TEXT("GameplayAbilityRepAnimMontage"), sizeof(FGameplayAbilityRepAnimMontage), Get_Z_Construct_UScriptStruct_FGameplayAbilityRepAnimMontage_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FGameplayAbilityRepAnimMontage(FGameplayAbilityRepAnimMontage::StaticStruct, TEXT("/Script/GameplayAbilities"));
static struct FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayAbilityRepAnimMontage
{
	FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayAbilityRepAnimMontage()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("GameplayAbilityRepAnimMontage")),new UScriptStruct::TCppStructOps<FGameplayAbilityRepAnimMontage>);
	}
} ScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayAbilityRepAnimMontage;
class UScriptStruct* FGameplayAbilitySpecHandleAndPredictionKey::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayAbilitySpecHandleAndPredictionKey();
		extern GAMEPLAYABILITIES_API uint32 Get_Z_Construct_UScriptStruct_FGameplayAbilitySpecHandleAndPredictionKey_CRC();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FGameplayAbilitySpecHandleAndPredictionKey, Z_Construct_UPackage_GameplayAbilities(), TEXT("GameplayAbilitySpecHandleAndPredictionKey"), sizeof(FGameplayAbilitySpecHandleAndPredictionKey), Get_Z_Construct_UScriptStruct_FGameplayAbilitySpecHandleAndPredictionKey_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FGameplayAbilitySpecHandleAndPredictionKey(FGameplayAbilitySpecHandleAndPredictionKey::StaticStruct, TEXT("/Script/GameplayAbilities"));
static struct FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayAbilitySpecHandleAndPredictionKey
{
	FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayAbilitySpecHandleAndPredictionKey()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("GameplayAbilitySpecHandleAndPredictionKey")),new UScriptStruct::TCppStructOps<FGameplayAbilitySpecHandleAndPredictionKey>);
	}
} ScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayAbilitySpecHandleAndPredictionKey;
class UScriptStruct* FGameplayAbilityActorInfo::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayAbilityActorInfo();
		extern GAMEPLAYABILITIES_API uint32 Get_Z_Construct_UScriptStruct_FGameplayAbilityActorInfo_CRC();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FGameplayAbilityActorInfo, Z_Construct_UPackage_GameplayAbilities(), TEXT("GameplayAbilityActorInfo"), sizeof(FGameplayAbilityActorInfo), Get_Z_Construct_UScriptStruct_FGameplayAbilityActorInfo_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FGameplayAbilityActorInfo(FGameplayAbilityActorInfo::StaticStruct, TEXT("/Script/GameplayAbilities"));
static struct FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayAbilityActorInfo
{
	FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayAbilityActorInfo()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("GameplayAbilityActorInfo")),new UScriptStruct::TCppStructOps<FGameplayAbilityActorInfo>);
	}
} ScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayAbilityActorInfo;
static class UEnum* ETargetDataFilterSelf_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UEnum* Z_Construct_UEnum_GameplayAbilities_ETargetDataFilterSelf();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticEnum(Z_Construct_UEnum_GameplayAbilities_ETargetDataFilterSelf, Z_Construct_UPackage_GameplayAbilities(), TEXT("ETargetDataFilterSelf"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_ETargetDataFilterSelf(ETargetDataFilterSelf_StaticEnum, TEXT("/Script/GameplayAbilities"));
class UScriptStruct* FGameplayTargetDataFilterHandle::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayTargetDataFilterHandle();
		extern GAMEPLAYABILITIES_API uint32 Get_Z_Construct_UScriptStruct_FGameplayTargetDataFilterHandle_CRC();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FGameplayTargetDataFilterHandle, Z_Construct_UPackage_GameplayAbilities(), TEXT("GameplayTargetDataFilterHandle"), sizeof(FGameplayTargetDataFilterHandle), Get_Z_Construct_UScriptStruct_FGameplayTargetDataFilterHandle_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FGameplayTargetDataFilterHandle(FGameplayTargetDataFilterHandle::StaticStruct, TEXT("/Script/GameplayAbilities"));
static struct FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayTargetDataFilterHandle
{
	FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayTargetDataFilterHandle()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("GameplayTargetDataFilterHandle")),new UScriptStruct::TCppStructOps<FGameplayTargetDataFilterHandle>);
	}
} ScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayTargetDataFilterHandle;
class UScriptStruct* FGameplayTargetDataFilter::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayTargetDataFilter();
		extern GAMEPLAYABILITIES_API uint32 Get_Z_Construct_UScriptStruct_FGameplayTargetDataFilter_CRC();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FGameplayTargetDataFilter, Z_Construct_UPackage_GameplayAbilities(), TEXT("GameplayTargetDataFilter"), sizeof(FGameplayTargetDataFilter), Get_Z_Construct_UScriptStruct_FGameplayTargetDataFilter_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FGameplayTargetDataFilter(FGameplayTargetDataFilter::StaticStruct, TEXT("/Script/GameplayAbilities"));
static struct FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayTargetDataFilter
{
	FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayTargetDataFilter()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("GameplayTargetDataFilter")),new UScriptStruct::TCppStructOps<FGameplayTargetDataFilter>);
	}
} ScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayTargetDataFilter;
class UScriptStruct* FAbilityTriggerData::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FAbilityTriggerData();
		extern GAMEPLAYABILITIES_API uint32 Get_Z_Construct_UScriptStruct_FAbilityTriggerData_CRC();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FAbilityTriggerData, Z_Construct_UPackage_GameplayAbilities(), TEXT("AbilityTriggerData"), sizeof(FAbilityTriggerData), Get_Z_Construct_UScriptStruct_FAbilityTriggerData_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FAbilityTriggerData(FAbilityTriggerData::StaticStruct, TEXT("/Script/GameplayAbilities"));
static struct FScriptStruct_GameplayAbilities_StaticRegisterNativesFAbilityTriggerData
{
	FScriptStruct_GameplayAbilities_StaticRegisterNativesFAbilityTriggerData()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("AbilityTriggerData")),new UScriptStruct::TCppStructOps<FAbilityTriggerData>);
	}
} ScriptStruct_GameplayAbilities_StaticRegisterNativesFAbilityTriggerData;
	void UGameplayAbility::K2_ActivateAbility()
	{
		ProcessEvent(FindFunctionChecked(GAMEPLAYABILITIES_K2_ActivateAbility),NULL);
	}
	void UGameplayAbility::K2_ActivateAbilityFromEvent(const FGameplayEventData& EventData)
	{
		GameplayAbility_eventK2_ActivateAbilityFromEvent_Parms Parms;
		Parms.EventData=EventData;
		ProcessEvent(FindFunctionChecked(GAMEPLAYABILITIES_K2_ActivateAbilityFromEvent),&Parms);
	}
	bool UGameplayAbility::K2_CanActivateAbility(FGameplayAbilityActorInfo ActorInfo, FGameplayTagContainer& RelevantTags) const
	{
		GameplayAbility_eventK2_CanActivateAbility_Parms Parms;
		Parms.ActorInfo=ActorInfo;
		Parms.RelevantTags=RelevantTags;
		const_cast<UGameplayAbility*>(this)->ProcessEvent(FindFunctionChecked(GAMEPLAYABILITIES_K2_CanActivateAbility),&Parms);
		RelevantTags=Parms.RelevantTags;
		return !!Parms.ReturnValue;
	}
	void UGameplayAbility::K2_CommitExecute()
	{
		ProcessEvent(FindFunctionChecked(GAMEPLAYABILITIES_K2_CommitExecute),NULL);
	}
	void UGameplayAbility::K2_OnEndAbility()
	{
		ProcessEvent(FindFunctionChecked(GAMEPLAYABILITIES_K2_OnEndAbility),NULL);
	}
	bool UGameplayAbility::K2_ShouldAbilityRespondToEvent(FGameplayAbilityActorInfo ActorInfo, FGameplayEventData Payload) const
	{
		GameplayAbility_eventK2_ShouldAbilityRespondToEvent_Parms Parms;
		Parms.ActorInfo=ActorInfo;
		Parms.Payload=Payload;
		const_cast<UGameplayAbility*>(this)->ProcessEvent(FindFunctionChecked(GAMEPLAYABILITIES_K2_ShouldAbilityRespondToEvent),&Parms);
		return !!Parms.ReturnValue;
	}
	void UGameplayAbility::StaticRegisterNativesUGameplayAbility()
	{
		FNativeFunctionRegistrar::RegisterFunction(UGameplayAbility::StaticClass(),"BP_ApplyGameplayEffectToOwner",(Native)&UGameplayAbility::execBP_ApplyGameplayEffectToOwner);
		FNativeFunctionRegistrar::RegisterFunction(UGameplayAbility::StaticClass(),"BP_ApplyGameplayEffectToTarget",(Native)&UGameplayAbility::execBP_ApplyGameplayEffectToTarget);
		FNativeFunctionRegistrar::RegisterFunction(UGameplayAbility::StaticClass(),"BP_RemoveGameplayEffectFromOwnerWithAssetTags",(Native)&UGameplayAbility::execBP_RemoveGameplayEffectFromOwnerWithAssetTags);
		FNativeFunctionRegistrar::RegisterFunction(UGameplayAbility::StaticClass(),"BP_RemoveGameplayEffectFromOwnerWithGrantedTags",(Native)&UGameplayAbility::execBP_RemoveGameplayEffectFromOwnerWithGrantedTags);
		FNativeFunctionRegistrar::RegisterFunction(UGameplayAbility::StaticClass(),"CancelTaskByInstanceName",(Native)&UGameplayAbility::execCancelTaskByInstanceName);
		FNativeFunctionRegistrar::RegisterFunction(UGameplayAbility::StaticClass(),"ConfirmTaskByInstanceName",(Native)&UGameplayAbility::execConfirmTaskByInstanceName);
		FNativeFunctionRegistrar::RegisterFunction(UGameplayAbility::StaticClass(),"EndAbilityState",(Native)&UGameplayAbility::execEndAbilityState);
		FNativeFunctionRegistrar::RegisterFunction(UGameplayAbility::StaticClass(),"EndTaskByInstanceName",(Native)&UGameplayAbility::execEndTaskByInstanceName);
		FNativeFunctionRegistrar::RegisterFunction(UGameplayAbility::StaticClass(),"GetAbilityLevel",(Native)&UGameplayAbility::execGetAbilityLevel);
		FNativeFunctionRegistrar::RegisterFunction(UGameplayAbility::StaticClass(),"GetActorInfo",(Native)&UGameplayAbility::execGetActorInfo);
		FNativeFunctionRegistrar::RegisterFunction(UGameplayAbility::StaticClass(),"GetAvatarActorFromActorInfo",(Native)&UGameplayAbility::execGetAvatarActorFromActorInfo);
		FNativeFunctionRegistrar::RegisterFunction(UGameplayAbility::StaticClass(),"GetContextFromOwner",(Native)&UGameplayAbility::execGetContextFromOwner);
		FNativeFunctionRegistrar::RegisterFunction(UGameplayAbility::StaticClass(),"GetCurrentMontage",(Native)&UGameplayAbility::execGetCurrentMontage);
		FNativeFunctionRegistrar::RegisterFunction(UGameplayAbility::StaticClass(),"GetCurrentSourceObject",(Native)&UGameplayAbility::execGetCurrentSourceObject);
		FNativeFunctionRegistrar::RegisterFunction(UGameplayAbility::StaticClass(),"GetOutgoingGameplayEffectSpec",(Native)&UGameplayAbility::execGetOutgoingGameplayEffectSpec);
		FNativeFunctionRegistrar::RegisterFunction(UGameplayAbility::StaticClass(),"GetOwningActorFromActorInfo",(Native)&UGameplayAbility::execGetOwningActorFromActorInfo);
		FNativeFunctionRegistrar::RegisterFunction(UGameplayAbility::StaticClass(),"GetOwningComponentFromActorInfo",(Native)&UGameplayAbility::execGetOwningComponentFromActorInfo);
		FNativeFunctionRegistrar::RegisterFunction(UGameplayAbility::StaticClass(),"K2_AddGameplayCue",(Native)&UGameplayAbility::execK2_AddGameplayCue);
		FNativeFunctionRegistrar::RegisterFunction(UGameplayAbility::StaticClass(),"K2_ApplyGameplayEffectSpecToOwner",(Native)&UGameplayAbility::execK2_ApplyGameplayEffectSpecToOwner);
		FNativeFunctionRegistrar::RegisterFunction(UGameplayAbility::StaticClass(),"K2_ApplyGameplayEffectSpecToTarget",(Native)&UGameplayAbility::execK2_ApplyGameplayEffectSpecToTarget);
		FNativeFunctionRegistrar::RegisterFunction(UGameplayAbility::StaticClass(),"K2_ApplyGameplayEffectToOwner",(Native)&UGameplayAbility::execK2_ApplyGameplayEffectToOwner);
		FNativeFunctionRegistrar::RegisterFunction(UGameplayAbility::StaticClass(),"K2_ApplyGameplayEffectToTarget",(Native)&UGameplayAbility::execK2_ApplyGameplayEffectToTarget);
		FNativeFunctionRegistrar::RegisterFunction(UGameplayAbility::StaticClass(),"K2_CheckAbilityCooldown",(Native)&UGameplayAbility::execK2_CheckAbilityCooldown);
		FNativeFunctionRegistrar::RegisterFunction(UGameplayAbility::StaticClass(),"K2_CheckAbilityCost",(Native)&UGameplayAbility::execK2_CheckAbilityCost);
		FNativeFunctionRegistrar::RegisterFunction(UGameplayAbility::StaticClass(),"K2_CommitAbility",(Native)&UGameplayAbility::execK2_CommitAbility);
		FNativeFunctionRegistrar::RegisterFunction(UGameplayAbility::StaticClass(),"K2_CommitAbilityCooldown",(Native)&UGameplayAbility::execK2_CommitAbilityCooldown);
		FNativeFunctionRegistrar::RegisterFunction(UGameplayAbility::StaticClass(),"K2_CommitAbilityCost",(Native)&UGameplayAbility::execK2_CommitAbilityCost);
		FNativeFunctionRegistrar::RegisterFunction(UGameplayAbility::StaticClass(),"K2_EndAbility",(Native)&UGameplayAbility::execK2_EndAbility);
		FNativeFunctionRegistrar::RegisterFunction(UGameplayAbility::StaticClass(),"K2_ExecuteGameplayCue",(Native)&UGameplayAbility::execK2_ExecuteGameplayCue);
		FNativeFunctionRegistrar::RegisterFunction(UGameplayAbility::StaticClass(),"K2_ExecuteGameplayCueWithParams",(Native)&UGameplayAbility::execK2_ExecuteGameplayCueWithParams);
		FNativeFunctionRegistrar::RegisterFunction(UGameplayAbility::StaticClass(),"K2_RemoveGameplayCue",(Native)&UGameplayAbility::execK2_RemoveGameplayCue);
		FNativeFunctionRegistrar::RegisterFunction(UGameplayAbility::StaticClass(),"MakeOutgoingGameplayEffectSpec",(Native)&UGameplayAbility::execMakeOutgoingGameplayEffectSpec);
		FNativeFunctionRegistrar::RegisterFunction(UGameplayAbility::StaticClass(),"MakeTargetLocationInfoFromOwnerActor",(Native)&UGameplayAbility::execMakeTargetLocationInfoFromOwnerActor);
		FNativeFunctionRegistrar::RegisterFunction(UGameplayAbility::StaticClass(),"MakeTargetLocationInfoFromOwnerSkeletalMeshComponent",(Native)&UGameplayAbility::execMakeTargetLocationInfoFromOwnerSkeletalMeshComponent);
		FNativeFunctionRegistrar::RegisterFunction(UGameplayAbility::StaticClass(),"MontageJumpToSection",(Native)&UGameplayAbility::execMontageJumpToSection);
		FNativeFunctionRegistrar::RegisterFunction(UGameplayAbility::StaticClass(),"MontageSetNextSectionName",(Native)&UGameplayAbility::execMontageSetNextSectionName);
		FNativeFunctionRegistrar::RegisterFunction(UGameplayAbility::StaticClass(),"MontageStop",(Native)&UGameplayAbility::execMontageStop);
		FNativeFunctionRegistrar::RegisterFunction(UGameplayAbility::StaticClass(),"SendGameplayEvent",(Native)&UGameplayAbility::execSendGameplayEvent);
		FNativeFunctionRegistrar::RegisterFunction(UGameplayAbility::StaticClass(),"SetCanBeCanceled",(Native)&UGameplayAbility::execSetCanBeCanceled);
		FNativeFunctionRegistrar::RegisterFunction(UGameplayAbility::StaticClass(),"SetShouldBlockOtherAbilities",(Native)&UGameplayAbility::execSetShouldBlockOtherAbilities);
	}
	IMPLEMENT_CLASS(UGameplayAbility, 2700656107);
class UScriptStruct* FActiveGameplayCueContainer::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FActiveGameplayCueContainer();
		extern GAMEPLAYABILITIES_API uint32 Get_Z_Construct_UScriptStruct_FActiveGameplayCueContainer_CRC();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FActiveGameplayCueContainer, Z_Construct_UPackage_GameplayAbilities(), TEXT("ActiveGameplayCueContainer"), sizeof(FActiveGameplayCueContainer), Get_Z_Construct_UScriptStruct_FActiveGameplayCueContainer_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FActiveGameplayCueContainer(FActiveGameplayCueContainer::StaticStruct, TEXT("/Script/GameplayAbilities"));
static struct FScriptStruct_GameplayAbilities_StaticRegisterNativesFActiveGameplayCueContainer
{
	FScriptStruct_GameplayAbilities_StaticRegisterNativesFActiveGameplayCueContainer()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("ActiveGameplayCueContainer")),new UScriptStruct::TCppStructOps<FActiveGameplayCueContainer>);
	}
} ScriptStruct_GameplayAbilities_StaticRegisterNativesFActiveGameplayCueContainer;
class UScriptStruct* FActiveGameplayCue::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FActiveGameplayCue();
		extern GAMEPLAYABILITIES_API uint32 Get_Z_Construct_UScriptStruct_FActiveGameplayCue_CRC();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FActiveGameplayCue, Z_Construct_UPackage_GameplayAbilities(), TEXT("ActiveGameplayCue"), sizeof(FActiveGameplayCue), Get_Z_Construct_UScriptStruct_FActiveGameplayCue_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FActiveGameplayCue(FActiveGameplayCue::StaticStruct, TEXT("/Script/GameplayAbilities"));
static struct FScriptStruct_GameplayAbilities_StaticRegisterNativesFActiveGameplayCue
{
	FScriptStruct_GameplayAbilities_StaticRegisterNativesFActiveGameplayCue()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("ActiveGameplayCue")),new UScriptStruct::TCppStructOps<FActiveGameplayCue>);
	}
} ScriptStruct_GameplayAbilities_StaticRegisterNativesFActiveGameplayCue;
	void IGameplayCueInterface::BlueprintCustomHandler(EGameplayCueEvent::Type EventType, FGameplayCueParameters Parameters)
	{
		check(0 && "Do not directly call Event functions in Interfaces. Call Execute_BlueprintCustomHandler instead.");
	}
	void UGameplayCueInterface::StaticRegisterNativesUGameplayCueInterface()
	{
		FNativeFunctionRegistrar::RegisterFunction(UGameplayCueInterface::StaticClass(),"ForwardGameplayCueToParent",(Native)&IGameplayCueInterface::execForwardGameplayCueToParent);
	}
	IMPLEMENT_CLASS(UGameplayCueInterface, 835387523);
	void IGameplayCueInterface::Execute_BlueprintCustomHandler(UObject* O, EGameplayCueEvent::Type EventType, FGameplayCueParameters Parameters)
	{
		check(O != NULL);
		check(O->GetClass()->ImplementsInterface(UGameplayCueInterface::StaticClass()));
		GameplayCueInterface_eventBlueprintCustomHandler_Parms Parms;
		UFunction* const Func = O->FindFunction(GAMEPLAYABILITIES_BlueprintCustomHandler);
		if (Func)
		{
			Parms.EventType=EventType;
			Parms.Parameters=Parameters;
			O->ProcessEvent(Func, &Parms);
		}
	}
	void UAbilitySystemBlueprintLibrary::StaticRegisterNativesUAbilitySystemBlueprintLibrary()
	{
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemBlueprintLibrary::StaticClass(),"AbilityTargetDataFromActor",(Native)&UAbilitySystemBlueprintLibrary::execAbilityTargetDataFromActor);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemBlueprintLibrary::StaticClass(),"AbilityTargetDataFromActorArray",(Native)&UAbilitySystemBlueprintLibrary::execAbilityTargetDataFromActorArray);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemBlueprintLibrary::StaticClass(),"AbilityTargetDataFromHitResult",(Native)&UAbilitySystemBlueprintLibrary::execAbilityTargetDataFromHitResult);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemBlueprintLibrary::StaticClass(),"AbilityTargetDataFromLocations",(Native)&UAbilitySystemBlueprintLibrary::execAbilityTargetDataFromLocations);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemBlueprintLibrary::StaticClass(),"AddAssetTag",(Native)&UAbilitySystemBlueprintLibrary::execAddAssetTag);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemBlueprintLibrary::StaticClass(),"AddAssetTags",(Native)&UAbilitySystemBlueprintLibrary::execAddAssetTags);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemBlueprintLibrary::StaticClass(),"AddGrantedTag",(Native)&UAbilitySystemBlueprintLibrary::execAddGrantedTag);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemBlueprintLibrary::StaticClass(),"AddGrantedTags",(Native)&UAbilitySystemBlueprintLibrary::execAddGrantedTags);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemBlueprintLibrary::StaticClass(),"AddLinkedGameplayEffectSpec",(Native)&UAbilitySystemBlueprintLibrary::execAddLinkedGameplayEffectSpec);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemBlueprintLibrary::StaticClass(),"AppendTargetDataHandle",(Native)&UAbilitySystemBlueprintLibrary::execAppendTargetDataHandle);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemBlueprintLibrary::StaticClass(),"AssignSetByCallerMagnitude",(Native)&UAbilitySystemBlueprintLibrary::execAssignSetByCallerMagnitude);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemBlueprintLibrary::StaticClass(),"DoesGameplayCueMeetTagRequirements",(Native)&UAbilitySystemBlueprintLibrary::execDoesGameplayCueMeetTagRequirements);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemBlueprintLibrary::StaticClass(),"DoesTargetDataContainActor",(Native)&UAbilitySystemBlueprintLibrary::execDoesTargetDataContainActor);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemBlueprintLibrary::StaticClass(),"EffectContextGetEffectCauser",(Native)&UAbilitySystemBlueprintLibrary::execEffectContextGetEffectCauser);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemBlueprintLibrary::StaticClass(),"EffectContextGetHitResult",(Native)&UAbilitySystemBlueprintLibrary::execEffectContextGetHitResult);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemBlueprintLibrary::StaticClass(),"EffectContextGetInstigatorActor",(Native)&UAbilitySystemBlueprintLibrary::execEffectContextGetInstigatorActor);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemBlueprintLibrary::StaticClass(),"EffectContextGetOrigin",(Native)&UAbilitySystemBlueprintLibrary::execEffectContextGetOrigin);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemBlueprintLibrary::StaticClass(),"EffectContextGetOriginalInstigatorActor",(Native)&UAbilitySystemBlueprintLibrary::execEffectContextGetOriginalInstigatorActor);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemBlueprintLibrary::StaticClass(),"EffectContextGetSourceObject",(Native)&UAbilitySystemBlueprintLibrary::execEffectContextGetSourceObject);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemBlueprintLibrary::StaticClass(),"EffectContextHasHitResult",(Native)&UAbilitySystemBlueprintLibrary::execEffectContextHasHitResult);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemBlueprintLibrary::StaticClass(),"EffectContextIsInstigatorLocallyControlled",(Native)&UAbilitySystemBlueprintLibrary::execEffectContextIsInstigatorLocallyControlled);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemBlueprintLibrary::StaticClass(),"FilterTargetData",(Native)&UAbilitySystemBlueprintLibrary::execFilterTargetData);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemBlueprintLibrary::StaticClass(),"ForwardGameplayCueToTarget",(Native)&UAbilitySystemBlueprintLibrary::execForwardGameplayCueToTarget);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemBlueprintLibrary::StaticClass(),"GetAbilitySystemComponent",(Native)&UAbilitySystemBlueprintLibrary::execGetAbilitySystemComponent);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemBlueprintLibrary::StaticClass(),"GetActiveGameplayEffectStackCount",(Native)&UAbilitySystemBlueprintLibrary::execGetActiveGameplayEffectStackCount);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemBlueprintLibrary::StaticClass(),"GetActorByIndex",(Native)&UAbilitySystemBlueprintLibrary::execGetActorByIndex);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemBlueprintLibrary::StaticClass(),"GetActorCount",(Native)&UAbilitySystemBlueprintLibrary::execGetActorCount);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemBlueprintLibrary::StaticClass(),"GetActorsFromTargetData",(Native)&UAbilitySystemBlueprintLibrary::execGetActorsFromTargetData);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemBlueprintLibrary::StaticClass(),"GetDataCountFromTargetData",(Native)&UAbilitySystemBlueprintLibrary::execGetDataCountFromTargetData);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemBlueprintLibrary::StaticClass(),"GetFloatAttribute",(Native)&UAbilitySystemBlueprintLibrary::execGetFloatAttribute);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemBlueprintLibrary::StaticClass(),"GetGameplayCueDirection",(Native)&UAbilitySystemBlueprintLibrary::execGetGameplayCueDirection);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemBlueprintLibrary::StaticClass(),"GetGameplayCueEndLocationAndNormal",(Native)&UAbilitySystemBlueprintLibrary::execGetGameplayCueEndLocationAndNormal);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemBlueprintLibrary::StaticClass(),"GetHitResult",(Native)&UAbilitySystemBlueprintLibrary::execGetHitResult);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemBlueprintLibrary::StaticClass(),"GetHitResultFromTargetData",(Native)&UAbilitySystemBlueprintLibrary::execGetHitResultFromTargetData);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemBlueprintLibrary::StaticClass(),"GetInstigatorActor",(Native)&UAbilitySystemBlueprintLibrary::execGetInstigatorActor);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemBlueprintLibrary::StaticClass(),"GetInstigatorTransform",(Native)&UAbilitySystemBlueprintLibrary::execGetInstigatorTransform);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemBlueprintLibrary::StaticClass(),"GetOrigin",(Native)&UAbilitySystemBlueprintLibrary::execGetOrigin);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemBlueprintLibrary::StaticClass(),"GetTargetDataEndPoint",(Native)&UAbilitySystemBlueprintLibrary::execGetTargetDataEndPoint);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemBlueprintLibrary::StaticClass(),"GetTargetDataEndPointTransform",(Native)&UAbilitySystemBlueprintLibrary::execGetTargetDataEndPointTransform);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemBlueprintLibrary::StaticClass(),"GetTargetDataOrigin",(Native)&UAbilitySystemBlueprintLibrary::execGetTargetDataOrigin);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemBlueprintLibrary::StaticClass(),"HasHitResult",(Native)&UAbilitySystemBlueprintLibrary::execHasHitResult);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemBlueprintLibrary::StaticClass(),"IsInstigatorLocallyControlled",(Native)&UAbilitySystemBlueprintLibrary::execIsInstigatorLocallyControlled);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemBlueprintLibrary::StaticClass(),"IsInstigatorLocallyControlledPlayer",(Native)&UAbilitySystemBlueprintLibrary::execIsInstigatorLocallyControlledPlayer);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemBlueprintLibrary::StaticClass(),"MakeFilterHandle",(Native)&UAbilitySystemBlueprintLibrary::execMakeFilterHandle);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemBlueprintLibrary::StaticClass(),"MakeSpecHandle",(Native)&UAbilitySystemBlueprintLibrary::execMakeSpecHandle);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemBlueprintLibrary::StaticClass(),"SendGameplayEventToActor",(Native)&UAbilitySystemBlueprintLibrary::execSendGameplayEventToActor);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemBlueprintLibrary::StaticClass(),"SetDuration",(Native)&UAbilitySystemBlueprintLibrary::execSetDuration);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemBlueprintLibrary::StaticClass(),"SetStackCount",(Native)&UAbilitySystemBlueprintLibrary::execSetStackCount);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemBlueprintLibrary::StaticClass(),"SetStackCountToMax",(Native)&UAbilitySystemBlueprintLibrary::execSetStackCountToMax);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemBlueprintLibrary::StaticClass(),"TargetDataHasActor",(Native)&UAbilitySystemBlueprintLibrary::execTargetDataHasActor);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemBlueprintLibrary::StaticClass(),"TargetDataHasEndPoint",(Native)&UAbilitySystemBlueprintLibrary::execTargetDataHasEndPoint);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemBlueprintLibrary::StaticClass(),"TargetDataHasHitResult",(Native)&UAbilitySystemBlueprintLibrary::execTargetDataHasHitResult);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemBlueprintLibrary::StaticClass(),"TargetDataHasOrigin",(Native)&UAbilitySystemBlueprintLibrary::execTargetDataHasOrigin);
	}
	IMPLEMENT_CLASS(UAbilitySystemBlueprintLibrary, 2553541074);
	void UAbilitySystemComponent::ClientActivateAbilityFailed(FGameplayAbilitySpecHandle AbilityToActivate, int16 PredictionKey)
	{
		AbilitySystemComponent_eventClientActivateAbilityFailed_Parms Parms;
		Parms.AbilityToActivate=AbilityToActivate;
		Parms.PredictionKey=PredictionKey;
		ProcessEvent(FindFunctionChecked(GAMEPLAYABILITIES_ClientActivateAbilityFailed),&Parms);
	}
	void UAbilitySystemComponent::ClientActivateAbilitySucceed(FGameplayAbilitySpecHandle AbilityToActivate, FPredictionKey PredictionKey)
	{
		AbilitySystemComponent_eventClientActivateAbilitySucceed_Parms Parms;
		Parms.AbilityToActivate=AbilityToActivate;
		Parms.PredictionKey=PredictionKey;
		ProcessEvent(FindFunctionChecked(GAMEPLAYABILITIES_ClientActivateAbilitySucceed),&Parms);
	}
	void UAbilitySystemComponent::ClientActivateAbilitySucceedWithEventData(FGameplayAbilitySpecHandle AbilityToActivate, FPredictionKey PredictionKey, FGameplayEventData TriggerEventData)
	{
		AbilitySystemComponent_eventClientActivateAbilitySucceedWithEventData_Parms Parms;
		Parms.AbilityToActivate=AbilityToActivate;
		Parms.PredictionKey=PredictionKey;
		Parms.TriggerEventData=TriggerEventData;
		ProcessEvent(FindFunctionChecked(GAMEPLAYABILITIES_ClientActivateAbilitySucceedWithEventData),&Parms);
	}
	void UAbilitySystemComponent::ClientCancelAbility(FGameplayAbilitySpecHandle AbilityToCancel, FGameplayAbilityActivationInfo ActivationInfo)
	{
		AbilitySystemComponent_eventClientCancelAbility_Parms Parms;
		Parms.AbilityToCancel=AbilityToCancel;
		Parms.ActivationInfo=ActivationInfo;
		ProcessEvent(FindFunctionChecked(GAMEPLAYABILITIES_ClientCancelAbility),&Parms);
	}
	void UAbilitySystemComponent::ClientEndAbility(FGameplayAbilitySpecHandle AbilityToEnd, FGameplayAbilityActivationInfo ActivationInfo)
	{
		AbilitySystemComponent_eventClientEndAbility_Parms Parms;
		Parms.AbilityToEnd=AbilityToEnd;
		Parms.ActivationInfo=ActivationInfo;
		ProcessEvent(FindFunctionChecked(GAMEPLAYABILITIES_ClientEndAbility),&Parms);
	}
	void UAbilitySystemComponent::ClientSetReplicatedEvent(EAbilityGenericReplicatedEvent::Type EventType, FGameplayAbilitySpecHandle AbilityHandle, FPredictionKey AbilityOriginalPredictionKey)
	{
		AbilitySystemComponent_eventClientSetReplicatedEvent_Parms Parms;
		Parms.EventType=EventType;
		Parms.AbilityHandle=AbilityHandle;
		Parms.AbilityOriginalPredictionKey=AbilityOriginalPredictionKey;
		ProcessEvent(FindFunctionChecked(GAMEPLAYABILITIES_ClientSetReplicatedEvent),&Parms);
	}
	void UAbilitySystemComponent::ClientTryActivateAbility(FGameplayAbilitySpecHandle AbilityToActivate)
	{
		AbilitySystemComponent_eventClientTryActivateAbility_Parms Parms;
		Parms.AbilityToActivate=AbilityToActivate;
		ProcessEvent(FindFunctionChecked(GAMEPLAYABILITIES_ClientTryActivateAbility),&Parms);
	}
	void UAbilitySystemComponent::NetMulticast_InvokeGameplayCueAdded(const FGameplayTag GameplayCueTag, FPredictionKey PredictionKey, FGameplayEffectContextHandle EffectContext)
	{
		AbilitySystemComponent_eventNetMulticast_InvokeGameplayCueAdded_Parms Parms;
		Parms.GameplayCueTag=GameplayCueTag;
		Parms.PredictionKey=PredictionKey;
		Parms.EffectContext=EffectContext;
		ProcessEvent(FindFunctionChecked(GAMEPLAYABILITIES_NetMulticast_InvokeGameplayCueAdded),&Parms);
	}
	void UAbilitySystemComponent::NetMulticast_InvokeGameplayCueAddedAndWhileActive_FromSpec(const FGameplayEffectSpecForRPC& Spec, FPredictionKey PredictionKey)
	{
		AbilitySystemComponent_eventNetMulticast_InvokeGameplayCueAddedAndWhileActive_FromSpec_Parms Parms;
		Parms.Spec=Spec;
		Parms.PredictionKey=PredictionKey;
		ProcessEvent(FindFunctionChecked(GAMEPLAYABILITIES_NetMulticast_InvokeGameplayCueAddedAndWhileActive_FromSpec),&Parms);
	}
	void UAbilitySystemComponent::NetMulticast_InvokeGameplayCueExecuted(const FGameplayTag GameplayCueTag, FPredictionKey PredictionKey, FGameplayEffectContextHandle EffectContext)
	{
		AbilitySystemComponent_eventNetMulticast_InvokeGameplayCueExecuted_Parms Parms;
		Parms.GameplayCueTag=GameplayCueTag;
		Parms.PredictionKey=PredictionKey;
		Parms.EffectContext=EffectContext;
		ProcessEvent(FindFunctionChecked(GAMEPLAYABILITIES_NetMulticast_InvokeGameplayCueExecuted),&Parms);
	}
	void UAbilitySystemComponent::NetMulticast_InvokeGameplayCueExecuted_FromSpec(const FGameplayEffectSpecForRPC Spec, FPredictionKey PredictionKey)
	{
		AbilitySystemComponent_eventNetMulticast_InvokeGameplayCueExecuted_FromSpec_Parms Parms;
		Parms.Spec=Spec;
		Parms.PredictionKey=PredictionKey;
		ProcessEvent(FindFunctionChecked(GAMEPLAYABILITIES_NetMulticast_InvokeGameplayCueExecuted_FromSpec),&Parms);
	}
	void UAbilitySystemComponent::NetMulticast_InvokeGameplayCueExecuted_WithParams(const FGameplayTag GameplayCueTag, FPredictionKey PredictionKey, FGameplayCueParameters GameplayCueParameters)
	{
		AbilitySystemComponent_eventNetMulticast_InvokeGameplayCueExecuted_WithParams_Parms Parms;
		Parms.GameplayCueTag=GameplayCueTag;
		Parms.PredictionKey=PredictionKey;
		Parms.GameplayCueParameters=GameplayCueParameters;
		ProcessEvent(FindFunctionChecked(GAMEPLAYABILITIES_NetMulticast_InvokeGameplayCueExecuted_WithParams),&Parms);
	}
	void UAbilitySystemComponent::ServerCancelAbility(FGameplayAbilitySpecHandle AbilityToCancel, FGameplayAbilityActivationInfo ActivationInfo)
	{
		AbilitySystemComponent_eventServerCancelAbility_Parms Parms;
		Parms.AbilityToCancel=AbilityToCancel;
		Parms.ActivationInfo=ActivationInfo;
		ProcessEvent(FindFunctionChecked(GAMEPLAYABILITIES_ServerCancelAbility),&Parms);
	}
	void UAbilitySystemComponent::ServerCurrentMontageJumpToSectionName(UAnimMontage* ClientAnimMontage, FName SectionName)
	{
		AbilitySystemComponent_eventServerCurrentMontageJumpToSectionName_Parms Parms;
		Parms.ClientAnimMontage=ClientAnimMontage;
		Parms.SectionName=SectionName;
		ProcessEvent(FindFunctionChecked(GAMEPLAYABILITIES_ServerCurrentMontageJumpToSectionName),&Parms);
	}
	void UAbilitySystemComponent::ServerCurrentMontageSetNextSectionName(UAnimMontage* ClientAnimMontage, float ClientPosition, FName SectionName, FName NextSectionName)
	{
		AbilitySystemComponent_eventServerCurrentMontageSetNextSectionName_Parms Parms;
		Parms.ClientAnimMontage=ClientAnimMontage;
		Parms.ClientPosition=ClientPosition;
		Parms.SectionName=SectionName;
		Parms.NextSectionName=NextSectionName;
		ProcessEvent(FindFunctionChecked(GAMEPLAYABILITIES_ServerCurrentMontageSetNextSectionName),&Parms);
	}
	void UAbilitySystemComponent::ServerEndAbility(FGameplayAbilitySpecHandle AbilityToEnd, FGameplayAbilityActivationInfo ActivationInfo, FPredictionKey PredictionKey)
	{
		AbilitySystemComponent_eventServerEndAbility_Parms Parms;
		Parms.AbilityToEnd=AbilityToEnd;
		Parms.ActivationInfo=ActivationInfo;
		Parms.PredictionKey=PredictionKey;
		ProcessEvent(FindFunctionChecked(GAMEPLAYABILITIES_ServerEndAbility),&Parms);
	}
	void UAbilitySystemComponent::ServerSetInputPressed(FGameplayAbilitySpecHandle AbilityHandle)
	{
		AbilitySystemComponent_eventServerSetInputPressed_Parms Parms;
		Parms.AbilityHandle=AbilityHandle;
		ProcessEvent(FindFunctionChecked(GAMEPLAYABILITIES_ServerSetInputPressed),&Parms);
	}
	void UAbilitySystemComponent::ServerSetInputReleased(FGameplayAbilitySpecHandle AbilityHandle)
	{
		AbilitySystemComponent_eventServerSetInputReleased_Parms Parms;
		Parms.AbilityHandle=AbilityHandle;
		ProcessEvent(FindFunctionChecked(GAMEPLAYABILITIES_ServerSetInputReleased),&Parms);
	}
	void UAbilitySystemComponent::ServerSetReplicatedEvent(EAbilityGenericReplicatedEvent::Type EventType, FGameplayAbilitySpecHandle AbilityHandle, FPredictionKey AbilityOriginalPredictionKey, FPredictionKey CurrentPredictionKey)
	{
		AbilitySystemComponent_eventServerSetReplicatedEvent_Parms Parms;
		Parms.EventType=EventType;
		Parms.AbilityHandle=AbilityHandle;
		Parms.AbilityOriginalPredictionKey=AbilityOriginalPredictionKey;
		Parms.CurrentPredictionKey=CurrentPredictionKey;
		ProcessEvent(FindFunctionChecked(GAMEPLAYABILITIES_ServerSetReplicatedEvent),&Parms);
	}
	void UAbilitySystemComponent::ServerSetReplicatedTargetData(FGameplayAbilitySpecHandle AbilityHandle, FPredictionKey AbilityOriginalPredictionKey, FGameplayAbilityTargetDataHandle ReplicatedTargetDataHandle, FGameplayTag ApplicationTag, FPredictionKey CurrentPredictionKey)
	{
		AbilitySystemComponent_eventServerSetReplicatedTargetData_Parms Parms;
		Parms.AbilityHandle=AbilityHandle;
		Parms.AbilityOriginalPredictionKey=AbilityOriginalPredictionKey;
		Parms.ReplicatedTargetDataHandle=ReplicatedTargetDataHandle;
		Parms.ApplicationTag=ApplicationTag;
		Parms.CurrentPredictionKey=CurrentPredictionKey;
		ProcessEvent(FindFunctionChecked(GAMEPLAYABILITIES_ServerSetReplicatedTargetData),&Parms);
	}
	void UAbilitySystemComponent::ServerSetReplicatedTargetDataCancelled(FGameplayAbilitySpecHandle AbilityHandle, FPredictionKey AbilityOriginalPredictionKey, FPredictionKey CurrentPredictionKey)
	{
		AbilitySystemComponent_eventServerSetReplicatedTargetDataCancelled_Parms Parms;
		Parms.AbilityHandle=AbilityHandle;
		Parms.AbilityOriginalPredictionKey=AbilityOriginalPredictionKey;
		Parms.CurrentPredictionKey=CurrentPredictionKey;
		ProcessEvent(FindFunctionChecked(GAMEPLAYABILITIES_ServerSetReplicatedTargetDataCancelled),&Parms);
	}
	void UAbilitySystemComponent::ServerTryActivateAbility(FGameplayAbilitySpecHandle AbilityToActivate, bool InputPressed, FPredictionKey PredictionKey)
	{
		AbilitySystemComponent_eventServerTryActivateAbility_Parms Parms;
		Parms.AbilityToActivate=AbilityToActivate;
		Parms.InputPressed=InputPressed ? true : false;
		Parms.PredictionKey=PredictionKey;
		ProcessEvent(FindFunctionChecked(GAMEPLAYABILITIES_ServerTryActivateAbility),&Parms);
	}
	void UAbilitySystemComponent::ServerTryActivateAbilityWithEventData(FGameplayAbilitySpecHandle AbilityToActivate, bool InputPressed, FPredictionKey PredictionKey, FGameplayEventData TriggerEventData)
	{
		AbilitySystemComponent_eventServerTryActivateAbilityWithEventData_Parms Parms;
		Parms.AbilityToActivate=AbilityToActivate;
		Parms.InputPressed=InputPressed ? true : false;
		Parms.PredictionKey=PredictionKey;
		Parms.TriggerEventData=TriggerEventData;
		ProcessEvent(FindFunctionChecked(GAMEPLAYABILITIES_ServerTryActivateAbilityWithEventData),&Parms);
	}
	void UAbilitySystemComponent::StaticRegisterNativesUAbilitySystemComponent()
	{
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemComponent::StaticClass(),"BP_ApplyGameplayEffectSpecToSelf",(Native)&UAbilitySystemComponent::execBP_ApplyGameplayEffectSpecToSelf);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemComponent::StaticClass(),"BP_ApplyGameplayEffectSpecToTarget",(Native)&UAbilitySystemComponent::execBP_ApplyGameplayEffectSpecToTarget);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemComponent::StaticClass(),"BP_ApplyGameplayEffectToSelf",(Native)&UAbilitySystemComponent::execBP_ApplyGameplayEffectToSelf);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemComponent::StaticClass(),"BP_ApplyGameplayEffectToTarget",(Native)&UAbilitySystemComponent::execBP_ApplyGameplayEffectToTarget);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemComponent::StaticClass(),"ClientActivateAbilityFailed",(Native)&UAbilitySystemComponent::execClientActivateAbilityFailed);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemComponent::StaticClass(),"ClientActivateAbilitySucceed",(Native)&UAbilitySystemComponent::execClientActivateAbilitySucceed);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemComponent::StaticClass(),"ClientActivateAbilitySucceedWithEventData",(Native)&UAbilitySystemComponent::execClientActivateAbilitySucceedWithEventData);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemComponent::StaticClass(),"ClientCancelAbility",(Native)&UAbilitySystemComponent::execClientCancelAbility);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemComponent::StaticClass(),"ClientEndAbility",(Native)&UAbilitySystemComponent::execClientEndAbility);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemComponent::StaticClass(),"ClientSetReplicatedEvent",(Native)&UAbilitySystemComponent::execClientSetReplicatedEvent);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemComponent::StaticClass(),"ClientTryActivateAbility",(Native)&UAbilitySystemComponent::execClientTryActivateAbility);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemComponent::StaticClass(),"GetEffectContext",(Native)&UAbilitySystemComponent::execGetEffectContext);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemComponent::StaticClass(),"GetGameplayEffectCount",(Native)&UAbilitySystemComponent::execGetGameplayEffectCount);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemComponent::StaticClass(),"GetGameplayEffectMagnitude",(Native)&UAbilitySystemComponent::execGetGameplayEffectMagnitude);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemComponent::StaticClass(),"GetOutgoingSpec",(Native)&UAbilitySystemComponent::execGetOutgoingSpec);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemComponent::StaticClass(),"GetUserAbilityActivationInhibited",(Native)&UAbilitySystemComponent::execGetUserAbilityActivationInhibited);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemComponent::StaticClass(),"IsGameplayCueActive",(Native)&UAbilitySystemComponent::execIsGameplayCueActive);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemComponent::StaticClass(),"K2_ApplyGameplayEffectToSelf",(Native)&UAbilitySystemComponent::execK2_ApplyGameplayEffectToSelf);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemComponent::StaticClass(),"K2_ApplyGameplayEffectToTarget",(Native)&UAbilitySystemComponent::execK2_ApplyGameplayEffectToTarget);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemComponent::StaticClass(),"K2_InitStats",(Native)&UAbilitySystemComponent::execK2_InitStats);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemComponent::StaticClass(),"MakeOutgoingSpec",(Native)&UAbilitySystemComponent::execMakeOutgoingSpec);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemComponent::StaticClass(),"NetMulticast_InvokeGameplayCueAdded",(Native)&UAbilitySystemComponent::execNetMulticast_InvokeGameplayCueAdded);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemComponent::StaticClass(),"NetMulticast_InvokeGameplayCueAddedAndWhileActive_FromSpec",(Native)&UAbilitySystemComponent::execNetMulticast_InvokeGameplayCueAddedAndWhileActive_FromSpec);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemComponent::StaticClass(),"NetMulticast_InvokeGameplayCueExecuted",(Native)&UAbilitySystemComponent::execNetMulticast_InvokeGameplayCueExecuted);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemComponent::StaticClass(),"NetMulticast_InvokeGameplayCueExecuted_FromSpec",(Native)&UAbilitySystemComponent::execNetMulticast_InvokeGameplayCueExecuted_FromSpec);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemComponent::StaticClass(),"NetMulticast_InvokeGameplayCueExecuted_WithParams",(Native)&UAbilitySystemComponent::execNetMulticast_InvokeGameplayCueExecuted_WithParams);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemComponent::StaticClass(),"OnRep_ActivateAbilities",(Native)&UAbilitySystemComponent::execOnRep_ActivateAbilities);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemComponent::StaticClass(),"OnRep_GameplayEffects",(Native)&UAbilitySystemComponent::execOnRep_GameplayEffects);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemComponent::StaticClass(),"OnRep_OwningActor",(Native)&UAbilitySystemComponent::execOnRep_OwningActor);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemComponent::StaticClass(),"OnRep_PredictionKey",(Native)&UAbilitySystemComponent::execOnRep_PredictionKey);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemComponent::StaticClass(),"OnRep_ReplicatedAnimMontage",(Native)&UAbilitySystemComponent::execOnRep_ReplicatedAnimMontage);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemComponent::StaticClass(),"RemoveActiveEffectsWithTags",(Native)&UAbilitySystemComponent::execRemoveActiveEffectsWithTags);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemComponent::StaticClass(),"RemoveActiveGameplayEffect",(Native)&UAbilitySystemComponent::execRemoveActiveGameplayEffect);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemComponent::StaticClass(),"RemoveActiveGameplayEffectBySourceEffect",(Native)&UAbilitySystemComponent::execRemoveActiveGameplayEffectBySourceEffect);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemComponent::StaticClass(),"ServerCancelAbility",(Native)&UAbilitySystemComponent::execServerCancelAbility);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemComponent::StaticClass(),"ServerCurrentMontageJumpToSectionName",(Native)&UAbilitySystemComponent::execServerCurrentMontageJumpToSectionName);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemComponent::StaticClass(),"ServerCurrentMontageSetNextSectionName",(Native)&UAbilitySystemComponent::execServerCurrentMontageSetNextSectionName);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemComponent::StaticClass(),"ServerEndAbility",(Native)&UAbilitySystemComponent::execServerEndAbility);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemComponent::StaticClass(),"ServerSetInputPressed",(Native)&UAbilitySystemComponent::execServerSetInputPressed);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemComponent::StaticClass(),"ServerSetInputReleased",(Native)&UAbilitySystemComponent::execServerSetInputReleased);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemComponent::StaticClass(),"ServerSetReplicatedEvent",(Native)&UAbilitySystemComponent::execServerSetReplicatedEvent);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemComponent::StaticClass(),"ServerSetReplicatedTargetData",(Native)&UAbilitySystemComponent::execServerSetReplicatedTargetData);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemComponent::StaticClass(),"ServerSetReplicatedTargetDataCancelled",(Native)&UAbilitySystemComponent::execServerSetReplicatedTargetDataCancelled);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemComponent::StaticClass(),"ServerTryActivateAbility",(Native)&UAbilitySystemComponent::execServerTryActivateAbility);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemComponent::StaticClass(),"ServerTryActivateAbilityWithEventData",(Native)&UAbilitySystemComponent::execServerTryActivateAbilityWithEventData);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemComponent::StaticClass(),"SetActiveGameplayEffectLevel",(Native)&UAbilitySystemComponent::execSetActiveGameplayEffectLevel);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemComponent::StaticClass(),"SetUserAbilityActivationInhibited",(Native)&UAbilitySystemComponent::execSetUserAbilityActivationInhibited);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemComponent::StaticClass(),"TargetCancel",(Native)&UAbilitySystemComponent::execTargetCancel);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemComponent::StaticClass(),"TargetConfirm",(Native)&UAbilitySystemComponent::execTargetConfirm);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemComponent::StaticClass(),"TryActivateAbilitiesByTag",(Native)&UAbilitySystemComponent::execTryActivateAbilitiesByTag);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemComponent::StaticClass(),"TryActivateAbilityByClass",(Native)&UAbilitySystemComponent::execTryActivateAbilityByClass);
	}
	IMPLEMENT_CLASS(UAbilitySystemComponent, 3573254691);
	void AAbilitySystemDebugHUD::StaticRegisterNativesAAbilitySystemDebugHUD()
	{
	}
	IMPLEMENT_CLASS(AAbilitySystemDebugHUD, 189032290);
	void UAbilitySystemGlobals::StaticRegisterNativesUAbilitySystemGlobals()
	{
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemGlobals::StaticClass(),"ToggleIgnoreAbilitySystemCooldowns",(Native)&UAbilitySystemGlobals::execToggleIgnoreAbilitySystemCooldowns);
		FNativeFunctionRegistrar::RegisterFunction(UAbilitySystemGlobals::StaticClass(),"ToggleIgnoreAbilitySystemCosts",(Native)&UAbilitySystemGlobals::execToggleIgnoreAbilitySystemCosts);
	}
	IMPLEMENT_CLASS(UAbilitySystemGlobals, 1829904699);
	void UAbilitySystemInterface::StaticRegisterNativesUAbilitySystemInterface()
	{
	}
	IMPLEMENT_CLASS(UAbilitySystemInterface, 858228452);
	void AAbilitySystemTestPawn::StaticRegisterNativesAAbilitySystemTestPawn()
	{
	}
	IMPLEMENT_CLASS(AAbilitySystemTestPawn, 2272580637);
	void UAbilityTask::StaticRegisterNativesUAbilityTask()
	{
	}
	IMPLEMENT_CLASS(UAbilityTask, 2270103825);
	void UAbilityTask_MoveToLocation::StaticRegisterNativesUAbilityTask_MoveToLocation()
	{
		FNativeFunctionRegistrar::RegisterFunction(UAbilityTask_MoveToLocation::StaticClass(),"MoveToLocation",(Native)&UAbilityTask_MoveToLocation::execMoveToLocation);
	}
	IMPLEMENT_CLASS(UAbilityTask_MoveToLocation, 3390286915);
static class UEnum* EAbilityTaskNetSyncType_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UEnum* Z_Construct_UEnum_GameplayAbilities_EAbilityTaskNetSyncType();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticEnum(Z_Construct_UEnum_GameplayAbilities_EAbilityTaskNetSyncType, Z_Construct_UPackage_GameplayAbilities(), TEXT("EAbilityTaskNetSyncType"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EAbilityTaskNetSyncType(EAbilityTaskNetSyncType_StaticEnum, TEXT("/Script/GameplayAbilities"));
	void UAbilityTask_NetworkSyncPoint::StaticRegisterNativesUAbilityTask_NetworkSyncPoint()
	{
		FNativeFunctionRegistrar::RegisterFunction(UAbilityTask_NetworkSyncPoint::StaticClass(),"OnSignalCallback",(Native)&UAbilityTask_NetworkSyncPoint::execOnSignalCallback);
		FNativeFunctionRegistrar::RegisterFunction(UAbilityTask_NetworkSyncPoint::StaticClass(),"WaitNetSync",(Native)&UAbilityTask_NetworkSyncPoint::execWaitNetSync);
	}
	IMPLEMENT_CLASS(UAbilityTask_NetworkSyncPoint, 1229083944);
	void UAbilityTask_PlayMontageAndWait::StaticRegisterNativesUAbilityTask_PlayMontageAndWait()
	{
		FNativeFunctionRegistrar::RegisterFunction(UAbilityTask_PlayMontageAndWait::StaticClass(),"CreatePlayMontageAndWaitProxy",(Native)&UAbilityTask_PlayMontageAndWait::execCreatePlayMontageAndWaitProxy);
		FNativeFunctionRegistrar::RegisterFunction(UAbilityTask_PlayMontageAndWait::StaticClass(),"OnMontageBlendingOut",(Native)&UAbilityTask_PlayMontageAndWait::execOnMontageBlendingOut);
		FNativeFunctionRegistrar::RegisterFunction(UAbilityTask_PlayMontageAndWait::StaticClass(),"OnMontageInterrupted",(Native)&UAbilityTask_PlayMontageAndWait::execOnMontageInterrupted);
	}
	IMPLEMENT_CLASS(UAbilityTask_PlayMontageAndWait, 1379949676);
	void UAbilityTask_Repeat::StaticRegisterNativesUAbilityTask_Repeat()
	{
		FNativeFunctionRegistrar::RegisterFunction(UAbilityTask_Repeat::StaticClass(),"RepeatAction",(Native)&UAbilityTask_Repeat::execRepeatAction);
	}
	IMPLEMENT_CLASS(UAbilityTask_Repeat, 2489245067);
	void UAbilityTask_SpawnActor::StaticRegisterNativesUAbilityTask_SpawnActor()
	{
		FNativeFunctionRegistrar::RegisterFunction(UAbilityTask_SpawnActor::StaticClass(),"BeginSpawningActor",(Native)&UAbilityTask_SpawnActor::execBeginSpawningActor);
		FNativeFunctionRegistrar::RegisterFunction(UAbilityTask_SpawnActor::StaticClass(),"FinishSpawningActor",(Native)&UAbilityTask_SpawnActor::execFinishSpawningActor);
		FNativeFunctionRegistrar::RegisterFunction(UAbilityTask_SpawnActor::StaticClass(),"SpawnActor",(Native)&UAbilityTask_SpawnActor::execSpawnActor);
	}
	IMPLEMENT_CLASS(UAbilityTask_SpawnActor, 3273566341);
	void UAbilityTask_StartAbilityState::StaticRegisterNativesUAbilityTask_StartAbilityState()
	{
		FNativeFunctionRegistrar::RegisterFunction(UAbilityTask_StartAbilityState::StaticClass(),"StartAbilityState",(Native)&UAbilityTask_StartAbilityState::execStartAbilityState);
	}
	IMPLEMENT_CLASS(UAbilityTask_StartAbilityState, 4079746734);
	void UAbilityTask_VisualizeTargeting::StaticRegisterNativesUAbilityTask_VisualizeTargeting()
	{
		FNativeFunctionRegistrar::RegisterFunction(UAbilityTask_VisualizeTargeting::StaticClass(),"BeginSpawningActor",(Native)&UAbilityTask_VisualizeTargeting::execBeginSpawningActor);
		FNativeFunctionRegistrar::RegisterFunction(UAbilityTask_VisualizeTargeting::StaticClass(),"FinishSpawningActor",(Native)&UAbilityTask_VisualizeTargeting::execFinishSpawningActor);
		FNativeFunctionRegistrar::RegisterFunction(UAbilityTask_VisualizeTargeting::StaticClass(),"VisualizeTargeting",(Native)&UAbilityTask_VisualizeTargeting::execVisualizeTargeting);
		FNativeFunctionRegistrar::RegisterFunction(UAbilityTask_VisualizeTargeting::StaticClass(),"VisualizeTargetingUsingActor",(Native)&UAbilityTask_VisualizeTargeting::execVisualizeTargetingUsingActor);
	}
	IMPLEMENT_CLASS(UAbilityTask_VisualizeTargeting, 2713244685);
	void UAbilityTask_WaitAbilityActivate::StaticRegisterNativesUAbilityTask_WaitAbilityActivate()
	{
		FNativeFunctionRegistrar::RegisterFunction(UAbilityTask_WaitAbilityActivate::StaticClass(),"OnAbilityActivate",(Native)&UAbilityTask_WaitAbilityActivate::execOnAbilityActivate);
		FNativeFunctionRegistrar::RegisterFunction(UAbilityTask_WaitAbilityActivate::StaticClass(),"WaitForAbilityActivate",(Native)&UAbilityTask_WaitAbilityActivate::execWaitForAbilityActivate);
	}
	IMPLEMENT_CLASS(UAbilityTask_WaitAbilityActivate, 233088267);
	void UAbilityTask_WaitAbilityCommit::StaticRegisterNativesUAbilityTask_WaitAbilityCommit()
	{
		FNativeFunctionRegistrar::RegisterFunction(UAbilityTask_WaitAbilityCommit::StaticClass(),"OnAbilityCommit",(Native)&UAbilityTask_WaitAbilityCommit::execOnAbilityCommit);
		FNativeFunctionRegistrar::RegisterFunction(UAbilityTask_WaitAbilityCommit::StaticClass(),"WaitForAbilityCommit",(Native)&UAbilityTask_WaitAbilityCommit::execWaitForAbilityCommit);
	}
	IMPLEMENT_CLASS(UAbilityTask_WaitAbilityCommit, 1135343976);
static class UEnum* EWaitAttributeChangeComparison_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UEnum* Z_Construct_UEnum_GameplayAbilities_EWaitAttributeChangeComparison();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticEnum(Z_Construct_UEnum_GameplayAbilities_EWaitAttributeChangeComparison, Z_Construct_UPackage_GameplayAbilities(), TEXT("EWaitAttributeChangeComparison"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EWaitAttributeChangeComparison(EWaitAttributeChangeComparison_StaticEnum, TEXT("/Script/GameplayAbilities"));
	void UAbilityTask_WaitAttributeChange::StaticRegisterNativesUAbilityTask_WaitAttributeChange()
	{
		FNativeFunctionRegistrar::RegisterFunction(UAbilityTask_WaitAttributeChange::StaticClass(),"WaitForAttributeChange",(Native)&UAbilityTask_WaitAttributeChange::execWaitForAttributeChange);
		FNativeFunctionRegistrar::RegisterFunction(UAbilityTask_WaitAttributeChange::StaticClass(),"WaitForAttributeChangeWithComparison",(Native)&UAbilityTask_WaitAttributeChange::execWaitForAttributeChangeWithComparison);
	}
	IMPLEMENT_CLASS(UAbilityTask_WaitAttributeChange, 2494421529);
	void UAbilityTask_WaitCancel::StaticRegisterNativesUAbilityTask_WaitCancel()
	{
		FNativeFunctionRegistrar::RegisterFunction(UAbilityTask_WaitCancel::StaticClass(),"OnCancelCallback",(Native)&UAbilityTask_WaitCancel::execOnCancelCallback);
		FNativeFunctionRegistrar::RegisterFunction(UAbilityTask_WaitCancel::StaticClass(),"OnLocalCancelCallback",(Native)&UAbilityTask_WaitCancel::execOnLocalCancelCallback);
		FNativeFunctionRegistrar::RegisterFunction(UAbilityTask_WaitCancel::StaticClass(),"WaitCancel",(Native)&UAbilityTask_WaitCancel::execWaitCancel);
	}
	IMPLEMENT_CLASS(UAbilityTask_WaitCancel, 2363300631);
	void UAbilityTask_WaitConfirm::StaticRegisterNativesUAbilityTask_WaitConfirm()
	{
		FNativeFunctionRegistrar::RegisterFunction(UAbilityTask_WaitConfirm::StaticClass(),"OnConfirmCallback",(Native)&UAbilityTask_WaitConfirm::execOnConfirmCallback);
		FNativeFunctionRegistrar::RegisterFunction(UAbilityTask_WaitConfirm::StaticClass(),"WaitConfirm",(Native)&UAbilityTask_WaitConfirm::execWaitConfirm);
	}
	IMPLEMENT_CLASS(UAbilityTask_WaitConfirm, 2142753361);
	void UAbilityTask_WaitConfirmCancel::StaticRegisterNativesUAbilityTask_WaitConfirmCancel()
	{
		FNativeFunctionRegistrar::RegisterFunction(UAbilityTask_WaitConfirmCancel::StaticClass(),"OnCancelCallback",(Native)&UAbilityTask_WaitConfirmCancel::execOnCancelCallback);
		FNativeFunctionRegistrar::RegisterFunction(UAbilityTask_WaitConfirmCancel::StaticClass(),"OnConfirmCallback",(Native)&UAbilityTask_WaitConfirmCancel::execOnConfirmCallback);
		FNativeFunctionRegistrar::RegisterFunction(UAbilityTask_WaitConfirmCancel::StaticClass(),"OnLocalCancelCallback",(Native)&UAbilityTask_WaitConfirmCancel::execOnLocalCancelCallback);
		FNativeFunctionRegistrar::RegisterFunction(UAbilityTask_WaitConfirmCancel::StaticClass(),"OnLocalConfirmCallback",(Native)&UAbilityTask_WaitConfirmCancel::execOnLocalConfirmCallback);
		FNativeFunctionRegistrar::RegisterFunction(UAbilityTask_WaitConfirmCancel::StaticClass(),"WaitConfirmCancel",(Native)&UAbilityTask_WaitConfirmCancel::execWaitConfirmCancel);
	}
	IMPLEMENT_CLASS(UAbilityTask_WaitConfirmCancel, 1888263373);
	void UAbilityTask_WaitDelay::StaticRegisterNativesUAbilityTask_WaitDelay()
	{
		FNativeFunctionRegistrar::RegisterFunction(UAbilityTask_WaitDelay::StaticClass(),"WaitDelay",(Native)&UAbilityTask_WaitDelay::execWaitDelay);
	}
	IMPLEMENT_CLASS(UAbilityTask_WaitDelay, 1070594858);
	void UAbilityTask_WaitGameplayEffectApplied::StaticRegisterNativesUAbilityTask_WaitGameplayEffectApplied()
	{
		FNativeFunctionRegistrar::RegisterFunction(UAbilityTask_WaitGameplayEffectApplied::StaticClass(),"OnApplyGameplayEffectCallback",(Native)&UAbilityTask_WaitGameplayEffectApplied::execOnApplyGameplayEffectCallback);
	}
	IMPLEMENT_CLASS(UAbilityTask_WaitGameplayEffectApplied, 3956291698);
	void UAbilityTask_WaitGameplayEffectApplied_Self::StaticRegisterNativesUAbilityTask_WaitGameplayEffectApplied_Self()
	{
		FNativeFunctionRegistrar::RegisterFunction(UAbilityTask_WaitGameplayEffectApplied_Self::StaticClass(),"WaitGameplayEffectAppliedToSelf",(Native)&UAbilityTask_WaitGameplayEffectApplied_Self::execWaitGameplayEffectAppliedToSelf);
	}
	IMPLEMENT_CLASS(UAbilityTask_WaitGameplayEffectApplied_Self, 1259209708);
	void UAbilityTask_WaitGameplayEffectApplied_Target::StaticRegisterNativesUAbilityTask_WaitGameplayEffectApplied_Target()
	{
		FNativeFunctionRegistrar::RegisterFunction(UAbilityTask_WaitGameplayEffectApplied_Target::StaticClass(),"WaitGameplayEffectAppliedToTarget",(Native)&UAbilityTask_WaitGameplayEffectApplied_Target::execWaitGameplayEffectAppliedToTarget);
	}
	IMPLEMENT_CLASS(UAbilityTask_WaitGameplayEffectApplied_Target, 3495154436);
	void UAbilityTask_WaitGameplayEffectRemoved::StaticRegisterNativesUAbilityTask_WaitGameplayEffectRemoved()
	{
		FNativeFunctionRegistrar::RegisterFunction(UAbilityTask_WaitGameplayEffectRemoved::StaticClass(),"OnGameplayEffectRemoved",(Native)&UAbilityTask_WaitGameplayEffectRemoved::execOnGameplayEffectRemoved);
		FNativeFunctionRegistrar::RegisterFunction(UAbilityTask_WaitGameplayEffectRemoved::StaticClass(),"WaitForGameplayEffectRemoved",(Native)&UAbilityTask_WaitGameplayEffectRemoved::execWaitForGameplayEffectRemoved);
	}
	IMPLEMENT_CLASS(UAbilityTask_WaitGameplayEffectRemoved, 3686100463);
	void UAbilityTask_WaitGameplayTag::StaticRegisterNativesUAbilityTask_WaitGameplayTag()
	{
		FNativeFunctionRegistrar::RegisterFunction(UAbilityTask_WaitGameplayTag::StaticClass(),"GameplayTagCallback",(Native)&UAbilityTask_WaitGameplayTag::execGameplayTagCallback);
	}
	IMPLEMENT_CLASS(UAbilityTask_WaitGameplayTag, 2465208729);
	void UAbilityTask_WaitGameplayTagAdded::StaticRegisterNativesUAbilityTask_WaitGameplayTagAdded()
	{
		FNativeFunctionRegistrar::RegisterFunction(UAbilityTask_WaitGameplayTagAdded::StaticClass(),"WaitGameplayTagAdd",(Native)&UAbilityTask_WaitGameplayTagAdded::execWaitGameplayTagAdd);
	}
	IMPLEMENT_CLASS(UAbilityTask_WaitGameplayTagAdded, 2052536832);
	void UAbilityTask_WaitGameplayTagRemoved::StaticRegisterNativesUAbilityTask_WaitGameplayTagRemoved()
	{
		FNativeFunctionRegistrar::RegisterFunction(UAbilityTask_WaitGameplayTagRemoved::StaticClass(),"WaitGameplayTagRemove",(Native)&UAbilityTask_WaitGameplayTagRemoved::execWaitGameplayTagRemove);
	}
	IMPLEMENT_CLASS(UAbilityTask_WaitGameplayTagRemoved, 3470875195);
	void UAbilityTask_WaitInputPress::StaticRegisterNativesUAbilityTask_WaitInputPress()
	{
		FNativeFunctionRegistrar::RegisterFunction(UAbilityTask_WaitInputPress::StaticClass(),"OnPressCallback",(Native)&UAbilityTask_WaitInputPress::execOnPressCallback);
		FNativeFunctionRegistrar::RegisterFunction(UAbilityTask_WaitInputPress::StaticClass(),"WaitInputPress",(Native)&UAbilityTask_WaitInputPress::execWaitInputPress);
	}
	IMPLEMENT_CLASS(UAbilityTask_WaitInputPress, 235452139);
	void UAbilityTask_WaitInputRelease::StaticRegisterNativesUAbilityTask_WaitInputRelease()
	{
		FNativeFunctionRegistrar::RegisterFunction(UAbilityTask_WaitInputRelease::StaticClass(),"OnReleaseCallback",(Native)&UAbilityTask_WaitInputRelease::execOnReleaseCallback);
		FNativeFunctionRegistrar::RegisterFunction(UAbilityTask_WaitInputRelease::StaticClass(),"WaitInputRelease",(Native)&UAbilityTask_WaitInputRelease::execWaitInputRelease);
	}
	IMPLEMENT_CLASS(UAbilityTask_WaitInputRelease, 4048088935);
	void UAbilityTask_WaitMovementModeChange::StaticRegisterNativesUAbilityTask_WaitMovementModeChange()
	{
		FNativeFunctionRegistrar::RegisterFunction(UAbilityTask_WaitMovementModeChange::StaticClass(),"CreateWaitMovementModeChange",(Native)&UAbilityTask_WaitMovementModeChange::execCreateWaitMovementModeChange);
		FNativeFunctionRegistrar::RegisterFunction(UAbilityTask_WaitMovementModeChange::StaticClass(),"OnMovementModeChange",(Native)&UAbilityTask_WaitMovementModeChange::execOnMovementModeChange);
	}
	IMPLEMENT_CLASS(UAbilityTask_WaitMovementModeChange, 1907860411);
	void UAbilityTask_WaitOverlap::StaticRegisterNativesUAbilityTask_WaitOverlap()
	{
		FNativeFunctionRegistrar::RegisterFunction(UAbilityTask_WaitOverlap::StaticClass(),"OnHitCallback",(Native)&UAbilityTask_WaitOverlap::execOnHitCallback);
		FNativeFunctionRegistrar::RegisterFunction(UAbilityTask_WaitOverlap::StaticClass(),"OnOverlapCallback",(Native)&UAbilityTask_WaitOverlap::execOnOverlapCallback);
		FNativeFunctionRegistrar::RegisterFunction(UAbilityTask_WaitOverlap::StaticClass(),"WaitForOverlap",(Native)&UAbilityTask_WaitOverlap::execWaitForOverlap);
	}
	IMPLEMENT_CLASS(UAbilityTask_WaitOverlap, 232829932);
	void UAbilityTask_WaitTargetData::StaticRegisterNativesUAbilityTask_WaitTargetData()
	{
		FNativeFunctionRegistrar::RegisterFunction(UAbilityTask_WaitTargetData::StaticClass(),"BeginSpawningActor",(Native)&UAbilityTask_WaitTargetData::execBeginSpawningActor);
		FNativeFunctionRegistrar::RegisterFunction(UAbilityTask_WaitTargetData::StaticClass(),"FinishSpawningActor",(Native)&UAbilityTask_WaitTargetData::execFinishSpawningActor);
		FNativeFunctionRegistrar::RegisterFunction(UAbilityTask_WaitTargetData::StaticClass(),"OnTargetDataCancelledCallback",(Native)&UAbilityTask_WaitTargetData::execOnTargetDataCancelledCallback);
		FNativeFunctionRegistrar::RegisterFunction(UAbilityTask_WaitTargetData::StaticClass(),"OnTargetDataReadyCallback",(Native)&UAbilityTask_WaitTargetData::execOnTargetDataReadyCallback);
		FNativeFunctionRegistrar::RegisterFunction(UAbilityTask_WaitTargetData::StaticClass(),"OnTargetDataReplicatedCallback",(Native)&UAbilityTask_WaitTargetData::execOnTargetDataReplicatedCallback);
		FNativeFunctionRegistrar::RegisterFunction(UAbilityTask_WaitTargetData::StaticClass(),"OnTargetDataReplicatedCancelledCallback",(Native)&UAbilityTask_WaitTargetData::execOnTargetDataReplicatedCancelledCallback);
		FNativeFunctionRegistrar::RegisterFunction(UAbilityTask_WaitTargetData::StaticClass(),"WaitTargetData",(Native)&UAbilityTask_WaitTargetData::execWaitTargetData);
		FNativeFunctionRegistrar::RegisterFunction(UAbilityTask_WaitTargetData::StaticClass(),"WaitTargetDataUsingActor",(Native)&UAbilityTask_WaitTargetData::execWaitTargetDataUsingActor);
	}
	IMPLEMENT_CLASS(UAbilityTask_WaitTargetData, 3628645693);
	void UAbilityTask_WaitVelocityChange::StaticRegisterNativesUAbilityTask_WaitVelocityChange()
	{
		FNativeFunctionRegistrar::RegisterFunction(UAbilityTask_WaitVelocityChange::StaticClass(),"CreateWaitVelocityChange",(Native)&UAbilityTask_WaitVelocityChange::execCreateWaitVelocityChange);
	}
	IMPLEMENT_CLASS(UAbilityTask_WaitVelocityChange, 2393851345);
	void UAbilitySystemTestAttributeSet::StaticRegisterNativesUAbilitySystemTestAttributeSet()
	{
	}
	IMPLEMENT_CLASS(UAbilitySystemTestAttributeSet, 169631379);
	void UGameplayAbility_CharacterJump::StaticRegisterNativesUGameplayAbility_CharacterJump()
	{
	}
	IMPLEMENT_CLASS(UGameplayAbility_CharacterJump, 84123961);
	void UGameplayAbility_Montage::StaticRegisterNativesUGameplayAbility_Montage()
	{
	}
	IMPLEMENT_CLASS(UGameplayAbility_Montage, 2999787910);
	void UGameplayAbilityBlueprint::StaticRegisterNativesUGameplayAbilityBlueprint()
	{
	}
	IMPLEMENT_CLASS(UGameplayAbilityBlueprint, 3748747918);
	void UGameplayAbilityBlueprintGeneratedClass::StaticRegisterNativesUGameplayAbilityBlueprintGeneratedClass()
	{
	}
	IMPLEMENT_CLASS(UGameplayAbilityBlueprintGeneratedClass, 3553325128);
static class UEnum* EGameplayAbilityInputBinds_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UEnum* Z_Construct_UEnum_GameplayAbilities_EGameplayAbilityInputBinds();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticEnum(Z_Construct_UEnum_GameplayAbilities_EGameplayAbilityInputBinds, Z_Construct_UPackage_GameplayAbilities(), TEXT("EGameplayAbilityInputBinds"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EGameplayAbilityInputBinds(EGameplayAbilityInputBinds_StaticEnum, TEXT("/Script/GameplayAbilities"));
class UScriptStruct* FGameplayAbilityBindInfo::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayAbilityBindInfo();
		extern GAMEPLAYABILITIES_API uint32 Get_Z_Construct_UScriptStruct_FGameplayAbilityBindInfo_CRC();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FGameplayAbilityBindInfo, Z_Construct_UPackage_GameplayAbilities(), TEXT("GameplayAbilityBindInfo"), sizeof(FGameplayAbilityBindInfo), Get_Z_Construct_UScriptStruct_FGameplayAbilityBindInfo_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FGameplayAbilityBindInfo(FGameplayAbilityBindInfo::StaticStruct, TEXT("/Script/GameplayAbilities"));
static struct FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayAbilityBindInfo
{
	FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayAbilityBindInfo()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("GameplayAbilityBindInfo")),new UScriptStruct::TCppStructOps<FGameplayAbilityBindInfo>);
	}
} ScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayAbilityBindInfo;
	void UGameplayAbilitySet::StaticRegisterNativesUGameplayAbilitySet()
	{
	}
	IMPLEMENT_CLASS(UGameplayAbilitySet, 2359432164);
class UScriptStruct* FWorldReticleParameters::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FWorldReticleParameters();
		extern GAMEPLAYABILITIES_API uint32 Get_Z_Construct_UScriptStruct_FWorldReticleParameters_CRC();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FWorldReticleParameters, Z_Construct_UPackage_GameplayAbilities(), TEXT("WorldReticleParameters"), sizeof(FWorldReticleParameters), Get_Z_Construct_UScriptStruct_FWorldReticleParameters_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FWorldReticleParameters(FWorldReticleParameters::StaticStruct, TEXT("/Script/GameplayAbilities"));
static struct FScriptStruct_GameplayAbilities_StaticRegisterNativesFWorldReticleParameters
{
	FScriptStruct_GameplayAbilities_StaticRegisterNativesFWorldReticleParameters()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("WorldReticleParameters")),new UScriptStruct::TCppStructOps<FWorldReticleParameters>);
	}
} ScriptStruct_GameplayAbilities_StaticRegisterNativesFWorldReticleParameters;
	void AGameplayAbilityWorldReticle::OnParametersInitialized()
	{
		ProcessEvent(FindFunctionChecked(GAMEPLAYABILITIES_OnParametersInitialized),NULL);
	}
	void AGameplayAbilityWorldReticle::OnTargetingAnActor(bool bNewValue)
	{
		GameplayAbilityWorldReticle_eventOnTargetingAnActor_Parms Parms;
		Parms.bNewValue=bNewValue ? true : false;
		ProcessEvent(FindFunctionChecked(GAMEPLAYABILITIES_OnTargetingAnActor),&Parms);
	}
	void AGameplayAbilityWorldReticle::OnValidTargetChanged(bool bNewValue)
	{
		GameplayAbilityWorldReticle_eventOnValidTargetChanged_Parms Parms;
		Parms.bNewValue=bNewValue ? true : false;
		ProcessEvent(FindFunctionChecked(GAMEPLAYABILITIES_OnValidTargetChanged),&Parms);
	}
	void AGameplayAbilityWorldReticle::SetReticleMaterialParamFloat(FName ParamName, float value)
	{
		GameplayAbilityWorldReticle_eventSetReticleMaterialParamFloat_Parms Parms;
		Parms.ParamName=ParamName;
		Parms.value=value;
		ProcessEvent(FindFunctionChecked(GAMEPLAYABILITIES_SetReticleMaterialParamFloat),&Parms);
	}
	void AGameplayAbilityWorldReticle::SetReticleMaterialParamVector(FName ParamName, FVector value)
	{
		GameplayAbilityWorldReticle_eventSetReticleMaterialParamVector_Parms Parms;
		Parms.ParamName=ParamName;
		Parms.value=value;
		ProcessEvent(FindFunctionChecked(GAMEPLAYABILITIES_SetReticleMaterialParamVector),&Parms);
	}
	void AGameplayAbilityWorldReticle::StaticRegisterNativesAGameplayAbilityWorldReticle()
	{
		FNativeFunctionRegistrar::RegisterFunction(AGameplayAbilityWorldReticle::StaticClass(),"FaceTowardSource",(Native)&AGameplayAbilityWorldReticle::execFaceTowardSource);
	}
	IMPLEMENT_CLASS(AGameplayAbilityWorldReticle, 960893330);
static class UEnum* ETargetAbilitySelfSelection_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UEnum* Z_Construct_UEnum_GameplayAbilities_ETargetAbilitySelfSelection();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticEnum(Z_Construct_UEnum_GameplayAbilities_ETargetAbilitySelfSelection, Z_Construct_UPackage_GameplayAbilities(), TEXT("ETargetAbilitySelfSelection"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_ETargetAbilitySelfSelection(ETargetAbilitySelfSelection_StaticEnum, TEXT("/Script/GameplayAbilities"));
	void AGameplayAbilityTargetActor::StaticRegisterNativesAGameplayAbilityTargetActor()
	{
		FNativeFunctionRegistrar::RegisterFunction(AGameplayAbilityTargetActor::StaticClass(),"CancelTargeting",(Native)&AGameplayAbilityTargetActor::execCancelTargeting);
		FNativeFunctionRegistrar::RegisterFunction(AGameplayAbilityTargetActor::StaticClass(),"ConfirmTargeting",(Native)&AGameplayAbilityTargetActor::execConfirmTargeting);
	}
	IMPLEMENT_CLASS(AGameplayAbilityTargetActor, 3040917314);
	void AGameplayAbilityTargetActor_Radius::StaticRegisterNativesAGameplayAbilityTargetActor_Radius()
	{
	}
	IMPLEMENT_CLASS(AGameplayAbilityTargetActor_Radius, 1808898141);
	void AGameplayAbilityTargetActor_Trace::StaticRegisterNativesAGameplayAbilityTargetActor_Trace()
	{
	}
	IMPLEMENT_CLASS(AGameplayAbilityTargetActor_Trace, 827260882);
	void AGameplayAbilityTargetActor_GroundTrace::StaticRegisterNativesAGameplayAbilityTargetActor_GroundTrace()
	{
	}
	IMPLEMENT_CLASS(AGameplayAbilityTargetActor_GroundTrace, 3920722541);
	void AGameplayAbilityWorldReticle_ActorVisualization::StaticRegisterNativesAGameplayAbilityWorldReticle_ActorVisualization()
	{
	}
	IMPLEMENT_CLASS(AGameplayAbilityWorldReticle_ActorVisualization, 2678527311);
	void AGameplayAbilityTargetActor_ActorPlacement::StaticRegisterNativesAGameplayAbilityTargetActor_ActorPlacement()
	{
	}
	IMPLEMENT_CLASS(AGameplayAbilityTargetActor_ActorPlacement, 604484644);
	void AGameplayAbilityTargetActor_SingleLineTrace::StaticRegisterNativesAGameplayAbilityTargetActor_SingleLineTrace()
	{
	}
	IMPLEMENT_CLASS(AGameplayAbilityTargetActor_SingleLineTrace, 4126277349);
	void AGameplayCueNotify_Actor::K2_HandleGameplayCue(AActor* MyTarget, EGameplayCueEvent::Type EventType, FGameplayCueParameters Parameters)
	{
		GameplayCueNotify_Actor_eventK2_HandleGameplayCue_Parms Parms;
		Parms.MyTarget=MyTarget;
		Parms.EventType=EventType;
		Parms.Parameters=Parameters;
		ProcessEvent(FindFunctionChecked(GAMEPLAYABILITIES_K2_HandleGameplayCue),&Parms);
	}
	bool AGameplayCueNotify_Actor::OnActive(AActor* MyTarget, FGameplayCueParameters Parameters)
	{
		GameplayCueNotify_Actor_eventOnActive_Parms Parms;
		Parms.MyTarget=MyTarget;
		Parms.Parameters=Parameters;
		ProcessEvent(FindFunctionChecked(GAMEPLAYABILITIES_OnActive),&Parms);
		return !!Parms.ReturnValue;
	}
	bool AGameplayCueNotify_Actor::OnExecute(AActor* MyTarget, FGameplayCueParameters Parameters)
	{
		GameplayCueNotify_Actor_eventOnExecute_Parms Parms;
		Parms.MyTarget=MyTarget;
		Parms.Parameters=Parameters;
		ProcessEvent(FindFunctionChecked(GAMEPLAYABILITIES_OnExecute),&Parms);
		return !!Parms.ReturnValue;
	}
	bool AGameplayCueNotify_Actor::OnRemove(AActor* MyTarget, FGameplayCueParameters Parameters)
	{
		GameplayCueNotify_Actor_eventOnRemove_Parms Parms;
		Parms.MyTarget=MyTarget;
		Parms.Parameters=Parameters;
		ProcessEvent(FindFunctionChecked(GAMEPLAYABILITIES_OnRemove),&Parms);
		return !!Parms.ReturnValue;
	}
	bool AGameplayCueNotify_Actor::WhileActive(AActor* MyTarget, FGameplayCueParameters Parameters)
	{
		GameplayCueNotify_Actor_eventWhileActive_Parms Parms;
		Parms.MyTarget=MyTarget;
		Parms.Parameters=Parameters;
		ProcessEvent(FindFunctionChecked(GAMEPLAYABILITIES_WhileActive),&Parms);
		return !!Parms.ReturnValue;
	}
	void AGameplayCueNotify_Actor::StaticRegisterNativesAGameplayCueNotify_Actor()
	{
		FNativeFunctionRegistrar::RegisterFunction(AGameplayCueNotify_Actor::StaticClass(),"OnActive",(Native)&AGameplayCueNotify_Actor::execOnActive);
		FNativeFunctionRegistrar::RegisterFunction(AGameplayCueNotify_Actor::StaticClass(),"OnExecute",(Native)&AGameplayCueNotify_Actor::execOnExecute);
		FNativeFunctionRegistrar::RegisterFunction(AGameplayCueNotify_Actor::StaticClass(),"OnOwnerDestroyed",(Native)&AGameplayCueNotify_Actor::execOnOwnerDestroyed);
		FNativeFunctionRegistrar::RegisterFunction(AGameplayCueNotify_Actor::StaticClass(),"OnRemove",(Native)&AGameplayCueNotify_Actor::execOnRemove);
		FNativeFunctionRegistrar::RegisterFunction(AGameplayCueNotify_Actor::StaticClass(),"WhileActive",(Native)&AGameplayCueNotify_Actor::execWhileActive);
	}
	IMPLEMENT_CLASS(AGameplayCueNotify_Actor, 2651934479);
static class UEnum* EGameplayCuePayloadType_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UEnum* Z_Construct_UEnum_GameplayAbilities_EGameplayCuePayloadType();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticEnum(Z_Construct_UEnum_GameplayAbilities_EGameplayCuePayloadType, Z_Construct_UPackage_GameplayAbilities(), TEXT("EGameplayCuePayloadType"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EGameplayCuePayloadType(EGameplayCuePayloadType_StaticEnum, TEXT("/Script/GameplayAbilities"));
class UScriptStruct* FGameplayCuePendingExecute::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayCuePendingExecute();
		extern GAMEPLAYABILITIES_API uint32 Get_Z_Construct_UScriptStruct_FGameplayCuePendingExecute_CRC();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FGameplayCuePendingExecute, Z_Construct_UPackage_GameplayAbilities(), TEXT("GameplayCuePendingExecute"), sizeof(FGameplayCuePendingExecute), Get_Z_Construct_UScriptStruct_FGameplayCuePendingExecute_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FGameplayCuePendingExecute(FGameplayCuePendingExecute::StaticStruct, TEXT("/Script/GameplayAbilities"));
static struct FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayCuePendingExecute
{
	FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayCuePendingExecute()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("GameplayCuePendingExecute")),new UScriptStruct::TCppStructOps<FGameplayCuePendingExecute>);
	}
} ScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayCuePendingExecute;
	void UGameplayCueManager::StaticRegisterNativesUGameplayCueManager()
	{
	}
	IMPLEMENT_CLASS(UGameplayCueManager, 499906646);
	void UGameplayCueNotify_Static::K2_HandleGameplayCue(AActor* MyTarget, EGameplayCueEvent::Type EventType, FGameplayCueParameters Parameters) const
	{
		GameplayCueNotify_Static_eventK2_HandleGameplayCue_Parms Parms;
		Parms.MyTarget=MyTarget;
		Parms.EventType=EventType;
		Parms.Parameters=Parameters;
		const_cast<UGameplayCueNotify_Static*>(this)->ProcessEvent(FindFunctionChecked(GAMEPLAYABILITIES_K2_HandleGameplayCue),&Parms);
	}
	bool UGameplayCueNotify_Static::OnActive(AActor* MyTarget, FGameplayCueParameters Parameters) const
	{
		GameplayCueNotify_Static_eventOnActive_Parms Parms;
		Parms.MyTarget=MyTarget;
		Parms.Parameters=Parameters;
		const_cast<UGameplayCueNotify_Static*>(this)->ProcessEvent(FindFunctionChecked(GAMEPLAYABILITIES_OnActive),&Parms);
		return !!Parms.ReturnValue;
	}
	bool UGameplayCueNotify_Static::OnExecute(AActor* MyTarget, FGameplayCueParameters Parameters) const
	{
		GameplayCueNotify_Static_eventOnExecute_Parms Parms;
		Parms.MyTarget=MyTarget;
		Parms.Parameters=Parameters;
		const_cast<UGameplayCueNotify_Static*>(this)->ProcessEvent(FindFunctionChecked(GAMEPLAYABILITIES_OnExecute),&Parms);
		return !!Parms.ReturnValue;
	}
	bool UGameplayCueNotify_Static::OnRemove(AActor* MyTarget, FGameplayCueParameters Parameters) const
	{
		GameplayCueNotify_Static_eventOnRemove_Parms Parms;
		Parms.MyTarget=MyTarget;
		Parms.Parameters=Parameters;
		const_cast<UGameplayCueNotify_Static*>(this)->ProcessEvent(FindFunctionChecked(GAMEPLAYABILITIES_OnRemove),&Parms);
		return !!Parms.ReturnValue;
	}
	bool UGameplayCueNotify_Static::WhileActive(AActor* MyTarget, FGameplayCueParameters Parameters) const
	{
		GameplayCueNotify_Static_eventWhileActive_Parms Parms;
		Parms.MyTarget=MyTarget;
		Parms.Parameters=Parameters;
		const_cast<UGameplayCueNotify_Static*>(this)->ProcessEvent(FindFunctionChecked(GAMEPLAYABILITIES_WhileActive),&Parms);
		return !!Parms.ReturnValue;
	}
	void UGameplayCueNotify_Static::StaticRegisterNativesUGameplayCueNotify_Static()
	{
		FNativeFunctionRegistrar::RegisterFunction(UGameplayCueNotify_Static::StaticClass(),"OnActive",(Native)&UGameplayCueNotify_Static::execOnActive);
		FNativeFunctionRegistrar::RegisterFunction(UGameplayCueNotify_Static::StaticClass(),"OnExecute",(Native)&UGameplayCueNotify_Static::execOnExecute);
		FNativeFunctionRegistrar::RegisterFunction(UGameplayCueNotify_Static::StaticClass(),"OnRemove",(Native)&UGameplayCueNotify_Static::execOnRemove);
		FNativeFunctionRegistrar::RegisterFunction(UGameplayCueNotify_Static::StaticClass(),"WhileActive",(Native)&UGameplayCueNotify_Static::execWhileActive);
	}
	IMPLEMENT_CLASS(UGameplayCueNotify_Static, 1256850480);
	void UGameplayCueNotify_HitImpact::StaticRegisterNativesUGameplayCueNotify_HitImpact()
	{
	}
	IMPLEMENT_CLASS(UGameplayCueNotify_HitImpact, 3814258071);
class UScriptStruct* FGameplayCueNotifyData::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayCueNotifyData();
		extern GAMEPLAYABILITIES_API uint32 Get_Z_Construct_UScriptStruct_FGameplayCueNotifyData_CRC();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FGameplayCueNotifyData, Z_Construct_UPackage_GameplayAbilities(), TEXT("GameplayCueNotifyData"), sizeof(FGameplayCueNotifyData), Get_Z_Construct_UScriptStruct_FGameplayCueNotifyData_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FGameplayCueNotifyData(FGameplayCueNotifyData::StaticStruct, TEXT("/Script/GameplayAbilities"));
static struct FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayCueNotifyData
{
	FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayCueNotifyData()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("GameplayCueNotifyData")),new UScriptStruct::TCppStructOps<FGameplayCueNotifyData>);
	}
} ScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayCueNotifyData;
	void UGameplayCueSet::StaticRegisterNativesUGameplayCueSet()
	{
	}
	IMPLEMENT_CLASS(UGameplayCueSet, 1795452546);
	void UGameplayEffectTemplate::StaticRegisterNativesUGameplayEffectTemplate()
	{
	}
	IMPLEMENT_CLASS(UGameplayEffectTemplate, 73026348);
class UScriptStruct* FGameplayEffectCustomExecutionOutput::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayEffectCustomExecutionOutput();
		extern GAMEPLAYABILITIES_API uint32 Get_Z_Construct_UScriptStruct_FGameplayEffectCustomExecutionOutput_CRC();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FGameplayEffectCustomExecutionOutput, Z_Construct_UPackage_GameplayAbilities(), TEXT("GameplayEffectCustomExecutionOutput"), sizeof(FGameplayEffectCustomExecutionOutput), Get_Z_Construct_UScriptStruct_FGameplayEffectCustomExecutionOutput_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FGameplayEffectCustomExecutionOutput(FGameplayEffectCustomExecutionOutput::StaticStruct, TEXT("/Script/GameplayAbilities"));
static struct FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayEffectCustomExecutionOutput
{
	FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayEffectCustomExecutionOutput()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("GameplayEffectCustomExecutionOutput")),new UScriptStruct::TCppStructOps<FGameplayEffectCustomExecutionOutput>);
	}
} ScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayEffectCustomExecutionOutput;
class UScriptStruct* FGameplayEffectCustomExecutionParameters::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayEffectCustomExecutionParameters();
		extern GAMEPLAYABILITIES_API uint32 Get_Z_Construct_UScriptStruct_FGameplayEffectCustomExecutionParameters_CRC();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FGameplayEffectCustomExecutionParameters, Z_Construct_UPackage_GameplayAbilities(), TEXT("GameplayEffectCustomExecutionParameters"), sizeof(FGameplayEffectCustomExecutionParameters), Get_Z_Construct_UScriptStruct_FGameplayEffectCustomExecutionParameters_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FGameplayEffectCustomExecutionParameters(FGameplayEffectCustomExecutionParameters::StaticStruct, TEXT("/Script/GameplayAbilities"));
static struct FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayEffectCustomExecutionParameters
{
	FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayEffectCustomExecutionParameters()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("GameplayEffectCustomExecutionParameters")),new UScriptStruct::TCppStructOps<FGameplayEffectCustomExecutionParameters>);
	}
} ScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayEffectCustomExecutionParameters;
	void UGameplayEffectExecutionCalculation::Execute(const FGameplayEffectCustomExecutionParameters& ExecutionParams, FGameplayEffectCustomExecutionOutput& OutExecutionOutput) const
	{
		GameplayEffectExecutionCalculation_eventExecute_Parms Parms;
		Parms.ExecutionParams=ExecutionParams;
		Parms.OutExecutionOutput=OutExecutionOutput;
		const_cast<UGameplayEffectExecutionCalculation*>(this)->ProcessEvent(FindFunctionChecked(GAMEPLAYABILITIES_Execute),&Parms);
		OutExecutionOutput=Parms.OutExecutionOutput;
	}
	void UGameplayEffectExecutionCalculation::StaticRegisterNativesUGameplayEffectExecutionCalculation()
	{
		FNativeFunctionRegistrar::RegisterFunction(UGameplayEffectExecutionCalculation::StaticClass(),"Execute",(Native)&UGameplayEffectExecutionCalculation::execExecute);
	}
	IMPLEMENT_CLASS(UGameplayEffectExecutionCalculation, 3586913619);
	float UGameplayModMagnitudeCalculation::CalculateBaseMagnitude(const FGameplayEffectSpec& Spec) const
	{
		GameplayModMagnitudeCalculation_eventCalculateBaseMagnitude_Parms Parms;
		Parms.Spec=Spec;
		const_cast<UGameplayModMagnitudeCalculation*>(this)->ProcessEvent(FindFunctionChecked(GAMEPLAYABILITIES_CalculateBaseMagnitude),&Parms);
		return Parms.ReturnValue;
	}
	void UGameplayModMagnitudeCalculation::StaticRegisterNativesUGameplayModMagnitudeCalculation()
	{
		FNativeFunctionRegistrar::RegisterFunction(UGameplayModMagnitudeCalculation::StaticClass(),"CalculateBaseMagnitude",(Native)&UGameplayModMagnitudeCalculation::execCalculateBaseMagnitude);
	}
	IMPLEMENT_CLASS(UGameplayModMagnitudeCalculation, 4258390104);
	void UGameplayEffectExtension::StaticRegisterNativesUGameplayEffectExtension()
	{
	}
	IMPLEMENT_CLASS(UGameplayEffectExtension, 1885888718);
	void UGameplayEffectExtension_LifestealTest::StaticRegisterNativesUGameplayEffectExtension_LifestealTest()
	{
	}
	IMPLEMENT_CLASS(UGameplayEffectExtension_LifestealTest, 2511001733);
	void UGameplayEffectExtension_ShieldTest::StaticRegisterNativesUGameplayEffectExtension_ShieldTest()
	{
	}
	IMPLEMENT_CLASS(UGameplayEffectExtension_ShieldTest, 2907046011);
	void UGameplayEffectUIData::StaticRegisterNativesUGameplayEffectUIData()
	{
	}
	IMPLEMENT_CLASS(UGameplayEffectUIData, 4237386925);
	void UGameplayEffectUIData_TextOnly::StaticRegisterNativesUGameplayEffectUIData_TextOnly()
	{
	}
	IMPLEMENT_CLASS(UGameplayEffectUIData_TextOnly, 932778651);
class UScriptStruct* FGameplayTagResponseTableEntry::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayTagResponseTableEntry();
		extern GAMEPLAYABILITIES_API uint32 Get_Z_Construct_UScriptStruct_FGameplayTagResponseTableEntry_CRC();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FGameplayTagResponseTableEntry, Z_Construct_UPackage_GameplayAbilities(), TEXT("GameplayTagResponseTableEntry"), sizeof(FGameplayTagResponseTableEntry), Get_Z_Construct_UScriptStruct_FGameplayTagResponseTableEntry_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FGameplayTagResponseTableEntry(FGameplayTagResponseTableEntry::StaticStruct, TEXT("/Script/GameplayAbilities"));
static struct FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayTagResponseTableEntry
{
	FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayTagResponseTableEntry()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("GameplayTagResponseTableEntry")),new UScriptStruct::TCppStructOps<FGameplayTagResponseTableEntry>);
	}
} ScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayTagResponseTableEntry;
class UScriptStruct* FGameplayTagReponsePair::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayTagReponsePair();
		extern GAMEPLAYABILITIES_API uint32 Get_Z_Construct_UScriptStruct_FGameplayTagReponsePair_CRC();
		extern GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FGameplayTagReponsePair, Z_Construct_UPackage_GameplayAbilities(), TEXT("GameplayTagReponsePair"), sizeof(FGameplayTagReponsePair), Get_Z_Construct_UScriptStruct_FGameplayTagReponsePair_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FGameplayTagReponsePair(FGameplayTagReponsePair::StaticStruct, TEXT("/Script/GameplayAbilities"));
static struct FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayTagReponsePair
{
	FScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayTagReponsePair()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("GameplayTagReponsePair")),new UScriptStruct::TCppStructOps<FGameplayTagReponsePair>);
	}
} ScriptStruct_GameplayAbilities_StaticRegisterNativesFGameplayTagReponsePair;
	void UGameplayTagReponseTable::StaticRegisterNativesUGameplayTagReponseTable()
	{
		FNativeFunctionRegistrar::RegisterFunction(UGameplayTagReponseTable::StaticClass(),"TagResponseEvent",(Native)&UGameplayTagReponseTable::execTagResponseEvent);
	}
	IMPLEMENT_CLASS(UGameplayTagReponseTable, 1898047357);
	void UTickableAttributeSetInterface::StaticRegisterNativesUTickableAttributeSetInterface()
	{
	}
	IMPLEMENT_CLASS(UTickableAttributeSetInterface, 2479367925);
FName GAMEPLAYABILITIES_BlueprintCustomHandler = FName(TEXT("BlueprintCustomHandler"));
FName GAMEPLAYABILITIES_CalculateBaseMagnitude = FName(TEXT("CalculateBaseMagnitude"));
FName GAMEPLAYABILITIES_ClientActivateAbilityFailed = FName(TEXT("ClientActivateAbilityFailed"));
FName GAMEPLAYABILITIES_ClientActivateAbilitySucceed = FName(TEXT("ClientActivateAbilitySucceed"));
FName GAMEPLAYABILITIES_ClientActivateAbilitySucceedWithEventData = FName(TEXT("ClientActivateAbilitySucceedWithEventData"));
FName GAMEPLAYABILITIES_ClientCancelAbility = FName(TEXT("ClientCancelAbility"));
FName GAMEPLAYABILITIES_ClientEndAbility = FName(TEXT("ClientEndAbility"));
FName GAMEPLAYABILITIES_ClientSetReplicatedEvent = FName(TEXT("ClientSetReplicatedEvent"));
FName GAMEPLAYABILITIES_ClientTryActivateAbility = FName(TEXT("ClientTryActivateAbility"));
FName GAMEPLAYABILITIES_Execute = FName(TEXT("Execute"));
FName GAMEPLAYABILITIES_K2_ActivateAbility = FName(TEXT("K2_ActivateAbility"));
FName GAMEPLAYABILITIES_K2_ActivateAbilityFromEvent = FName(TEXT("K2_ActivateAbilityFromEvent"));
FName GAMEPLAYABILITIES_K2_CanActivateAbility = FName(TEXT("K2_CanActivateAbility"));
FName GAMEPLAYABILITIES_K2_CommitExecute = FName(TEXT("K2_CommitExecute"));
FName GAMEPLAYABILITIES_K2_HandleGameplayCue = FName(TEXT("K2_HandleGameplayCue"));
FName GAMEPLAYABILITIES_K2_OnEndAbility = FName(TEXT("K2_OnEndAbility"));
FName GAMEPLAYABILITIES_K2_ShouldAbilityRespondToEvent = FName(TEXT("K2_ShouldAbilityRespondToEvent"));
FName GAMEPLAYABILITIES_NetMulticast_InvokeGameplayCueAdded = FName(TEXT("NetMulticast_InvokeGameplayCueAdded"));
FName GAMEPLAYABILITIES_NetMulticast_InvokeGameplayCueAddedAndWhileActive_FromSpec = FName(TEXT("NetMulticast_InvokeGameplayCueAddedAndWhileActive_FromSpec"));
FName GAMEPLAYABILITIES_NetMulticast_InvokeGameplayCueExecuted = FName(TEXT("NetMulticast_InvokeGameplayCueExecuted"));
FName GAMEPLAYABILITIES_NetMulticast_InvokeGameplayCueExecuted_FromSpec = FName(TEXT("NetMulticast_InvokeGameplayCueExecuted_FromSpec"));
FName GAMEPLAYABILITIES_NetMulticast_InvokeGameplayCueExecuted_WithParams = FName(TEXT("NetMulticast_InvokeGameplayCueExecuted_WithParams"));
FName GAMEPLAYABILITIES_OnActive = FName(TEXT("OnActive"));
FName GAMEPLAYABILITIES_OnExecute = FName(TEXT("OnExecute"));
FName GAMEPLAYABILITIES_OnParametersInitialized = FName(TEXT("OnParametersInitialized"));
FName GAMEPLAYABILITIES_OnRemove = FName(TEXT("OnRemove"));
FName GAMEPLAYABILITIES_OnTargetingAnActor = FName(TEXT("OnTargetingAnActor"));
FName GAMEPLAYABILITIES_OnValidTargetChanged = FName(TEXT("OnValidTargetChanged"));
FName GAMEPLAYABILITIES_ServerCancelAbility = FName(TEXT("ServerCancelAbility"));
FName GAMEPLAYABILITIES_ServerCurrentMontageJumpToSectionName = FName(TEXT("ServerCurrentMontageJumpToSectionName"));
FName GAMEPLAYABILITIES_ServerCurrentMontageSetNextSectionName = FName(TEXT("ServerCurrentMontageSetNextSectionName"));
FName GAMEPLAYABILITIES_ServerEndAbility = FName(TEXT("ServerEndAbility"));
FName GAMEPLAYABILITIES_ServerSetInputPressed = FName(TEXT("ServerSetInputPressed"));
FName GAMEPLAYABILITIES_ServerSetInputReleased = FName(TEXT("ServerSetInputReleased"));
FName GAMEPLAYABILITIES_ServerSetReplicatedEvent = FName(TEXT("ServerSetReplicatedEvent"));
FName GAMEPLAYABILITIES_ServerSetReplicatedTargetData = FName(TEXT("ServerSetReplicatedTargetData"));
FName GAMEPLAYABILITIES_ServerSetReplicatedTargetDataCancelled = FName(TEXT("ServerSetReplicatedTargetDataCancelled"));
FName GAMEPLAYABILITIES_ServerTryActivateAbility = FName(TEXT("ServerTryActivateAbility"));
FName GAMEPLAYABILITIES_ServerTryActivateAbilityWithEventData = FName(TEXT("ServerTryActivateAbilityWithEventData"));
FName GAMEPLAYABILITIES_SetReticleMaterialParamFloat = FName(TEXT("SetReticleMaterialParamFloat"));
FName GAMEPLAYABILITIES_SetReticleMaterialParamVector = FName(TEXT("SetReticleMaterialParamVector"));
FName GAMEPLAYABILITIES_WhileActive = FName(TEXT("WhileActive"));
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTableRowBase();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCurveTableRowHandle();
	COREUOBJECT_API class UClass* Z_Construct_UClass_UObject();
	GAMEPLAYTAGS_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayTagContainer();
	GAMEPLAYTAGS_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayTag();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FVector();
	ENGINE_API class UClass* Z_Construct_UClass_AActor_NoRegister();
	COREUOBJECT_API class UClass* Z_Construct_UClass_UObject_NoRegister();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FHitResult();
	ENGINE_API class UClass* Z_Construct_UClass_UMeshComponent_NoRegister();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FTransform();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FFastArraySerializer();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FFastArraySerializerItem();
	GAMEPLAYTAGS_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayTagQuery();
	GAMEPLAYTAGS_API class UClass* Z_Construct_UClass_UGameplayTagAssetInterface_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDataTable_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimMontage_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMovementComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimInstance_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_APlayerController_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USkeletalMeshComponent_NoRegister();
	GAMEPLAYTASKS_API class UClass* Z_Construct_UClass_UGameplayTaskOwnerInterface_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBlueprintFunctionLibrary();
	GAMEPLAYTASKS_API class UClass* Z_Construct_UClass_UGameplayTasksComponent();
	ENGINE_API class UClass* Z_Construct_UClass_AHUD();
	ENGINE_API class UClass* Z_Construct_UClass_UCurveTable_NoRegister();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FStringAssetReference();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FStringClassReference();
	ENGINE_API class UClass* Z_Construct_UClass_ADefaultPawn();
	GAMEPLAYTASKS_API class UClass* Z_Construct_UClass_UGameplayTask();
	ENGINE_API class UClass* Z_Construct_UClass_UCurveVector_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCurveFloat_NoRegister();
	GAMEPLAYTASKS_API class UFunction* Z_Construct_UDelegateFunction_UGameplayTask_GenericGameplayTaskDelegate__DelegateSignature();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMovementMode();
	ENGINE_API class UClass* Z_Construct_UClass_ACharacter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPrimitiveComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBlueprint();
	ENGINE_API class UClass* Z_Construct_UClass_UBlueprintGeneratedClass();
	ENGINE_API class UClass* Z_Construct_UClass_UDataAsset();
	ENGINE_API class UClass* Z_Construct_UClass_AActor();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCollisionProfileName();
	ENGINE_API class UClass* Z_Construct_UClass_UActorComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCapsuleComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialInterface_NoRegister();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FStreamableManager();
	ENGINE_API class UClass* Z_Construct_UClass_UObjectLibrary_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleSystem_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundBase_NoRegister();

	GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FAttributeMetaData();
	GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FScalableFloat();
	GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGlobalCurveDataOverride();
	GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayAttribute();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UAttributeSet_NoRegister();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UAttributeSet();
	GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FPredictionKey();
	GAMEPLAYABILITIES_API class UEnum* Z_Construct_UEnum_GameplayAbilities_EGameplayTagEventType();
	GAMEPLAYABILITIES_API class UEnum* Z_Construct_UEnum_GameplayAbilities_EGameplayCueEvent();
	GAMEPLAYABILITIES_API class UEnum* Z_Construct_UEnum_GameplayAbilities_EGameplayEffectStackingType();
	GAMEPLAYABILITIES_API class UEnum* Z_Construct_UEnum_GameplayAbilities_EGameplayEffectAttributeCaptureSource();
	GAMEPLAYABILITIES_API class UEnum* Z_Construct_UEnum_GameplayAbilities_EGameplayModOp();
	GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayEffectSpecHandle();
	GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FTagContainerAggregator();
	GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayTagRequirements();
	GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayCueParameters();
	GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayEffectContextHandle();
	GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayEffectContext();
	GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayEffectAttributeCaptureDefinition();
	GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayModifierEvaluatedData();
	GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FActiveGameplayEffectHandle();
	GAMEPLAYABILITIES_API class UEnum* Z_Construct_UEnum_GameplayAbilities_EAbilityGenericReplicatedEvent();
	GAMEPLAYABILITIES_API class UEnum* Z_Construct_UEnum_GameplayAbilities_EGameplayAbilityTargetingLocationType();
	GAMEPLAYABILITIES_API class UEnum* Z_Construct_UEnum_GameplayAbilities_EGameplayTargetingConfirmation();
	GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayAbilityTargetData_SingleTargetHit();
	GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayAbilityTargetData_ActorArray();
	GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayAbilityTargetData_LocationInfo();
	GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayAbilityTargetingLocationInfo();
	GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayAbilityTargetDataHandle();
	GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayAbilityTargetData();
	GAMEPLAYABILITIES_API class UEnum* Z_Construct_UEnum_GameplayAbilities_EGameplayEffectGrantedAbilityRemovePolicy();
	GAMEPLAYABILITIES_API class UEnum* Z_Construct_UEnum_GameplayAbilities_EGameplayAbilityActivationMode();
	GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayAbilitySpecContainer();
	GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayAbilitySpec();
	GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayAbilityActivationInfo();
	GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayAbilitySpecDef();
	GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayAbilitySpecHandle();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UGameplayEffectCalculation_NoRegister();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UGameplayEffectCalculation();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UDelegateFunction_GameplayAbilities_ActiveGameplayEffectQueryCustomMatch_Dynamic__DelegateSignature();
	GAMEPLAYABILITIES_API class UEnum* Z_Construct_UEnum_GameplayAbilities_EGameplayEffectStackingPeriodPolicy();
	GAMEPLAYABILITIES_API class UEnum* Z_Construct_UEnum_GameplayAbilities_EGameplayEffectStackingDurationPolicy();
	GAMEPLAYABILITIES_API class UEnum* Z_Construct_UEnum_GameplayAbilities_EGameplayEffectDurationType();
	GAMEPLAYABILITIES_API class UEnum* Z_Construct_UEnum_GameplayAbilities_EAttributeBasedFloatCalculationType();
	GAMEPLAYABILITIES_API class UEnum* Z_Construct_UEnum_GameplayAbilities_EGameplayEffectMagnitudeCalculation();
	GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FActiveGameplayEffectsContainer();
	GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FActiveGameplayEffectQuery();
	GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayEffectQuery();
	GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FActiveGameplayEffect();
	GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayEffectSpecForRPC();
	GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayEffectSpec();
	GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayEffectAttributeCaptureSpecContainer();
	GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayEffectAttributeCaptureSpec();
	GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayEffectModifiedAttribute();
	GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FModifierSpec();
	GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FInheritedTagContainer();
	GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayEffectCue();
	GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayModifierInfo();
	GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayEffectExecutionDefinition();
	GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayEffectExecutionScopedModifierInfo();
	GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayEffectModifierMagnitude();
	GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FSetByCallerFloat();
	GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FCustomCalculationBasedFloat();
	GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FAttributeBasedFloat();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UGameplayEffect_NoRegister();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UGameplayEffect();
	GAMEPLAYABILITIES_API class UEnum* Z_Construct_UEnum_GameplayAbilities_EGameplayAbilityTriggerSource();
	GAMEPLAYABILITIES_API class UEnum* Z_Construct_UEnum_GameplayAbilities_EGameplayAbilityReplicationPolicy();
	GAMEPLAYABILITIES_API class UEnum* Z_Construct_UEnum_GameplayAbilities_EGameplayAbilityNetExecutionPolicy();
	GAMEPLAYABILITIES_API class UEnum* Z_Construct_UEnum_GameplayAbilities_EGameplayAbilityInstancingPolicy();
	GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FAttributeDefaults();
	GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayEventData();
	GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayAbilityLocalAnimMontage();
	GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayAbilityRepAnimMontage();
	GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayAbilitySpecHandleAndPredictionKey();
	GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayAbilityActorInfo();
	GAMEPLAYABILITIES_API class UEnum* Z_Construct_UEnum_GameplayAbilities_ETargetDataFilterSelf();
	GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayTargetDataFilterHandle();
	GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayTargetDataFilter();
	GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FAbilityTriggerData();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UGameplayAbility_BP_ApplyGameplayEffectToOwner();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UGameplayAbility_BP_ApplyGameplayEffectToTarget();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UGameplayAbility_BP_RemoveGameplayEffectFromOwnerWithAssetTags();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UGameplayAbility_BP_RemoveGameplayEffectFromOwnerWithGrantedTags();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UGameplayAbility_CancelTaskByInstanceName();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UGameplayAbility_ConfirmTaskByInstanceName();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UGameplayAbility_EndAbilityState();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UGameplayAbility_EndTaskByInstanceName();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UGameplayAbility_GetAbilityLevel();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UGameplayAbility_GetActorInfo();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UGameplayAbility_GetAvatarActorFromActorInfo();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UGameplayAbility_GetContextFromOwner();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UGameplayAbility_GetCurrentMontage();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UGameplayAbility_GetCurrentSourceObject();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UGameplayAbility_GetOutgoingGameplayEffectSpec();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UGameplayAbility_GetOwningActorFromActorInfo();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UGameplayAbility_GetOwningComponentFromActorInfo();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UGameplayAbility_K2_ActivateAbility();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UGameplayAbility_K2_ActivateAbilityFromEvent();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UGameplayAbility_K2_AddGameplayCue();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UGameplayAbility_K2_ApplyGameplayEffectSpecToOwner();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UGameplayAbility_K2_ApplyGameplayEffectSpecToTarget();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UGameplayAbility_K2_ApplyGameplayEffectToOwner();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UGameplayAbility_K2_ApplyGameplayEffectToTarget();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UGameplayAbility_K2_CanActivateAbility();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UGameplayAbility_K2_CheckAbilityCooldown();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UGameplayAbility_K2_CheckAbilityCost();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UGameplayAbility_K2_CommitAbility();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UGameplayAbility_K2_CommitAbilityCooldown();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UGameplayAbility_K2_CommitAbilityCost();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UGameplayAbility_K2_CommitExecute();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UGameplayAbility_K2_EndAbility();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UGameplayAbility_K2_ExecuteGameplayCue();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UGameplayAbility_K2_ExecuteGameplayCueWithParams();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UGameplayAbility_K2_OnEndAbility();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UGameplayAbility_K2_RemoveGameplayCue();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UGameplayAbility_K2_ShouldAbilityRespondToEvent();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UGameplayAbility_MakeOutgoingGameplayEffectSpec();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UGameplayAbility_MakeTargetLocationInfoFromOwnerActor();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UGameplayAbility_MakeTargetLocationInfoFromOwnerSkeletalMeshComponent();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UGameplayAbility_MontageJumpToSection();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UGameplayAbility_MontageSetNextSectionName();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UGameplayAbility_MontageStop();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UGameplayAbility_SendGameplayEvent();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UGameplayAbility_SetCanBeCanceled();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UGameplayAbility_SetShouldBlockOtherAbilities();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UGameplayAbility_NoRegister();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UGameplayAbility();
	GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FActiveGameplayCueContainer();
	GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FActiveGameplayCue();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UGameplayCueInterface_BlueprintCustomHandler();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UGameplayCueInterface_ForwardGameplayCueToParent();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UGameplayCueInterface_NoRegister();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UGameplayCueInterface();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_AbilityTargetDataFromActor();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_AbilityTargetDataFromActorArray();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_AbilityTargetDataFromHitResult();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_AbilityTargetDataFromLocations();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_AddAssetTag();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_AddAssetTags();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_AddGrantedTag();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_AddGrantedTags();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_AddLinkedGameplayEffectSpec();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_AppendTargetDataHandle();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_AssignSetByCallerMagnitude();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_DoesGameplayCueMeetTagRequirements();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_DoesTargetDataContainActor();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_EffectContextGetEffectCauser();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_EffectContextGetHitResult();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_EffectContextGetInstigatorActor();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_EffectContextGetOrigin();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_EffectContextGetOriginalInstigatorActor();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_EffectContextGetSourceObject();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_EffectContextHasHitResult();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_EffectContextIsInstigatorLocallyControlled();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_FilterTargetData();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_ForwardGameplayCueToTarget();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_GetAbilitySystemComponent();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_GetActiveGameplayEffectStackCount();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_GetActorByIndex();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_GetActorCount();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_GetActorsFromTargetData();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_GetDataCountFromTargetData();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_GetFloatAttribute();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_GetGameplayCueDirection();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_GetGameplayCueEndLocationAndNormal();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_GetHitResult();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_GetHitResultFromTargetData();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_GetInstigatorActor();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_GetInstigatorTransform();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_GetOrigin();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_GetTargetDataEndPoint();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_GetTargetDataEndPointTransform();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_GetTargetDataOrigin();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_HasHitResult();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_IsInstigatorLocallyControlled();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_IsInstigatorLocallyControlledPlayer();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_MakeFilterHandle();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_MakeSpecHandle();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_SendGameplayEventToActor();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_SetDuration();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_SetStackCount();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_SetStackCountToMax();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_TargetDataHasActor();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_TargetDataHasEndPoint();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_TargetDataHasHitResult();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_TargetDataHasOrigin();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UAbilitySystemBlueprintLibrary_NoRegister();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UAbilitySystemBlueprintLibrary();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UDelegateFunction_UAbilitySystemComponent_AbilityConfirmOrCancel__DelegateSignature();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UDelegateFunction_UAbilitySystemComponent_AbilityAbilityKey__DelegateSignature();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemComponent_BP_ApplyGameplayEffectSpecToSelf();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemComponent_BP_ApplyGameplayEffectSpecToTarget();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemComponent_BP_ApplyGameplayEffectToSelf();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemComponent_BP_ApplyGameplayEffectToTarget();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemComponent_ClientActivateAbilityFailed();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemComponent_ClientActivateAbilitySucceed();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemComponent_ClientActivateAbilitySucceedWithEventData();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemComponent_ClientCancelAbility();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemComponent_ClientEndAbility();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemComponent_ClientSetReplicatedEvent();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemComponent_ClientTryActivateAbility();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemComponent_GetEffectContext();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemComponent_GetGameplayEffectCount();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemComponent_GetGameplayEffectMagnitude();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemComponent_GetOutgoingSpec();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemComponent_GetUserAbilityActivationInhibited();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemComponent_IsGameplayCueActive();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemComponent_K2_ApplyGameplayEffectToSelf();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemComponent_K2_ApplyGameplayEffectToTarget();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemComponent_K2_InitStats();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemComponent_MakeOutgoingSpec();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemComponent_NetMulticast_InvokeGameplayCueAdded();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemComponent_NetMulticast_InvokeGameplayCueAddedAndWhileActive_FromSpec();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemComponent_NetMulticast_InvokeGameplayCueExecuted();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemComponent_NetMulticast_InvokeGameplayCueExecuted_FromSpec();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemComponent_NetMulticast_InvokeGameplayCueExecuted_WithParams();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemComponent_OnRep_ActivateAbilities();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemComponent_OnRep_GameplayEffects();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemComponent_OnRep_OwningActor();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemComponent_OnRep_PredictionKey();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemComponent_OnRep_ReplicatedAnimMontage();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemComponent_RemoveActiveEffectsWithTags();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemComponent_RemoveActiveGameplayEffect();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemComponent_RemoveActiveGameplayEffectBySourceEffect();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemComponent_ServerCancelAbility();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemComponent_ServerCurrentMontageJumpToSectionName();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemComponent_ServerCurrentMontageSetNextSectionName();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemComponent_ServerEndAbility();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemComponent_ServerSetInputPressed();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemComponent_ServerSetInputReleased();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemComponent_ServerSetReplicatedEvent();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemComponent_ServerSetReplicatedTargetData();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemComponent_ServerSetReplicatedTargetDataCancelled();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemComponent_ServerTryActivateAbility();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemComponent_ServerTryActivateAbilityWithEventData();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemComponent_SetActiveGameplayEffectLevel();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemComponent_SetUserAbilityActivationInhibited();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemComponent_TargetCancel();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemComponent_TargetConfirm();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemComponent_TryActivateAbilitiesByTag();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemComponent_TryActivateAbilityByClass();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UAbilitySystemComponent_NoRegister();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UAbilitySystemComponent();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_AAbilitySystemDebugHUD_NoRegister();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_AAbilitySystemDebugHUD();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemGlobals_ToggleIgnoreAbilitySystemCooldowns();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilitySystemGlobals_ToggleIgnoreAbilitySystemCosts();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UAbilitySystemGlobals_NoRegister();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UAbilitySystemGlobals();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UAbilitySystemInterface_NoRegister();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UAbilitySystemInterface();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_AAbilitySystemTestPawn_NoRegister();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_AAbilitySystemTestPawn();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UAbilityTask_NoRegister();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UAbilityTask();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UDelegateFunction_GameplayAbilities_MoveToLocationDelegate__DelegateSignature();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilityTask_MoveToLocation_MoveToLocation();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UAbilityTask_MoveToLocation_NoRegister();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UAbilityTask_MoveToLocation();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UDelegateFunction_GameplayAbilities_NetworkSyncDelegate__DelegateSignature();
	GAMEPLAYABILITIES_API class UEnum* Z_Construct_UEnum_GameplayAbilities_EAbilityTaskNetSyncType();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilityTask_NetworkSyncPoint_OnSignalCallback();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilityTask_NetworkSyncPoint_WaitNetSync();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UAbilityTask_NetworkSyncPoint_NoRegister();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UAbilityTask_NetworkSyncPoint();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UDelegateFunction_GameplayAbilities_MontageWaitSimpleDelegate__DelegateSignature();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilityTask_PlayMontageAndWait_CreatePlayMontageAndWaitProxy();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilityTask_PlayMontageAndWait_OnMontageBlendingOut();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilityTask_PlayMontageAndWait_OnMontageInterrupted();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UAbilityTask_PlayMontageAndWait_NoRegister();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UAbilityTask_PlayMontageAndWait();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UDelegateFunction_GameplayAbilities_RepeatedActionDelegate__DelegateSignature();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilityTask_Repeat_RepeatAction();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UAbilityTask_Repeat_NoRegister();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UAbilityTask_Repeat();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UDelegateFunction_GameplayAbilities_SpawnActorDelegate__DelegateSignature();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilityTask_SpawnActor_BeginSpawningActor();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilityTask_SpawnActor_FinishSpawningActor();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilityTask_SpawnActor_SpawnActor();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UAbilityTask_SpawnActor_NoRegister();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UAbilityTask_SpawnActor();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UDelegateFunction_GameplayAbilities_AbilityStateDelegate__DelegateSignature();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilityTask_StartAbilityState_StartAbilityState();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UAbilityTask_StartAbilityState_NoRegister();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UAbilityTask_StartAbilityState();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UDelegateFunction_GameplayAbilities_VisualizeTargetingDelegate__DelegateSignature();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilityTask_VisualizeTargeting_BeginSpawningActor();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilityTask_VisualizeTargeting_FinishSpawningActor();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilityTask_VisualizeTargeting_VisualizeTargeting();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilityTask_VisualizeTargeting_VisualizeTargetingUsingActor();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UAbilityTask_VisualizeTargeting_NoRegister();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UAbilityTask_VisualizeTargeting();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UDelegateFunction_GameplayAbilities_WaitAbilityActivateDelegate__DelegateSignature();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilityTask_WaitAbilityActivate_OnAbilityActivate();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilityTask_WaitAbilityActivate_WaitForAbilityActivate();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UAbilityTask_WaitAbilityActivate_NoRegister();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UAbilityTask_WaitAbilityActivate();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UDelegateFunction_GameplayAbilities_WaitAbilityCommitDelegate__DelegateSignature();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilityTask_WaitAbilityCommit_OnAbilityCommit();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilityTask_WaitAbilityCommit_WaitForAbilityCommit();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UAbilityTask_WaitAbilityCommit_NoRegister();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UAbilityTask_WaitAbilityCommit();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UDelegateFunction_GameplayAbilities_WaitAttributeChangeDelegate__DelegateSignature();
	GAMEPLAYABILITIES_API class UEnum* Z_Construct_UEnum_GameplayAbilities_EWaitAttributeChangeComparison();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilityTask_WaitAttributeChange_WaitForAttributeChange();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilityTask_WaitAttributeChange_WaitForAttributeChangeWithComparison();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UAbilityTask_WaitAttributeChange_NoRegister();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UAbilityTask_WaitAttributeChange();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UDelegateFunction_GameplayAbilities_WaitCancelDelegate__DelegateSignature();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilityTask_WaitCancel_OnCancelCallback();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilityTask_WaitCancel_OnLocalCancelCallback();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilityTask_WaitCancel_WaitCancel();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UAbilityTask_WaitCancel_NoRegister();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UAbilityTask_WaitCancel();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilityTask_WaitConfirm_OnConfirmCallback();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilityTask_WaitConfirm_WaitConfirm();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UAbilityTask_WaitConfirm_NoRegister();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UAbilityTask_WaitConfirm();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UDelegateFunction_GameplayAbilities_WaitConfirmCancelDelegate__DelegateSignature();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilityTask_WaitConfirmCancel_OnCancelCallback();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilityTask_WaitConfirmCancel_OnConfirmCallback();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilityTask_WaitConfirmCancel_OnLocalCancelCallback();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilityTask_WaitConfirmCancel_OnLocalConfirmCallback();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilityTask_WaitConfirmCancel_WaitConfirmCancel();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UAbilityTask_WaitConfirmCancel_NoRegister();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UAbilityTask_WaitConfirmCancel();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UDelegateFunction_GameplayAbilities_WaitDelayDelegate__DelegateSignature();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilityTask_WaitDelay_WaitDelay();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UAbilityTask_WaitDelay_NoRegister();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UAbilityTask_WaitDelay();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilityTask_WaitGameplayEffectApplied_OnApplyGameplayEffectCallback();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UAbilityTask_WaitGameplayEffectApplied_NoRegister();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UAbilityTask_WaitGameplayEffectApplied();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UDelegateFunction_GameplayAbilities_GameplayEffectAppliedSelfDelegate__DelegateSignature();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilityTask_WaitGameplayEffectApplied_Self_WaitGameplayEffectAppliedToSelf();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UAbilityTask_WaitGameplayEffectApplied_Self_NoRegister();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UAbilityTask_WaitGameplayEffectApplied_Self();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UDelegateFunction_GameplayAbilities_GameplayEffectAppliedTargetDelegate__DelegateSignature();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilityTask_WaitGameplayEffectApplied_Target_WaitGameplayEffectAppliedToTarget();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UAbilityTask_WaitGameplayEffectApplied_Target_NoRegister();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UAbilityTask_WaitGameplayEffectApplied_Target();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UDelegateFunction_GameplayAbilities_WaitGameplayEffectRemovedDelegate__DelegateSignature();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilityTask_WaitGameplayEffectRemoved_OnGameplayEffectRemoved();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilityTask_WaitGameplayEffectRemoved_WaitForGameplayEffectRemoved();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UAbilityTask_WaitGameplayEffectRemoved_NoRegister();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UAbilityTask_WaitGameplayEffectRemoved();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilityTask_WaitGameplayTag_GameplayTagCallback();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UAbilityTask_WaitGameplayTag_NoRegister();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UAbilityTask_WaitGameplayTag();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UDelegateFunction_GameplayAbilities_WaitGameplayTagDelegate__DelegateSignature();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilityTask_WaitGameplayTagAdded_WaitGameplayTagAdd();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UAbilityTask_WaitGameplayTagAdded_NoRegister();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UAbilityTask_WaitGameplayTagAdded();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilityTask_WaitGameplayTagRemoved_WaitGameplayTagRemove();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UAbilityTask_WaitGameplayTagRemoved_NoRegister();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UAbilityTask_WaitGameplayTagRemoved();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UDelegateFunction_GameplayAbilities_InputPressDelegate__DelegateSignature();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilityTask_WaitInputPress_OnPressCallback();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilityTask_WaitInputPress_WaitInputPress();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UAbilityTask_WaitInputPress_NoRegister();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UAbilityTask_WaitInputPress();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UDelegateFunction_GameplayAbilities_InputReleaseDelegate__DelegateSignature();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilityTask_WaitInputRelease_OnReleaseCallback();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilityTask_WaitInputRelease_WaitInputRelease();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UAbilityTask_WaitInputRelease_NoRegister();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UAbilityTask_WaitInputRelease();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UDelegateFunction_GameplayAbilities_MovementModeChangedDelegate__DelegateSignature();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilityTask_WaitMovementModeChange_CreateWaitMovementModeChange();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilityTask_WaitMovementModeChange_OnMovementModeChange();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UAbilityTask_WaitMovementModeChange_NoRegister();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UAbilityTask_WaitMovementModeChange();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UDelegateFunction_GameplayAbilities_WaitOverlapDelegate__DelegateSignature();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilityTask_WaitOverlap_OnHitCallback();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilityTask_WaitOverlap_OnOverlapCallback();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilityTask_WaitOverlap_WaitForOverlap();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UAbilityTask_WaitOverlap_NoRegister();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UAbilityTask_WaitOverlap();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UDelegateFunction_GameplayAbilities_WaitTargetDataDelegate__DelegateSignature();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilityTask_WaitTargetData_BeginSpawningActor();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilityTask_WaitTargetData_FinishSpawningActor();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilityTask_WaitTargetData_OnTargetDataCancelledCallback();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilityTask_WaitTargetData_OnTargetDataReadyCallback();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilityTask_WaitTargetData_OnTargetDataReplicatedCallback();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilityTask_WaitTargetData_OnTargetDataReplicatedCancelledCallback();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilityTask_WaitTargetData_WaitTargetData();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilityTask_WaitTargetData_WaitTargetDataUsingActor();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UAbilityTask_WaitTargetData_NoRegister();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UAbilityTask_WaitTargetData();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UDelegateFunction_GameplayAbilities_WaitVelocityChangeDelegate__DelegateSignature();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UAbilityTask_WaitVelocityChange_CreateWaitVelocityChange();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UAbilityTask_WaitVelocityChange_NoRegister();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UAbilityTask_WaitVelocityChange();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UAbilitySystemTestAttributeSet_NoRegister();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UAbilitySystemTestAttributeSet();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UGameplayAbility_CharacterJump_NoRegister();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UGameplayAbility_CharacterJump();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UGameplayAbility_Montage_NoRegister();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UGameplayAbility_Montage();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UGameplayAbilityBlueprint_NoRegister();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UGameplayAbilityBlueprint();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UGameplayAbilityBlueprintGeneratedClass_NoRegister();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UGameplayAbilityBlueprintGeneratedClass();
	GAMEPLAYABILITIES_API class UEnum* Z_Construct_UEnum_GameplayAbilities_EGameplayAbilityInputBinds();
	GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayAbilityBindInfo();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UGameplayAbilitySet_NoRegister();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UGameplayAbilitySet();
	GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FWorldReticleParameters();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_AGameplayAbilityWorldReticle_FaceTowardSource();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_AGameplayAbilityWorldReticle_OnParametersInitialized();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_AGameplayAbilityWorldReticle_OnTargetingAnActor();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_AGameplayAbilityWorldReticle_OnValidTargetChanged();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_AGameplayAbilityWorldReticle_SetReticleMaterialParamFloat();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_AGameplayAbilityWorldReticle_SetReticleMaterialParamVector();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_AGameplayAbilityWorldReticle_NoRegister();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_AGameplayAbilityWorldReticle();
	GAMEPLAYABILITIES_API class UEnum* Z_Construct_UEnum_GameplayAbilities_ETargetAbilitySelfSelection();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_AGameplayAbilityTargetActor_CancelTargeting();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_AGameplayAbilityTargetActor_ConfirmTargeting();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_AGameplayAbilityTargetActor_NoRegister();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_AGameplayAbilityTargetActor();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_AGameplayAbilityTargetActor_Radius_NoRegister();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_AGameplayAbilityTargetActor_Radius();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_AGameplayAbilityTargetActor_Trace_NoRegister();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_AGameplayAbilityTargetActor_Trace();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_AGameplayAbilityTargetActor_GroundTrace_NoRegister();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_AGameplayAbilityTargetActor_GroundTrace();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_AGameplayAbilityWorldReticle_ActorVisualization_NoRegister();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_AGameplayAbilityWorldReticle_ActorVisualization();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_AGameplayAbilityTargetActor_ActorPlacement_NoRegister();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_AGameplayAbilityTargetActor_ActorPlacement();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_AGameplayAbilityTargetActor_SingleLineTrace_NoRegister();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_AGameplayAbilityTargetActor_SingleLineTrace();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_AGameplayCueNotify_Actor_K2_HandleGameplayCue();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_AGameplayCueNotify_Actor_OnActive();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_AGameplayCueNotify_Actor_OnExecute();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_AGameplayCueNotify_Actor_OnOwnerDestroyed();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_AGameplayCueNotify_Actor_OnRemove();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_AGameplayCueNotify_Actor_WhileActive();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_AGameplayCueNotify_Actor_NoRegister();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_AGameplayCueNotify_Actor();
	GAMEPLAYABILITIES_API class UEnum* Z_Construct_UEnum_GameplayAbilities_EGameplayCuePayloadType();
	GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayCuePendingExecute();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UGameplayCueManager_NoRegister();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UGameplayCueManager();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UGameplayCueNotify_Static_K2_HandleGameplayCue();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UGameplayCueNotify_Static_OnActive();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UGameplayCueNotify_Static_OnExecute();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UGameplayCueNotify_Static_OnRemove();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UGameplayCueNotify_Static_WhileActive();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UGameplayCueNotify_Static_NoRegister();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UGameplayCueNotify_Static();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UGameplayCueNotify_HitImpact_NoRegister();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UGameplayCueNotify_HitImpact();
	GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayCueNotifyData();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UGameplayCueSet_NoRegister();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UGameplayCueSet();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UGameplayEffectTemplate_NoRegister();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UGameplayEffectTemplate();
	GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayEffectCustomExecutionOutput();
	GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayEffectCustomExecutionParameters();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UGameplayEffectExecutionCalculation_Execute();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UGameplayEffectExecutionCalculation_NoRegister();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UGameplayEffectExecutionCalculation();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UGameplayModMagnitudeCalculation_CalculateBaseMagnitude();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UGameplayModMagnitudeCalculation_NoRegister();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UGameplayModMagnitudeCalculation();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UGameplayEffectExtension_NoRegister();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UGameplayEffectExtension();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UGameplayEffectExtension_LifestealTest_NoRegister();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UGameplayEffectExtension_LifestealTest();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UGameplayEffectExtension_ShieldTest_NoRegister();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UGameplayEffectExtension_ShieldTest();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UGameplayEffectUIData_NoRegister();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UGameplayEffectUIData();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UGameplayEffectUIData_TextOnly_NoRegister();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UGameplayEffectUIData_TextOnly();
	GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayTagResponseTableEntry();
	GAMEPLAYABILITIES_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayTagReponsePair();
	GAMEPLAYABILITIES_API class UFunction* Z_Construct_UFunction_UGameplayTagReponseTable_TagResponseEvent();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UGameplayTagReponseTable_NoRegister();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UGameplayTagReponseTable();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UTickableAttributeSetInterface_NoRegister();
	GAMEPLAYABILITIES_API class UClass* Z_Construct_UClass_UTickableAttributeSetInterface();
	GAMEPLAYABILITIES_API class UPackage* Z_Construct_UPackage_GameplayAbilities();
	UScriptStruct* Z_Construct_UScriptStruct_FAttributeMetaData()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UScriptStruct_FAttributeMetaData_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("AttributeMetaData"), sizeof(FAttributeMetaData), Get_Z_Construct_UScriptStruct_FAttributeMetaData_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AttributeMetaData"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FTableRowBase(), new UScriptStruct::TCppStructOps<FAttributeMetaData>, EStructFlags(0x00000201));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCanStack, FAttributeMetaData, bool);
			UProperty* NewProp_bCanStack = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bCanStack"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCanStack, FAttributeMetaData), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bCanStack, FAttributeMetaData), sizeof(bool), true);
			UProperty* NewProp_DerivedAttributeInfo = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DerivedAttributeInfo"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(DerivedAttributeInfo, FAttributeMetaData), 0x0000000000000000);
			UProperty* NewProp_MaxValue = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MaxValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MaxValue, FAttributeMetaData), 0x0000000000000000);
			UProperty* NewProp_MinValue = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MinValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MinValue, FAttributeMetaData), 0x0000000000000000);
			UProperty* NewProp_BaseValue = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BaseValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(BaseValue, FAttributeMetaData), 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/AttributeSet.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("DataTable that allows us to define meta data about attributes. Still a work in progress."));
			MetaData->SetValue(NewProp_bCanStack, TEXT("ModuleRelativePath"), TEXT("Public/AttributeSet.h"));
			MetaData->SetValue(NewProp_DerivedAttributeInfo, TEXT("ModuleRelativePath"), TEXT("Public/AttributeSet.h"));
			MetaData->SetValue(NewProp_MaxValue, TEXT("ModuleRelativePath"), TEXT("Public/AttributeSet.h"));
			MetaData->SetValue(NewProp_MinValue, TEXT("ModuleRelativePath"), TEXT("Public/AttributeSet.h"));
			MetaData->SetValue(NewProp_BaseValue, TEXT("ModuleRelativePath"), TEXT("Public/AttributeSet.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAttributeMetaData_CRC() { return 3616724665U; }
	UScriptStruct* Z_Construct_UScriptStruct_FScalableFloat()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UScriptStruct_FScalableFloat_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("ScalableFloat"), sizeof(FScalableFloat), Get_Z_Construct_UScriptStruct_FScalableFloat_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ScalableFloat"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FScalableFloat>, EStructFlags(0x00000201));
			UProperty* NewProp_Curve = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Curve"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Curve, FScalableFloat), 0x0000000000010001, Z_Construct_UScriptStruct_FCurveTableRowHandle());
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Value"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Value, FScalableFloat), 0x0000000000010001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/AttributeSet.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Generic numerical value in the form Coeffecient * Curve[Level]"));
			MetaData->SetValue(NewProp_Curve, TEXT("Category"), TEXT("ScalableFloat"));
			MetaData->SetValue(NewProp_Curve, TEXT("ModuleRelativePath"), TEXT("Public/AttributeSet.h"));
			MetaData->SetValue(NewProp_Value, TEXT("Category"), TEXT("ScalableFloat"));
			MetaData->SetValue(NewProp_Value, TEXT("ModuleRelativePath"), TEXT("Public/AttributeSet.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FScalableFloat_CRC() { return 935915709U; }
	UScriptStruct* Z_Construct_UScriptStruct_FGlobalCurveDataOverride()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UScriptStruct_FGlobalCurveDataOverride_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("GlobalCurveDataOverride"), sizeof(FGlobalCurveDataOverride), Get_Z_Construct_UScriptStruct_FGlobalCurveDataOverride_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GlobalCurveDataOverride"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FGlobalCurveDataOverride>, EStructFlags(0x00000201));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/AttributeSet.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FGlobalCurveDataOverride_CRC() { return 3624138140U; }
	UScriptStruct* Z_Construct_UScriptStruct_FGameplayAttribute()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UScriptStruct_FGameplayAttribute_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("GameplayAttribute"), sizeof(FGameplayAttribute), Get_Z_Construct_UScriptStruct_FGameplayAttribute_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GameplayAttribute"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FGameplayAttribute>, EStructFlags(0x00000201));
			UProperty* NewProp_Attribute = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Attribute"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Attribute, FGameplayAttribute), 0x0000000000010001, UProperty::StaticClass());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/AttributeSet.h"));
			MetaData->SetValue(NewProp_Attribute, TEXT("Category"), TEXT("GameplayAttribute"));
			MetaData->SetValue(NewProp_Attribute, TEXT("ModuleRelativePath"), TEXT("Public/AttributeSet.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FGameplayAttribute_CRC() { return 519788758U; }
	UClass* Z_Construct_UClass_UAttributeSet_NoRegister()
	{
		return UAttributeSet::StaticClass();
	}
	UClass* Z_Construct_UClass_UAttributeSet()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_GameplayAbilities();
			OuterClass = UAttributeSet::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20300080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("AttributeSet.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/AttributeSet.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UAttributeSet(Z_Construct_UClass_UAttributeSet, TEXT("UAttributeSet"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UAttributeSet);
	UScriptStruct* Z_Construct_UScriptStruct_FPredictionKey()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UScriptStruct_FPredictionKey_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("PredictionKey"), sizeof(FPredictionKey), Get_Z_Construct_UScriptStruct_FPredictionKey_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PredictionKey"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FPredictionKey>, EStructFlags(0x00000201));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsServerInitiated, FPredictionKey, bool);
			UProperty* NewProp_bIsServerInitiated = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bIsServerInitiated"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsServerInitiated, FPredictionKey), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bIsServerInitiated, FPredictionKey), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsStale, FPredictionKey, bool);
			UProperty* NewProp_bIsStale = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bIsStale"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsStale, FPredictionKey), 0x0000000080000000, CPP_BOOL_PROPERTY_BITMASK(bIsStale, FPredictionKey), sizeof(bool), true);
			UProperty* NewProp_PredictiveConnection = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PredictiveConnection"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(PredictiveConnection, FPredictionKey), 0x0000000080000000, UPackageMap::StaticClass());
			UProperty* NewProp_Base = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Base"), RF_Public|RF_Transient|RF_Native) UInt16Property(CPP_PROPERTY_BASE(Base, FPredictionKey), 0x0000000000000000);
			UProperty* NewProp_Current = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Current"), RF_Public|RF_Transient|RF_Native) UInt16Property(CPP_PROPERTY_BASE(Current, FPredictionKey), 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/GameplayPrediction.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("FPredictionKey is a generic way of supporting Clientside Prediction in the GameplayAbility system.\nA FPredictionKey is essentially an ID for identifying predictive actions and side effects that are\ndone on a client. UAbilitySystemComponent supports synchronization of the prediction key and its side effects\nbetween client and server.\n\nEssentially, anything can be associated with a PredictionKey, for example activating an Ability.\nThe client can generates a fresh PredictionKey and sends it to the server in his ServerTryActivateAbility call.\nThe server can confirm or reject this call (ClientActivateAbilitySucceed/Failed).\n\nWhile the client is predictively his ability, he is creating side effects (GameplayEffects, TriggeredEvents, Animations, etc).\nAs the client predicts these side effects, he associates each one with the prediction key generated at the start of the ability\nactivation.\n\nIf the ability activation is rejected, the client can immediately revert these side effects.\nIf the ability activation is accepted, the client must wait until the replicated side effects are sent to the server.\n        (the ClientActivatbleAbilitySucceed RPC will be immediately sent. Property replication may happen a few frames later).\n        Once replication of the server created side effects is finished, the client can undo his locally predictive side effects.\n\nThe main things FPredictionKey itself provides are:\n        -Unique ID and a system for having dependant chains of Prediction Keys (\"Current\" and \"Base\" integers)\n        -A special implementation of ::NetSerialize *** which only serializes the prediction key to the predicting client ***\n                -This is important as it allows us to serialize prediction keys in replicated state, knowing that only clients that gave the server the prediction key will actually see them!"));
			MetaData->SetValue(NewProp_bIsServerInitiated, TEXT("ModuleRelativePath"), TEXT("Public/GameplayPrediction.h"));
			MetaData->SetValue(NewProp_bIsServerInitiated, TEXT("ToolTip"), TEXT("True if this was created as a server initiated activation key, used to identify server activations but cannot be used for prediction"));
			MetaData->SetValue(NewProp_bIsStale, TEXT("ModuleRelativePath"), TEXT("Public/GameplayPrediction.h"));
			MetaData->SetValue(NewProp_bIsStale, TEXT("ToolTip"), TEXT("If stale, this key cannot be used for more prediction"));
			MetaData->SetValue(NewProp_PredictiveConnection, TEXT("ModuleRelativePath"), TEXT("Public/GameplayPrediction.h"));
			MetaData->SetValue(NewProp_PredictiveConnection, TEXT("ToolTip"), TEXT("On the server, what network connection this was serialized on."));
			MetaData->SetValue(NewProp_Base, TEXT("ModuleRelativePath"), TEXT("Public/GameplayPrediction.h"));
			MetaData->SetValue(NewProp_Base, TEXT("ToolTip"), TEXT("If non 0, the prediction key this was created from"));
			MetaData->SetValue(NewProp_Current, TEXT("ModuleRelativePath"), TEXT("Public/GameplayPrediction.h"));
			MetaData->SetValue(NewProp_Current, TEXT("ToolTip"), TEXT("The unique ID of this prediction key"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FPredictionKey_CRC() { return 598806213U; }
	UEnum* Z_Construct_UEnum_GameplayAbilities_EGameplayTagEventType()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UEnum_GameplayAbilities_EGameplayTagEventType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EGameplayTagEventType"), 0, Get_Z_Construct_UEnum_GameplayAbilities_EGameplayTagEventType_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EGameplayTagEventType"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayTagEventType::NewOrRemoved")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayTagEventType::AnyCountChange")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayTagEventType::EGameplayTagEventType_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("AnyCountChange.ToolTip"), TEXT("Event happens any time tag \"count\" changes"));
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffectTypes.h"));
			MetaData->SetValue(ReturnEnum, TEXT("NewOrRemoved.ToolTip"), TEXT("Event only happens when tag is branch new or removed"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_GameplayAbilities_EGameplayTagEventType_CRC() { return 1650002706U; }
	UEnum* Z_Construct_UEnum_GameplayAbilities_EGameplayCueEvent()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UEnum_GameplayAbilities_EGameplayCueEvent_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EGameplayCueEvent"), 0, Get_Z_Construct_UEnum_GameplayAbilities_EGameplayCueEvent_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EGameplayCueEvent"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayCueEvent::OnActive")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayCueEvent::WhileActive")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayCueEvent::Executed")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayCueEvent::Removed")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayCueEvent::EGameplayCueEvent_MAX")), 4));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("Executed.ToolTip"), TEXT("Called when GameplayCue is active, even if it wasn't actually just applied (Join in progress, etc)"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffectTypes.h"));
			MetaData->SetValue(ReturnEnum, TEXT("Removed.ToolTip"), TEXT("Called when a GameplayCue is executed: instant effects or periodic tick"));
			MetaData->SetValue(ReturnEnum, TEXT("WhileActive.ToolTip"), TEXT("Called when GameplayCue is activated."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_GameplayAbilities_EGameplayCueEvent_CRC() { return 3600788279U; }
	UEnum* Z_Construct_UEnum_GameplayAbilities_EGameplayEffectStackingType()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UEnum_GameplayAbilities_EGameplayEffectStackingType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EGameplayEffectStackingType"), 0, Get_Z_Construct_UEnum_GameplayAbilities_EGameplayEffectStackingType_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EGameplayEffectStackingType"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayEffectStackingType::None")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayEffectStackingType::AggregateBySource")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayEffectStackingType::AggregateByTarget")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayEffectStackingType::EGameplayEffectStackingType_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("AggregateBySource.ToolTip"), TEXT("Each caster has its own stack."));
			MetaData->SetValue(ReturnEnum, TEXT("AggregateByTarget.ToolTip"), TEXT("Each target has its own stack."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffectTypes.h"));
			MetaData->SetValue(ReturnEnum, TEXT("None.ToolTip"), TEXT("No stacking. Multiple applications of this GameplayEffect are treated as separate instances."));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Enumeration for ways a single GameplayEffect asset can stack."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_GameplayAbilities_EGameplayEffectStackingType_CRC() { return 3531119517U; }
	UEnum* Z_Construct_UEnum_GameplayAbilities_EGameplayEffectAttributeCaptureSource()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UEnum_GameplayAbilities_EGameplayEffectAttributeCaptureSource_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EGameplayEffectAttributeCaptureSource"), 0, Get_Z_Construct_UEnum_GameplayAbilities_EGameplayEffectAttributeCaptureSource_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EGameplayEffectAttributeCaptureSource"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayEffectAttributeCaptureSource::Source")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayEffectAttributeCaptureSource::Target")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayEffectAttributeCaptureSource::EGameplayEffectAttributeCaptureSource_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffectTypes.h"));
			MetaData->SetValue(ReturnEnum, TEXT("Source.ToolTip"), TEXT("Source (caster) of the gameplay effect."));
			MetaData->SetValue(ReturnEnum, TEXT("Target.ToolTip"), TEXT("Target (recipient) of the gameplay effect."));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Enumeration for options of where to capture gameplay attributes from for gameplay effects."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_GameplayAbilities_EGameplayEffectAttributeCaptureSource_CRC() { return 61789826U; }
	UEnum* Z_Construct_UEnum_GameplayAbilities_EGameplayModOp()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UEnum_GameplayAbilities_EGameplayModOp_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EGameplayModOp"), 0, Get_Z_Construct_UEnum_GameplayAbilities_EGameplayModOp_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EGameplayModOp"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayModOp::Additive")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayModOp::Multiplicitive")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayModOp::Division")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayModOp::Override")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayModOp::Max")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayModOp::EGameplayModOp_MAX")), 5));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("Additive.DisplayName"), TEXT("Add"));
			MetaData->SetValue(ReturnEnum, TEXT("Additive.ToolTip"), TEXT("Numeric."));
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("Division.DisplayName"), TEXT("Divide"));
			MetaData->SetValue(ReturnEnum, TEXT("Division.ToolTip"), TEXT("Numeric."));
			MetaData->SetValue(ReturnEnum, TEXT("Max.DisplayName"), TEXT("Invalid"));
			MetaData->SetValue(ReturnEnum, TEXT("Max.ToolTip"), TEXT("This must always be at the end."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffectTypes.h"));
			MetaData->SetValue(ReturnEnum, TEXT("Multiplicitive.DisplayName"), TEXT("Multiply"));
			MetaData->SetValue(ReturnEnum, TEXT("Multiplicitive.ToolTip"), TEXT("Numeric."));
			MetaData->SetValue(ReturnEnum, TEXT("Override.DisplayName"), TEXT("Override"));
			MetaData->SetValue(ReturnEnum, TEXT("Override.ToolTip"), TEXT("Other."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_GameplayAbilities_EGameplayModOp_CRC() { return 4120462036U; }
	UScriptStruct* Z_Construct_UScriptStruct_FGameplayEffectSpecHandle()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UScriptStruct_FGameplayEffectSpecHandle_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("GameplayEffectSpecHandle"), sizeof(FGameplayEffectSpecHandle), Get_Z_Construct_UScriptStruct_FGameplayEffectSpecHandle_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GameplayEffectSpecHandle"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FGameplayEffectSpecHandle>, EStructFlags(0x00000201));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffectTypes.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Allows blueprints to generate a GameplayEffectSpec once and then reference it by handle, to apply it multiple times/multiple targets."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FGameplayEffectSpecHandle_CRC() { return 77907599U; }
	UScriptStruct* Z_Construct_UScriptStruct_FTagContainerAggregator()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UScriptStruct_FTagContainerAggregator_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("TagContainerAggregator"), sizeof(FTagContainerAggregator), Get_Z_Construct_UScriptStruct_FTagContainerAggregator_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TagContainerAggregator"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FTagContainerAggregator>, EStructFlags(0x00000201));
			UProperty* NewProp_ScopedTags = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ScopedTags"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ScopedTags, FTagContainerAggregator), 0x0000000000000000, Z_Construct_UScriptStruct_FGameplayTagContainer());
			UProperty* NewProp_CapturedSpecTags = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CapturedSpecTags"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(CapturedSpecTags, FTagContainerAggregator), 0x0000000000000000, Z_Construct_UScriptStruct_FGameplayTagContainer());
			UProperty* NewProp_CapturedActorTags = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CapturedActorTags"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(CapturedActorTags, FTagContainerAggregator), 0x0000000000000000, Z_Construct_UScriptStruct_FGameplayTagContainer());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffectTypes.h"));
			MetaData->SetValue(NewProp_ScopedTags, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffectTypes.h"));
			MetaData->SetValue(NewProp_CapturedSpecTags, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffectTypes.h"));
			MetaData->SetValue(NewProp_CapturedActorTags, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffectTypes.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FTagContainerAggregator_CRC() { return 3771839337U; }
	UScriptStruct* Z_Construct_UScriptStruct_FGameplayTagRequirements()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UScriptStruct_FGameplayTagRequirements_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("GameplayTagRequirements"), sizeof(FGameplayTagRequirements), Get_Z_Construct_UScriptStruct_FGameplayTagRequirements_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GameplayTagRequirements"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FGameplayTagRequirements>, EStructFlags(0x00000201));
			UProperty* NewProp_IgnoreTags = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("IgnoreTags"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(IgnoreTags, FGameplayTagRequirements), 0x0000000000000005, Z_Construct_UScriptStruct_FGameplayTagContainer());
			UProperty* NewProp_RequireTags = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RequireTags"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(RequireTags, FGameplayTagRequirements), 0x0000000000000005, Z_Construct_UScriptStruct_FGameplayTagContainer());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffectTypes.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Encapsulate require and ignore tags"));
			MetaData->SetValue(NewProp_IgnoreTags, TEXT("Category"), TEXT("GameplayModifier"));
			MetaData->SetValue(NewProp_IgnoreTags, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffectTypes.h"));
			MetaData->SetValue(NewProp_IgnoreTags, TEXT("ToolTip"), TEXT("None of these tags may be present"));
			MetaData->SetValue(NewProp_RequireTags, TEXT("Category"), TEXT("GameplayModifier"));
			MetaData->SetValue(NewProp_RequireTags, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffectTypes.h"));
			MetaData->SetValue(NewProp_RequireTags, TEXT("ToolTip"), TEXT("All of these tags must be present"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FGameplayTagRequirements_CRC() { return 430581501U; }
	UScriptStruct* Z_Construct_UScriptStruct_FGameplayCueParameters()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UScriptStruct_FGameplayCueParameters_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("GameplayCueParameters"), sizeof(FGameplayCueParameters), Get_Z_Construct_UScriptStruct_FGameplayCueParameters_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GameplayCueParameters"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FGameplayCueParameters>, EStructFlags(0x00000001));
			UProperty* NewProp_AggregatedTargetTags = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("AggregatedTargetTags"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(AggregatedTargetTags, FGameplayCueParameters), 0x0000000000000004, Z_Construct_UScriptStruct_FGameplayTagContainer());
			UProperty* NewProp_AggregatedSourceTags = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("AggregatedSourceTags"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(AggregatedSourceTags, FGameplayCueParameters), 0x0000000000000004, Z_Construct_UScriptStruct_FGameplayTagContainer());
			UProperty* NewProp_OriginalTag = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("OriginalTag"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(OriginalTag, FGameplayCueParameters), 0x0000000000000004, Z_Construct_UScriptStruct_FGameplayTag());
			UProperty* NewProp_MatchedTagName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MatchedTagName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(MatchedTagName, FGameplayCueParameters), 0x0000000000000004);
			UProperty* NewProp_EffectContext = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("EffectContext"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(EffectContext, FGameplayCueParameters), 0x0000000000000004, Z_Construct_UScriptStruct_FGameplayEffectContextHandle());
			UProperty* NewProp_RawMagnitude = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RawMagnitude"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(RawMagnitude, FGameplayCueParameters), 0x0000000000000004);
			UProperty* NewProp_NormalizedMagnitude = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("NormalizedMagnitude"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(NormalizedMagnitude, FGameplayCueParameters), 0x0000000000000004);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffectTypes.h"));
			MetaData->SetValue(NewProp_AggregatedTargetTags, TEXT("Category"), TEXT("GameplayCue"));
			MetaData->SetValue(NewProp_AggregatedTargetTags, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffectTypes.h"));
			MetaData->SetValue(NewProp_AggregatedTargetTags, TEXT("ToolTip"), TEXT("The aggregated target tags taken from the effect spec"));
			MetaData->SetValue(NewProp_AggregatedSourceTags, TEXT("Category"), TEXT("GameplayCue"));
			MetaData->SetValue(NewProp_AggregatedSourceTags, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffectTypes.h"));
			MetaData->SetValue(NewProp_AggregatedSourceTags, TEXT("ToolTip"), TEXT("The aggregated source tags taken from the effect spec"));
			MetaData->SetValue(NewProp_OriginalTag, TEXT("Category"), TEXT("GameplayCue"));
			MetaData->SetValue(NewProp_OriginalTag, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffectTypes.h"));
			MetaData->SetValue(NewProp_OriginalTag, TEXT("ToolTip"), TEXT("The original tag of the gameplay cue"));
			MetaData->SetValue(NewProp_MatchedTagName, TEXT("Category"), TEXT("GameplayCue"));
			MetaData->SetValue(NewProp_MatchedTagName, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffectTypes.h"));
			MetaData->SetValue(NewProp_MatchedTagName, TEXT("ToolTip"), TEXT("The tag name that matched this specific gameplay cue handler"));
			MetaData->SetValue(NewProp_EffectContext, TEXT("Category"), TEXT("GameplayCue"));
			MetaData->SetValue(NewProp_EffectContext, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffectTypes.h"));
			MetaData->SetValue(NewProp_EffectContext, TEXT("ToolTip"), TEXT("Effect context, contains information about hit result, etc"));
			MetaData->SetValue(NewProp_RawMagnitude, TEXT("Category"), TEXT("GameplayCue"));
			MetaData->SetValue(NewProp_RawMagnitude, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffectTypes.h"));
			MetaData->SetValue(NewProp_RawMagnitude, TEXT("ToolTip"), TEXT("Raw final magnitude of source gameplay effect. Use this is you need to display numbers or for other informational purposes."));
			MetaData->SetValue(NewProp_NormalizedMagnitude, TEXT("Category"), TEXT("GameplayCue"));
			MetaData->SetValue(NewProp_NormalizedMagnitude, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffectTypes.h"));
			MetaData->SetValue(NewProp_NormalizedMagnitude, TEXT("ToolTip"), TEXT("Magnitude of source gameplay effect, normalzed from 0-1. Use this for \"how strong is the gameplay effect\" (0=min, 1=,max)"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FGameplayCueParameters_CRC() { return 4000318453U; }
	UScriptStruct* Z_Construct_UScriptStruct_FGameplayEffectContextHandle()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UScriptStruct_FGameplayEffectContextHandle_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("GameplayEffectContextHandle"), sizeof(FGameplayEffectContextHandle), Get_Z_Construct_UScriptStruct_FGameplayEffectContextHandle_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GameplayEffectContextHandle"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FGameplayEffectContextHandle>, EStructFlags(0x00000001));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffectTypes.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Handle that wraps a FGameplayEffectContext or subclass, to allow it to be polymorphic and replicate properly"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FGameplayEffectContextHandle_CRC() { return 4051925793U; }
	UScriptStruct* Z_Construct_UScriptStruct_FGameplayEffectContext()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UScriptStruct_FGameplayEffectContext_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("GameplayEffectContext"), sizeof(FGameplayEffectContext), Get_Z_Construct_UScriptStruct_FGameplayEffectContext_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GameplayEffectContext"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FGameplayEffectContext>, EStructFlags(0x00000205));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bHasWorldOrigin, FGameplayEffectContext, bool);
			UProperty* NewProp_bHasWorldOrigin = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bHasWorldOrigin"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bHasWorldOrigin, FGameplayEffectContext), 0x0000080000000000, CPP_BOOL_PROPERTY_BITMASK(bHasWorldOrigin, FGameplayEffectContext), sizeof(bool), true);
			UProperty* NewProp_WorldOrigin = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("WorldOrigin"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(WorldOrigin, FGameplayEffectContext), 0x0000080000000000, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Actors = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Actors"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Actors, FGameplayEffectContext), 0x0004080000000000);
			UProperty* NewProp_Actors_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Actors, TEXT("Actors"), RF_Public|RF_Transient|RF_Native) UWeakObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0004000000000000, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_InstigatorAbilitySystemComponent = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("InstigatorAbilitySystemComponent"), RF_Public|RF_Transient|RF_Native) UWeakObjectProperty(CPP_PROPERTY_BASE(InstigatorAbilitySystemComponent, FGameplayEffectContext), 0x0004080080080008, Z_Construct_UClass_UAbilitySystemComponent_NoRegister());
			UProperty* NewProp_SourceObject = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SourceObject"), RF_Public|RF_Transient|RF_Native) UWeakObjectProperty(CPP_PROPERTY_BASE(SourceObject, FGameplayEffectContext), 0x0004080000000000, Z_Construct_UClass_UObject_NoRegister());
			UProperty* NewProp_EffectCauser = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("EffectCauser"), RF_Public|RF_Transient|RF_Native) UWeakObjectProperty(CPP_PROPERTY_BASE(EffectCauser, FGameplayEffectContext), 0x0004080000000000, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_Instigator = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Instigator"), RF_Public|RF_Transient|RF_Native) UWeakObjectProperty(CPP_PROPERTY_BASE(Instigator, FGameplayEffectContext), 0x0004080000000000, Z_Construct_UClass_AActor_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffectTypes.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("FGameplayEffectContext\n    Data struct for an instigator and related data. This is still being fleshed out. We will want to track actors but also be able to provide some level of tracking for actors that are destroyed.\n    We may need to store some positional information as well."));
			MetaData->SetValue(NewProp_bHasWorldOrigin, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffectTypes.h"));
			MetaData->SetValue(NewProp_WorldOrigin, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffectTypes.h"));
			MetaData->SetValue(NewProp_Actors, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffectTypes.h"));
			MetaData->SetValue(NewProp_InstigatorAbilitySystemComponent, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffectTypes.h"));
			MetaData->SetValue(NewProp_InstigatorAbilitySystemComponent, TEXT("ToolTip"), TEXT("The ability system component that's bound to instigator"));
			MetaData->SetValue(NewProp_SourceObject, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffectTypes.h"));
			MetaData->SetValue(NewProp_SourceObject, TEXT("ToolTip"), TEXT("Object this effect was created from, can be an actor or static object. Useful to bind an effect to a gameplay object"));
			MetaData->SetValue(NewProp_EffectCauser, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffectTypes.h"));
			MetaData->SetValue(NewProp_EffectCauser, TEXT("ToolTip"), TEXT("The physical actor that actually did the damage, can be a weapon or projectile"));
			MetaData->SetValue(NewProp_Instigator, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffectTypes.h"));
			MetaData->SetValue(NewProp_Instigator, TEXT("ToolTip"), TEXT("Instigator actor, the actor that owns the ability system component"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FGameplayEffectContext_CRC() { return 2004152389U; }
	UScriptStruct* Z_Construct_UScriptStruct_FGameplayEffectAttributeCaptureDefinition()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UScriptStruct_FGameplayEffectAttributeCaptureDefinition_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("GameplayEffectAttributeCaptureDefinition"), sizeof(FGameplayEffectAttributeCaptureDefinition), Get_Z_Construct_UScriptStruct_FGameplayEffectAttributeCaptureDefinition_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GameplayEffectAttributeCaptureDefinition"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FGameplayEffectAttributeCaptureDefinition>, EStructFlags(0x00000201));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSnapshot, FGameplayEffectAttributeCaptureDefinition, bool);
			UProperty* NewProp_bSnapshot = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bSnapshot"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSnapshot, FGameplayEffectAttributeCaptureDefinition), 0x0000000000010001, CPP_BOOL_PROPERTY_BITMASK(bSnapshot, FGameplayEffectAttributeCaptureDefinition), sizeof(bool), true);
			UProperty* NewProp_AttributeSource = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("AttributeSource"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(AttributeSource, FGameplayEffectAttributeCaptureDefinition), 0x0000000000010001, Z_Construct_UEnum_GameplayAbilities_EGameplayEffectAttributeCaptureSource());
			UProperty* NewProp_AttributeToCapture = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("AttributeToCapture"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(AttributeToCapture, FGameplayEffectAttributeCaptureDefinition), 0x0000000000010001, Z_Construct_UScriptStruct_FGameplayAttribute());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffectTypes.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Struct defining gameplay attribute capture options for gameplay effects"));
			MetaData->SetValue(NewProp_bSnapshot, TEXT("Category"), TEXT("Capture"));
			MetaData->SetValue(NewProp_bSnapshot, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffectTypes.h"));
			MetaData->SetValue(NewProp_bSnapshot, TEXT("ToolTip"), TEXT("Whether the attribute should be snapshotted or not"));
			MetaData->SetValue(NewProp_AttributeSource, TEXT("Category"), TEXT("Capture"));
			MetaData->SetValue(NewProp_AttributeSource, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffectTypes.h"));
			MetaData->SetValue(NewProp_AttributeSource, TEXT("ToolTip"), TEXT("Source of the gameplay attribute"));
			MetaData->SetValue(NewProp_AttributeToCapture, TEXT("Category"), TEXT("Capture"));
			MetaData->SetValue(NewProp_AttributeToCapture, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffectTypes.h"));
			MetaData->SetValue(NewProp_AttributeToCapture, TEXT("ToolTip"), TEXT("Gameplay attribute to capture"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FGameplayEffectAttributeCaptureDefinition_CRC() { return 2207352611U; }
	UScriptStruct* Z_Construct_UScriptStruct_FGameplayModifierEvaluatedData()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UScriptStruct_FGameplayModifierEvaluatedData_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("GameplayModifierEvaluatedData"), sizeof(FGameplayModifierEvaluatedData), Get_Z_Construct_UScriptStruct_FGameplayModifierEvaluatedData_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GameplayModifierEvaluatedData"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FGameplayModifierEvaluatedData>, EStructFlags(0x00000001));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsValid, FGameplayModifierEvaluatedData, bool);
			UProperty* NewProp_IsValid = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("IsValid"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsValid, FGameplayModifierEvaluatedData), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(IsValid, FGameplayModifierEvaluatedData), sizeof(bool), true);
			UProperty* NewProp_Handle = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Handle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Handle, FGameplayModifierEvaluatedData), 0x0000000000000000, Z_Construct_UScriptStruct_FActiveGameplayEffectHandle());
			UProperty* NewProp_Magnitude = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Magnitude"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Magnitude, FGameplayModifierEvaluatedData), 0x0000000000000000);
			UProperty* NewProp_ModifierOp = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ModifierOp"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(ModifierOp, FGameplayModifierEvaluatedData), 0x0000000000000000, Z_Construct_UEnum_GameplayAbilities_EGameplayModOp());
			UProperty* NewProp_Attribute = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Attribute"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Attribute, FGameplayModifierEvaluatedData), 0x0000000000000000, Z_Construct_UScriptStruct_FGameplayAttribute());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffectTypes.h"));
			MetaData->SetValue(NewProp_IsValid, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffectTypes.h"));
			MetaData->SetValue(NewProp_Handle, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffectTypes.h"));
			MetaData->SetValue(NewProp_Handle, TEXT("ToolTip"), TEXT("Handle of the active gameplay effect that originated us. Will be invalid in many cases"));
			MetaData->SetValue(NewProp_Magnitude, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffectTypes.h"));
			MetaData->SetValue(NewProp_ModifierOp, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffectTypes.h"));
			MetaData->SetValue(NewProp_ModifierOp, TEXT("ToolTip"), TEXT("The numeric operation of this modifier: Override, Add, Multiply, etc"));
			MetaData->SetValue(NewProp_Attribute, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffectTypes.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FGameplayModifierEvaluatedData_CRC() { return 3640096814U; }
	UScriptStruct* Z_Construct_UScriptStruct_FActiveGameplayEffectHandle()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UScriptStruct_FActiveGameplayEffectHandle_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("ActiveGameplayEffectHandle"), sizeof(FActiveGameplayEffectHandle), Get_Z_Construct_UScriptStruct_FActiveGameplayEffectHandle_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ActiveGameplayEffectHandle"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FActiveGameplayEffectHandle>, EStructFlags(0x00000201));
			UProperty* NewProp_Handle = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Handle"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Handle, FActiveGameplayEffectHandle), 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffectTypes.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("This handle is required for things outside of FActiveGameplayEffectsContainer to refer to a specific active GameplayEffect\n    For example if a skill needs to create an active effect and then destroy that specific effect that it created, it has to do so\n    through a handle. a pointer or index into the active list is not sufficient."));
			MetaData->SetValue(NewProp_Handle, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffectTypes.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FActiveGameplayEffectHandle_CRC() { return 1367841263U; }
	UEnum* Z_Construct_UEnum_GameplayAbilities_EAbilityGenericReplicatedEvent()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UEnum_GameplayAbilities_EAbilityGenericReplicatedEvent_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EAbilityGenericReplicatedEvent"), 0, Get_Z_Construct_UEnum_GameplayAbilities_EAbilityGenericReplicatedEvent_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EAbilityGenericReplicatedEvent"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EAbilityGenericReplicatedEvent::GenericConfirm")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EAbilityGenericReplicatedEvent::GenericCancel")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EAbilityGenericReplicatedEvent::InputPressed")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EAbilityGenericReplicatedEvent::InputReleased")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EAbilityGenericReplicatedEvent::GenericSignalFromClient")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EAbilityGenericReplicatedEvent::GenericSignalFromServer")), 5));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EAbilityGenericReplicatedEvent::GameCustom1")), 6));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EAbilityGenericReplicatedEvent::GameCustom2")), 7));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EAbilityGenericReplicatedEvent::GameCustom3")), 8));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EAbilityGenericReplicatedEvent::GameCustom4")), 9));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EAbilityGenericReplicatedEvent::GameCustom5")), 10));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EAbilityGenericReplicatedEvent::MAX")), 11));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EAbilityGenericReplicatedEvent::EAbilityGenericReplicatedEvent_MAX")), 12));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("GameCustom1.ToolTip"), TEXT("Custom events for game use"));
			MetaData->SetValue(ReturnEnum, TEXT("GenericCancel.ToolTip"), TEXT("A generic cancellation event. Not necessarily a canellation of the ability or targeting. Could be used to cancel out of a channelling portion of ability."));
			MetaData->SetValue(ReturnEnum, TEXT("GenericConfirm.ToolTip"), TEXT("A generic confirmation to commit the ability"));
			MetaData->SetValue(ReturnEnum, TEXT("GenericSignalFromClient.ToolTip"), TEXT("A generic event from the client"));
			MetaData->SetValue(ReturnEnum, TEXT("GenericSignalFromServer.ToolTip"), TEXT("A generic event from the server"));
			MetaData->SetValue(ReturnEnum, TEXT("InputPressed.ToolTip"), TEXT("Additional input presses of the ability (Press X to activate ability, press X again while it is active to do other things within the GameplayAbility's logic)"));
			MetaData->SetValue(ReturnEnum, TEXT("InputReleased.ToolTip"), TEXT("Input release event of the ability"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTargetTypes.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("These are generic, nonpayload carrying events that are replicated between the client and server"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_GameplayAbilities_EAbilityGenericReplicatedEvent_CRC() { return 1036280039U; }
	UEnum* Z_Construct_UEnum_GameplayAbilities_EGameplayAbilityTargetingLocationType()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UEnum_GameplayAbilities_EGameplayAbilityTargetingLocationType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EGameplayAbilityTargetingLocationType"), 0, Get_Z_Construct_UEnum_GameplayAbilities_EGameplayAbilityTargetingLocationType_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EGameplayAbilityTargetingLocationType"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayAbilityTargetingLocationType::LiteralTransform")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayAbilityTargetingLocationType::ActorTransform")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayAbilityTargetingLocationType::SocketTransform")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayAbilityTargetingLocationType::EGameplayAbilityTargetingLocationType_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ActorTransform.DisplayName"), TEXT("Actor Transform"));
			MetaData->SetValue(ReturnEnum, TEXT("ActorTransform.ToolTip"), TEXT("We report an actual raw transform. This is also the final fallback if other methods fail."));
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("LiteralTransform.DisplayName"), TEXT("Literal Transform"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTargetTypes.h"));
			MetaData->SetValue(ReturnEnum, TEXT("SocketTransform.DisplayName"), TEXT("Socket Transform"));
			MetaData->SetValue(ReturnEnum, TEXT("SocketTransform.ToolTip"), TEXT("We pull the transform from an associated actor directly."));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("What type of location calculation to use when an ability asks for our transform."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_GameplayAbilities_EGameplayAbilityTargetingLocationType_CRC() { return 83076545U; }
	UEnum* Z_Construct_UEnum_GameplayAbilities_EGameplayTargetingConfirmation()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UEnum_GameplayAbilities_EGameplayTargetingConfirmation_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EGameplayTargetingConfirmation"), 0, Get_Z_Construct_UEnum_GameplayAbilities_EGameplayTargetingConfirmation_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EGameplayTargetingConfirmation"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayTargetingConfirmation::Instant")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayTargetingConfirmation::UserConfirmed")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayTargetingConfirmation::Custom")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayTargetingConfirmation::CustomMulti")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayTargetingConfirmation::EGameplayTargetingConfirmation_MAX")), 4));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("Custom.ToolTip"), TEXT("The targeting happens when the user confirms the targeting."));
			MetaData->SetValue(ReturnEnum, TEXT("CustomMulti.ToolTip"), TEXT("The GameplayTargeting Ability is responsible for deciding when the targeting data is ready. Not supported by all TargetingActors."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTargetTypes.h"));
			MetaData->SetValue(ReturnEnum, TEXT("UserConfirmed.ToolTip"), TEXT("The targeting happens instantly without special logic or user input deciding when to 'fire'."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_GameplayAbilities_EGameplayTargetingConfirmation_CRC() { return 4031053380U; }
	UScriptStruct* Z_Construct_UScriptStruct_FGameplayAbilityTargetData_SingleTargetHit()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UScriptStruct_FGameplayAbilityTargetData_SingleTargetHit_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("GameplayAbilityTargetData_SingleTargetHit"), sizeof(FGameplayAbilityTargetData_SingleTargetHit), Get_Z_Construct_UScriptStruct_FGameplayAbilityTargetData_SingleTargetHit_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GameplayAbilityTargetData_SingleTargetHit"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FGameplayAbilityTargetData(), new UScriptStruct::TCppStructOps<FGameplayAbilityTargetData_SingleTargetHit>, EStructFlags(0x00000205));
			UProperty* NewProp_HitResult = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("HitResult"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(HitResult, FGameplayAbilityTargetData_SingleTargetHit), 0x0000008000000000, Z_Construct_UScriptStruct_FHitResult());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTargetTypes.h"));
			MetaData->SetValue(NewProp_HitResult, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTargetTypes.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FGameplayAbilityTargetData_SingleTargetHit_CRC() { return 4032911509U; }
	UScriptStruct* Z_Construct_UScriptStruct_FGameplayAbilityTargetData_ActorArray()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UScriptStruct_FGameplayAbilityTargetData_ActorArray_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("GameplayAbilityTargetData_ActorArray"), sizeof(FGameplayAbilityTargetData_ActorArray), Get_Z_Construct_UScriptStruct_FGameplayAbilityTargetData_ActorArray_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GameplayAbilityTargetData_ActorArray"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FGameplayAbilityTargetData(), new UScriptStruct::TCppStructOps<FGameplayAbilityTargetData_ActorArray>, EStructFlags(0x00000205));
			UProperty* NewProp_TargetActorArray = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TargetActorArray"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(TargetActorArray, FGameplayAbilityTargetData_ActorArray), 0x0004000000000001);
			UProperty* NewProp_TargetActorArray_Inner = new(EC_InternalUseOnlyConstructor, NewProp_TargetActorArray, TEXT("TargetActorArray"), RF_Public|RF_Transient|RF_Native) UWeakObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0004000000000000, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_SourceLocation = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SourceLocation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SourceLocation, FGameplayAbilityTargetData_ActorArray), 0x0000008000000005, Z_Construct_UScriptStruct_FGameplayAbilityTargetingLocationInfo());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTargetTypes.h"));
			MetaData->SetValue(NewProp_TargetActorArray, TEXT("Category"), TEXT("Targeting"));
			MetaData->SetValue(NewProp_TargetActorArray, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTargetTypes.h"));
			MetaData->SetValue(NewProp_TargetActorArray, TEXT("ToolTip"), TEXT("Rather than targeting a single point, this type of targeting selects multiple actors."));
			MetaData->SetValue(NewProp_SourceLocation, TEXT("Category"), TEXT("Targeting"));
			MetaData->SetValue(NewProp_SourceLocation, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTargetTypes.h"));
			MetaData->SetValue(NewProp_SourceLocation, TEXT("ToolTip"), TEXT("We could be selecting this group of actors from any type of location, so use a generic location type"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FGameplayAbilityTargetData_ActorArray_CRC() { return 1788262336U; }
	UScriptStruct* Z_Construct_UScriptStruct_FGameplayAbilityTargetData_LocationInfo()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UScriptStruct_FGameplayAbilityTargetData_LocationInfo_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("GameplayAbilityTargetData_LocationInfo"), sizeof(FGameplayAbilityTargetData_LocationInfo), Get_Z_Construct_UScriptStruct_FGameplayAbilityTargetData_LocationInfo_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GameplayAbilityTargetData_LocationInfo"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FGameplayAbilityTargetData(), new UScriptStruct::TCppStructOps<FGameplayAbilityTargetData_LocationInfo>, EStructFlags(0x00000205));
			UProperty* NewProp_TargetLocation = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TargetLocation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TargetLocation, FGameplayAbilityTargetData_LocationInfo), 0x0000008000000005, Z_Construct_UScriptStruct_FGameplayAbilityTargetingLocationInfo());
			UProperty* NewProp_SourceLocation = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SourceLocation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SourceLocation, FGameplayAbilityTargetData_LocationInfo), 0x0000008000000005, Z_Construct_UScriptStruct_FGameplayAbilityTargetingLocationInfo());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTargetTypes.h"));
			MetaData->SetValue(NewProp_TargetLocation, TEXT("Category"), TEXT("Targeting"));
			MetaData->SetValue(NewProp_TargetLocation, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTargetTypes.h"));
			MetaData->SetValue(NewProp_TargetLocation, TEXT("ToolTip"), TEXT("Generic location data for target"));
			MetaData->SetValue(NewProp_SourceLocation, TEXT("Category"), TEXT("Targeting"));
			MetaData->SetValue(NewProp_SourceLocation, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTargetTypes.h"));
			MetaData->SetValue(NewProp_SourceLocation, TEXT("ToolTip"), TEXT("Generic location data for source"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FGameplayAbilityTargetData_LocationInfo_CRC() { return 1132623214U; }
	UScriptStruct* Z_Construct_UScriptStruct_FGameplayAbilityTargetingLocationInfo()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UScriptStruct_FGameplayAbilityTargetingLocationInfo_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("GameplayAbilityTargetingLocationInfo"), sizeof(FGameplayAbilityTargetingLocationInfo), Get_Z_Construct_UScriptStruct_FGameplayAbilityTargetingLocationInfo_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GameplayAbilityTargetingLocationInfo"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FGameplayAbilityTargetingLocationInfo>, EStructFlags(0x00000205));
			UProperty* NewProp_SourceSocketName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SourceSocketName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(SourceSocketName, FGameplayAbilityTargetingLocationInfo), 0x0001000000000004);
			UProperty* NewProp_SourceAbility = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SourceAbility"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(SourceAbility, FGameplayAbilityTargetingLocationInfo), 0x0001000000000004, Z_Construct_UClass_UGameplayAbility_NoRegister());
			UProperty* NewProp_SourceComponent = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SourceComponent"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(SourceComponent, FGameplayAbilityTargetingLocationInfo), 0x000100000008000c, Z_Construct_UClass_UMeshComponent_NoRegister());
			UProperty* NewProp_SourceActor = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SourceActor"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(SourceActor, FGameplayAbilityTargetingLocationInfo), 0x0001000000000004, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_LiteralTransform = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LiteralTransform"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LiteralTransform, FGameplayAbilityTargetingLocationInfo), 0x0001000000000004, Z_Construct_UScriptStruct_FTransform());
			UProperty* NewProp_LocationType = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LocationType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(LocationType, FGameplayAbilityTargetingLocationInfo), 0x0001000000000004, Z_Construct_UEnum_GameplayAbilities_EGameplayAbilityTargetingLocationType());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTargetTypes.h"));
			MetaData->SetValue(NewProp_SourceSocketName, TEXT("Category"), TEXT("Targeting"));
			MetaData->SetValue(NewProp_SourceSocketName, TEXT("ExposeOnSpawn"), TEXT("TRUE"));
			MetaData->SetValue(NewProp_SourceSocketName, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTargetTypes.h"));
			MetaData->SetValue(NewProp_SourceSocketName, TEXT("ToolTip"), TEXT("If SourceComponent is valid, this is the name of the socket transform that will be used. If no Socket is provided, SourceComponent's transform will be used."));
			MetaData->SetValue(NewProp_SourceAbility, TEXT("Category"), TEXT("Targeting"));
			MetaData->SetValue(NewProp_SourceAbility, TEXT("ExposeOnSpawn"), TEXT("TRUE"));
			MetaData->SetValue(NewProp_SourceAbility, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTargetTypes.h"));
			MetaData->SetValue(NewProp_SourceAbility, TEXT("ToolTip"), TEXT("Ability that will be using the targeting data"));
			MetaData->SetValue(NewProp_SourceComponent, TEXT("Category"), TEXT("Targeting"));
			MetaData->SetValue(NewProp_SourceComponent, TEXT("EditInline"), TEXT("true"));
			MetaData->SetValue(NewProp_SourceComponent, TEXT("ExposeOnSpawn"), TEXT("TRUE"));
			MetaData->SetValue(NewProp_SourceComponent, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTargetTypes.h"));
			MetaData->SetValue(NewProp_SourceComponent, TEXT("ToolTip"), TEXT("Socket-based targeting requires a skeletal mesh component to check for the named socket."));
			MetaData->SetValue(NewProp_SourceActor, TEXT("Category"), TEXT("Targeting"));
			MetaData->SetValue(NewProp_SourceActor, TEXT("ExposeOnSpawn"), TEXT("TRUE"));
			MetaData->SetValue(NewProp_SourceActor, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTargetTypes.h"));
			MetaData->SetValue(NewProp_SourceActor, TEXT("ToolTip"), TEXT("A source actor is needed for Actor-based targeting, but not for Socket-based targeting."));
			MetaData->SetValue(NewProp_LiteralTransform, TEXT("Category"), TEXT("Targeting"));
			MetaData->SetValue(NewProp_LiteralTransform, TEXT("ExposeOnSpawn"), TEXT("TRUE"));
			MetaData->SetValue(NewProp_LiteralTransform, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTargetTypes.h"));
			MetaData->SetValue(NewProp_LiteralTransform, TEXT("ToolTip"), TEXT("A literal world transform can be used, if one has been calculated outside of the actor using the ability."));
			MetaData->SetValue(NewProp_LocationType, TEXT("Category"), TEXT("Targeting"));
			MetaData->SetValue(NewProp_LocationType, TEXT("ExposeOnSpawn"), TEXT("TRUE"));
			MetaData->SetValue(NewProp_LocationType, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTargetTypes.h"));
			MetaData->SetValue(NewProp_LocationType, TEXT("ToolTip"), TEXT("Type of location used - will determine what data is transmitted over the network and what fields are used when calculating position."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FGameplayAbilityTargetingLocationInfo_CRC() { return 4222654859U; }
	UScriptStruct* Z_Construct_UScriptStruct_FGameplayAbilityTargetDataHandle()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UScriptStruct_FGameplayAbilityTargetDataHandle_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("GameplayAbilityTargetDataHandle"), sizeof(FGameplayAbilityTargetDataHandle), Get_Z_Construct_UScriptStruct_FGameplayAbilityTargetDataHandle_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GameplayAbilityTargetDataHandle"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FGameplayAbilityTargetDataHandle>, EStructFlags(0x00000201));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTargetTypes.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Handle for Targeting Data. This servers two main purposes:\n        -Avoid us having to copy around the full targeting data structure in Blueprints\n        -Allows us to leverage polymorphism in the target data structure\n        -Allows us to implement NetSerialize and replicate by value between clients/server\n\n        -Avoid using UObjects could be used to give us polymorphism and by reference passing in blueprints.\n        -However we would still be screwed when it came to replication\n\n        -Replication by value\n        -Pass by reference in blueprints\n        -Polymophism in TargetData structure"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FGameplayAbilityTargetDataHandle_CRC() { return 922609031U; }
	UScriptStruct* Z_Construct_UScriptStruct_FGameplayAbilityTargetData()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UScriptStruct_FGameplayAbilityTargetData_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("GameplayAbilityTargetData"), sizeof(FGameplayAbilityTargetData), Get_Z_Construct_UScriptStruct_FGameplayAbilityTargetData_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GameplayAbilityTargetData"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FGameplayAbilityTargetData>, EStructFlags(0x00000201));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTargetTypes.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("A generic structure for targeting data. We want generic functions to produce this data and other generic\nfunctions to consume this data.\n\nWe expect this to be able to hold specific actors/object reference and also generic location/direction/origin\ninformation.\n\nSome example producers:\n        -Overlap/Hit collision event generates TargetData about who was hit in a melee attack\n        -A mouse input causes a hit trace and the actor infront of the crosshair is turned into TargetData\n        -A mouse input causes TargetData to be generated from the owner's crosshair view origin/direction\n        -An AOE/aura pulses and all actors in a radius around the instigator are added to TargetData\n        -Panzer Dragoon style 'painting' targeting mode\n        -MMORPG style ground AOE targeting style (potentially both a location on the ground and actors that were targeted)\n\nSome example consumers:\n        -Apply a GameplayEffect to all actors in TargetData\n        -Find closest actor from all in TargetData\n        -Call some function on all actors in TargetData\n        -Filter or merge TargetDatas\n        -Spawn a new actor at a TargetData location\n\n\n\nMaybe it is better to distinguish between actor list targeting vs positional targeting data?\n        -AOE/aura type of targeting data blurs the line"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FGameplayAbilityTargetData_CRC() { return 2966342187U; }
	UEnum* Z_Construct_UEnum_GameplayAbilities_EGameplayEffectGrantedAbilityRemovePolicy()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UEnum_GameplayAbilities_EGameplayEffectGrantedAbilityRemovePolicy_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EGameplayEffectGrantedAbilityRemovePolicy"), 0, Get_Z_Construct_UEnum_GameplayAbilities_EGameplayEffectGrantedAbilityRemovePolicy_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EGameplayEffectGrantedAbilityRemovePolicy"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayEffectGrantedAbilityRemovePolicy::CancelAbilityImmediately")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayEffectGrantedAbilityRemovePolicy::RemoveAbilityOnEnd")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayEffectGrantedAbilityRemovePolicy::DoNothing")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayEffectGrantedAbilityRemovePolicy::EGameplayEffectGrantedAbilityRemovePolicy_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("CancelAbilityImmediately.ToolTip"), TEXT("Active abilities are immediately canceled and the ability is removed."));
			MetaData->SetValue(ReturnEnum, TEXT("DoNothing.ToolTip"), TEXT("Granted abilties are left lone when the granting GameplayEffect is removed."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/GameplayAbilitySpec.h"));
			MetaData->SetValue(ReturnEnum, TEXT("RemoveAbilityOnEnd.ToolTip"), TEXT("Active abilities are allowed to finish, and then removed."));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Describes what happens when a GameplayEffect, that is granting an active ability, is removed from its owner."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_GameplayAbilities_EGameplayEffectGrantedAbilityRemovePolicy_CRC() { return 4284908707U; }
	UEnum* Z_Construct_UEnum_GameplayAbilities_EGameplayAbilityActivationMode()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UEnum_GameplayAbilities_EGameplayAbilityActivationMode_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EGameplayAbilityActivationMode"), 0, Get_Z_Construct_UEnum_GameplayAbilities_EGameplayAbilityActivationMode_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EGameplayAbilityActivationMode"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayAbilityActivationMode::Authority")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayAbilityActivationMode::NonAuthority")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayAbilityActivationMode::Predicting")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayAbilityActivationMode::Confirmed")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayAbilityActivationMode::EGameplayAbilityActivationMode_MAX")), 4));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("Authority.ToolTip"), TEXT("We are the authority activating this ability"));
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("Confirmed.ToolTip"), TEXT("We are not the authority, but the authority has confirmed this activation"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/GameplayAbilitySpec.h"));
			MetaData->SetValue(ReturnEnum, TEXT("NonAuthority.ToolTip"), TEXT("We are not the authority but aren't predicting yet. This is a mostly invalid state to be in."));
			MetaData->SetValue(ReturnEnum, TEXT("Predicting.ToolTip"), TEXT("We are predicting the activation of this ability"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_GameplayAbilities_EGameplayAbilityActivationMode_CRC() { return 3807561330U; }
	UScriptStruct* Z_Construct_UScriptStruct_FGameplayAbilitySpecContainer()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UScriptStruct_FGameplayAbilitySpecContainer_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("GameplayAbilitySpecContainer"), sizeof(FGameplayAbilitySpecContainer), Get_Z_Construct_UScriptStruct_FGameplayAbilitySpecContainer_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GameplayAbilitySpecContainer"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FFastArraySerializer(), new UScriptStruct::TCppStructOps<FGameplayAbilitySpecContainer>, EStructFlags(0x00000201));
			UProperty* NewProp_Items = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Items"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Items, FGameplayAbilitySpecContainer), 0x0000000000000000);
			UProperty* NewProp_Items_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Items, TEXT("Items"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FGameplayAbilitySpec());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/GameplayAbilitySpec.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Fast serializer wrapper for above struct"));
			MetaData->SetValue(NewProp_Items, TEXT("ModuleRelativePath"), TEXT("Public/GameplayAbilitySpec.h"));
			MetaData->SetValue(NewProp_Items, TEXT("ToolTip"), TEXT("List of activatable abilities"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FGameplayAbilitySpecContainer_CRC() { return 3518994567U; }
	UScriptStruct* Z_Construct_UScriptStruct_FGameplayAbilitySpec()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UScriptStruct_FGameplayAbilitySpec_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("GameplayAbilitySpec"), sizeof(FGameplayAbilitySpec), Get_Z_Construct_UScriptStruct_FGameplayAbilitySpec_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GameplayAbilitySpec"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FFastArraySerializerItem(), new UScriptStruct::TCppStructOps<FGameplayAbilitySpec>, EStructFlags(0x00000201));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(PendingRemove, FGameplayAbilitySpec, bool);
			UProperty* NewProp_PendingRemove = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PendingRemove"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(PendingRemove, FGameplayAbilitySpec), 0x0000000080000000, CPP_BOOL_PROPERTY_BITMASK(PendingRemove, FGameplayAbilitySpec), sizeof(bool), true);
			UProperty* NewProp_GameplayEffectHandle = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("GameplayEffectHandle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(GameplayEffectHandle, FGameplayAbilitySpec), 0x0000000080000000, Z_Construct_UScriptStruct_FActiveGameplayEffectHandle());
			UProperty* NewProp_ReplicatedInstances = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ReplicatedInstances"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ReplicatedInstances, FGameplayAbilitySpec), 0x0000000000000000);
			UProperty* NewProp_ReplicatedInstances_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ReplicatedInstances, TEXT("ReplicatedInstances"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UGameplayAbility_NoRegister());
			UProperty* NewProp_NonReplicatedInstances = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("NonReplicatedInstances"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(NonReplicatedInstances, FGameplayAbilitySpec), 0x0000000080000000);
			UProperty* NewProp_NonReplicatedInstances_Inner = new(EC_InternalUseOnlyConstructor, NewProp_NonReplicatedInstances, TEXT("NonReplicatedInstances"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UGameplayAbility_NoRegister());
			UProperty* NewProp_ActivationInfo = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ActivationInfo"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ActivationInfo, FGameplayAbilitySpec), 0x0000000080000000, Z_Construct_UScriptStruct_FGameplayAbilityActivationInfo());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(RemoveAfterActivation, FGameplayAbilitySpec, bool);
			UProperty* NewProp_RemoveAfterActivation = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RemoveAfterActivation"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(RemoveAfterActivation, FGameplayAbilitySpec), 0x0000000080000000, CPP_BOOL_PROPERTY_BITMASK(RemoveAfterActivation, FGameplayAbilitySpec), sizeof(bool), true);
			UProperty* NewProp_ActiveCount = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ActiveCount"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(ActiveCount, FGameplayAbilitySpec), 0x0000000080000000);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(InputPressed, FGameplayAbilitySpec, bool);
			UProperty* NewProp_InputPressed = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("InputPressed"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(InputPressed, FGameplayAbilitySpec), 0x0000000080000000, CPP_BOOL_PROPERTY_BITMASK(InputPressed, FGameplayAbilitySpec), sizeof(bool), true);
			UProperty* NewProp_SourceObject = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SourceObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(SourceObject, FGameplayAbilitySpec), 0x0000000000000000, Z_Construct_UClass_UObject_NoRegister());
			UProperty* NewProp_InputID = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("InputID"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(InputID, FGameplayAbilitySpec), 0x0000000000000000);
			UProperty* NewProp_Level = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Level"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Level, FGameplayAbilitySpec), 0x0000000000000000);
			UProperty* NewProp_Ability = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Ability"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Ability, FGameplayAbilitySpec), 0x0000000000000000, Z_Construct_UClass_UGameplayAbility_NoRegister());
			UProperty* NewProp_Handle = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Handle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Handle, FGameplayAbilitySpec), 0x0000000000000000, Z_Construct_UScriptStruct_FGameplayAbilitySpecHandle());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/GameplayAbilitySpec.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("An activatable ability spec, hosted on the ability system component. This defines both what the ability is (what class, what level, input binding etc)\nand also holds runtime state that must be kept outside of the ability being instanced/activated."));
			MetaData->SetValue(NewProp_PendingRemove, TEXT("ModuleRelativePath"), TEXT("Public/GameplayAbilitySpec.h"));
			MetaData->SetValue(NewProp_PendingRemove, TEXT("ToolTip"), TEXT("Pending removal due to scope lock"));
			MetaData->SetValue(NewProp_GameplayEffectHandle, TEXT("ModuleRelativePath"), TEXT("Public/GameplayAbilitySpec.h"));
			MetaData->SetValue(NewProp_GameplayEffectHandle, TEXT("ToolTip"), TEXT("Handle to GE that granted us (usually invalid)"));
			MetaData->SetValue(NewProp_ReplicatedInstances, TEXT("ModuleRelativePath"), TEXT("Public/GameplayAbilitySpec.h"));
			MetaData->SetValue(NewProp_ReplicatedInstances, TEXT("ToolTip"), TEXT("Replicated instances of this ability.."));
			MetaData->SetValue(NewProp_NonReplicatedInstances, TEXT("ModuleRelativePath"), TEXT("Public/GameplayAbilitySpec.h"));
			MetaData->SetValue(NewProp_NonReplicatedInstances, TEXT("ToolTip"), TEXT("Non replicating instances of this ability."));
			MetaData->SetValue(NewProp_ActivationInfo, TEXT("ModuleRelativePath"), TEXT("Public/GameplayAbilitySpec.h"));
			MetaData->SetValue(NewProp_ActivationInfo, TEXT("ToolTip"), TEXT("Activation state of this ability. This is not replicated since it needs to be overwritten locally on clients during prediction."));
			MetaData->SetValue(NewProp_RemoveAfterActivation, TEXT("ModuleRelativePath"), TEXT("Public/GameplayAbilitySpec.h"));
			MetaData->SetValue(NewProp_RemoveAfterActivation, TEXT("ToolTip"), TEXT("If true, this ability should be removed as soon as it finishes executing"));
			MetaData->SetValue(NewProp_ActiveCount, TEXT("ModuleRelativePath"), TEXT("Public/GameplayAbilitySpec.h"));
			MetaData->SetValue(NewProp_ActiveCount, TEXT("ToolTip"), TEXT("A count of the number of times this ability has been activated minus the number of times it has been ended. For instanced abilities this will be the number of currently active instances. Can't replicate until prediction accurately handles this."));
			MetaData->SetValue(NewProp_InputPressed, TEXT("ModuleRelativePath"), TEXT("Public/GameplayAbilitySpec.h"));
			MetaData->SetValue(NewProp_InputPressed, TEXT("ToolTip"), TEXT("Is input currently pressed. Set to false when input is released"));
			MetaData->SetValue(NewProp_SourceObject, TEXT("ModuleRelativePath"), TEXT("Public/GameplayAbilitySpec.h"));
			MetaData->SetValue(NewProp_SourceObject, TEXT("ToolTip"), TEXT("Object this ability was created from, can be an actor or static object. Useful to bind an ability to a gameplay object"));
			MetaData->SetValue(NewProp_InputID, TEXT("ModuleRelativePath"), TEXT("Public/GameplayAbilitySpec.h"));
			MetaData->SetValue(NewProp_InputID, TEXT("ToolTip"), TEXT("InputID, if bound"));
			MetaData->SetValue(NewProp_Level, TEXT("ModuleRelativePath"), TEXT("Public/GameplayAbilitySpec.h"));
			MetaData->SetValue(NewProp_Level, TEXT("ToolTip"), TEXT("Level of Ability"));
			MetaData->SetValue(NewProp_Ability, TEXT("ModuleRelativePath"), TEXT("Public/GameplayAbilitySpec.h"));
			MetaData->SetValue(NewProp_Ability, TEXT("ToolTip"), TEXT("Ability of the spec (Always the CDO. This should be const but too many things modify it currently)"));
			MetaData->SetValue(NewProp_Handle, TEXT("ModuleRelativePath"), TEXT("Public/GameplayAbilitySpec.h"));
			MetaData->SetValue(NewProp_Handle, TEXT("ToolTip"), TEXT("Handle for outside sources to refer to this spec by"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FGameplayAbilitySpec_CRC() { return 589897765U; }
	UScriptStruct* Z_Construct_UScriptStruct_FGameplayAbilityActivationInfo()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UScriptStruct_FGameplayAbilityActivationInfo_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("GameplayAbilityActivationInfo"), sizeof(FGameplayAbilityActivationInfo), Get_Z_Construct_UScriptStruct_FGameplayAbilityActivationInfo_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GameplayAbilityActivationInfo"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FGameplayAbilityActivationInfo>, EStructFlags(0x00000201));
			UProperty* NewProp_PredictionKeyWhenActivated = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PredictionKeyWhenActivated"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PredictionKeyWhenActivated, FGameplayAbilityActivationInfo), 0x0000000000000000, Z_Construct_UScriptStruct_FPredictionKey());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCanBeEndedByOtherInstance, FGameplayAbilityActivationInfo, bool);
			UProperty* NewProp_bCanBeEndedByOtherInstance = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bCanBeEndedByOtherInstance"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCanBeEndedByOtherInstance, FGameplayAbilityActivationInfo), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bCanBeEndedByOtherInstance, FGameplayAbilityActivationInfo), sizeof(bool), true);
			UProperty* NewProp_ActivationMode = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ActivationMode"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(ActivationMode, FGameplayAbilityActivationInfo), 0x0000000000000014, Z_Construct_UEnum_GameplayAbilities_EGameplayAbilityActivationMode());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/GameplayAbilitySpec.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("FGameplayAbilityActivationInfo\n\nData tied to a specific activation of an ability.\n        -Tell us whether we are the authority, if we are predicting, confirmed, etc.\n        -Holds current and previous PredictionKey\n        -Generally not meant to be subclassed in projects.\n        -Passed around by value since the struct is small."));
			MetaData->SetValue(NewProp_PredictionKeyWhenActivated, TEXT("ModuleRelativePath"), TEXT("Public/GameplayAbilitySpec.h"));
			MetaData->SetValue(NewProp_PredictionKeyWhenActivated, TEXT("ToolTip"), TEXT("This was the prediction key used to activate this ability. It does not get updated\nif new prediction keys are generated over the course of the ability."));
			MetaData->SetValue(NewProp_bCanBeEndedByOtherInstance, TEXT("ModuleRelativePath"), TEXT("Public/GameplayAbilitySpec.h"));
			MetaData->SetValue(NewProp_bCanBeEndedByOtherInstance, TEXT("ToolTip"), TEXT("An ability that runs on multiple game instances can be canceled by a remote instance, but only if that remote instance has already confirmed starting it."));
			MetaData->SetValue(NewProp_ActivationMode, TEXT("Category"), TEXT("ActorInfo"));
			MetaData->SetValue(NewProp_ActivationMode, TEXT("ModuleRelativePath"), TEXT("Public/GameplayAbilitySpec.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FGameplayAbilityActivationInfo_CRC() { return 557473018U; }
	UScriptStruct* Z_Construct_UScriptStruct_FGameplayAbilitySpecDef()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UScriptStruct_FGameplayAbilitySpecDef_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("GameplayAbilitySpecDef"), sizeof(FGameplayAbilitySpecDef), Get_Z_Construct_UScriptStruct_FGameplayAbilitySpecDef_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GameplayAbilitySpecDef"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FGameplayAbilitySpecDef>, EStructFlags(0x00000001));
			UProperty* NewProp_AssignedHandle = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("AssignedHandle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(AssignedHandle, FGameplayAbilitySpecDef), 0x0000000000000000, Z_Construct_UScriptStruct_FGameplayAbilitySpecHandle());
			UProperty* NewProp_SourceObject = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SourceObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(SourceObject, FGameplayAbilitySpecDef), 0x0000000080000000, Z_Construct_UClass_UObject_NoRegister());
			UProperty* NewProp_RemovalPolicy = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RemovalPolicy"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(RemovalPolicy, FGameplayAbilitySpecDef), 0x0000000080010001, Z_Construct_UEnum_GameplayAbilities_EGameplayEffectGrantedAbilityRemovePolicy());
			UProperty* NewProp_InputID = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("InputID"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(InputID, FGameplayAbilitySpecDef), 0x0000000080010001);
			UProperty* NewProp_Level = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Level"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Level, FGameplayAbilitySpecDef), 0x0000000080010001);
			UProperty* NewProp_Ability = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Ability"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(Ability, FGameplayAbilitySpecDef), 0x0004000080010001, Z_Construct_UClass_UGameplayAbility_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/GameplayAbilitySpec.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("This is data that can be used to create an FGameplayAbilitySpec. Has some data that is only relevant when granted by a GameplayEffect"));
			MetaData->SetValue(NewProp_AssignedHandle, TEXT("ModuleRelativePath"), TEXT("Public/GameplayAbilitySpec.h"));
			MetaData->SetValue(NewProp_AssignedHandle, TEXT("ToolTip"), TEXT("This handle can be set if the SpecDef is used to create a real FGameplaybilitySpec"));
			MetaData->SetValue(NewProp_SourceObject, TEXT("ModuleRelativePath"), TEXT("Public/GameplayAbilitySpec.h"));
			MetaData->SetValue(NewProp_RemovalPolicy, TEXT("Category"), TEXT("Ability Definition"));
			MetaData->SetValue(NewProp_RemovalPolicy, TEXT("ModuleRelativePath"), TEXT("Public/GameplayAbilitySpec.h"));
			MetaData->SetValue(NewProp_InputID, TEXT("Category"), TEXT("Ability Definition"));
			MetaData->SetValue(NewProp_InputID, TEXT("ModuleRelativePath"), TEXT("Public/GameplayAbilitySpec.h"));
			MetaData->SetValue(NewProp_Level, TEXT("Category"), TEXT("Ability Definition"));
			MetaData->SetValue(NewProp_Level, TEXT("ModuleRelativePath"), TEXT("Public/GameplayAbilitySpec.h"));
			MetaData->SetValue(NewProp_Ability, TEXT("Category"), TEXT("Ability Definition"));
			MetaData->SetValue(NewProp_Ability, TEXT("ModuleRelativePath"), TEXT("Public/GameplayAbilitySpec.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FGameplayAbilitySpecDef_CRC() { return 1314204794U; }
	UScriptStruct* Z_Construct_UScriptStruct_FGameplayAbilitySpecHandle()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UScriptStruct_FGameplayAbilitySpecHandle_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("GameplayAbilitySpecHandle"), sizeof(FGameplayAbilitySpecHandle), Get_Z_Construct_UScriptStruct_FGameplayAbilitySpecHandle_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GameplayAbilitySpecHandle"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FGameplayAbilitySpecHandle>, EStructFlags(0x00000001));
			UProperty* NewProp_Handle = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Handle"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Handle, FGameplayAbilitySpecHandle), 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/GameplayAbilitySpec.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("This file exists in addition so that GameplayEffect.h can use FGameplayAbilitySpec without having to include GameplayAbilityTypes.h which has depancies on\nGameplayEffect.h"));
			MetaData->SetValue(NewProp_Handle, TEXT("ModuleRelativePath"), TEXT("Public/GameplayAbilitySpec.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FGameplayAbilitySpecHandle_CRC() { return 1960809383U; }
	UClass* Z_Construct_UClass_UGameplayEffectCalculation_NoRegister()
	{
		return UGameplayEffectCalculation::StaticClass();
	}
	UClass* Z_Construct_UClass_UGameplayEffectCalculation()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_GameplayAbilities();
			OuterClass = UGameplayEffectCalculation::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100081;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_RelevantAttributesToCapture = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RelevantAttributesToCapture"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(RelevantAttributesToCapture, UGameplayEffectCalculation), 0x0000080000010015);
				UProperty* NewProp_RelevantAttributesToCapture_Inner = new(EC_InternalUseOnlyConstructor, NewProp_RelevantAttributesToCapture, TEXT("RelevantAttributesToCapture"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FGameplayEffectAttributeCaptureDefinition());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("GameplayEffectCalculation.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffectCalculation.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Abstract base for specialized gameplay effect calculations; Capable of specifing attribute captures"));
				MetaData->SetValue(NewProp_RelevantAttributesToCapture, TEXT("Category"), TEXT("Attributes"));
				MetaData->SetValue(NewProp_RelevantAttributesToCapture, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffectCalculation.h"));
				MetaData->SetValue(NewProp_RelevantAttributesToCapture, TEXT("ToolTip"), TEXT("Attributes to capture that are relevant to the calculation"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UGameplayEffectCalculation(Z_Construct_UClass_UGameplayEffectCalculation, TEXT("UGameplayEffectCalculation"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UGameplayEffectCalculation);
	UFunction* Z_Construct_UDelegateFunction_GameplayAbilities_ActiveGameplayEffectQueryCustomMatch_Dynamic__DelegateSignature()
	{
		struct _Script_GameplayAbilities_eventActiveGameplayEffectQueryCustomMatch_Dynamic_Parms
		{
			FActiveGameplayEffect Effect;
			bool bMatches;
		};
		UObject* Outer=Z_Construct_UPackage_GameplayAbilities();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ActiveGameplayEffectQueryCustomMatch_Dynamic__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00120000, 65535, sizeof(_Script_GameplayAbilities_eventActiveGameplayEffectQueryCustomMatch_Dynamic_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bMatches, _Script_GameplayAbilities_eventActiveGameplayEffectQueryCustomMatch_Dynamic_Parms, bool);
			UProperty* NewProp_bMatches = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bMatches"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bMatches, _Script_GameplayAbilities_eventActiveGameplayEffectQueryCustomMatch_Dynamic_Parms), 0x0000000000000180, CPP_BOOL_PROPERTY_BITMASK(bMatches, _Script_GameplayAbilities_eventActiveGameplayEffectQueryCustomMatch_Dynamic_Parms), sizeof(bool), true);
			UProperty* NewProp_Effect = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Effect"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Effect, _Script_GameplayAbilities_eventActiveGameplayEffectQueryCustomMatch_Dynamic_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FActiveGameplayEffect());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
#endif
		}
		return ReturnFunction;
	}
	UEnum* Z_Construct_UEnum_GameplayAbilities_EGameplayEffectStackingPeriodPolicy()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UEnum_GameplayAbilities_EGameplayEffectStackingPeriodPolicy_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EGameplayEffectStackingPeriodPolicy"), 0, Get_Z_Construct_UEnum_GameplayAbilities_EGameplayEffectStackingPeriodPolicy_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EGameplayEffectStackingPeriodPolicy"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayEffectStackingPeriodPolicy::ResetOnSuccessfulApplication")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayEffectStackingPeriodPolicy::NeverReset")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayEffectStackingPeriodPolicy::EGameplayEffectStackingPeriodPolicy_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(ReturnEnum, TEXT("NeverReset.ToolTip"), TEXT("The progress toward the next tick of a periodic effect will never be reset, regardless of stack applications"));
			MetaData->SetValue(ReturnEnum, TEXT("ResetOnSuccessfulApplication.ToolTip"), TEXT("Any progress toward the next tick of a periodic effect is discarded upon any successful stack application"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Enumeration of policies for dealing with the period of a gameplay effect while stacking"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_GameplayAbilities_EGameplayEffectStackingPeriodPolicy_CRC() { return 2696792860U; }
	UEnum* Z_Construct_UEnum_GameplayAbilities_EGameplayEffectStackingDurationPolicy()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UEnum_GameplayAbilities_EGameplayEffectStackingDurationPolicy_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EGameplayEffectStackingDurationPolicy"), 0, Get_Z_Construct_UEnum_GameplayAbilities_EGameplayEffectStackingDurationPolicy_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EGameplayEffectStackingDurationPolicy"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayEffectStackingDurationPolicy::RefreshOnSuccessfulApplication")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayEffectStackingDurationPolicy::NeverRefresh")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayEffectStackingDurationPolicy::EGameplayEffectStackingDurationPolicy_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(ReturnEnum, TEXT("NeverRefresh.ToolTip"), TEXT("The duration of the effect will never be refreshed"));
			MetaData->SetValue(ReturnEnum, TEXT("RefreshOnSuccessfulApplication.ToolTip"), TEXT("The duration of the effect will be refreshed from any successful stack application"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Enumeration of policies for dealing with duration of a gameplay effect while stacking"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_GameplayAbilities_EGameplayEffectStackingDurationPolicy_CRC() { return 466339316U; }
	UEnum* Z_Construct_UEnum_GameplayAbilities_EGameplayEffectDurationType()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UEnum_GameplayAbilities_EGameplayEffectDurationType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EGameplayEffectDurationType"), 0, Get_Z_Construct_UEnum_GameplayAbilities_EGameplayEffectDurationType_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EGameplayEffectDurationType"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayEffectDurationType::Instant")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayEffectDurationType::Infinite")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayEffectDurationType::HasDuration")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayEffectDurationType::EGameplayEffectDurationType_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("HasDuration.ToolTip"), TEXT("The duration of this effect will be specified by a magnitude"));
			MetaData->SetValue(ReturnEnum, TEXT("Infinite.ToolTip"), TEXT("This effect lasts forever"));
			MetaData->SetValue(ReturnEnum, TEXT("Instant.ToolTip"), TEXT("This effect applies instantly"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Gameplay effect duration policies"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_GameplayAbilities_EGameplayEffectDurationType_CRC() { return 2245617302U; }
	UEnum* Z_Construct_UEnum_GameplayAbilities_EAttributeBasedFloatCalculationType()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UEnum_GameplayAbilities_EAttributeBasedFloatCalculationType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EAttributeBasedFloatCalculationType"), 0, Get_Z_Construct_UEnum_GameplayAbilities_EAttributeBasedFloatCalculationType_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EAttributeBasedFloatCalculationType"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EAttributeBasedFloatCalculationType::AttributeMagnitude")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EAttributeBasedFloatCalculationType::AttributeBaseValue")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EAttributeBasedFloatCalculationType::AttributeBonusMagnitude")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EAttributeBasedFloatCalculationType::EAttributeBasedFloatCalculationType_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("AttributeBaseValue.ToolTip"), TEXT("Use the base value of the attribute."));
			MetaData->SetValue(ReturnEnum, TEXT("AttributeBonusMagnitude.ToolTip"), TEXT("Use the \"bonus\" evaluated magnitude of the attribute: Equivalent to (FinalMag - BaseValue)."));
			MetaData->SetValue(ReturnEnum, TEXT("AttributeMagnitude.ToolTip"), TEXT("Use the final evaluated magnitude of the attribute."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Enumeration outlining the possible attribute based float calculation policies."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_GameplayAbilities_EAttributeBasedFloatCalculationType_CRC() { return 513447038U; }
	UEnum* Z_Construct_UEnum_GameplayAbilities_EGameplayEffectMagnitudeCalculation()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UEnum_GameplayAbilities_EGameplayEffectMagnitudeCalculation_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EGameplayEffectMagnitudeCalculation"), 0, Get_Z_Construct_UEnum_GameplayAbilities_EGameplayEffectMagnitudeCalculation_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EGameplayEffectMagnitudeCalculation"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayEffectMagnitudeCalculation::ScalableFloat")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayEffectMagnitudeCalculation::AttributeBased")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayEffectMagnitudeCalculation::CustomCalculationClass")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayEffectMagnitudeCalculation::SetByCaller")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayEffectMagnitudeCalculation::EGameplayEffectMagnitudeCalculation_MAX")), 4));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("AttributeBased.ToolTip"), TEXT("Perform a calculation based upon an attribute."));
			MetaData->SetValue(ReturnEnum, TEXT("CustomCalculationClass.ToolTip"), TEXT("Perform a custom calculation, capable of capturing and acting on multiple attributes, in either BP or native."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ScalableFloat.ToolTip"), TEXT("Use a simple, scalable float for the calculation."));
			MetaData->SetValue(ReturnEnum, TEXT("SetByCaller.ToolTip"), TEXT("This magnitude will be set explicity by that code/blueprint that creates the spec."));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Enumeration outlining the possible gameplay effect magnitude calculation policies."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_GameplayAbilities_EGameplayEffectMagnitudeCalculation_CRC() { return 4143357057U; }
	UScriptStruct* Z_Construct_UScriptStruct_FActiveGameplayEffectsContainer()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UScriptStruct_FActiveGameplayEffectsContainer_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("ActiveGameplayEffectsContainer"), sizeof(FActiveGameplayEffectsContainer), Get_Z_Construct_UScriptStruct_FActiveGameplayEffectsContainer_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ActiveGameplayEffectsContainer"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FFastArraySerializer(), new UScriptStruct::TCppStructOps<FActiveGameplayEffectsContainer>, EStructFlags(0x00000201));
			UProperty* NewProp_GameplayEffects_Internal = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("GameplayEffects_Internal"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(GameplayEffects_Internal, FActiveGameplayEffectsContainer), 0x0000000000000000);
			UProperty* NewProp_GameplayEffects_Internal_Inner = new(EC_InternalUseOnlyConstructor, NewProp_GameplayEffects_Internal, TEXT("GameplayEffects_Internal"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FActiveGameplayEffect());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Active GameplayEffects Container\n    -Bucket of ActiveGameplayEffects\n    -Needed for FFastArraySerialization\n\nThis should only be used by UAbilitySystemComponent. All of this could just live in UAbilitySystemComponent except that we need a distinct USTRUCT to implement FFastArraySerializer.\n\nThe preferred way to iterate through the ActiveGameplayEffectContainer is with CreateConstITerator/CreateIterator or stl style range iteration:\n\n\n    for (const FActiveGameplayEffect& Effect : this)\n    {\n    }\n\n    for (auto It = CreateConstIterator(); It; ++It)\n    {\n    }"));
			MetaData->SetValue(NewProp_GameplayEffects_Internal, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_GameplayEffects_Internal, TEXT("ToolTip"), TEXT("Our active list of Effects. Do not access this directly (Even from internal functions!) Use GetNumGameplayEffect() / GetGameplayEffect() !"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FActiveGameplayEffectsContainer_CRC() { return 4065744555U; }
	UScriptStruct* Z_Construct_UScriptStruct_FActiveGameplayEffectQuery()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UScriptStruct_FActiveGameplayEffectQuery_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("ActiveGameplayEffectQuery"), sizeof(FActiveGameplayEffectQuery), Get_Z_Construct_UScriptStruct_FActiveGameplayEffectQuery_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ActiveGameplayEffectQuery"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FActiveGameplayEffectQuery>, EStructFlags(0x00000001));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Generic querying data structure for active GameplayEffects. Lets us ask things like:\n        Give me duration/magnitude of active gameplay effects with these tags\n        Give me handles to all activate gameplay effects modifying this attribute.\n\nAny requirements specified in the query are required: must meet \"all\" not \"one\"."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FActiveGameplayEffectQuery_CRC() { return 73443870U; }
	UScriptStruct* Z_Construct_UScriptStruct_FGameplayEffectQuery()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UScriptStruct_FGameplayEffectQuery_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("GameplayEffectQuery"), sizeof(FGameplayEffectQuery), Get_Z_Construct_UScriptStruct_FGameplayEffectQuery_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GameplayEffectQuery"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FGameplayEffectQuery>, EStructFlags(0x00000205));
			UProperty* NewProp_EffectDefinition = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("EffectDefinition"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(EffectDefinition, FGameplayEffectQuery), 0x0000000000000005, Z_Construct_UClass_UGameplayEffect_NoRegister());
			UProperty* NewProp_EffectSource = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("EffectSource"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(EffectSource, FGameplayEffectQuery), 0x0000000000000005, Z_Construct_UClass_UObject_NoRegister());
			UProperty* NewProp_ModifyingAttribute = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ModifyingAttribute"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ModifyingAttribute, FGameplayEffectQuery), 0x0000000000000005, Z_Construct_UScriptStruct_FGameplayAttribute());
			UProperty* NewProp_EffectTagQuery = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("EffectTagQuery"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(EffectTagQuery, FGameplayEffectQuery), 0x0000000000000005, Z_Construct_UScriptStruct_FGameplayTagQuery());
			UProperty* NewProp_OwningTagQuery = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("OwningTagQuery"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(OwningTagQuery, FGameplayEffectQuery), 0x0000000000000005, Z_Construct_UScriptStruct_FGameplayTagQuery());
			UProperty* NewProp_CustomMatchDelegate_BP = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CustomMatchDelegate_BP"), RF_Public|RF_Transient|RF_Native) UDelegateProperty(CPP_PROPERTY_BASE(CustomMatchDelegate_BP, FGameplayEffectQuery), 0x0000000000080005, Z_Construct_UDelegateFunction_GameplayAbilities_ActiveGameplayEffectQueryCustomMatch_Dynamic__DelegateSignature());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Every set condition within this query must match in order for the query to match. i.e. individual query elements are ANDed together."));
			MetaData->SetValue(NewProp_EffectDefinition, TEXT("Category"), TEXT("Query"));
			MetaData->SetValue(NewProp_EffectDefinition, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_EffectDefinition, TEXT("ToolTip"), TEXT("Matches on GameplayEffects with this definition"));
			MetaData->SetValue(NewProp_EffectSource, TEXT("Category"), TEXT("Query"));
			MetaData->SetValue(NewProp_EffectSource, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_EffectSource, TEXT("ToolTip"), TEXT("Matches on GameplayEffects which come from this source"));
			MetaData->SetValue(NewProp_ModifyingAttribute, TEXT("Category"), TEXT("Query"));
			MetaData->SetValue(NewProp_ModifyingAttribute, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_ModifyingAttribute, TEXT("ToolTip"), TEXT("Matches on GameplayEffects which modify given attribute."));
			MetaData->SetValue(NewProp_EffectTagQuery, TEXT("Category"), TEXT("Query"));
			MetaData->SetValue(NewProp_EffectTagQuery, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_EffectTagQuery, TEXT("ToolTip"), TEXT("Query that is matched against InheritableGameplayEffectTags"));
			MetaData->SetValue(NewProp_OwningTagQuery, TEXT("Category"), TEXT("Query"));
			MetaData->SetValue(NewProp_OwningTagQuery, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_OwningTagQuery, TEXT("ToolTip"), TEXT("Query that is matched against InheritableOwnedTagsContainer"));
			MetaData->SetValue(NewProp_CustomMatchDelegate_BP, TEXT("Category"), TEXT("Query"));
			MetaData->SetValue(NewProp_CustomMatchDelegate_BP, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_CustomMatchDelegate_BP, TEXT("ToolTip"), TEXT("BP-exposed delegate for providing custom matching conditions."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FGameplayEffectQuery_CRC() { return 998924722U; }
	UScriptStruct* Z_Construct_UScriptStruct_FActiveGameplayEffect()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UScriptStruct_FActiveGameplayEffect_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("ActiveGameplayEffect"), sizeof(FActiveGameplayEffect), Get_Z_Construct_UScriptStruct_FActiveGameplayEffect_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ActiveGameplayEffect"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FFastArraySerializerItem(), new UScriptStruct::TCppStructOps<FActiveGameplayEffect>, EStructFlags(0x00000201));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsInhibited, FActiveGameplayEffect, bool);
			UProperty* NewProp_bIsInhibited = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bIsInhibited"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsInhibited, FActiveGameplayEffect), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bIsInhibited, FActiveGameplayEffect), sizeof(bool), true);
			UProperty* NewProp_StartWorldTime = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("StartWorldTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(StartWorldTime, FActiveGameplayEffect), 0x0000000080000000);
			UProperty* NewProp_CachedStartServerWorldTime = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CachedStartServerWorldTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(CachedStartServerWorldTime, FActiveGameplayEffect), 0x0000000080000000);
			UProperty* NewProp_StartServerWorldTime = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("StartServerWorldTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(StartServerWorldTime, FActiveGameplayEffect), 0x0000000000000000);
			UProperty* NewProp_PredictionKey = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PredictionKey"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PredictionKey, FActiveGameplayEffect), 0x0000000000000000, Z_Construct_UScriptStruct_FPredictionKey());
			UProperty* NewProp_Spec = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Spec"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Spec, FActiveGameplayEffect), 0x0000000000000000, Z_Construct_UScriptStruct_FGameplayEffectSpec());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Active GameplayEffect instance\n    -What GameplayEffect Spec\n    -Start time\n -When to execute next\n -Replication callbacks"));
			MetaData->SetValue(NewProp_bIsInhibited, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_bIsInhibited, TEXT("ToolTip"), TEXT("Not sure if this should replicate or not. If replicated, we may have trouble where IsInhibited doesn't appear to change when we do tag checks (because it was previously inhibited, but replication made it inhibited)."));
			MetaData->SetValue(NewProp_StartWorldTime, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_CachedStartServerWorldTime, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_CachedStartServerWorldTime, TEXT("ToolTip"), TEXT("Used for handling duration modifications being replicated"));
			MetaData->SetValue(NewProp_StartServerWorldTime, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_StartServerWorldTime, TEXT("ToolTip"), TEXT("Server time this started"));
			MetaData->SetValue(NewProp_PredictionKey, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_Spec, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FActiveGameplayEffect_CRC() { return 2412777661U; }
	UScriptStruct* Z_Construct_UScriptStruct_FGameplayEffectSpecForRPC()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UScriptStruct_FGameplayEffectSpecForRPC_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("GameplayEffectSpecForRPC"), sizeof(FGameplayEffectSpecForRPC), Get_Z_Construct_UScriptStruct_FGameplayEffectSpecForRPC_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GameplayEffectSpecForRPC"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FGameplayEffectSpecForRPC>, EStructFlags(0x00000201));
			UProperty* NewProp_Level = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Level"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Level, FGameplayEffectSpecForRPC), 0x0000000000000000);
			UProperty* NewProp_AggregatedTargetTags = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("AggregatedTargetTags"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(AggregatedTargetTags, FGameplayEffectSpecForRPC), 0x0000000000000000, Z_Construct_UScriptStruct_FGameplayTagContainer());
			UProperty* NewProp_AggregatedSourceTags = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("AggregatedSourceTags"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(AggregatedSourceTags, FGameplayEffectSpecForRPC), 0x0000000000000000, Z_Construct_UScriptStruct_FGameplayTagContainer());
			UProperty* NewProp_EffectContext = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("EffectContext"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(EffectContext, FGameplayEffectSpecForRPC), 0x0000000000000000, Z_Construct_UScriptStruct_FGameplayEffectContextHandle());
			UProperty* NewProp_ModifiedAttributes = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ModifiedAttributes"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ModifiedAttributes, FGameplayEffectSpecForRPC), 0x0000000000000000);
			UProperty* NewProp_ModifiedAttributes_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ModifiedAttributes, TEXT("ModifiedAttributes"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FGameplayEffectModifiedAttribute());
			UProperty* NewProp_Def = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Def"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Def, FGameplayEffectSpecForRPC), 0x0000000000000000, Z_Construct_UClass_UGameplayEffect_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("This is a cut down version of the gameplay effect spec used for RPCs."));
			MetaData->SetValue(NewProp_Level, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_AggregatedTargetTags, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_AggregatedSourceTags, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_AggregatedSourceTags, TEXT("ToolTip"), TEXT("This tells us how we got here (who / what applied us)"));
			MetaData->SetValue(NewProp_EffectContext, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_ModifiedAttributes, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_Def, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_Def, TEXT("ToolTip"), TEXT("GameplayEfect definition. The static data that this spec points to."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FGameplayEffectSpecForRPC_CRC() { return 321706498U; }
	UScriptStruct* Z_Construct_UScriptStruct_FGameplayEffectSpec()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UScriptStruct_FGameplayEffectSpec_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("GameplayEffectSpec"), sizeof(FGameplayEffectSpec), Get_Z_Construct_UScriptStruct_FGameplayEffectSpec_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GameplayEffectSpec"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FGameplayEffectSpec>, EStructFlags(0x00000201));
			UProperty* NewProp_Level = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Level"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Level, FGameplayEffectSpec), 0x0000000000000000);
			UProperty* NewProp_EffectContext = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("EffectContext"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(EffectContext, FGameplayEffectSpec), 0x0000000000000000, Z_Construct_UScriptStruct_FGameplayEffectContextHandle());
			UProperty* NewProp_GrantedAbilitySpecs = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("GrantedAbilitySpecs"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(GrantedAbilitySpecs, FGameplayEffectSpec), 0x0000000000000000);
			UProperty* NewProp_GrantedAbilitySpecs_Inner = new(EC_InternalUseOnlyConstructor, NewProp_GrantedAbilitySpecs, TEXT("GrantedAbilitySpecs"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FGameplayAbilitySpecDef());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDurationLocked, FGameplayEffectSpec, uint8);
			UProperty* NewProp_bDurationLocked = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bDurationLocked"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDurationLocked, FGameplayEffectSpec), 0x0000000080000000, CPP_BOOL_PROPERTY_BITMASK(bDurationLocked, FGameplayEffectSpec), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCompletedTargetAttributeCapture, FGameplayEffectSpec, uint8);
			UProperty* NewProp_bCompletedTargetAttributeCapture = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bCompletedTargetAttributeCapture"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCompletedTargetAttributeCapture, FGameplayEffectSpec), 0x0000000080000000, CPP_BOOL_PROPERTY_BITMASK(bCompletedTargetAttributeCapture, FGameplayEffectSpec), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCompletedSourceAttributeCapture, FGameplayEffectSpec, uint8);
			UProperty* NewProp_bCompletedSourceAttributeCapture = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bCompletedSourceAttributeCapture"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCompletedSourceAttributeCapture, FGameplayEffectSpec), 0x0000000080000000, CPP_BOOL_PROPERTY_BITMASK(bCompletedSourceAttributeCapture, FGameplayEffectSpec), sizeof(uint8), false);
			UProperty* NewProp_StackCount = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("StackCount"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(StackCount, FGameplayEffectSpec), 0x0000000000000000);
			UProperty* NewProp_Modifiers = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Modifiers"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Modifiers, FGameplayEffectSpec), 0x0000000000000000);
			UProperty* NewProp_Modifiers_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Modifiers, TEXT("Modifiers"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FModifierSpec());
			UProperty* NewProp_DynamicAssetTags = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DynamicAssetTags"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DynamicAssetTags, FGameplayEffectSpec), 0x0000000000000000, Z_Construct_UScriptStruct_FGameplayTagContainer());
			UProperty* NewProp_DynamicGrantedTags = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DynamicGrantedTags"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DynamicGrantedTags, FGameplayEffectSpec), 0x0000000000000000, Z_Construct_UScriptStruct_FGameplayTagContainer());
			UProperty* NewProp_CapturedTargetTags = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CapturedTargetTags"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(CapturedTargetTags, FGameplayEffectSpec), 0x0000000080000000, Z_Construct_UScriptStruct_FTagContainerAggregator());
			UProperty* NewProp_CapturedSourceTags = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CapturedSourceTags"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(CapturedSourceTags, FGameplayEffectSpec), 0x0000000080000000, Z_Construct_UScriptStruct_FTagContainerAggregator());
			UProperty* NewProp_ChanceToApplyToTarget = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ChanceToApplyToTarget"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ChanceToApplyToTarget, FGameplayEffectSpec), 0x0000000000000000);
			UProperty* NewProp_Period = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Period"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Period, FGameplayEffectSpec), 0x0000000000000000);
			UProperty* NewProp_Duration = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Duration"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Duration, FGameplayEffectSpec), 0x0000000000000000);
			UProperty* NewProp_CapturedRelevantAttributes = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CapturedRelevantAttributes"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(CapturedRelevantAttributes, FGameplayEffectSpec), 0x0000000080000000, Z_Construct_UScriptStruct_FGameplayEffectAttributeCaptureSpecContainer());
			UProperty* NewProp_ModifiedAttributes = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ModifiedAttributes"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ModifiedAttributes, FGameplayEffectSpec), 0x0000000000000000);
			UProperty* NewProp_ModifiedAttributes_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ModifiedAttributes, TEXT("ModifiedAttributes"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FGameplayEffectModifiedAttribute());
			UProperty* NewProp_Def = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Def"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Def, FGameplayEffectSpec), 0x0000000000000000, Z_Construct_UClass_UGameplayEffect_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("GameplayEffect Specification. Tells us:\n    -What UGameplayEffect (const data)\n    -What Level\n -Who instigated\n\nFGameplayEffectSpec is modifiable. We start with initial conditions and modifications be applied to it. In this sense, it is stateful/mutable but it\nis still distinct from an FActiveGameplayEffect which in an applied instance of an FGameplayEffectSpec."));
			MetaData->SetValue(NewProp_Level, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_Level, TEXT("ToolTip"), TEXT("This tells us how we got here (who / what applied us)"));
			MetaData->SetValue(NewProp_EffectContext, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_GrantedAbilitySpecs, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_bDurationLocked, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_bDurationLocked, TEXT("ToolTip"), TEXT("Whether the duration of the spec is locked or not; If it is, attempts to set it will fail"));
			MetaData->SetValue(NewProp_bCompletedTargetAttributeCapture, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_bCompletedTargetAttributeCapture, TEXT("ToolTip"), TEXT("Whether the spec has had its target attribute capture completed or not yet"));
			MetaData->SetValue(NewProp_bCompletedSourceAttributeCapture, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_bCompletedSourceAttributeCapture, TEXT("ToolTip"), TEXT("Whether the spec has had its source attribute capture completed or not yet"));
			MetaData->SetValue(NewProp_StackCount, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_Modifiers, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_DynamicAssetTags, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_DynamicAssetTags, TEXT("ToolTip"), TEXT("Tags that are on this effect spec and that did not come from the UGameplayEffect def. These are replicated."));
			MetaData->SetValue(NewProp_DynamicGrantedTags, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_DynamicGrantedTags, TEXT("ToolTip"), TEXT("Tags that are granted and that did not come from the UGameplayEffect def. These are replicated."));
			MetaData->SetValue(NewProp_CapturedTargetTags, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_CapturedTargetTags, TEXT("ToolTip"), TEXT("Tags from the target, captured during execute"));
			MetaData->SetValue(NewProp_CapturedSourceTags, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_CapturedSourceTags, TEXT("ToolTip"), TEXT("Captured Source Tags on GameplayEffectSpec creation."));
			MetaData->SetValue(NewProp_ChanceToApplyToTarget, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_ChanceToApplyToTarget, TEXT("ToolTip"), TEXT("The chance, in a 0.0-1.0 range, that this GameplayEffect will be applied to the target Attribute or GameplayEffect."));
			MetaData->SetValue(NewProp_Period, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_Period, TEXT("ToolTip"), TEXT("The period in seconds of this effect.\nNonperiodic effects should have a period of UGameplayEffect::NO_PERIOD"));
			MetaData->SetValue(NewProp_Duration, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_Duration, TEXT("ToolTip"), TEXT("The duration in seconds of this effect\ninstantaneous effects should have a duration of UGameplayEffect::INSTANT_APPLICATION\neffects that last forever should have a duration of UGameplayEffect::INFINITE_DURATION"));
			MetaData->SetValue(NewProp_CapturedRelevantAttributes, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_CapturedRelevantAttributes, TEXT("ToolTip"), TEXT("Attributes captured by the spec that are relevant to custom calculations, potentially in owned modifiers, etc.; NOT replicated to clients"));
			MetaData->SetValue(NewProp_ModifiedAttributes, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_ModifiedAttributes, TEXT("ToolTip"), TEXT("A list of attributes that were modified during the application of this spec"));
			MetaData->SetValue(NewProp_Def, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_Def, TEXT("ToolTip"), TEXT("GameplayEfect definition. The static data that this spec points to."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FGameplayEffectSpec_CRC() { return 1609444335U; }
	UScriptStruct* Z_Construct_UScriptStruct_FGameplayEffectAttributeCaptureSpecContainer()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UScriptStruct_FGameplayEffectAttributeCaptureSpecContainer_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("GameplayEffectAttributeCaptureSpecContainer"), sizeof(FGameplayEffectAttributeCaptureSpecContainer), Get_Z_Construct_UScriptStruct_FGameplayEffectAttributeCaptureSpecContainer_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GameplayEffectAttributeCaptureSpecContainer"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FGameplayEffectAttributeCaptureSpecContainer>, EStructFlags(0x00000201));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bHasNonSnapshottedAttributes, FGameplayEffectAttributeCaptureSpecContainer, bool);
			UProperty* NewProp_bHasNonSnapshottedAttributes = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bHasNonSnapshottedAttributes"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bHasNonSnapshottedAttributes, FGameplayEffectAttributeCaptureSpecContainer), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bHasNonSnapshottedAttributes, FGameplayEffectAttributeCaptureSpecContainer), sizeof(bool), true);
			UProperty* NewProp_TargetAttributes = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TargetAttributes"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(TargetAttributes, FGameplayEffectAttributeCaptureSpecContainer), 0x0000000000000000);
			UProperty* NewProp_TargetAttributes_Inner = new(EC_InternalUseOnlyConstructor, NewProp_TargetAttributes, TEXT("TargetAttributes"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FGameplayEffectAttributeCaptureSpec());
			UProperty* NewProp_SourceAttributes = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SourceAttributes"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(SourceAttributes, FGameplayEffectAttributeCaptureSpecContainer), 0x0000000000000000);
			UProperty* NewProp_SourceAttributes_Inner = new(EC_InternalUseOnlyConstructor, NewProp_SourceAttributes, TEXT("SourceAttributes"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FGameplayEffectAttributeCaptureSpec());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Struct used to handle a collection of captured source and target attributes"));
			MetaData->SetValue(NewProp_bHasNonSnapshottedAttributes, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_bHasNonSnapshottedAttributes, TEXT("ToolTip"), TEXT("If true, has at least one capture spec that did not request a snapshot"));
			MetaData->SetValue(NewProp_TargetAttributes, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_TargetAttributes, TEXT("ToolTip"), TEXT("Captured attributes from the target of a gameplay effect"));
			MetaData->SetValue(NewProp_SourceAttributes, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_SourceAttributes, TEXT("ToolTip"), TEXT("Captured attributes from the source of a gameplay effect"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FGameplayEffectAttributeCaptureSpecContainer_CRC() { return 2699461666U; }
	UScriptStruct* Z_Construct_UScriptStruct_FGameplayEffectAttributeCaptureSpec()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UScriptStruct_FGameplayEffectAttributeCaptureSpec_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("GameplayEffectAttributeCaptureSpec"), sizeof(FGameplayEffectAttributeCaptureSpec), Get_Z_Construct_UScriptStruct_FGameplayEffectAttributeCaptureSpec_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GameplayEffectAttributeCaptureSpec"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FGameplayEffectAttributeCaptureSpec>, EStructFlags(0x00000201));
			UProperty* NewProp_BackingDefinition = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BackingDefinition"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(BackingDefinition, FGameplayEffectAttributeCaptureSpec), 0x0000000000000000, Z_Construct_UScriptStruct_FGameplayEffectAttributeCaptureDefinition());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Struct used to hold the result of a gameplay attribute capture; Initially seeded by definition data, but then populated by ability system component when appropriate"));
			MetaData->SetValue(NewProp_BackingDefinition, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_BackingDefinition, TEXT("ToolTip"), TEXT("Copy of the definition the spec should adhere to for capturing"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FGameplayEffectAttributeCaptureSpec_CRC() { return 2989487463U; }
	UScriptStruct* Z_Construct_UScriptStruct_FGameplayEffectModifiedAttribute()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UScriptStruct_FGameplayEffectModifiedAttribute_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("GameplayEffectModifiedAttribute"), sizeof(FGameplayEffectModifiedAttribute), Get_Z_Construct_UScriptStruct_FGameplayEffectModifiedAttribute_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GameplayEffectModifiedAttribute"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FGameplayEffectModifiedAttribute>, EStructFlags(0x00000201));
			UProperty* NewProp_TotalMagnitude = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TotalMagnitude"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(TotalMagnitude, FGameplayEffectModifiedAttribute), 0x0000000000000000);
			UProperty* NewProp_Attribute = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Attribute"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Attribute, FGameplayEffectModifiedAttribute), 0x0000000000000000, Z_Construct_UScriptStruct_FGameplayAttribute());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Saves list of modified attributes, to use for gameplay cues or later processing"));
			MetaData->SetValue(NewProp_TotalMagnitude, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_TotalMagnitude, TEXT("ToolTip"), TEXT("Total magnitude applied to that attribute"));
			MetaData->SetValue(NewProp_Attribute, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_Attribute, TEXT("ToolTip"), TEXT("The attribute that has been modified"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FGameplayEffectModifiedAttribute_CRC() { return 1125410921U; }
	UScriptStruct* Z_Construct_UScriptStruct_FModifierSpec()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UScriptStruct_FModifierSpec_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("ModifierSpec"), sizeof(FModifierSpec), Get_Z_Construct_UScriptStruct_FModifierSpec_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ModifierSpec"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FModifierSpec>, EStructFlags(0x00000001));
			UProperty* NewProp_EvaluatedMagnitude = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("EvaluatedMagnitude"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(EvaluatedMagnitude, FModifierSpec), 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Holds evaluated magnitude from a GameplayEffect modifier"));
			MetaData->SetValue(NewProp_EvaluatedMagnitude, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_EvaluatedMagnitude, TEXT("ToolTip"), TEXT("In the event that the modifier spec requires custom magnitude calculations, this is the authoritative, last evaluated value of the magnitude"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FModifierSpec_CRC() { return 2236868494U; }
	UScriptStruct* Z_Construct_UScriptStruct_FInheritedTagContainer()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UScriptStruct_FInheritedTagContainer_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("InheritedTagContainer"), sizeof(FInheritedTagContainer), Get_Z_Construct_UScriptStruct_FInheritedTagContainer_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("InheritedTagContainer"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FInheritedTagContainer>, EStructFlags(0x00000201));
			UProperty* NewProp_Removed = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Removed"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Removed, FInheritedTagContainer), 0x0000000000012015, Z_Construct_UScriptStruct_FGameplayTagContainer());
			UProperty* NewProp_Added = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Added"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Added, FInheritedTagContainer), 0x0000000000012015, Z_Construct_UScriptStruct_FGameplayTagContainer());
			UProperty* NewProp_CombinedTags = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CombinedTags"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(CombinedTags, FInheritedTagContainer), 0x0000000000022015, Z_Construct_UScriptStruct_FGameplayTagContainer());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_Removed, TEXT("Category"), TEXT("Application"));
			MetaData->SetValue(NewProp_Removed, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_Removed, TEXT("ToolTip"), TEXT("Tags that should be removed if my parent had them"));
			MetaData->SetValue(NewProp_Added, TEXT("Category"), TEXT("Application"));
			MetaData->SetValue(NewProp_Added, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_Added, TEXT("ToolTip"), TEXT("Tags that I have in addition to my parent's tags"));
			MetaData->SetValue(NewProp_CombinedTags, TEXT("Category"), TEXT("Application"));
			MetaData->SetValue(NewProp_CombinedTags, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_CombinedTags, TEXT("ToolTip"), TEXT("Tags that I inherited and tags that I added minus tags that I removed"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FInheritedTagContainer_CRC() { return 2787813492U; }
	UScriptStruct* Z_Construct_UScriptStruct_FGameplayEffectCue()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UScriptStruct_FGameplayEffectCue_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("GameplayEffectCue"), sizeof(FGameplayEffectCue), Get_Z_Construct_UScriptStruct_FGameplayEffectCue_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GameplayEffectCue"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FGameplayEffectCue>, EStructFlags(0x00000001));
			UProperty* NewProp_GameplayCueTags = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("GameplayCueTags"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(GameplayCueTags, FGameplayEffectCue), 0x0000000000010001, Z_Construct_UScriptStruct_FGameplayTagContainer());
			UProperty* NewProp_MaxLevel = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MaxLevel"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MaxLevel, FGameplayEffectCue), 0x0000000000010001);
			UProperty* NewProp_MinLevel = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MinLevel"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MinLevel, FGameplayEffectCue), 0x0000000000010001);
			UProperty* NewProp_MagnitudeAttribute = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MagnitudeAttribute"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MagnitudeAttribute, FGameplayEffectCue), 0x0000000000010001, Z_Construct_UScriptStruct_FGameplayAttribute());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("FGameplayEffectCue\n    This is a cosmetic cue that can be tied to a UGameplayEffect.\n This is essentially a GameplayTag + a Min/Max level range that is used to map the level of a GameplayEffect to a normalized value used by the GameplayCue system."));
			MetaData->SetValue(NewProp_GameplayCueTags, TEXT("Categories"), TEXT("GameplayCue"));
			MetaData->SetValue(NewProp_GameplayCueTags, TEXT("Category"), TEXT("GameplayCue"));
			MetaData->SetValue(NewProp_GameplayCueTags, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_GameplayCueTags, TEXT("ToolTip"), TEXT("Tags passed to the gameplay cue handler when this cue is activated"));
			MetaData->SetValue(NewProp_MaxLevel, TEXT("Category"), TEXT("GameplayCue"));
			MetaData->SetValue(NewProp_MaxLevel, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_MaxLevel, TEXT("ToolTip"), TEXT("The maximum level that this Cue supports"));
			MetaData->SetValue(NewProp_MinLevel, TEXT("Category"), TEXT("GameplayCue"));
			MetaData->SetValue(NewProp_MinLevel, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_MinLevel, TEXT("ToolTip"), TEXT("The minimum level that this Cue supports"));
			MetaData->SetValue(NewProp_MagnitudeAttribute, TEXT("Category"), TEXT("GameplayCue"));
			MetaData->SetValue(NewProp_MagnitudeAttribute, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_MagnitudeAttribute, TEXT("ToolTip"), TEXT("The attribute to use as the source for cue magnitude. If none use level"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FGameplayEffectCue_CRC() { return 2283218914U; }
	UScriptStruct* Z_Construct_UScriptStruct_FGameplayModifierInfo()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UScriptStruct_FGameplayModifierInfo_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("GameplayModifierInfo"), sizeof(FGameplayModifierInfo), Get_Z_Construct_UScriptStruct_FGameplayModifierInfo_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GameplayModifierInfo"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FGameplayModifierInfo>, EStructFlags(0x00000201));
			UProperty* NewProp_TargetTags = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TargetTags"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TargetTags, FGameplayModifierInfo), 0x0000000000010001, Z_Construct_UScriptStruct_FGameplayTagRequirements());
			UProperty* NewProp_SourceTags = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SourceTags"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SourceTags, FGameplayModifierInfo), 0x0000000000010001, Z_Construct_UScriptStruct_FGameplayTagRequirements());
			UProperty* NewProp_ModifierMagnitude = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ModifierMagnitude"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ModifierMagnitude, FGameplayModifierInfo), 0x0000000000010001, Z_Construct_UScriptStruct_FGameplayEffectModifierMagnitude());
			UProperty* NewProp_Magnitude = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Magnitude"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Magnitude, FGameplayModifierInfo), 0x0000000000000000, Z_Construct_UScriptStruct_FScalableFloat());
			UProperty* NewProp_ModifierOp = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ModifierOp"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(ModifierOp, FGameplayModifierInfo), 0x0000000000010001, Z_Construct_UEnum_GameplayAbilities_EGameplayModOp());
			UProperty* NewProp_Attribute = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Attribute"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Attribute, FGameplayModifierInfo), 0x0000000000010001, Z_Construct_UScriptStruct_FGameplayAttribute());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("FGameplayModifierInfo\n    Tells us \"Who/What we\" modify\n    Does not tell us how exactly"));
			MetaData->SetValue(NewProp_TargetTags, TEXT("Category"), TEXT("GameplayModifier"));
			MetaData->SetValue(NewProp_TargetTags, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_SourceTags, TEXT("Category"), TEXT("GameplayModifier"));
			MetaData->SetValue(NewProp_SourceTags, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_ModifierMagnitude, TEXT("Category"), TEXT("GameplayModifier"));
			MetaData->SetValue(NewProp_ModifierMagnitude, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_ModifierMagnitude, TEXT("ToolTip"), TEXT("Magnitude of the modifier"));
			MetaData->SetValue(NewProp_Magnitude, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_Magnitude, TEXT("ToolTip"), TEXT("Now \"deprecated,\" though being handled in a custom manner to avoid engine version bump."));
			MetaData->SetValue(NewProp_ModifierOp, TEXT("Category"), TEXT("GameplayModifier"));
			MetaData->SetValue(NewProp_ModifierOp, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_ModifierOp, TEXT("ToolTip"), TEXT("The numeric operation of this modifier: Override, Add, Multiply, etc"));
			MetaData->SetValue(NewProp_Attribute, TEXT("Category"), TEXT("GameplayModifier"));
			MetaData->SetValue(NewProp_Attribute, TEXT("FilterMetaTag"), TEXT("HideFromModifiers"));
			MetaData->SetValue(NewProp_Attribute, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_Attribute, TEXT("ToolTip"), TEXT("The Attribute we modify or the GE we modify modifies."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FGameplayModifierInfo_CRC() { return 1552028684U; }
	UScriptStruct* Z_Construct_UScriptStruct_FGameplayEffectExecutionDefinition()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UScriptStruct_FGameplayEffectExecutionDefinition_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("GameplayEffectExecutionDefinition"), sizeof(FGameplayEffectExecutionDefinition), Get_Z_Construct_UScriptStruct_FGameplayEffectExecutionDefinition_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GameplayEffectExecutionDefinition"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FGameplayEffectExecutionDefinition>, EStructFlags(0x00000201));
			UProperty* NewProp_ConditionalGameplayEffectClasses = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ConditionalGameplayEffectClasses"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ConditionalGameplayEffectClasses, FGameplayEffectExecutionDefinition), 0x0004000000010001);
			UProperty* NewProp_ConditionalGameplayEffectClasses_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ConditionalGameplayEffectClasses, TEXT("ConditionalGameplayEffectClasses"), RF_Public|RF_Transient|RF_Native) UClassProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0004000000000000, Z_Construct_UClass_UGameplayEffect_NoRegister());
			UProperty* NewProp_CalculationModifiers = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CalculationModifiers"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(CalculationModifiers, FGameplayEffectExecutionDefinition), 0x0000000000010001);
			UProperty* NewProp_CalculationModifiers_Inner = new(EC_InternalUseOnlyConstructor, NewProp_CalculationModifiers, TEXT("CalculationModifiers"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FGameplayEffectExecutionScopedModifierInfo());
			UProperty* NewProp_PassedInTags = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PassedInTags"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PassedInTags, FGameplayEffectExecutionDefinition), 0x0000000000010001, Z_Construct_UScriptStruct_FGameplayTagContainer());
			UProperty* NewProp_CalculationClass = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CalculationClass"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(CalculationClass, FGameplayEffectExecutionDefinition), 0x0004000000010001, Z_Construct_UClass_UGameplayEffectExecutionCalculation_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Struct representing the definition of a custom execution for a gameplay effect.\nCustom executions run special logic from an outside class each time the gameplay effect executes."));
			MetaData->SetValue(NewProp_ConditionalGameplayEffectClasses, TEXT("Category"), TEXT("Execution"));
			MetaData->SetValue(NewProp_ConditionalGameplayEffectClasses, TEXT("DisplayName"), TEXT("Conditional Gameplay Effects"));
			MetaData->SetValue(NewProp_ConditionalGameplayEffectClasses, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_ConditionalGameplayEffectClasses, TEXT("ToolTip"), TEXT("Other Gameplay Effects that will be applied to the target of this execution if the execution is successful"));
			MetaData->SetValue(NewProp_CalculationModifiers, TEXT("Category"), TEXT("Execution"));
			MetaData->SetValue(NewProp_CalculationModifiers, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_CalculationModifiers, TEXT("ToolTip"), TEXT("Modifiers that are applied \"in place\" during the execution calculation"));
			MetaData->SetValue(NewProp_PassedInTags, TEXT("Category"), TEXT("Execution"));
			MetaData->SetValue(NewProp_PassedInTags, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_PassedInTags, TEXT("ToolTip"), TEXT("These tags are passed into the execution as is, and may be used to do conditional logic"));
			MetaData->SetValue(NewProp_CalculationClass, TEXT("Category"), TEXT("Execution"));
			MetaData->SetValue(NewProp_CalculationClass, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_CalculationClass, TEXT("ToolTip"), TEXT("Custom execution calculation class to run when the gameplay effect executes"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FGameplayEffectExecutionDefinition_CRC() { return 1456921060U; }
	UScriptStruct* Z_Construct_UScriptStruct_FGameplayEffectExecutionScopedModifierInfo()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UScriptStruct_FGameplayEffectExecutionScopedModifierInfo_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("GameplayEffectExecutionScopedModifierInfo"), sizeof(FGameplayEffectExecutionScopedModifierInfo), Get_Z_Construct_UScriptStruct_FGameplayEffectExecutionScopedModifierInfo_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GameplayEffectExecutionScopedModifierInfo"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FGameplayEffectExecutionScopedModifierInfo>, EStructFlags(0x00000001));
			UProperty* NewProp_TargetTags = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TargetTags"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TargetTags, FGameplayEffectExecutionScopedModifierInfo), 0x0000000000010001, Z_Construct_UScriptStruct_FGameplayTagRequirements());
			UProperty* NewProp_SourceTags = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SourceTags"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SourceTags, FGameplayEffectExecutionScopedModifierInfo), 0x0000000000010001, Z_Construct_UScriptStruct_FGameplayTagRequirements());
			UProperty* NewProp_ModifierMagnitude = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ModifierMagnitude"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ModifierMagnitude, FGameplayEffectExecutionScopedModifierInfo), 0x0000000000010001, Z_Construct_UScriptStruct_FGameplayEffectModifierMagnitude());
			UProperty* NewProp_ModifierOp = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ModifierOp"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(ModifierOp, FGameplayEffectExecutionScopedModifierInfo), 0x0000000000010001, Z_Construct_UEnum_GameplayAbilities_EGameplayModOp());
			UProperty* NewProp_CapturedAttribute = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CapturedAttribute"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(CapturedAttribute, FGameplayEffectExecutionScopedModifierInfo), 0x0000000000030001, Z_Construct_UScriptStruct_FGameplayEffectAttributeCaptureDefinition());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Struct representing modifier info used exclusively for \"scoped\" executions that happen instantaneously. These are\nfolded into a calculation only for the extent of the calculation and never permanently added to an aggregator."));
			MetaData->SetValue(NewProp_TargetTags, TEXT("Category"), TEXT("Execution"));
			MetaData->SetValue(NewProp_TargetTags, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_TargetTags, TEXT("ToolTip"), TEXT("Target tag requirements for the modifier to apply"));
			MetaData->SetValue(NewProp_SourceTags, TEXT("Category"), TEXT("Execution"));
			MetaData->SetValue(NewProp_SourceTags, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_SourceTags, TEXT("ToolTip"), TEXT("Source tag requirements for the modifier to apply"));
			MetaData->SetValue(NewProp_ModifierMagnitude, TEXT("Category"), TEXT("Execution"));
			MetaData->SetValue(NewProp_ModifierMagnitude, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_ModifierMagnitude, TEXT("ToolTip"), TEXT("Magnitude of the scoped modifier"));
			MetaData->SetValue(NewProp_ModifierOp, TEXT("Category"), TEXT("Execution"));
			MetaData->SetValue(NewProp_ModifierOp, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_ModifierOp, TEXT("ToolTip"), TEXT("Modifier operation to perform"));
			MetaData->SetValue(NewProp_CapturedAttribute, TEXT("Category"), TEXT("Execution"));
			MetaData->SetValue(NewProp_CapturedAttribute, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_CapturedAttribute, TEXT("ToolTip"), TEXT("Backing attribute that the scoped modifier is for"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FGameplayEffectExecutionScopedModifierInfo_CRC() { return 2363576678U; }
	UScriptStruct* Z_Construct_UScriptStruct_FGameplayEffectModifierMagnitude()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UScriptStruct_FGameplayEffectModifierMagnitude_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("GameplayEffectModifierMagnitude"), sizeof(FGameplayEffectModifierMagnitude), Get_Z_Construct_UScriptStruct_FGameplayEffectModifierMagnitude_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GameplayEffectModifierMagnitude"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FGameplayEffectModifierMagnitude>, EStructFlags(0x00000201));
			UProperty* NewProp_SetByCallerMagnitude = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SetByCallerMagnitude"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SetByCallerMagnitude, FGameplayEffectModifierMagnitude), 0x0000080000010001, Z_Construct_UScriptStruct_FSetByCallerFloat());
			UProperty* NewProp_CustomMagnitude = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CustomMagnitude"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(CustomMagnitude, FGameplayEffectModifierMagnitude), 0x0000080000010001, Z_Construct_UScriptStruct_FCustomCalculationBasedFloat());
			UProperty* NewProp_AttributeBasedMagnitude = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("AttributeBasedMagnitude"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(AttributeBasedMagnitude, FGameplayEffectModifierMagnitude), 0x0000080000010001, Z_Construct_UScriptStruct_FAttributeBasedFloat());
			UProperty* NewProp_ScalableFloatMagnitude = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ScalableFloatMagnitude"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ScalableFloatMagnitude, FGameplayEffectModifierMagnitude), 0x0000080000010001, Z_Construct_UScriptStruct_FScalableFloat());
			UProperty* NewProp_MagnitudeCalculationType = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MagnitudeCalculationType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(MagnitudeCalculationType, FGameplayEffectModifierMagnitude), 0x0000080000010001, Z_Construct_UEnum_GameplayAbilities_EGameplayEffectMagnitudeCalculation());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Struct representing the magnitude of a gameplay effect modifier, potentially calculated in numerous different ways"));
			MetaData->SetValue(NewProp_SetByCallerMagnitude, TEXT("Category"), TEXT("Magnitude"));
			MetaData->SetValue(NewProp_SetByCallerMagnitude, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_SetByCallerMagnitude, TEXT("ToolTip"), TEXT("Magnitude value represented by a SetByCaller magnitude"));
			MetaData->SetValue(NewProp_CustomMagnitude, TEXT("Category"), TEXT("Magnitude"));
			MetaData->SetValue(NewProp_CustomMagnitude, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_CustomMagnitude, TEXT("ToolTip"), TEXT("Magnitude value represented by a custom calculation class"));
			MetaData->SetValue(NewProp_AttributeBasedMagnitude, TEXT("Category"), TEXT("Magnitude"));
			MetaData->SetValue(NewProp_AttributeBasedMagnitude, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_AttributeBasedMagnitude, TEXT("ToolTip"), TEXT("Magnitude value represented by an attribute-based float\n      (Coefficient * (PreMultiplyAdditiveValue + [Eval'd Attribute Value According to Policy])) + PostMultiplyAdditiveValue"));
			MetaData->SetValue(NewProp_ScalableFloatMagnitude, TEXT("Category"), TEXT("Magnitude"));
			MetaData->SetValue(NewProp_ScalableFloatMagnitude, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_ScalableFloatMagnitude, TEXT("ToolTip"), TEXT("Magnitude value represented by a scalable float"));
			MetaData->SetValue(NewProp_MagnitudeCalculationType, TEXT("Category"), TEXT("Magnitude"));
			MetaData->SetValue(NewProp_MagnitudeCalculationType, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_MagnitudeCalculationType, TEXT("ToolTip"), TEXT("Type of calculation to perform to derive the magnitude"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FGameplayEffectModifierMagnitude_CRC() { return 2225341498U; }
	UScriptStruct* Z_Construct_UScriptStruct_FSetByCallerFloat()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UScriptStruct_FSetByCallerFloat_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("SetByCallerFloat"), sizeof(FSetByCallerFloat), Get_Z_Construct_UScriptStruct_FSetByCallerFloat_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetByCallerFloat"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FSetByCallerFloat>, EStructFlags(0x00000001));
			UProperty* NewProp_DataName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DataName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(DataName, FSetByCallerFloat), 0x0000000000010001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Struct for holding SetBytCaller data"));
			MetaData->SetValue(NewProp_DataName, TEXT("Category"), TEXT("SetByCaller"));
			MetaData->SetValue(NewProp_DataName, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_DataName, TEXT("ToolTip"), TEXT("The Name the caller (code or blueprint) will use to set this magnitude by."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FSetByCallerFloat_CRC() { return 4156875999U; }
	UScriptStruct* Z_Construct_UScriptStruct_FCustomCalculationBasedFloat()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UScriptStruct_FCustomCalculationBasedFloat_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("CustomCalculationBasedFloat"), sizeof(FCustomCalculationBasedFloat), Get_Z_Construct_UScriptStruct_FCustomCalculationBasedFloat_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CustomCalculationBasedFloat"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FCustomCalculationBasedFloat>, EStructFlags(0x00000001));
			UProperty* NewProp_PostMultiplyAdditiveValue = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PostMultiplyAdditiveValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PostMultiplyAdditiveValue, FCustomCalculationBasedFloat), 0x0000000000010001, Z_Construct_UScriptStruct_FScalableFloat());
			UProperty* NewProp_PreMultiplyAdditiveValue = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PreMultiplyAdditiveValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PreMultiplyAdditiveValue, FCustomCalculationBasedFloat), 0x0000000000010001, Z_Construct_UScriptStruct_FScalableFloat());
			UProperty* NewProp_Coefficient = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Coefficient"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Coefficient, FCustomCalculationBasedFloat), 0x0000000000010001, Z_Construct_UScriptStruct_FScalableFloat());
			UProperty* NewProp_CalculationClassMagnitude = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CalculationClassMagnitude"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(CalculationClassMagnitude, FCustomCalculationBasedFloat), 0x0004000000010001, Z_Construct_UClass_UGameplayModMagnitudeCalculation_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Structure to encapsulte magnitude that are calculated via custom calculation"));
			MetaData->SetValue(NewProp_PostMultiplyAdditiveValue, TEXT("Category"), TEXT("AttributeFloat"));
			MetaData->SetValue(NewProp_PostMultiplyAdditiveValue, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_PostMultiplyAdditiveValue, TEXT("ToolTip"), TEXT("Additive value to the attribute calculation, added in after the coefficient applies"));
			MetaData->SetValue(NewProp_PreMultiplyAdditiveValue, TEXT("Category"), TEXT("AttributeFloat"));
			MetaData->SetValue(NewProp_PreMultiplyAdditiveValue, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_PreMultiplyAdditiveValue, TEXT("ToolTip"), TEXT("Additive value to the attribute calculation, added in before the coefficient applies"));
			MetaData->SetValue(NewProp_Coefficient, TEXT("Category"), TEXT("CustomCalculation"));
			MetaData->SetValue(NewProp_Coefficient, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_Coefficient, TEXT("ToolTip"), TEXT("Coefficient to the custom calculation"));
			MetaData->SetValue(NewProp_CalculationClassMagnitude, TEXT("Category"), TEXT("CustomCalculation"));
			MetaData->SetValue(NewProp_CalculationClassMagnitude, TEXT("DisplayName"), TEXT("Calculation Class"));
			MetaData->SetValue(NewProp_CalculationClassMagnitude, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FCustomCalculationBasedFloat_CRC() { return 2082255509U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAttributeBasedFloat()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UScriptStruct_FAttributeBasedFloat_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("AttributeBasedFloat"), sizeof(FAttributeBasedFloat), Get_Z_Construct_UScriptStruct_FAttributeBasedFloat_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AttributeBasedFloat"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FAttributeBasedFloat>, EStructFlags(0x00000001));
			UProperty* NewProp_TargetTagFilter = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TargetTagFilter"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TargetTagFilter, FAttributeBasedFloat), 0x0000000000010001, Z_Construct_UScriptStruct_FGameplayTagContainer());
			UProperty* NewProp_SourceTagFilter = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SourceTagFilter"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SourceTagFilter, FAttributeBasedFloat), 0x0000000000010001, Z_Construct_UScriptStruct_FGameplayTagContainer());
			UProperty* NewProp_AttributeCalculationType = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("AttributeCalculationType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(AttributeCalculationType, FAttributeBasedFloat), 0x0000000000010001, Z_Construct_UEnum_GameplayAbilities_EAttributeBasedFloatCalculationType());
			UProperty* NewProp_AttributeCurve = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("AttributeCurve"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(AttributeCurve, FAttributeBasedFloat), 0x0000000000010001, Z_Construct_UScriptStruct_FCurveTableRowHandle());
			UProperty* NewProp_BackingAttribute = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BackingAttribute"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(BackingAttribute, FAttributeBasedFloat), 0x0000000000010001, Z_Construct_UScriptStruct_FGameplayEffectAttributeCaptureDefinition());
			UProperty* NewProp_PostMultiplyAdditiveValue = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PostMultiplyAdditiveValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PostMultiplyAdditiveValue, FAttributeBasedFloat), 0x0000000000010001, Z_Construct_UScriptStruct_FScalableFloat());
			UProperty* NewProp_PreMultiplyAdditiveValue = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PreMultiplyAdditiveValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PreMultiplyAdditiveValue, FAttributeBasedFloat), 0x0000000000010001, Z_Construct_UScriptStruct_FScalableFloat());
			UProperty* NewProp_Coefficient = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Coefficient"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Coefficient, FAttributeBasedFloat), 0x0000000000010001, Z_Construct_UScriptStruct_FScalableFloat());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Struct representing a float whose magnitude is dictated by a backing attribute and a calculation policy, follows basic form of:\n(Coefficient * (PreMultiplyAdditiveValue + [Eval'd Attribute Value According to Policy])) + PostMultiplyAdditiveValue"));
			MetaData->SetValue(NewProp_TargetTagFilter, TEXT("Category"), TEXT("AttributeFloat"));
			MetaData->SetValue(NewProp_TargetTagFilter, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_TargetTagFilter, TEXT("ToolTip"), TEXT("Filter to use on target tags; If specified, only modifiers applied with all of these tags will factor into the calculation"));
			MetaData->SetValue(NewProp_SourceTagFilter, TEXT("Category"), TEXT("AttributeFloat"));
			MetaData->SetValue(NewProp_SourceTagFilter, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_SourceTagFilter, TEXT("ToolTip"), TEXT("Filter to use on source tags; If specified, only modifiers applied with all of these tags will factor into the calculation"));
			MetaData->SetValue(NewProp_AttributeCalculationType, TEXT("Category"), TEXT("AttributeFloat"));
			MetaData->SetValue(NewProp_AttributeCalculationType, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_AttributeCalculationType, TEXT("ToolTip"), TEXT("Calculation policy in regards to the attribute"));
			MetaData->SetValue(NewProp_AttributeCurve, TEXT("Category"), TEXT("AttributeFloat"));
			MetaData->SetValue(NewProp_AttributeCurve, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_AttributeCurve, TEXT("ToolTip"), TEXT("If a curve table entry is specified, the attribute will be used as a lookup into the curve instead of using the attribute directly."));
			MetaData->SetValue(NewProp_BackingAttribute, TEXT("Category"), TEXT("AttributeFloat"));
			MetaData->SetValue(NewProp_BackingAttribute, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_BackingAttribute, TEXT("ToolTip"), TEXT("Attribute backing the calculation"));
			MetaData->SetValue(NewProp_PostMultiplyAdditiveValue, TEXT("Category"), TEXT("AttributeFloat"));
			MetaData->SetValue(NewProp_PostMultiplyAdditiveValue, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_PostMultiplyAdditiveValue, TEXT("ToolTip"), TEXT("Additive value to the attribute calculation, added in after the coefficient applies"));
			MetaData->SetValue(NewProp_PreMultiplyAdditiveValue, TEXT("Category"), TEXT("AttributeFloat"));
			MetaData->SetValue(NewProp_PreMultiplyAdditiveValue, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_PreMultiplyAdditiveValue, TEXT("ToolTip"), TEXT("Additive value to the attribute calculation, added in before the coefficient applies"));
			MetaData->SetValue(NewProp_Coefficient, TEXT("Category"), TEXT("AttributeFloat"));
			MetaData->SetValue(NewProp_Coefficient, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
			MetaData->SetValue(NewProp_Coefficient, TEXT("ToolTip"), TEXT("Coefficient to the attribute calculation"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAttributeBasedFloat_CRC() { return 3822263508U; }
	UClass* Z_Construct_UClass_UGameplayEffect_NoRegister()
	{
		return UGameplayEffect::StaticClass();
	}
	UClass* Z_Construct_UClass_UGameplayEffect()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_GameplayAbilities();
			OuterClass = UGameplayEffect::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_GrantedAbilities = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GrantedAbilities"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(GrantedAbilities, UGameplayEffect), 0x0000000000010015);
				UProperty* NewProp_GrantedAbilities_Inner = new(EC_InternalUseOnlyConstructor, NewProp_GrantedAbilities, TEXT("GrantedAbilities"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FGameplayAbilitySpecDef());
				UProperty* NewProp_StackPeriodResetPolicy = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StackPeriodResetPolicy"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(StackPeriodResetPolicy, UGameplayEffect), 0x0000000000010015, Z_Construct_UEnum_GameplayAbilities_EGameplayEffectStackingPeriodPolicy());
				UProperty* NewProp_StackDurationRefreshPolicy = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StackDurationRefreshPolicy"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(StackDurationRefreshPolicy, UGameplayEffect), 0x0000000000010015, Z_Construct_UEnum_GameplayAbilities_EGameplayEffectStackingDurationPolicy());
				UProperty* NewProp_StackLimitCount = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StackLimitCount"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(StackLimitCount, UGameplayEffect), 0x0000000000010015);
				UProperty* NewProp_StackingType = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StackingType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(StackingType, UGameplayEffect), 0x0000000000010015, Z_Construct_UEnum_GameplayAbilities_EGameplayEffectStackingType());
				UProperty* NewProp_GrantedApplicationImmunityTags = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GrantedApplicationImmunityTags"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(GrantedApplicationImmunityTags, UGameplayEffect), 0x0000000000010015, Z_Construct_UScriptStruct_FGameplayTagRequirements());
				UProperty* NewProp_ClearTagsContainer = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ClearTagsContainer"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ClearTagsContainer, UGameplayEffect), 0x0000000000010015, Z_Construct_UScriptStruct_FGameplayTagContainer());
				UProperty* NewProp_RemoveGameplayEffectsWithTags = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RemoveGameplayEffectsWithTags"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(RemoveGameplayEffectsWithTags, UGameplayEffect), 0x0000000000010015, Z_Construct_UScriptStruct_FInheritedTagContainer());
				UProperty* NewProp_ApplicationTagRequirements = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ApplicationTagRequirements"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ApplicationTagRequirements, UGameplayEffect), 0x0000000000010015, Z_Construct_UScriptStruct_FGameplayTagRequirements());
				UProperty* NewProp_OngoingTagRequirements = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OngoingTagRequirements"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(OngoingTagRequirements, UGameplayEffect), 0x0000000000010015, Z_Construct_UScriptStruct_FGameplayTagRequirements());
				UProperty* NewProp_OwnedTagsContainer = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OwnedTagsContainer"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(OwnedTagsContainer, UGameplayEffect), 0x0000000000010015, Z_Construct_UScriptStruct_FGameplayTagContainer());
				UProperty* NewProp_InheritableOwnedTagsContainer = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InheritableOwnedTagsContainer"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InheritableOwnedTagsContainer, UGameplayEffect), 0x0000000000010015, Z_Construct_UScriptStruct_FInheritedTagContainer());
				UProperty* NewProp_GameplayEffectTags = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GameplayEffectTags"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(GameplayEffectTags, UGameplayEffect), 0x0000000000010015, Z_Construct_UScriptStruct_FGameplayTagContainer());
				UProperty* NewProp_InheritableGameplayEffectTags = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InheritableGameplayEffectTags"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InheritableGameplayEffectTags, UGameplayEffect), 0x0000000000010015, Z_Construct_UScriptStruct_FInheritedTagContainer());
				UProperty* NewProp_UIData = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UIData"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(UIData, UGameplayEffect), 0x000200000009001d, Z_Construct_UClass_UGameplayEffectUIData_NoRegister());
				UProperty* NewProp_GameplayCues = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GameplayCues"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(GameplayCues, UGameplayEffect), 0x0000000000010015);
				UProperty* NewProp_GameplayCues_Inner = new(EC_InternalUseOnlyConstructor, NewProp_GameplayCues, TEXT("GameplayCues"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FGameplayEffectCue());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bRequireModifierSuccessToTriggerCues, UGameplayEffect, bool);
				UProperty* NewProp_bRequireModifierSuccessToTriggerCues = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bRequireModifierSuccessToTriggerCues"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bRequireModifierSuccessToTriggerCues, UGameplayEffect), 0x0000000000010015, CPP_BOOL_PROPERTY_BITMASK(bRequireModifierSuccessToTriggerCues, UGameplayEffect), sizeof(bool), true);
				UProperty* NewProp_RoutineExpirationEffectClasses = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RoutineExpirationEffectClasses"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(RoutineExpirationEffectClasses, UGameplayEffect), 0x0004000000010015);
				UProperty* NewProp_RoutineExpirationEffectClasses_Inner = new(EC_InternalUseOnlyConstructor, NewProp_RoutineExpirationEffectClasses, TEXT("RoutineExpirationEffectClasses"), RF_Public|RF_Transient|RF_Native) UClassProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0004000000000000, Z_Construct_UClass_UGameplayEffect_NoRegister());
				UProperty* NewProp_PrematureExpirationEffectClasses = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PrematureExpirationEffectClasses"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(PrematureExpirationEffectClasses, UGameplayEffect), 0x0004000000010015);
				UProperty* NewProp_PrematureExpirationEffectClasses_Inner = new(EC_InternalUseOnlyConstructor, NewProp_PrematureExpirationEffectClasses, TEXT("PrematureExpirationEffectClasses"), RF_Public|RF_Transient|RF_Native) UClassProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0004000000000000, Z_Construct_UClass_UGameplayEffect_NoRegister());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bClearStackOnOverflow, UGameplayEffect, bool);
				UProperty* NewProp_bClearStackOnOverflow = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bClearStackOnOverflow"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bClearStackOnOverflow, UGameplayEffect), 0x0000000000010015, CPP_BOOL_PROPERTY_BITMASK(bClearStackOnOverflow, UGameplayEffect), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDenyOverflowApplication, UGameplayEffect, bool);
				UProperty* NewProp_bDenyOverflowApplication = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bDenyOverflowApplication"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDenyOverflowApplication, UGameplayEffect), 0x0000000000010015, CPP_BOOL_PROPERTY_BITMASK(bDenyOverflowApplication, UGameplayEffect), sizeof(bool), true);
				UProperty* NewProp_OverflowEffects = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OverflowEffects"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(OverflowEffects, UGameplayEffect), 0x0004000000010015);
				UProperty* NewProp_OverflowEffects_Inner = new(EC_InternalUseOnlyConstructor, NewProp_OverflowEffects, TEXT("OverflowEffects"), RF_Public|RF_Transient|RF_Native) UClassProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0004000000000000, Z_Construct_UClass_UGameplayEffect_NoRegister());
				UProperty* NewProp_TargetEffects = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TargetEffects"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(TargetEffects, UGameplayEffect), 0x0000000000030001);
				UProperty* NewProp_TargetEffects_Inner = new(EC_InternalUseOnlyConstructor, NewProp_TargetEffects, TEXT("TargetEffects"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000020000, Z_Construct_UClass_UGameplayEffect_NoRegister());
				UProperty* NewProp_TargetEffectClasses = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TargetEffectClasses"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(TargetEffectClasses, UGameplayEffect), 0x0004000000010015);
				UProperty* NewProp_TargetEffectClasses_Inner = new(EC_InternalUseOnlyConstructor, NewProp_TargetEffectClasses, TEXT("TargetEffectClasses"), RF_Public|RF_Transient|RF_Native) UClassProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0004000000000000, Z_Construct_UClass_UGameplayEffect_NoRegister());
				UProperty* NewProp_ChanceToApplyToTarget = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ChanceToApplyToTarget"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ChanceToApplyToTarget, UGameplayEffect), 0x0000000000010001, Z_Construct_UScriptStruct_FScalableFloat());
				UProperty* NewProp_Executions = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Executions"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Executions, UGameplayEffect), 0x0000000000010015);
				UProperty* NewProp_Executions_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Executions, TEXT("Executions"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FGameplayEffectExecutionDefinition());
				UProperty* NewProp_Modifiers = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Modifiers"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Modifiers, UGameplayEffect), 0x0000000000010015);
				UProperty* NewProp_Modifiers_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Modifiers, TEXT("Modifiers"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FGameplayModifierInfo());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bExecutePeriodicEffectOnApplication, UGameplayEffect, bool);
				UProperty* NewProp_bExecutePeriodicEffectOnApplication = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bExecutePeriodicEffectOnApplication"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bExecutePeriodicEffectOnApplication, UGameplayEffect), 0x0000000000010015, CPP_BOOL_PROPERTY_BITMASK(bExecutePeriodicEffectOnApplication, UGameplayEffect), sizeof(bool), true);
				UProperty* NewProp_Period = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Period"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Period, UGameplayEffect), 0x0000000000010015, Z_Construct_UScriptStruct_FScalableFloat());
				UProperty* NewProp_DurationMagnitude = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DurationMagnitude"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DurationMagnitude, UGameplayEffect), 0x0000000000010001, Z_Construct_UScriptStruct_FGameplayEffectModifierMagnitude());
				UProperty* NewProp_DurationPolicy = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DurationPolicy"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(DurationPolicy, UGameplayEffect), 0x0000000000010001, Z_Construct_UEnum_GameplayAbilities_EGameplayEffectDurationType());
#if WITH_EDITORONLY_DATA
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(ShowAllProperties, UGameplayEffect, bool);
				UProperty* NewProp_ShowAllProperties = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ShowAllProperties"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ShowAllProperties, UGameplayEffect), 0x0000000800000000, CPP_BOOL_PROPERTY_BITMASK(ShowAllProperties, UGameplayEffect), sizeof(bool), true);
				UProperty* NewProp_Template = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Template"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Template, UGameplayEffect), 0x0000000800000000, Z_Construct_UClass_UGameplayEffectTemplate_NoRegister());
#endif // WITH_EDITORONLY_DATA
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->Interfaces.Add(FImplementedInterface(Z_Construct_UClass_UGameplayTagAssetInterface_NoRegister(), VTABLE_OFFSET(UGameplayEffect, IGameplayTagAssetInterface), false ));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("GameplayEffect.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
				MetaData->SetValue(OuterClass, TEXT("ShortTooltip"), TEXT("A GameplayEffect modifies attributes and tags."));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("UGameplayEffect\n    The GameplayEffect definition. This is the data asset defined in the editor that drives everything.\n This is only blueprintable to allow for templating gameplay effects. Gameplay effects should NOT contain blueprint graphs."));
				MetaData->SetValue(NewProp_GrantedAbilities, TEXT("Category"), TEXT("Granted Abilities"));
				MetaData->SetValue(NewProp_GrantedAbilities, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
				MetaData->SetValue(NewProp_GrantedAbilities, TEXT("ToolTip"), TEXT("Granted abilities"));
				MetaData->SetValue(NewProp_StackPeriodResetPolicy, TEXT("Category"), TEXT("Stacking"));
				MetaData->SetValue(NewProp_StackPeriodResetPolicy, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
				MetaData->SetValue(NewProp_StackPeriodResetPolicy, TEXT("ToolTip"), TEXT("Policy for how the effect period should be reset (or not) while stacking"));
				MetaData->SetValue(NewProp_StackDurationRefreshPolicy, TEXT("Category"), TEXT("Stacking"));
				MetaData->SetValue(NewProp_StackDurationRefreshPolicy, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
				MetaData->SetValue(NewProp_StackDurationRefreshPolicy, TEXT("ToolTip"), TEXT("Policy for how the effect duration should be refreshed while stacking"));
				MetaData->SetValue(NewProp_StackLimitCount, TEXT("Category"), TEXT("Stacking"));
				MetaData->SetValue(NewProp_StackLimitCount, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
				MetaData->SetValue(NewProp_StackLimitCount, TEXT("ToolTip"), TEXT("Stack limit for StackingType"));
				MetaData->SetValue(NewProp_StackingType, TEXT("Category"), TEXT("Stacking"));
				MetaData->SetValue(NewProp_StackingType, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
				MetaData->SetValue(NewProp_StackingType, TEXT("ToolTip"), TEXT("How this GameplayEffect stacks with other instances of this same GameplayEffect"));
				MetaData->SetValue(NewProp_GrantedApplicationImmunityTags, TEXT("Category"), TEXT("Tags"));
				MetaData->SetValue(NewProp_GrantedApplicationImmunityTags, TEXT("DisplayName"), TEXT("GrantedApplicationImmunityTags"));
				MetaData->SetValue(NewProp_GrantedApplicationImmunityTags, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
				MetaData->SetValue(NewProp_GrantedApplicationImmunityTags, TEXT("ToolTip"), TEXT("Grants the owner immunity from these source tags."));
				MetaData->SetValue(NewProp_ClearTagsContainer, TEXT("Category"), TEXT("Deprecated"));
				MetaData->SetValue(NewProp_ClearTagsContainer, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
				MetaData->SetValue(NewProp_ClearTagsContainer, TEXT("ToolTip"), TEXT("Deprecated. Use RemoveGameplayEffectsWithTags instead"));
				MetaData->SetValue(NewProp_RemoveGameplayEffectsWithTags, TEXT("Category"), TEXT("Tags"));
				MetaData->SetValue(NewProp_RemoveGameplayEffectsWithTags, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
				MetaData->SetValue(NewProp_RemoveGameplayEffectsWithTags, TEXT("ToolTip"), TEXT("GameplayEffects that *have* tags in this container will be cleared upon effect application."));
				MetaData->SetValue(NewProp_ApplicationTagRequirements, TEXT("Category"), TEXT("Tags"));
				MetaData->SetValue(NewProp_ApplicationTagRequirements, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
				MetaData->SetValue(NewProp_ApplicationTagRequirements, TEXT("ToolTip"), TEXT("Tag requirements for this GameplayEffect to be applied to a target. This is pass/fail at the time of application. If fail, this GE fails to apply."));
				MetaData->SetValue(NewProp_OngoingTagRequirements, TEXT("Category"), TEXT("Tags"));
				MetaData->SetValue(NewProp_OngoingTagRequirements, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
				MetaData->SetValue(NewProp_OngoingTagRequirements, TEXT("ToolTip"), TEXT("Once Applied, these tags requirements are used to determined if the GameplayEffect is \"on\" or \"off\". A GameplayEffect can be off and do nothing, but still applied."));
				MetaData->SetValue(NewProp_OwnedTagsContainer, TEXT("Category"), TEXT("Deprecated"));
				MetaData->SetValue(NewProp_OwnedTagsContainer, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
				MetaData->SetValue(NewProp_OwnedTagsContainer, TEXT("ToolTip"), TEXT("\"These tags are applied to the actor I am applied to\""));
				MetaData->SetValue(NewProp_InheritableOwnedTagsContainer, TEXT("Category"), TEXT("Tags"));
				MetaData->SetValue(NewProp_InheritableOwnedTagsContainer, TEXT("DisplayName"), TEXT("GrantedTags"));
				MetaData->SetValue(NewProp_InheritableOwnedTagsContainer, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
				MetaData->SetValue(NewProp_InheritableOwnedTagsContainer, TEXT("ToolTip"), TEXT("\"These tags are applied to the actor I am applied to\""));
				MetaData->SetValue(NewProp_GameplayEffectTags, TEXT("Category"), TEXT("Deprecated"));
				MetaData->SetValue(NewProp_GameplayEffectTags, TEXT("DisplayName"), TEXT("GameplayEffectAssetTag"));
				MetaData->SetValue(NewProp_GameplayEffectTags, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
				MetaData->SetValue(NewProp_GameplayEffectTags, TEXT("ToolTip"), TEXT("The GameplayEffect's Tags: tags the the GE *has* and DOES NOT give to the actor."));
				MetaData->SetValue(NewProp_InheritableGameplayEffectTags, TEXT("Category"), TEXT("Tags"));
				MetaData->SetValue(NewProp_InheritableGameplayEffectTags, TEXT("DisplayName"), TEXT("GameplayEffectAssetTag"));
				MetaData->SetValue(NewProp_InheritableGameplayEffectTags, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
				MetaData->SetValue(NewProp_InheritableGameplayEffectTags, TEXT("ToolTip"), TEXT("The GameplayEffect's Tags: tags the the GE *has* and DOES NOT give to the actor."));
				MetaData->SetValue(NewProp_UIData, TEXT("Category"), TEXT("Display"));
				MetaData->SetValue(NewProp_UIData, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_UIData, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
				MetaData->SetValue(NewProp_UIData, TEXT("ToolTip"), TEXT("Data for the UI representation of this effect. This should include things like text, icons, etc. Not available in server-only builds."));
				MetaData->SetValue(NewProp_GameplayCues, TEXT("Category"), TEXT("Display"));
				MetaData->SetValue(NewProp_GameplayCues, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
				MetaData->SetValue(NewProp_GameplayCues, TEXT("ToolTip"), TEXT("Cues to trigger non-simulated reactions in response to this GameplayEffect such as sounds, particle effects, etc"));
				MetaData->SetValue(NewProp_bRequireModifierSuccessToTriggerCues, TEXT("Category"), TEXT("Display"));
				MetaData->SetValue(NewProp_bRequireModifierSuccessToTriggerCues, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
				MetaData->SetValue(NewProp_bRequireModifierSuccessToTriggerCues, TEXT("ToolTip"), TEXT("If true, cues will only trigger when GE modifiers succeed being applied (whether through modifiers or executions)"));
				MetaData->SetValue(NewProp_RoutineExpirationEffectClasses, TEXT("Category"), TEXT("Expiration"));
				MetaData->SetValue(NewProp_RoutineExpirationEffectClasses, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
				MetaData->SetValue(NewProp_RoutineExpirationEffectClasses, TEXT("ToolTip"), TEXT("Effects to apply when this effect expires naturally via its duration; Only works for effects with a duration"));
				MetaData->SetValue(NewProp_PrematureExpirationEffectClasses, TEXT("Category"), TEXT("Expiration"));
				MetaData->SetValue(NewProp_PrematureExpirationEffectClasses, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
				MetaData->SetValue(NewProp_PrematureExpirationEffectClasses, TEXT("ToolTip"), TEXT("Effects to apply when this effect is made to expire prematurely (like via a forced removal, clear tags, etc.); Only works for effects with a duration"));
				MetaData->SetValue(NewProp_bClearStackOnOverflow, TEXT("Category"), TEXT("Overflow"));
				MetaData->SetValue(NewProp_bClearStackOnOverflow, TEXT("EditCondition"), TEXT("bDenyOverflowApplication"));
				MetaData->SetValue(NewProp_bClearStackOnOverflow, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
				MetaData->SetValue(NewProp_bClearStackOnOverflow, TEXT("ToolTip"), TEXT("If true, the entire stack of the effect will be cleared once it overflows"));
				MetaData->SetValue(NewProp_bDenyOverflowApplication, TEXT("Category"), TEXT("Overflow"));
				MetaData->SetValue(NewProp_bDenyOverflowApplication, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
				MetaData->SetValue(NewProp_bDenyOverflowApplication, TEXT("ToolTip"), TEXT("If true, stacking attempts made while at the stack count will fail, resulting in the duration and context not being refreshed"));
				MetaData->SetValue(NewProp_OverflowEffects, TEXT("Category"), TEXT("Overflow"));
				MetaData->SetValue(NewProp_OverflowEffects, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
				MetaData->SetValue(NewProp_OverflowEffects, TEXT("ToolTip"), TEXT("Effects to apply when a stacking effect \"overflows\" its stack count through another attempted application. Added whether the overflow application succeeds or not."));
				MetaData->SetValue(NewProp_TargetEffects, TEXT("Category"), TEXT("Deprecated"));
				MetaData->SetValue(NewProp_TargetEffects, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
				MetaData->SetValue(NewProp_TargetEffects, TEXT("ToolTip"), TEXT("Deprecated. Use TargetEffectClasses instead"));
				MetaData->SetValue(NewProp_TargetEffectClasses, TEXT("Category"), TEXT("GameplayEffect"));
				MetaData->SetValue(NewProp_TargetEffectClasses, TEXT("DisplayName"), TEXT("Linked Gameplay Effects"));
				MetaData->SetValue(NewProp_TargetEffectClasses, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
				MetaData->SetValue(NewProp_TargetEffectClasses, TEXT("ToolTip"), TEXT("other gameplay effects that will be applied to the target of this effect if this effect applies"));
				MetaData->SetValue(NewProp_ChanceToApplyToTarget, TEXT("Category"), TEXT("Application"));
				MetaData->SetValue(NewProp_ChanceToApplyToTarget, TEXT("GameplayAttribute"), TEXT("True"));
				MetaData->SetValue(NewProp_ChanceToApplyToTarget, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
				MetaData->SetValue(NewProp_ChanceToApplyToTarget, TEXT("ToolTip"), TEXT("Probability that this gameplay effect will be applied to the target actor (0.0 for never, 1.0 for always)"));
				MetaData->SetValue(NewProp_Executions, TEXT("Category"), TEXT("GameplayEffect"));
				MetaData->SetValue(NewProp_Executions, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
				MetaData->SetValue(NewProp_Modifiers, TEXT("Category"), TEXT("GameplayEffect"));
				MetaData->SetValue(NewProp_Modifiers, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
				MetaData->SetValue(NewProp_Modifiers, TEXT("ToolTip"), TEXT("Array of modifiers that will affect the target of this effect"));
				MetaData->SetValue(NewProp_bExecutePeriodicEffectOnApplication, TEXT("Category"), TEXT("Period"));
				MetaData->SetValue(NewProp_bExecutePeriodicEffectOnApplication, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
				MetaData->SetValue(NewProp_bExecutePeriodicEffectOnApplication, TEXT("ToolTip"), TEXT("If true, the effect executes on application and then at every period interval. If false, no execution occurs until the first period elapses."));
				MetaData->SetValue(NewProp_Period, TEXT("Category"), TEXT("Period"));
				MetaData->SetValue(NewProp_Period, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
				MetaData->SetValue(NewProp_Period, TEXT("ToolTip"), TEXT("Period in seconds. 0.0 for non-periodic effects"));
				MetaData->SetValue(NewProp_DurationMagnitude, TEXT("Category"), TEXT("GameplayEffect"));
				MetaData->SetValue(NewProp_DurationMagnitude, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
				MetaData->SetValue(NewProp_DurationMagnitude, TEXT("ToolTip"), TEXT("Duration in seconds. 0.0 for instantaneous effects; -1.0 for infinite duration."));
				MetaData->SetValue(NewProp_DurationPolicy, TEXT("Category"), TEXT("GameplayEffect"));
				MetaData->SetValue(NewProp_DurationPolicy, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
				MetaData->SetValue(NewProp_DurationPolicy, TEXT("ToolTip"), TEXT("Policy for the duration of this effect"));
				MetaData->SetValue(NewProp_ShowAllProperties, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
				MetaData->SetValue(NewProp_ShowAllProperties, TEXT("ToolTip"), TEXT("When false, show a limited set of properties for editing, based on the template we are derived from"));
				MetaData->SetValue(NewProp_Template, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffect.h"));
				MetaData->SetValue(NewProp_Template, TEXT("ToolTip"), TEXT("Template to derive starting values and editing customization from"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UGameplayEffect(Z_Construct_UClass_UGameplayEffect, TEXT("UGameplayEffect"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UGameplayEffect);
	UEnum* Z_Construct_UEnum_GameplayAbilities_EGameplayAbilityTriggerSource()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UEnum_GameplayAbilities_EGameplayAbilityTriggerSource_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EGameplayAbilityTriggerSource"), 0, Get_Z_Construct_UEnum_GameplayAbilities_EGameplayAbilityTriggerSource_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EGameplayAbilityTriggerSource"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayAbilityTriggerSource::GameplayEvent")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayAbilityTriggerSource::OwnedTagAdded")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayAbilityTriggerSource::OwnedTagPresent")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayAbilityTriggerSource::EGameplayAbilityTriggerSource_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("GameplayEvent.ToolTip"), TEXT("Triggered from a gameplay event, will come with payload"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTypes.h"));
			MetaData->SetValue(ReturnEnum, TEXT("OwnedTagAdded.ToolTip"), TEXT("Triggered if the ability's owner gets a tag added, triggered once whenever it's added"));
			MetaData->SetValue(ReturnEnum, TEXT("OwnedTagPresent.ToolTip"), TEXT("Triggered if the ability's owner gets tag added, removed when the tag is removed"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Defines what type of trigger will activate the ability, paired to a tag"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_GameplayAbilities_EGameplayAbilityTriggerSource_CRC() { return 280145056U; }
	UEnum* Z_Construct_UEnum_GameplayAbilities_EGameplayAbilityReplicationPolicy()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UEnum_GameplayAbilities_EGameplayAbilityReplicationPolicy_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EGameplayAbilityReplicationPolicy"), 0, Get_Z_Construct_UEnum_GameplayAbilities_EGameplayAbilityReplicationPolicy_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EGameplayAbilityReplicationPolicy"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayAbilityReplicationPolicy::ReplicateNo")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayAbilityReplicationPolicy::ReplicateYes")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayAbilityReplicationPolicy::EGameplayAbilityReplicationPolicy_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTypes.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ReplicateNo.DisplayName"), TEXT("Do Not Replicate"));
			MetaData->SetValue(ReturnEnum, TEXT("ReplicateNo.ToolTip"), TEXT("We don't replicate the instance of the ability to anyone."));
			MetaData->SetValue(ReturnEnum, TEXT("ReplicateYes.DisplayName"), TEXT("Replicate"));
			MetaData->SetValue(ReturnEnum, TEXT("ReplicateYes.ToolTip"), TEXT("We replicate the instance of the ability to the owner."));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("How an ability replicates state/events to everyone on the network."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_GameplayAbilities_EGameplayAbilityReplicationPolicy_CRC() { return 694994587U; }
	UEnum* Z_Construct_UEnum_GameplayAbilities_EGameplayAbilityNetExecutionPolicy()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UEnum_GameplayAbilities_EGameplayAbilityNetExecutionPolicy_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EGameplayAbilityNetExecutionPolicy"), 0, Get_Z_Construct_UEnum_GameplayAbilities_EGameplayAbilityNetExecutionPolicy_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EGameplayAbilityNetExecutionPolicy"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayAbilityNetExecutionPolicy::LocalPredicted")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayAbilityNetExecutionPolicy::LocalOnly")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayAbilityNetExecutionPolicy::ServerInitiated")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayAbilityNetExecutionPolicy::ServerOnly")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayAbilityNetExecutionPolicy::EGameplayAbilityNetExecutionPolicy_MAX")), 4));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("LocalOnly.DisplayName"), TEXT("Local Only"));
			MetaData->SetValue(ReturnEnum, TEXT("LocalOnly.ToolTip"), TEXT("This ability will only run on the client or server that has local control"));
			MetaData->SetValue(ReturnEnum, TEXT("LocalPredicted.DisplayName"), TEXT("Local Predicted"));
			MetaData->SetValue(ReturnEnum, TEXT("LocalPredicted.ToolTip"), TEXT("Part of this ability runs predictively on the local client if there is one"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTypes.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ServerInitiated.DisplayName"), TEXT("Server Initiated"));
			MetaData->SetValue(ReturnEnum, TEXT("ServerInitiated.ToolTip"), TEXT("This ability is initiated by the server, but will also run on the local client if one exists"));
			MetaData->SetValue(ReturnEnum, TEXT("ServerOnly.DisplayName"), TEXT("Server Only"));
			MetaData->SetValue(ReturnEnum, TEXT("ServerOnly.ToolTip"), TEXT("This ability will only run on the server"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("How does an ability execute on the network. Does a client \"ask and predict\", \"ask and wait\", \"don't ask (just do it)\""));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_GameplayAbilities_EGameplayAbilityNetExecutionPolicy_CRC() { return 2865399753U; }
	UEnum* Z_Construct_UEnum_GameplayAbilities_EGameplayAbilityInstancingPolicy()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UEnum_GameplayAbilities_EGameplayAbilityInstancingPolicy_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EGameplayAbilityInstancingPolicy"), 0, Get_Z_Construct_UEnum_GameplayAbilities_EGameplayAbilityInstancingPolicy_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EGameplayAbilityInstancingPolicy"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayAbilityInstancingPolicy::NonInstanced")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayAbilityInstancingPolicy::InstancedPerActor")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayAbilityInstancingPolicy::InstancedPerExecution")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayAbilityInstancingPolicy::EGameplayAbilityInstancingPolicy_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("InstancedPerActor.ToolTip"), TEXT("Each actor gets their own instance of this ability. State can be saved, replication is possible."));
			MetaData->SetValue(ReturnEnum, TEXT("InstancedPerExecution.ToolTip"), TEXT("We instance this ability each time it is executed. Replication possible but not recommended."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTypes.h"));
			MetaData->SetValue(ReturnEnum, TEXT("NonInstanced.ToolTip"), TEXT("This ability is never instanced. Anything that executes the ability is operating on the CDO."));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("How the ability is instanced when executed. This limits what an ability can do in its implementation. For example, a NonInstanced\nAbility cannot have state. It is probably unsafe for an InstancedPerActor ability to have latent actions, etc."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_GameplayAbilities_EGameplayAbilityInstancingPolicy_CRC() { return 3576063452U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAttributeDefaults()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UScriptStruct_FAttributeDefaults_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("AttributeDefaults"), sizeof(FAttributeDefaults), Get_Z_Construct_UScriptStruct_FAttributeDefaults_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AttributeDefaults"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FAttributeDefaults>, EStructFlags(0x00000201));
			UProperty* NewProp_DefaultStartingTable = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DefaultStartingTable"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(DefaultStartingTable, FAttributeDefaults), 0x0000000000000005, Z_Construct_UClass_UDataTable_NoRegister());
			UProperty* NewProp_Attributes = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Attributes"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(Attributes, FAttributeDefaults), 0x0004000000000001, Z_Construct_UClass_UAttributeSet_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTypes.h"));
			MetaData->SetValue(NewProp_DefaultStartingTable, TEXT("Category"), TEXT("AttributeTest"));
			MetaData->SetValue(NewProp_DefaultStartingTable, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTypes.h"));
			MetaData->SetValue(NewProp_Attributes, TEXT("Category"), TEXT("AttributeTest"));
			MetaData->SetValue(NewProp_Attributes, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTypes.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAttributeDefaults_CRC() { return 513331788U; }
	UScriptStruct* Z_Construct_UScriptStruct_FGameplayEventData()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UScriptStruct_FGameplayEventData_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("GameplayEventData"), sizeof(FGameplayEventData), Get_Z_Construct_UScriptStruct_FGameplayEventData_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GameplayEventData"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FGameplayEventData>, EStructFlags(0x00000201));
			UProperty* NewProp_EventMagnitude = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("EventMagnitude"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(EventMagnitude, FGameplayEventData), 0x0000000000000005);
			UProperty* NewProp_TargetTags = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TargetTags"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TargetTags, FGameplayEventData), 0x0000000000000005, Z_Construct_UScriptStruct_FGameplayTagContainer());
			UProperty* NewProp_InstigatorTags = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("InstigatorTags"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InstigatorTags, FGameplayEventData), 0x0000000000000005, Z_Construct_UScriptStruct_FGameplayTagContainer());
			UProperty* NewProp_ContextHandle = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ContextHandle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ContextHandle, FGameplayEventData), 0x0000000000000005, Z_Construct_UScriptStruct_FGameplayEffectContextHandle());
			UProperty* NewProp_OptionalObject2 = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("OptionalObject2"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(OptionalObject2, FGameplayEventData), 0x0000000000000005, Z_Construct_UClass_UObject_NoRegister());
			UProperty* NewProp_OptionalObject = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("OptionalObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(OptionalObject, FGameplayEventData), 0x0000000000000005, Z_Construct_UClass_UObject_NoRegister());
			UProperty* NewProp_Target = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Target"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Target, FGameplayEventData), 0x0000000000000005, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_Instigator = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Instigator"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Instigator, FGameplayEventData), 0x0000000000000005, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_EventTag = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("EventTag"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(EventTag, FGameplayEventData), 0x0000000000000005, Z_Construct_UScriptStruct_FGameplayTag());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTypes.h"));
			MetaData->SetValue(NewProp_EventMagnitude, TEXT("Category"), TEXT("GameplayAbilityTriggerPayload"));
			MetaData->SetValue(NewProp_EventMagnitude, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTypes.h"));
			MetaData->SetValue(NewProp_EventMagnitude, TEXT("ToolTip"), TEXT("The magnitude of the triggering event"));
			MetaData->SetValue(NewProp_TargetTags, TEXT("Category"), TEXT("GameplayAbilityTriggerPayload"));
			MetaData->SetValue(NewProp_TargetTags, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTypes.h"));
			MetaData->SetValue(NewProp_TargetTags, TEXT("ToolTip"), TEXT("Tags that the target has"));
			MetaData->SetValue(NewProp_InstigatorTags, TEXT("Category"), TEXT("GameplayAbilityTriggerPayload"));
			MetaData->SetValue(NewProp_InstigatorTags, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTypes.h"));
			MetaData->SetValue(NewProp_InstigatorTags, TEXT("ToolTip"), TEXT("Tags that the instigator has"));
			MetaData->SetValue(NewProp_ContextHandle, TEXT("Category"), TEXT("GameplayAbilityTriggerPayload"));
			MetaData->SetValue(NewProp_ContextHandle, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTypes.h"));
			MetaData->SetValue(NewProp_ContextHandle, TEXT("ToolTip"), TEXT("Polymorphic context information"));
			MetaData->SetValue(NewProp_OptionalObject2, TEXT("Category"), TEXT("GameplayAbilityTriggerPayload"));
			MetaData->SetValue(NewProp_OptionalObject2, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTypes.h"));
			MetaData->SetValue(NewProp_OptionalObject2, TEXT("ToolTip"), TEXT("A second optional ability-specific object to be passed though the event"));
			MetaData->SetValue(NewProp_OptionalObject, TEXT("Category"), TEXT("GameplayAbilityTriggerPayload"));
			MetaData->SetValue(NewProp_OptionalObject, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTypes.h"));
			MetaData->SetValue(NewProp_OptionalObject, TEXT("ToolTip"), TEXT("An optional ability-specific object to be passed though the event"));
			MetaData->SetValue(NewProp_Target, TEXT("Category"), TEXT("GameplayAbilityTriggerPayload"));
			MetaData->SetValue(NewProp_Target, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTypes.h"));
			MetaData->SetValue(NewProp_Target, TEXT("ToolTip"), TEXT("The target of the event"));
			MetaData->SetValue(NewProp_Instigator, TEXT("Category"), TEXT("GameplayAbilityTriggerPayload"));
			MetaData->SetValue(NewProp_Instigator, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTypes.h"));
			MetaData->SetValue(NewProp_Instigator, TEXT("ToolTip"), TEXT("The instigator of the event"));
			MetaData->SetValue(NewProp_EventTag, TEXT("Category"), TEXT("GameplayAbilityTriggerPayload"));
			MetaData->SetValue(NewProp_EventTag, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTypes.h"));
			MetaData->SetValue(NewProp_EventTag, TEXT("ToolTip"), TEXT("Tag of the event that triggered this"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FGameplayEventData_CRC() { return 3188546461U; }
	UScriptStruct* Z_Construct_UScriptStruct_FGameplayAbilityLocalAnimMontage()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UScriptStruct_FGameplayAbilityLocalAnimMontage_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("GameplayAbilityLocalAnimMontage"), sizeof(FGameplayAbilityLocalAnimMontage), Get_Z_Construct_UScriptStruct_FGameplayAbilityLocalAnimMontage_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GameplayAbilityLocalAnimMontage"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FGameplayAbilityLocalAnimMontage>, EStructFlags(0x00000201));
			UProperty* NewProp_AnimatingAbility = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("AnimatingAbility"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(AnimatingAbility, FGameplayAbilityLocalAnimMontage), 0x0000000000000000, Z_Construct_UClass_UGameplayAbility_NoRegister());
			UProperty* NewProp_PredictionKey = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PredictionKey"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PredictionKey, FGameplayAbilityLocalAnimMontage), 0x0000000000000000, Z_Construct_UScriptStruct_FPredictionKey());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(PlayBit, FGameplayAbilityLocalAnimMontage, bool);
			UProperty* NewProp_PlayBit = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PlayBit"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(PlayBit, FGameplayAbilityLocalAnimMontage), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(PlayBit, FGameplayAbilityLocalAnimMontage), sizeof(bool), true);
			UProperty* NewProp_AnimMontage = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("AnimMontage"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(AnimMontage, FGameplayAbilityLocalAnimMontage), 0x0000000000000000, Z_Construct_UClass_UAnimMontage_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTypes.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Data about montages that were played locally (all montages in case of server. predictive montages in case of client). Never replicated directly."));
			MetaData->SetValue(NewProp_AnimatingAbility, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTypes.h"));
			MetaData->SetValue(NewProp_AnimatingAbility, TEXT("ToolTip"), TEXT("The ability, if any, that instigated this montage"));
			MetaData->SetValue(NewProp_PredictionKey, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTypes.h"));
			MetaData->SetValue(NewProp_PlayBit, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTypes.h"));
			MetaData->SetValue(NewProp_AnimMontage, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTypes.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FGameplayAbilityLocalAnimMontage_CRC() { return 1465666776U; }
	UScriptStruct* Z_Construct_UScriptStruct_FGameplayAbilityRepAnimMontage()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UScriptStruct_FGameplayAbilityRepAnimMontage_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("GameplayAbilityRepAnimMontage"), sizeof(FGameplayAbilityRepAnimMontage), Get_Z_Construct_UScriptStruct_FGameplayAbilityRepAnimMontage_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GameplayAbilityRepAnimMontage"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FGameplayAbilityRepAnimMontage>, EStructFlags(0x00000201));
			UProperty* NewProp_PredictionKey = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PredictionKey"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PredictionKey, FGameplayAbilityRepAnimMontage), 0x0000000000000000, Z_Construct_UScriptStruct_FPredictionKey());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ForcePlayBit, FGameplayAbilityRepAnimMontage, uint8);
			UProperty* NewProp_ForcePlayBit = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ForcePlayBit"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ForcePlayBit, FGameplayAbilityRepAnimMontage), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(ForcePlayBit, FGameplayAbilityRepAnimMontage), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsStopped, FGameplayAbilityRepAnimMontage, uint8);
			UProperty* NewProp_IsStopped = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("IsStopped"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsStopped, FGameplayAbilityRepAnimMontage), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(IsStopped, FGameplayAbilityRepAnimMontage), sizeof(uint8), false);
			UProperty* NewProp_NextSectionID = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("NextSectionID"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(NextSectionID, FGameplayAbilityRepAnimMontage), 0x0000000000000000);
			UProperty* NewProp_BlendTime = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BlendTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(BlendTime, FGameplayAbilityRepAnimMontage), 0x0000000000000000);
			UProperty* NewProp_Position = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Position"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Position, FGameplayAbilityRepAnimMontage), 0x0000000000000000);
			UProperty* NewProp_PlayRate = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PlayRate"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(PlayRate, FGameplayAbilityRepAnimMontage), 0x0000000000000000);
			UProperty* NewProp_AnimMontage = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("AnimMontage"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(AnimMontage, FGameplayAbilityRepAnimMontage), 0x0000000000000000, Z_Construct_UClass_UAnimMontage_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTypes.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Data about montages that is replicated to simulated clients"));
			MetaData->SetValue(NewProp_PredictionKey, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTypes.h"));
			MetaData->SetValue(NewProp_ForcePlayBit, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTypes.h"));
			MetaData->SetValue(NewProp_ForcePlayBit, TEXT("ToolTip"), TEXT("Bit flipped every time a new Montage is played. To trigger replication when the same montage is played again."));
			MetaData->SetValue(NewProp_IsStopped, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTypes.h"));
			MetaData->SetValue(NewProp_IsStopped, TEXT("ToolTip"), TEXT("Bit set when montage has been stopped."));
			MetaData->SetValue(NewProp_NextSectionID, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTypes.h"));
			MetaData->SetValue(NewProp_NextSectionID, TEXT("ToolTip"), TEXT("NextSectionID"));
			MetaData->SetValue(NewProp_BlendTime, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTypes.h"));
			MetaData->SetValue(NewProp_BlendTime, TEXT("ToolTip"), TEXT("Montage current blend time"));
			MetaData->SetValue(NewProp_Position, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTypes.h"));
			MetaData->SetValue(NewProp_Position, TEXT("ToolTip"), TEXT("Montage position"));
			MetaData->SetValue(NewProp_PlayRate, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTypes.h"));
			MetaData->SetValue(NewProp_PlayRate, TEXT("ToolTip"), TEXT("Play Rate"));
			MetaData->SetValue(NewProp_AnimMontage, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTypes.h"));
			MetaData->SetValue(NewProp_AnimMontage, TEXT("ToolTip"), TEXT("AnimMontage ref"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FGameplayAbilityRepAnimMontage_CRC() { return 9103636U; }
	UScriptStruct* Z_Construct_UScriptStruct_FGameplayAbilitySpecHandleAndPredictionKey()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UScriptStruct_FGameplayAbilitySpecHandleAndPredictionKey_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("GameplayAbilitySpecHandleAndPredictionKey"), sizeof(FGameplayAbilitySpecHandleAndPredictionKey), Get_Z_Construct_UScriptStruct_FGameplayAbilitySpecHandleAndPredictionKey_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GameplayAbilitySpecHandleAndPredictionKey"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FGameplayAbilitySpecHandleAndPredictionKey>, EStructFlags(0x00000001));
			UProperty* NewProp_PredictionKeyAtCreation = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PredictionKeyAtCreation"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(PredictionKeyAtCreation, FGameplayAbilitySpecHandleAndPredictionKey), 0x0000000000000000);
			UProperty* NewProp_AbilityHandle = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("AbilityHandle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(AbilityHandle, FGameplayAbilitySpecHandleAndPredictionKey), 0x0000000000000000, Z_Construct_UScriptStruct_FGameplayAbilitySpecHandle());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTypes.h"));
			MetaData->SetValue(NewProp_PredictionKeyAtCreation, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTypes.h"));
			MetaData->SetValue(NewProp_AbilityHandle, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTypes.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FGameplayAbilitySpecHandleAndPredictionKey_CRC() { return 2777797343U; }
	UScriptStruct* Z_Construct_UScriptStruct_FGameplayAbilityActorInfo()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UScriptStruct_FGameplayAbilityActorInfo_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("GameplayAbilityActorInfo"), sizeof(FGameplayAbilityActorInfo), Get_Z_Construct_UScriptStruct_FGameplayAbilityActorInfo_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GameplayAbilityActorInfo"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FGameplayAbilityActorInfo>, EStructFlags(0x00000205));
			UProperty* NewProp_MovementComponent = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MovementComponent"), RF_Public|RF_Transient|RF_Native) UWeakObjectProperty(CPP_PROPERTY_BASE(MovementComponent, FGameplayAbilityActorInfo), 0x000400000008001c, Z_Construct_UClass_UMovementComponent_NoRegister());
			UProperty* NewProp_AnimInstance = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("AnimInstance"), RF_Public|RF_Transient|RF_Native) UWeakObjectProperty(CPP_PROPERTY_BASE(AnimInstance, FGameplayAbilityActorInfo), 0x0004000000000014, Z_Construct_UClass_UAnimInstance_NoRegister());
			UProperty* NewProp_AbilitySystemComponent = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("AbilitySystemComponent"), RF_Public|RF_Transient|RF_Native) UWeakObjectProperty(CPP_PROPERTY_BASE(AbilitySystemComponent, FGameplayAbilityActorInfo), 0x000400000008001c, Z_Construct_UClass_UAbilitySystemComponent_NoRegister());
			UProperty* NewProp_PlayerController = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PlayerController"), RF_Public|RF_Transient|RF_Native) UWeakObjectProperty(CPP_PROPERTY_BASE(PlayerController, FGameplayAbilityActorInfo), 0x0004000000000014, Z_Construct_UClass_APlayerController_NoRegister());
			UProperty* NewProp_AvatarActor = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("AvatarActor"), RF_Public|RF_Transient|RF_Native) UWeakObjectProperty(CPP_PROPERTY_BASE(AvatarActor, FGameplayAbilityActorInfo), 0x0004000000000014, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_OwnerActor = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("OwnerActor"), RF_Public|RF_Transient|RF_Native) UWeakObjectProperty(CPP_PROPERTY_BASE(OwnerActor, FGameplayAbilityActorInfo), 0x0004000000000014, Z_Construct_UClass_AActor_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTypes.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("FGameplayAbilityActorInfo\n\nCached data associated with an Actor using an Ability.\n        -Initialized from an AActor* in InitFromActor\n        -Abilities use this to know what to actor upon. E.g., instead of being coupled to a specific actor class.\n        -These are generally passed around as pointers to support polymorphism.\n        -Projects can override UAbilitySystemGlobals::AllocAbilityActorInfo to override the default struct type that is created."));
			MetaData->SetValue(NewProp_MovementComponent, TEXT("Category"), TEXT("ActorInfo"));
			MetaData->SetValue(NewProp_MovementComponent, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTypes.h"));
			MetaData->SetValue(NewProp_MovementComponent, TEXT("ToolTip"), TEXT("Movement component of the avatar actor. Often null"));
			MetaData->SetValue(NewProp_AnimInstance, TEXT("Category"), TEXT("ActorInfo"));
			MetaData->SetValue(NewProp_AnimInstance, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTypes.h"));
			MetaData->SetValue(NewProp_AnimInstance, TEXT("ToolTip"), TEXT("Anim instance of the avatar actor. Often null"));
			MetaData->SetValue(NewProp_AbilitySystemComponent, TEXT("Category"), TEXT("ActorInfo"));
			MetaData->SetValue(NewProp_AbilitySystemComponent, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTypes.h"));
			MetaData->SetValue(NewProp_AbilitySystemComponent, TEXT("ToolTip"), TEXT("Ability System component associated with the owner actor, shouldn't be null"));
			MetaData->SetValue(NewProp_PlayerController, TEXT("Category"), TEXT("ActorInfo"));
			MetaData->SetValue(NewProp_PlayerController, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTypes.h"));
			MetaData->SetValue(NewProp_PlayerController, TEXT("ToolTip"), TEXT("PlayerController associated with the owning actor. This will often be null!"));
			MetaData->SetValue(NewProp_AvatarActor, TEXT("Category"), TEXT("ActorInfo"));
			MetaData->SetValue(NewProp_AvatarActor, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTypes.h"));
			MetaData->SetValue(NewProp_AvatarActor, TEXT("ToolTip"), TEXT("The physical representation of the owner, used for targeting and animation. This will often be null!"));
			MetaData->SetValue(NewProp_OwnerActor, TEXT("Category"), TEXT("ActorInfo"));
			MetaData->SetValue(NewProp_OwnerActor, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTypes.h"));
			MetaData->SetValue(NewProp_OwnerActor, TEXT("ToolTip"), TEXT("The actor that owns the abilities, shouldn't be null"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FGameplayAbilityActorInfo_CRC() { return 2215993022U; }
	UEnum* Z_Construct_UEnum_GameplayAbilities_ETargetDataFilterSelf()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UEnum_GameplayAbilities_ETargetDataFilterSelf_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ETargetDataFilterSelf"), 0, Get_Z_Construct_UEnum_GameplayAbilities_ETargetDataFilterSelf_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ETargetDataFilterSelf"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ETargetDataFilterSelf::TDFS_Any")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ETargetDataFilterSelf::TDFS_NoSelf")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ETargetDataFilterSelf::TDFS_NoOthers")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ETargetDataFilterSelf::TDFS_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTargetDataFilter.h"));
			MetaData->SetValue(ReturnEnum, TEXT("TDFS_Any.DisplayName"), TEXT("Allow self or others"));
			MetaData->SetValue(ReturnEnum, TEXT("TDFS_NoOthers.DisplayName"), TEXT("Filter others out"));
			MetaData->SetValue(ReturnEnum, TEXT("TDFS_NoSelf.DisplayName"), TEXT("Filter self out"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_GameplayAbilities_ETargetDataFilterSelf_CRC() { return 3323534497U; }
	UScriptStruct* Z_Construct_UScriptStruct_FGameplayTargetDataFilterHandle()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UScriptStruct_FGameplayTargetDataFilterHandle_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("GameplayTargetDataFilterHandle"), sizeof(FGameplayTargetDataFilterHandle), Get_Z_Construct_UScriptStruct_FGameplayTargetDataFilterHandle_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GameplayTargetDataFilterHandle"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FGameplayTargetDataFilterHandle>, EStructFlags(0x00000201));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTargetDataFilter.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FGameplayTargetDataFilterHandle_CRC() { return 1973535548U; }
	UScriptStruct* Z_Construct_UScriptStruct_FGameplayTargetDataFilter()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UScriptStruct_FGameplayTargetDataFilter_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("GameplayTargetDataFilter"), sizeof(FGameplayTargetDataFilter), Get_Z_Construct_UScriptStruct_FGameplayTargetDataFilter_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GameplayTargetDataFilter"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FGameplayTargetDataFilter>, EStructFlags(0x00000201));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bReverseFilter, FGameplayTargetDataFilter, bool);
			UProperty* NewProp_bReverseFilter = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bReverseFilter"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bReverseFilter, FGameplayTargetDataFilter), 0x0001000000000005, CPP_BOOL_PROPERTY_BITMASK(bReverseFilter, FGameplayTargetDataFilter), sizeof(bool), true);
			UProperty* NewProp_RequiredActorClass = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RequiredActorClass"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(RequiredActorClass, FGameplayTargetDataFilter), 0x0005000000000005, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_SelfFilter = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SelfFilter"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(SelfFilter, FGameplayTargetDataFilter), 0x0001000000000005, Z_Construct_UEnum_GameplayAbilities_ETargetDataFilterSelf());
			UProperty* NewProp_SelfActor = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SelfActor"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(SelfActor, FGameplayTargetDataFilter), 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTargetDataFilter.h"));
			MetaData->SetValue(NewProp_bReverseFilter, TEXT("Category"), TEXT("Filter"));
			MetaData->SetValue(NewProp_bReverseFilter, TEXT("ExposeOnSpawn"), TEXT("TRUE"));
			MetaData->SetValue(NewProp_bReverseFilter, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTargetDataFilter.h"));
			MetaData->SetValue(NewProp_bReverseFilter, TEXT("ToolTip"), TEXT("Reverses the meaning of the filter, so it will exclude all actors that pass."));
			MetaData->SetValue(NewProp_RequiredActorClass, TEXT("Category"), TEXT("Filter"));
			MetaData->SetValue(NewProp_RequiredActorClass, TEXT("ExposeOnSpawn"), TEXT("TRUE"));
			MetaData->SetValue(NewProp_RequiredActorClass, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTargetDataFilter.h"));
			MetaData->SetValue(NewProp_RequiredActorClass, TEXT("ToolTip"), TEXT("Subclass actors must be to pass the filter."));
			MetaData->SetValue(NewProp_SelfFilter, TEXT("Category"), TEXT("Filter"));
			MetaData->SetValue(NewProp_SelfFilter, TEXT("ExposeOnSpawn"), TEXT("TRUE"));
			MetaData->SetValue(NewProp_SelfFilter, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTargetDataFilter.h"));
			MetaData->SetValue(NewProp_SelfFilter, TEXT("ToolTip"), TEXT("Filter based on whether or not this actor is \"self.\""));
			MetaData->SetValue(NewProp_SelfActor, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTargetDataFilter.h"));
			MetaData->SetValue(NewProp_SelfActor, TEXT("ToolTip"), TEXT("Actor we're comparing against."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FGameplayTargetDataFilter_CRC() { return 745162449U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAbilityTriggerData()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UScriptStruct_FAbilityTriggerData_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("AbilityTriggerData"), sizeof(FAbilityTriggerData), Get_Z_Construct_UScriptStruct_FAbilityTriggerData_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AbilityTriggerData"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FAbilityTriggerData>, EStructFlags(0x00000001));
			UProperty* NewProp_TriggerSource = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TriggerSource"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(TriggerSource, FAbilityTriggerData), 0x0000000000000001, Z_Construct_UEnum_GameplayAbilities_EGameplayAbilityTriggerSource());
			UProperty* NewProp_TriggerTag = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TriggerTag"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TriggerTag, FAbilityTriggerData), 0x0000000000000001, Z_Construct_UScriptStruct_FGameplayTag());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("TriggerData"));
			MetaData->SetValue(NewProp_TriggerSource, TEXT("Category"), TEXT("TriggerData"));
			MetaData->SetValue(NewProp_TriggerSource, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
			MetaData->SetValue(NewProp_TriggerSource, TEXT("ToolTip"), TEXT("The type of trigger to respond to"));
			MetaData->SetValue(NewProp_TriggerTag, TEXT("Category"), TEXT("TriggerData"));
			MetaData->SetValue(NewProp_TriggerTag, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
			MetaData->SetValue(NewProp_TriggerTag, TEXT("ToolTip"), TEXT("The tag to respond to"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAbilityTriggerData_CRC() { return 4225403105U; }
	UFunction* Z_Construct_UFunction_UGameplayAbility_BP_ApplyGameplayEffectToOwner()
	{
		struct GameplayAbility_eventBP_ApplyGameplayEffectToOwner_Parms
		{
			TSubclassOf<UGameplayEffect>  GameplayEffectClass;
			int32 GameplayEffectLevel;
			FActiveGameplayEffectHandle ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayAbility();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BP_ApplyGameplayEffectToOwner"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04080401, 65535, sizeof(GameplayAbility_eventBP_ApplyGameplayEffectToOwner_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, GameplayAbility_eventBP_ApplyGameplayEffectToOwner_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FActiveGameplayEffectHandle());
			UProperty* NewProp_GameplayEffectLevel = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("GameplayEffectLevel"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(GameplayEffectLevel, GameplayAbility_eventBP_ApplyGameplayEffectToOwner_Parms), 0x0000000000000080);
			UProperty* NewProp_GameplayEffectClass = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("GameplayEffectClass"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(GameplayEffectClass, GameplayAbility_eventBP_ApplyGameplayEffectToOwner_Parms), 0x0004000000000080, Z_Construct_UClass_UGameplayEffect_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_GameplayEffectLevel"), TEXT("1"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("ApplyGameplayEffectToOwner"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Apply Self"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayAbility_BP_ApplyGameplayEffectToTarget()
	{
		struct GameplayAbility_eventBP_ApplyGameplayEffectToTarget_Parms
		{
			FGameplayAbilityTargetDataHandle TargetData;
			TSubclassOf<UGameplayEffect>  GameplayEffectClass;
			int32 GameplayEffectLevel;
			TArray<FActiveGameplayEffectHandle> ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayAbility();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BP_ApplyGameplayEffectToTarget"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04080401, 65535, sizeof(GameplayAbility_eventBP_ApplyGameplayEffectToTarget_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ReturnValue, GameplayAbility_eventBP_ApplyGameplayEffectToTarget_Parms), 0x0000000000000580);
			UProperty* NewProp_ReturnValue_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ReturnValue, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FActiveGameplayEffectHandle());
			UProperty* NewProp_GameplayEffectLevel = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("GameplayEffectLevel"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(GameplayEffectLevel, GameplayAbility_eventBP_ApplyGameplayEffectToTarget_Parms), 0x0000000000000080);
			UProperty* NewProp_GameplayEffectClass = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("GameplayEffectClass"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(GameplayEffectClass, GameplayAbility_eventBP_ApplyGameplayEffectToTarget_Parms), 0x0004000000000080, Z_Construct_UClass_UGameplayEffect_NoRegister());
			UProperty* NewProp_TargetData = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TargetData"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TargetData, GameplayAbility_eventBP_ApplyGameplayEffectToTarget_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayAbilityTargetDataHandle());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_GameplayEffectLevel"), TEXT("1"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("ApplyGameplayEffectToTarget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Apply Target"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayAbility_BP_RemoveGameplayEffectFromOwnerWithAssetTags()
	{
		struct GameplayAbility_eventBP_RemoveGameplayEffectFromOwnerWithAssetTags_Parms
		{
			FGameplayTagContainer WithAssetTags;
			int32 StacksToRemove;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayAbility();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BP_RemoveGameplayEffectFromOwnerWithAssetTags"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04080401, 65535, sizeof(GameplayAbility_eventBP_RemoveGameplayEffectFromOwnerWithAssetTags_Parms));
			UProperty* NewProp_StacksToRemove = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("StacksToRemove"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(StacksToRemove, GameplayAbility_eventBP_RemoveGameplayEffectFromOwnerWithAssetTags_Parms), 0x0000000000000080);
			UProperty* NewProp_WithAssetTags = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WithAssetTags"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(WithAssetTags, GameplayAbility_eventBP_RemoveGameplayEffectFromOwnerWithAssetTags_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayTagContainer());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_StacksToRemove"), TEXT("-1"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("RemoveGameplayEffectFromOwnerWithAssetTags"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Removes GAmeplayEffects from owner which match the given asset level tags."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayAbility_BP_RemoveGameplayEffectFromOwnerWithGrantedTags()
	{
		struct GameplayAbility_eventBP_RemoveGameplayEffectFromOwnerWithGrantedTags_Parms
		{
			FGameplayTagContainer WithGrantedTags;
			int32 StacksToRemove;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayAbility();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BP_RemoveGameplayEffectFromOwnerWithGrantedTags"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04080401, 65535, sizeof(GameplayAbility_eventBP_RemoveGameplayEffectFromOwnerWithGrantedTags_Parms));
			UProperty* NewProp_StacksToRemove = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("StacksToRemove"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(StacksToRemove, GameplayAbility_eventBP_RemoveGameplayEffectFromOwnerWithGrantedTags_Parms), 0x0000000000000080);
			UProperty* NewProp_WithGrantedTags = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WithGrantedTags"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(WithGrantedTags, GameplayAbility_eventBP_RemoveGameplayEffectFromOwnerWithGrantedTags_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayTagContainer());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_StacksToRemove"), TEXT("-1"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("RemoveGameplayEffectFromOwnerWithGrantedTags"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayAbility_CancelTaskByInstanceName()
	{
		struct GameplayAbility_eventCancelTaskByInstanceName_Parms
		{
			FName InstanceName;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayAbility();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CancelTaskByInstanceName"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04080401, 65535, sizeof(GameplayAbility_eventCancelTaskByInstanceName_Parms));
			UProperty* NewProp_InstanceName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InstanceName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(InstanceName, GameplayAbility_eventCancelTaskByInstanceName_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Add any task with this instance name to a list to be canceled (not ended) next frame.  See also EndTaskByInstanceName."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayAbility_ConfirmTaskByInstanceName()
	{
		struct GameplayAbility_eventConfirmTaskByInstanceName_Parms
		{
			FName InstanceName;
			bool bEndTask;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayAbility();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ConfirmTaskByInstanceName"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04080401, 65535, sizeof(GameplayAbility_eventConfirmTaskByInstanceName_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEndTask, GameplayAbility_eventConfirmTaskByInstanceName_Parms, bool);
			UProperty* NewProp_bEndTask = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bEndTask"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEndTask, GameplayAbility_eventConfirmTaskByInstanceName_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bEndTask, GameplayAbility_eventConfirmTaskByInstanceName_Parms), sizeof(bool), true);
			UProperty* NewProp_InstanceName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InstanceName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(InstanceName, GameplayAbility_eventConfirmTaskByInstanceName_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Destroys instanced-per-execution abilities. Instance-per-actor abilities should 'reset'. Non instance abilities - what can we do?"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayAbility_EndAbilityState()
	{
		struct GameplayAbility_eventEndAbilityState_Parms
		{
			FName OptionalStateNameToEnd;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayAbility();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EndAbilityState"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04080401, 65535, sizeof(GameplayAbility_eventEndAbilityState_Parms));
			UProperty* NewProp_OptionalStateNameToEnd = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OptionalStateNameToEnd"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(OptionalStateNameToEnd, GameplayAbility_eventEndAbilityState_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Ends any active ability state task with the given name. If name is 'None' all active states will be ended (in an arbitrary order)."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayAbility_EndTaskByInstanceName()
	{
		struct GameplayAbility_eventEndTaskByInstanceName_Parms
		{
			FName InstanceName;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayAbility();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EndTaskByInstanceName"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04080401, 65535, sizeof(GameplayAbility_eventEndTaskByInstanceName_Parms));
			UProperty* NewProp_InstanceName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InstanceName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(InstanceName, GameplayAbility_eventEndTaskByInstanceName_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Add any task with this instance name to a list to be ended (not canceled) next frame.  See also CancelTaskByInstanceName."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayAbility_GetAbilityLevel()
	{
		struct GameplayAbility_eventGetAbilityLevel_Parms
		{
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayAbility();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetAbilityLevel"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54080401, 65535, sizeof(GameplayAbility_eventGetAbilityLevel_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, GameplayAbility_eventGetAbilityLevel_Parms), 0x0000000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns current level of the Ability"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayAbility_GetActorInfo()
	{
		struct GameplayAbility_eventGetActorInfo_Parms
		{
			FGameplayAbilityActorInfo ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayAbility();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetActorInfo"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(GameplayAbility_eventGetActorInfo_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, GameplayAbility_eventGetActorInfo_Parms), 0x0000008000000580, Z_Construct_UScriptStruct_FGameplayAbilityActorInfo());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the actor info associated with this ability, has cached pointers to useful objects"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayAbility_GetAvatarActorFromActorInfo()
	{
		struct GameplayAbility_eventGetAvatarActorFromActorInfo_Parms
		{
			AActor* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayAbility();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetAvatarActorFromActorInfo"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(GameplayAbility_eventGetAvatarActorFromActorInfo_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, GameplayAbility_eventGetAvatarActorFromActorInfo_Parms), 0x0000000000000580, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the physical actor that is executing this ability. May be null"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayAbility_GetContextFromOwner()
	{
		struct GameplayAbility_eventGetContextFromOwner_Parms
		{
			FGameplayAbilityTargetDataHandle OptionalTargetData;
			FGameplayEffectContextHandle ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayAbility();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetContextFromOwner"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54080400, 65535, sizeof(GameplayAbility_eventGetContextFromOwner_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, GameplayAbility_eventGetContextFromOwner_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FGameplayEffectContextHandle());
			UProperty* NewProp_OptionalTargetData = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OptionalTargetData"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(OptionalTargetData, GameplayAbility_eventGetContextFromOwner_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayAbilityTargetDataHandle());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability"));
			MetaData->SetValue(ReturnFunction, TEXT("GameplayTagFilter"), TEXT("GameplayCue"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Generates a GameplayEffectContextHandle from our owner and an optional TargetData."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayAbility_GetCurrentMontage()
	{
		struct GameplayAbility_eventGetCurrentMontage_Parms
		{
			UAnimMontage* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayAbility();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetCurrentMontage"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(GameplayAbility_eventGetCurrentMontage_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, GameplayAbility_eventGetCurrentMontage_Parms), 0x0000000000000580, Z_Construct_UClass_UAnimMontage_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Animation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the currently playing montage for this ability, if any"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayAbility_GetCurrentSourceObject()
	{
		struct GameplayAbility_eventGetCurrentSourceObject_Parms
		{
			UObject* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayAbility();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetCurrentSourceObject"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54080401, 65535, sizeof(GameplayAbility_eventGetCurrentSourceObject_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, GameplayAbility_eventGetCurrentSourceObject_Parms), 0x0000000000000580, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Retrieves the SourceObject associated with this ability. Can only be called on instanced abilities."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayAbility_GetOutgoingGameplayEffectSpec()
	{
		struct GameplayAbility_eventGetOutgoingGameplayEffectSpec_Parms
		{
			const UGameplayEffect* GameplayEffect;
			float Level;
			FGameplayEffectSpecHandle ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayAbility();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetOutgoingGameplayEffectSpec"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(GameplayAbility_eventGetOutgoingGameplayEffectSpec_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, GameplayAbility_eventGetOutgoingGameplayEffectSpec_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FGameplayEffectSpecHandle());
			UProperty* NewProp_Level = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Level"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Level, GameplayAbility_eventGetOutgoingGameplayEffectSpec_Parms), 0x0000000000000080);
			UProperty* NewProp_GameplayEffect = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("GameplayEffect"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(GameplayEffect, GameplayAbility_eventGetOutgoingGameplayEffectSpec_Parms), 0x0000000000000082, Z_Construct_UClass_UGameplayEffect_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Level"), TEXT("1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecatedFunction"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecationMessage"), TEXT("Use new MakeOutgoingGameplayEffectSpec"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Convenience method for abilities to get outgoing gameplay effect specs (for example, to pass on to projectiles to apply to whoever they hit)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayAbility_GetOwningActorFromActorInfo()
	{
		struct GameplayAbility_eventGetOwningActorFromActorInfo_Parms
		{
			AActor* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayAbility();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetOwningActorFromActorInfo"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(GameplayAbility_eventGetOwningActorFromActorInfo_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, GameplayAbility_eventGetOwningActorFromActorInfo_Parms), 0x0000000000000580, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the actor that owns this ability, which may not have a physical location"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayAbility_GetOwningComponentFromActorInfo()
	{
		struct GameplayAbility_eventGetOwningComponentFromActorInfo_Parms
		{
			USkeletalMeshComponent* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayAbility();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetOwningComponentFromActorInfo"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(GameplayAbility_eventGetOwningComponentFromActorInfo_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, GameplayAbility_eventGetOwningComponentFromActorInfo_Parms), 0x0000000000080588, Z_Construct_UClass_USkeletalMeshComponent_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("GetSkeletalMeshComponentFromActorInfo"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Convenience method for abilities to get skeletal mesh component - useful for aiming abilities"));
			MetaData->SetValue(NewProp_ReturnValue, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayAbility_K2_ActivateAbility()
	{
		UObject* Outer=Z_Construct_UClass_UGameplayAbility();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_ActivateAbility"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08080800, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("ActivateAbility"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("The main function that defines what an ability does.\n -Child classes will want to override this\n -This function graph should call CommitAbility\n -This function graph should call EndAbility\n\n Latent/async actions are ok in this graph. Note that Commit and EndAbility calling requirements speak to the K2_ActivateAbility graph.\n In C++, the call to K2_ActivateAbility() may return without CommitAbility or EndAbility having been called. But it is expected that this\n will only occur when latent/async actions are pending. When K2_ActivateAbility logically finishes, then we will expect Commit/End to have been called."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayAbility_K2_ActivateAbilityFromEvent()
	{
		UObject* Outer=Z_Construct_UClass_UGameplayAbility();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_ActivateAbilityFromEvent"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08480800, 65535, sizeof(GameplayAbility_eventK2_ActivateAbilityFromEvent_Parms));
			UProperty* NewProp_EventData = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("EventData"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(EventData, GameplayAbility_eventK2_ActivateAbilityFromEvent_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FGameplayEventData());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("ActivateAbilityFromEvent"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayAbility_K2_AddGameplayCue()
	{
		struct GameplayAbility_eventK2_AddGameplayCue_Parms
		{
			FGameplayTag GameplayCueTag;
			FGameplayEffectContextHandle Context;
			bool bRemoveOnAbilityEnd;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayAbility();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_AddGameplayCue"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04080400, 65535, sizeof(GameplayAbility_eventK2_AddGameplayCue_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bRemoveOnAbilityEnd, GameplayAbility_eventK2_AddGameplayCue_Parms, bool);
			UProperty* NewProp_bRemoveOnAbilityEnd = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bRemoveOnAbilityEnd"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bRemoveOnAbilityEnd, GameplayAbility_eventK2_AddGameplayCue_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bRemoveOnAbilityEnd, GameplayAbility_eventK2_AddGameplayCue_Parms), sizeof(bool), true);
			UProperty* NewProp_Context = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Context"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Context, GameplayAbility_eventK2_AddGameplayCue_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayEffectContextHandle());
			UProperty* NewProp_GameplayCueTag = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("GameplayCueTag"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(GameplayCueTag, GameplayAbility_eventK2_AddGameplayCue_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayTag());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bRemoveOnAbilityEnd"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("AddGameplayCue"));
			MetaData->SetValue(ReturnFunction, TEXT("GameplayTagFilter"), TEXT("GameplayCue"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayAbility_K2_ApplyGameplayEffectSpecToOwner()
	{
		struct GameplayAbility_eventK2_ApplyGameplayEffectSpecToOwner_Parms
		{
			FGameplayEffectSpecHandle EffectSpecHandle;
			FActiveGameplayEffectHandle ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayAbility();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_ApplyGameplayEffectSpecToOwner"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04080401, 65535, sizeof(GameplayAbility_eventK2_ApplyGameplayEffectSpecToOwner_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, GameplayAbility_eventK2_ApplyGameplayEffectSpecToOwner_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FActiveGameplayEffectHandle());
			UProperty* NewProp_EffectSpecHandle = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("EffectSpecHandle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(EffectSpecHandle, GameplayAbility_eventK2_ApplyGameplayEffectSpecToOwner_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FGameplayEffectSpecHandle());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("ApplyGameplayEffectSpecToOwner"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayAbility_K2_ApplyGameplayEffectSpecToTarget()
	{
		struct GameplayAbility_eventK2_ApplyGameplayEffectSpecToTarget_Parms
		{
			FGameplayEffectSpecHandle EffectSpecHandle;
			FGameplayAbilityTargetDataHandle TargetData;
			TArray<FActiveGameplayEffectHandle> ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayAbility();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_ApplyGameplayEffectSpecToTarget"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04080401, 65535, sizeof(GameplayAbility_eventK2_ApplyGameplayEffectSpecToTarget_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ReturnValue, GameplayAbility_eventK2_ApplyGameplayEffectSpecToTarget_Parms), 0x0000000000000580);
			UProperty* NewProp_ReturnValue_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ReturnValue, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FActiveGameplayEffectHandle());
			UProperty* NewProp_TargetData = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TargetData"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TargetData, GameplayAbility_eventK2_ApplyGameplayEffectSpecToTarget_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayAbilityTargetDataHandle());
			UProperty* NewProp_EffectSpecHandle = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("EffectSpecHandle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(EffectSpecHandle, GameplayAbility_eventK2_ApplyGameplayEffectSpecToTarget_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FGameplayEffectSpecHandle());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("ApplyGameplayEffectSpecToTarget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayAbility_K2_ApplyGameplayEffectToOwner()
	{
		struct GameplayAbility_eventK2_ApplyGameplayEffectToOwner_Parms
		{
			const UGameplayEffect* GameplayEffect;
			int32 GameplayEffectLevel;
			FActiveGameplayEffectHandle ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayAbility();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_ApplyGameplayEffectToOwner"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04080401, 65535, sizeof(GameplayAbility_eventK2_ApplyGameplayEffectToOwner_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, GameplayAbility_eventK2_ApplyGameplayEffectToOwner_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FActiveGameplayEffectHandle());
			UProperty* NewProp_GameplayEffectLevel = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("GameplayEffectLevel"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(GameplayEffectLevel, GameplayAbility_eventK2_ApplyGameplayEffectToOwner_Parms), 0x0000000000000080);
			UProperty* NewProp_GameplayEffect = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("GameplayEffect"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(GameplayEffect, GameplayAbility_eventK2_ApplyGameplayEffectToOwner_Parms), 0x0000000000000082, Z_Construct_UClass_UGameplayEffect_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_GameplayEffectLevel"), TEXT("1"));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecatedFunction"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecationMessage"), TEXT("Use new ApplyGameplayEffectToOwner"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("ApplyGameplayEffectToOwner"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayAbility_K2_ApplyGameplayEffectToTarget()
	{
		struct GameplayAbility_eventK2_ApplyGameplayEffectToTarget_Parms
		{
			FGameplayAbilityTargetDataHandle TargetData;
			const UGameplayEffect* GameplayEffect;
			int32 GameplayEffectLevel;
			TArray<FActiveGameplayEffectHandle> ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayAbility();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_ApplyGameplayEffectToTarget"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04080401, 65535, sizeof(GameplayAbility_eventK2_ApplyGameplayEffectToTarget_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ReturnValue, GameplayAbility_eventK2_ApplyGameplayEffectToTarget_Parms), 0x0000000000000580);
			UProperty* NewProp_ReturnValue_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ReturnValue, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FActiveGameplayEffectHandle());
			UProperty* NewProp_GameplayEffectLevel = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("GameplayEffectLevel"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(GameplayEffectLevel, GameplayAbility_eventK2_ApplyGameplayEffectToTarget_Parms), 0x0000000000000080);
			UProperty* NewProp_GameplayEffect = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("GameplayEffect"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(GameplayEffect, GameplayAbility_eventK2_ApplyGameplayEffectToTarget_Parms), 0x0000000000000082, Z_Construct_UClass_UGameplayEffect_NoRegister());
			UProperty* NewProp_TargetData = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TargetData"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TargetData, GameplayAbility_eventK2_ApplyGameplayEffectToTarget_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayAbilityTargetDataHandle());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_GameplayEffectLevel"), TEXT("1"));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecatedFunction"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecationMessage"), TEXT("Use new ApplyGameplayEffectToTarget"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("ApplyGameplayEffectToTarget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayAbility_K2_CanActivateAbility()
	{
		UObject* Outer=Z_Construct_UClass_UGameplayAbility();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_CanActivateAbility"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x48480800, 65535, sizeof(GameplayAbility_eventK2_CanActivateAbility_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, GameplayAbility_eventK2_CanActivateAbility_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, GameplayAbility_eventK2_CanActivateAbility_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, GameplayAbility_eventK2_CanActivateAbility_Parms), sizeof(bool), true);
			UProperty* NewProp_RelevantTags = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("RelevantTags"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(RelevantTags, GameplayAbility_eventK2_CanActivateAbility_Parms), 0x0000000000000180, Z_Construct_UScriptStruct_FGameplayTagContainer());
			UProperty* NewProp_ActorInfo = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActorInfo"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ActorInfo, GameplayAbility_eventK2_CanActivateAbility_Parms), 0x0000008000000080, Z_Construct_UScriptStruct_FGameplayAbilityActorInfo());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("CanActivateAbility"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if this ability can be activated right now. Has no side effects"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayAbility_K2_CheckAbilityCooldown()
	{
		struct GameplayAbility_eventK2_CheckAbilityCooldown_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayAbility();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_CheckAbilityCooldown"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020400, 65535, sizeof(GameplayAbility_eventK2_CheckAbilityCooldown_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, GameplayAbility_eventK2_CheckAbilityCooldown_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, GameplayAbility_eventK2_CheckAbilityCooldown_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, GameplayAbility_eventK2_CheckAbilityCooldown_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("CheckAbilityCooldown"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Checks the ability's cooldown, but does not apply it."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayAbility_K2_CheckAbilityCost()
	{
		struct GameplayAbility_eventK2_CheckAbilityCost_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayAbility();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_CheckAbilityCost"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020400, 65535, sizeof(GameplayAbility_eventK2_CheckAbilityCost_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, GameplayAbility_eventK2_CheckAbilityCost_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, GameplayAbility_eventK2_CheckAbilityCost_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, GameplayAbility_eventK2_CheckAbilityCost_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("CheckAbilityCost"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Checks the ability's cost, but does not apply it."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayAbility_K2_CommitAbility()
	{
		struct GameplayAbility_eventK2_CommitAbility_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayAbility();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_CommitAbility"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020400, 65535, sizeof(GameplayAbility_eventK2_CommitAbility_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, GameplayAbility_eventK2_CommitAbility_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, GameplayAbility_eventK2_CommitAbility_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, GameplayAbility_eventK2_CommitAbility_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("CommitAbility"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Attempts to commit the ability (spend resources, etc). This our last chance to fail.\n     -Child classes that override ActivateAbility must call this themselves!"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayAbility_K2_CommitAbilityCooldown()
	{
		struct GameplayAbility_eventK2_CommitAbilityCooldown_Parms
		{
			bool BroadcastCommitEvent;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayAbility();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_CommitAbilityCooldown"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020400, 65535, sizeof(GameplayAbility_eventK2_CommitAbilityCooldown_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, GameplayAbility_eventK2_CommitAbilityCooldown_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, GameplayAbility_eventK2_CommitAbilityCooldown_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, GameplayAbility_eventK2_CommitAbilityCooldown_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(BroadcastCommitEvent, GameplayAbility_eventK2_CommitAbilityCooldown_Parms, bool);
			UProperty* NewProp_BroadcastCommitEvent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("BroadcastCommitEvent"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(BroadcastCommitEvent, GameplayAbility_eventK2_CommitAbilityCooldown_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(BroadcastCommitEvent, GameplayAbility_eventK2_CommitAbilityCooldown_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_BroadcastCommitEvent"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("CommitAbilityCooldown"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Attempts to commit the ability's cooldown only. If BroadcastCommitEvent is true, it will broadcast the commit event that tasks like WaitAbilityCommit are listening for."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayAbility_K2_CommitAbilityCost()
	{
		struct GameplayAbility_eventK2_CommitAbilityCost_Parms
		{
			bool BroadcastCommitEvent;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayAbility();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_CommitAbilityCost"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020400, 65535, sizeof(GameplayAbility_eventK2_CommitAbilityCost_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, GameplayAbility_eventK2_CommitAbilityCost_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, GameplayAbility_eventK2_CommitAbilityCost_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, GameplayAbility_eventK2_CommitAbilityCost_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(BroadcastCommitEvent, GameplayAbility_eventK2_CommitAbilityCost_Parms, bool);
			UProperty* NewProp_BroadcastCommitEvent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("BroadcastCommitEvent"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(BroadcastCommitEvent, GameplayAbility_eventK2_CommitAbilityCost_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(BroadcastCommitEvent, GameplayAbility_eventK2_CommitAbilityCost_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_BroadcastCommitEvent"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("CommitAbilityCost"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Attempts to commit the ability's cost only. If BroadcastCommitEvent is true, it will broadcast the commit event that tasks like WaitAbilityCommit are listening for."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayAbility_K2_CommitExecute()
	{
		UObject* Outer=Z_Construct_UClass_UGameplayAbility();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_CommitExecute"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08020800, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("CommitExecute"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("CommitExecute"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayAbility_K2_EndAbility()
	{
		UObject* Outer=Z_Construct_UClass_UGameplayAbility();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_EndAbility"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04080400, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("EndAbility"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Call from kismet to end the ability naturally"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayAbility_K2_ExecuteGameplayCue()
	{
		struct GameplayAbility_eventK2_ExecuteGameplayCue_Parms
		{
			FGameplayTag GameplayCueTag;
			FGameplayEffectContextHandle Context;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayAbility();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_ExecuteGameplayCue"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04080400, 65535, sizeof(GameplayAbility_eventK2_ExecuteGameplayCue_Parms));
			UProperty* NewProp_Context = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Context"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Context, GameplayAbility_eventK2_ExecuteGameplayCue_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayEffectContextHandle());
			UProperty* NewProp_GameplayCueTag = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("GameplayCueTag"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(GameplayCueTag, GameplayAbility_eventK2_ExecuteGameplayCue_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayTag());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("ExecuteGameplayCue"));
			MetaData->SetValue(ReturnFunction, TEXT("GameplayTagFilter"), TEXT("GameplayCue"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("GameplayCue\nAbilities can invoke GameplayCues without having to create GameplayEffects"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayAbility_K2_ExecuteGameplayCueWithParams()
	{
		struct GameplayAbility_eventK2_ExecuteGameplayCueWithParams_Parms
		{
			FGameplayTag GameplayCueTag;
			FGameplayCueParameters GameplayCueParameters;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayAbility();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_ExecuteGameplayCueWithParams"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04480400, 65535, sizeof(GameplayAbility_eventK2_ExecuteGameplayCueWithParams_Parms));
			UProperty* NewProp_GameplayCueParameters = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("GameplayCueParameters"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(GameplayCueParameters, GameplayAbility_eventK2_ExecuteGameplayCueWithParams_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FGameplayCueParameters());
			UProperty* NewProp_GameplayCueTag = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("GameplayCueTag"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(GameplayCueTag, GameplayAbility_eventK2_ExecuteGameplayCueWithParams_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayTag());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("ExecuteGameplayCueWithParams"));
			MetaData->SetValue(ReturnFunction, TEXT("GameplayTagFilter"), TEXT("GameplayCue"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayAbility_K2_OnEndAbility()
	{
		UObject* Outer=Z_Construct_UClass_UGameplayAbility();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_OnEndAbility"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08080800, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("OnEndAbility"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Kismet event, will be called if an ability ends normally or abnormally"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayAbility_K2_RemoveGameplayCue()
	{
		struct GameplayAbility_eventK2_RemoveGameplayCue_Parms
		{
			FGameplayTag GameplayCueTag;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayAbility();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_RemoveGameplayCue"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04080400, 65535, sizeof(GameplayAbility_eventK2_RemoveGameplayCue_Parms));
			UProperty* NewProp_GameplayCueTag = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("GameplayCueTag"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(GameplayCueTag, GameplayAbility_eventK2_RemoveGameplayCue_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayTag());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("RemoveGameplayCue"));
			MetaData->SetValue(ReturnFunction, TEXT("GameplayTagFilter"), TEXT("GameplayCue"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayAbility_K2_ShouldAbilityRespondToEvent()
	{
		UObject* Outer=Z_Construct_UClass_UGameplayAbility();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_ShouldAbilityRespondToEvent"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x48080800, 65535, sizeof(GameplayAbility_eventK2_ShouldAbilityRespondToEvent_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, GameplayAbility_eventK2_ShouldAbilityRespondToEvent_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, GameplayAbility_eventK2_ShouldAbilityRespondToEvent_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, GameplayAbility_eventK2_ShouldAbilityRespondToEvent_Parms), sizeof(bool), true);
			UProperty* NewProp_Payload = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Payload"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Payload, GameplayAbility_eventK2_ShouldAbilityRespondToEvent_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayEventData());
			UProperty* NewProp_ActorInfo = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActorInfo"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ActorInfo, GameplayAbility_eventK2_ShouldAbilityRespondToEvent_Parms), 0x0000008000000080, Z_Construct_UScriptStruct_FGameplayAbilityActorInfo());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("ShouldAbilityRespondToEvent"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if this ability can be activated right now. Has no side effects"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayAbility_MakeOutgoingGameplayEffectSpec()
	{
		struct GameplayAbility_eventMakeOutgoingGameplayEffectSpec_Parms
		{
			TSubclassOf<UGameplayEffect>  GameplayEffectClass;
			float Level;
			FGameplayEffectSpecHandle ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayAbility();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MakeOutgoingGameplayEffectSpec"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(GameplayAbility_eventMakeOutgoingGameplayEffectSpec_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, GameplayAbility_eventMakeOutgoingGameplayEffectSpec_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FGameplayEffectSpecHandle());
			UProperty* NewProp_Level = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Level"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Level, GameplayAbility_eventMakeOutgoingGameplayEffectSpec_Parms), 0x0000000000000080);
			UProperty* NewProp_GameplayEffectClass = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("GameplayEffectClass"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(GameplayEffectClass, GameplayAbility_eventMakeOutgoingGameplayEffectSpec_Parms), 0x0004000000000080, Z_Construct_UClass_UGameplayEffect_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Level"), TEXT("1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Convenience method for abilities to get outgoing gameplay effect specs (for example, to pass on to projectiles to apply to whoever they hit)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayAbility_MakeTargetLocationInfoFromOwnerActor()
	{
		struct GameplayAbility_eventMakeTargetLocationInfoFromOwnerActor_Parms
		{
			FGameplayAbilityTargetingLocationInfo ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayAbility();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MakeTargetLocationInfoFromOwnerActor"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14080401, 65535, sizeof(GameplayAbility_eventMakeTargetLocationInfoFromOwnerActor_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, GameplayAbility_eventMakeTargetLocationInfoFromOwnerActor_Parms), 0x0000008000000580, Z_Construct_UScriptStruct_FGameplayAbilityTargetingLocationInfo());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Target Data"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayAbility_MakeTargetLocationInfoFromOwnerSkeletalMeshComponent()
	{
		struct GameplayAbility_eventMakeTargetLocationInfoFromOwnerSkeletalMeshComponent_Parms
		{
			FName SocketName;
			FGameplayAbilityTargetingLocationInfo ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayAbility();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MakeTargetLocationInfoFromOwnerSkeletalMeshComponent"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14080401, 65535, sizeof(GameplayAbility_eventMakeTargetLocationInfoFromOwnerSkeletalMeshComponent_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, GameplayAbility_eventMakeTargetLocationInfoFromOwnerSkeletalMeshComponent_Parms), 0x0000008000000580, Z_Construct_UScriptStruct_FGameplayAbilityTargetingLocationInfo());
			UProperty* NewProp_SocketName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SocketName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(SocketName, GameplayAbility_eventMakeTargetLocationInfoFromOwnerSkeletalMeshComponent_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayAbility_MontageJumpToSection()
	{
		struct GameplayAbility_eventMontageJumpToSection_Parms
		{
			FName SectionName;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayAbility();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MontageJumpToSection"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04080401, 65535, sizeof(GameplayAbility_eventMontageJumpToSection_Parms));
			UProperty* NewProp_SectionName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SectionName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(SectionName, GameplayAbility_eventMontageJumpToSection_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|Animation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Animation"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayAbility_MontageSetNextSectionName()
	{
		struct GameplayAbility_eventMontageSetNextSectionName_Parms
		{
			FName FromSectionName;
			FName ToSectionName;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayAbility();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MontageSetNextSectionName"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04080401, 65535, sizeof(GameplayAbility_eventMontageSetNextSectionName_Parms));
			UProperty* NewProp_ToSectionName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ToSectionName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(ToSectionName, GameplayAbility_eventMontageSetNextSectionName_Parms), 0x0000000000000080);
			UProperty* NewProp_FromSectionName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FromSectionName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(FromSectionName, GameplayAbility_eventMontageSetNextSectionName_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|Animation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayAbility_MontageStop()
	{
		struct GameplayAbility_eventMontageStop_Parms
		{
			float OverrideBlendOutTime;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayAbility();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MontageStop"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04080401, 65535, sizeof(GameplayAbility_eventMontageStop_Parms));
			UProperty* NewProp_OverrideBlendOutTime = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OverrideBlendOutTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(OverrideBlendOutTime, GameplayAbility_eventMontageStop_Parms), 0x0000040000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AdvancedDisplay"), TEXT("OverrideBlendOutTime"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|Animation"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_OverrideBlendOutTime"), TEXT("-1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Stops the current animation montage.\n\n@param OverrideBlendTime If < 0, will override the BlendOutTime parameter on the AnimMontage instance"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayAbility_SendGameplayEvent()
	{
		struct GameplayAbility_eventSendGameplayEvent_Parms
		{
			FGameplayTag EventTag;
			FGameplayEventData Payload;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayAbility();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SendGameplayEvent"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04080400, 65535, sizeof(GameplayAbility_eventSendGameplayEvent_Parms));
			UProperty* NewProp_Payload = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Payload"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Payload, GameplayAbility_eventSendGameplayEvent_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayEventData());
			UProperty* NewProp_EventTag = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("EventTag"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(EventTag, GameplayAbility_eventSendGameplayEvent_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayTag());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Abilities"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayAbility_SetCanBeCanceled()
	{
		struct GameplayAbility_eventSetCanBeCanceled_Parms
		{
			bool bCanBeCanceled;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayAbility();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetCanBeCanceled"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020400, 65535, sizeof(GameplayAbility_eventSetCanBeCanceled_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCanBeCanceled, GameplayAbility_eventSetCanBeCanceled_Parms, bool);
			UProperty* NewProp_bCanBeCanceled = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bCanBeCanceled"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCanBeCanceled, GameplayAbility_eventSetCanBeCanceled_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bCanBeCanceled, GameplayAbility_eventSetCanBeCanceled_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets whether the ability should ignore cancel requests. Only valid on instanced abilities"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayAbility_SetShouldBlockOtherAbilities()
	{
		struct GameplayAbility_eventSetShouldBlockOtherAbilities_Parms
		{
			bool bShouldBlockAbilities;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayAbility();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetShouldBlockOtherAbilities"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020400, 65535, sizeof(GameplayAbility_eventSetShouldBlockOtherAbilities_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bShouldBlockAbilities, GameplayAbility_eventSetShouldBlockOtherAbilities_Parms, bool);
			UProperty* NewProp_bShouldBlockAbilities = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bShouldBlockAbilities"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bShouldBlockAbilities, GameplayAbility_eventSetShouldBlockOtherAbilities_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bShouldBlockAbilities, GameplayAbility_eventSetShouldBlockOtherAbilities_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets rather ability block flags are enabled or disabled. Only valid on instanced abilities"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UGameplayAbility_NoRegister()
	{
		return UGameplayAbility::StaticClass();
	}
	UClass* Z_Construct_UClass_UGameplayAbility()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_GameplayAbilities();
			OuterClass = UGameplayAbility::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayAbility_BP_ApplyGameplayEffectToOwner());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayAbility_BP_ApplyGameplayEffectToTarget());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayAbility_BP_RemoveGameplayEffectFromOwnerWithAssetTags());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayAbility_BP_RemoveGameplayEffectFromOwnerWithGrantedTags());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayAbility_CancelTaskByInstanceName());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayAbility_ConfirmTaskByInstanceName());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayAbility_EndAbilityState());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayAbility_EndTaskByInstanceName());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayAbility_GetAbilityLevel());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayAbility_GetActorInfo());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayAbility_GetAvatarActorFromActorInfo());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayAbility_GetContextFromOwner());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayAbility_GetCurrentMontage());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayAbility_GetCurrentSourceObject());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayAbility_GetOutgoingGameplayEffectSpec());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayAbility_GetOwningActorFromActorInfo());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayAbility_GetOwningComponentFromActorInfo());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayAbility_K2_ActivateAbility());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayAbility_K2_ActivateAbilityFromEvent());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayAbility_K2_AddGameplayCue());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayAbility_K2_ApplyGameplayEffectSpecToOwner());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayAbility_K2_ApplyGameplayEffectSpecToTarget());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayAbility_K2_ApplyGameplayEffectToOwner());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayAbility_K2_ApplyGameplayEffectToTarget());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayAbility_K2_CanActivateAbility());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayAbility_K2_CheckAbilityCooldown());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayAbility_K2_CheckAbilityCost());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayAbility_K2_CommitAbility());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayAbility_K2_CommitAbilityCooldown());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayAbility_K2_CommitAbilityCost());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayAbility_K2_CommitExecute());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayAbility_K2_EndAbility());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayAbility_K2_ExecuteGameplayCue());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayAbility_K2_ExecuteGameplayCueWithParams());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayAbility_K2_OnEndAbility());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayAbility_K2_RemoveGameplayCue());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayAbility_K2_ShouldAbilityRespondToEvent());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayAbility_MakeOutgoingGameplayEffectSpec());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayAbility_MakeTargetLocationInfoFromOwnerActor());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayAbility_MakeTargetLocationInfoFromOwnerSkeletalMeshComponent());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayAbility_MontageJumpToSection());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayAbility_MontageSetNextSectionName());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayAbility_MontageStop());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayAbility_SendGameplayEvent());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayAbility_SetCanBeCanceled());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayAbility_SetShouldBlockOtherAbilities());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsBlockingOtherAbilities, UGameplayAbility, bool);
				UProperty* NewProp_bIsBlockingOtherAbilities = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsBlockingOtherAbilities"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsBlockingOtherAbilities, UGameplayAbility), 0x0000080000000000, CPP_BOOL_PROPERTY_BITMASK(bIsBlockingOtherAbilities, UGameplayAbility), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsCancelable, UGameplayAbility, bool);
				UProperty* NewProp_bIsCancelable = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsCancelable"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsCancelable, UGameplayAbility), 0x0000080000000000, CPP_BOOL_PROPERTY_BITMASK(bIsCancelable, UGameplayAbility), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsActive, UGameplayAbility, bool);
				UProperty* NewProp_bIsActive = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsActive"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsActive, UGameplayAbility), 0x0000080000000000, CPP_BOOL_PROPERTY_BITMASK(bIsActive, UGameplayAbility), sizeof(bool), true);
				UProperty* NewProp_CurrentMontage = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CurrentMontage"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(CurrentMontage, UGameplayAbility), 0x0000080000000000, Z_Construct_UClass_UAnimMontage_NoRegister());
				UProperty* NewProp_TargetBlockedTags = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TargetBlockedTags"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TargetBlockedTags, UGameplayAbility), 0x0000080000010001, Z_Construct_UScriptStruct_FGameplayTagContainer());
				UProperty* NewProp_TargetRequiredTags = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TargetRequiredTags"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TargetRequiredTags, UGameplayAbility), 0x0000080000010001, Z_Construct_UScriptStruct_FGameplayTagContainer());
				UProperty* NewProp_SourceBlockedTags = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SourceBlockedTags"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SourceBlockedTags, UGameplayAbility), 0x0000080000010001, Z_Construct_UScriptStruct_FGameplayTagContainer());
				UProperty* NewProp_SourceRequiredTags = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SourceRequiredTags"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SourceRequiredTags, UGameplayAbility), 0x0000080000010001, Z_Construct_UScriptStruct_FGameplayTagContainer());
				UProperty* NewProp_ActivationBlockedTags = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ActivationBlockedTags"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ActivationBlockedTags, UGameplayAbility), 0x0000080000010001, Z_Construct_UScriptStruct_FGameplayTagContainer());
				UProperty* NewProp_ActivationRequiredTags = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ActivationRequiredTags"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ActivationRequiredTags, UGameplayAbility), 0x0000080000010001, Z_Construct_UScriptStruct_FGameplayTagContainer());
				UProperty* NewProp_ActivationOwnedTags = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ActivationOwnedTags"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ActivationOwnedTags, UGameplayAbility), 0x0000080000010001, Z_Construct_UScriptStruct_FGameplayTagContainer());
				UProperty* NewProp_BlockAbilitiesWithTag = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BlockAbilitiesWithTag"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(BlockAbilitiesWithTag, UGameplayAbility), 0x0000080000010001, Z_Construct_UScriptStruct_FGameplayTagContainer());
				UProperty* NewProp_CancelAbilitiesWithTag = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CancelAbilitiesWithTag"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(CancelAbilitiesWithTag, UGameplayAbility), 0x0000080000010001, Z_Construct_UScriptStruct_FGameplayTagContainer());
				UProperty* NewProp_ConstTagQuery = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConstTagQuery"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ConstTagQuery, UGameplayAbility), 0x0000080000030015, Z_Construct_UScriptStruct_FGameplayTagQuery());
				UProperty* NewProp_CancelAbilitiesMatchingTagQuery = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CancelAbilitiesMatchingTagQuery"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(CancelAbilitiesMatchingTagQuery, UGameplayAbility), 0x0000080000010001, Z_Construct_UScriptStruct_FGameplayTagQuery());
				UProperty* NewProp_CooldownGameplayEffect = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CooldownGameplayEffect"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(CooldownGameplayEffect, UGameplayAbility), 0x0000080000030001, Z_Construct_UClass_UGameplayEffect_NoRegister());
				UProperty* NewProp_CooldownGameplayEffectClass = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CooldownGameplayEffectClass"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(CooldownGameplayEffectClass, UGameplayAbility), 0x0004080000010001, Z_Construct_UClass_UGameplayEffect_NoRegister());
				UProperty* NewProp_AbilityTriggers = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AbilityTriggers"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(AbilityTriggers, UGameplayAbility), 0x0000080000010001);
				UProperty* NewProp_AbilityTriggers_Inner = new(EC_InternalUseOnlyConstructor, NewProp_AbilityTriggers, TEXT("AbilityTriggers"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FAbilityTriggerData());
				UProperty* NewProp_CostGameplayEffect = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CostGameplayEffect"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(CostGameplayEffect, UGameplayAbility), 0x0000080000030001, Z_Construct_UClass_UGameplayEffect_NoRegister());
				UProperty* NewProp_CostGameplayEffectClass = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CostGameplayEffectClass"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(CostGameplayEffectClass, UGameplayAbility), 0x0004080000010001, Z_Construct_UClass_UGameplayEffect_NoRegister());
				UProperty* NewProp_NetExecutionPolicy = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NetExecutionPolicy"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(NetExecutionPolicy, UGameplayAbility), 0x0000080000010001, Z_Construct_UEnum_GameplayAbilities_EGameplayAbilityNetExecutionPolicy());
				UProperty* NewProp_CurrentEventData = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CurrentEventData"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(CurrentEventData, UGameplayAbility), 0x0000080000000014, Z_Construct_UScriptStruct_FGameplayEventData());
				UProperty* NewProp_CurrentActivationInfo = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CurrentActivationInfo"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(CurrentActivationInfo, UGameplayAbility), 0x0000080000000014, Z_Construct_UScriptStruct_FGameplayAbilityActivationInfo());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bRetriggerInstancedAbility, UGameplayAbility, bool);
				UProperty* NewProp_bRetriggerInstancedAbility = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bRetriggerInstancedAbility"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bRetriggerInstancedAbility, UGameplayAbility), 0x0000080000010001, CPP_BOOL_PROPERTY_BITMASK(bRetriggerInstancedAbility, UGameplayAbility), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bServerRespectsRemoteAbilityCancellation, UGameplayAbility, bool);
				UProperty* NewProp_bServerRespectsRemoteAbilityCancellation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bServerRespectsRemoteAbilityCancellation"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bServerRespectsRemoteAbilityCancellation, UGameplayAbility), 0x0000080000010001, CPP_BOOL_PROPERTY_BITMASK(bServerRespectsRemoteAbilityCancellation, UGameplayAbility), sizeof(bool), true);
				UProperty* NewProp_InstancingPolicy = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InstancingPolicy"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(InstancingPolicy, UGameplayAbility), 0x0000080000010001, Z_Construct_UEnum_GameplayAbilities_EGameplayAbilityInstancingPolicy());
				UProperty* NewProp_ReplicationPolicy = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ReplicationPolicy"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(ReplicationPolicy, UGameplayAbility), 0x0000080000010001, Z_Construct_UEnum_GameplayAbilities_EGameplayAbilityReplicationPolicy());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bReplicateInputDirectly, UGameplayAbility, bool);
				UProperty* NewProp_bReplicateInputDirectly = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bReplicateInputDirectly"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bReplicateInputDirectly, UGameplayAbility), 0x0000000000010001, CPP_BOOL_PROPERTY_BITMASK(bReplicateInputDirectly, UGameplayAbility), sizeof(bool), true);
				UProperty* NewProp_AbilityTags = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AbilityTags"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(AbilityTags, UGameplayAbility), 0x0000000000010001, Z_Construct_UScriptStruct_FGameplayTagContainer());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayAbility_BP_ApplyGameplayEffectToOwner()); // 3340019581
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayAbility_BP_ApplyGameplayEffectToTarget()); // 2289910316
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayAbility_BP_RemoveGameplayEffectFromOwnerWithAssetTags()); // 122187086
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayAbility_BP_RemoveGameplayEffectFromOwnerWithGrantedTags()); // 2858614309
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayAbility_CancelTaskByInstanceName()); // 3722359766
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayAbility_ConfirmTaskByInstanceName()); // 325440927
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayAbility_EndAbilityState()); // 3907308373
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayAbility_EndTaskByInstanceName()); // 3122435929
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayAbility_GetAbilityLevel()); // 141559276
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayAbility_GetActorInfo()); // 3583580416
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayAbility_GetAvatarActorFromActorInfo()); // 1397776242
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayAbility_GetContextFromOwner()); // 758479815
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayAbility_GetCurrentMontage()); // 654914857
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayAbility_GetCurrentSourceObject()); // 2836644299
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayAbility_GetOutgoingGameplayEffectSpec()); // 4033347944
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayAbility_GetOwningActorFromActorInfo()); // 3894995693
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayAbility_GetOwningComponentFromActorInfo()); // 914853603
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayAbility_K2_ActivateAbility()); // 3423970628
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayAbility_K2_ActivateAbilityFromEvent()); // 3662532771
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayAbility_K2_AddGameplayCue()); // 3939953970
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayAbility_K2_ApplyGameplayEffectSpecToOwner()); // 2270503194
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayAbility_K2_ApplyGameplayEffectSpecToTarget()); // 3139560109
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayAbility_K2_ApplyGameplayEffectToOwner()); // 2519482334
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayAbility_K2_ApplyGameplayEffectToTarget()); // 1379329841
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayAbility_K2_CanActivateAbility()); // 3394438631
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayAbility_K2_CheckAbilityCooldown()); // 2122283146
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayAbility_K2_CheckAbilityCost()); // 440363757
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayAbility_K2_CommitAbility()); // 3992238120
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayAbility_K2_CommitAbilityCooldown()); // 1164416453
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayAbility_K2_CommitAbilityCost()); // 754245438
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayAbility_K2_CommitExecute()); // 3835141311
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayAbility_K2_EndAbility()); // 1064847844
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayAbility_K2_ExecuteGameplayCue()); // 3645275164
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayAbility_K2_ExecuteGameplayCueWithParams()); // 1179984177
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayAbility_K2_OnEndAbility()); // 3737507002
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayAbility_K2_RemoveGameplayCue()); // 2857763541
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayAbility_K2_ShouldAbilityRespondToEvent()); // 830815718
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayAbility_MakeOutgoingGameplayEffectSpec()); // 2994318520
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayAbility_MakeTargetLocationInfoFromOwnerActor()); // 11061060
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayAbility_MakeTargetLocationInfoFromOwnerSkeletalMeshComponent()); // 1968361758
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayAbility_MontageJumpToSection()); // 2093268637
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayAbility_MontageSetNextSectionName()); // 297500514
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayAbility_MontageStop()); // 1929284102
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayAbility_SendGameplayEvent()); // 1706661069
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayAbility_SetCanBeCanceled()); // 2638259984
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayAbility_SetShouldBlockOtherAbilities()); // 374065306
				OuterClass->Interfaces.Add(FImplementedInterface(Z_Construct_UClass_UGameplayTaskOwnerInterface_NoRegister(), VTABLE_OFFSET(UGameplayAbility, IGameplayTaskOwnerInterface), false ));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Abilities/GameplayAbility.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Abilities define custom gameplay logic that can be activated by players or external game logic."));
				MetaData->SetValue(NewProp_bIsBlockingOtherAbilities, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
				MetaData->SetValue(NewProp_bIsBlockingOtherAbilities, TEXT("ToolTip"), TEXT("True if the ability block flags are currently enabled"));
				MetaData->SetValue(NewProp_bIsCancelable, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
				MetaData->SetValue(NewProp_bIsCancelable, TEXT("ToolTip"), TEXT("True if the ability is currently cancelable, if not will only be canceled by hard EndAbility calls"));
				MetaData->SetValue(NewProp_bIsActive, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
				MetaData->SetValue(NewProp_bIsActive, TEXT("ToolTip"), TEXT("True if the ability is currently active. For instance per owner abilities"));
				MetaData->SetValue(NewProp_CurrentMontage, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
				MetaData->SetValue(NewProp_CurrentMontage, TEXT("ToolTip"), TEXT("Active montage being played by this ability"));
				MetaData->SetValue(NewProp_TargetBlockedTags, TEXT("Category"), TEXT("Tags"));
				MetaData->SetValue(NewProp_TargetBlockedTags, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
				MetaData->SetValue(NewProp_TargetBlockedTags, TEXT("ToolTip"), TEXT("This ability is blocked if the target actor/component has any of these tags"));
				MetaData->SetValue(NewProp_TargetRequiredTags, TEXT("Category"), TEXT("Tags"));
				MetaData->SetValue(NewProp_TargetRequiredTags, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
				MetaData->SetValue(NewProp_TargetRequiredTags, TEXT("ToolTip"), TEXT("This ability can only be activated if the target actor/component has all of these tags"));
				MetaData->SetValue(NewProp_SourceBlockedTags, TEXT("Category"), TEXT("Tags"));
				MetaData->SetValue(NewProp_SourceBlockedTags, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
				MetaData->SetValue(NewProp_SourceBlockedTags, TEXT("ToolTip"), TEXT("This ability is blocked if the source actor/component has any of these tags"));
				MetaData->SetValue(NewProp_SourceRequiredTags, TEXT("Category"), TEXT("Tags"));
				MetaData->SetValue(NewProp_SourceRequiredTags, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
				MetaData->SetValue(NewProp_SourceRequiredTags, TEXT("ToolTip"), TEXT("This ability can only be activated if the source actor/component has all of these tags"));
				MetaData->SetValue(NewProp_ActivationBlockedTags, TEXT("Category"), TEXT("Tags"));
				MetaData->SetValue(NewProp_ActivationBlockedTags, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
				MetaData->SetValue(NewProp_ActivationBlockedTags, TEXT("ToolTip"), TEXT("This ability is blocked if the activating actor/component has any of these tags"));
				MetaData->SetValue(NewProp_ActivationRequiredTags, TEXT("Category"), TEXT("Tags"));
				MetaData->SetValue(NewProp_ActivationRequiredTags, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
				MetaData->SetValue(NewProp_ActivationRequiredTags, TEXT("ToolTip"), TEXT("This ability can only be activated if the activating actor/component has all of these tags"));
				MetaData->SetValue(NewProp_ActivationOwnedTags, TEXT("Category"), TEXT("Tags"));
				MetaData->SetValue(NewProp_ActivationOwnedTags, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
				MetaData->SetValue(NewProp_ActivationOwnedTags, TEXT("ToolTip"), TEXT("Tags to apply to activating owner while this ability is active"));
				MetaData->SetValue(NewProp_BlockAbilitiesWithTag, TEXT("Category"), TEXT("Tags"));
				MetaData->SetValue(NewProp_BlockAbilitiesWithTag, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
				MetaData->SetValue(NewProp_BlockAbilitiesWithTag, TEXT("ToolTip"), TEXT("Abilities with these tags are blocked while this ability is active"));
				MetaData->SetValue(NewProp_CancelAbilitiesWithTag, TEXT("Category"), TEXT("Tags"));
				MetaData->SetValue(NewProp_CancelAbilitiesWithTag, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
				MetaData->SetValue(NewProp_CancelAbilitiesWithTag, TEXT("ToolTip"), TEXT("Abilities with these tags are cancelled when this ability is executed"));
				MetaData->SetValue(NewProp_ConstTagQuery, TEXT("Category"), TEXT("TagQueries"));
				MetaData->SetValue(NewProp_ConstTagQuery, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
				MetaData->SetValue(NewProp_CancelAbilitiesMatchingTagQuery, TEXT("Category"), TEXT("TagQueries"));
				MetaData->SetValue(NewProp_CancelAbilitiesMatchingTagQuery, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
				MetaData->SetValue(NewProp_CancelAbilitiesMatchingTagQuery, TEXT("ToolTip"), TEXT("Ability exclusion / canceling"));
				MetaData->SetValue(NewProp_CooldownGameplayEffect, TEXT("Category"), TEXT("Deprecated"));
				MetaData->SetValue(NewProp_CooldownGameplayEffect, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
				MetaData->SetValue(NewProp_CooldownGameplayEffect, TEXT("ToolTip"), TEXT("Deprecated. Use CooldownGameplayEffectClass instead"));
				MetaData->SetValue(NewProp_CooldownGameplayEffectClass, TEXT("Category"), TEXT("Cooldowns"));
				MetaData->SetValue(NewProp_CooldownGameplayEffectClass, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
				MetaData->SetValue(NewProp_CooldownGameplayEffectClass, TEXT("ToolTip"), TEXT("Deprecated? This GameplayEffect represents the cooldown. It will be applied when the ability is committed and the ability cannot be used again until it is expired."));
				MetaData->SetValue(NewProp_AbilityTriggers, TEXT("Category"), TEXT("Triggers"));
				MetaData->SetValue(NewProp_AbilityTriggers, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
				MetaData->SetValue(NewProp_AbilityTriggers, TEXT("ToolTip"), TEXT("Triggers to determine if this ability should execute in response to an event"));
				MetaData->SetValue(NewProp_CostGameplayEffect, TEXT("Category"), TEXT("Deprecated"));
				MetaData->SetValue(NewProp_CostGameplayEffect, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
				MetaData->SetValue(NewProp_CostGameplayEffect, TEXT("ToolTip"), TEXT("Deprecated. Use CostGameplayEffectClass instead"));
				MetaData->SetValue(NewProp_CostGameplayEffectClass, TEXT("Category"), TEXT("Costs"));
				MetaData->SetValue(NewProp_CostGameplayEffectClass, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
				MetaData->SetValue(NewProp_CostGameplayEffectClass, TEXT("ToolTip"), TEXT("This GameplayEffect represents the cost (mana, stamina, etc) of the ability. It will be applied when the ability is committed."));
				MetaData->SetValue(NewProp_NetExecutionPolicy, TEXT("Category"), TEXT("Advanced"));
				MetaData->SetValue(NewProp_NetExecutionPolicy, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
				MetaData->SetValue(NewProp_CurrentEventData, TEXT("Category"), TEXT("Ability"));
				MetaData->SetValue(NewProp_CurrentEventData, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
				MetaData->SetValue(NewProp_CurrentActivationInfo, TEXT("Category"), TEXT("Ability"));
				MetaData->SetValue(NewProp_CurrentActivationInfo, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
				MetaData->SetValue(NewProp_CurrentActivationInfo, TEXT("ToolTip"), TEXT("This is information specific to this instance of the ability. E.g, whether it is predicting, authoring, confirmed, etc."));
				MetaData->SetValue(NewProp_bRetriggerInstancedAbility, TEXT("Category"), TEXT("Advanced"));
				MetaData->SetValue(NewProp_bRetriggerInstancedAbility, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
				MetaData->SetValue(NewProp_bRetriggerInstancedAbility, TEXT("ToolTip"), TEXT("if true, and trying to activate an already active instanced ability, end it and re-trigger it."));
				MetaData->SetValue(NewProp_bServerRespectsRemoteAbilityCancellation, TEXT("Category"), TEXT("Advanced"));
				MetaData->SetValue(NewProp_bServerRespectsRemoteAbilityCancellation, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
				MetaData->SetValue(NewProp_bServerRespectsRemoteAbilityCancellation, TEXT("ToolTip"), TEXT("If this is set, the server-side version of the ability can be canceled by the client-side version. The client-side version can always be canceled by the server."));
				MetaData->SetValue(NewProp_InstancingPolicy, TEXT("Category"), TEXT("Advanced"));
				MetaData->SetValue(NewProp_InstancingPolicy, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
				MetaData->SetValue(NewProp_ReplicationPolicy, TEXT("Category"), TEXT("Advanced"));
				MetaData->SetValue(NewProp_ReplicationPolicy, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
				MetaData->SetValue(NewProp_bReplicateInputDirectly, TEXT("Category"), TEXT("Input"));
				MetaData->SetValue(NewProp_bReplicateInputDirectly, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
				MetaData->SetValue(NewProp_bReplicateInputDirectly, TEXT("ToolTip"), TEXT("If true, this ability will always replicate input press/release events to the server."));
				MetaData->SetValue(NewProp_AbilityTags, TEXT("Category"), TEXT("Tags"));
				MetaData->SetValue(NewProp_AbilityTags, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility.h"));
				MetaData->SetValue(NewProp_AbilityTags, TEXT("ToolTip"), TEXT("This ability has these tags"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UGameplayAbility(Z_Construct_UClass_UGameplayAbility, TEXT("UGameplayAbility"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UGameplayAbility);
	UScriptStruct* Z_Construct_UScriptStruct_FActiveGameplayCueContainer()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UScriptStruct_FActiveGameplayCueContainer_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("ActiveGameplayCueContainer"), sizeof(FActiveGameplayCueContainer), Get_Z_Construct_UScriptStruct_FActiveGameplayCueContainer_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ActiveGameplayCueContainer"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FFastArraySerializer(), new UScriptStruct::TCppStructOps<FActiveGameplayCueContainer>, EStructFlags(0x00000005));
			UProperty* NewProp_Owner = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Owner"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Owner, FActiveGameplayCueContainer), 0x0000000000080008, Z_Construct_UClass_UAbilitySystemComponent_NoRegister());
			UProperty* NewProp_GameplayCues = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("GameplayCues"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(GameplayCues, FActiveGameplayCueContainer), 0x0000000000000000);
			UProperty* NewProp_GameplayCues_Inner = new(EC_InternalUseOnlyConstructor, NewProp_GameplayCues, TEXT("GameplayCues"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FActiveGameplayCue());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/GameplayCueInterface.h"));
			MetaData->SetValue(NewProp_Owner, TEXT("EditInline"), TEXT("true"));
			MetaData->SetValue(NewProp_Owner, TEXT("ModuleRelativePath"), TEXT("Public/GameplayCueInterface.h"));
			MetaData->SetValue(NewProp_GameplayCues, TEXT("ModuleRelativePath"), TEXT("Public/GameplayCueInterface.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FActiveGameplayCueContainer_CRC() { return 2584148216U; }
	UScriptStruct* Z_Construct_UScriptStruct_FActiveGameplayCue()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UScriptStruct_FActiveGameplayCue_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("ActiveGameplayCue"), sizeof(FActiveGameplayCue), Get_Z_Construct_UScriptStruct_FActiveGameplayCue_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ActiveGameplayCue"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FFastArraySerializerItem(), new UScriptStruct::TCppStructOps<FActiveGameplayCue>, EStructFlags(0x00000001));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bPredictivelyRemoved, FActiveGameplayCue, bool);
			UProperty* NewProp_bPredictivelyRemoved = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bPredictivelyRemoved"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bPredictivelyRemoved, FActiveGameplayCue), 0x0000000080000000, CPP_BOOL_PROPERTY_BITMASK(bPredictivelyRemoved, FActiveGameplayCue), sizeof(bool), true);
			UProperty* NewProp_PredictionKey = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PredictionKey"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PredictionKey, FActiveGameplayCue), 0x0000000000000000, Z_Construct_UScriptStruct_FPredictionKey());
			UProperty* NewProp_GameplayCueTag = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("GameplayCueTag"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(GameplayCueTag, FActiveGameplayCue), 0x0000000000000000, Z_Construct_UScriptStruct_FGameplayTag());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/GameplayCueInterface.h"));
			MetaData->SetValue(NewProp_bPredictivelyRemoved, TEXT("ModuleRelativePath"), TEXT("Public/GameplayCueInterface.h"));
			MetaData->SetValue(NewProp_bPredictivelyRemoved, TEXT("ToolTip"), TEXT("Has this been predictively removed on the client?"));
			MetaData->SetValue(NewProp_PredictionKey, TEXT("ModuleRelativePath"), TEXT("Public/GameplayCueInterface.h"));
			MetaData->SetValue(NewProp_GameplayCueTag, TEXT("ModuleRelativePath"), TEXT("Public/GameplayCueInterface.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FActiveGameplayCue_CRC() { return 2392563178U; }
	UFunction* Z_Construct_UFunction_UGameplayCueInterface_BlueprintCustomHandler()
	{
		UObject* Outer=Z_Construct_UClass_UGameplayCueInterface();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BlueprintCustomHandler"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08020808, 65535, sizeof(GameplayCueInterface_eventBlueprintCustomHandler_Parms));
			UProperty* NewProp_Parameters = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Parameters"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Parameters, GameplayCueInterface_eventBlueprintCustomHandler_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayCueParameters());
			UProperty* NewProp_EventType = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("EventType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(EventType, GameplayCueInterface_eventBlueprintCustomHandler_Parms), 0x0000000000000080, Z_Construct_UEnum_GameplayAbilities_EGameplayCueEvent());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("GameplayCue"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/GameplayCueInterface.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Internal function to map ufunctions directly to gameplaycue tags"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayCueInterface_ForwardGameplayCueToParent()
	{
		UObject* Outer=Z_Construct_UClass_UGameplayCueInterface();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ForwardGameplayCueToParent"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020408, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|GameplayCue"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/GameplayCueInterface.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Call from a Cue handler event to continue checking for additional, more generic handlers. Called from the ability system blueprint library"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UGameplayCueInterface_NoRegister()
	{
		return UGameplayCueInterface::StaticClass();
	}
	UClass* Z_Construct_UClass_UGameplayCueInterface()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			UInterface::StaticClass();
			Z_Construct_UPackage_GameplayAbilities();
			OuterClass = UGameplayCueInterface::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20084081;

				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayCueInterface_BlueprintCustomHandler());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayCueInterface_ForwardGameplayCueToParent());

				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayCueInterface_BlueprintCustomHandler()); // 852220185
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayCueInterface_ForwardGameplayCueToParent()); // 1030019348
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("CannotImplementInterfaceInBlueprint"), TEXT(""));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UGameplayCueInterface(Z_Construct_UClass_UGameplayCueInterface, TEXT("UGameplayCueInterface"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UGameplayCueInterface);
	UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_AbilityTargetDataFromActor()
	{
		struct AbilitySystemBlueprintLibrary_eventAbilityTargetDataFromActor_Parms
		{
			AActor* Actor;
			FGameplayAbilityTargetDataHandle ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilitySystemBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AbilityTargetDataFromActor"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(AbilitySystemBlueprintLibrary_eventAbilityTargetDataFromActor_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, AbilitySystemBlueprintLibrary_eventAbilityTargetDataFromActor_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FGameplayAbilityTargetDataHandle());
			UProperty* NewProp_Actor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Actor"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Actor, AbilitySystemBlueprintLibrary_eventAbilityTargetDataFromActor_Parms), 0x0000000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|TargetData"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemBlueprintLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_AbilityTargetDataFromActorArray()
	{
		struct AbilitySystemBlueprintLibrary_eventAbilityTargetDataFromActorArray_Parms
		{
			TArray<AActor*> ActorArray;
			bool OneTargetPerHandle;
			FGameplayAbilityTargetDataHandle ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilitySystemBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AbilityTargetDataFromActorArray"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(AbilitySystemBlueprintLibrary_eventAbilityTargetDataFromActorArray_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, AbilitySystemBlueprintLibrary_eventAbilityTargetDataFromActorArray_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FGameplayAbilityTargetDataHandle());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(OneTargetPerHandle, AbilitySystemBlueprintLibrary_eventAbilityTargetDataFromActorArray_Parms, bool);
			UProperty* NewProp_OneTargetPerHandle = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OneTargetPerHandle"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(OneTargetPerHandle, AbilitySystemBlueprintLibrary_eventAbilityTargetDataFromActorArray_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(OneTargetPerHandle, AbilitySystemBlueprintLibrary_eventAbilityTargetDataFromActorArray_Parms), sizeof(bool), true);
			UProperty* NewProp_ActorArray = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActorArray"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ActorArray, AbilitySystemBlueprintLibrary_eventAbilityTargetDataFromActorArray_Parms), 0x0000000000000080);
			UProperty* NewProp_ActorArray_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ActorArray, TEXT("ActorArray"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|TargetData"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemBlueprintLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_AbilityTargetDataFromHitResult()
	{
		struct AbilitySystemBlueprintLibrary_eventAbilityTargetDataFromHitResult_Parms
		{
			FHitResult HitResult;
			FGameplayAbilityTargetDataHandle ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilitySystemBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AbilityTargetDataFromHitResult"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(AbilitySystemBlueprintLibrary_eventAbilityTargetDataFromHitResult_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, AbilitySystemBlueprintLibrary_eventAbilityTargetDataFromHitResult_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FGameplayAbilityTargetDataHandle());
			UProperty* NewProp_HitResult = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("HitResult"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(HitResult, AbilitySystemBlueprintLibrary_eventAbilityTargetDataFromHitResult_Parms), 0x0000008000000080, Z_Construct_UScriptStruct_FHitResult());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|TargetData"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemBlueprintLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_AbilityTargetDataFromLocations()
	{
		struct AbilitySystemBlueprintLibrary_eventAbilityTargetDataFromLocations_Parms
		{
			FGameplayAbilityTargetingLocationInfo SourceLocation;
			FGameplayAbilityTargetingLocationInfo TargetLocation;
			FGameplayAbilityTargetDataHandle ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilitySystemBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AbilityTargetDataFromLocations"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(AbilitySystemBlueprintLibrary_eventAbilityTargetDataFromLocations_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, AbilitySystemBlueprintLibrary_eventAbilityTargetDataFromLocations_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FGameplayAbilityTargetDataHandle());
			UProperty* NewProp_TargetLocation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TargetLocation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TargetLocation, AbilitySystemBlueprintLibrary_eventAbilityTargetDataFromLocations_Parms), 0x0000008008000182, Z_Construct_UScriptStruct_FGameplayAbilityTargetingLocationInfo());
			UProperty* NewProp_SourceLocation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SourceLocation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SourceLocation, AbilitySystemBlueprintLibrary_eventAbilityTargetDataFromLocations_Parms), 0x0000008008000182, Z_Construct_UScriptStruct_FGameplayAbilityTargetingLocationInfo());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|TargetData"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemBlueprintLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_AddAssetTag()
	{
		struct AbilitySystemBlueprintLibrary_eventAddAssetTag_Parms
		{
			FGameplayEffectSpecHandle SpecHandle;
			FGameplayTag NewGameplayTag;
			FGameplayEffectSpecHandle ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilitySystemBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AddAssetTag"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(AbilitySystemBlueprintLibrary_eventAddAssetTag_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, AbilitySystemBlueprintLibrary_eventAddAssetTag_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FGameplayEffectSpecHandle());
			UProperty* NewProp_NewGameplayTag = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewGameplayTag"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(NewGameplayTag, AbilitySystemBlueprintLibrary_eventAddAssetTag_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayTag());
			UProperty* NewProp_SpecHandle = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SpecHandle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SpecHandle, AbilitySystemBlueprintLibrary_eventAddAssetTag_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayEffectSpecHandle());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|GameplayEffect"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Adds NewGameplayTag to this instance of the effect."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_AddAssetTags()
	{
		struct AbilitySystemBlueprintLibrary_eventAddAssetTags_Parms
		{
			FGameplayEffectSpecHandle SpecHandle;
			FGameplayTagContainer NewGameplayTags;
			FGameplayEffectSpecHandle ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilitySystemBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AddAssetTags"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(AbilitySystemBlueprintLibrary_eventAddAssetTags_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, AbilitySystemBlueprintLibrary_eventAddAssetTags_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FGameplayEffectSpecHandle());
			UProperty* NewProp_NewGameplayTags = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewGameplayTags"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(NewGameplayTags, AbilitySystemBlueprintLibrary_eventAddAssetTags_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayTagContainer());
			UProperty* NewProp_SpecHandle = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SpecHandle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SpecHandle, AbilitySystemBlueprintLibrary_eventAddAssetTags_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayEffectSpecHandle());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|GameplayEffect"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Adds NewGameplayTags to this instance of the effect."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_AddGrantedTag()
	{
		struct AbilitySystemBlueprintLibrary_eventAddGrantedTag_Parms
		{
			FGameplayEffectSpecHandle SpecHandle;
			FGameplayTag NewGameplayTag;
			FGameplayEffectSpecHandle ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilitySystemBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AddGrantedTag"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(AbilitySystemBlueprintLibrary_eventAddGrantedTag_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, AbilitySystemBlueprintLibrary_eventAddGrantedTag_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FGameplayEffectSpecHandle());
			UProperty* NewProp_NewGameplayTag = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewGameplayTag"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(NewGameplayTag, AbilitySystemBlueprintLibrary_eventAddGrantedTag_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayTag());
			UProperty* NewProp_SpecHandle = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SpecHandle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SpecHandle, AbilitySystemBlueprintLibrary_eventAddGrantedTag_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayEffectSpecHandle());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|GameplayEffect"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("This instance of the effect will now grant NewGameplayTag to the object that this effect is applied to."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_AddGrantedTags()
	{
		struct AbilitySystemBlueprintLibrary_eventAddGrantedTags_Parms
		{
			FGameplayEffectSpecHandle SpecHandle;
			FGameplayTagContainer NewGameplayTags;
			FGameplayEffectSpecHandle ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilitySystemBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AddGrantedTags"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(AbilitySystemBlueprintLibrary_eventAddGrantedTags_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, AbilitySystemBlueprintLibrary_eventAddGrantedTags_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FGameplayEffectSpecHandle());
			UProperty* NewProp_NewGameplayTags = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewGameplayTags"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(NewGameplayTags, AbilitySystemBlueprintLibrary_eventAddGrantedTags_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayTagContainer());
			UProperty* NewProp_SpecHandle = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SpecHandle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SpecHandle, AbilitySystemBlueprintLibrary_eventAddGrantedTags_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayEffectSpecHandle());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|GameplayEffect"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("This instance of the effect will now grant NewGameplayTags to the object that this effect is applied to."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_AddLinkedGameplayEffectSpec()
	{
		struct AbilitySystemBlueprintLibrary_eventAddLinkedGameplayEffectSpec_Parms
		{
			FGameplayEffectSpecHandle SpecHandle;
			FGameplayEffectSpecHandle LinkedGameplayEffectSpec;
			FGameplayEffectSpecHandle ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilitySystemBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AddLinkedGameplayEffectSpec"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(AbilitySystemBlueprintLibrary_eventAddLinkedGameplayEffectSpec_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, AbilitySystemBlueprintLibrary_eventAddLinkedGameplayEffectSpec_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FGameplayEffectSpecHandle());
			UProperty* NewProp_LinkedGameplayEffectSpec = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LinkedGameplayEffectSpec"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LinkedGameplayEffectSpec, AbilitySystemBlueprintLibrary_eventAddLinkedGameplayEffectSpec_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayEffectSpecHandle());
			UProperty* NewProp_SpecHandle = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SpecHandle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SpecHandle, AbilitySystemBlueprintLibrary_eventAddLinkedGameplayEffectSpec_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayEffectSpecHandle());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|GameplayEffect"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemBlueprintLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_AppendTargetDataHandle()
	{
		struct AbilitySystemBlueprintLibrary_eventAppendTargetDataHandle_Parms
		{
			FGameplayAbilityTargetDataHandle TargetHandle;
			FGameplayAbilityTargetDataHandle HandleToAdd;
			FGameplayAbilityTargetDataHandle ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilitySystemBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AppendTargetDataHandle"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(AbilitySystemBlueprintLibrary_eventAppendTargetDataHandle_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, AbilitySystemBlueprintLibrary_eventAppendTargetDataHandle_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FGameplayAbilityTargetDataHandle());
			UProperty* NewProp_HandleToAdd = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("HandleToAdd"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(HandleToAdd, AbilitySystemBlueprintLibrary_eventAppendTargetDataHandle_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayAbilityTargetDataHandle());
			UProperty* NewProp_TargetHandle = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TargetHandle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TargetHandle, AbilitySystemBlueprintLibrary_eventAppendTargetDataHandle_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayAbilityTargetDataHandle());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|TargetData"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("TargetData"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_AssignSetByCallerMagnitude()
	{
		struct AbilitySystemBlueprintLibrary_eventAssignSetByCallerMagnitude_Parms
		{
			FGameplayEffectSpecHandle SpecHandle;
			FName DataName;
			float Magnitude;
			FGameplayEffectSpecHandle ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilitySystemBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AssignSetByCallerMagnitude"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(AbilitySystemBlueprintLibrary_eventAssignSetByCallerMagnitude_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, AbilitySystemBlueprintLibrary_eventAssignSetByCallerMagnitude_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FGameplayEffectSpecHandle());
			UProperty* NewProp_Magnitude = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Magnitude"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Magnitude, AbilitySystemBlueprintLibrary_eventAssignSetByCallerMagnitude_Parms), 0x0000000000000080);
			UProperty* NewProp_DataName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DataName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(DataName, AbilitySystemBlueprintLibrary_eventAssignSetByCallerMagnitude_Parms), 0x0000000000000080);
			UProperty* NewProp_SpecHandle = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SpecHandle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SpecHandle, AbilitySystemBlueprintLibrary_eventAssignSetByCallerMagnitude_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayEffectSpecHandle());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|GameplayEffect"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("GameplayEffectSpec"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_DoesGameplayCueMeetTagRequirements()
	{
		struct AbilitySystemBlueprintLibrary_eventDoesGameplayCueMeetTagRequirements_Parms
		{
			FGameplayCueParameters Parameters;
			FGameplayTagRequirements SourceTagReqs;
			FGameplayTagRequirements TargetTagReqs;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilitySystemBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DoesGameplayCueMeetTagRequirements"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(AbilitySystemBlueprintLibrary_eventDoesGameplayCueMeetTagRequirements_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, AbilitySystemBlueprintLibrary_eventDoesGameplayCueMeetTagRequirements_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, AbilitySystemBlueprintLibrary_eventDoesGameplayCueMeetTagRequirements_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, AbilitySystemBlueprintLibrary_eventDoesGameplayCueMeetTagRequirements_Parms), sizeof(bool), true);
			UProperty* NewProp_TargetTagReqs = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TargetTagReqs"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TargetTagReqs, AbilitySystemBlueprintLibrary_eventDoesGameplayCueMeetTagRequirements_Parms), 0x0000000008000180, Z_Construct_UScriptStruct_FGameplayTagRequirements());
			UProperty* NewProp_SourceTagReqs = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SourceTagReqs"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SourceTagReqs, AbilitySystemBlueprintLibrary_eventDoesGameplayCueMeetTagRequirements_Parms), 0x0000000008000180, Z_Construct_UScriptStruct_FGameplayTagRequirements());
			UProperty* NewProp_Parameters = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Parameters"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Parameters, AbilitySystemBlueprintLibrary_eventDoesGameplayCueMeetTagRequirements_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayCueParameters());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|GameplayCue"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if the aggregated source and target tags from the effect spec meets the tag requirements"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_DoesTargetDataContainActor()
	{
		struct AbilitySystemBlueprintLibrary_eventDoesTargetDataContainActor_Parms
		{
			FGameplayAbilityTargetDataHandle TargetData;
			int32 Index;
			AActor* Actor;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilitySystemBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DoesTargetDataContainActor"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(AbilitySystemBlueprintLibrary_eventDoesTargetDataContainActor_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, AbilitySystemBlueprintLibrary_eventDoesTargetDataContainActor_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, AbilitySystemBlueprintLibrary_eventDoesTargetDataContainActor_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, AbilitySystemBlueprintLibrary_eventDoesTargetDataContainActor_Parms), sizeof(bool), true);
			UProperty* NewProp_Actor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Actor"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Actor, AbilitySystemBlueprintLibrary_eventDoesTargetDataContainActor_Parms), 0x0000000000000080, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_Index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Index"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Index, AbilitySystemBlueprintLibrary_eventDoesTargetDataContainActor_Parms), 0x0000000000000080);
			UProperty* NewProp_TargetData = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TargetData"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TargetData, AbilitySystemBlueprintLibrary_eventDoesTargetDataContainActor_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayAbilityTargetDataHandle());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|TargetData"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if the given TargetData has the actor passed in targeted"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_EffectContextGetEffectCauser()
	{
		struct AbilitySystemBlueprintLibrary_eventEffectContextGetEffectCauser_Parms
		{
			FGameplayEffectContextHandle EffectContext;
			AActor* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilitySystemBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EffectContextGetEffectCauser"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(AbilitySystemBlueprintLibrary_eventEffectContextGetEffectCauser_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, AbilitySystemBlueprintLibrary_eventEffectContextGetEffectCauser_Parms), 0x0000000000000580, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_EffectContext = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("EffectContext"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(EffectContext, AbilitySystemBlueprintLibrary_eventEffectContextGetEffectCauser_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayEffectContextHandle());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|EffectContext"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("GetEffectCauser"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the physical actor that caused the effect, possibly a projectile or weapon"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_EffectContextGetHitResult()
	{
		struct AbilitySystemBlueprintLibrary_eventEffectContextGetHitResult_Parms
		{
			FGameplayEffectContextHandle EffectContext;
			FHitResult ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilitySystemBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EffectContextGetHitResult"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(AbilitySystemBlueprintLibrary_eventEffectContextGetHitResult_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, AbilitySystemBlueprintLibrary_eventEffectContextGetHitResult_Parms), 0x0000008000000580, Z_Construct_UScriptStruct_FHitResult());
			UProperty* NewProp_EffectContext = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("EffectContext"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(EffectContext, AbilitySystemBlueprintLibrary_eventEffectContextGetHitResult_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayEffectContextHandle());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|EffectContext"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("GetHitResult"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemBlueprintLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_EffectContextGetInstigatorActor()
	{
		struct AbilitySystemBlueprintLibrary_eventEffectContextGetInstigatorActor_Parms
		{
			FGameplayEffectContextHandle EffectContext;
			AActor* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilitySystemBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EffectContextGetInstigatorActor"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(AbilitySystemBlueprintLibrary_eventEffectContextGetInstigatorActor_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, AbilitySystemBlueprintLibrary_eventEffectContextGetInstigatorActor_Parms), 0x0000000000000580, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_EffectContext = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("EffectContext"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(EffectContext, AbilitySystemBlueprintLibrary_eventEffectContextGetInstigatorActor_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayEffectContextHandle());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|EffectContext"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("GetInstigatorActor"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the instigating actor (that holds the ability system component) of the EffectContext"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_EffectContextGetOrigin()
	{
		struct AbilitySystemBlueprintLibrary_eventEffectContextGetOrigin_Parms
		{
			FGameplayEffectContextHandle EffectContext;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilitySystemBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EffectContextGetOrigin"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(AbilitySystemBlueprintLibrary_eventEffectContextGetOrigin_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, AbilitySystemBlueprintLibrary_eventEffectContextGetOrigin_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_EffectContext = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("EffectContext"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(EffectContext, AbilitySystemBlueprintLibrary_eventEffectContextGetOrigin_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayEffectContextHandle());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|EffectContext"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("GetOrigin"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the location the effect originated from"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_EffectContextGetOriginalInstigatorActor()
	{
		struct AbilitySystemBlueprintLibrary_eventEffectContextGetOriginalInstigatorActor_Parms
		{
			FGameplayEffectContextHandle EffectContext;
			AActor* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilitySystemBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EffectContextGetOriginalInstigatorActor"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(AbilitySystemBlueprintLibrary_eventEffectContextGetOriginalInstigatorActor_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, AbilitySystemBlueprintLibrary_eventEffectContextGetOriginalInstigatorActor_Parms), 0x0000000000000580, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_EffectContext = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("EffectContext"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(EffectContext, AbilitySystemBlueprintLibrary_eventEffectContextGetOriginalInstigatorActor_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayEffectContextHandle());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|EffectContext"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("GetOriginalInstigatorActor"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the original instigator actor that started the chain of events to cause this effect"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_EffectContextGetSourceObject()
	{
		struct AbilitySystemBlueprintLibrary_eventEffectContextGetSourceObject_Parms
		{
			FGameplayEffectContextHandle EffectContext;
			UObject* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilitySystemBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EffectContextGetSourceObject"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(AbilitySystemBlueprintLibrary_eventEffectContextGetSourceObject_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, AbilitySystemBlueprintLibrary_eventEffectContextGetSourceObject_Parms), 0x0000000000000580, Z_Construct_UClass_UObject_NoRegister());
			UProperty* NewProp_EffectContext = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("EffectContext"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(EffectContext, AbilitySystemBlueprintLibrary_eventEffectContextGetSourceObject_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayEffectContextHandle());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|EffectContext"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("GetSourceObject"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the source object of the effect."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_EffectContextHasHitResult()
	{
		struct AbilitySystemBlueprintLibrary_eventEffectContextHasHitResult_Parms
		{
			FGameplayEffectContextHandle EffectContext;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilitySystemBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EffectContextHasHitResult"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(AbilitySystemBlueprintLibrary_eventEffectContextHasHitResult_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, AbilitySystemBlueprintLibrary_eventEffectContextHasHitResult_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, AbilitySystemBlueprintLibrary_eventEffectContextHasHitResult_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, AbilitySystemBlueprintLibrary_eventEffectContextHasHitResult_Parms), sizeof(bool), true);
			UProperty* NewProp_EffectContext = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("EffectContext"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(EffectContext, AbilitySystemBlueprintLibrary_eventEffectContextHasHitResult_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayEffectContextHandle());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|EffectContext"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("HasHitResult"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemBlueprintLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_EffectContextIsInstigatorLocallyControlled()
	{
		struct AbilitySystemBlueprintLibrary_eventEffectContextIsInstigatorLocallyControlled_Parms
		{
			FGameplayEffectContextHandle EffectContext;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilitySystemBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EffectContextIsInstigatorLocallyControlled"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(AbilitySystemBlueprintLibrary_eventEffectContextIsInstigatorLocallyControlled_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, AbilitySystemBlueprintLibrary_eventEffectContextIsInstigatorLocallyControlled_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, AbilitySystemBlueprintLibrary_eventEffectContextIsInstigatorLocallyControlled_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, AbilitySystemBlueprintLibrary_eventEffectContextIsInstigatorLocallyControlled_Parms), sizeof(bool), true);
			UProperty* NewProp_EffectContext = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("EffectContext"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(EffectContext, AbilitySystemBlueprintLibrary_eventEffectContextIsInstigatorLocallyControlled_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayEffectContextHandle());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|EffectContext"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("IsInstigatorLocallyControlled"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("GameplayEffectContext"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_FilterTargetData()
	{
		struct AbilitySystemBlueprintLibrary_eventFilterTargetData_Parms
		{
			FGameplayAbilityTargetDataHandle TargetDataHandle;
			FGameplayTargetDataFilterHandle ActorFilterClass;
			FGameplayAbilityTargetDataHandle ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilitySystemBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FilterTargetData"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(AbilitySystemBlueprintLibrary_eventFilterTargetData_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, AbilitySystemBlueprintLibrary_eventFilterTargetData_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FGameplayAbilityTargetDataHandle());
			UProperty* NewProp_ActorFilterClass = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActorFilterClass"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ActorFilterClass, AbilitySystemBlueprintLibrary_eventFilterTargetData_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayTargetDataFilterHandle());
			UProperty* NewProp_TargetDataHandle = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TargetDataHandle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TargetDataHandle, AbilitySystemBlueprintLibrary_eventFilterTargetData_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayAbilityTargetDataHandle());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|TargetData"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Create a new target data handle with filtration performed on the data"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_ForwardGameplayCueToTarget()
	{
		struct AbilitySystemBlueprintLibrary_eventForwardGameplayCueToTarget_Parms
		{
			TScriptInterface<IGameplayCueInterface> TargetCueInterface;
			TEnumAsByte<EGameplayCueEvent::Type> EventType;
			FGameplayCueParameters Parameters;
		};
		UObject* Outer=Z_Construct_UClass_UAbilitySystemBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ForwardGameplayCueToTarget"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(AbilitySystemBlueprintLibrary_eventForwardGameplayCueToTarget_Parms));
			UProperty* NewProp_Parameters = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Parameters"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Parameters, AbilitySystemBlueprintLibrary_eventForwardGameplayCueToTarget_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayCueParameters());
			UProperty* NewProp_EventType = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("EventType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(EventType, AbilitySystemBlueprintLibrary_eventForwardGameplayCueToTarget_Parms), 0x0000000000000080, Z_Construct_UEnum_GameplayAbilities_EGameplayCueEvent());
			UProperty* NewProp_TargetCueInterface = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TargetCueInterface"), RF_Public|RF_Transient|RF_Native) UInterfaceProperty(CPP_PROPERTY_BASE(TargetCueInterface, AbilitySystemBlueprintLibrary_eventForwardGameplayCueToTarget_Parms), 0x0004000000000080, Z_Construct_UClass_UGameplayCueInterface_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|GameplayCue"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Forwards the gameplay cue to another gameplay cue interface object"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_GetAbilitySystemComponent()
	{
		struct AbilitySystemBlueprintLibrary_eventGetAbilitySystemComponent_Parms
		{
			AActor* Actor;
			UAbilitySystemComponent* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilitySystemBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetAbilitySystemComponent"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(AbilitySystemBlueprintLibrary_eventGetAbilitySystemComponent_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, AbilitySystemBlueprintLibrary_eventGetAbilitySystemComponent_Parms), 0x0000000000080588, Z_Construct_UClass_UAbilitySystemComponent_NoRegister());
			UProperty* NewProp_Actor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Actor"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Actor, AbilitySystemBlueprintLibrary_eventGetAbilitySystemComponent_Parms), 0x0000000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemBlueprintLibrary.h"));
			MetaData->SetValue(NewProp_ReturnValue, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_GetActiveGameplayEffectStackCount()
	{
		struct AbilitySystemBlueprintLibrary_eventGetActiveGameplayEffectStackCount_Parms
		{
			FActiveGameplayEffectHandle ActiveHandle;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilitySystemBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetActiveGameplayEffectStackCount"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(AbilitySystemBlueprintLibrary_eventGetActiveGameplayEffectStackCount_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, AbilitySystemBlueprintLibrary_eventGetActiveGameplayEffectStackCount_Parms), 0x0000000000000580);
			UProperty* NewProp_ActiveHandle = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActiveHandle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ActiveHandle, AbilitySystemBlueprintLibrary_eventGetActiveGameplayEffectStackCount_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FActiveGameplayEffectHandle());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|GameplayEffect"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns current stack count of an active Gameplay Effect. Will return 0 if the GameplayEffect is no longer valid."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_GetActorByIndex()
	{
		struct AbilitySystemBlueprintLibrary_eventGetActorByIndex_Parms
		{
			FGameplayCueParameters Parameters;
			int32 Index;
			AActor* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilitySystemBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetActorByIndex"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(AbilitySystemBlueprintLibrary_eventGetActorByIndex_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, AbilitySystemBlueprintLibrary_eventGetActorByIndex_Parms), 0x0000000000000580, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_Index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Index"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Index, AbilitySystemBlueprintLibrary_eventGetActorByIndex_Parms), 0x0000000000000080);
			UProperty* NewProp_Parameters = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Parameters"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Parameters, AbilitySystemBlueprintLibrary_eventGetActorByIndex_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayCueParameters());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|GameplayCue"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemBlueprintLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_GetActorCount()
	{
		struct AbilitySystemBlueprintLibrary_eventGetActorCount_Parms
		{
			FGameplayCueParameters Parameters;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilitySystemBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetActorCount"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(AbilitySystemBlueprintLibrary_eventGetActorCount_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, AbilitySystemBlueprintLibrary_eventGetActorCount_Parms), 0x0000000000000580);
			UProperty* NewProp_Parameters = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Parameters"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Parameters, AbilitySystemBlueprintLibrary_eventGetActorCount_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayCueParameters());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|GameplayCue"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemBlueprintLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_GetActorsFromTargetData()
	{
		struct AbilitySystemBlueprintLibrary_eventGetActorsFromTargetData_Parms
		{
			FGameplayAbilityTargetDataHandle TargetData;
			int32 Index;
			TArray<AActor*> ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilitySystemBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetActorsFromTargetData"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(AbilitySystemBlueprintLibrary_eventGetActorsFromTargetData_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ReturnValue, AbilitySystemBlueprintLibrary_eventGetActorsFromTargetData_Parms), 0x0000000000000580);
			UProperty* NewProp_ReturnValue_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ReturnValue, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_Index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Index"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Index, AbilitySystemBlueprintLibrary_eventGetActorsFromTargetData_Parms), 0x0000000000000080);
			UProperty* NewProp_TargetData = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TargetData"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TargetData, AbilitySystemBlueprintLibrary_eventGetActorsFromTargetData_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayAbilityTargetDataHandle());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|TargetData"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemBlueprintLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_GetDataCountFromTargetData()
	{
		struct AbilitySystemBlueprintLibrary_eventGetDataCountFromTargetData_Parms
		{
			FGameplayAbilityTargetDataHandle TargetData;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilitySystemBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetDataCountFromTargetData"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(AbilitySystemBlueprintLibrary_eventGetDataCountFromTargetData_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, AbilitySystemBlueprintLibrary_eventGetDataCountFromTargetData_Parms), 0x0000000000000580);
			UProperty* NewProp_TargetData = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TargetData"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TargetData, AbilitySystemBlueprintLibrary_eventGetDataCountFromTargetData_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayAbilityTargetDataHandle());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|TargetData"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemBlueprintLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_GetFloatAttribute()
	{
		struct AbilitySystemBlueprintLibrary_eventGetFloatAttribute_Parms
		{
			const AActor* Actor;
			FGameplayAttribute Attribute;
			bool bSuccessfullyFoundAttribute;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilitySystemBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetFloatAttribute"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(AbilitySystemBlueprintLibrary_eventGetFloatAttribute_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, AbilitySystemBlueprintLibrary_eventGetFloatAttribute_Parms), 0x0000000000000580);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSuccessfullyFoundAttribute, AbilitySystemBlueprintLibrary_eventGetFloatAttribute_Parms, bool);
			UProperty* NewProp_bSuccessfullyFoundAttribute = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bSuccessfullyFoundAttribute"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSuccessfullyFoundAttribute, AbilitySystemBlueprintLibrary_eventGetFloatAttribute_Parms), 0x0000000000000180, CPP_BOOL_PROPERTY_BITMASK(bSuccessfullyFoundAttribute, AbilitySystemBlueprintLibrary_eventGetFloatAttribute_Parms), sizeof(bool), true);
			UProperty* NewProp_Attribute = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Attribute"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Attribute, AbilitySystemBlueprintLibrary_eventGetFloatAttribute_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayAttribute());
			UProperty* NewProp_Actor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Actor"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Actor, AbilitySystemBlueprintLibrary_eventGetFloatAttribute_Parms), 0x0000000000000082, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|Attribute"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Attribute"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_GetGameplayCueDirection()
	{
		struct AbilitySystemBlueprintLibrary_eventGetGameplayCueDirection_Parms
		{
			AActor* TargetActor;
			FGameplayCueParameters Parameters;
			FVector Direction;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilitySystemBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetGameplayCueDirection"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(AbilitySystemBlueprintLibrary_eventGetGameplayCueDirection_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, AbilitySystemBlueprintLibrary_eventGetGameplayCueDirection_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, AbilitySystemBlueprintLibrary_eventGetGameplayCueDirection_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, AbilitySystemBlueprintLibrary_eventGetGameplayCueDirection_Parms), sizeof(bool), true);
			UProperty* NewProp_Direction = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Direction"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Direction, AbilitySystemBlueprintLibrary_eventGetGameplayCueDirection_Parms), 0x0000000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Parameters = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Parameters"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Parameters, AbilitySystemBlueprintLibrary_eventGetGameplayCueDirection_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayCueParameters());
			UProperty* NewProp_TargetActor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TargetActor"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(TargetActor, AbilitySystemBlueprintLibrary_eventGetGameplayCueDirection_Parms), 0x0000000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|GameplayCue"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the best normalized effect direction for this gameplay cue. This is useful for effects that require the direction of an enemy attack. Returns true if a valid direction could be calculated."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_GetGameplayCueEndLocationAndNormal()
	{
		struct AbilitySystemBlueprintLibrary_eventGetGameplayCueEndLocationAndNormal_Parms
		{
			AActor* TargetActor;
			FGameplayCueParameters Parameters;
			FVector Location;
			FVector Normal;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilitySystemBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetGameplayCueEndLocationAndNormal"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(AbilitySystemBlueprintLibrary_eventGetGameplayCueEndLocationAndNormal_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, AbilitySystemBlueprintLibrary_eventGetGameplayCueEndLocationAndNormal_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, AbilitySystemBlueprintLibrary_eventGetGameplayCueEndLocationAndNormal_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, AbilitySystemBlueprintLibrary_eventGetGameplayCueEndLocationAndNormal_Parms), sizeof(bool), true);
			UProperty* NewProp_Normal = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Normal"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Normal, AbilitySystemBlueprintLibrary_eventGetGameplayCueEndLocationAndNormal_Parms), 0x0000000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Location = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Location"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Location, AbilitySystemBlueprintLibrary_eventGetGameplayCueEndLocationAndNormal_Parms), 0x0000000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Parameters = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Parameters"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Parameters, AbilitySystemBlueprintLibrary_eventGetGameplayCueEndLocationAndNormal_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayCueParameters());
			UProperty* NewProp_TargetActor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TargetActor"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(TargetActor, AbilitySystemBlueprintLibrary_eventGetGameplayCueEndLocationAndNormal_Parms), 0x0000000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|GameplayCue"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the best end location and normal for this gameplay cue. If there is hit result data, it will return this. Otherwise it will return the target actor's location/rotation. If none of this is available, it will return false."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_GetHitResult()
	{
		struct AbilitySystemBlueprintLibrary_eventGetHitResult_Parms
		{
			FGameplayCueParameters Parameters;
			FHitResult ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilitySystemBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetHitResult"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(AbilitySystemBlueprintLibrary_eventGetHitResult_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, AbilitySystemBlueprintLibrary_eventGetHitResult_Parms), 0x0000008000000580, Z_Construct_UScriptStruct_FHitResult());
			UProperty* NewProp_Parameters = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Parameters"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Parameters, AbilitySystemBlueprintLibrary_eventGetHitResult_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayCueParameters());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|GameplayCue"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemBlueprintLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_GetHitResultFromTargetData()
	{
		struct AbilitySystemBlueprintLibrary_eventGetHitResultFromTargetData_Parms
		{
			FGameplayAbilityTargetDataHandle HitResult;
			int32 Index;
			FHitResult ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilitySystemBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetHitResultFromTargetData"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(AbilitySystemBlueprintLibrary_eventGetHitResultFromTargetData_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, AbilitySystemBlueprintLibrary_eventGetHitResultFromTargetData_Parms), 0x0000008000000580, Z_Construct_UScriptStruct_FHitResult());
			UProperty* NewProp_Index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Index"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Index, AbilitySystemBlueprintLibrary_eventGetHitResultFromTargetData_Parms), 0x0000000000000080);
			UProperty* NewProp_HitResult = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("HitResult"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(HitResult, AbilitySystemBlueprintLibrary_eventGetHitResultFromTargetData_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayAbilityTargetDataHandle());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|TargetData"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemBlueprintLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_GetInstigatorActor()
	{
		struct AbilitySystemBlueprintLibrary_eventGetInstigatorActor_Parms
		{
			FGameplayCueParameters Parameters;
			AActor* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilitySystemBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetInstigatorActor"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(AbilitySystemBlueprintLibrary_eventGetInstigatorActor_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, AbilitySystemBlueprintLibrary_eventGetInstigatorActor_Parms), 0x0000000000000580, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_Parameters = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Parameters"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Parameters, AbilitySystemBlueprintLibrary_eventGetInstigatorActor_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayCueParameters());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|GameplayCue"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the instigating actor (that holds the ability system component) of the GameplayCue"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_GetInstigatorTransform()
	{
		struct AbilitySystemBlueprintLibrary_eventGetInstigatorTransform_Parms
		{
			FGameplayCueParameters Parameters;
			FTransform ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilitySystemBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetInstigatorTransform"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(AbilitySystemBlueprintLibrary_eventGetInstigatorTransform_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, AbilitySystemBlueprintLibrary_eventGetInstigatorTransform_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FTransform());
			UProperty* NewProp_Parameters = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Parameters"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Parameters, AbilitySystemBlueprintLibrary_eventGetInstigatorTransform_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayCueParameters());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|GameplayCue"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets instigating world location"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_GetOrigin()
	{
		struct AbilitySystemBlueprintLibrary_eventGetOrigin_Parms
		{
			FGameplayCueParameters Parameters;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilitySystemBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetOrigin"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(AbilitySystemBlueprintLibrary_eventGetOrigin_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, AbilitySystemBlueprintLibrary_eventGetOrigin_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Parameters = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Parameters"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Parameters, AbilitySystemBlueprintLibrary_eventGetOrigin_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayCueParameters());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|GameplayCue"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets instigating world location"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_GetTargetDataEndPoint()
	{
		struct AbilitySystemBlueprintLibrary_eventGetTargetDataEndPoint_Parms
		{
			FGameplayAbilityTargetDataHandle TargetData;
			int32 Index;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilitySystemBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetTargetDataEndPoint"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(AbilitySystemBlueprintLibrary_eventGetTargetDataEndPoint_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, AbilitySystemBlueprintLibrary_eventGetTargetDataEndPoint_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Index"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Index, AbilitySystemBlueprintLibrary_eventGetTargetDataEndPoint_Parms), 0x0000000000000080);
			UProperty* NewProp_TargetData = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TargetData"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TargetData, AbilitySystemBlueprintLibrary_eventGetTargetDataEndPoint_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayAbilityTargetDataHandle());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|TargetData"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemBlueprintLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_GetTargetDataEndPointTransform()
	{
		struct AbilitySystemBlueprintLibrary_eventGetTargetDataEndPointTransform_Parms
		{
			FGameplayAbilityTargetDataHandle TargetData;
			int32 Index;
			FTransform ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilitySystemBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetTargetDataEndPointTransform"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(AbilitySystemBlueprintLibrary_eventGetTargetDataEndPointTransform_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, AbilitySystemBlueprintLibrary_eventGetTargetDataEndPointTransform_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FTransform());
			UProperty* NewProp_Index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Index"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Index, AbilitySystemBlueprintLibrary_eventGetTargetDataEndPointTransform_Parms), 0x0000000000000080);
			UProperty* NewProp_TargetData = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TargetData"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TargetData, AbilitySystemBlueprintLibrary_eventGetTargetDataEndPointTransform_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayAbilityTargetDataHandle());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|TargetData"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemBlueprintLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_GetTargetDataOrigin()
	{
		struct AbilitySystemBlueprintLibrary_eventGetTargetDataOrigin_Parms
		{
			FGameplayAbilityTargetDataHandle TargetData;
			int32 Index;
			FTransform ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilitySystemBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetTargetDataOrigin"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(AbilitySystemBlueprintLibrary_eventGetTargetDataOrigin_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, AbilitySystemBlueprintLibrary_eventGetTargetDataOrigin_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FTransform());
			UProperty* NewProp_Index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Index"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Index, AbilitySystemBlueprintLibrary_eventGetTargetDataOrigin_Parms), 0x0000000000000080);
			UProperty* NewProp_TargetData = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TargetData"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TargetData, AbilitySystemBlueprintLibrary_eventGetTargetDataOrigin_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayAbilityTargetDataHandle());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|TargetData"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemBlueprintLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_HasHitResult()
	{
		struct AbilitySystemBlueprintLibrary_eventHasHitResult_Parms
		{
			FGameplayCueParameters Parameters;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilitySystemBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("HasHitResult"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(AbilitySystemBlueprintLibrary_eventHasHitResult_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, AbilitySystemBlueprintLibrary_eventHasHitResult_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, AbilitySystemBlueprintLibrary_eventHasHitResult_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, AbilitySystemBlueprintLibrary_eventHasHitResult_Parms), sizeof(bool), true);
			UProperty* NewProp_Parameters = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Parameters"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Parameters, AbilitySystemBlueprintLibrary_eventHasHitResult_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayCueParameters());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|GameplayCue"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemBlueprintLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_IsInstigatorLocallyControlled()
	{
		struct AbilitySystemBlueprintLibrary_eventIsInstigatorLocallyControlled_Parms
		{
			FGameplayCueParameters Parameters;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilitySystemBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsInstigatorLocallyControlled"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(AbilitySystemBlueprintLibrary_eventIsInstigatorLocallyControlled_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, AbilitySystemBlueprintLibrary_eventIsInstigatorLocallyControlled_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, AbilitySystemBlueprintLibrary_eventIsInstigatorLocallyControlled_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, AbilitySystemBlueprintLibrary_eventIsInstigatorLocallyControlled_Parms), sizeof(bool), true);
			UProperty* NewProp_Parameters = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Parameters"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Parameters, AbilitySystemBlueprintLibrary_eventIsInstigatorLocallyControlled_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayCueParameters());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|GameplayCue"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("GameplayCue"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_IsInstigatorLocallyControlledPlayer()
	{
		struct AbilitySystemBlueprintLibrary_eventIsInstigatorLocallyControlledPlayer_Parms
		{
			FGameplayCueParameters Parameters;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilitySystemBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsInstigatorLocallyControlledPlayer"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(AbilitySystemBlueprintLibrary_eventIsInstigatorLocallyControlledPlayer_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, AbilitySystemBlueprintLibrary_eventIsInstigatorLocallyControlledPlayer_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, AbilitySystemBlueprintLibrary_eventIsInstigatorLocallyControlledPlayer_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, AbilitySystemBlueprintLibrary_eventIsInstigatorLocallyControlledPlayer_Parms), sizeof(bool), true);
			UProperty* NewProp_Parameters = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Parameters"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Parameters, AbilitySystemBlueprintLibrary_eventIsInstigatorLocallyControlledPlayer_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayCueParameters());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|GameplayCue"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemBlueprintLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_MakeFilterHandle()
	{
		struct AbilitySystemBlueprintLibrary_eventMakeFilterHandle_Parms
		{
			FGameplayTargetDataFilter Filter;
			AActor* FilterActor;
			FGameplayTargetDataFilterHandle ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilitySystemBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MakeFilterHandle"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(AbilitySystemBlueprintLibrary_eventMakeFilterHandle_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, AbilitySystemBlueprintLibrary_eventMakeFilterHandle_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FGameplayTargetDataFilterHandle());
			UProperty* NewProp_FilterActor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FilterActor"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(FilterActor, AbilitySystemBlueprintLibrary_eventMakeFilterHandle_Parms), 0x0000000000000080, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_Filter = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Filter"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Filter, AbilitySystemBlueprintLibrary_eventMakeFilterHandle_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayTargetDataFilter());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Filter"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Create a handle for filtering target data, filling out all fields"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_MakeSpecHandle()
	{
		struct AbilitySystemBlueprintLibrary_eventMakeSpecHandle_Parms
		{
			UGameplayEffect* InGameplayEffect;
			AActor* InInstigator;
			AActor* InEffectCauser;
			float InLevel;
			FGameplayEffectSpecHandle ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilitySystemBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MakeSpecHandle"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(AbilitySystemBlueprintLibrary_eventMakeSpecHandle_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, AbilitySystemBlueprintLibrary_eventMakeSpecHandle_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FGameplayEffectSpecHandle());
			UProperty* NewProp_InLevel = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InLevel"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InLevel, AbilitySystemBlueprintLibrary_eventMakeSpecHandle_Parms), 0x0000000000000080);
			UProperty* NewProp_InEffectCauser = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InEffectCauser"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(InEffectCauser, AbilitySystemBlueprintLibrary_eventMakeSpecHandle_Parms), 0x0000000000000080, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_InInstigator = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InInstigator"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(InInstigator, AbilitySystemBlueprintLibrary_eventMakeSpecHandle_Parms), 0x0000000000000080, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_InGameplayEffect = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InGameplayEffect"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(InGameplayEffect, AbilitySystemBlueprintLibrary_eventMakeSpecHandle_Parms), 0x0000000000000080, Z_Construct_UClass_UGameplayEffect_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Spec"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_InLevel"), TEXT("1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Create a spec handle, filling out all fields"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_SendGameplayEventToActor()
	{
		struct AbilitySystemBlueprintLibrary_eventSendGameplayEventToActor_Parms
		{
			AActor* Actor;
			FGameplayTag EventTag;
			FGameplayEventData Payload;
		};
		UObject* Outer=Z_Construct_UClass_UAbilitySystemBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SendGameplayEventToActor"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(AbilitySystemBlueprintLibrary_eventSendGameplayEventToActor_Parms));
			UProperty* NewProp_Payload = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Payload"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Payload, AbilitySystemBlueprintLibrary_eventSendGameplayEventToActor_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayEventData());
			UProperty* NewProp_EventTag = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("EventTag"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(EventTag, AbilitySystemBlueprintLibrary_eventSendGameplayEventToActor_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayTag());
			UProperty* NewProp_Actor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Actor"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Actor, AbilitySystemBlueprintLibrary_eventSendGameplayEventToActor_Parms), 0x0000000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("Tooltip"), TEXT("This function can be used to trigger an ability on the actor in question with useful payload data."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_SetDuration()
	{
		struct AbilitySystemBlueprintLibrary_eventSetDuration_Parms
		{
			FGameplayEffectSpecHandle SpecHandle;
			float Duration;
			FGameplayEffectSpecHandle ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilitySystemBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetDuration"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(AbilitySystemBlueprintLibrary_eventSetDuration_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, AbilitySystemBlueprintLibrary_eventSetDuration_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FGameplayEffectSpecHandle());
			UProperty* NewProp_Duration = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Duration"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Duration, AbilitySystemBlueprintLibrary_eventSetDuration_Parms), 0x0000000000000080);
			UProperty* NewProp_SpecHandle = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SpecHandle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SpecHandle, AbilitySystemBlueprintLibrary_eventSetDuration_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayEffectSpecHandle());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|GameplayEffect"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemBlueprintLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_SetStackCount()
	{
		struct AbilitySystemBlueprintLibrary_eventSetStackCount_Parms
		{
			FGameplayEffectSpecHandle SpecHandle;
			int32 StackCount;
			FGameplayEffectSpecHandle ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilitySystemBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetStackCount"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(AbilitySystemBlueprintLibrary_eventSetStackCount_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, AbilitySystemBlueprintLibrary_eventSetStackCount_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FGameplayEffectSpecHandle());
			UProperty* NewProp_StackCount = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("StackCount"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(StackCount, AbilitySystemBlueprintLibrary_eventSetStackCount_Parms), 0x0000000000000080);
			UProperty* NewProp_SpecHandle = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SpecHandle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SpecHandle, AbilitySystemBlueprintLibrary_eventSetStackCount_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayEffectSpecHandle());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|GameplayEffect"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the GameplayEffectSpec's StackCount to the specified amount (prior to applying)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_SetStackCountToMax()
	{
		struct AbilitySystemBlueprintLibrary_eventSetStackCountToMax_Parms
		{
			FGameplayEffectSpecHandle SpecHandle;
			FGameplayEffectSpecHandle ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilitySystemBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetStackCountToMax"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(AbilitySystemBlueprintLibrary_eventSetStackCountToMax_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, AbilitySystemBlueprintLibrary_eventSetStackCountToMax_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FGameplayEffectSpecHandle());
			UProperty* NewProp_SpecHandle = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SpecHandle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SpecHandle, AbilitySystemBlueprintLibrary_eventSetStackCountToMax_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayEffectSpecHandle());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|GameplayEffect"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the GameplayEffectSpec's StackCount to the max stack count defined in the GameplayEffect definition"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_TargetDataHasActor()
	{
		struct AbilitySystemBlueprintLibrary_eventTargetDataHasActor_Parms
		{
			FGameplayAbilityTargetDataHandle TargetData;
			int32 Index;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilitySystemBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TargetDataHasActor"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(AbilitySystemBlueprintLibrary_eventTargetDataHasActor_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, AbilitySystemBlueprintLibrary_eventTargetDataHasActor_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, AbilitySystemBlueprintLibrary_eventTargetDataHasActor_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, AbilitySystemBlueprintLibrary_eventTargetDataHasActor_Parms), sizeof(bool), true);
			UProperty* NewProp_Index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Index"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Index, AbilitySystemBlueprintLibrary_eventTargetDataHasActor_Parms), 0x0000000000000080);
			UProperty* NewProp_TargetData = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TargetData"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TargetData, AbilitySystemBlueprintLibrary_eventTargetDataHasActor_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayAbilityTargetDataHandle());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|TargetData"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if the given TargetData has at least 1 actor targeted"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_TargetDataHasEndPoint()
	{
		struct AbilitySystemBlueprintLibrary_eventTargetDataHasEndPoint_Parms
		{
			FGameplayAbilityTargetDataHandle TargetData;
			int32 Index;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilitySystemBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TargetDataHasEndPoint"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(AbilitySystemBlueprintLibrary_eventTargetDataHasEndPoint_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, AbilitySystemBlueprintLibrary_eventTargetDataHasEndPoint_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, AbilitySystemBlueprintLibrary_eventTargetDataHasEndPoint_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, AbilitySystemBlueprintLibrary_eventTargetDataHasEndPoint_Parms), sizeof(bool), true);
			UProperty* NewProp_Index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Index"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Index, AbilitySystemBlueprintLibrary_eventTargetDataHasEndPoint_Parms), 0x0000000000000080);
			UProperty* NewProp_TargetData = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TargetData"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TargetData, AbilitySystemBlueprintLibrary_eventTargetDataHasEndPoint_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayAbilityTargetDataHandle());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|TargetData"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemBlueprintLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_TargetDataHasHitResult()
	{
		struct AbilitySystemBlueprintLibrary_eventTargetDataHasHitResult_Parms
		{
			FGameplayAbilityTargetDataHandle HitResult;
			int32 Index;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilitySystemBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TargetDataHasHitResult"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(AbilitySystemBlueprintLibrary_eventTargetDataHasHitResult_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, AbilitySystemBlueprintLibrary_eventTargetDataHasHitResult_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, AbilitySystemBlueprintLibrary_eventTargetDataHasHitResult_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, AbilitySystemBlueprintLibrary_eventTargetDataHasHitResult_Parms), sizeof(bool), true);
			UProperty* NewProp_Index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Index"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Index, AbilitySystemBlueprintLibrary_eventTargetDataHasHitResult_Parms), 0x0000000000000080);
			UProperty* NewProp_HitResult = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("HitResult"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(HitResult, AbilitySystemBlueprintLibrary_eventTargetDataHasHitResult_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayAbilityTargetDataHandle());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|TargetData"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemBlueprintLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_TargetDataHasOrigin()
	{
		struct AbilitySystemBlueprintLibrary_eventTargetDataHasOrigin_Parms
		{
			FGameplayAbilityTargetDataHandle TargetData;
			int32 Index;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilitySystemBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TargetDataHasOrigin"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(AbilitySystemBlueprintLibrary_eventTargetDataHasOrigin_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, AbilitySystemBlueprintLibrary_eventTargetDataHasOrigin_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, AbilitySystemBlueprintLibrary_eventTargetDataHasOrigin_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, AbilitySystemBlueprintLibrary_eventTargetDataHasOrigin_Parms), sizeof(bool), true);
			UProperty* NewProp_Index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Index"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Index, AbilitySystemBlueprintLibrary_eventTargetDataHasOrigin_Parms), 0x0000000000000080);
			UProperty* NewProp_TargetData = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TargetData"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TargetData, AbilitySystemBlueprintLibrary_eventTargetDataHasOrigin_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayAbilityTargetDataHandle());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|TargetData"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemBlueprintLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UAbilitySystemBlueprintLibrary_NoRegister()
	{
		return UAbilitySystemBlueprintLibrary::StaticClass();
	}
	UClass* Z_Construct_UClass_UAbilitySystemBlueprintLibrary()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBlueprintFunctionLibrary();
			Z_Construct_UPackage_GameplayAbilities();
			OuterClass = UAbilitySystemBlueprintLibrary::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_AbilityTargetDataFromActor());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_AbilityTargetDataFromActorArray());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_AbilityTargetDataFromHitResult());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_AbilityTargetDataFromLocations());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_AddAssetTag());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_AddAssetTags());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_AddGrantedTag());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_AddGrantedTags());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_AddLinkedGameplayEffectSpec());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_AppendTargetDataHandle());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_AssignSetByCallerMagnitude());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_DoesGameplayCueMeetTagRequirements());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_DoesTargetDataContainActor());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_EffectContextGetEffectCauser());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_EffectContextGetHitResult());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_EffectContextGetInstigatorActor());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_EffectContextGetOrigin());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_EffectContextGetOriginalInstigatorActor());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_EffectContextGetSourceObject());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_EffectContextHasHitResult());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_EffectContextIsInstigatorLocallyControlled());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_FilterTargetData());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_ForwardGameplayCueToTarget());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_GetAbilitySystemComponent());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_GetActiveGameplayEffectStackCount());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_GetActorByIndex());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_GetActorCount());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_GetActorsFromTargetData());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_GetDataCountFromTargetData());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_GetFloatAttribute());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_GetGameplayCueDirection());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_GetGameplayCueEndLocationAndNormal());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_GetHitResult());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_GetHitResultFromTargetData());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_GetInstigatorActor());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_GetInstigatorTransform());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_GetOrigin());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_GetTargetDataEndPoint());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_GetTargetDataEndPointTransform());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_GetTargetDataOrigin());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_HasHitResult());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_IsInstigatorLocallyControlled());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_IsInstigatorLocallyControlledPlayer());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_MakeFilterHandle());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_MakeSpecHandle());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_SendGameplayEventToActor());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_SetDuration());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_SetStackCount());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_SetStackCountToMax());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_TargetDataHasActor());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_TargetDataHasEndPoint());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_TargetDataHasHitResult());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_TargetDataHasOrigin());

				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_AbilityTargetDataFromActor()); // 2295133629
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_AbilityTargetDataFromActorArray()); // 2919230904
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_AbilityTargetDataFromHitResult()); // 1200348634
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_AbilityTargetDataFromLocations()); // 1892949935
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_AddAssetTag()); // 1630641620
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_AddAssetTags()); // 2871819967
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_AddGrantedTag()); // 2422370587
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_AddGrantedTags()); // 2825121060
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_AddLinkedGameplayEffectSpec()); // 3268029306
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_AppendTargetDataHandle()); // 3411257684
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_AssignSetByCallerMagnitude()); // 3140211211
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_DoesGameplayCueMeetTagRequirements()); // 2692620248
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_DoesTargetDataContainActor()); // 4154713210
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_EffectContextGetEffectCauser()); // 3701946329
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_EffectContextGetHitResult()); // 2835761142
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_EffectContextGetInstigatorActor()); // 322969577
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_EffectContextGetOrigin()); // 1820569120
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_EffectContextGetOriginalInstigatorActor()); // 3446145278
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_EffectContextGetSourceObject()); // 3212409540
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_EffectContextHasHitResult()); // 133157741
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_EffectContextIsInstigatorLocallyControlled()); // 921631341
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_FilterTargetData()); // 3594159656
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_ForwardGameplayCueToTarget()); // 240331005
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_GetAbilitySystemComponent()); // 4098905365
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_GetActiveGameplayEffectStackCount()); // 217987828
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_GetActorByIndex()); // 1157353163
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_GetActorCount()); // 3854176440
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_GetActorsFromTargetData()); // 1640745631
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_GetDataCountFromTargetData()); // 177067394
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_GetFloatAttribute()); // 2434002505
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_GetGameplayCueDirection()); // 3821804017
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_GetGameplayCueEndLocationAndNormal()); // 2415692910
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_GetHitResult()); // 2878963757
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_GetHitResultFromTargetData()); // 2926435721
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_GetInstigatorActor()); // 595750162
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_GetInstigatorTransform()); // 2570989795
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_GetOrigin()); // 239182348
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_GetTargetDataEndPoint()); // 2723234673
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_GetTargetDataEndPointTransform()); // 2337911289
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_GetTargetDataOrigin()); // 2846320012
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_HasHitResult()); // 4260992474
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_IsInstigatorLocallyControlled()); // 3673515169
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_IsInstigatorLocallyControlledPlayer()); // 3733420932
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_MakeFilterHandle()); // 1489554362
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_MakeSpecHandle()); // 3467316661
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_SendGameplayEventToActor()); // 157082836
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_SetDuration()); // 3254091225
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_SetStackCount()); // 3984190760
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_SetStackCountToMax()); // 3378752867
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_TargetDataHasActor()); // 2125884602
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_TargetDataHasEndPoint()); // 1782010727
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_TargetDataHasHitResult()); // 406923610
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemBlueprintLibrary_TargetDataHasOrigin()); // 3916657183
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("AbilitySystemBlueprintLibrary.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemBlueprintLibrary.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("meta =(RestrictedToClasses=\"GameplayAbility\")"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UAbilitySystemBlueprintLibrary(Z_Construct_UClass_UAbilitySystemBlueprintLibrary, TEXT("UAbilitySystemBlueprintLibrary"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UAbilitySystemBlueprintLibrary);
	UFunction* Z_Construct_UDelegateFunction_UAbilitySystemComponent_AbilityConfirmOrCancel__DelegateSignature()
	{
		UObject* Outer=Z_Construct_UClass_UAbilitySystemComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AbilityConfirmOrCancel__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Used to register callbacks to confirm/cancel input"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UDelegateFunction_UAbilitySystemComponent_AbilityAbilityKey__DelegateSignature()
	{
		struct AbilitySystemComponent_eventAbilityAbilityKey_Parms
		{
			int32 InputID;
		};
		UObject* Outer=Z_Construct_UClass_UAbilitySystemComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AbilityAbilityKey__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535, sizeof(AbilitySystemComponent_eventAbilityAbilityKey_Parms));
			UProperty* NewProp_InputID = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InputID"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(InputID, AbilitySystemComponent_eventAbilityAbilityKey_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("UGameplayAbility*, Ability,"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemComponent_BP_ApplyGameplayEffectSpecToSelf()
	{
		struct AbilitySystemComponent_eventBP_ApplyGameplayEffectSpecToSelf_Parms
		{
			FGameplayEffectSpecHandle SpecHandle;
			FActiveGameplayEffectHandle ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilitySystemComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BP_ApplyGameplayEffectSpecToSelf"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04420401, 65535, sizeof(AbilitySystemComponent_eventBP_ApplyGameplayEffectSpecToSelf_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, AbilitySystemComponent_eventBP_ApplyGameplayEffectSpecToSelf_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FActiveGameplayEffectHandle());
			UProperty* NewProp_SpecHandle = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SpecHandle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SpecHandle, AbilitySystemComponent_eventBP_ApplyGameplayEffectSpecToSelf_Parms), 0x0000000008000180, Z_Construct_UScriptStruct_FGameplayEffectSpecHandle());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("GameplayEffects"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("ApplyGameplayEffectSpecToSelf"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemComponent_BP_ApplyGameplayEffectSpecToTarget()
	{
		struct AbilitySystemComponent_eventBP_ApplyGameplayEffectSpecToTarget_Parms
		{
			FGameplayEffectSpecHandle SpecHandle;
			UAbilitySystemComponent* Target;
			FActiveGameplayEffectHandle ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilitySystemComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BP_ApplyGameplayEffectSpecToTarget"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04420401, 65535, sizeof(AbilitySystemComponent_eventBP_ApplyGameplayEffectSpecToTarget_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, AbilitySystemComponent_eventBP_ApplyGameplayEffectSpecToTarget_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FActiveGameplayEffectHandle());
			UProperty* NewProp_Target = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Target"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Target, AbilitySystemComponent_eventBP_ApplyGameplayEffectSpecToTarget_Parms), 0x0000000000080080, Z_Construct_UClass_UAbilitySystemComponent_NoRegister());
			UProperty* NewProp_SpecHandle = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SpecHandle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SpecHandle, AbilitySystemComponent_eventBP_ApplyGameplayEffectSpecToTarget_Parms), 0x0000000008000180, Z_Construct_UScriptStruct_FGameplayEffectSpecHandle());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("GameplayEffects"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("ApplyGameplayEffectSpecToTarget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemComponent.h"));
			MetaData->SetValue(NewProp_Target, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemComponent_BP_ApplyGameplayEffectToSelf()
	{
		struct AbilitySystemComponent_eventBP_ApplyGameplayEffectToSelf_Parms
		{
			TSubclassOf<UGameplayEffect>  GameplayEffectClass;
			float Level;
			FGameplayEffectContextHandle EffectContext;
			FActiveGameplayEffectHandle ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilitySystemComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BP_ApplyGameplayEffectToSelf"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(AbilitySystemComponent_eventBP_ApplyGameplayEffectToSelf_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, AbilitySystemComponent_eventBP_ApplyGameplayEffectToSelf_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FActiveGameplayEffectHandle());
			UProperty* NewProp_EffectContext = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("EffectContext"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(EffectContext, AbilitySystemComponent_eventBP_ApplyGameplayEffectToSelf_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayEffectContextHandle());
			UProperty* NewProp_Level = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Level"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Level, AbilitySystemComponent_eventBP_ApplyGameplayEffectToSelf_Parms), 0x0000000000000080);
			UProperty* NewProp_GameplayEffectClass = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("GameplayEffectClass"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(GameplayEffectClass, AbilitySystemComponent_eventBP_ApplyGameplayEffectToSelf_Parms), 0x0004000000000080, Z_Construct_UClass_UGameplayEffect_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("GameplayEffects"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("ApplyGameplayEffectToSelf"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemComponent_BP_ApplyGameplayEffectToTarget()
	{
		struct AbilitySystemComponent_eventBP_ApplyGameplayEffectToTarget_Parms
		{
			TSubclassOf<UGameplayEffect>  GameplayEffectClass;
			UAbilitySystemComponent* Target;
			float Level;
			FGameplayEffectContextHandle Context;
			FActiveGameplayEffectHandle ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilitySystemComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BP_ApplyGameplayEffectToTarget"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(AbilitySystemComponent_eventBP_ApplyGameplayEffectToTarget_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, AbilitySystemComponent_eventBP_ApplyGameplayEffectToTarget_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FActiveGameplayEffectHandle());
			UProperty* NewProp_Context = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Context"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Context, AbilitySystemComponent_eventBP_ApplyGameplayEffectToTarget_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayEffectContextHandle());
			UProperty* NewProp_Level = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Level"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Level, AbilitySystemComponent_eventBP_ApplyGameplayEffectToTarget_Parms), 0x0000000000000080);
			UProperty* NewProp_Target = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Target"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Target, AbilitySystemComponent_eventBP_ApplyGameplayEffectToTarget_Parms), 0x0000000000080080, Z_Construct_UClass_UAbilitySystemComponent_NoRegister());
			UProperty* NewProp_GameplayEffectClass = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("GameplayEffectClass"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(GameplayEffectClass, AbilitySystemComponent_eventBP_ApplyGameplayEffectToTarget_Parms), 0x0004000000000080, Z_Construct_UClass_UGameplayEffect_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("GameplayEffects"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("ApplyGameplayEffectToTarget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemComponent.h"));
			MetaData->SetValue(NewProp_Target, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemComponent_ClientActivateAbilityFailed()
	{
		UObject* Outer=Z_Construct_UClass_UAbilitySystemComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ClientActivateAbilityFailed"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x01080CC0, 65535, sizeof(AbilitySystemComponent_eventClientActivateAbilityFailed_Parms));
			UProperty* NewProp_PredictionKey = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PredictionKey"), RF_Public|RF_Transient|RF_Native) UInt16Property(CPP_PROPERTY_BASE(PredictionKey, AbilitySystemComponent_eventClientActivateAbilityFailed_Parms), 0x0000000000000080);
			UProperty* NewProp_AbilityToActivate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AbilityToActivate"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(AbilityToActivate, AbilitySystemComponent_eventClientActivateAbilityFailed_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayAbilitySpecHandle());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemComponent_ClientActivateAbilitySucceed()
	{
		UObject* Outer=Z_Construct_UClass_UAbilitySystemComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ClientActivateAbilitySucceed"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x01080CC0, 65535, sizeof(AbilitySystemComponent_eventClientActivateAbilitySucceed_Parms));
			UProperty* NewProp_PredictionKey = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PredictionKey"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PredictionKey, AbilitySystemComponent_eventClientActivateAbilitySucceed_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FPredictionKey());
			UProperty* NewProp_AbilityToActivate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AbilityToActivate"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(AbilityToActivate, AbilitySystemComponent_eventClientActivateAbilitySucceed_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayAbilitySpecHandle());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemComponent_ClientActivateAbilitySucceedWithEventData()
	{
		UObject* Outer=Z_Construct_UClass_UAbilitySystemComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ClientActivateAbilitySucceedWithEventData"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x01080CC0, 65535, sizeof(AbilitySystemComponent_eventClientActivateAbilitySucceedWithEventData_Parms));
			UProperty* NewProp_TriggerEventData = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TriggerEventData"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TriggerEventData, AbilitySystemComponent_eventClientActivateAbilitySucceedWithEventData_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayEventData());
			UProperty* NewProp_PredictionKey = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PredictionKey"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PredictionKey, AbilitySystemComponent_eventClientActivateAbilitySucceedWithEventData_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FPredictionKey());
			UProperty* NewProp_AbilityToActivate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AbilityToActivate"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(AbilityToActivate, AbilitySystemComponent_eventClientActivateAbilitySucceedWithEventData_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayAbilitySpecHandle());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemComponent_ClientCancelAbility()
	{
		UObject* Outer=Z_Construct_UClass_UAbilitySystemComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ClientCancelAbility"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x01080CC0, 65535, sizeof(AbilitySystemComponent_eventClientCancelAbility_Parms));
			UProperty* NewProp_ActivationInfo = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActivationInfo"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ActivationInfo, AbilitySystemComponent_eventClientCancelAbility_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayAbilityActivationInfo());
			UProperty* NewProp_AbilityToCancel = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AbilityToCancel"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(AbilityToCancel, AbilitySystemComponent_eventClientCancelAbility_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayAbilitySpecHandle());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemComponent_ClientEndAbility()
	{
		UObject* Outer=Z_Construct_UClass_UAbilitySystemComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ClientEndAbility"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x01080CC0, 65535, sizeof(AbilitySystemComponent_eventClientEndAbility_Parms));
			UProperty* NewProp_ActivationInfo = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActivationInfo"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ActivationInfo, AbilitySystemComponent_eventClientEndAbility_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayAbilityActivationInfo());
			UProperty* NewProp_AbilityToEnd = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AbilityToEnd"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(AbilityToEnd, AbilitySystemComponent_eventClientEndAbility_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayAbilitySpecHandle());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemComponent_ClientSetReplicatedEvent()
	{
		UObject* Outer=Z_Construct_UClass_UAbilitySystemComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ClientSetReplicatedEvent"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x01020CC0, 65535, sizeof(AbilitySystemComponent_eventClientSetReplicatedEvent_Parms));
			UProperty* NewProp_AbilityOriginalPredictionKey = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AbilityOriginalPredictionKey"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(AbilityOriginalPredictionKey, AbilitySystemComponent_eventClientSetReplicatedEvent_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FPredictionKey());
			UProperty* NewProp_AbilityHandle = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AbilityHandle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(AbilityHandle, AbilitySystemComponent_eventClientSetReplicatedEvent_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayAbilitySpecHandle());
			UProperty* NewProp_EventType = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("EventType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(EventType, AbilitySystemComponent_eventClientSetReplicatedEvent_Parms), 0x0000000000000080, Z_Construct_UEnum_GameplayAbilities_EAbilityGenericReplicatedEvent());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Replicates the Generic Replicated Event to the server."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemComponent_ClientTryActivateAbility()
	{
		UObject* Outer=Z_Construct_UClass_UAbilitySystemComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ClientTryActivateAbility"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x01080CC0, 65535, sizeof(AbilitySystemComponent_eventClientTryActivateAbility_Parms));
			UProperty* NewProp_AbilityToActivate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AbilityToActivate"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(AbilityToActivate, AbilitySystemComponent_eventClientTryActivateAbility_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayAbilitySpecHandle());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemComponent_GetEffectContext()
	{
		struct AbilitySystemComponent_eventGetEffectContext_Parms
		{
			FGameplayEffectContextHandle ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilitySystemComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetEffectContext"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(AbilitySystemComponent_eventGetEffectContext_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, AbilitySystemComponent_eventGetEffectContext_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FGameplayEffectContextHandle());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("GameplayEffects"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Create an EffectContext for the owner of this AbilitySystemComponent"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemComponent_GetGameplayEffectCount()
	{
		struct AbilitySystemComponent_eventGetGameplayEffectCount_Parms
		{
			TSubclassOf<UGameplayEffect>  SourceGameplayEffect;
			UAbilitySystemComponent* OptionalInstigatorFilterComponent;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilitySystemComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetGameplayEffectCount"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14020401, 65535, sizeof(AbilitySystemComponent_eventGetGameplayEffectCount_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, AbilitySystemComponent_eventGetGameplayEffectCount_Parms), 0x0000000000000580);
			UProperty* NewProp_OptionalInstigatorFilterComponent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OptionalInstigatorFilterComponent"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(OptionalInstigatorFilterComponent, AbilitySystemComponent_eventGetGameplayEffectCount_Parms), 0x0000000000080080, Z_Construct_UClass_UAbilitySystemComponent_NoRegister());
			UProperty* NewProp_SourceGameplayEffect = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SourceGameplayEffect"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(SourceGameplayEffect, AbilitySystemComponent_eventGetGameplayEffectCount_Parms), 0x0004000000000080, Z_Construct_UClass_UGameplayEffect_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("GameplayEffects"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get the count of the specified source effect on the ability system component. For non-stacking effects, this is the sum of all active instances.\nFor stacking effects, this is the sum of all valid stack counts. If an instigator is specified, only effects from that instigator are counted.\n\n@param SourceGameplayEffect                                  Effect to get the count of\n@param OptionalInstigatorFilterComponent             If specified, only count effects applied by this ability system component\n\n@return Count of the specified source effect"));
			MetaData->SetValue(NewProp_OptionalInstigatorFilterComponent, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemComponent_GetGameplayEffectMagnitude()
	{
		struct AbilitySystemComponent_eventGetGameplayEffectMagnitude_Parms
		{
			FActiveGameplayEffectHandle Handle;
			FGameplayAttribute Attribute;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilitySystemComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetGameplayEffectMagnitude"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(AbilitySystemComponent_eventGetGameplayEffectMagnitude_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, AbilitySystemComponent_eventGetGameplayEffectMagnitude_Parms), 0x0000000000000580);
			UProperty* NewProp_Attribute = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Attribute"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Attribute, AbilitySystemComponent_eventGetGameplayEffectMagnitude_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayAttribute());
			UProperty* NewProp_Handle = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Handle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Handle, AbilitySystemComponent_eventGetGameplayEffectMagnitude_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FActiveGameplayEffectHandle());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("GameplayEffects"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Not happy with this interface but don't see a better way yet. How should outside code (UI, etc) ask things like 'how much is this gameplay effect modifying my damage by'\n(most likely we want to catch this on the backend - when damage is applied we can get a full dump/history of how the number got to where it is. But still we may need polling methods like below (how much would my damage be)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemComponent_GetOutgoingSpec()
	{
		struct AbilitySystemComponent_eventGetOutgoingSpec_Parms
		{
			const UGameplayEffect* GameplayEffect;
			float Level;
			FGameplayEffectSpecHandle ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilitySystemComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetOutgoingSpec"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(AbilitySystemComponent_eventGetOutgoingSpec_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, AbilitySystemComponent_eventGetOutgoingSpec_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FGameplayEffectSpecHandle());
			UProperty* NewProp_Level = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Level"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Level, AbilitySystemComponent_eventGetOutgoingSpec_Parms), 0x0000000000000080);
			UProperty* NewProp_GameplayEffect = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("GameplayEffect"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(GameplayEffect, AbilitySystemComponent_eventGetOutgoingSpec_Parms), 0x0000000000000082, Z_Construct_UClass_UGameplayEffect_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("GameplayEffects"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Level"), TEXT("1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecatedFunction"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecationMessage"), TEXT("Use new MakeOutgoingSpec"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get an outgoing GameplayEffectSpec that is ready to be applied to other things."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemComponent_GetUserAbilityActivationInhibited()
	{
		struct AbilitySystemComponent_eventGetUserAbilityActivationInhibited_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilitySystemComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetUserAbilityActivationInhibited"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(AbilitySystemComponent_eventGetUserAbilityActivationInhibited_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, AbilitySystemComponent_eventGetUserAbilityActivationInhibited_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, AbilitySystemComponent_eventGetUserAbilityActivationInhibited_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, AbilitySystemComponent_eventGetUserAbilityActivationInhibited_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Abilities"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("This is meant to be used to inhibit activating an ability from an input perspective. (E.g., the menu is pulled up, another game mechanism is consuming all input, etc)\nThis should only be called on locally owned players.\nThis should not be used to game mechanics like silences or disables. Those should be done through gameplay effects."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemComponent_IsGameplayCueActive()
	{
		struct AbilitySystemComponent_eventIsGameplayCueActive_Parms
		{
			FGameplayTag GameplayCueTag;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilitySystemComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsGameplayCueActive"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(AbilitySystemComponent_eventIsGameplayCueActive_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, AbilitySystemComponent_eventIsGameplayCueActive_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, AbilitySystemComponent_eventIsGameplayCueActive_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, AbilitySystemComponent_eventIsGameplayCueActive_Parms), sizeof(bool), true);
			UProperty* NewProp_GameplayCueTag = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("GameplayCueTag"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(GameplayCueTag, AbilitySystemComponent_eventIsGameplayCueActive_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FGameplayTag());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("GameplayCue"));
			MetaData->SetValue(ReturnFunction, TEXT("GameplayTagFilter"), TEXT("GameplayCue"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Allows polling to see if a GameplayCue is active. We expect most GameplayCue handling to be event based, but some cases we may need to check if a GamepalyCue is active (Animation Blueprint for example)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemComponent_K2_ApplyGameplayEffectToSelf()
	{
		struct AbilitySystemComponent_eventK2_ApplyGameplayEffectToSelf_Parms
		{
			const UGameplayEffect* GameplayEffect;
			float Level;
			FGameplayEffectContextHandle EffectContext;
			FActiveGameplayEffectHandle ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilitySystemComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_ApplyGameplayEffectToSelf"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(AbilitySystemComponent_eventK2_ApplyGameplayEffectToSelf_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, AbilitySystemComponent_eventK2_ApplyGameplayEffectToSelf_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FActiveGameplayEffectHandle());
			UProperty* NewProp_EffectContext = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("EffectContext"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(EffectContext, AbilitySystemComponent_eventK2_ApplyGameplayEffectToSelf_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayEffectContextHandle());
			UProperty* NewProp_Level = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Level"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Level, AbilitySystemComponent_eventK2_ApplyGameplayEffectToSelf_Parms), 0x0000000000000080);
			UProperty* NewProp_GameplayEffect = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("GameplayEffect"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(GameplayEffect, AbilitySystemComponent_eventK2_ApplyGameplayEffectToSelf_Parms), 0x0000000000000082, Z_Construct_UClass_UGameplayEffect_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("GameplayEffects"));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecatedFunction"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecationMessage"), TEXT("Use new ApplyGameplayEffectToSelf"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("ApplyGameplayEffectToSelf"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemComponent_K2_ApplyGameplayEffectToTarget()
	{
		struct AbilitySystemComponent_eventK2_ApplyGameplayEffectToTarget_Parms
		{
			UGameplayEffect* GameplayEffect;
			UAbilitySystemComponent* Target;
			float Level;
			FGameplayEffectContextHandle Context;
			FActiveGameplayEffectHandle ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilitySystemComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_ApplyGameplayEffectToTarget"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(AbilitySystemComponent_eventK2_ApplyGameplayEffectToTarget_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, AbilitySystemComponent_eventK2_ApplyGameplayEffectToTarget_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FActiveGameplayEffectHandle());
			UProperty* NewProp_Context = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Context"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Context, AbilitySystemComponent_eventK2_ApplyGameplayEffectToTarget_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayEffectContextHandle());
			UProperty* NewProp_Level = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Level"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Level, AbilitySystemComponent_eventK2_ApplyGameplayEffectToTarget_Parms), 0x0000000000000080);
			UProperty* NewProp_Target = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Target"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Target, AbilitySystemComponent_eventK2_ApplyGameplayEffectToTarget_Parms), 0x0000000000080080, Z_Construct_UClass_UAbilitySystemComponent_NoRegister());
			UProperty* NewProp_GameplayEffect = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("GameplayEffect"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(GameplayEffect, AbilitySystemComponent_eventK2_ApplyGameplayEffectToTarget_Parms), 0x0000000000000080, Z_Construct_UClass_UGameplayEffect_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("GameplayEffects"));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecatedFunction"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecationMessage"), TEXT("Use new ApplyGameplayEffectToSelf"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("ApplyGameplayEffectToTarget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemComponent.h"));
			MetaData->SetValue(NewProp_Target, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemComponent_K2_InitStats()
	{
		struct AbilitySystemComponent_eventK2_InitStats_Parms
		{
			TSubclassOf<UAttributeSet>  Attributes;
			const UDataTable* DataTable;
		};
		UObject* Outer=Z_Construct_UClass_UAbilitySystemComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_InitStats"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(AbilitySystemComponent_eventK2_InitStats_Parms));
			UProperty* NewProp_DataTable = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DataTable"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(DataTable, AbilitySystemComponent_eventK2_InitStats_Parms), 0x0000000000000082, Z_Construct_UClass_UDataTable_NoRegister());
			UProperty* NewProp_Attributes = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Attributes"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(Attributes, AbilitySystemComponent_eventK2_InitStats_Parms), 0x0004000000000080, Z_Construct_UClass_UAttributeSet_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Skills"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("InitStats"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemComponent_MakeOutgoingSpec()
	{
		struct AbilitySystemComponent_eventMakeOutgoingSpec_Parms
		{
			TSubclassOf<UGameplayEffect>  GameplayEffectClass;
			float Level;
			FGameplayEffectContextHandle Context;
			FGameplayEffectSpecHandle ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilitySystemComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MakeOutgoingSpec"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(AbilitySystemComponent_eventMakeOutgoingSpec_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, AbilitySystemComponent_eventMakeOutgoingSpec_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FGameplayEffectSpecHandle());
			UProperty* NewProp_Context = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Context"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Context, AbilitySystemComponent_eventMakeOutgoingSpec_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayEffectContextHandle());
			UProperty* NewProp_Level = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Level"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Level, AbilitySystemComponent_eventMakeOutgoingSpec_Parms), 0x0000000000000080);
			UProperty* NewProp_GameplayEffectClass = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("GameplayEffectClass"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(GameplayEffectClass, AbilitySystemComponent_eventMakeOutgoingSpec_Parms), 0x0004000000000080, Z_Construct_UClass_UGameplayEffect_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("GameplayEffects"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get an outgoing GameplayEffectSpec that is ready to be applied to other things."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemComponent_NetMulticast_InvokeGameplayCueAdded()
	{
		UObject* Outer=Z_Construct_UClass_UAbilitySystemComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NetMulticast_InvokeGameplayCueAdded"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00024C40, 65535, sizeof(AbilitySystemComponent_eventNetMulticast_InvokeGameplayCueAdded_Parms));
			UProperty* NewProp_EffectContext = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("EffectContext"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(EffectContext, AbilitySystemComponent_eventNetMulticast_InvokeGameplayCueAdded_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayEffectContextHandle());
			UProperty* NewProp_PredictionKey = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PredictionKey"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PredictionKey, AbilitySystemComponent_eventNetMulticast_InvokeGameplayCueAdded_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FPredictionKey());
			UProperty* NewProp_GameplayCueTag = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("GameplayCueTag"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(GameplayCueTag, AbilitySystemComponent_eventNetMulticast_InvokeGameplayCueAdded_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FGameplayTag());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemComponent_NetMulticast_InvokeGameplayCueAddedAndWhileActive_FromSpec()
	{
		UObject* Outer=Z_Construct_UClass_UAbilitySystemComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NetMulticast_InvokeGameplayCueAddedAndWhileActive_FromSpec"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00024C40, 65535, sizeof(AbilitySystemComponent_eventNetMulticast_InvokeGameplayCueAddedAndWhileActive_FromSpec_Parms));
			UProperty* NewProp_PredictionKey = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PredictionKey"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PredictionKey, AbilitySystemComponent_eventNetMulticast_InvokeGameplayCueAddedAndWhileActive_FromSpec_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FPredictionKey());
			UProperty* NewProp_Spec = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Spec"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Spec, AbilitySystemComponent_eventNetMulticast_InvokeGameplayCueAddedAndWhileActive_FromSpec_Parms), 0x0000000008000082, Z_Construct_UScriptStruct_FGameplayEffectSpecForRPC());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemComponent_NetMulticast_InvokeGameplayCueExecuted()
	{
		UObject* Outer=Z_Construct_UClass_UAbilitySystemComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NetMulticast_InvokeGameplayCueExecuted"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00024C40, 65535, sizeof(AbilitySystemComponent_eventNetMulticast_InvokeGameplayCueExecuted_Parms));
			UProperty* NewProp_EffectContext = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("EffectContext"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(EffectContext, AbilitySystemComponent_eventNetMulticast_InvokeGameplayCueExecuted_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayEffectContextHandle());
			UProperty* NewProp_PredictionKey = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PredictionKey"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PredictionKey, AbilitySystemComponent_eventNetMulticast_InvokeGameplayCueExecuted_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FPredictionKey());
			UProperty* NewProp_GameplayCueTag = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("GameplayCueTag"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(GameplayCueTag, AbilitySystemComponent_eventNetMulticast_InvokeGameplayCueExecuted_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FGameplayTag());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemComponent_NetMulticast_InvokeGameplayCueExecuted_FromSpec()
	{
		UObject* Outer=Z_Construct_UClass_UAbilitySystemComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NetMulticast_InvokeGameplayCueExecuted_FromSpec"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00024C40, 65535, sizeof(AbilitySystemComponent_eventNetMulticast_InvokeGameplayCueExecuted_FromSpec_Parms));
			UProperty* NewProp_PredictionKey = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PredictionKey"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PredictionKey, AbilitySystemComponent_eventNetMulticast_InvokeGameplayCueExecuted_FromSpec_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FPredictionKey());
			UProperty* NewProp_Spec = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Spec"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Spec, AbilitySystemComponent_eventNetMulticast_InvokeGameplayCueExecuted_FromSpec_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FGameplayEffectSpecForRPC());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Do not call these functions directly, call the wrappers on GameplayCueManager instead"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemComponent_NetMulticast_InvokeGameplayCueExecuted_WithParams()
	{
		UObject* Outer=Z_Construct_UClass_UAbilitySystemComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NetMulticast_InvokeGameplayCueExecuted_WithParams"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00024C40, 65535, sizeof(AbilitySystemComponent_eventNetMulticast_InvokeGameplayCueExecuted_WithParams_Parms));
			UProperty* NewProp_GameplayCueParameters = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("GameplayCueParameters"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(GameplayCueParameters, AbilitySystemComponent_eventNetMulticast_InvokeGameplayCueExecuted_WithParams_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayCueParameters());
			UProperty* NewProp_PredictionKey = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PredictionKey"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PredictionKey, AbilitySystemComponent_eventNetMulticast_InvokeGameplayCueExecuted_WithParams_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FPredictionKey());
			UProperty* NewProp_GameplayCueTag = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("GameplayCueTag"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(GameplayCueTag, AbilitySystemComponent_eventNetMulticast_InvokeGameplayCueExecuted_WithParams_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FGameplayTag());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemComponent_OnRep_ActivateAbilities()
	{
		UObject* Outer=Z_Construct_UClass_UAbilitySystemComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnRep_ActivateAbilities"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00080401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemComponent_OnRep_GameplayEffects()
	{
		UObject* Outer=Z_Construct_UClass_UAbilitySystemComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnRep_GameplayEffects"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00080401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemComponent_OnRep_OwningActor()
	{
		UObject* Outer=Z_Construct_UClass_UAbilitySystemComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnRep_OwningActor"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemComponent_OnRep_PredictionKey()
	{
		UObject* Outer=Z_Construct_UClass_UAbilitySystemComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnRep_PredictionKey"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemComponent_OnRep_ReplicatedAnimMontage()
	{
		UObject* Outer=Z_Construct_UClass_UAbilitySystemComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnRep_ReplicatedAnimMontage"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00080401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemComponent_RemoveActiveEffectsWithTags()
	{
		struct AbilitySystemComponent_eventRemoveActiveEffectsWithTags_Parms
		{
			FGameplayTagContainer Tags;
		};
		UObject* Outer=Z_Construct_UClass_UAbilitySystemComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RemoveActiveEffectsWithTags"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(AbilitySystemComponent_eventRemoveActiveEffectsWithTags_Parms));
			UProperty* NewProp_Tags = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Tags"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Tags, AbilitySystemComponent_eventRemoveActiveEffectsWithTags_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayTagContainer());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("GameplayEffects"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemComponent_RemoveActiveGameplayEffect()
	{
		struct AbilitySystemComponent_eventRemoveActiveGameplayEffect_Parms
		{
			FActiveGameplayEffectHandle Handle;
			int32 StacksToRemove;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilitySystemComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RemoveActiveGameplayEffect"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020405, 65535, sizeof(AbilitySystemComponent_eventRemoveActiveGameplayEffect_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, AbilitySystemComponent_eventRemoveActiveGameplayEffect_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, AbilitySystemComponent_eventRemoveActiveGameplayEffect_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, AbilitySystemComponent_eventRemoveActiveGameplayEffect_Parms), sizeof(bool), true);
			UProperty* NewProp_StacksToRemove = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("StacksToRemove"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(StacksToRemove, AbilitySystemComponent_eventRemoveActiveGameplayEffect_Parms), 0x0000000000000080);
			UProperty* NewProp_Handle = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Handle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Handle, AbilitySystemComponent_eventRemoveActiveGameplayEffect_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FActiveGameplayEffectHandle());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("GameplayEffects"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_StacksToRemove"), TEXT("-1"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Removes GameplayEffect by Handle. StacksToRemove=-1 will remove all stacks."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemComponent_RemoveActiveGameplayEffectBySourceEffect()
	{
		struct AbilitySystemComponent_eventRemoveActiveGameplayEffectBySourceEffect_Parms
		{
			TSubclassOf<UGameplayEffect>  GameplayEffect;
			UAbilitySystemComponent* InstigatorAbilitySystemComponent;
			int32 StacksToRemove;
		};
		UObject* Outer=Z_Construct_UClass_UAbilitySystemComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RemoveActiveGameplayEffectBySourceEffect"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020405, 65535, sizeof(AbilitySystemComponent_eventRemoveActiveGameplayEffectBySourceEffect_Parms));
			UProperty* NewProp_StacksToRemove = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("StacksToRemove"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(StacksToRemove, AbilitySystemComponent_eventRemoveActiveGameplayEffectBySourceEffect_Parms), 0x0000000000000080);
			UProperty* NewProp_InstigatorAbilitySystemComponent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InstigatorAbilitySystemComponent"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(InstigatorAbilitySystemComponent, AbilitySystemComponent_eventRemoveActiveGameplayEffectBySourceEffect_Parms), 0x0000000000080080, Z_Construct_UClass_UAbilitySystemComponent_NoRegister());
			UProperty* NewProp_GameplayEffect = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("GameplayEffect"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(GameplayEffect, AbilitySystemComponent_eventRemoveActiveGameplayEffectBySourceEffect_Parms), 0x0004000000000080, Z_Construct_UClass_UGameplayEffect_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("GameplayEffects"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_StacksToRemove"), TEXT("-1"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Remove active gameplay effects whose backing definition are the specified gameplay effect class\n\n@param GameplayEffect                                        Class of gameplay effect to remove; Does nothing if left null\n@param InstigatorAbilitySystemComponent      If specified, will only remove gameplay effects applied from this instigator ability system component\n@param StacksToRemove                                        Number of stacks to remove, -1 means remove all"));
			MetaData->SetValue(NewProp_InstigatorAbilitySystemComponent, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemComponent_ServerCancelAbility()
	{
		UObject* Outer=Z_Construct_UClass_UAbilitySystemComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ServerCancelAbility"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x80280CC0, 65535, sizeof(AbilitySystemComponent_eventServerCancelAbility_Parms));
			UProperty* NewProp_ActivationInfo = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActivationInfo"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ActivationInfo, AbilitySystemComponent_eventServerCancelAbility_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayAbilityActivationInfo());
			UProperty* NewProp_AbilityToCancel = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AbilityToCancel"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(AbilityToCancel, AbilitySystemComponent_eventServerCancelAbility_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayAbilitySpecHandle());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemComponent_ServerCurrentMontageJumpToSectionName()
	{
		UObject* Outer=Z_Construct_UClass_UAbilitySystemComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ServerCurrentMontageJumpToSectionName"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x80280CC0, 65535, sizeof(AbilitySystemComponent_eventServerCurrentMontageJumpToSectionName_Parms));
			UProperty* NewProp_SectionName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SectionName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(SectionName, AbilitySystemComponent_eventServerCurrentMontageJumpToSectionName_Parms), 0x0000000000000080);
			UProperty* NewProp_ClientAnimMontage = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ClientAnimMontage"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ClientAnimMontage, AbilitySystemComponent_eventServerCurrentMontageJumpToSectionName_Parms), 0x0000000000000080, Z_Construct_UClass_UAnimMontage_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("RPC function called from CurrentMontageJumpToSection, replicates to other clients"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemComponent_ServerCurrentMontageSetNextSectionName()
	{
		UObject* Outer=Z_Construct_UClass_UAbilitySystemComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ServerCurrentMontageSetNextSectionName"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x80280CC0, 65535, sizeof(AbilitySystemComponent_eventServerCurrentMontageSetNextSectionName_Parms));
			UProperty* NewProp_NextSectionName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NextSectionName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(NextSectionName, AbilitySystemComponent_eventServerCurrentMontageSetNextSectionName_Parms), 0x0000000000000080);
			UProperty* NewProp_SectionName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SectionName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(SectionName, AbilitySystemComponent_eventServerCurrentMontageSetNextSectionName_Parms), 0x0000000000000080);
			UProperty* NewProp_ClientPosition = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ClientPosition"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ClientPosition, AbilitySystemComponent_eventServerCurrentMontageSetNextSectionName_Parms), 0x0000000000000080);
			UProperty* NewProp_ClientAnimMontage = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ClientAnimMontage"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ClientAnimMontage, AbilitySystemComponent_eventServerCurrentMontageSetNextSectionName_Parms), 0x0000000000000080, Z_Construct_UClass_UAnimMontage_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("RPC function called from CurrentMontageSetNextSectopnName, replicates to other clients"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemComponent_ServerEndAbility()
	{
		UObject* Outer=Z_Construct_UClass_UAbilitySystemComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ServerEndAbility"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x80280CC0, 65535, sizeof(AbilitySystemComponent_eventServerEndAbility_Parms));
			UProperty* NewProp_PredictionKey = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PredictionKey"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PredictionKey, AbilitySystemComponent_eventServerEndAbility_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FPredictionKey());
			UProperty* NewProp_ActivationInfo = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActivationInfo"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ActivationInfo, AbilitySystemComponent_eventServerEndAbility_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayAbilityActivationInfo());
			UProperty* NewProp_AbilityToEnd = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AbilityToEnd"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(AbilityToEnd, AbilitySystemComponent_eventServerEndAbility_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayAbilitySpecHandle());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemComponent_ServerSetInputPressed()
	{
		UObject* Outer=Z_Construct_UClass_UAbilitySystemComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ServerSetInputPressed"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x80220CC0, 65535, sizeof(AbilitySystemComponent_eventServerSetInputPressed_Parms));
			UProperty* NewProp_AbilityHandle = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AbilityHandle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(AbilityHandle, AbilitySystemComponent_eventServerSetInputPressed_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayAbilitySpecHandle());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Direct Input state replication. These will be called if bReplicateInputDirectly is true on the ability and is generally not a good thing to use. (Instead, prefer to use Generic Replicated Events)."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemComponent_ServerSetInputReleased()
	{
		UObject* Outer=Z_Construct_UClass_UAbilitySystemComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ServerSetInputReleased"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x80220CC0, 65535, sizeof(AbilitySystemComponent_eventServerSetInputReleased_Parms));
			UProperty* NewProp_AbilityHandle = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AbilityHandle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(AbilityHandle, AbilitySystemComponent_eventServerSetInputReleased_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayAbilitySpecHandle());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemComponent_ServerSetReplicatedEvent()
	{
		UObject* Outer=Z_Construct_UClass_UAbilitySystemComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ServerSetReplicatedEvent"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x80220CC0, 65535, sizeof(AbilitySystemComponent_eventServerSetReplicatedEvent_Parms));
			UProperty* NewProp_CurrentPredictionKey = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CurrentPredictionKey"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(CurrentPredictionKey, AbilitySystemComponent_eventServerSetReplicatedEvent_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FPredictionKey());
			UProperty* NewProp_AbilityOriginalPredictionKey = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AbilityOriginalPredictionKey"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(AbilityOriginalPredictionKey, AbilitySystemComponent_eventServerSetReplicatedEvent_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FPredictionKey());
			UProperty* NewProp_AbilityHandle = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AbilityHandle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(AbilityHandle, AbilitySystemComponent_eventServerSetReplicatedEvent_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayAbilitySpecHandle());
			UProperty* NewProp_EventType = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("EventType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(EventType, AbilitySystemComponent_eventServerSetReplicatedEvent_Parms), 0x0000000000000080, Z_Construct_UEnum_GameplayAbilities_EAbilityGenericReplicatedEvent());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Replicates the Generic Replicated Event to the server."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemComponent_ServerSetReplicatedTargetData()
	{
		UObject* Outer=Z_Construct_UClass_UAbilitySystemComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ServerSetReplicatedTargetData"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x80220CC0, 65535, sizeof(AbilitySystemComponent_eventServerSetReplicatedTargetData_Parms));
			UProperty* NewProp_CurrentPredictionKey = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CurrentPredictionKey"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(CurrentPredictionKey, AbilitySystemComponent_eventServerSetReplicatedTargetData_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FPredictionKey());
			UProperty* NewProp_ApplicationTag = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ApplicationTag"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ApplicationTag, AbilitySystemComponent_eventServerSetReplicatedTargetData_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayTag());
			UProperty* NewProp_ReplicatedTargetDataHandle = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReplicatedTargetDataHandle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReplicatedTargetDataHandle, AbilitySystemComponent_eventServerSetReplicatedTargetData_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayAbilityTargetDataHandle());
			UProperty* NewProp_AbilityOriginalPredictionKey = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AbilityOriginalPredictionKey"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(AbilityOriginalPredictionKey, AbilitySystemComponent_eventServerSetReplicatedTargetData_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FPredictionKey());
			UProperty* NewProp_AbilityHandle = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AbilityHandle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(AbilityHandle, AbilitySystemComponent_eventServerSetReplicatedTargetData_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayAbilitySpecHandle());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemComponent_ServerSetReplicatedTargetDataCancelled()
	{
		UObject* Outer=Z_Construct_UClass_UAbilitySystemComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ServerSetReplicatedTargetDataCancelled"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x80220CC0, 65535, sizeof(AbilitySystemComponent_eventServerSetReplicatedTargetDataCancelled_Parms));
			UProperty* NewProp_CurrentPredictionKey = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CurrentPredictionKey"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(CurrentPredictionKey, AbilitySystemComponent_eventServerSetReplicatedTargetDataCancelled_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FPredictionKey());
			UProperty* NewProp_AbilityOriginalPredictionKey = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AbilityOriginalPredictionKey"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(AbilityOriginalPredictionKey, AbilitySystemComponent_eventServerSetReplicatedTargetDataCancelled_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FPredictionKey());
			UProperty* NewProp_AbilityHandle = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AbilityHandle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(AbilityHandle, AbilitySystemComponent_eventServerSetReplicatedTargetDataCancelled_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayAbilitySpecHandle());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Replicates to the server that targeting has been cancelled"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemComponent_ServerTryActivateAbility()
	{
		UObject* Outer=Z_Construct_UClass_UAbilitySystemComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ServerTryActivateAbility"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x80280CC0, 65535, sizeof(AbilitySystemComponent_eventServerTryActivateAbility_Parms));
			UProperty* NewProp_PredictionKey = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PredictionKey"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PredictionKey, AbilitySystemComponent_eventServerTryActivateAbility_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FPredictionKey());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(InputPressed, AbilitySystemComponent_eventServerTryActivateAbility_Parms, bool);
			UProperty* NewProp_InputPressed = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InputPressed"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(InputPressed, AbilitySystemComponent_eventServerTryActivateAbility_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(InputPressed, AbilitySystemComponent_eventServerTryActivateAbility_Parms), sizeof(bool), true);
			UProperty* NewProp_AbilityToActivate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AbilityToActivate"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(AbilityToActivate, AbilitySystemComponent_eventServerTryActivateAbility_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayAbilitySpecHandle());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemComponent_ServerTryActivateAbilityWithEventData()
	{
		UObject* Outer=Z_Construct_UClass_UAbilitySystemComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ServerTryActivateAbilityWithEventData"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x80280CC0, 65535, sizeof(AbilitySystemComponent_eventServerTryActivateAbilityWithEventData_Parms));
			UProperty* NewProp_TriggerEventData = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TriggerEventData"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TriggerEventData, AbilitySystemComponent_eventServerTryActivateAbilityWithEventData_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayEventData());
			UProperty* NewProp_PredictionKey = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PredictionKey"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PredictionKey, AbilitySystemComponent_eventServerTryActivateAbilityWithEventData_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FPredictionKey());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(InputPressed, AbilitySystemComponent_eventServerTryActivateAbilityWithEventData_Parms, bool);
			UProperty* NewProp_InputPressed = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InputPressed"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(InputPressed, AbilitySystemComponent_eventServerTryActivateAbilityWithEventData_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(InputPressed, AbilitySystemComponent_eventServerTryActivateAbilityWithEventData_Parms), sizeof(bool), true);
			UProperty* NewProp_AbilityToActivate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AbilityToActivate"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(AbilityToActivate, AbilitySystemComponent_eventServerTryActivateAbilityWithEventData_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayAbilitySpecHandle());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemComponent_SetActiveGameplayEffectLevel()
	{
		struct AbilitySystemComponent_eventSetActiveGameplayEffectLevel_Parms
		{
			FActiveGameplayEffectHandle ActiveHandle;
			int32 NewLevel;
		};
		UObject* Outer=Z_Construct_UClass_UAbilitySystemComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetActiveGameplayEffectLevel"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020405, 65535, sizeof(AbilitySystemComponent_eventSetActiveGameplayEffectLevel_Parms));
			UProperty* NewProp_NewLevel = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewLevel"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(NewLevel, AbilitySystemComponent_eventSetActiveGameplayEffectLevel_Parms), 0x0000000000000080);
			UProperty* NewProp_ActiveHandle = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActiveHandle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ActiveHandle, AbilitySystemComponent_eventSetActiveGameplayEffectLevel_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FActiveGameplayEffectHandle());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("GameplayEffects"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Updates the level of an already applied gameplay effect. The intention is that this is 'seemless' and doesnt behave like removing/reapplying"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemComponent_SetUserAbilityActivationInhibited()
	{
		struct AbilitySystemComponent_eventSetUserAbilityActivationInhibited_Parms
		{
			bool NewInhibit;
		};
		UObject* Outer=Z_Construct_UClass_UAbilitySystemComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetUserAbilityActivationInhibited"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(AbilitySystemComponent_eventSetUserAbilityActivationInhibited_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(NewInhibit, AbilitySystemComponent_eventSetUserAbilityActivationInhibited_Parms, bool);
			UProperty* NewProp_NewInhibit = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewInhibit"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(NewInhibit, AbilitySystemComponent_eventSetUserAbilityActivationInhibited_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(NewInhibit, AbilitySystemComponent_eventSetUserAbilityActivationInhibited_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Abilities"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Disable or Enable a local user from being able to activate abilities. This should only be used for input/UI etc related inhibition. Do not use for game mechanics."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemComponent_TargetCancel()
	{
		UObject* Outer=Z_Construct_UClass_UAbilitySystemComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TargetCancel"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Abilities"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Any active targeting actors will be stopped and canceled, not returning any targeting data"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemComponent_TargetConfirm()
	{
		UObject* Outer=Z_Construct_UClass_UAbilitySystemComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TargetConfirm"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Abilities"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Any active targeting actors will be told to stop and return current targeting data"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemComponent_TryActivateAbilitiesByTag()
	{
		struct AbilitySystemComponent_eventTryActivateAbilitiesByTag_Parms
		{
			FGameplayTagContainer GameplayTagContainer;
			bool bAllowRemoteActivation;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilitySystemComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TryActivateAbilitiesByTag"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04420401, 65535, sizeof(AbilitySystemComponent_eventTryActivateAbilitiesByTag_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, AbilitySystemComponent_eventTryActivateAbilitiesByTag_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, AbilitySystemComponent_eventTryActivateAbilitiesByTag_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, AbilitySystemComponent_eventTryActivateAbilitiesByTag_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAllowRemoteActivation, AbilitySystemComponent_eventTryActivateAbilitiesByTag_Parms, bool);
			UProperty* NewProp_bAllowRemoteActivation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bAllowRemoteActivation"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAllowRemoteActivation, AbilitySystemComponent_eventTryActivateAbilitiesByTag_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bAllowRemoteActivation, AbilitySystemComponent_eventTryActivateAbilitiesByTag_Parms), sizeof(bool), true);
			UProperty* NewProp_GameplayTagContainer = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("GameplayTagContainer"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(GameplayTagContainer, AbilitySystemComponent_eventTryActivateAbilitiesByTag_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FGameplayTagContainer());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Abilities"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bAllowRemoteActivation"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Attempts to activate every gameplay ability that matches the given tag and DoesAbilitySatisfyTagRequirements().\nReturns true if anything attempts to activate. Can activate more than one ability and the ability may fail later.\nIf bAllowRemoteActivation is true, it will remotely activate local/server abilities, if false it will only try to locally activate abilities."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemComponent_TryActivateAbilityByClass()
	{
		struct AbilitySystemComponent_eventTryActivateAbilityByClass_Parms
		{
			TSubclassOf<UGameplayAbility>  InAbilityToActivate;
			bool bAllowRemoteActivation;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilitySystemComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TryActivateAbilityByClass"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(AbilitySystemComponent_eventTryActivateAbilityByClass_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, AbilitySystemComponent_eventTryActivateAbilityByClass_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, AbilitySystemComponent_eventTryActivateAbilityByClass_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, AbilitySystemComponent_eventTryActivateAbilityByClass_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAllowRemoteActivation, AbilitySystemComponent_eventTryActivateAbilityByClass_Parms, bool);
			UProperty* NewProp_bAllowRemoteActivation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bAllowRemoteActivation"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAllowRemoteActivation, AbilitySystemComponent_eventTryActivateAbilityByClass_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bAllowRemoteActivation, AbilitySystemComponent_eventTryActivateAbilityByClass_Parms), sizeof(bool), true);
			UProperty* NewProp_InAbilityToActivate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InAbilityToActivate"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(InAbilityToActivate, AbilitySystemComponent_eventTryActivateAbilityByClass_Parms), 0x0004000000000080, Z_Construct_UClass_UGameplayAbility_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Abilities"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bAllowRemoteActivation"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Attempts to activate the ability that is passed in. This will check costs and requirements before doing so.\nReturns true if it thinks it activated, but it may return false positives due to failure later in activation.\nIf bAllowRemoteActivation is true, it will remotely activate local/server abilities, if false it will only try to locally activate the ability"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UAbilitySystemComponent_NoRegister()
	{
		return UAbilitySystemComponent::StaticClass();
	}
	UClass* Z_Construct_UClass_UAbilitySystemComponent()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UGameplayTasksComponent();
			Z_Construct_UPackage_GameplayAbilities();
			OuterClass = UAbilitySystemComponent::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20B01080;

				OuterClass->LinkChild(Z_Construct_UDelegateFunction_UAbilitySystemComponent_AbilityAbilityKey__DelegateSignature());
				OuterClass->LinkChild(Z_Construct_UDelegateFunction_UAbilitySystemComponent_AbilityConfirmOrCancel__DelegateSignature());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemComponent_BP_ApplyGameplayEffectSpecToSelf());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemComponent_BP_ApplyGameplayEffectSpecToTarget());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemComponent_BP_ApplyGameplayEffectToSelf());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemComponent_BP_ApplyGameplayEffectToTarget());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemComponent_ClientActivateAbilityFailed());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemComponent_ClientActivateAbilitySucceed());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemComponent_ClientActivateAbilitySucceedWithEventData());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemComponent_ClientCancelAbility());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemComponent_ClientEndAbility());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemComponent_ClientSetReplicatedEvent());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemComponent_ClientTryActivateAbility());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemComponent_GetEffectContext());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemComponent_GetGameplayEffectCount());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemComponent_GetGameplayEffectMagnitude());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemComponent_GetOutgoingSpec());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemComponent_GetUserAbilityActivationInhibited());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemComponent_IsGameplayCueActive());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemComponent_K2_ApplyGameplayEffectToSelf());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemComponent_K2_ApplyGameplayEffectToTarget());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemComponent_K2_InitStats());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemComponent_MakeOutgoingSpec());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemComponent_NetMulticast_InvokeGameplayCueAdded());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemComponent_NetMulticast_InvokeGameplayCueAddedAndWhileActive_FromSpec());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemComponent_NetMulticast_InvokeGameplayCueExecuted());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemComponent_NetMulticast_InvokeGameplayCueExecuted_FromSpec());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemComponent_NetMulticast_InvokeGameplayCueExecuted_WithParams());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemComponent_OnRep_ActivateAbilities());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemComponent_OnRep_GameplayEffects());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemComponent_OnRep_OwningActor());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemComponent_OnRep_PredictionKey());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemComponent_OnRep_ReplicatedAnimMontage());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemComponent_RemoveActiveEffectsWithTags());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemComponent_RemoveActiveGameplayEffect());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemComponent_RemoveActiveGameplayEffectBySourceEffect());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemComponent_ServerCancelAbility());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemComponent_ServerCurrentMontageJumpToSectionName());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemComponent_ServerCurrentMontageSetNextSectionName());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemComponent_ServerEndAbility());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemComponent_ServerSetInputPressed());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemComponent_ServerSetInputReleased());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemComponent_ServerSetReplicatedEvent());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemComponent_ServerSetReplicatedTargetData());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemComponent_ServerSetReplicatedTargetDataCancelled());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemComponent_ServerTryActivateAbility());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemComponent_ServerTryActivateAbilityWithEventData());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemComponent_SetActiveGameplayEffectLevel());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemComponent_SetUserAbilityActivationInhibited());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemComponent_TargetCancel());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemComponent_TargetConfirm());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemComponent_TryActivateAbilitiesByTag());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemComponent_TryActivateAbilityByClass());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_BlockedAbilityBindings = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BlockedAbilityBindings"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(BlockedAbilityBindings, UAbilitySystemComponent), 0x0000080000002020);
				UProperty* NewProp_BlockedAbilityBindings_Inner = new(EC_InternalUseOnlyConstructor, NewProp_BlockedAbilityBindings, TEXT("BlockedAbilityBindings"), RF_Public|RF_Transient|RF_Native) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
				UProperty* NewProp_ActiveGameplayCues = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ActiveGameplayCues"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ActiveGameplayCues, UAbilitySystemComponent), 0x0000088100000020, Z_Construct_UScriptStruct_FActiveGameplayCueContainer());
				NewProp_ActiveGameplayCues->RepNotifyFunc = FName(TEXT("OnRep_GameplayEffects"));
				UProperty* NewProp_ActiveGameplayEffects = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ActiveGameplayEffects"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ActiveGameplayEffects, UAbilitySystemComponent), 0x0000080100000020, Z_Construct_UScriptStruct_FActiveGameplayEffectsContainer());
				NewProp_ActiveGameplayEffects->RepNotifyFunc = FName(TEXT("OnRep_GameplayEffects"));
				UProperty* NewProp_AvatarActor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AvatarActor"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(AvatarActor, UAbilitySystemComponent), 0x0000000100000020, Z_Construct_UClass_AActor_NoRegister());
				NewProp_AvatarActor->RepNotifyFunc = FName(TEXT("OnRep_OwningActor"));
				UProperty* NewProp_OwnerActor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OwnerActor"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(OwnerActor, UAbilitySystemComponent), 0x0000000100000020, Z_Construct_UClass_AActor_NoRegister());
				NewProp_OwnerActor->RepNotifyFunc = FName(TEXT("OnRep_OwningActor"));
				UProperty* NewProp_LocalAnimMontageInfo = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LocalAnimMontageInfo"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LocalAnimMontageInfo, UAbilitySystemComponent), 0x0000080000000000, Z_Construct_UScriptStruct_FGameplayAbilityLocalAnimMontage());
				UProperty* NewProp_RepAnimMontageInfo = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RepAnimMontageInfo"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(RepAnimMontageInfo, UAbilitySystemComponent), 0x0000080100000020, Z_Construct_UScriptStruct_FGameplayAbilityRepAnimMontage());
				NewProp_RepAnimMontageInfo->RepNotifyFunc = FName(TEXT("OnRep_ReplicatedAnimMontage"));
				UProperty* NewProp_SpawnedTargetActors = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SpawnedTargetActors"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(SpawnedTargetActors, UAbilitySystemComponent), 0x0000000000000000);
				UProperty* NewProp_SpawnedTargetActors_Inner = new(EC_InternalUseOnlyConstructor, NewProp_SpawnedTargetActors, TEXT("SpawnedTargetActors"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AGameplayAbilityTargetActor_NoRegister());
				UProperty* NewProp_AllReplicatedInstancedAbilities = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AllReplicatedInstancedAbilities"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(AllReplicatedInstancedAbilities, UAbilitySystemComponent), 0x0000080000000000);
				UProperty* NewProp_AllReplicatedInstancedAbilities_Inner = new(EC_InternalUseOnlyConstructor, NewProp_AllReplicatedInstancedAbilities, TEXT("AllReplicatedInstancedAbilities"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UGameplayAbility_NoRegister());
				UProperty* NewProp_ActivatableAbilities = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ActivatableAbilities"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ActivatableAbilities, UAbilitySystemComponent), 0x0000080100000034, Z_Construct_UScriptStruct_FGameplayAbilitySpecContainer());
				NewProp_ActivatableAbilities->RepNotifyFunc = FName(TEXT("OnRep_ActivateAbilities"));
				UProperty* NewProp_IncomingDuration = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("IncomingDuration"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(IncomingDuration, UAbilitySystemComponent), 0x0000000000000000);
				UProperty* NewProp_OutgoingDuration = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OutgoingDuration"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(OutgoingDuration, UAbilitySystemComponent), 0x0000000000000000);
				UProperty* NewProp_ReplicatedPredictionKey = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ReplicatedPredictionKey"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReplicatedPredictionKey, UAbilitySystemComponent), 0x0000000100000020, Z_Construct_UScriptStruct_FPredictionKey());
				NewProp_ReplicatedPredictionKey->RepNotifyFunc = FName(TEXT("OnRep_PredictionKey"));
				UProperty* NewProp_SpawnedAttributes = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SpawnedAttributes"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(SpawnedAttributes, UAbilitySystemComponent), 0x0000008000000028);
				UProperty* NewProp_SpawnedAttributes_Inner = new(EC_InternalUseOnlyConstructor, NewProp_SpawnedAttributes, TEXT("SpawnedAttributes"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000080008, Z_Construct_UClass_UAttributeSet_NoRegister());
				UProperty* NewProp_DefaultStartingData = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultStartingData"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(DefaultStartingData, UAbilitySystemComponent), 0x0000000000000001);
				UProperty* NewProp_DefaultStartingData_Inner = new(EC_InternalUseOnlyConstructor, NewProp_DefaultStartingData, TEXT("DefaultStartingData"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FAttributeDefaults());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UDelegateFunction_UAbilitySystemComponent_AbilityAbilityKey__DelegateSignature()); // 1265070076
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UDelegateFunction_UAbilitySystemComponent_AbilityConfirmOrCancel__DelegateSignature()); // 3446534637
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemComponent_BP_ApplyGameplayEffectSpecToSelf()); // 238798991
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemComponent_BP_ApplyGameplayEffectSpecToTarget()); // 1243397864
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemComponent_BP_ApplyGameplayEffectToSelf()); // 3801667470
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemComponent_BP_ApplyGameplayEffectToTarget()); // 1018595608
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemComponent_ClientActivateAbilityFailed()); // 1249309751
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemComponent_ClientActivateAbilitySucceed()); // 3072337267
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemComponent_ClientActivateAbilitySucceedWithEventData()); // 3085150118
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemComponent_ClientCancelAbility()); // 2027920808
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemComponent_ClientEndAbility()); // 3728710656
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemComponent_ClientSetReplicatedEvent()); // 3891319407
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemComponent_ClientTryActivateAbility()); // 2230321136
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemComponent_GetEffectContext()); // 2401866362
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemComponent_GetGameplayEffectCount()); // 116080387
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemComponent_GetGameplayEffectMagnitude()); // 2093143698
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemComponent_GetOutgoingSpec()); // 1239169420
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemComponent_GetUserAbilityActivationInhibited()); // 3822077427
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemComponent_IsGameplayCueActive()); // 3268270817
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemComponent_K2_ApplyGameplayEffectToSelf()); // 3808836271
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemComponent_K2_ApplyGameplayEffectToTarget()); // 2098481391
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemComponent_K2_InitStats()); // 3649482069
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemComponent_MakeOutgoingSpec()); // 3373324138
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemComponent_NetMulticast_InvokeGameplayCueAdded()); // 1668026206
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemComponent_NetMulticast_InvokeGameplayCueAddedAndWhileActive_FromSpec()); // 151577019
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemComponent_NetMulticast_InvokeGameplayCueExecuted()); // 857957909
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemComponent_NetMulticast_InvokeGameplayCueExecuted_FromSpec()); // 3468260637
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemComponent_NetMulticast_InvokeGameplayCueExecuted_WithParams()); // 4236326159
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemComponent_OnRep_ActivateAbilities()); // 3744566364
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemComponent_OnRep_GameplayEffects()); // 3318108546
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemComponent_OnRep_OwningActor()); // 3268489861
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemComponent_OnRep_PredictionKey()); // 239661945
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemComponent_OnRep_ReplicatedAnimMontage()); // 515157280
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemComponent_RemoveActiveEffectsWithTags()); // 647369306
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemComponent_RemoveActiveGameplayEffect()); // 1860148409
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemComponent_RemoveActiveGameplayEffectBySourceEffect()); // 1021034318
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemComponent_ServerCancelAbility()); // 2327389375
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemComponent_ServerCurrentMontageJumpToSectionName()); // 296255040
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemComponent_ServerCurrentMontageSetNextSectionName()); // 2607713941
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemComponent_ServerEndAbility()); // 4030151416
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemComponent_ServerSetInputPressed()); // 4177503861
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemComponent_ServerSetInputReleased()); // 1890253473
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemComponent_ServerSetReplicatedEvent()); // 676694585
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemComponent_ServerSetReplicatedTargetData()); // 465242764
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemComponent_ServerSetReplicatedTargetDataCancelled()); // 470620372
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemComponent_ServerTryActivateAbility()); // 2686648164
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemComponent_ServerTryActivateAbilityWithEventData()); // 277600491
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemComponent_SetActiveGameplayEffectLevel()); // 3432052547
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemComponent_SetUserAbilityActivationInhibited()); // 328629137
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemComponent_TargetCancel()); // 1624892839
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemComponent_TargetConfirm()); // 1903593359
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemComponent_TryActivateAbilitiesByTag()); // 1884013348
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemComponent_TryActivateAbilityByClass()); // 1126208159
				OuterClass->Interfaces.Add(FImplementedInterface(Z_Construct_UClass_UGameplayTagAssetInterface_NoRegister(), VTABLE_OFFSET(UAbilitySystemComponent, IGameplayTagAssetInterface), false ));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintSpawnableComponent"), TEXT(""));
				MetaData->SetValue(OuterClass, TEXT("ClassGroupNames"), TEXT("AbilitySystem"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object LOD Lighting Transform Sockets TextureStreaming Object LOD Lighting Transform Sockets TextureStreaming ComponentReplication"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("AbilitySystemComponent.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemComponent.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("The core ActorComponent for interfacing with the GameplayAbilities System"));
				MetaData->SetValue(NewProp_BlockedAbilityBindings, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemComponent.h"));
				MetaData->SetValue(NewProp_BlockedAbilityBindings, TEXT("ToolTip"), TEXT("Tracks abilities that are blocked based on input binding. An ability is blocked if BlockedAbilityBindings[InputID] > 0"));
				MetaData->SetValue(NewProp_ActiveGameplayCues, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemComponent.h"));
				MetaData->SetValue(NewProp_ActiveGameplayEffects, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemComponent.h"));
				MetaData->SetValue(NewProp_ActiveGameplayEffects, TEXT("ToolTip"), TEXT("Contains all of the gameplay effects that are currently active on this component"));
				MetaData->SetValue(NewProp_AvatarActor, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemComponent.h"));
				MetaData->SetValue(NewProp_AvatarActor, TEXT("ToolTip"), TEXT("The actor that is the physical representation used for abilities. Can be NULL"));
				MetaData->SetValue(NewProp_OwnerActor, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemComponent.h"));
				MetaData->SetValue(NewProp_OwnerActor, TEXT("ToolTip"), TEXT("The actor that owns this component logically"));
				MetaData->SetValue(NewProp_LocalAnimMontageInfo, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemComponent.h"));
				MetaData->SetValue(NewProp_LocalAnimMontageInfo, TEXT("ToolTip"), TEXT("Data structure for montages that were instigated locally (everything if server, predictive if client. replicated if simulated proxy)"));
				MetaData->SetValue(NewProp_RepAnimMontageInfo, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemComponent.h"));
				MetaData->SetValue(NewProp_RepAnimMontageInfo, TEXT("ToolTip"), TEXT("Data structure for replicating montage info to simulated clients"));
				MetaData->SetValue(NewProp_SpawnedTargetActors, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemComponent.h"));
				MetaData->SetValue(NewProp_AllReplicatedInstancedAbilities, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemComponent.h"));
				MetaData->SetValue(NewProp_AllReplicatedInstancedAbilities, TEXT("ToolTip"), TEXT("Full list of all instance-per-execution gameplay abilities associated with this component"));
				MetaData->SetValue(NewProp_ActivatableAbilities, TEXT("Category"), TEXT("Abilities"));
				MetaData->SetValue(NewProp_ActivatableAbilities, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemComponent.h"));
				MetaData->SetValue(NewProp_ActivatableAbilities, TEXT("ToolTip"), TEXT("The abilities we can activate.\n        -This will include CDOs for non instanced abilities and per-execution instanced abilities.\n        -Actor-instanced abilities will be the actual instance (not CDO)\n\nThis array is not vital for things to work. It is a convenience thing for 'giving abilities to the actor'. But abilities could also work on things\nwithout an AbilitySystemComponent. For example an ability could be written to execute on a StaticMeshActor. As long as the ability doesn't require\ninstancing or anything else that the AbilitySystemComponent would provide, then it doesn't need the component to function."));
				MetaData->SetValue(NewProp_IncomingDuration, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemComponent.h"));
				MetaData->SetValue(NewProp_IncomingDuration, TEXT("SystemGameplayAttribute"), TEXT("true"));
				MetaData->SetValue(NewProp_OutgoingDuration, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemComponent.h"));
				MetaData->SetValue(NewProp_OutgoingDuration, TEXT("SystemGameplayAttribute"), TEXT("true"));
				MetaData->SetValue(NewProp_OutgoingDuration, TEXT("ToolTip"), TEXT("System Attributes"));
				MetaData->SetValue(NewProp_ReplicatedPredictionKey, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemComponent.h"));
				MetaData->SetValue(NewProp_ReplicatedPredictionKey, TEXT("ToolTip"), TEXT("PredictionKeys, see more info in GameplayPrediction.h"));
				MetaData->SetValue(NewProp_SpawnedAttributes, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_SpawnedAttributes, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemComponent.h"));
				MetaData->SetValue(NewProp_DefaultStartingData, TEXT("Category"), TEXT("AttributeTest"));
				MetaData->SetValue(NewProp_DefaultStartingData, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemComponent.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UAbilitySystemComponent(Z_Construct_UClass_UAbilitySystemComponent, TEXT("UAbilitySystemComponent"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UAbilitySystemComponent);
	UClass* Z_Construct_UClass_AAbilitySystemDebugHUD_NoRegister()
	{
		return AAbilitySystemDebugHUD::StaticClass();
	}
	UClass* Z_Construct_UClass_AAbilitySystemDebugHUD()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AHUD();
			Z_Construct_UPackage_GameplayAbilities();
			OuterClass = AAbilitySystemDebugHUD::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x2080028C;


				OuterClass->ClassConfigName = FName(TEXT("Game"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Rendering Actor Input Replication"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("AbilitySystemDebugHUD.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemDebugHUD.h"));
				MetaData->SetValue(OuterClass, TEXT("ShowCategories"), TEXT("Input|MouseInput Input|TouchInput"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AAbilitySystemDebugHUD(Z_Construct_UClass_AAbilitySystemDebugHUD, TEXT("AAbilitySystemDebugHUD"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(AAbilitySystemDebugHUD);
	UFunction* Z_Construct_UFunction_UAbilitySystemGlobals_ToggleIgnoreAbilitySystemCooldowns()
	{
		UObject* Outer=Z_Construct_UClass_UAbilitySystemGlobals();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ToggleIgnoreAbilitySystemCooldowns"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020600, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemGlobals.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Toggles whether we should ignore ability cooldowns. Does nothing in shipping builds"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilitySystemGlobals_ToggleIgnoreAbilitySystemCosts()
	{
		UObject* Outer=Z_Construct_UClass_UAbilitySystemGlobals();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ToggleIgnoreAbilitySystemCosts"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020600, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemGlobals.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Toggles whether we should ignore ability costs. Does nothing in shipping builds"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UAbilitySystemGlobals_NoRegister()
	{
		return UAbilitySystemGlobals::StaticClass();
	}
	UClass* Z_Construct_UClass_UAbilitySystemGlobals()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_GameplayAbilities();
			OuterClass = UAbilitySystemGlobals::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100084;

				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemGlobals_ToggleIgnoreAbilitySystemCooldowns());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilitySystemGlobals_ToggleIgnoreAbilitySystemCosts());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_GlobalGameplayCueManager = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GlobalGameplayCueManager"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(GlobalGameplayCueManager, UAbilitySystemGlobals), 0x0000000000000000, Z_Construct_UClass_UGameplayCueManager_NoRegister());
				UProperty* NewProp_GlobalAttributeMetaDataTable = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GlobalAttributeMetaDataTable"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(GlobalAttributeMetaDataTable, UAbilitySystemGlobals), 0x0000000000000000, Z_Construct_UClass_UDataTable_NoRegister());
				UProperty* NewProp_GlobalAttributeDefaultsTable = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GlobalAttributeDefaultsTable"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(GlobalAttributeDefaultsTable, UAbilitySystemGlobals), 0x0000000000000000, Z_Construct_UClass_UCurveTable_NoRegister());
				UProperty* NewProp_GlobalCurveTable = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GlobalCurveTable"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(GlobalCurveTable, UAbilitySystemGlobals), 0x0000000000000000, Z_Construct_UClass_UCurveTable_NoRegister());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(PredictTargetGameplayEffects, UAbilitySystemGlobals, bool);
				UProperty* NewProp_PredictTargetGameplayEffects = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PredictTargetGameplayEffects"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(PredictTargetGameplayEffects, UAbilitySystemGlobals), 0x0000000000004000, CPP_BOOL_PROPERTY_BITMASK(PredictTargetGameplayEffects, UAbilitySystemGlobals), sizeof(bool), true);
				UProperty* NewProp_GameplayTagResponseTable = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GameplayTagResponseTable"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(GameplayTagResponseTable, UAbilitySystemGlobals), 0x0000000000000000, Z_Construct_UClass_UGameplayTagReponseTable_NoRegister());
				UProperty* NewProp_GameplayTagResponseTableName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GameplayTagResponseTableName"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(GameplayTagResponseTableName, UAbilitySystemGlobals), 0x0000000000004000, Z_Construct_UScriptStruct_FStringAssetReference());
				UProperty* NewProp_GameplayCueNotifyPaths = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GameplayCueNotifyPaths"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(GameplayCueNotifyPaths, UAbilitySystemGlobals), 0x0000000000004000);
				UProperty* NewProp_GameplayCueNotifyPaths_Inner = new(EC_InternalUseOnlyConstructor, NewProp_GameplayCueNotifyPaths, TEXT("GameplayCueNotifyPaths"), RF_Public|RF_Transient|RF_Native) UStrProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000004000);
				UProperty* NewProp_GlobalGameplayCueManagerName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GlobalGameplayCueManagerName"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(GlobalGameplayCueManagerName, UAbilitySystemGlobals), 0x0000000000004000, Z_Construct_UScriptStruct_FStringAssetReference());
				UProperty* NewProp_GlobalAttributeSetDefaultsTableName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GlobalAttributeSetDefaultsTableName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(GlobalAttributeSetDefaultsTableName, UAbilitySystemGlobals), 0x0000000000004000);
				UProperty* NewProp_GlobalAttributeMetaDataTableName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GlobalAttributeMetaDataTableName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(GlobalAttributeMetaDataTableName, UAbilitySystemGlobals), 0x0000000000004000);
				UProperty* NewProp_GlobalCurveTableName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GlobalCurveTableName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(GlobalCurveTableName, UAbilitySystemGlobals), 0x0000000000004000);
				UProperty* NewProp_ActivateFailNetworkingName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ActivateFailNetworkingName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(ActivateFailNetworkingName, UAbilitySystemGlobals), 0x0000000000004000);
				UProperty* NewProp_ActivateFailNetworkingTag = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ActivateFailNetworkingTag"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ActivateFailNetworkingTag, UAbilitySystemGlobals), 0x0000000000000000, Z_Construct_UScriptStruct_FGameplayTag());
				UProperty* NewProp_ActivateFailTagsMissingName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ActivateFailTagsMissingName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(ActivateFailTagsMissingName, UAbilitySystemGlobals), 0x0000000000004000);
				UProperty* NewProp_ActivateFailTagsMissingTag = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ActivateFailTagsMissingTag"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ActivateFailTagsMissingTag, UAbilitySystemGlobals), 0x0000000000000000, Z_Construct_UScriptStruct_FGameplayTag());
				UProperty* NewProp_ActivateFailTagsBlockedName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ActivateFailTagsBlockedName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(ActivateFailTagsBlockedName, UAbilitySystemGlobals), 0x0000000000004000);
				UProperty* NewProp_ActivateFailTagsBlockedTag = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ActivateFailTagsBlockedTag"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ActivateFailTagsBlockedTag, UAbilitySystemGlobals), 0x0000000000000000, Z_Construct_UScriptStruct_FGameplayTag());
				UProperty* NewProp_ActivateFailCostName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ActivateFailCostName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(ActivateFailCostName, UAbilitySystemGlobals), 0x0000000000004000);
				UProperty* NewProp_ActivateFailCostTag = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ActivateFailCostTag"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ActivateFailCostTag, UAbilitySystemGlobals), 0x0000000000000000, Z_Construct_UScriptStruct_FGameplayTag());
				UProperty* NewProp_ActivateFailCooldownName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ActivateFailCooldownName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(ActivateFailCooldownName, UAbilitySystemGlobals), 0x0000000000004000);
				UProperty* NewProp_ActivateFailCooldownTag = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ActivateFailCooldownTag"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ActivateFailCooldownTag, UAbilitySystemGlobals), 0x0000000000000000, Z_Construct_UScriptStruct_FGameplayTag());
				UProperty* NewProp_AbilitySystemGlobalsClassName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AbilitySystemGlobalsClassName"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(AbilitySystemGlobalsClassName, UAbilitySystemGlobals), 0x0000000000004000, Z_Construct_UScriptStruct_FStringClassReference());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemGlobals_ToggleIgnoreAbilitySystemCooldowns()); // 511980629
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilitySystemGlobals_ToggleIgnoreAbilitySystemCosts()); // 696000855
				OuterClass->ClassConfigName = FName(TEXT("Game"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("AbilitySystemGlobals.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemGlobals.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Holds global data for the ability system. Can be configured per project via config file"));
				MetaData->SetValue(NewProp_GlobalGameplayCueManager, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemGlobals.h"));
				MetaData->SetValue(NewProp_GlobalAttributeMetaDataTable, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemGlobals.h"));
				MetaData->SetValue(NewProp_GlobalAttributeDefaultsTable, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemGlobals.h"));
				MetaData->SetValue(NewProp_GlobalCurveTable, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemGlobals.h"));
				MetaData->SetValue(NewProp_PredictTargetGameplayEffects, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemGlobals.h"));
				MetaData->SetValue(NewProp_PredictTargetGameplayEffects, TEXT("ToolTip"), TEXT("Set to true if you want clients to try to predict gameplay effects done to targets. If false it will only predict self effects"));
				MetaData->SetValue(NewProp_GameplayTagResponseTable, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemGlobals.h"));
				MetaData->SetValue(NewProp_GameplayTagResponseTableName, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemGlobals.h"));
				MetaData->SetValue(NewProp_GameplayTagResponseTableName, TEXT("ToolTip"), TEXT("The class to instantiate as the GameplayTagResponseTable."));
				MetaData->SetValue(NewProp_GameplayCueNotifyPaths, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemGlobals.h"));
				MetaData->SetValue(NewProp_GameplayCueNotifyPaths, TEXT("ToolTip"), TEXT("Look in these paths for GameplayCueNotifies"));
				MetaData->SetValue(NewProp_GlobalGameplayCueManagerName, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemGlobals.h"));
				MetaData->SetValue(NewProp_GlobalGameplayCueManagerName, TEXT("ToolTip"), TEXT("The class to instantiate as the global GameplayCue manager. This class is responsible for directing GameplayCue events, loading and cooking assets related to GameplayCues."));
				MetaData->SetValue(NewProp_GlobalAttributeSetDefaultsTableName, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemGlobals.h"));
				MetaData->SetValue(NewProp_GlobalAttributeSetDefaultsTableName, TEXT("ToolTip"), TEXT("Holds default values for attribute sets, keyed off of Name/Levels."));
				MetaData->SetValue(NewProp_GlobalAttributeMetaDataTableName, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemGlobals.h"));
				MetaData->SetValue(NewProp_GlobalAttributeMetaDataTableName, TEXT("ToolTip"), TEXT("Holds information about the valid attributes' min and max values and stacking rules"));
				MetaData->SetValue(NewProp_GlobalCurveTableName, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemGlobals.h"));
				MetaData->SetValue(NewProp_GlobalCurveTableName, TEXT("ToolTip"), TEXT("Holds all of the valid gameplay-related tags that can be applied to assets"));
				MetaData->SetValue(NewProp_ActivateFailNetworkingName, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemGlobals.h"));
				MetaData->SetValue(NewProp_ActivateFailNetworkingName, TEXT("ToolTip"), TEXT("Failed to activate due to invalid networking settings, this is designer error"));
				MetaData->SetValue(NewProp_ActivateFailNetworkingTag, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemGlobals.h"));
				MetaData->SetValue(NewProp_ActivateFailTagsMissingName, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemGlobals.h"));
				MetaData->SetValue(NewProp_ActivateFailTagsMissingName, TEXT("ToolTip"), TEXT("TryActivate failed due to missing required tags"));
				MetaData->SetValue(NewProp_ActivateFailTagsMissingTag, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemGlobals.h"));
				MetaData->SetValue(NewProp_ActivateFailTagsBlockedName, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemGlobals.h"));
				MetaData->SetValue(NewProp_ActivateFailTagsBlockedName, TEXT("ToolTip"), TEXT("TryActivate failed due to being blocked by other abilities"));
				MetaData->SetValue(NewProp_ActivateFailTagsBlockedTag, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemGlobals.h"));
				MetaData->SetValue(NewProp_ActivateFailCostName, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemGlobals.h"));
				MetaData->SetValue(NewProp_ActivateFailCostName, TEXT("ToolTip"), TEXT("TryActivate failed due to not being able to spend costs"));
				MetaData->SetValue(NewProp_ActivateFailCostTag, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemGlobals.h"));
				MetaData->SetValue(NewProp_ActivateFailCooldownName, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemGlobals.h"));
				MetaData->SetValue(NewProp_ActivateFailCooldownName, TEXT("ToolTip"), TEXT("TryActivate failed due to being on cooldown"));
				MetaData->SetValue(NewProp_ActivateFailCooldownTag, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemGlobals.h"));
				MetaData->SetValue(NewProp_ActivateFailCooldownTag, TEXT("ToolTip"), TEXT("Global Tags"));
				MetaData->SetValue(NewProp_AbilitySystemGlobalsClassName, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemGlobals.h"));
				MetaData->SetValue(NewProp_AbilitySystemGlobalsClassName, TEXT("ToolTip"), TEXT("The class to instantiate as the globals object. Defaults to this class but can be overridden"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UAbilitySystemGlobals(Z_Construct_UClass_UAbilitySystemGlobals, TEXT("UAbilitySystemGlobals"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UAbilitySystemGlobals);
	UClass* Z_Construct_UClass_UAbilitySystemInterface_NoRegister()
	{
		return UAbilitySystemInterface::StaticClass();
	}
	UClass* Z_Construct_UClass_UAbilitySystemInterface()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			UInterface::StaticClass();
			Z_Construct_UPackage_GameplayAbilities();
			OuterClass = UAbilitySystemInterface::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20084081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("CannotImplementInterfaceInBlueprint"), TEXT(""));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UAbilitySystemInterface(Z_Construct_UClass_UAbilitySystemInterface, TEXT("UAbilitySystemInterface"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UAbilitySystemInterface);
	UClass* Z_Construct_UClass_AAbilitySystemTestPawn_NoRegister()
	{
		return AAbilitySystemTestPawn::StaticClass();
	}
	UClass* Z_Construct_UClass_AAbilitySystemTestPawn()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_ADefaultPawn();
			Z_Construct_UPackage_GameplayAbilities();
			OuterClass = AAbilitySystemTestPawn::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900280;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_AbilitySystemComponent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AbilitySystemComponent"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(AbilitySystemComponent, AAbilitySystemTestPawn), 0x00000000000a001d, Z_Construct_UClass_UAbilitySystemComponent_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->Interfaces.Add(FImplementedInterface(Z_Construct_UClass_UGameplayCueInterface_NoRegister(), VTABLE_OFFSET(AAbilitySystemTestPawn, IGameplayCueInterface), false ));
				OuterClass->Interfaces.Add(FImplementedInterface(Z_Construct_UClass_UAbilitySystemInterface_NoRegister(), VTABLE_OFFSET(AAbilitySystemTestPawn, IAbilitySystemInterface), false ));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Navigation"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("AbilitySystemTestPawn.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemTestPawn.h"));
				MetaData->SetValue(NewProp_AbilitySystemComponent, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_AbilitySystemComponent, TEXT("Category"), TEXT("AbilitySystem"));
				MetaData->SetValue(NewProp_AbilitySystemComponent, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_AbilitySystemComponent, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemTestPawn.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AAbilitySystemTestPawn(Z_Construct_UClass_AAbilitySystemTestPawn, TEXT("AAbilitySystemTestPawn"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(AAbilitySystemTestPawn);
	UClass* Z_Construct_UClass_UAbilityTask_NoRegister()
	{
		return UAbilityTask::StaticClass();
	}
	UClass* Z_Construct_UClass_UAbilityTask()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UGameplayTask();
			Z_Construct_UPackage_GameplayAbilities();
			OuterClass = UAbilityTask::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Abilities/Tasks/AbilityTask.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("AbilityTasks are small, self contained operations that can be performed while executing an ability.\nThey are latent/asynchronous is nature. They will generally follow the pattern of 'start something and wait until it is finished or interrupted'\n\nWe have code in K2Node_LatentAbilityCall to make using these in blueprints streamlined. The best way to become familiar with AbilityTasks is to\nlook at existing tasks like UAbilityTask_WaitOverlap (very simple) and UAbilityTask_WaitTargetData (much more complex).\n\nThese are the basic requirements for using an ability task:\n\n1) Define dynamic multicast, BlueprintAssignable delegates in your AbilityTask. These are the OUTPUTs of your task. When these delegates fire,\nexecution resumes in the calling blueprints.\n\n2) Your inputs are defined by a static factory function which will instantiate an instance of your task. The parameters of this function define\nthe INPUTs into your task. All the factory function should do is instantiate your task and possibly set starting parameters. It should NOT invoke\nany of the callback delegates!\n\n3) Implement a Activate() function (defined here in base class). This function should actually start/execute your task logic. It is safe to invoke\ncallback delegates here.\n\n\nThis is all you need for basic AbilityTasks.\n\n\nCheckList:\n        -Override ::OnDestroy() and unregister any callbacks that the task registered. Call Super::EndTask too!\n        -Implemented an Activate function which truly 'starts' the task. Do not 'start' the task in your static factory function!\n\n\n--------------------------------------\n\nWe have additional support for AbilityTasks that want to spawn actors. Though this could be accomplished in an Activate() function, it would not be\npossible to pass in dynamic \"ExposeOnSpawn\" actor properties. This is a powerful feature of blueprints, in order to support this, you need to implement\na different step 3:\n\nInstead of an Activate() function, you should implement a BeginSpawningActor() and FinishSpawningActor() function.\n\nBeginSpawningActor() must take in a TSubclassOf<YourActorClassToSpawn> parameters named 'Class'. It must also have a out reference parameters of type\nYourActorClassToSpawn*& named SpawnedActor. This function is allowed to decide whether it wants to spawn the actor or not (useful if wishing to\npredicate actor spawning on network authority).\n\nBeginSpawningActor() can instantiate an actor with SpawnActorDefferred. This is important, otherwise the UCS will run before spawn parameters are set.\nBeginSpawningActor() should also set the SpawnedActor parameter to the actor it spawned.\n\n[Next, the generated byte code will set the expose on spawn parameters to whatever the user has set]\n\nIf you spawned something, FinishSpawningActor() will be called and pass in the same actor that was just spawned. You MUST call ExecuteConstruction + PostActorConstruction\non this actor!\n\nThis is a lot of steps but in general, AbilityTask_SpawnActor() gives a clear, minimal example."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UAbilityTask(Z_Construct_UClass_UAbilityTask, TEXT("UAbilityTask"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UAbilityTask);
	UFunction* Z_Construct_UDelegateFunction_GameplayAbilities_MoveToLocationDelegate__DelegateSignature()
	{
		UObject* Outer=Z_Construct_UPackage_GameplayAbilities();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MoveToLocationDelegate__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_MoveToLocation.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilityTask_MoveToLocation_MoveToLocation()
	{
		struct AbilityTask_MoveToLocation_eventMoveToLocation_Parms
		{
			UObject* WorldContextObject;
			FName TaskInstanceName;
			FVector Location;
			float Duration;
			UCurveFloat* OptionalInterpolationCurve;
			UCurveVector* OptionalVectorInterpolationCurve;
			UAbilityTask_MoveToLocation* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilityTask_MoveToLocation();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MoveToLocation"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04822401, 65535, sizeof(AbilityTask_MoveToLocation_eventMoveToLocation_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, AbilityTask_MoveToLocation_eventMoveToLocation_Parms), 0x0000000000000580, Z_Construct_UClass_UAbilityTask_MoveToLocation_NoRegister());
			UProperty* NewProp_OptionalVectorInterpolationCurve = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OptionalVectorInterpolationCurve"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(OptionalVectorInterpolationCurve, AbilityTask_MoveToLocation_eventMoveToLocation_Parms), 0x0000000000000080, Z_Construct_UClass_UCurveVector_NoRegister());
			UProperty* NewProp_OptionalInterpolationCurve = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OptionalInterpolationCurve"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(OptionalInterpolationCurve, AbilityTask_MoveToLocation_eventMoveToLocation_Parms), 0x0000000000000080, Z_Construct_UClass_UCurveFloat_NoRegister());
			UProperty* NewProp_Duration = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Duration"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Duration, AbilityTask_MoveToLocation_eventMoveToLocation_Parms), 0x0000000000000080);
			UProperty* NewProp_Location = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Location"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Location, AbilityTask_MoveToLocation_eventMoveToLocation_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_TaskInstanceName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TaskInstanceName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(TaskInstanceName, AbilityTask_MoveToLocation_eventMoveToLocation_Parms), 0x0000000000000080);
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, AbilityTask_MoveToLocation_eventMoveToLocation_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("TRUE"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|Tasks"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_MoveToLocation.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Move to the specified location, using the vector curve (range 0 - 1) if specified, otherwise the float curve (range 0 - 1) or fallback to linear interpolation"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UAbilityTask_MoveToLocation_NoRegister()
	{
		return UAbilityTask_MoveToLocation::StaticClass();
	}
	UClass* Z_Construct_UClass_UAbilityTask_MoveToLocation()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UAbilityTask();
			Z_Construct_UPackage_GameplayAbilities();
			OuterClass = UAbilityTask_MoveToLocation::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880080;

				OuterClass->LinkChild(Z_Construct_UFunction_UAbilityTask_MoveToLocation_MoveToLocation());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_LerpCurveVector = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LerpCurveVector"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(LerpCurveVector, UAbilityTask_MoveToLocation), 0x0000080000000020, Z_Construct_UClass_UCurveVector_NoRegister());
				UProperty* NewProp_LerpCurve = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LerpCurve"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(LerpCurve, UAbilityTask_MoveToLocation), 0x0000080000000020, Z_Construct_UClass_UCurveFloat_NoRegister());
				UProperty* NewProp_DurationOfMovement = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DurationOfMovement"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DurationOfMovement, UAbilityTask_MoveToLocation), 0x0000080000000020);
				UProperty* NewProp_TargetLocation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TargetLocation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TargetLocation, UAbilityTask_MoveToLocation), 0x0000080000000020, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_StartLocation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StartLocation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(StartLocation, UAbilityTask_MoveToLocation), 0x0000080000000020, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_OnTargetLocationReached = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnTargetLocationReached"), RF_Public|RF_Transient|RF_Native) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnTargetLocationReached, UAbilityTask_MoveToLocation), 0x0000000010080000, Z_Construct_UDelegateFunction_GameplayAbilities_MoveToLocationDelegate__DelegateSignature());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilityTask_MoveToLocation_MoveToLocation()); // 2581143878
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Abilities/Tasks/AbilityTask_MoveToLocation.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_MoveToLocation.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Move to a location, ignoring clipping, over a given length of time. Ends when the TargetLocation is reached.\nThis will RESET your character's current movement mode! If you wish to maintain PHYS_Flying or PHYS_Custom, you must\nreset it on completion.!"));
				MetaData->SetValue(NewProp_LerpCurveVector, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_MoveToLocation.h"));
				MetaData->SetValue(NewProp_LerpCurve, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_MoveToLocation.h"));
				MetaData->SetValue(NewProp_DurationOfMovement, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_MoveToLocation.h"));
				MetaData->SetValue(NewProp_TargetLocation, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_MoveToLocation.h"));
				MetaData->SetValue(NewProp_TargetLocation, TEXT("ToolTip"), TEXT("FVector"));
				MetaData->SetValue(NewProp_StartLocation, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_MoveToLocation.h"));
				MetaData->SetValue(NewProp_OnTargetLocationReached, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_MoveToLocation.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UAbilityTask_MoveToLocation(Z_Construct_UClass_UAbilityTask_MoveToLocation, TEXT("UAbilityTask_MoveToLocation"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UAbilityTask_MoveToLocation);
	UFunction* Z_Construct_UDelegateFunction_GameplayAbilities_NetworkSyncDelegate__DelegateSignature()
	{
		UObject* Outer=Z_Construct_UPackage_GameplayAbilities();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NetworkSyncDelegate__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_NetworkSyncPoint.h"));
#endif
		}
		return ReturnFunction;
	}
	UEnum* Z_Construct_UEnum_GameplayAbilities_EAbilityTaskNetSyncType()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UEnum_GameplayAbilities_EAbilityTaskNetSyncType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EAbilityTaskNetSyncType"), 0, Get_Z_Construct_UEnum_GameplayAbilities_EAbilityTaskNetSyncType_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EAbilityTaskNetSyncType"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EAbilityTaskNetSyncType::BothWait")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EAbilityTaskNetSyncType::OnlyServerWait")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EAbilityTaskNetSyncType::OnlyClientWait")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EAbilityTaskNetSyncType::EAbilityTaskNetSyncType_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BothWait.ToolTip"), TEXT("Both client and server wait until the other signals"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_NetworkSyncPoint.h"));
			MetaData->SetValue(ReturnEnum, TEXT("OnlyClientWait.ToolTip"), TEXT("Only client will wait for the server signal. Server will signal and immediately continue without waiting to hear from Client."));
			MetaData->SetValue(ReturnEnum, TEXT("OnlyServerWait.ToolTip"), TEXT("Only server will wait for the client signal. Client will signal and immediately continue without waiting to hear from Server."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_GameplayAbilities_EAbilityTaskNetSyncType_CRC() { return 1273598338U; }
	UFunction* Z_Construct_UFunction_UAbilityTask_NetworkSyncPoint_OnSignalCallback()
	{
		UObject* Outer=Z_Construct_UClass_UAbilityTask_NetworkSyncPoint();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnSignalCallback"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_NetworkSyncPoint.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilityTask_NetworkSyncPoint_WaitNetSync()
	{
		struct AbilityTask_NetworkSyncPoint_eventWaitNetSync_Parms
		{
			UObject* WorldContextObject;
			TEnumAsByte<EAbilityTaskNetSyncType> SyncType;
			UAbilityTask_NetworkSyncPoint* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilityTask_NetworkSyncPoint();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WaitNetSync"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(AbilityTask_NetworkSyncPoint_eventWaitNetSync_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, AbilityTask_NetworkSyncPoint_eventWaitNetSync_Parms), 0x0000000000000580, Z_Construct_UClass_UAbilityTask_NetworkSyncPoint_NoRegister());
			UProperty* NewProp_SyncType = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SyncType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(SyncType, AbilityTask_NetworkSyncPoint_eventWaitNetSync_Parms), 0x0000000000000080, Z_Construct_UEnum_GameplayAbilities_EAbilityTaskNetSyncType());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, AbilityTask_NetworkSyncPoint_eventWaitNetSync_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("TRUE"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|Tasks"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_NetworkSyncPoint.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Synchronize execution flow between Client and Server. Depending on SyncType, the Client and Server will wait for the other to reach this node or another WaitNetSync node in the ability before continuing execution.\n\nBothWait - Both Client and Server will wait until the other reaches the node. (Whoever gets their first, waits for the other before continueing).\nOnlyServerWait - Only server will wait for the client signal. Client will signal and immediately continue without waiting to hear from Server.\nOnlyClientWait - Only client will wait for the server signal. Server will signal and immediately continue without waiting to hear from Client.\n\nNote that this is \"ability instance wide\". These sync points never affect sync points in other abilities.\n\nIn most cases you will have both client and server execution paths connected to the same WaitNetSync node. However it is possible to use separate nodes\nfor cleanliness of the graph. The \"signal\" is \"ability instance wide\"."));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UAbilityTask_NetworkSyncPoint_NoRegister()
	{
		return UAbilityTask_NetworkSyncPoint::StaticClass();
	}
	UClass* Z_Construct_UClass_UAbilityTask_NetworkSyncPoint()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UAbilityTask();
			Z_Construct_UPackage_GameplayAbilities();
			OuterClass = UAbilityTask_NetworkSyncPoint::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880080;

				OuterClass->LinkChild(Z_Construct_UFunction_UAbilityTask_NetworkSyncPoint_OnSignalCallback());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilityTask_NetworkSyncPoint_WaitNetSync());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_OnSync = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnSync"), RF_Public|RF_Transient|RF_Native) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnSync, UAbilityTask_NetworkSyncPoint), 0x0000000010080000, Z_Construct_UDelegateFunction_GameplayAbilities_NetworkSyncDelegate__DelegateSignature());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilityTask_NetworkSyncPoint_OnSignalCallback()); // 332832462
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilityTask_NetworkSyncPoint_WaitNetSync()); // 790010742
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Abilities/Tasks/AbilityTask_NetworkSyncPoint.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_NetworkSyncPoint.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Task for providing a generic sync point for client server (one can wait for a signal from the other)"));
				MetaData->SetValue(NewProp_OnSync, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_NetworkSyncPoint.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UAbilityTask_NetworkSyncPoint(Z_Construct_UClass_UAbilityTask_NetworkSyncPoint, TEXT("UAbilityTask_NetworkSyncPoint"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UAbilityTask_NetworkSyncPoint);
	UFunction* Z_Construct_UDelegateFunction_GameplayAbilities_MontageWaitSimpleDelegate__DelegateSignature()
	{
		UObject* Outer=Z_Construct_UPackage_GameplayAbilities();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MontageWaitSimpleDelegate__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_PlayMontageAndWait.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilityTask_PlayMontageAndWait_CreatePlayMontageAndWaitProxy()
	{
		struct AbilityTask_PlayMontageAndWait_eventCreatePlayMontageAndWaitProxy_Parms
		{
			UObject* WorldContextObject;
			FName TaskInstanceName;
			UAnimMontage* MontageToPlay;
			float Rate;
			FName StartSection;
			UAbilityTask_PlayMontageAndWait* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilityTask_PlayMontageAndWait();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CreatePlayMontageAndWaitProxy"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(AbilityTask_PlayMontageAndWait_eventCreatePlayMontageAndWaitProxy_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, AbilityTask_PlayMontageAndWait_eventCreatePlayMontageAndWaitProxy_Parms), 0x0000000000000580, Z_Construct_UClass_UAbilityTask_PlayMontageAndWait_NoRegister());
			UProperty* NewProp_StartSection = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("StartSection"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(StartSection, AbilityTask_PlayMontageAndWait_eventCreatePlayMontageAndWaitProxy_Parms), 0x0000000000000080);
			UProperty* NewProp_Rate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Rate"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Rate, AbilityTask_PlayMontageAndWait_eventCreatePlayMontageAndWaitProxy_Parms), 0x0000000000000080);
			UProperty* NewProp_MontageToPlay = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MontageToPlay"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(MontageToPlay, AbilityTask_PlayMontageAndWait_eventCreatePlayMontageAndWaitProxy_Parms), 0x0000000000000080, Z_Construct_UClass_UAnimMontage_NoRegister());
			UProperty* NewProp_TaskInstanceName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TaskInstanceName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(TaskInstanceName, AbilityTask_PlayMontageAndWait_eventCreatePlayMontageAndWaitProxy_Parms), 0x0000000000000080);
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, AbilityTask_PlayMontageAndWait_eventCreatePlayMontageAndWaitProxy_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("TRUE"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|Tasks"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Rate"), TEXT("1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_StartSection"), TEXT("None"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("PlayMontageAndWait"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_PlayMontageAndWait.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilityTask_PlayMontageAndWait_OnMontageBlendingOut()
	{
		struct AbilityTask_PlayMontageAndWait_eventOnMontageBlendingOut_Parms
		{
			UAnimMontage* Montage;
			bool bInterrupted;
		};
		UObject* Outer=Z_Construct_UClass_UAbilityTask_PlayMontageAndWait();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnMontageBlendingOut"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020401, 65535, sizeof(AbilityTask_PlayMontageAndWait_eventOnMontageBlendingOut_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bInterrupted, AbilityTask_PlayMontageAndWait_eventOnMontageBlendingOut_Parms, bool);
			UProperty* NewProp_bInterrupted = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bInterrupted"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bInterrupted, AbilityTask_PlayMontageAndWait_eventOnMontageBlendingOut_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bInterrupted, AbilityTask_PlayMontageAndWait_eventOnMontageBlendingOut_Parms), sizeof(bool), true);
			UProperty* NewProp_Montage = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Montage"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Montage, AbilityTask_PlayMontageAndWait_eventOnMontageBlendingOut_Parms), 0x0000000000000080, Z_Construct_UClass_UAnimMontage_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_PlayMontageAndWait.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilityTask_PlayMontageAndWait_OnMontageInterrupted()
	{
		UObject* Outer=Z_Construct_UClass_UAbilityTask_PlayMontageAndWait();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnMontageInterrupted"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_PlayMontageAndWait.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UAbilityTask_PlayMontageAndWait_NoRegister()
	{
		return UAbilityTask_PlayMontageAndWait::StaticClass();
	}
	UClass* Z_Construct_UClass_UAbilityTask_PlayMontageAndWait()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UAbilityTask();
			Z_Construct_UPackage_GameplayAbilities();
			OuterClass = UAbilityTask_PlayMontageAndWait::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880080;

				OuterClass->LinkChild(Z_Construct_UFunction_UAbilityTask_PlayMontageAndWait_CreatePlayMontageAndWaitProxy());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilityTask_PlayMontageAndWait_OnMontageBlendingOut());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilityTask_PlayMontageAndWait_OnMontageInterrupted());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_OnCancelled = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnCancelled"), RF_Public|RF_Transient|RF_Native) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnCancelled, UAbilityTask_PlayMontageAndWait), 0x0000000010080000, Z_Construct_UDelegateFunction_GameplayAbilities_MontageWaitSimpleDelegate__DelegateSignature());
				UProperty* NewProp_OnInterrupted = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnInterrupted"), RF_Public|RF_Transient|RF_Native) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnInterrupted, UAbilityTask_PlayMontageAndWait), 0x0000000010080000, Z_Construct_UDelegateFunction_GameplayAbilities_MontageWaitSimpleDelegate__DelegateSignature());
				UProperty* NewProp_OnComplete = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnComplete"), RF_Public|RF_Transient|RF_Native) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnComplete, UAbilityTask_PlayMontageAndWait), 0x0000000010080000, Z_Construct_UDelegateFunction_GameplayAbilities_MontageWaitSimpleDelegate__DelegateSignature());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilityTask_PlayMontageAndWait_CreatePlayMontageAndWaitProxy()); // 1768146320
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilityTask_PlayMontageAndWait_OnMontageBlendingOut()); // 3478448484
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilityTask_PlayMontageAndWait_OnMontageInterrupted()); // 3630696265
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Abilities/Tasks/AbilityTask_PlayMontageAndWait.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_PlayMontageAndWait.h"));
				MetaData->SetValue(NewProp_OnCancelled, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_PlayMontageAndWait.h"));
				MetaData->SetValue(NewProp_OnInterrupted, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_PlayMontageAndWait.h"));
				MetaData->SetValue(NewProp_OnComplete, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_PlayMontageAndWait.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UAbilityTask_PlayMontageAndWait(Z_Construct_UClass_UAbilityTask_PlayMontageAndWait, TEXT("UAbilityTask_PlayMontageAndWait"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UAbilityTask_PlayMontageAndWait);
	UFunction* Z_Construct_UDelegateFunction_GameplayAbilities_RepeatedActionDelegate__DelegateSignature()
	{
		struct _Script_GameplayAbilities_eventRepeatedActionDelegate_Parms
		{
			int32 ActionNumber;
		};
		UObject* Outer=Z_Construct_UPackage_GameplayAbilities();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RepeatedActionDelegate__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535, sizeof(_Script_GameplayAbilities_eventRepeatedActionDelegate_Parms));
			UProperty* NewProp_ActionNumber = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActionNumber"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ActionNumber, _Script_GameplayAbilities_eventRepeatedActionDelegate_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_Repeat.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilityTask_Repeat_RepeatAction()
	{
		struct AbilityTask_Repeat_eventRepeatAction_Parms
		{
			UObject* WorldContextObject;
			float TimeBetweenActions;
			int32 TotalActionCount;
			UAbilityTask_Repeat* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilityTask_Repeat();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RepeatAction"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(AbilityTask_Repeat_eventRepeatAction_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, AbilityTask_Repeat_eventRepeatAction_Parms), 0x0000000000000580, Z_Construct_UClass_UAbilityTask_Repeat_NoRegister());
			UProperty* NewProp_TotalActionCount = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TotalActionCount"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(TotalActionCount, AbilityTask_Repeat_eventRepeatAction_Parms), 0x0000000000000080);
			UProperty* NewProp_TimeBetweenActions = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TimeBetweenActions"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(TimeBetweenActions, AbilityTask_Repeat_eventRepeatAction_Parms), 0x0000000000000080);
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, AbilityTask_Repeat_eventRepeatAction_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("TRUE"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|Tasks"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_Repeat.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Start a task that repeats an action or set of actions."));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UAbilityTask_Repeat_NoRegister()
	{
		return UAbilityTask_Repeat::StaticClass();
	}
	UClass* Z_Construct_UClass_UAbilityTask_Repeat()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UAbilityTask();
			Z_Construct_UPackage_GameplayAbilities();
			OuterClass = UAbilityTask_Repeat::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_UAbilityTask_Repeat_RepeatAction());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_OnFinished = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnFinished"), RF_Public|RF_Transient|RF_Native) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnFinished, UAbilityTask_Repeat), 0x0000000010080000, Z_Construct_UDelegateFunction_GameplayAbilities_RepeatedActionDelegate__DelegateSignature());
				UProperty* NewProp_OnPerformAction = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnPerformAction"), RF_Public|RF_Transient|RF_Native) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnPerformAction, UAbilityTask_Repeat), 0x0000000010080000, Z_Construct_UDelegateFunction_GameplayAbilities_RepeatedActionDelegate__DelegateSignature());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilityTask_Repeat_RepeatAction()); // 655435778
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Abilities/Tasks/AbilityTask_Repeat.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_Repeat.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Repeat a task a certain number of times at a given interval."));
				MetaData->SetValue(NewProp_OnFinished, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_Repeat.h"));
				MetaData->SetValue(NewProp_OnPerformAction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_Repeat.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UAbilityTask_Repeat(Z_Construct_UClass_UAbilityTask_Repeat, TEXT("UAbilityTask_Repeat"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UAbilityTask_Repeat);
	UFunction* Z_Construct_UDelegateFunction_GameplayAbilities_SpawnActorDelegate__DelegateSignature()
	{
		struct _Script_GameplayAbilities_eventSpawnActorDelegate_Parms
		{
			AActor* SpawnedActor;
		};
		UObject* Outer=Z_Construct_UPackage_GameplayAbilities();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SpawnActorDelegate__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535, sizeof(_Script_GameplayAbilities_eventSpawnActorDelegate_Parms));
			UProperty* NewProp_SpawnedActor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SpawnedActor"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(SpawnedActor, _Script_GameplayAbilities_eventSpawnActorDelegate_Parms), 0x0000000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_SpawnActor.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilityTask_SpawnActor_BeginSpawningActor()
	{
		struct AbilityTask_SpawnActor_eventBeginSpawningActor_Parms
		{
			UObject* WorldContextObject;
			FGameplayAbilityTargetDataHandle TargetData;
			TSubclassOf<AActor>  Class;
			AActor* SpawnedActor;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilityTask_SpawnActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BeginSpawningActor"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04420401, 65535, sizeof(AbilityTask_SpawnActor_eventBeginSpawningActor_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, AbilityTask_SpawnActor_eventBeginSpawningActor_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, AbilityTask_SpawnActor_eventBeginSpawningActor_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, AbilityTask_SpawnActor_eventBeginSpawningActor_Parms), sizeof(bool), true);
			UProperty* NewProp_SpawnedActor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SpawnedActor"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(SpawnedActor, AbilityTask_SpawnActor_eventBeginSpawningActor_Parms), 0x0000000000000180, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_Class = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Class"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(Class, AbilityTask_SpawnActor_eventBeginSpawningActor_Parms), 0x0004000000000080, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_TargetData = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TargetData"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TargetData, AbilityTask_SpawnActor_eventBeginSpawningActor_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayAbilityTargetDataHandle());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, AbilityTask_SpawnActor_eventBeginSpawningActor_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Abilities"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_SpawnActor.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilityTask_SpawnActor_FinishSpawningActor()
	{
		struct AbilityTask_SpawnActor_eventFinishSpawningActor_Parms
		{
			UObject* WorldContextObject;
			FGameplayAbilityTargetDataHandle TargetData;
			AActor* SpawnedActor;
		};
		UObject* Outer=Z_Construct_UClass_UAbilityTask_SpawnActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FinishSpawningActor"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(AbilityTask_SpawnActor_eventFinishSpawningActor_Parms));
			UProperty* NewProp_SpawnedActor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SpawnedActor"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(SpawnedActor, AbilityTask_SpawnActor_eventFinishSpawningActor_Parms), 0x0000000000000080, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_TargetData = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TargetData"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TargetData, AbilityTask_SpawnActor_eventFinishSpawningActor_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayAbilityTargetDataHandle());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, AbilityTask_SpawnActor_eventFinishSpawningActor_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Abilities"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_SpawnActor.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilityTask_SpawnActor_SpawnActor()
	{
		struct AbilityTask_SpawnActor_eventSpawnActor_Parms
		{
			UObject* WorldContextObject;
			FGameplayAbilityTargetDataHandle TargetData;
			TSubclassOf<AActor>  Class;
			UAbilityTask_SpawnActor* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilityTask_SpawnActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SpawnActor"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(AbilityTask_SpawnActor_eventSpawnActor_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, AbilityTask_SpawnActor_eventSpawnActor_Parms), 0x0000000000000580, Z_Construct_UClass_UAbilityTask_SpawnActor_NoRegister());
			UProperty* NewProp_Class = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Class"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(Class, AbilityTask_SpawnActor_eventSpawnActor_Parms), 0x0004000000000080, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_TargetData = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TargetData"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TargetData, AbilityTask_SpawnActor_eventSpawnActor_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayAbilityTargetDataHandle());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, AbilityTask_SpawnActor_eventSpawnActor_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|Tasks"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_SpawnActor.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Spawn new Actor on the network authority (server)"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UAbilityTask_SpawnActor_NoRegister()
	{
		return UAbilityTask_SpawnActor::StaticClass();
	}
	UClass* Z_Construct_UClass_UAbilityTask_SpawnActor()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UAbilityTask();
			Z_Construct_UPackage_GameplayAbilities();
			OuterClass = UAbilityTask_SpawnActor::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880080;

				OuterClass->LinkChild(Z_Construct_UFunction_UAbilityTask_SpawnActor_BeginSpawningActor());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilityTask_SpawnActor_FinishSpawningActor());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilityTask_SpawnActor_SpawnActor());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_DidNotSpawn = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DidNotSpawn"), RF_Public|RF_Transient|RF_Native) UMulticastDelegateProperty(CPP_PROPERTY_BASE(DidNotSpawn, UAbilityTask_SpawnActor), 0x0000000010080000, Z_Construct_UDelegateFunction_GameplayAbilities_SpawnActorDelegate__DelegateSignature());
				UProperty* NewProp_Success = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Success"), RF_Public|RF_Transient|RF_Native) UMulticastDelegateProperty(CPP_PROPERTY_BASE(Success, UAbilityTask_SpawnActor), 0x0000000010080000, Z_Construct_UDelegateFunction_GameplayAbilities_SpawnActorDelegate__DelegateSignature());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilityTask_SpawnActor_BeginSpawningActor()); // 2654349194
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilityTask_SpawnActor_FinishSpawningActor()); // 655297327
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilityTask_SpawnActor_SpawnActor()); // 2242332690
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Abilities/Tasks/AbilityTask_SpawnActor.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_SpawnActor.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Convenience task for spawning actors on the network authority. If not the net authority, we will not spawn and Success will not be called.\nThe nice thing this adds is the ability to modify expose on spawn properties while also implicitly checking network role before spawning.\n\nThough this task doesn't do much - games can implement similiar tasks that carry out game specific rules. For example a 'SpawnProjectile'\ntask that limits the available classes to the games projectile class, and that does game specific stuff on spawn (for example, determining\nfiring position from a weapon attachment - logic that we don't necessarily want in ability blueprints).\n\nLong term we can also use this task as a sync point. If the executing client could wait execution until the server creates and replicate sthe\nactor down to him. We could potentially also use this to do predictive actor spawning / reconciliation."));
				MetaData->SetValue(NewProp_DidNotSpawn, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_SpawnActor.h"));
				MetaData->SetValue(NewProp_DidNotSpawn, TEXT("ToolTip"), TEXT("Called when we can't spawn: on clients or potentially on server if they fail to spawn (rare)"));
				MetaData->SetValue(NewProp_Success, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_SpawnActor.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UAbilityTask_SpawnActor(Z_Construct_UClass_UAbilityTask_SpawnActor, TEXT("UAbilityTask_SpawnActor"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UAbilityTask_SpawnActor);
	UFunction* Z_Construct_UDelegateFunction_GameplayAbilities_AbilityStateDelegate__DelegateSignature()
	{
		UObject* Outer=Z_Construct_UPackage_GameplayAbilities();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AbilityStateDelegate__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_StartAbilityState.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilityTask_StartAbilityState_StartAbilityState()
	{
		struct AbilityTask_StartAbilityState_eventStartAbilityState_Parms
		{
			UObject* WorldContextObject;
			FName StateName;
			bool bEndCurrentState;
			UAbilityTask_StartAbilityState* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilityTask_StartAbilityState();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("StartAbilityState"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(AbilityTask_StartAbilityState_eventStartAbilityState_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, AbilityTask_StartAbilityState_eventStartAbilityState_Parms), 0x0000000000000580, Z_Construct_UClass_UAbilityTask_StartAbilityState_NoRegister());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEndCurrentState, AbilityTask_StartAbilityState_eventStartAbilityState_Parms, bool);
			UProperty* NewProp_bEndCurrentState = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bEndCurrentState"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEndCurrentState, AbilityTask_StartAbilityState_eventStartAbilityState_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bEndCurrentState, AbilityTask_StartAbilityState_eventStartAbilityState_Parms), sizeof(bool), true);
			UProperty* NewProp_StateName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("StateName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(StateName, AbilityTask_StartAbilityState_eventStartAbilityState_Parms), 0x0000000000000080);
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, AbilityTask_StartAbilityState_eventStartAbilityState_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|Tasks"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bEndCurrentState"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("HideSpawnParms"), TEXT("Instigator"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_StartAbilityState.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Starts a new ability state.\n\n@param StateName The name of the state.\n@param bEndCurrentState If true, all other active ability states will be ended."));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UAbilityTask_StartAbilityState_NoRegister()
	{
		return UAbilityTask_StartAbilityState::StaticClass();
	}
	UClass* Z_Construct_UClass_UAbilityTask_StartAbilityState()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UAbilityTask();
			Z_Construct_UPackage_GameplayAbilities();
			OuterClass = UAbilityTask_StartAbilityState::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880080;

				OuterClass->LinkChild(Z_Construct_UFunction_UAbilityTask_StartAbilityState_StartAbilityState());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_OnStateInterrupted = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnStateInterrupted"), RF_Public|RF_Transient|RF_Native) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnStateInterrupted, UAbilityTask_StartAbilityState), 0x0000000010080000, Z_Construct_UDelegateFunction_GameplayAbilities_AbilityStateDelegate__DelegateSignature());
				UProperty* NewProp_OnStateEnded = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnStateEnded"), RF_Public|RF_Transient|RF_Native) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnStateEnded, UAbilityTask_StartAbilityState), 0x0000000010080000, Z_Construct_UDelegateFunction_GameplayAbilities_AbilityStateDelegate__DelegateSignature());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilityTask_StartAbilityState_StartAbilityState()); // 3638210361
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Abilities/Tasks/AbilityTask_StartAbilityState.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_StartAbilityState.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("An ability state is simply an ability task that provides a way to handle the ability being interrupted.\nYou can use ability states to do state-specific cleanup if the ability ends or was interrupted at a certain point during it's execution.\n\nAn ability state will always result in either 'OnStateEnded' or 'OnStateInterrupted' being called.\n\n'OnStateEnded' will be called if:\n- The ability itself ends via AGameplayAbility::EndAbility\n- The ability state is manually ended via AGameplayAbility::EndAbilityState\n- Another ability state is started will 'bEndCurrentState' set to true\n\n'OnStateInterrupted' will be called if:\n- The ability itself is cancelled via AGameplayAbility::CancelAbility"));
				MetaData->SetValue(NewProp_OnStateInterrupted, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_StartAbilityState.h"));
				MetaData->SetValue(NewProp_OnStateInterrupted, TEXT("ToolTip"), TEXT("Invoked if the ability was interrupted and this state is active."));
				MetaData->SetValue(NewProp_OnStateEnded, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_StartAbilityState.h"));
				MetaData->SetValue(NewProp_OnStateEnded, TEXT("ToolTip"), TEXT("Invoked if 'EndAbilityState' is called or if 'EndAbility' is called and this state is active."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UAbilityTask_StartAbilityState(Z_Construct_UClass_UAbilityTask_StartAbilityState, TEXT("UAbilityTask_StartAbilityState"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UAbilityTask_StartAbilityState);
	UFunction* Z_Construct_UDelegateFunction_GameplayAbilities_VisualizeTargetingDelegate__DelegateSignature()
	{
		UObject* Outer=Z_Construct_UPackage_GameplayAbilities();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VisualizeTargetingDelegate__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_VisualizeTargeting.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilityTask_VisualizeTargeting_BeginSpawningActor()
	{
		struct AbilityTask_VisualizeTargeting_eventBeginSpawningActor_Parms
		{
			UObject* WorldContextObject;
			TSubclassOf<AGameplayAbilityTargetActor>  Class;
			AGameplayAbilityTargetActor* SpawnedActor;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilityTask_VisualizeTargeting();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BeginSpawningActor"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04420401, 65535, sizeof(AbilityTask_VisualizeTargeting_eventBeginSpawningActor_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, AbilityTask_VisualizeTargeting_eventBeginSpawningActor_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, AbilityTask_VisualizeTargeting_eventBeginSpawningActor_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, AbilityTask_VisualizeTargeting_eventBeginSpawningActor_Parms), sizeof(bool), true);
			UProperty* NewProp_SpawnedActor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SpawnedActor"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(SpawnedActor, AbilityTask_VisualizeTargeting_eventBeginSpawningActor_Parms), 0x0000000000000180, Z_Construct_UClass_AGameplayAbilityTargetActor_NoRegister());
			UProperty* NewProp_Class = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Class"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(Class, AbilityTask_VisualizeTargeting_eventBeginSpawningActor_Parms), 0x0004000000000080, Z_Construct_UClass_AGameplayAbilityTargetActor_NoRegister());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, AbilityTask_VisualizeTargeting_eventBeginSpawningActor_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Abilities"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_VisualizeTargeting.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilityTask_VisualizeTargeting_FinishSpawningActor()
	{
		struct AbilityTask_VisualizeTargeting_eventFinishSpawningActor_Parms
		{
			UObject* WorldContextObject;
			AGameplayAbilityTargetActor* SpawnedActor;
		};
		UObject* Outer=Z_Construct_UClass_UAbilityTask_VisualizeTargeting();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FinishSpawningActor"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(AbilityTask_VisualizeTargeting_eventFinishSpawningActor_Parms));
			UProperty* NewProp_SpawnedActor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SpawnedActor"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(SpawnedActor, AbilityTask_VisualizeTargeting_eventFinishSpawningActor_Parms), 0x0000000000000080, Z_Construct_UClass_AGameplayAbilityTargetActor_NoRegister());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, AbilityTask_VisualizeTargeting_eventFinishSpawningActor_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Abilities"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_VisualizeTargeting.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilityTask_VisualizeTargeting_VisualizeTargeting()
	{
		struct AbilityTask_VisualizeTargeting_eventVisualizeTargeting_Parms
		{
			UObject* WorldContextObject;
			TSubclassOf<AGameplayAbilityTargetActor>  Class;
			FName TaskInstanceName;
			float Duration;
			UAbilityTask_VisualizeTargeting* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilityTask_VisualizeTargeting();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VisualizeTargeting"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(AbilityTask_VisualizeTargeting_eventVisualizeTargeting_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, AbilityTask_VisualizeTargeting_eventVisualizeTargeting_Parms), 0x0000000000000580, Z_Construct_UClass_UAbilityTask_VisualizeTargeting_NoRegister());
			UProperty* NewProp_Duration = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Duration"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Duration, AbilityTask_VisualizeTargeting_eventVisualizeTargeting_Parms), 0x0000000000000080);
			UProperty* NewProp_TaskInstanceName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TaskInstanceName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(TaskInstanceName, AbilityTask_VisualizeTargeting_eventVisualizeTargeting_Parms), 0x0000000000000080);
			UProperty* NewProp_Class = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Class"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(Class, AbilityTask_VisualizeTargeting_eventVisualizeTargeting_Parms), 0x0004000000000080, Z_Construct_UClass_AGameplayAbilityTargetActor_NoRegister());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, AbilityTask_VisualizeTargeting_eventVisualizeTargeting_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|Tasks"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Duration"), TEXT("-1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("HideSpawnParms"), TEXT("Instigator"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_VisualizeTargeting.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Spawns target actor and uses it for visualization."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilityTask_VisualizeTargeting_VisualizeTargetingUsingActor()
	{
		struct AbilityTask_VisualizeTargeting_eventVisualizeTargetingUsingActor_Parms
		{
			UObject* WorldContextObject;
			AGameplayAbilityTargetActor* TargetActor;
			FName TaskInstanceName;
			float Duration;
			UAbilityTask_VisualizeTargeting* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilityTask_VisualizeTargeting();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VisualizeTargetingUsingActor"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(AbilityTask_VisualizeTargeting_eventVisualizeTargetingUsingActor_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, AbilityTask_VisualizeTargeting_eventVisualizeTargetingUsingActor_Parms), 0x0000000000000580, Z_Construct_UClass_UAbilityTask_VisualizeTargeting_NoRegister());
			UProperty* NewProp_Duration = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Duration"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Duration, AbilityTask_VisualizeTargeting_eventVisualizeTargetingUsingActor_Parms), 0x0000000000000080);
			UProperty* NewProp_TaskInstanceName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TaskInstanceName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(TaskInstanceName, AbilityTask_VisualizeTargeting_eventVisualizeTargetingUsingActor_Parms), 0x0000000000000080);
			UProperty* NewProp_TargetActor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TargetActor"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(TargetActor, AbilityTask_VisualizeTargeting_eventVisualizeTargetingUsingActor_Parms), 0x0000000000000080, Z_Construct_UClass_AGameplayAbilityTargetActor_NoRegister());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, AbilityTask_VisualizeTargeting_eventVisualizeTargetingUsingActor_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|Tasks"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Duration"), TEXT("-1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_VisualizeTargeting.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Visualize target using a specified target actor."));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UAbilityTask_VisualizeTargeting_NoRegister()
	{
		return UAbilityTask_VisualizeTargeting::StaticClass();
	}
	UClass* Z_Construct_UClass_UAbilityTask_VisualizeTargeting()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UAbilityTask();
			Z_Construct_UPackage_GameplayAbilities();
			OuterClass = UAbilityTask_VisualizeTargeting::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880080;

				OuterClass->LinkChild(Z_Construct_UFunction_UAbilityTask_VisualizeTargeting_BeginSpawningActor());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilityTask_VisualizeTargeting_FinishSpawningActor());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilityTask_VisualizeTargeting_VisualizeTargeting());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilityTask_VisualizeTargeting_VisualizeTargetingUsingActor());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_TimeElapsed = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TimeElapsed"), RF_Public|RF_Transient|RF_Native) UMulticastDelegateProperty(CPP_PROPERTY_BASE(TimeElapsed, UAbilityTask_VisualizeTargeting), 0x0000000010080000, Z_Construct_UDelegateFunction_GameplayAbilities_VisualizeTargetingDelegate__DelegateSignature());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilityTask_VisualizeTargeting_BeginSpawningActor()); // 1923669539
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilityTask_VisualizeTargeting_FinishSpawningActor()); // 984575806
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilityTask_VisualizeTargeting_VisualizeTargeting()); // 882677123
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilityTask_VisualizeTargeting_VisualizeTargetingUsingActor()); // 3601414780
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Abilities/Tasks/AbilityTask_VisualizeTargeting.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_VisualizeTargeting.h"));
				MetaData->SetValue(NewProp_TimeElapsed, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_VisualizeTargeting.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UAbilityTask_VisualizeTargeting(Z_Construct_UClass_UAbilityTask_VisualizeTargeting, TEXT("UAbilityTask_VisualizeTargeting"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UAbilityTask_VisualizeTargeting);
	UFunction* Z_Construct_UDelegateFunction_GameplayAbilities_WaitAbilityActivateDelegate__DelegateSignature()
	{
		struct _Script_GameplayAbilities_eventWaitAbilityActivateDelegate_Parms
		{
			UGameplayAbility* ActivatedAbility;
		};
		UObject* Outer=Z_Construct_UPackage_GameplayAbilities();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WaitAbilityActivateDelegate__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535, sizeof(_Script_GameplayAbilities_eventWaitAbilityActivateDelegate_Parms));
			UProperty* NewProp_ActivatedAbility = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActivatedAbility"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ActivatedAbility, _Script_GameplayAbilities_eventWaitAbilityActivateDelegate_Parms), 0x0000000000000080, Z_Construct_UClass_UGameplayAbility_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitAbilityActivate.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilityTask_WaitAbilityActivate_OnAbilityActivate()
	{
		struct AbilityTask_WaitAbilityActivate_eventOnAbilityActivate_Parms
		{
			UGameplayAbility* ActivatedAbility;
		};
		UObject* Outer=Z_Construct_UClass_UAbilityTask_WaitAbilityActivate();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnAbilityActivate"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020401, 65535, sizeof(AbilityTask_WaitAbilityActivate_eventOnAbilityActivate_Parms));
			UProperty* NewProp_ActivatedAbility = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActivatedAbility"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ActivatedAbility, AbilityTask_WaitAbilityActivate_eventOnAbilityActivate_Parms), 0x0000000000000080, Z_Construct_UClass_UGameplayAbility_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitAbilityActivate.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilityTask_WaitAbilityActivate_WaitForAbilityActivate()
	{
		struct AbilityTask_WaitAbilityActivate_eventWaitForAbilityActivate_Parms
		{
			UObject* WorldContextObject;
			FGameplayTag WithTag;
			FGameplayTag WithoutTag;
			bool IncludeTriggeredAbilities;
			bool TriggerOnce;
			UAbilityTask_WaitAbilityActivate* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilityTask_WaitAbilityActivate();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WaitForAbilityActivate"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(AbilityTask_WaitAbilityActivate_eventWaitForAbilityActivate_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, AbilityTask_WaitAbilityActivate_eventWaitForAbilityActivate_Parms), 0x0000000000000580, Z_Construct_UClass_UAbilityTask_WaitAbilityActivate_NoRegister());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(TriggerOnce, AbilityTask_WaitAbilityActivate_eventWaitForAbilityActivate_Parms, bool);
			UProperty* NewProp_TriggerOnce = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TriggerOnce"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(TriggerOnce, AbilityTask_WaitAbilityActivate_eventWaitForAbilityActivate_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(TriggerOnce, AbilityTask_WaitAbilityActivate_eventWaitForAbilityActivate_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(IncludeTriggeredAbilities, AbilityTask_WaitAbilityActivate_eventWaitForAbilityActivate_Parms, bool);
			UProperty* NewProp_IncludeTriggeredAbilities = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IncludeTriggeredAbilities"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IncludeTriggeredAbilities, AbilityTask_WaitAbilityActivate_eventWaitForAbilityActivate_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(IncludeTriggeredAbilities, AbilityTask_WaitAbilityActivate_eventWaitForAbilityActivate_Parms), sizeof(bool), true);
			UProperty* NewProp_WithoutTag = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WithoutTag"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(WithoutTag, AbilityTask_WaitAbilityActivate_eventWaitForAbilityActivate_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayTag());
			UProperty* NewProp_WithTag = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WithTag"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(WithTag, AbilityTask_WaitAbilityActivate_eventWaitForAbilityActivate_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayTag());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, AbilityTask_WaitAbilityActivate_eventWaitForAbilityActivate_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("TRUE"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|Tasks"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_IncludeTriggeredAbilities"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_TriggerOnce"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitAbilityActivate.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Wait until a new ability (of the same or different type) is activated. Only input based abilities will be counted unless IncludeTriggeredAbilities is true."));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UAbilityTask_WaitAbilityActivate_NoRegister()
	{
		return UAbilityTask_WaitAbilityActivate::StaticClass();
	}
	UClass* Z_Construct_UClass_UAbilityTask_WaitAbilityActivate()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UAbilityTask();
			Z_Construct_UPackage_GameplayAbilities();
			OuterClass = UAbilityTask_WaitAbilityActivate::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880080;

				OuterClass->LinkChild(Z_Construct_UFunction_UAbilityTask_WaitAbilityActivate_OnAbilityActivate());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilityTask_WaitAbilityActivate_WaitForAbilityActivate());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_OnActivate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnActivate"), RF_Public|RF_Transient|RF_Native) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnActivate, UAbilityTask_WaitAbilityActivate), 0x0000000010080000, Z_Construct_UDelegateFunction_GameplayAbilities_WaitAbilityActivateDelegate__DelegateSignature());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilityTask_WaitAbilityActivate_OnAbilityActivate()); // 995346717
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilityTask_WaitAbilityActivate_WaitForAbilityActivate()); // 1475651522
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Abilities/Tasks/AbilityTask_WaitAbilityActivate.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitAbilityActivate.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Waits for the actor to activate another ability"));
				MetaData->SetValue(NewProp_OnActivate, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitAbilityActivate.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UAbilityTask_WaitAbilityActivate(Z_Construct_UClass_UAbilityTask_WaitAbilityActivate, TEXT("UAbilityTask_WaitAbilityActivate"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UAbilityTask_WaitAbilityActivate);
	UFunction* Z_Construct_UDelegateFunction_GameplayAbilities_WaitAbilityCommitDelegate__DelegateSignature()
	{
		struct _Script_GameplayAbilities_eventWaitAbilityCommitDelegate_Parms
		{
			UGameplayAbility* ActivatedAbility;
		};
		UObject* Outer=Z_Construct_UPackage_GameplayAbilities();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WaitAbilityCommitDelegate__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535, sizeof(_Script_GameplayAbilities_eventWaitAbilityCommitDelegate_Parms));
			UProperty* NewProp_ActivatedAbility = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActivatedAbility"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ActivatedAbility, _Script_GameplayAbilities_eventWaitAbilityCommitDelegate_Parms), 0x0000000000000080, Z_Construct_UClass_UGameplayAbility_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitAbilityCommit.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilityTask_WaitAbilityCommit_OnAbilityCommit()
	{
		struct AbilityTask_WaitAbilityCommit_eventOnAbilityCommit_Parms
		{
			UGameplayAbility* ActivatedAbility;
		};
		UObject* Outer=Z_Construct_UClass_UAbilityTask_WaitAbilityCommit();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnAbilityCommit"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020401, 65535, sizeof(AbilityTask_WaitAbilityCommit_eventOnAbilityCommit_Parms));
			UProperty* NewProp_ActivatedAbility = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActivatedAbility"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ActivatedAbility, AbilityTask_WaitAbilityCommit_eventOnAbilityCommit_Parms), 0x0000000000000080, Z_Construct_UClass_UGameplayAbility_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitAbilityCommit.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilityTask_WaitAbilityCommit_WaitForAbilityCommit()
	{
		struct AbilityTask_WaitAbilityCommit_eventWaitForAbilityCommit_Parms
		{
			UObject* WorldContextObject;
			FGameplayTag WithTag;
			FGameplayTag WithoutTage;
			bool TriggerOnce;
			UAbilityTask_WaitAbilityCommit* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilityTask_WaitAbilityCommit();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WaitForAbilityCommit"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(AbilityTask_WaitAbilityCommit_eventWaitForAbilityCommit_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, AbilityTask_WaitAbilityCommit_eventWaitForAbilityCommit_Parms), 0x0000000000000580, Z_Construct_UClass_UAbilityTask_WaitAbilityCommit_NoRegister());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(TriggerOnce, AbilityTask_WaitAbilityCommit_eventWaitForAbilityCommit_Parms, bool);
			UProperty* NewProp_TriggerOnce = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TriggerOnce"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(TriggerOnce, AbilityTask_WaitAbilityCommit_eventWaitForAbilityCommit_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(TriggerOnce, AbilityTask_WaitAbilityCommit_eventWaitForAbilityCommit_Parms), sizeof(bool), true);
			UProperty* NewProp_WithoutTage = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WithoutTage"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(WithoutTage, AbilityTask_WaitAbilityCommit_eventWaitForAbilityCommit_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayTag());
			UProperty* NewProp_WithTag = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WithTag"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(WithTag, AbilityTask_WaitAbilityCommit_eventWaitForAbilityCommit_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayTag());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, AbilityTask_WaitAbilityCommit_eventWaitForAbilityCommit_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("TRUE"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|Tasks"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_TriggerOnce"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Wait For New Ability Commit"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitAbilityCommit.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Wait until a new ability (of the same or different type) is commited. Used to gracefully interrupt abilities in specific ways."));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UAbilityTask_WaitAbilityCommit_NoRegister()
	{
		return UAbilityTask_WaitAbilityCommit::StaticClass();
	}
	UClass* Z_Construct_UClass_UAbilityTask_WaitAbilityCommit()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UAbilityTask();
			Z_Construct_UPackage_GameplayAbilities();
			OuterClass = UAbilityTask_WaitAbilityCommit::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880080;

				OuterClass->LinkChild(Z_Construct_UFunction_UAbilityTask_WaitAbilityCommit_OnAbilityCommit());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilityTask_WaitAbilityCommit_WaitForAbilityCommit());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_OnCommit = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnCommit"), RF_Public|RF_Transient|RF_Native) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnCommit, UAbilityTask_WaitAbilityCommit), 0x0000000010080000, Z_Construct_UDelegateFunction_GameplayAbilities_WaitAbilityCommitDelegate__DelegateSignature());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilityTask_WaitAbilityCommit_OnAbilityCommit()); // 3197961681
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilityTask_WaitAbilityCommit_WaitForAbilityCommit()); // 421228803
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Abilities/Tasks/AbilityTask_WaitAbilityCommit.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitAbilityCommit.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Waits for the actor to activate another ability"));
				MetaData->SetValue(NewProp_OnCommit, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitAbilityCommit.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UAbilityTask_WaitAbilityCommit(Z_Construct_UClass_UAbilityTask_WaitAbilityCommit, TEXT("UAbilityTask_WaitAbilityCommit"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UAbilityTask_WaitAbilityCommit);
	UFunction* Z_Construct_UDelegateFunction_GameplayAbilities_WaitAttributeChangeDelegate__DelegateSignature()
	{
		UObject* Outer=Z_Construct_UPackage_GameplayAbilities();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WaitAttributeChangeDelegate__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitAttributeChange.h"));
#endif
		}
		return ReturnFunction;
	}
	UEnum* Z_Construct_UEnum_GameplayAbilities_EWaitAttributeChangeComparison()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UEnum_GameplayAbilities_EWaitAttributeChangeComparison_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EWaitAttributeChangeComparison"), 0, Get_Z_Construct_UEnum_GameplayAbilities_EWaitAttributeChangeComparison_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EWaitAttributeChangeComparison"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EWaitAttributeChangeComparison::None")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EWaitAttributeChangeComparison::GreaterThan")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EWaitAttributeChangeComparison::LessThan")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EWaitAttributeChangeComparison::GreaterThanOrEqualTo")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EWaitAttributeChangeComparison::LessThanOrEqualTo")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EWaitAttributeChangeComparison::NotEqualTo")), 5));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EWaitAttributeChangeComparison::ExactlyEqualTo")), 6));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EWaitAttributeChangeComparison::MAX")), 7));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EWaitAttributeChangeComparison::EWaitAttributeChangeComparison_MAX")), 8));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("MAX.Hidden"), TEXT(""));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitAttributeChange.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_GameplayAbilities_EWaitAttributeChangeComparison_CRC() { return 2362417160U; }
	UFunction* Z_Construct_UFunction_UAbilityTask_WaitAttributeChange_WaitForAttributeChange()
	{
		struct AbilityTask_WaitAttributeChange_eventWaitForAttributeChange_Parms
		{
			UObject* WorldContextObject;
			FGameplayAttribute Attribute;
			FGameplayTag WithSrcTag;
			FGameplayTag WithoutSrcTag;
			bool TriggerOnce;
			UAbilityTask_WaitAttributeChange* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilityTask_WaitAttributeChange();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WaitForAttributeChange"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(AbilityTask_WaitAttributeChange_eventWaitForAttributeChange_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, AbilityTask_WaitAttributeChange_eventWaitForAttributeChange_Parms), 0x0000000000000580, Z_Construct_UClass_UAbilityTask_WaitAttributeChange_NoRegister());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(TriggerOnce, AbilityTask_WaitAttributeChange_eventWaitForAttributeChange_Parms, bool);
			UProperty* NewProp_TriggerOnce = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TriggerOnce"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(TriggerOnce, AbilityTask_WaitAttributeChange_eventWaitForAttributeChange_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(TriggerOnce, AbilityTask_WaitAttributeChange_eventWaitForAttributeChange_Parms), sizeof(bool), true);
			UProperty* NewProp_WithoutSrcTag = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WithoutSrcTag"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(WithoutSrcTag, AbilityTask_WaitAttributeChange_eventWaitForAttributeChange_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayTag());
			UProperty* NewProp_WithSrcTag = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WithSrcTag"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(WithSrcTag, AbilityTask_WaitAttributeChange_eventWaitForAttributeChange_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayTag());
			UProperty* NewProp_Attribute = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Attribute"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Attribute, AbilityTask_WaitAttributeChange_eventWaitForAttributeChange_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayAttribute());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, AbilityTask_WaitAttributeChange_eventWaitForAttributeChange_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("TRUE"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|Tasks"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_TriggerOnce"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitAttributeChange.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Wait until an attribute changes."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilityTask_WaitAttributeChange_WaitForAttributeChangeWithComparison()
	{
		struct AbilityTask_WaitAttributeChange_eventWaitForAttributeChangeWithComparison_Parms
		{
			UObject* WorldContextObject;
			FGameplayAttribute InAttribute;
			FGameplayTag InWithTag;
			FGameplayTag InWithoutTag;
			TEnumAsByte<EWaitAttributeChangeComparison::Type> InComparisonType;
			float InComparisonValue;
			bool TriggerOnce;
			UAbilityTask_WaitAttributeChange* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilityTask_WaitAttributeChange();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WaitForAttributeChangeWithComparison"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(AbilityTask_WaitAttributeChange_eventWaitForAttributeChangeWithComparison_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, AbilityTask_WaitAttributeChange_eventWaitForAttributeChangeWithComparison_Parms), 0x0000000000000580, Z_Construct_UClass_UAbilityTask_WaitAttributeChange_NoRegister());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(TriggerOnce, AbilityTask_WaitAttributeChange_eventWaitForAttributeChangeWithComparison_Parms, bool);
			UProperty* NewProp_TriggerOnce = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TriggerOnce"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(TriggerOnce, AbilityTask_WaitAttributeChange_eventWaitForAttributeChangeWithComparison_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(TriggerOnce, AbilityTask_WaitAttributeChange_eventWaitForAttributeChangeWithComparison_Parms), sizeof(bool), true);
			UProperty* NewProp_InComparisonValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InComparisonValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InComparisonValue, AbilityTask_WaitAttributeChange_eventWaitForAttributeChangeWithComparison_Parms), 0x0000000000000080);
			UProperty* NewProp_InComparisonType = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InComparisonType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(InComparisonType, AbilityTask_WaitAttributeChange_eventWaitForAttributeChangeWithComparison_Parms), 0x0000000000000080, Z_Construct_UEnum_GameplayAbilities_EWaitAttributeChangeComparison());
			UProperty* NewProp_InWithoutTag = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InWithoutTag"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InWithoutTag, AbilityTask_WaitAttributeChange_eventWaitForAttributeChangeWithComparison_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayTag());
			UProperty* NewProp_InWithTag = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InWithTag"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InWithTag, AbilityTask_WaitAttributeChange_eventWaitForAttributeChangeWithComparison_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayTag());
			UProperty* NewProp_InAttribute = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InAttribute"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InAttribute, AbilityTask_WaitAttributeChange_eventWaitForAttributeChangeWithComparison_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayAttribute());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, AbilityTask_WaitAttributeChange_eventWaitForAttributeChangeWithComparison_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("TRUE"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|Tasks"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_TriggerOnce"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitAttributeChange.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Wait until an attribute changes to pass a given test."));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UAbilityTask_WaitAttributeChange_NoRegister()
	{
		return UAbilityTask_WaitAttributeChange::StaticClass();
	}
	UClass* Z_Construct_UClass_UAbilityTask_WaitAttributeChange()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UAbilityTask();
			Z_Construct_UPackage_GameplayAbilities();
			OuterClass = UAbilityTask_WaitAttributeChange::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880080;

				OuterClass->LinkChild(Z_Construct_UFunction_UAbilityTask_WaitAttributeChange_WaitForAttributeChange());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilityTask_WaitAttributeChange_WaitForAttributeChangeWithComparison());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_OnChange = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnChange"), RF_Public|RF_Transient|RF_Native) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnChange, UAbilityTask_WaitAttributeChange), 0x0000000010080000, Z_Construct_UDelegateFunction_GameplayAbilities_WaitAttributeChangeDelegate__DelegateSignature());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilityTask_WaitAttributeChange_WaitForAttributeChange()); // 2983445388
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilityTask_WaitAttributeChange_WaitForAttributeChangeWithComparison()); // 2603264186
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Abilities/Tasks/AbilityTask_WaitAttributeChange.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitAttributeChange.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Waits for the actor to activate another ability"));
				MetaData->SetValue(NewProp_OnChange, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitAttributeChange.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UAbilityTask_WaitAttributeChange(Z_Construct_UClass_UAbilityTask_WaitAttributeChange, TEXT("UAbilityTask_WaitAttributeChange"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UAbilityTask_WaitAttributeChange);
	UFunction* Z_Construct_UDelegateFunction_GameplayAbilities_WaitCancelDelegate__DelegateSignature()
	{
		UObject* Outer=Z_Construct_UPackage_GameplayAbilities();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WaitCancelDelegate__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitCancel.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilityTask_WaitCancel_OnCancelCallback()
	{
		UObject* Outer=Z_Construct_UClass_UAbilityTask_WaitCancel();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnCancelCallback"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitCancel.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilityTask_WaitCancel_OnLocalCancelCallback()
	{
		UObject* Outer=Z_Construct_UClass_UAbilityTask_WaitCancel();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnLocalCancelCallback"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitCancel.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilityTask_WaitCancel_WaitCancel()
	{
		struct AbilityTask_WaitCancel_eventWaitCancel_Parms
		{
			UObject* WorldContextObject;
			UAbilityTask_WaitCancel* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilityTask_WaitCancel();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WaitCancel"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(AbilityTask_WaitCancel_eventWaitCancel_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, AbilityTask_WaitCancel_eventWaitCancel_Parms), 0x0000000000000580, Z_Construct_UClass_UAbilityTask_WaitCancel_NoRegister());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, AbilityTask_WaitCancel_eventWaitCancel_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|Tasks"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Wait for Cancel Input"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitCancel.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UAbilityTask_WaitCancel_NoRegister()
	{
		return UAbilityTask_WaitCancel::StaticClass();
	}
	UClass* Z_Construct_UClass_UAbilityTask_WaitCancel()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UAbilityTask();
			Z_Construct_UPackage_GameplayAbilities();
			OuterClass = UAbilityTask_WaitCancel::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880080;

				OuterClass->LinkChild(Z_Construct_UFunction_UAbilityTask_WaitCancel_OnCancelCallback());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilityTask_WaitCancel_OnLocalCancelCallback());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilityTask_WaitCancel_WaitCancel());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_OnCancel = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnCancel"), RF_Public|RF_Transient|RF_Native) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnCancel, UAbilityTask_WaitCancel), 0x0000000010080000, Z_Construct_UDelegateFunction_GameplayAbilities_WaitCancelDelegate__DelegateSignature());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilityTask_WaitCancel_OnCancelCallback()); // 1367155159
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilityTask_WaitCancel_OnLocalCancelCallback()); // 3187235711
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilityTask_WaitCancel_WaitCancel()); // 4017824479
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Abilities/Tasks/AbilityTask_WaitCancel.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitCancel.h"));
				MetaData->SetValue(NewProp_OnCancel, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitCancel.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UAbilityTask_WaitCancel(Z_Construct_UClass_UAbilityTask_WaitCancel, TEXT("UAbilityTask_WaitCancel"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UAbilityTask_WaitCancel);
	UFunction* Z_Construct_UFunction_UAbilityTask_WaitConfirm_OnConfirmCallback()
	{
		struct AbilityTask_WaitConfirm_eventOnConfirmCallback_Parms
		{
			UGameplayAbility* Ability;
		};
		UObject* Outer=Z_Construct_UClass_UAbilityTask_WaitConfirm();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnConfirmCallback"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020401, 65535, sizeof(AbilityTask_WaitConfirm_eventOnConfirmCallback_Parms));
			UProperty* NewProp_Ability = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Ability"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Ability, AbilityTask_WaitConfirm_eventOnConfirmCallback_Parms), 0x0000000000000080, Z_Construct_UClass_UGameplayAbility_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitConfirm.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilityTask_WaitConfirm_WaitConfirm()
	{
		struct AbilityTask_WaitConfirm_eventWaitConfirm_Parms
		{
			UObject* WorldContextObject;
			UAbilityTask_WaitConfirm* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilityTask_WaitConfirm();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WaitConfirm"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(AbilityTask_WaitConfirm_eventWaitConfirm_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, AbilityTask_WaitConfirm_eventWaitConfirm_Parms), 0x0000000000000580, Z_Construct_UClass_UAbilityTask_WaitConfirm_NoRegister());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, AbilityTask_WaitConfirm_eventWaitConfirm_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("TRUE"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|Tasks"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitConfirm.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Wait until the server confirms the use of this ability. This is used to gate predictive portions of the ability"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UAbilityTask_WaitConfirm_NoRegister()
	{
		return UAbilityTask_WaitConfirm::StaticClass();
	}
	UClass* Z_Construct_UClass_UAbilityTask_WaitConfirm()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UAbilityTask();
			Z_Construct_UPackage_GameplayAbilities();
			OuterClass = UAbilityTask_WaitConfirm::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880080;

				OuterClass->LinkChild(Z_Construct_UFunction_UAbilityTask_WaitConfirm_OnConfirmCallback());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilityTask_WaitConfirm_WaitConfirm());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_OnConfirm = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnConfirm"), RF_Public|RF_Transient|RF_Native) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnConfirm, UAbilityTask_WaitConfirm), 0x0000000010080000, Z_Construct_UDelegateFunction_UGameplayTask_GenericGameplayTaskDelegate__DelegateSignature());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilityTask_WaitConfirm_OnConfirmCallback()); // 744474915
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilityTask_WaitConfirm_WaitConfirm()); // 803940332
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Abilities/Tasks/AbilityTask_WaitConfirm.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitConfirm.h"));
				MetaData->SetValue(NewProp_OnConfirm, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitConfirm.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UAbilityTask_WaitConfirm(Z_Construct_UClass_UAbilityTask_WaitConfirm, TEXT("UAbilityTask_WaitConfirm"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UAbilityTask_WaitConfirm);
	UFunction* Z_Construct_UDelegateFunction_GameplayAbilities_WaitConfirmCancelDelegate__DelegateSignature()
	{
		UObject* Outer=Z_Construct_UPackage_GameplayAbilities();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WaitConfirmCancelDelegate__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitConfirmCancel.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilityTask_WaitConfirmCancel_OnCancelCallback()
	{
		UObject* Outer=Z_Construct_UClass_UAbilityTask_WaitConfirmCancel();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnCancelCallback"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitConfirmCancel.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilityTask_WaitConfirmCancel_OnConfirmCallback()
	{
		UObject* Outer=Z_Construct_UClass_UAbilityTask_WaitConfirmCancel();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnConfirmCallback"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitConfirmCancel.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilityTask_WaitConfirmCancel_OnLocalCancelCallback()
	{
		UObject* Outer=Z_Construct_UClass_UAbilityTask_WaitConfirmCancel();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnLocalCancelCallback"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitConfirmCancel.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilityTask_WaitConfirmCancel_OnLocalConfirmCallback()
	{
		UObject* Outer=Z_Construct_UClass_UAbilityTask_WaitConfirmCancel();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnLocalConfirmCallback"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitConfirmCancel.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilityTask_WaitConfirmCancel_WaitConfirmCancel()
	{
		struct AbilityTask_WaitConfirmCancel_eventWaitConfirmCancel_Parms
		{
			UObject* WorldContextObject;
			UAbilityTask_WaitConfirmCancel* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilityTask_WaitConfirmCancel();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WaitConfirmCancel"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(AbilityTask_WaitConfirmCancel_eventWaitConfirmCancel_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, AbilityTask_WaitConfirmCancel_eventWaitConfirmCancel_Parms), 0x0000000000000580, Z_Construct_UClass_UAbilityTask_WaitConfirmCancel_NoRegister());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, AbilityTask_WaitConfirmCancel_eventWaitConfirmCancel_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|Tasks"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Wait for Confirm Input"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitConfirmCancel.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UAbilityTask_WaitConfirmCancel_NoRegister()
	{
		return UAbilityTask_WaitConfirmCancel::StaticClass();
	}
	UClass* Z_Construct_UClass_UAbilityTask_WaitConfirmCancel()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UAbilityTask();
			Z_Construct_UPackage_GameplayAbilities();
			OuterClass = UAbilityTask_WaitConfirmCancel::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880080;

				OuterClass->LinkChild(Z_Construct_UFunction_UAbilityTask_WaitConfirmCancel_OnCancelCallback());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilityTask_WaitConfirmCancel_OnConfirmCallback());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilityTask_WaitConfirmCancel_OnLocalCancelCallback());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilityTask_WaitConfirmCancel_OnLocalConfirmCallback());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilityTask_WaitConfirmCancel_WaitConfirmCancel());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_OnCancel = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnCancel"), RF_Public|RF_Transient|RF_Native) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnCancel, UAbilityTask_WaitConfirmCancel), 0x0000000010080000, Z_Construct_UDelegateFunction_GameplayAbilities_WaitConfirmCancelDelegate__DelegateSignature());
				UProperty* NewProp_OnConfirm = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnConfirm"), RF_Public|RF_Transient|RF_Native) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnConfirm, UAbilityTask_WaitConfirmCancel), 0x0000000010080000, Z_Construct_UDelegateFunction_GameplayAbilities_WaitConfirmCancelDelegate__DelegateSignature());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilityTask_WaitConfirmCancel_OnCancelCallback()); // 1134010894
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilityTask_WaitConfirmCancel_OnConfirmCallback()); // 1083804250
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilityTask_WaitConfirmCancel_OnLocalCancelCallback()); // 3191975016
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilityTask_WaitConfirmCancel_OnLocalConfirmCallback()); // 938783797
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilityTask_WaitConfirmCancel_WaitConfirmCancel()); // 1255858469
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Abilities/Tasks/AbilityTask_WaitConfirmCancel.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitConfirmCancel.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Fixme: this name is conflicting with AbilityTask_WaitConfirm\nUAbilityTask_WaitConfirmCancel = Wait for Targeting confirm/cancel\nUAbilityTask_WaitConfirm = Wait for server to confirm ability activation"));
				MetaData->SetValue(NewProp_OnCancel, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitConfirmCancel.h"));
				MetaData->SetValue(NewProp_OnConfirm, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitConfirmCancel.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UAbilityTask_WaitConfirmCancel(Z_Construct_UClass_UAbilityTask_WaitConfirmCancel, TEXT("UAbilityTask_WaitConfirmCancel"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UAbilityTask_WaitConfirmCancel);
	UFunction* Z_Construct_UDelegateFunction_GameplayAbilities_WaitDelayDelegate__DelegateSignature()
	{
		UObject* Outer=Z_Construct_UPackage_GameplayAbilities();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WaitDelayDelegate__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitDelay.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilityTask_WaitDelay_WaitDelay()
	{
		struct AbilityTask_WaitDelay_eventWaitDelay_Parms
		{
			UObject* WorldContextObject;
			float Time;
			UAbilityTask_WaitDelay* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilityTask_WaitDelay();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WaitDelay"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(AbilityTask_WaitDelay_eventWaitDelay_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, AbilityTask_WaitDelay_eventWaitDelay_Parms), 0x0000000000000580, Z_Construct_UClass_UAbilityTask_WaitDelay_NoRegister());
			UProperty* NewProp_Time = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Time"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Time, AbilityTask_WaitDelay_eventWaitDelay_Parms), 0x0000000000000080);
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, AbilityTask_WaitDelay_eventWaitDelay_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("TRUE"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|Tasks"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitDelay.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Wait specified time. This is functionally the same as a standard Delay node."));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UAbilityTask_WaitDelay_NoRegister()
	{
		return UAbilityTask_WaitDelay::StaticClass();
	}
	UClass* Z_Construct_UClass_UAbilityTask_WaitDelay()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UAbilityTask();
			Z_Construct_UPackage_GameplayAbilities();
			OuterClass = UAbilityTask_WaitDelay::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880080;

				OuterClass->LinkChild(Z_Construct_UFunction_UAbilityTask_WaitDelay_WaitDelay());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_OnFinish = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnFinish"), RF_Public|RF_Transient|RF_Native) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnFinish, UAbilityTask_WaitDelay), 0x0000000010080000, Z_Construct_UDelegateFunction_GameplayAbilities_WaitDelayDelegate__DelegateSignature());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilityTask_WaitDelay_WaitDelay()); // 633687622
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Abilities/Tasks/AbilityTask_WaitDelay.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitDelay.h"));
				MetaData->SetValue(NewProp_OnFinish, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitDelay.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UAbilityTask_WaitDelay(Z_Construct_UClass_UAbilityTask_WaitDelay, TEXT("UAbilityTask_WaitDelay"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UAbilityTask_WaitDelay);
	UFunction* Z_Construct_UFunction_UAbilityTask_WaitGameplayEffectApplied_OnApplyGameplayEffectCallback()
	{
		struct AbilityTask_WaitGameplayEffectApplied_eventOnApplyGameplayEffectCallback_Parms
		{
			UAbilitySystemComponent* Target;
			FGameplayEffectSpec SpecApplied;
			FActiveGameplayEffectHandle ActiveHandle;
		};
		UObject* Outer=Z_Construct_UClass_UAbilityTask_WaitGameplayEffectApplied();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnApplyGameplayEffectCallback"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00420401, 65535, sizeof(AbilityTask_WaitGameplayEffectApplied_eventOnApplyGameplayEffectCallback_Parms));
			UProperty* NewProp_ActiveHandle = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActiveHandle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ActiveHandle, AbilityTask_WaitGameplayEffectApplied_eventOnApplyGameplayEffectCallback_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FActiveGameplayEffectHandle());
			UProperty* NewProp_SpecApplied = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SpecApplied"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SpecApplied, AbilityTask_WaitGameplayEffectApplied_eventOnApplyGameplayEffectCallback_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FGameplayEffectSpec());
			UProperty* NewProp_Target = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Target"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Target, AbilityTask_WaitGameplayEffectApplied_eventOnApplyGameplayEffectCallback_Parms), 0x0000000000080080, Z_Construct_UClass_UAbilitySystemComponent_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitGameplayEffectApplied.h"));
			MetaData->SetValue(NewProp_Target, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UAbilityTask_WaitGameplayEffectApplied_NoRegister()
	{
		return UAbilityTask_WaitGameplayEffectApplied::StaticClass();
	}
	UClass* Z_Construct_UClass_UAbilityTask_WaitGameplayEffectApplied()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UAbilityTask();
			Z_Construct_UPackage_GameplayAbilities();
			OuterClass = UAbilityTask_WaitGameplayEffectApplied::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;

				OuterClass->LinkChild(Z_Construct_UFunction_UAbilityTask_WaitGameplayEffectApplied_OnApplyGameplayEffectCallback());

				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilityTask_WaitGameplayEffectApplied_OnApplyGameplayEffectCallback()); // 1184576733
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Abilities/Tasks/AbilityTask_WaitGameplayEffectApplied.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitGameplayEffectApplied.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UAbilityTask_WaitGameplayEffectApplied(Z_Construct_UClass_UAbilityTask_WaitGameplayEffectApplied, TEXT("UAbilityTask_WaitGameplayEffectApplied"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UAbilityTask_WaitGameplayEffectApplied);
	UFunction* Z_Construct_UDelegateFunction_GameplayAbilities_GameplayEffectAppliedSelfDelegate__DelegateSignature()
	{
		struct _Script_GameplayAbilities_eventGameplayEffectAppliedSelfDelegate_Parms
		{
			AActor* Source;
			FGameplayEffectSpecHandle SpecHandle;
			FActiveGameplayEffectHandle ActiveHandle;
		};
		UObject* Outer=Z_Construct_UPackage_GameplayAbilities();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GameplayEffectAppliedSelfDelegate__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535, sizeof(_Script_GameplayAbilities_eventGameplayEffectAppliedSelfDelegate_Parms));
			UProperty* NewProp_ActiveHandle = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActiveHandle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ActiveHandle, _Script_GameplayAbilities_eventGameplayEffectAppliedSelfDelegate_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FActiveGameplayEffectHandle());
			UProperty* NewProp_SpecHandle = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SpecHandle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SpecHandle, _Script_GameplayAbilities_eventGameplayEffectAppliedSelfDelegate_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayEffectSpecHandle());
			UProperty* NewProp_Source = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Source"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Source, _Script_GameplayAbilities_eventGameplayEffectAppliedSelfDelegate_Parms), 0x0000000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitGameplayEffectApplied_Self.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilityTask_WaitGameplayEffectApplied_Self_WaitGameplayEffectAppliedToSelf()
	{
		struct AbilityTask_WaitGameplayEffectApplied_Self_eventWaitGameplayEffectAppliedToSelf_Parms
		{
			UObject* WorldContextObject;
			FGameplayTargetDataFilterHandle SourceFilter;
			FGameplayTagRequirements SourceTagRequirements;
			FGameplayTagRequirements TargetTagRequirements;
			bool TriggerOnce;
			AActor* OptionalExternalOwner;
			UAbilityTask_WaitGameplayEffectApplied_Self* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilityTask_WaitGameplayEffectApplied_Self();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WaitGameplayEffectAppliedToSelf"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(AbilityTask_WaitGameplayEffectApplied_Self_eventWaitGameplayEffectAppliedToSelf_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, AbilityTask_WaitGameplayEffectApplied_Self_eventWaitGameplayEffectAppliedToSelf_Parms), 0x0000000000000580, Z_Construct_UClass_UAbilityTask_WaitGameplayEffectApplied_Self_NoRegister());
			UProperty* NewProp_OptionalExternalOwner = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OptionalExternalOwner"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(OptionalExternalOwner, AbilityTask_WaitGameplayEffectApplied_Self_eventWaitGameplayEffectAppliedToSelf_Parms), 0x0000000000000080, Z_Construct_UClass_AActor_NoRegister());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(TriggerOnce, AbilityTask_WaitGameplayEffectApplied_Self_eventWaitGameplayEffectAppliedToSelf_Parms, bool);
			UProperty* NewProp_TriggerOnce = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TriggerOnce"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(TriggerOnce, AbilityTask_WaitGameplayEffectApplied_Self_eventWaitGameplayEffectAppliedToSelf_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(TriggerOnce, AbilityTask_WaitGameplayEffectApplied_Self_eventWaitGameplayEffectAppliedToSelf_Parms), sizeof(bool), true);
			UProperty* NewProp_TargetTagRequirements = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TargetTagRequirements"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TargetTagRequirements, AbilityTask_WaitGameplayEffectApplied_Self_eventWaitGameplayEffectAppliedToSelf_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayTagRequirements());
			UProperty* NewProp_SourceTagRequirements = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SourceTagRequirements"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SourceTagRequirements, AbilityTask_WaitGameplayEffectApplied_Self_eventWaitGameplayEffectAppliedToSelf_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayTagRequirements());
			UProperty* NewProp_SourceFilter = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SourceFilter"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SourceFilter, AbilityTask_WaitGameplayEffectApplied_Self_eventWaitGameplayEffectAppliedToSelf_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FGameplayTargetDataFilterHandle());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, AbilityTask_WaitGameplayEffectApplied_Self_eventWaitGameplayEffectAppliedToSelf_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("TRUE"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|Tasks"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_TriggerOnce"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitGameplayEffectApplied_Self.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Wait until the owner *receives* a GameplayEffect from a given source (the source may be the owner too!). If TriggerOnce is true, this task will only return one time. Otherwise it will return everytime a GE is applied that meets the requirements over the life of the ability\nOptional External Owner can be used to run this task on someone else (not the owner of the ability). By default you can leave this empty."));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UAbilityTask_WaitGameplayEffectApplied_Self_NoRegister()
	{
		return UAbilityTask_WaitGameplayEffectApplied_Self::StaticClass();
	}
	UClass* Z_Construct_UClass_UAbilityTask_WaitGameplayEffectApplied_Self()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UAbilityTask_WaitGameplayEffectApplied();
			Z_Construct_UPackage_GameplayAbilities();
			OuterClass = UAbilityTask_WaitGameplayEffectApplied_Self::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880080;

				OuterClass->LinkChild(Z_Construct_UFunction_UAbilityTask_WaitGameplayEffectApplied_Self_WaitGameplayEffectAppliedToSelf());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_OnApplied = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnApplied"), RF_Public|RF_Transient|RF_Native) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnApplied, UAbilityTask_WaitGameplayEffectApplied_Self), 0x0000000010080000, Z_Construct_UDelegateFunction_GameplayAbilities_GameplayEffectAppliedSelfDelegate__DelegateSignature());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilityTask_WaitGameplayEffectApplied_Self_WaitGameplayEffectAppliedToSelf()); // 1149344970
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Abilities/Tasks/AbilityTask_WaitGameplayEffectApplied_Self.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitGameplayEffectApplied_Self.h"));
				MetaData->SetValue(NewProp_OnApplied, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitGameplayEffectApplied_Self.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UAbilityTask_WaitGameplayEffectApplied_Self(Z_Construct_UClass_UAbilityTask_WaitGameplayEffectApplied_Self, TEXT("UAbilityTask_WaitGameplayEffectApplied_Self"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UAbilityTask_WaitGameplayEffectApplied_Self);
	UFunction* Z_Construct_UDelegateFunction_GameplayAbilities_GameplayEffectAppliedTargetDelegate__DelegateSignature()
	{
		struct _Script_GameplayAbilities_eventGameplayEffectAppliedTargetDelegate_Parms
		{
			AActor* Target;
			FGameplayEffectSpecHandle SpecHandle;
			FActiveGameplayEffectHandle ActiveHandle;
		};
		UObject* Outer=Z_Construct_UPackage_GameplayAbilities();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GameplayEffectAppliedTargetDelegate__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535, sizeof(_Script_GameplayAbilities_eventGameplayEffectAppliedTargetDelegate_Parms));
			UProperty* NewProp_ActiveHandle = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActiveHandle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ActiveHandle, _Script_GameplayAbilities_eventGameplayEffectAppliedTargetDelegate_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FActiveGameplayEffectHandle());
			UProperty* NewProp_SpecHandle = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SpecHandle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SpecHandle, _Script_GameplayAbilities_eventGameplayEffectAppliedTargetDelegate_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayEffectSpecHandle());
			UProperty* NewProp_Target = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Target"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Target, _Script_GameplayAbilities_eventGameplayEffectAppliedTargetDelegate_Parms), 0x0000000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitGameplayEffectApplied_Target.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilityTask_WaitGameplayEffectApplied_Target_WaitGameplayEffectAppliedToTarget()
	{
		struct AbilityTask_WaitGameplayEffectApplied_Target_eventWaitGameplayEffectAppliedToTarget_Parms
		{
			UObject* WorldContextObject;
			FGameplayTargetDataFilterHandle TargetFilter;
			FGameplayTagRequirements SourceTagRequirements;
			FGameplayTagRequirements TargetTagRequirements;
			bool TriggerOnce;
			AActor* OptionalExternalOwner;
			UAbilityTask_WaitGameplayEffectApplied_Target* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilityTask_WaitGameplayEffectApplied_Target();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WaitGameplayEffectAppliedToTarget"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(AbilityTask_WaitGameplayEffectApplied_Target_eventWaitGameplayEffectAppliedToTarget_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, AbilityTask_WaitGameplayEffectApplied_Target_eventWaitGameplayEffectAppliedToTarget_Parms), 0x0000000000000580, Z_Construct_UClass_UAbilityTask_WaitGameplayEffectApplied_Target_NoRegister());
			UProperty* NewProp_OptionalExternalOwner = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OptionalExternalOwner"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(OptionalExternalOwner, AbilityTask_WaitGameplayEffectApplied_Target_eventWaitGameplayEffectAppliedToTarget_Parms), 0x0000000000000080, Z_Construct_UClass_AActor_NoRegister());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(TriggerOnce, AbilityTask_WaitGameplayEffectApplied_Target_eventWaitGameplayEffectAppliedToTarget_Parms, bool);
			UProperty* NewProp_TriggerOnce = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TriggerOnce"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(TriggerOnce, AbilityTask_WaitGameplayEffectApplied_Target_eventWaitGameplayEffectAppliedToTarget_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(TriggerOnce, AbilityTask_WaitGameplayEffectApplied_Target_eventWaitGameplayEffectAppliedToTarget_Parms), sizeof(bool), true);
			UProperty* NewProp_TargetTagRequirements = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TargetTagRequirements"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TargetTagRequirements, AbilityTask_WaitGameplayEffectApplied_Target_eventWaitGameplayEffectAppliedToTarget_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayTagRequirements());
			UProperty* NewProp_SourceTagRequirements = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SourceTagRequirements"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SourceTagRequirements, AbilityTask_WaitGameplayEffectApplied_Target_eventWaitGameplayEffectAppliedToTarget_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayTagRequirements());
			UProperty* NewProp_TargetFilter = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TargetFilter"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TargetFilter, AbilityTask_WaitGameplayEffectApplied_Target_eventWaitGameplayEffectAppliedToTarget_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FGameplayTargetDataFilterHandle());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, AbilityTask_WaitGameplayEffectApplied_Target_eventWaitGameplayEffectAppliedToTarget_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("TRUE"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|Tasks"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_TriggerOnce"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitGameplayEffectApplied_Target.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Wait until the owner (or External Owner) applies a GameplayEffect to a Target (the target may be the owner too!). If TriggerOnce is true, this task will only return one time. Otherwise it will return everytime a GE is applied that meets the requirements over the life of the ability\nOptional External Owner can be used to run this task on someone else (not the owner of the ability). By default you can leave this empty."));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UAbilityTask_WaitGameplayEffectApplied_Target_NoRegister()
	{
		return UAbilityTask_WaitGameplayEffectApplied_Target::StaticClass();
	}
	UClass* Z_Construct_UClass_UAbilityTask_WaitGameplayEffectApplied_Target()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UAbilityTask_WaitGameplayEffectApplied();
			Z_Construct_UPackage_GameplayAbilities();
			OuterClass = UAbilityTask_WaitGameplayEffectApplied_Target::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880080;

				OuterClass->LinkChild(Z_Construct_UFunction_UAbilityTask_WaitGameplayEffectApplied_Target_WaitGameplayEffectAppliedToTarget());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_OnApplied = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnApplied"), RF_Public|RF_Transient|RF_Native) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnApplied, UAbilityTask_WaitGameplayEffectApplied_Target), 0x0000000010080000, Z_Construct_UDelegateFunction_GameplayAbilities_GameplayEffectAppliedTargetDelegate__DelegateSignature());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilityTask_WaitGameplayEffectApplied_Target_WaitGameplayEffectAppliedToTarget()); // 3781062890
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Abilities/Tasks/AbilityTask_WaitGameplayEffectApplied_Target.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitGameplayEffectApplied_Target.h"));
				MetaData->SetValue(NewProp_OnApplied, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitGameplayEffectApplied_Target.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UAbilityTask_WaitGameplayEffectApplied_Target(Z_Construct_UClass_UAbilityTask_WaitGameplayEffectApplied_Target, TEXT("UAbilityTask_WaitGameplayEffectApplied_Target"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UAbilityTask_WaitGameplayEffectApplied_Target);
	UFunction* Z_Construct_UDelegateFunction_GameplayAbilities_WaitGameplayEffectRemovedDelegate__DelegateSignature()
	{
		UObject* Outer=Z_Construct_UPackage_GameplayAbilities();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WaitGameplayEffectRemovedDelegate__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitGameplayEffectRemoved.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilityTask_WaitGameplayEffectRemoved_OnGameplayEffectRemoved()
	{
		UObject* Outer=Z_Construct_UClass_UAbilityTask_WaitGameplayEffectRemoved();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnGameplayEffectRemoved"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitGameplayEffectRemoved.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilityTask_WaitGameplayEffectRemoved_WaitForGameplayEffectRemoved()
	{
		struct AbilityTask_WaitGameplayEffectRemoved_eventWaitForGameplayEffectRemoved_Parms
		{
			UObject* WorldContextObject;
			FActiveGameplayEffectHandle Handle;
			UAbilityTask_WaitGameplayEffectRemoved* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilityTask_WaitGameplayEffectRemoved();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WaitForGameplayEffectRemoved"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(AbilityTask_WaitGameplayEffectRemoved_eventWaitForGameplayEffectRemoved_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, AbilityTask_WaitGameplayEffectRemoved_eventWaitForGameplayEffectRemoved_Parms), 0x0000000000000580, Z_Construct_UClass_UAbilityTask_WaitGameplayEffectRemoved_NoRegister());
			UProperty* NewProp_Handle = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Handle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Handle, AbilityTask_WaitGameplayEffectRemoved_eventWaitForGameplayEffectRemoved_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FActiveGameplayEffectHandle());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, AbilityTask_WaitGameplayEffectRemoved_eventWaitForGameplayEffectRemoved_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("TRUE"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|Tasks"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitGameplayEffectRemoved.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Wait until the specified gameplay effect is removed."));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UAbilityTask_WaitGameplayEffectRemoved_NoRegister()
	{
		return UAbilityTask_WaitGameplayEffectRemoved::StaticClass();
	}
	UClass* Z_Construct_UClass_UAbilityTask_WaitGameplayEffectRemoved()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UAbilityTask();
			Z_Construct_UPackage_GameplayAbilities();
			OuterClass = UAbilityTask_WaitGameplayEffectRemoved::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880080;

				OuterClass->LinkChild(Z_Construct_UFunction_UAbilityTask_WaitGameplayEffectRemoved_OnGameplayEffectRemoved());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilityTask_WaitGameplayEffectRemoved_WaitForGameplayEffectRemoved());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_InvalidHandle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InvalidHandle"), RF_Public|RF_Transient|RF_Native) UMulticastDelegateProperty(CPP_PROPERTY_BASE(InvalidHandle, UAbilityTask_WaitGameplayEffectRemoved), 0x0000000010080000, Z_Construct_UDelegateFunction_GameplayAbilities_WaitGameplayEffectRemovedDelegate__DelegateSignature());
				UProperty* NewProp_OnRemoved = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnRemoved"), RF_Public|RF_Transient|RF_Native) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnRemoved, UAbilityTask_WaitGameplayEffectRemoved), 0x0000000010080000, Z_Construct_UDelegateFunction_GameplayAbilities_WaitGameplayEffectRemovedDelegate__DelegateSignature());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilityTask_WaitGameplayEffectRemoved_OnGameplayEffectRemoved()); // 162782185
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilityTask_WaitGameplayEffectRemoved_WaitForGameplayEffectRemoved()); // 4234090699
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Abilities/Tasks/AbilityTask_WaitGameplayEffectRemoved.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitGameplayEffectRemoved.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Waits for the actor to activate another ability"));
				MetaData->SetValue(NewProp_InvalidHandle, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitGameplayEffectRemoved.h"));
				MetaData->SetValue(NewProp_OnRemoved, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitGameplayEffectRemoved.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UAbilityTask_WaitGameplayEffectRemoved(Z_Construct_UClass_UAbilityTask_WaitGameplayEffectRemoved, TEXT("UAbilityTask_WaitGameplayEffectRemoved"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UAbilityTask_WaitGameplayEffectRemoved);
	UFunction* Z_Construct_UFunction_UAbilityTask_WaitGameplayTag_GameplayTagCallback()
	{
		struct AbilityTask_WaitGameplayTag_eventGameplayTagCallback_Parms
		{
			FGameplayTag Tag;
			int32 NewCount;
		};
		UObject* Outer=Z_Construct_UClass_UAbilityTask_WaitGameplayTag();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GameplayTagCallback"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020400, 65535, sizeof(AbilityTask_WaitGameplayTag_eventGameplayTagCallback_Parms));
			UProperty* NewProp_NewCount = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewCount"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(NewCount, AbilityTask_WaitGameplayTag_eventGameplayTagCallback_Parms), 0x0000000000000080);
			UProperty* NewProp_Tag = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Tag"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Tag, AbilityTask_WaitGameplayTag_eventGameplayTagCallback_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FGameplayTag());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitGameplayTagBase.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UAbilityTask_WaitGameplayTag_NoRegister()
	{
		return UAbilityTask_WaitGameplayTag::StaticClass();
	}
	UClass* Z_Construct_UClass_UAbilityTask_WaitGameplayTag()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UAbilityTask();
			Z_Construct_UPackage_GameplayAbilities();
			OuterClass = UAbilityTask_WaitGameplayTag::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;

				OuterClass->LinkChild(Z_Construct_UFunction_UAbilityTask_WaitGameplayTag_GameplayTagCallback());

				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilityTask_WaitGameplayTag_GameplayTagCallback()); // 4027621102
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Abilities/Tasks/AbilityTask_WaitGameplayTagBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitGameplayTagBase.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UAbilityTask_WaitGameplayTag(Z_Construct_UClass_UAbilityTask_WaitGameplayTag, TEXT("UAbilityTask_WaitGameplayTag"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UAbilityTask_WaitGameplayTag);
	UFunction* Z_Construct_UDelegateFunction_GameplayAbilities_WaitGameplayTagDelegate__DelegateSignature()
	{
		UObject* Outer=Z_Construct_UPackage_GameplayAbilities();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WaitGameplayTagDelegate__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitGameplayTag.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilityTask_WaitGameplayTagAdded_WaitGameplayTagAdd()
	{
		struct AbilityTask_WaitGameplayTagAdded_eventWaitGameplayTagAdd_Parms
		{
			UObject* WorldContextObject;
			FGameplayTag Tag;
			AActor* OptionalExternalTarget;
			bool OnlyTriggerOnce;
			UAbilityTask_WaitGameplayTagAdded* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilityTask_WaitGameplayTagAdded();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WaitGameplayTagAdd"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(AbilityTask_WaitGameplayTagAdded_eventWaitGameplayTagAdd_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, AbilityTask_WaitGameplayTagAdded_eventWaitGameplayTagAdd_Parms), 0x0000000000000580, Z_Construct_UClass_UAbilityTask_WaitGameplayTagAdded_NoRegister());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(OnlyTriggerOnce, AbilityTask_WaitGameplayTagAdded_eventWaitGameplayTagAdd_Parms, bool);
			UProperty* NewProp_OnlyTriggerOnce = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OnlyTriggerOnce"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(OnlyTriggerOnce, AbilityTask_WaitGameplayTagAdded_eventWaitGameplayTagAdd_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(OnlyTriggerOnce, AbilityTask_WaitGameplayTagAdded_eventWaitGameplayTagAdd_Parms), sizeof(bool), true);
			UProperty* NewProp_OptionalExternalTarget = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OptionalExternalTarget"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(OptionalExternalTarget, AbilityTask_WaitGameplayTagAdded_eventWaitGameplayTagAdd_Parms), 0x0000000000000080, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_Tag = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Tag"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Tag, AbilityTask_WaitGameplayTagAdded_eventWaitGameplayTagAdd_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayTag());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, AbilityTask_WaitGameplayTagAdded_eventWaitGameplayTagAdd_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("TRUE"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|Tasks"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_OnlyTriggerOnce"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitGameplayTag.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Wait until the specified gameplay tag is Added. By default this will look at the owner of this ability. OptionalExternalTarget can be set to make this look at another actor's tags for changes.\nIf the tag is already present when this task is started, it will immediately broadcast the Added event. It will keep listening as long as OnlyTriggerOnce = false."));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UAbilityTask_WaitGameplayTagAdded_NoRegister()
	{
		return UAbilityTask_WaitGameplayTagAdded::StaticClass();
	}
	UClass* Z_Construct_UClass_UAbilityTask_WaitGameplayTagAdded()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UAbilityTask_WaitGameplayTag();
			Z_Construct_UPackage_GameplayAbilities();
			OuterClass = UAbilityTask_WaitGameplayTagAdded::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880080;

				OuterClass->LinkChild(Z_Construct_UFunction_UAbilityTask_WaitGameplayTagAdded_WaitGameplayTagAdd());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Added = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Added"), RF_Public|RF_Transient|RF_Native) UMulticastDelegateProperty(CPP_PROPERTY_BASE(Added, UAbilityTask_WaitGameplayTagAdded), 0x0000000010080000, Z_Construct_UDelegateFunction_GameplayAbilities_WaitGameplayTagDelegate__DelegateSignature());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilityTask_WaitGameplayTagAdded_WaitGameplayTagAdd()); // 2320549120
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Abilities/Tasks/AbilityTask_WaitGameplayTag.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitGameplayTag.h"));
				MetaData->SetValue(NewProp_Added, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitGameplayTag.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UAbilityTask_WaitGameplayTagAdded(Z_Construct_UClass_UAbilityTask_WaitGameplayTagAdded, TEXT("UAbilityTask_WaitGameplayTagAdded"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UAbilityTask_WaitGameplayTagAdded);
	UFunction* Z_Construct_UFunction_UAbilityTask_WaitGameplayTagRemoved_WaitGameplayTagRemove()
	{
		struct AbilityTask_WaitGameplayTagRemoved_eventWaitGameplayTagRemove_Parms
		{
			UObject* WorldContextObject;
			FGameplayTag Tag;
			AActor* OptionalExternalTarget;
			bool OnlyTriggerOnce;
			UAbilityTask_WaitGameplayTagRemoved* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilityTask_WaitGameplayTagRemoved();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WaitGameplayTagRemove"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(AbilityTask_WaitGameplayTagRemoved_eventWaitGameplayTagRemove_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, AbilityTask_WaitGameplayTagRemoved_eventWaitGameplayTagRemove_Parms), 0x0000000000000580, Z_Construct_UClass_UAbilityTask_WaitGameplayTagRemoved_NoRegister());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(OnlyTriggerOnce, AbilityTask_WaitGameplayTagRemoved_eventWaitGameplayTagRemove_Parms, bool);
			UProperty* NewProp_OnlyTriggerOnce = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OnlyTriggerOnce"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(OnlyTriggerOnce, AbilityTask_WaitGameplayTagRemoved_eventWaitGameplayTagRemove_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(OnlyTriggerOnce, AbilityTask_WaitGameplayTagRemoved_eventWaitGameplayTagRemove_Parms), sizeof(bool), true);
			UProperty* NewProp_OptionalExternalTarget = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OptionalExternalTarget"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(OptionalExternalTarget, AbilityTask_WaitGameplayTagRemoved_eventWaitGameplayTagRemove_Parms), 0x0000000000000080, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_Tag = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Tag"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Tag, AbilityTask_WaitGameplayTagRemoved_eventWaitGameplayTagRemove_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayTag());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, AbilityTask_WaitGameplayTagRemoved_eventWaitGameplayTagRemove_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("TRUE"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|Tasks"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_OnlyTriggerOnce"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitGameplayTag.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Wait until the specified gameplay tag is Removed. By default this will look at the owner of this ability. OptionalExternalTarget can be set to make this look at another actor's tags for changes.\nIf the tag is not present when this task is started, it will immediately broadcast the Removed event. It will keep listening as long as OnlyTriggerOnce = false."));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UAbilityTask_WaitGameplayTagRemoved_NoRegister()
	{
		return UAbilityTask_WaitGameplayTagRemoved::StaticClass();
	}
	UClass* Z_Construct_UClass_UAbilityTask_WaitGameplayTagRemoved()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UAbilityTask_WaitGameplayTag();
			Z_Construct_UPackage_GameplayAbilities();
			OuterClass = UAbilityTask_WaitGameplayTagRemoved::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880080;

				OuterClass->LinkChild(Z_Construct_UFunction_UAbilityTask_WaitGameplayTagRemoved_WaitGameplayTagRemove());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Removed = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Removed"), RF_Public|RF_Transient|RF_Native) UMulticastDelegateProperty(CPP_PROPERTY_BASE(Removed, UAbilityTask_WaitGameplayTagRemoved), 0x0000000010080000, Z_Construct_UDelegateFunction_GameplayAbilities_WaitGameplayTagDelegate__DelegateSignature());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilityTask_WaitGameplayTagRemoved_WaitGameplayTagRemove()); // 1460150484
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Abilities/Tasks/AbilityTask_WaitGameplayTag.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitGameplayTag.h"));
				MetaData->SetValue(NewProp_Removed, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitGameplayTag.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UAbilityTask_WaitGameplayTagRemoved(Z_Construct_UClass_UAbilityTask_WaitGameplayTagRemoved, TEXT("UAbilityTask_WaitGameplayTagRemoved"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UAbilityTask_WaitGameplayTagRemoved);
	UFunction* Z_Construct_UDelegateFunction_GameplayAbilities_InputPressDelegate__DelegateSignature()
	{
		struct _Script_GameplayAbilities_eventInputPressDelegate_Parms
		{
			float TimeWaited;
		};
		UObject* Outer=Z_Construct_UPackage_GameplayAbilities();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("InputPressDelegate__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535, sizeof(_Script_GameplayAbilities_eventInputPressDelegate_Parms));
			UProperty* NewProp_TimeWaited = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TimeWaited"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(TimeWaited, _Script_GameplayAbilities_eventInputPressDelegate_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitInputPress.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilityTask_WaitInputPress_OnPressCallback()
	{
		UObject* Outer=Z_Construct_UClass_UAbilityTask_WaitInputPress();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnPressCallback"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitInputPress.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilityTask_WaitInputPress_WaitInputPress()
	{
		struct AbilityTask_WaitInputPress_eventWaitInputPress_Parms
		{
			UObject* WorldContextObject;
			bool bTestAlreadyPressed;
			UAbilityTask_WaitInputPress* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilityTask_WaitInputPress();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WaitInputPress"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(AbilityTask_WaitInputPress_eventWaitInputPress_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, AbilityTask_WaitInputPress_eventWaitInputPress_Parms), 0x0000000000000580, Z_Construct_UClass_UAbilityTask_WaitInputPress_NoRegister());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTestAlreadyPressed, AbilityTask_WaitInputPress_eventWaitInputPress_Parms, bool);
			UProperty* NewProp_bTestAlreadyPressed = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTestAlreadyPressed"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTestAlreadyPressed, AbilityTask_WaitInputPress_eventWaitInputPress_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bTestAlreadyPressed, AbilityTask_WaitInputPress_eventWaitInputPress_Parms), sizeof(bool), true);
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, AbilityTask_WaitInputPress_eventWaitInputPress_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("TRUE"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|Tasks"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bTestAlreadyPressed"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitInputPress.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Wait until the user presses the input button for this ability's activation. Returns time this node spent waiting for the press. Will return 0 if input was already down."));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UAbilityTask_WaitInputPress_NoRegister()
	{
		return UAbilityTask_WaitInputPress::StaticClass();
	}
	UClass* Z_Construct_UClass_UAbilityTask_WaitInputPress()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UAbilityTask();
			Z_Construct_UPackage_GameplayAbilities();
			OuterClass = UAbilityTask_WaitInputPress::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880080;

				OuterClass->LinkChild(Z_Construct_UFunction_UAbilityTask_WaitInputPress_OnPressCallback());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilityTask_WaitInputPress_WaitInputPress());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_OnPress = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnPress"), RF_Public|RF_Transient|RF_Native) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnPress, UAbilityTask_WaitInputPress), 0x0000000010080000, Z_Construct_UDelegateFunction_GameplayAbilities_InputPressDelegate__DelegateSignature());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilityTask_WaitInputPress_OnPressCallback()); // 4261258252
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilityTask_WaitInputPress_WaitInputPress()); // 3200699957
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Abilities/Tasks/AbilityTask_WaitInputPress.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitInputPress.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Waits until the input is pressed from activating an ability. This should be true immediately upon starting the ability, since the key was pressed to activate it.\nWe expect server to execute this task in parallel and keep its own time. We do not keep track of"));
				MetaData->SetValue(NewProp_OnPress, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitInputPress.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UAbilityTask_WaitInputPress(Z_Construct_UClass_UAbilityTask_WaitInputPress, TEXT("UAbilityTask_WaitInputPress"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UAbilityTask_WaitInputPress);
	UFunction* Z_Construct_UDelegateFunction_GameplayAbilities_InputReleaseDelegate__DelegateSignature()
	{
		struct _Script_GameplayAbilities_eventInputReleaseDelegate_Parms
		{
			float TimeHeld;
		};
		UObject* Outer=Z_Construct_UPackage_GameplayAbilities();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("InputReleaseDelegate__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535, sizeof(_Script_GameplayAbilities_eventInputReleaseDelegate_Parms));
			UProperty* NewProp_TimeHeld = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TimeHeld"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(TimeHeld, _Script_GameplayAbilities_eventInputReleaseDelegate_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitInputRelease.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilityTask_WaitInputRelease_OnReleaseCallback()
	{
		UObject* Outer=Z_Construct_UClass_UAbilityTask_WaitInputRelease();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnReleaseCallback"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitInputRelease.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilityTask_WaitInputRelease_WaitInputRelease()
	{
		struct AbilityTask_WaitInputRelease_eventWaitInputRelease_Parms
		{
			UObject* WorldContextObject;
			bool bTestAlreadyReleased;
			UAbilityTask_WaitInputRelease* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilityTask_WaitInputRelease();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WaitInputRelease"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(AbilityTask_WaitInputRelease_eventWaitInputRelease_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, AbilityTask_WaitInputRelease_eventWaitInputRelease_Parms), 0x0000000000000580, Z_Construct_UClass_UAbilityTask_WaitInputRelease_NoRegister());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTestAlreadyReleased, AbilityTask_WaitInputRelease_eventWaitInputRelease_Parms, bool);
			UProperty* NewProp_bTestAlreadyReleased = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTestAlreadyReleased"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTestAlreadyReleased, AbilityTask_WaitInputRelease_eventWaitInputRelease_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bTestAlreadyReleased, AbilityTask_WaitInputRelease_eventWaitInputRelease_Parms), sizeof(bool), true);
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, AbilityTask_WaitInputRelease_eventWaitInputRelease_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("TRUE"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|Tasks"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bTestAlreadyReleased"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitInputRelease.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Wait until the user releases the input button for this ability's activation. Returns time from hitting this node, till release. Will return 0 if input was already released."));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UAbilityTask_WaitInputRelease_NoRegister()
	{
		return UAbilityTask_WaitInputRelease::StaticClass();
	}
	UClass* Z_Construct_UClass_UAbilityTask_WaitInputRelease()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UAbilityTask();
			Z_Construct_UPackage_GameplayAbilities();
			OuterClass = UAbilityTask_WaitInputRelease::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880080;

				OuterClass->LinkChild(Z_Construct_UFunction_UAbilityTask_WaitInputRelease_OnReleaseCallback());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilityTask_WaitInputRelease_WaitInputRelease());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_OnRelease = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnRelease"), RF_Public|RF_Transient|RF_Native) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnRelease, UAbilityTask_WaitInputRelease), 0x0000000010080000, Z_Construct_UDelegateFunction_GameplayAbilities_InputReleaseDelegate__DelegateSignature());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilityTask_WaitInputRelease_OnReleaseCallback()); // 3313505652
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilityTask_WaitInputRelease_WaitInputRelease()); // 1537600937
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Abilities/Tasks/AbilityTask_WaitInputRelease.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitInputRelease.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Waits until the input is released from activating an ability. Clients will replicate a 'release input' event to the server, but not the exact time it was held locally.\nWe expect server to execute this task in parallel and keep its own time."));
				MetaData->SetValue(NewProp_OnRelease, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitInputRelease.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UAbilityTask_WaitInputRelease(Z_Construct_UClass_UAbilityTask_WaitInputRelease, TEXT("UAbilityTask_WaitInputRelease"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UAbilityTask_WaitInputRelease);
	UFunction* Z_Construct_UDelegateFunction_GameplayAbilities_MovementModeChangedDelegate__DelegateSignature()
	{
		struct _Script_GameplayAbilities_eventMovementModeChangedDelegate_Parms
		{
			TEnumAsByte<EMovementMode> NewMovementMode;
		};
		UObject* Outer=Z_Construct_UPackage_GameplayAbilities();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MovementModeChangedDelegate__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535, sizeof(_Script_GameplayAbilities_eventMovementModeChangedDelegate_Parms));
			UProperty* NewProp_NewMovementMode = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewMovementMode"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(NewMovementMode, _Script_GameplayAbilities_eventMovementModeChangedDelegate_Parms), 0x0000000000000080, Z_Construct_UEnum_Engine_EMovementMode());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitMovementModeChange.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilityTask_WaitMovementModeChange_CreateWaitMovementModeChange()
	{
		struct AbilityTask_WaitMovementModeChange_eventCreateWaitMovementModeChange_Parms
		{
			UObject* WorldContextObject;
			TEnumAsByte<EMovementMode> NewMode;
			UAbilityTask_WaitMovementModeChange* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilityTask_WaitMovementModeChange();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CreateWaitMovementModeChange"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(AbilityTask_WaitMovementModeChange_eventCreateWaitMovementModeChange_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, AbilityTask_WaitMovementModeChange_eventCreateWaitMovementModeChange_Parms), 0x0000000000000580, Z_Construct_UClass_UAbilityTask_WaitMovementModeChange_NoRegister());
			UProperty* NewProp_NewMode = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewMode"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(NewMode, AbilityTask_WaitMovementModeChange_eventCreateWaitMovementModeChange_Parms), 0x0000000000000080, Z_Construct_UEnum_Engine_EMovementMode());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, AbilityTask_WaitMovementModeChange_eventCreateWaitMovementModeChange_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("TRUE"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|Tasks"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("WaitMovementModeChange"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitMovementModeChange.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Wait until movement mode changes (E.g., landing)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilityTask_WaitMovementModeChange_OnMovementModeChange()
	{
		struct AbilityTask_WaitMovementModeChange_eventOnMovementModeChange_Parms
		{
			ACharacter* Character;
			TEnumAsByte<EMovementMode> PrevMovementMode;
			uint8 PreviousCustomMode;
		};
		UObject* Outer=Z_Construct_UClass_UAbilityTask_WaitMovementModeChange();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnMovementModeChange"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020401, 65535, sizeof(AbilityTask_WaitMovementModeChange_eventOnMovementModeChange_Parms));
			UProperty* NewProp_PreviousCustomMode = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PreviousCustomMode"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(PreviousCustomMode, AbilityTask_WaitMovementModeChange_eventOnMovementModeChange_Parms), 0x0000000000000080);
			UProperty* NewProp_PrevMovementMode = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PrevMovementMode"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(PrevMovementMode, AbilityTask_WaitMovementModeChange_eventOnMovementModeChange_Parms), 0x0000000000000080, Z_Construct_UEnum_Engine_EMovementMode());
			UProperty* NewProp_Character = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Character"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Character, AbilityTask_WaitMovementModeChange_eventOnMovementModeChange_Parms), 0x0000000000000080, Z_Construct_UClass_ACharacter_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitMovementModeChange.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UAbilityTask_WaitMovementModeChange_NoRegister()
	{
		return UAbilityTask_WaitMovementModeChange::StaticClass();
	}
	UClass* Z_Construct_UClass_UAbilityTask_WaitMovementModeChange()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UAbilityTask();
			Z_Construct_UPackage_GameplayAbilities();
			OuterClass = UAbilityTask_WaitMovementModeChange::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880080;

				OuterClass->LinkChild(Z_Construct_UFunction_UAbilityTask_WaitMovementModeChange_CreateWaitMovementModeChange());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilityTask_WaitMovementModeChange_OnMovementModeChange());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_OnChange = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnChange"), RF_Public|RF_Transient|RF_Native) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnChange, UAbilityTask_WaitMovementModeChange), 0x0000000010080000, Z_Construct_UDelegateFunction_GameplayAbilities_MovementModeChangedDelegate__DelegateSignature());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilityTask_WaitMovementModeChange_CreateWaitMovementModeChange()); // 3505997194
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilityTask_WaitMovementModeChange_OnMovementModeChange()); // 2635195557
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Abilities/Tasks/AbilityTask_WaitMovementModeChange.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitMovementModeChange.h"));
				MetaData->SetValue(NewProp_OnChange, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitMovementModeChange.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UAbilityTask_WaitMovementModeChange(Z_Construct_UClass_UAbilityTask_WaitMovementModeChange, TEXT("UAbilityTask_WaitMovementModeChange"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UAbilityTask_WaitMovementModeChange);
	UFunction* Z_Construct_UDelegateFunction_GameplayAbilities_WaitOverlapDelegate__DelegateSignature()
	{
		struct _Script_GameplayAbilities_eventWaitOverlapDelegate_Parms
		{
			FGameplayAbilityTargetDataHandle TargetData;
		};
		UObject* Outer=Z_Construct_UPackage_GameplayAbilities();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WaitOverlapDelegate__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535, sizeof(_Script_GameplayAbilities_eventWaitOverlapDelegate_Parms));
			UProperty* NewProp_TargetData = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TargetData"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TargetData, _Script_GameplayAbilities_eventWaitOverlapDelegate_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayAbilityTargetDataHandle());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitOverlap.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilityTask_WaitOverlap_OnHitCallback()
	{
		struct AbilityTask_WaitOverlap_eventOnHitCallback_Parms
		{
			AActor* OtherActor;
			UPrimitiveComponent* OtherComp;
			FVector NormalImpulse;
			FHitResult Hit;
		};
		UObject* Outer=Z_Construct_UClass_UAbilityTask_WaitOverlap();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnHitCallback"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00C20401, 65535, sizeof(AbilityTask_WaitOverlap_eventOnHitCallback_Parms));
			UProperty* NewProp_Hit = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Hit"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Hit, AbilityTask_WaitOverlap_eventOnHitCallback_Parms), 0x0000008008000182, Z_Construct_UScriptStruct_FHitResult());
			UProperty* NewProp_NormalImpulse = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NormalImpulse"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(NormalImpulse, AbilityTask_WaitOverlap_eventOnHitCallback_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_OtherComp = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OtherComp"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(OtherComp, AbilityTask_WaitOverlap_eventOnHitCallback_Parms), 0x0000000000080080, Z_Construct_UClass_UPrimitiveComponent_NoRegister());
			UProperty* NewProp_OtherActor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OtherActor"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(OtherActor, AbilityTask_WaitOverlap_eventOnHitCallback_Parms), 0x0000000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitOverlap.h"));
			MetaData->SetValue(NewProp_OtherComp, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilityTask_WaitOverlap_OnOverlapCallback()
	{
		struct AbilityTask_WaitOverlap_eventOnOverlapCallback_Parms
		{
			AActor* OtherActor;
			UPrimitiveComponent* OtherComp;
			int32 OtherBodyIndex;
			bool bFromSweep;
			FHitResult SweepResult;
		};
		UObject* Outer=Z_Construct_UClass_UAbilityTask_WaitOverlap();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnOverlapCallback"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00420401, 65535, sizeof(AbilityTask_WaitOverlap_eventOnOverlapCallback_Parms));
			UProperty* NewProp_SweepResult = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SweepResult"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SweepResult, AbilityTask_WaitOverlap_eventOnOverlapCallback_Parms), 0x0000008008000182, Z_Construct_UScriptStruct_FHitResult());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bFromSweep, AbilityTask_WaitOverlap_eventOnOverlapCallback_Parms, bool);
			UProperty* NewProp_bFromSweep = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bFromSweep"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bFromSweep, AbilityTask_WaitOverlap_eventOnOverlapCallback_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bFromSweep, AbilityTask_WaitOverlap_eventOnOverlapCallback_Parms), sizeof(bool), true);
			UProperty* NewProp_OtherBodyIndex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OtherBodyIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(OtherBodyIndex, AbilityTask_WaitOverlap_eventOnOverlapCallback_Parms), 0x0000000000000080);
			UProperty* NewProp_OtherComp = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OtherComp"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(OtherComp, AbilityTask_WaitOverlap_eventOnOverlapCallback_Parms), 0x0000000000080080, Z_Construct_UClass_UPrimitiveComponent_NoRegister());
			UProperty* NewProp_OtherActor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OtherActor"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(OtherActor, AbilityTask_WaitOverlap_eventOnOverlapCallback_Parms), 0x0000000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitOverlap.h"));
			MetaData->SetValue(NewProp_OtherComp, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilityTask_WaitOverlap_WaitForOverlap()
	{
		struct AbilityTask_WaitOverlap_eventWaitForOverlap_Parms
		{
			UObject* WorldContextObject;
			UAbilityTask_WaitOverlap* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilityTask_WaitOverlap();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WaitForOverlap"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(AbilityTask_WaitOverlap_eventWaitForOverlap_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, AbilityTask_WaitOverlap_eventWaitForOverlap_Parms), 0x0000000000000580, Z_Construct_UClass_UAbilityTask_WaitOverlap_NoRegister());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, AbilityTask_WaitOverlap_eventWaitForOverlap_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("TRUE"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|Tasks"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitOverlap.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Wait until an overlap occurs. This will need to be better fleshed out so we can specify game specific collision requirements"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UAbilityTask_WaitOverlap_NoRegister()
	{
		return UAbilityTask_WaitOverlap::StaticClass();
	}
	UClass* Z_Construct_UClass_UAbilityTask_WaitOverlap()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UAbilityTask();
			Z_Construct_UPackage_GameplayAbilities();
			OuterClass = UAbilityTask_WaitOverlap::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880080;

				OuterClass->LinkChild(Z_Construct_UFunction_UAbilityTask_WaitOverlap_OnHitCallback());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilityTask_WaitOverlap_OnOverlapCallback());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilityTask_WaitOverlap_WaitForOverlap());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_OnOverlap = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnOverlap"), RF_Public|RF_Transient|RF_Native) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnOverlap, UAbilityTask_WaitOverlap), 0x0000000010080000, Z_Construct_UDelegateFunction_GameplayAbilities_WaitOverlapDelegate__DelegateSignature());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilityTask_WaitOverlap_OnHitCallback()); // 3677182551
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilityTask_WaitOverlap_OnOverlapCallback()); // 3696311580
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilityTask_WaitOverlap_WaitForOverlap()); // 1813063068
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Abilities/Tasks/AbilityTask_WaitOverlap.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitOverlap.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Fixme: this is still incomplete and probablyh not what most games want for melee systems.\n        -Only actually activates on Blocking hits\n        -Uses first PrimitiveComponent instead of being able to specify arbitrary component."));
				MetaData->SetValue(NewProp_OnOverlap, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitOverlap.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UAbilityTask_WaitOverlap(Z_Construct_UClass_UAbilityTask_WaitOverlap, TEXT("UAbilityTask_WaitOverlap"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UAbilityTask_WaitOverlap);
	UFunction* Z_Construct_UDelegateFunction_GameplayAbilities_WaitTargetDataDelegate__DelegateSignature()
	{
		struct _Script_GameplayAbilities_eventWaitTargetDataDelegate_Parms
		{
			FGameplayAbilityTargetDataHandle Data;
		};
		UObject* Outer=Z_Construct_UPackage_GameplayAbilities();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WaitTargetDataDelegate__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535, sizeof(_Script_GameplayAbilities_eventWaitTargetDataDelegate_Parms));
			UProperty* NewProp_Data = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Data"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Data, _Script_GameplayAbilities_eventWaitTargetDataDelegate_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayAbilityTargetDataHandle());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitTargetData.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilityTask_WaitTargetData_BeginSpawningActor()
	{
		struct AbilityTask_WaitTargetData_eventBeginSpawningActor_Parms
		{
			UObject* WorldContextObject;
			TSubclassOf<AGameplayAbilityTargetActor>  Class;
			AGameplayAbilityTargetActor* SpawnedActor;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilityTask_WaitTargetData();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BeginSpawningActor"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04420401, 65535, sizeof(AbilityTask_WaitTargetData_eventBeginSpawningActor_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, AbilityTask_WaitTargetData_eventBeginSpawningActor_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, AbilityTask_WaitTargetData_eventBeginSpawningActor_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, AbilityTask_WaitTargetData_eventBeginSpawningActor_Parms), sizeof(bool), true);
			UProperty* NewProp_SpawnedActor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SpawnedActor"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(SpawnedActor, AbilityTask_WaitTargetData_eventBeginSpawningActor_Parms), 0x0000000000000180, Z_Construct_UClass_AGameplayAbilityTargetActor_NoRegister());
			UProperty* NewProp_Class = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Class"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(Class, AbilityTask_WaitTargetData_eventBeginSpawningActor_Parms), 0x0004000000000080, Z_Construct_UClass_AGameplayAbilityTargetActor_NoRegister());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, AbilityTask_WaitTargetData_eventBeginSpawningActor_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Abilities"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitTargetData.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilityTask_WaitTargetData_FinishSpawningActor()
	{
		struct AbilityTask_WaitTargetData_eventFinishSpawningActor_Parms
		{
			UObject* WorldContextObject;
			AGameplayAbilityTargetActor* SpawnedActor;
		};
		UObject* Outer=Z_Construct_UClass_UAbilityTask_WaitTargetData();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FinishSpawningActor"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(AbilityTask_WaitTargetData_eventFinishSpawningActor_Parms));
			UProperty* NewProp_SpawnedActor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SpawnedActor"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(SpawnedActor, AbilityTask_WaitTargetData_eventFinishSpawningActor_Parms), 0x0000000000000080, Z_Construct_UClass_AGameplayAbilityTargetActor_NoRegister());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, AbilityTask_WaitTargetData_eventFinishSpawningActor_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Abilities"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitTargetData.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilityTask_WaitTargetData_OnTargetDataCancelledCallback()
	{
		struct AbilityTask_WaitTargetData_eventOnTargetDataCancelledCallback_Parms
		{
			FGameplayAbilityTargetDataHandle Data;
		};
		UObject* Outer=Z_Construct_UClass_UAbilityTask_WaitTargetData();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnTargetDataCancelledCallback"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020401, 65535, sizeof(AbilityTask_WaitTargetData_eventOnTargetDataCancelledCallback_Parms));
			UProperty* NewProp_Data = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Data"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Data, AbilityTask_WaitTargetData_eventOnTargetDataCancelledCallback_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayAbilityTargetDataHandle());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitTargetData.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilityTask_WaitTargetData_OnTargetDataReadyCallback()
	{
		struct AbilityTask_WaitTargetData_eventOnTargetDataReadyCallback_Parms
		{
			FGameplayAbilityTargetDataHandle Data;
		};
		UObject* Outer=Z_Construct_UClass_UAbilityTask_WaitTargetData();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnTargetDataReadyCallback"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020401, 65535, sizeof(AbilityTask_WaitTargetData_eventOnTargetDataReadyCallback_Parms));
			UProperty* NewProp_Data = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Data"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Data, AbilityTask_WaitTargetData_eventOnTargetDataReadyCallback_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayAbilityTargetDataHandle());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitTargetData.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilityTask_WaitTargetData_OnTargetDataReplicatedCallback()
	{
		struct AbilityTask_WaitTargetData_eventOnTargetDataReplicatedCallback_Parms
		{
			FGameplayAbilityTargetDataHandle Data;
			FGameplayTag ActivationTag;
		};
		UObject* Outer=Z_Construct_UClass_UAbilityTask_WaitTargetData();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnTargetDataReplicatedCallback"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020401, 65535, sizeof(AbilityTask_WaitTargetData_eventOnTargetDataReplicatedCallback_Parms));
			UProperty* NewProp_ActivationTag = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActivationTag"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ActivationTag, AbilityTask_WaitTargetData_eventOnTargetDataReplicatedCallback_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayTag());
			UProperty* NewProp_Data = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Data"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Data, AbilityTask_WaitTargetData_eventOnTargetDataReplicatedCallback_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayAbilityTargetDataHandle());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitTargetData.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilityTask_WaitTargetData_OnTargetDataReplicatedCancelledCallback()
	{
		UObject* Outer=Z_Construct_UClass_UAbilityTask_WaitTargetData();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnTargetDataReplicatedCancelledCallback"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitTargetData.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilityTask_WaitTargetData_WaitTargetData()
	{
		struct AbilityTask_WaitTargetData_eventWaitTargetData_Parms
		{
			UObject* WorldContextObject;
			FName TaskInstanceName;
			TEnumAsByte<EGameplayTargetingConfirmation::Type> ConfirmationType;
			TSubclassOf<AGameplayAbilityTargetActor>  Class;
			UAbilityTask_WaitTargetData* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilityTask_WaitTargetData();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WaitTargetData"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(AbilityTask_WaitTargetData_eventWaitTargetData_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, AbilityTask_WaitTargetData_eventWaitTargetData_Parms), 0x0000000000000580, Z_Construct_UClass_UAbilityTask_WaitTargetData_NoRegister());
			UProperty* NewProp_Class = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Class"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(Class, AbilityTask_WaitTargetData_eventWaitTargetData_Parms), 0x0004000000000080, Z_Construct_UClass_AGameplayAbilityTargetActor_NoRegister());
			UProperty* NewProp_ConfirmationType = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ConfirmationType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(ConfirmationType, AbilityTask_WaitTargetData_eventWaitTargetData_Parms), 0x0000000000000080, Z_Construct_UEnum_GameplayAbilities_EGameplayTargetingConfirmation());
			UProperty* NewProp_TaskInstanceName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TaskInstanceName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(TaskInstanceName, AbilityTask_WaitTargetData_eventWaitTargetData_Parms), 0x0000000000000080);
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, AbilityTask_WaitTargetData_eventWaitTargetData_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|Tasks"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("HideSpawnParms"), TEXT("Instigator"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitTargetData.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Spawns target actor and waits for it to return valid data or to be canceled."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilityTask_WaitTargetData_WaitTargetDataUsingActor()
	{
		struct AbilityTask_WaitTargetData_eventWaitTargetDataUsingActor_Parms
		{
			UObject* WorldContextObject;
			FName TaskInstanceName;
			TEnumAsByte<EGameplayTargetingConfirmation::Type> ConfirmationType;
			AGameplayAbilityTargetActor* TargetActor;
			UAbilityTask_WaitTargetData* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilityTask_WaitTargetData();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WaitTargetDataUsingActor"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(AbilityTask_WaitTargetData_eventWaitTargetDataUsingActor_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, AbilityTask_WaitTargetData_eventWaitTargetDataUsingActor_Parms), 0x0000000000000580, Z_Construct_UClass_UAbilityTask_WaitTargetData_NoRegister());
			UProperty* NewProp_TargetActor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TargetActor"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(TargetActor, AbilityTask_WaitTargetData_eventWaitTargetDataUsingActor_Parms), 0x0000000000000080, Z_Construct_UClass_AGameplayAbilityTargetActor_NoRegister());
			UProperty* NewProp_ConfirmationType = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ConfirmationType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(ConfirmationType, AbilityTask_WaitTargetData_eventWaitTargetDataUsingActor_Parms), 0x0000000000000080, Z_Construct_UEnum_GameplayAbilities_EGameplayTargetingConfirmation());
			UProperty* NewProp_TaskInstanceName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TaskInstanceName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(TaskInstanceName, AbilityTask_WaitTargetData_eventWaitTargetDataUsingActor_Parms), 0x0000000000000080);
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, AbilityTask_WaitTargetData_eventWaitTargetDataUsingActor_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|Tasks"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("HideSpawnParms"), TEXT("Instigator"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitTargetData.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Uses specified target actor and waits for it to return valid data or to be canceled."));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UAbilityTask_WaitTargetData_NoRegister()
	{
		return UAbilityTask_WaitTargetData::StaticClass();
	}
	UClass* Z_Construct_UClass_UAbilityTask_WaitTargetData()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UAbilityTask();
			Z_Construct_UPackage_GameplayAbilities();
			OuterClass = UAbilityTask_WaitTargetData::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900280;

				OuterClass->LinkChild(Z_Construct_UFunction_UAbilityTask_WaitTargetData_BeginSpawningActor());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilityTask_WaitTargetData_FinishSpawningActor());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilityTask_WaitTargetData_OnTargetDataCancelledCallback());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilityTask_WaitTargetData_OnTargetDataReadyCallback());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilityTask_WaitTargetData_OnTargetDataReplicatedCallback());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilityTask_WaitTargetData_OnTargetDataReplicatedCancelledCallback());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilityTask_WaitTargetData_WaitTargetData());
				OuterClass->LinkChild(Z_Construct_UFunction_UAbilityTask_WaitTargetData_WaitTargetDataUsingActor());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Cancelled = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Cancelled"), RF_Public|RF_Transient|RF_Native) UMulticastDelegateProperty(CPP_PROPERTY_BASE(Cancelled, UAbilityTask_WaitTargetData), 0x0000000010080000, Z_Construct_UDelegateFunction_GameplayAbilities_WaitTargetDataDelegate__DelegateSignature());
				UProperty* NewProp_ValidData = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ValidData"), RF_Public|RF_Transient|RF_Native) UMulticastDelegateProperty(CPP_PROPERTY_BASE(ValidData, UAbilityTask_WaitTargetData), 0x0000000010080000, Z_Construct_UDelegateFunction_GameplayAbilities_WaitTargetDataDelegate__DelegateSignature());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilityTask_WaitTargetData_BeginSpawningActor()); // 3856986275
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilityTask_WaitTargetData_FinishSpawningActor()); // 3487074318
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilityTask_WaitTargetData_OnTargetDataCancelledCallback()); // 121559383
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilityTask_WaitTargetData_OnTargetDataReadyCallback()); // 655687312
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilityTask_WaitTargetData_OnTargetDataReplicatedCallback()); // 3038685822
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilityTask_WaitTargetData_OnTargetDataReplicatedCancelledCallback()); // 3255064911
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilityTask_WaitTargetData_WaitTargetData()); // 1697299263
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilityTask_WaitTargetData_WaitTargetDataUsingActor()); // 1573535762
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Abilities/Tasks/AbilityTask_WaitTargetData.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitTargetData.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Wait for targeting actor (spawned from parameter) to provide data. Can be set not to end upon outputting data. Can be ended by task name."));
				MetaData->SetValue(NewProp_Cancelled, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitTargetData.h"));
				MetaData->SetValue(NewProp_ValidData, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitTargetData.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UAbilityTask_WaitTargetData(Z_Construct_UClass_UAbilityTask_WaitTargetData, TEXT("UAbilityTask_WaitTargetData"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UAbilityTask_WaitTargetData);
	UFunction* Z_Construct_UDelegateFunction_GameplayAbilities_WaitVelocityChangeDelegate__DelegateSignature()
	{
		UObject* Outer=Z_Construct_UPackage_GameplayAbilities();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WaitVelocityChangeDelegate__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitVelocityChange.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAbilityTask_WaitVelocityChange_CreateWaitVelocityChange()
	{
		struct AbilityTask_WaitVelocityChange_eventCreateWaitVelocityChange_Parms
		{
			UObject* WorldContextObject;
			FVector Direction;
			float MinimumMagnitude;
			UAbilityTask_WaitVelocityChange* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAbilityTask_WaitVelocityChange();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CreateWaitVelocityChange"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04822401, 65535, sizeof(AbilityTask_WaitVelocityChange_eventCreateWaitVelocityChange_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, AbilityTask_WaitVelocityChange_eventCreateWaitVelocityChange_Parms), 0x0000000000000580, Z_Construct_UClass_UAbilityTask_WaitVelocityChange_NoRegister());
			UProperty* NewProp_MinimumMagnitude = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MinimumMagnitude"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MinimumMagnitude, AbilityTask_WaitVelocityChange_eventCreateWaitVelocityChange_Parms), 0x0000000000000080);
			UProperty* NewProp_Direction = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Direction"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Direction, AbilityTask_WaitVelocityChange_eventCreateWaitVelocityChange_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, AbilityTask_WaitVelocityChange_eventCreateWaitVelocityChange_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("TRUE"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Ability|Tasks"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("WaitVelocityChange"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitVelocityChange.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Wait for the actor's movement component velocity to be of minimum magnitude when projected along given direction"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UAbilityTask_WaitVelocityChange_NoRegister()
	{
		return UAbilityTask_WaitVelocityChange::StaticClass();
	}
	UClass* Z_Construct_UClass_UAbilityTask_WaitVelocityChange()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UAbilityTask();
			Z_Construct_UPackage_GameplayAbilities();
			OuterClass = UAbilityTask_WaitVelocityChange::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880080;

				OuterClass->LinkChild(Z_Construct_UFunction_UAbilityTask_WaitVelocityChange_CreateWaitVelocityChange());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_CachedMovementComponent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CachedMovementComponent"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(CachedMovementComponent, UAbilityTask_WaitVelocityChange), 0x0000080000080008, Z_Construct_UClass_UMovementComponent_NoRegister());
				UProperty* NewProp_OnVelocityChage = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnVelocityChage"), RF_Public|RF_Transient|RF_Native) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnVelocityChage, UAbilityTask_WaitVelocityChange), 0x0000000010080000, Z_Construct_UDelegateFunction_GameplayAbilities_WaitVelocityChangeDelegate__DelegateSignature());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAbilityTask_WaitVelocityChange_CreateWaitVelocityChange()); // 999485844
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Abilities/Tasks/AbilityTask_WaitVelocityChange.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitVelocityChange.h"));
				MetaData->SetValue(NewProp_CachedMovementComponent, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_CachedMovementComponent, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitVelocityChange.h"));
				MetaData->SetValue(NewProp_OnVelocityChage, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/Tasks/AbilityTask_WaitVelocityChange.h"));
				MetaData->SetValue(NewProp_OnVelocityChage, TEXT("ToolTip"), TEXT("Delegate called when velocity requirements are met"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UAbilityTask_WaitVelocityChange(Z_Construct_UClass_UAbilityTask_WaitVelocityChange, TEXT("UAbilityTask_WaitVelocityChange"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UAbilityTask_WaitVelocityChange);
	UClass* Z_Construct_UClass_UAbilitySystemTestAttributeSet_NoRegister()
	{
		return UAbilitySystemTestAttributeSet::StaticClass();
	}
	UClass* Z_Construct_UClass_UAbilitySystemTestAttributeSet()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UAttributeSet();
			Z_Construct_UPackage_GameplayAbilities();
			OuterClass = UAbilitySystemTestAttributeSet::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20300080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_NoStackAttribute = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NoStackAttribute"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(NoStackAttribute, UAbilitySystemTestAttributeSet), 0x0000000000000005);
				UProperty* NewProp_StackingAttribute2 = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StackingAttribute2"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(StackingAttribute2, UAbilitySystemTestAttributeSet), 0x0000000000000005);
				UProperty* NewProp_StackingAttribute1 = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StackingAttribute1"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(StackingAttribute1, UAbilitySystemTestAttributeSet), 0x0000000000000005);
				UProperty* NewProp_Strength = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Strength"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Strength, UAbilitySystemTestAttributeSet), 0x0000000000000025);
				UProperty* NewProp_LifeSteal = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LifeSteal"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(LifeSteal, UAbilitySystemTestAttributeSet), 0x0000000000000025);
				UProperty* NewProp_DodgeChance = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DodgeChance"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DodgeChance, UAbilitySystemTestAttributeSet), 0x0000000000000025);
				UProperty* NewProp_ArmorDamageReduction = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ArmorDamageReduction"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ArmorDamageReduction, UAbilitySystemTestAttributeSet), 0x0000000000000025);
				UProperty* NewProp_CritMultiplier = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CritMultiplier"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(CritMultiplier, UAbilitySystemTestAttributeSet), 0x0000000000000025);
				UProperty* NewProp_CritChance = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CritChance"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(CritChance, UAbilitySystemTestAttributeSet), 0x0000000000000025);
				UProperty* NewProp_PhysicalDamage = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PhysicalDamage"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(PhysicalDamage, UAbilitySystemTestAttributeSet), 0x0000000000000025);
				UProperty* NewProp_SpellDamage = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SpellDamage"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(SpellDamage, UAbilitySystemTestAttributeSet), 0x0000000000000025);
				UProperty* NewProp_Damage = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Damage"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Damage, UAbilitySystemTestAttributeSet), 0x0000000000000005);
				UProperty* NewProp_MaxMana = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxMana"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MaxMana, UAbilitySystemTestAttributeSet), 0x0000000000000025);
				UProperty* NewProp_Mana = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Mana"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Mana, UAbilitySystemTestAttributeSet), 0x0000000000000025);
				UProperty* NewProp_Health = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Health"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Health, UAbilitySystemTestAttributeSet), 0x0000000000000025);
				UProperty* NewProp_MaxHealth = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxHealth"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MaxHealth, UAbilitySystemTestAttributeSet), 0x0000000000000025);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("HideInDetailsView"), TEXT(""));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("AbilitySystemTestAttributeSet.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemTestAttributeSet.h"));
				MetaData->SetValue(NewProp_NoStackAttribute, TEXT("Category"), TEXT("AttributeTest"));
				MetaData->SetValue(NewProp_NoStackAttribute, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemTestAttributeSet.h"));
				MetaData->SetValue(NewProp_StackingAttribute2, TEXT("Category"), TEXT("AttributeTest"));
				MetaData->SetValue(NewProp_StackingAttribute2, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemTestAttributeSet.h"));
				MetaData->SetValue(NewProp_StackingAttribute1, TEXT("Category"), TEXT("AttributeTest"));
				MetaData->SetValue(NewProp_StackingAttribute1, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemTestAttributeSet.h"));
				MetaData->SetValue(NewProp_Strength, TEXT("Category"), TEXT("AttributeTest"));
				MetaData->SetValue(NewProp_Strength, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemTestAttributeSet.h"));
				MetaData->SetValue(NewProp_LifeSteal, TEXT("Category"), TEXT("AttributeTest"));
				MetaData->SetValue(NewProp_LifeSteal, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemTestAttributeSet.h"));
				MetaData->SetValue(NewProp_DodgeChance, TEXT("Category"), TEXT("AttributeTest"));
				MetaData->SetValue(NewProp_DodgeChance, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemTestAttributeSet.h"));
				MetaData->SetValue(NewProp_ArmorDamageReduction, TEXT("Category"), TEXT("AttributeTest"));
				MetaData->SetValue(NewProp_ArmorDamageReduction, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemTestAttributeSet.h"));
				MetaData->SetValue(NewProp_CritMultiplier, TEXT("Category"), TEXT("AttributeTest"));
				MetaData->SetValue(NewProp_CritMultiplier, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemTestAttributeSet.h"));
				MetaData->SetValue(NewProp_CritChance, TEXT("Category"), TEXT("AttributeTest"));
				MetaData->SetValue(NewProp_CritChance, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemTestAttributeSet.h"));
				MetaData->SetValue(NewProp_PhysicalDamage, TEXT("Category"), TEXT("AttributeTest"));
				MetaData->SetValue(NewProp_PhysicalDamage, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemTestAttributeSet.h"));
				MetaData->SetValue(NewProp_PhysicalDamage, TEXT("ToolTip"), TEXT("This Attribute is the actual physical damage for this actor. It will power physical based GameplayEffects"));
				MetaData->SetValue(NewProp_SpellDamage, TEXT("Category"), TEXT("AttributeTest"));
				MetaData->SetValue(NewProp_SpellDamage, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemTestAttributeSet.h"));
				MetaData->SetValue(NewProp_SpellDamage, TEXT("ToolTip"), TEXT("This Attribute is the actual spell damage for this actor. It will power spell based GameplayEffects"));
				MetaData->SetValue(NewProp_Damage, TEXT("Category"), TEXT("AttributeTest"));
				MetaData->SetValue(NewProp_Damage, TEXT("HideFromLevelInfos"), TEXT(""));
				MetaData->SetValue(NewProp_Damage, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemTestAttributeSet.h"));
				MetaData->SetValue(NewProp_Damage, TEXT("ToolTip"), TEXT("This Damage is just used for applying negative health mods. Its not a 'persistent' attribute. // You can't make a GameplayEffect 'powered' by Damage (Its transient)"));
				MetaData->SetValue(NewProp_MaxMana, TEXT("Category"), TEXT("AttributeTest"));
				MetaData->SetValue(NewProp_MaxMana, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemTestAttributeSet.h"));
				MetaData->SetValue(NewProp_Mana, TEXT("Category"), TEXT("AttributeTest"));
				MetaData->SetValue(NewProp_Mana, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemTestAttributeSet.h"));
				MetaData->SetValue(NewProp_Health, TEXT("Category"), TEXT("AttributeTest"));
				MetaData->SetValue(NewProp_Health, TEXT("HideFromModifiers"), TEXT(""));
				MetaData->SetValue(NewProp_Health, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemTestAttributeSet.h"));
				MetaData->SetValue(NewProp_Health, TEXT("ToolTip"), TEXT("You can't make a GameplayEffect modify Health Directly (go through)"));
				MetaData->SetValue(NewProp_MaxHealth, TEXT("Category"), TEXT("AttributeTest"));
				MetaData->SetValue(NewProp_MaxHealth, TEXT("HideFromModifiers"), TEXT(""));
				MetaData->SetValue(NewProp_MaxHealth, TEXT("ModuleRelativePath"), TEXT("Public/AbilitySystemTestAttributeSet.h"));
				MetaData->SetValue(NewProp_MaxHealth, TEXT("ToolTip"), TEXT("NOTE ON MUTABLE:\nThis is only done so that UAbilitySystemTestAttributeSet can be initialized directly in GameplayEffectsTest.cpp without doing a const_cast in 100+ places.\nMutable is not required and should never be used on normal attribute sets.\n   // You can't make a GameplayEffect modify Health Directly (go through)"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UAbilitySystemTestAttributeSet(Z_Construct_UClass_UAbilitySystemTestAttributeSet, TEXT("UAbilitySystemTestAttributeSet"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UAbilitySystemTestAttributeSet);
	UClass* Z_Construct_UClass_UGameplayAbility_CharacterJump_NoRegister()
	{
		return UGameplayAbility_CharacterJump::StaticClass();
	}
	UClass* Z_Construct_UClass_UGameplayAbility_CharacterJump()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UGameplayAbility();
			Z_Construct_UPackage_GameplayAbilities();
			OuterClass = UGameplayAbility_CharacterJump::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Abilities/GameplayAbility_CharacterJump.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility_CharacterJump.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Ability that jumps with a character."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UGameplayAbility_CharacterJump(Z_Construct_UClass_UGameplayAbility_CharacterJump, TEXT("UGameplayAbility_CharacterJump"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UGameplayAbility_CharacterJump);
	UClass* Z_Construct_UClass_UGameplayAbility_Montage_NoRegister()
	{
		return UGameplayAbility_Montage::StaticClass();
	}
	UClass* Z_Construct_UClass_UGameplayAbility_Montage()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UGameplayAbility();
			Z_Construct_UPackage_GameplayAbilities();
			OuterClass = UGameplayAbility_Montage::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_GameplayEffectsWhileAnimating = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GameplayEffectsWhileAnimating"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(GameplayEffectsWhileAnimating, UGameplayAbility_Montage), 0x0000000000030001);
				UProperty* NewProp_GameplayEffectsWhileAnimating_Inner = new(EC_InternalUseOnlyConstructor, NewProp_GameplayEffectsWhileAnimating, TEXT("GameplayEffectsWhileAnimating"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000020000, Z_Construct_UClass_UGameplayEffect_NoRegister());
				UProperty* NewProp_GameplayEffectClassesWhileAnimating = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GameplayEffectClassesWhileAnimating"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(GameplayEffectClassesWhileAnimating, UGameplayAbility_Montage), 0x0004000000010001);
				UProperty* NewProp_GameplayEffectClassesWhileAnimating_Inner = new(EC_InternalUseOnlyConstructor, NewProp_GameplayEffectClassesWhileAnimating, TEXT("GameplayEffectClassesWhileAnimating"), RF_Public|RF_Transient|RF_Native) UClassProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0004000000000000, Z_Construct_UClass_UGameplayEffect_NoRegister());
				UProperty* NewProp_SectionName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SectionName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(SectionName, UGameplayAbility_Montage), 0x0000000000010001);
				UProperty* NewProp_PlayRate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PlayRate"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(PlayRate, UGameplayAbility_Montage), 0x0000000000010001);
				UProperty* NewProp_MontageToPlay = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MontageToPlay"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(MontageToPlay, UGameplayAbility_Montage), 0x0000000000010001, Z_Construct_UClass_UAnimMontage_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Abilities/GameplayAbility_Montage.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility_Montage.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("A gameplay ability that plays a single montage and applies a GameplayEffect"));
				MetaData->SetValue(NewProp_GameplayEffectsWhileAnimating, TEXT("Category"), TEXT("Deprecated"));
				MetaData->SetValue(NewProp_GameplayEffectsWhileAnimating, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility_Montage.h"));
				MetaData->SetValue(NewProp_GameplayEffectsWhileAnimating, TEXT("ToolTip"), TEXT("Deprecated. Use GameplayEffectClassesWhileAnimating instead."));
				MetaData->SetValue(NewProp_GameplayEffectClassesWhileAnimating, TEXT("Category"), TEXT("MontageAbility"));
				MetaData->SetValue(NewProp_GameplayEffectClassesWhileAnimating, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility_Montage.h"));
				MetaData->SetValue(NewProp_GameplayEffectClassesWhileAnimating, TEXT("ToolTip"), TEXT("GameplayEffects to apply and then remove while the animation is playing"));
				MetaData->SetValue(NewProp_SectionName, TEXT("Category"), TEXT("MontageAbility"));
				MetaData->SetValue(NewProp_SectionName, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility_Montage.h"));
				MetaData->SetValue(NewProp_PlayRate, TEXT("Category"), TEXT("MontageAbility"));
				MetaData->SetValue(NewProp_PlayRate, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility_Montage.h"));
				MetaData->SetValue(NewProp_MontageToPlay, TEXT("Category"), TEXT("MontageAbility"));
				MetaData->SetValue(NewProp_MontageToPlay, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbility_Montage.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UGameplayAbility_Montage(Z_Construct_UClass_UGameplayAbility_Montage, TEXT("UGameplayAbility_Montage"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UGameplayAbility_Montage);
	UClass* Z_Construct_UClass_UGameplayAbilityBlueprint_NoRegister()
	{
		return UGameplayAbilityBlueprint::StaticClass();
	}
	UClass* Z_Construct_UClass_UGameplayAbilityBlueprint()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBlueprint();
			Z_Construct_UPackage_GameplayAbilities();
			OuterClass = UGameplayAbilityBlueprint::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900084;


				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("GameplayAbilityBlueprint.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/GameplayAbilityBlueprint.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("A Gameplay Ability Blueprint is essentially a specialized Blueprint whose graphs control a gameplay ability.\n    NOTE: This feature is EXPERIMENTAL. Use at your own risk!"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UGameplayAbilityBlueprint(Z_Construct_UClass_UGameplayAbilityBlueprint, TEXT("UGameplayAbilityBlueprint"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UGameplayAbilityBlueprint);
	UClass* Z_Construct_UClass_UGameplayAbilityBlueprintGeneratedClass_NoRegister()
	{
		return UGameplayAbilityBlueprintGeneratedClass::StaticClass();
	}
	UClass* Z_Construct_UClass_UGameplayAbilityBlueprintGeneratedClass()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBlueprintGeneratedClass();
			Z_Construct_UPackage_GameplayAbilities();
			OuterClass = UGameplayAbilityBlueprintGeneratedClass::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("GameplayAbilityBlueprintGeneratedClass.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/GameplayAbilityBlueprintGeneratedClass.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UGameplayAbilityBlueprintGeneratedClass(Z_Construct_UClass_UGameplayAbilityBlueprintGeneratedClass, TEXT("UGameplayAbilityBlueprintGeneratedClass"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UGameplayAbilityBlueprintGeneratedClass);
	UEnum* Z_Construct_UEnum_GameplayAbilities_EGameplayAbilityInputBinds()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UEnum_GameplayAbilities_EGameplayAbilityInputBinds_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EGameplayAbilityInputBinds"), 0, Get_Z_Construct_UEnum_GameplayAbilities_EGameplayAbilityInputBinds_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EGameplayAbilityInputBinds"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayAbilityInputBinds::Ability1")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayAbilityInputBinds::Ability2")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayAbilityInputBinds::Ability3")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayAbilityInputBinds::Ability4")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayAbilityInputBinds::Ability5")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayAbilityInputBinds::Ability6")), 5));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayAbilityInputBinds::Ability7")), 6));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayAbilityInputBinds::Ability8")), 7));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayAbilityInputBinds::Ability9")), 8));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayAbilityInputBinds::EGameplayAbilityInputBinds_MAX")), 9));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("Ability1.DisplayName"), TEXT("Ability1 (LMB)"));
			MetaData->SetValue(ReturnEnum, TEXT("Ability2.DisplayName"), TEXT("Ability2 (RMB)"));
			MetaData->SetValue(ReturnEnum, TEXT("Ability3.DisplayName"), TEXT("Ability3 (Q)"));
			MetaData->SetValue(ReturnEnum, TEXT("Ability4.DisplayName"), TEXT("Ability4 (E)"));
			MetaData->SetValue(ReturnEnum, TEXT("Ability5.DisplayName"), TEXT("Ability5 (R)"));
			MetaData->SetValue(ReturnEnum, TEXT("Ability6.DisplayName"), TEXT("Ability6 (Shift)"));
			MetaData->SetValue(ReturnEnum, TEXT("Ability7.DisplayName"), TEXT("Ability7 (Space)"));
			MetaData->SetValue(ReturnEnum, TEXT("Ability8.DisplayName"), TEXT("Ability8 (B)"));
			MetaData->SetValue(ReturnEnum, TEXT("Ability9.DisplayName"), TEXT("Ability9 (T)"));
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/GameplayAbilitySet.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("This is an example input binding enum for GameplayAbilities. Your project may want to create its own.\nThe MetaData default bind keys (LMB, RMB, Q, E, etc) are a convenience for designers setting up abilities sets\nor whatever other data you have that gives an ability with a default key binding. Actual key binding is up to DefaultInput.ini\n\nE.g., \"Ability1\" is the command string that is bound to AbilitySystemComponent::ActivateAbility(1). The Meta data only *suggests*\nthat you are binding \"Ability1\" to LMB by default in your projects DefaultInput.ini."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_GameplayAbilities_EGameplayAbilityInputBinds_CRC() { return 4221563107U; }
	UScriptStruct* Z_Construct_UScriptStruct_FGameplayAbilityBindInfo()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UScriptStruct_FGameplayAbilityBindInfo_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("GameplayAbilityBindInfo"), sizeof(FGameplayAbilityBindInfo), Get_Z_Construct_UScriptStruct_FGameplayAbilityBindInfo_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GameplayAbilityBindInfo"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FGameplayAbilityBindInfo>, EStructFlags(0x00000001));
			UProperty* NewProp_GameplayAbilityClass = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("GameplayAbilityClass"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(GameplayAbilityClass, FGameplayAbilityBindInfo), 0x0004000000000001, Z_Construct_UClass_UGameplayAbility_NoRegister());
			UProperty* NewProp_Command = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Command"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(Command, FGameplayAbilityBindInfo), 0x0000000000000001, Z_Construct_UEnum_GameplayAbilities_EGameplayAbilityInputBinds());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/GameplayAbilitySet.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Example struct that pairs a enum input command to a GameplayAbilityClass.6"));
			MetaData->SetValue(NewProp_GameplayAbilityClass, TEXT("Category"), TEXT("BindInfo"));
			MetaData->SetValue(NewProp_GameplayAbilityClass, TEXT("ModuleRelativePath"), TEXT("Public/GameplayAbilitySet.h"));
			MetaData->SetValue(NewProp_Command, TEXT("Category"), TEXT("BindInfo"));
			MetaData->SetValue(NewProp_Command, TEXT("ModuleRelativePath"), TEXT("Public/GameplayAbilitySet.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FGameplayAbilityBindInfo_CRC() { return 1584048688U; }
	UClass* Z_Construct_UClass_UGameplayAbilitySet_NoRegister()
	{
		return UGameplayAbilitySet::StaticClass();
	}
	UClass* Z_Construct_UClass_UGameplayAbilitySet()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UDataAsset();
			Z_Construct_UPackage_GameplayAbilities();
			OuterClass = UGameplayAbilitySet::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Abilities = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Abilities"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Abilities, UGameplayAbilitySet), 0x0000000000000001);
				UProperty* NewProp_Abilities_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Abilities, TEXT("Abilities"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FGameplayAbilityBindInfo());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("GameplayAbilitySet.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/GameplayAbilitySet.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("This is an example DataAsset that could be used for defining a set of abilities to give to an AbilitySystemComponent and bind to an input command.\nYour project is free to implement this however it wants!"));
				MetaData->SetValue(NewProp_Abilities, TEXT("Category"), TEXT("AbilitySet"));
				MetaData->SetValue(NewProp_Abilities, TEXT("ModuleRelativePath"), TEXT("Public/GameplayAbilitySet.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UGameplayAbilitySet(Z_Construct_UClass_UGameplayAbilitySet, TEXT("UGameplayAbilitySet"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UGameplayAbilitySet);
	UScriptStruct* Z_Construct_UScriptStruct_FWorldReticleParameters()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UScriptStruct_FWorldReticleParameters_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("WorldReticleParameters"), sizeof(FWorldReticleParameters), Get_Z_Construct_UScriptStruct_FWorldReticleParameters_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WorldReticleParameters"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FWorldReticleParameters>, EStructFlags(0x00000001));
			UProperty* NewProp_AOEScale = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("AOEScale"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(AOEScale, FWorldReticleParameters), 0x0000000000000004, Z_Construct_UScriptStruct_FVector());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityWorldReticle.h"));
			MetaData->SetValue(NewProp_AOEScale, TEXT("Category"), TEXT("Reticle"));
			MetaData->SetValue(NewProp_AOEScale, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityWorldReticle.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FWorldReticleParameters_CRC() { return 792461476U; }
	UFunction* Z_Construct_UFunction_AGameplayAbilityWorldReticle_FaceTowardSource()
	{
		struct GameplayAbilityWorldReticle_eventFaceTowardSource_Parms
		{
			bool bFaceIn2D;
		};
		UObject* Outer=Z_Construct_UClass_AGameplayAbilityWorldReticle();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FaceTowardSource"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(GameplayAbilityWorldReticle_eventFaceTowardSource_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bFaceIn2D, GameplayAbilityWorldReticle_eventFaceTowardSource_Parms, bool);
			UProperty* NewProp_bFaceIn2D = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bFaceIn2D"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bFaceIn2D, GameplayAbilityWorldReticle_eventFaceTowardSource_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bFaceIn2D, GameplayAbilityWorldReticle_eventFaceTowardSource_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Reticle"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityWorldReticle.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AGameplayAbilityWorldReticle_OnParametersInitialized()
	{
		UObject* Outer=Z_Construct_UClass_AGameplayAbilityWorldReticle();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnParametersInitialized"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08020800, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Reticle"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityWorldReticle.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AGameplayAbilityWorldReticle_OnTargetingAnActor()
	{
		UObject* Outer=Z_Construct_UClass_AGameplayAbilityWorldReticle();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnTargetingAnActor"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08020800, 65535, sizeof(GameplayAbilityWorldReticle_eventOnTargetingAnActor_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bNewValue, GameplayAbilityWorldReticle_eventOnTargetingAnActor_Parms, bool);
			UProperty* NewProp_bNewValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bNewValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bNewValue, GameplayAbilityWorldReticle_eventOnTargetingAnActor_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bNewValue, GameplayAbilityWorldReticle_eventOnTargetingAnActor_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Reticle"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityWorldReticle.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Called whenever bIsTargetAnActor changes value."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AGameplayAbilityWorldReticle_OnValidTargetChanged()
	{
		UObject* Outer=Z_Construct_UClass_AGameplayAbilityWorldReticle();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnValidTargetChanged"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08020800, 65535, sizeof(GameplayAbilityWorldReticle_eventOnValidTargetChanged_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bNewValue, GameplayAbilityWorldReticle_eventOnValidTargetChanged_Parms, bool);
			UProperty* NewProp_bNewValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bNewValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bNewValue, GameplayAbilityWorldReticle_eventOnValidTargetChanged_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bNewValue, GameplayAbilityWorldReticle_eventOnValidTargetChanged_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Reticle"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityWorldReticle.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Called whenever bIsTargetValid changes value."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AGameplayAbilityWorldReticle_SetReticleMaterialParamFloat()
	{
		UObject* Outer=Z_Construct_UClass_AGameplayAbilityWorldReticle();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetReticleMaterialParamFloat"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08020800, 65535, sizeof(GameplayAbilityWorldReticle_eventSetReticleMaterialParamFloat_Parms));
			UProperty* NewProp_value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("value"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(value, GameplayAbilityWorldReticle_eventSetReticleMaterialParamFloat_Parms), 0x0000000000000080);
			UProperty* NewProp_ParamName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ParamName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(ParamName, GameplayAbilityWorldReticle_eventSetReticleMaterialParamFloat_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Reticle"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityWorldReticle.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AGameplayAbilityWorldReticle_SetReticleMaterialParamVector()
	{
		UObject* Outer=Z_Construct_UClass_AGameplayAbilityWorldReticle();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetReticleMaterialParamVector"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08820800, 65535, sizeof(GameplayAbilityWorldReticle_eventSetReticleMaterialParamVector_Parms));
			UProperty* NewProp_value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("value"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(value, GameplayAbilityWorldReticle_eventSetReticleMaterialParamVector_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_ParamName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ParamName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(ParamName, GameplayAbilityWorldReticle_eventSetReticleMaterialParamVector_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Reticle"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityWorldReticle.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_AGameplayAbilityWorldReticle_NoRegister()
	{
		return AGameplayAbilityWorldReticle::StaticClass();
	}
	UClass* Z_Construct_UClass_AGameplayAbilityWorldReticle()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AActor();
			Z_Construct_UPackage_GameplayAbilities();
			OuterClass = AGameplayAbilityWorldReticle::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900280;

				OuterClass->LinkChild(Z_Construct_UFunction_AGameplayAbilityWorldReticle_FaceTowardSource());
				OuterClass->LinkChild(Z_Construct_UFunction_AGameplayAbilityWorldReticle_OnParametersInitialized());
				OuterClass->LinkChild(Z_Construct_UFunction_AGameplayAbilityWorldReticle_OnTargetingAnActor());
				OuterClass->LinkChild(Z_Construct_UFunction_AGameplayAbilityWorldReticle_OnValidTargetChanged());
				OuterClass->LinkChild(Z_Construct_UFunction_AGameplayAbilityWorldReticle_SetReticleMaterialParamFloat());
				OuterClass->LinkChild(Z_Construct_UFunction_AGameplayAbilityWorldReticle_SetReticleMaterialParamVector());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_TargetingActor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TargetingActor"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(TargetingActor, AGameplayAbilityWorldReticle), 0x0000080000000014, Z_Construct_UClass_AActor_NoRegister());
				UProperty* NewProp_MasterPC = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MasterPC"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(MasterPC, AGameplayAbilityWorldReticle), 0x0000080000000014, Z_Construct_UClass_APlayerController_NoRegister());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsTargetAnActor, AGameplayAbilityWorldReticle, bool);
				UProperty* NewProp_bIsTargetAnActor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsTargetAnActor"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsTargetAnActor, AGameplayAbilityWorldReticle), 0x0000080000000014, CPP_BOOL_PROPERTY_BITMASK(bIsTargetAnActor, AGameplayAbilityWorldReticle), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsTargetValid, AGameplayAbilityWorldReticle, bool);
				UProperty* NewProp_bIsTargetValid = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsTargetValid"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsTargetValid, AGameplayAbilityWorldReticle), 0x0000080000000014, CPP_BOOL_PROPERTY_BITMASK(bIsTargetValid, AGameplayAbilityWorldReticle), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSnapToTargetedActor, AGameplayAbilityWorldReticle, bool);
				UProperty* NewProp_bSnapToTargetedActor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bSnapToTargetedActor"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSnapToTargetedActor, AGameplayAbilityWorldReticle), 0x0001000000000005, CPP_BOOL_PROPERTY_BITMASK(bSnapToTargetedActor, AGameplayAbilityWorldReticle), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bFaceOwnerFlat, AGameplayAbilityWorldReticle, bool);
				UProperty* NewProp_bFaceOwnerFlat = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bFaceOwnerFlat"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bFaceOwnerFlat, AGameplayAbilityWorldReticle), 0x0001000000000005, CPP_BOOL_PROPERTY_BITMASK(bFaceOwnerFlat, AGameplayAbilityWorldReticle), sizeof(bool), true);
				UProperty* NewProp_Parameters = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Parameters"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Parameters, AGameplayAbilityWorldReticle), 0x0001000000000805, Z_Construct_UScriptStruct_FWorldReticleParameters());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AGameplayAbilityWorldReticle_FaceTowardSource()); // 4171145575
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AGameplayAbilityWorldReticle_OnParametersInitialized()); // 2711375269
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AGameplayAbilityWorldReticle_OnTargetingAnActor()); // 4158424512
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AGameplayAbilityWorldReticle_OnValidTargetChanged()); // 3791149791
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AGameplayAbilityWorldReticle_SetReticleMaterialParamFloat()); // 3035633647
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AGameplayAbilityWorldReticle_SetReticleMaterialParamVector()); // 3664616360
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Abilities/GameplayAbilityWorldReticle.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityWorldReticle.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Reticles allow targeting to be visualized. Tasks can spawn these. Artists/designers can create BPs for these."));
				MetaData->SetValue(NewProp_TargetingActor, TEXT("Category"), TEXT("Network"));
				MetaData->SetValue(NewProp_TargetingActor, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityWorldReticle.h"));
				MetaData->SetValue(NewProp_TargetingActor, TEXT("ToolTip"), TEXT("In the future, we may want to grab things like sockets off of this."));
				MetaData->SetValue(NewProp_MasterPC, TEXT("Category"), TEXT("Network"));
				MetaData->SetValue(NewProp_MasterPC, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityWorldReticle.h"));
				MetaData->SetValue(NewProp_MasterPC, TEXT("ToolTip"), TEXT("This is used in the process of determining whether we should replicate to a specific client."));
				MetaData->SetValue(NewProp_bIsTargetAnActor, TEXT("Category"), TEXT("Network"));
				MetaData->SetValue(NewProp_bIsTargetAnActor, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityWorldReticle.h"));
				MetaData->SetValue(NewProp_bIsTargetAnActor, TEXT("ToolTip"), TEXT("This indicates whether or not the targeting reticle is pointed at an actor. Defaults to false."));
				MetaData->SetValue(NewProp_bIsTargetValid, TEXT("Category"), TEXT("Network"));
				MetaData->SetValue(NewProp_bIsTargetValid, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityWorldReticle.h"));
				MetaData->SetValue(NewProp_bIsTargetValid, TEXT("ToolTip"), TEXT("This indicates whether or not the targeting actor considers the current target to be valid. Defaults to true."));
				MetaData->SetValue(NewProp_bSnapToTargetedActor, TEXT("Category"), TEXT("Reticle"));
				MetaData->SetValue(NewProp_bSnapToTargetedActor, TEXT("ExposeOnSpawn"), TEXT("true"));
				MetaData->SetValue(NewProp_bSnapToTargetedActor, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityWorldReticle.h"));
				MetaData->SetValue(NewProp_bSnapToTargetedActor, TEXT("ToolTip"), TEXT("If the target is an actor snap to it's location"));
				MetaData->SetValue(NewProp_bFaceOwnerFlat, TEXT("Category"), TEXT("Reticle"));
				MetaData->SetValue(NewProp_bFaceOwnerFlat, TEXT("ExposeOnSpawn"), TEXT("true"));
				MetaData->SetValue(NewProp_bFaceOwnerFlat, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityWorldReticle.h"));
				MetaData->SetValue(NewProp_bFaceOwnerFlat, TEXT("ToolTip"), TEXT("Makes the reticle's default owner-facing behavior operate in 2D (flat) instead of 3D (pitched). Defaults to true."));
				MetaData->SetValue(NewProp_Parameters, TEXT("Category"), TEXT("Reticle"));
				MetaData->SetValue(NewProp_Parameters, TEXT("ExposeOnSpawn"), TEXT("true"));
				MetaData->SetValue(NewProp_Parameters, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityWorldReticle.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AGameplayAbilityWorldReticle(Z_Construct_UClass_AGameplayAbilityWorldReticle, TEXT("AGameplayAbilityWorldReticle"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(AGameplayAbilityWorldReticle);
	UEnum* Z_Construct_UEnum_GameplayAbilities_ETargetAbilitySelfSelection()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UEnum_GameplayAbilities_ETargetAbilitySelfSelection_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ETargetAbilitySelfSelection"), 0, Get_Z_Construct_UEnum_GameplayAbilities_ETargetAbilitySelfSelection_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ETargetAbilitySelfSelection"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ETargetAbilitySelfSelection::TASS_Permit")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ETargetAbilitySelfSelection::TASS_Forbid")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ETargetAbilitySelfSelection::TASS_Require")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ETargetAbilitySelfSelection::TASS_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTargetActor.h"));
			MetaData->SetValue(ReturnEnum, TEXT("TASS_Forbid.DisplayName"), TEXT("Forbid self-selection"));
			MetaData->SetValue(ReturnEnum, TEXT("TASS_Permit.DisplayName"), TEXT("Allow self-selection"));
			MetaData->SetValue(ReturnEnum, TEXT("TASS_Require.DisplayName"), TEXT("Force self-selection (add to final data)"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_GameplayAbilities_ETargetAbilitySelfSelection_CRC() { return 4057621307U; }
	UFunction* Z_Construct_UFunction_AGameplayAbilityTargetActor_CancelTargeting()
	{
		UObject* Outer=Z_Construct_UClass_AGameplayAbilityTargetActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CancelTargeting"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020400, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTargetActor.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Outside code is saying 'stop everything and just forget about it'"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AGameplayAbilityTargetActor_ConfirmTargeting()
	{
		UObject* Outer=Z_Construct_UClass_AGameplayAbilityTargetActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ConfirmTargeting"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020400, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTargetActor.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Outside code is saying 'stop and just give me what you have.' Returns true if the ability accepts this and can be forgotten."));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_AGameplayAbilityTargetActor_NoRegister()
	{
		return AGameplayAbilityTargetActor::StaticClass();
	}
	UClass* Z_Construct_UClass_AGameplayAbilityTargetActor()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AActor();
			Z_Construct_UPackage_GameplayAbilities();
			OuterClass = AGameplayAbilityTargetActor::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900281;

				OuterClass->LinkChild(Z_Construct_UFunction_AGameplayAbilityTargetActor_CancelTargeting());
				OuterClass->LinkChild(Z_Construct_UFunction_AGameplayAbilityTargetActor_ConfirmTargeting());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDebug, AGameplayAbilityTargetActor, bool);
				UProperty* NewProp_bDebug = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bDebug"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDebug, AGameplayAbilityTargetActor), 0x0001000000000025, CPP_BOOL_PROPERTY_BITMASK(bDebug, AGameplayAbilityTargetActor), sizeof(bool), true);
				UProperty* NewProp_Filter = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Filter"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Filter, AGameplayAbilityTargetActor), 0x0001000000000024, Z_Construct_UScriptStruct_FGameplayTargetDataFilterHandle());
				UProperty* NewProp_ReticleClass = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ReticleClass"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(ReticleClass, AGameplayAbilityTargetActor), 0x0005000000000005, Z_Construct_UClass_AGameplayAbilityWorldReticle_NoRegister());
				UProperty* NewProp_ReticleParams = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ReticleParams"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReticleParams, AGameplayAbilityTargetActor), 0x0001000000000004, Z_Construct_UScriptStruct_FWorldReticleParameters());
				UProperty* NewProp_SourceActor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SourceActor"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(SourceActor, AGameplayAbilityTargetActor), 0x0000000000000034, Z_Construct_UClass_AActor_NoRegister());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDestroyOnConfirmation, AGameplayAbilityTargetActor, bool);
				UProperty* NewProp_bDestroyOnConfirmation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bDestroyOnConfirmation"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDestroyOnConfirmation, AGameplayAbilityTargetActor), 0x0000000000000034, CPP_BOOL_PROPERTY_BITMASK(bDestroyOnConfirmation, AGameplayAbilityTargetActor), sizeof(bool), true);
				UProperty* NewProp_OwningAbility = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OwningAbility"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(OwningAbility, AGameplayAbilityTargetActor), 0x0000000000000000, Z_Construct_UClass_UGameplayAbility_NoRegister());
				UProperty* NewProp_MasterPC = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MasterPC"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(MasterPC, AGameplayAbilityTargetActor), 0x0000000000000014, Z_Construct_UClass_APlayerController_NoRegister());
				UProperty* NewProp_StartLocation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StartLocation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(StartLocation, AGameplayAbilityTargetActor), 0x0001008000000034, Z_Construct_UScriptStruct_FGameplayAbilityTargetingLocationInfo());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(ShouldProduceTargetDataOnServer, AGameplayAbilityTargetActor, bool);
				UProperty* NewProp_ShouldProduceTargetDataOnServer = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ShouldProduceTargetDataOnServer"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ShouldProduceTargetDataOnServer, AGameplayAbilityTargetActor), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(ShouldProduceTargetDataOnServer, AGameplayAbilityTargetActor), sizeof(bool), true);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AGameplayAbilityTargetActor_CancelTargeting()); // 362740548
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AGameplayAbilityTargetActor_ConfirmTargeting()); // 850426715
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Abilities/GameplayAbilityTargetActor.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTargetActor.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("TargetActors are spawned to assist with ability targeting. They are spawned by ability tasks and create/determine the outgoing targeting data passed from one task to another."));
				MetaData->SetValue(NewProp_bDebug, TEXT("Category"), TEXT("Targeting"));
				MetaData->SetValue(NewProp_bDebug, TEXT("ExposeOnSpawn"), TEXT("TRUE"));
				MetaData->SetValue(NewProp_bDebug, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTargetActor.h"));
				MetaData->SetValue(NewProp_bDebug, TEXT("ToolTip"), TEXT("Draw the debug information (if applicable) for this targeting actor."));
				MetaData->SetValue(NewProp_Filter, TEXT("Category"), TEXT("Targeting"));
				MetaData->SetValue(NewProp_Filter, TEXT("ExposeOnSpawn"), TEXT("TRUE"));
				MetaData->SetValue(NewProp_Filter, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTargetActor.h"));
				MetaData->SetValue(NewProp_Filter, TEXT("ToolTip"), TEXT("Using a special class for replication purposes."));
				MetaData->SetValue(NewProp_ReticleClass, TEXT("Category"), TEXT("Targeting"));
				MetaData->SetValue(NewProp_ReticleClass, TEXT("ExposeOnSpawn"), TEXT("TRUE"));
				MetaData->SetValue(NewProp_ReticleClass, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTargetActor.h"));
				MetaData->SetValue(NewProp_ReticleClass, TEXT("ToolTip"), TEXT("Reticle that will appear on top of acquired targets. Reticles will be spawned/despawned as targets are acquired/lost."));
				MetaData->SetValue(NewProp_ReticleParams, TEXT("Category"), TEXT("Targeting"));
				MetaData->SetValue(NewProp_ReticleParams, TEXT("ExposeOnSpawn"), TEXT("TRUE"));
				MetaData->SetValue(NewProp_ReticleParams, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTargetActor.h"));
				MetaData->SetValue(NewProp_ReticleParams, TEXT("ToolTip"), TEXT("Parameters for world reticle. Usage of these parameters is dependent on the reticle."));
				MetaData->SetValue(NewProp_SourceActor, TEXT("Category"), TEXT("Targeting"));
				MetaData->SetValue(NewProp_SourceActor, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTargetActor.h"));
				MetaData->SetValue(NewProp_bDestroyOnConfirmation, TEXT("Category"), TEXT("Targeting"));
				MetaData->SetValue(NewProp_bDestroyOnConfirmation, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTargetActor.h"));
				MetaData->SetValue(NewProp_OwningAbility, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTargetActor.h"));
				MetaData->SetValue(NewProp_MasterPC, TEXT("Category"), TEXT("Targeting"));
				MetaData->SetValue(NewProp_MasterPC, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTargetActor.h"));
				MetaData->SetValue(NewProp_StartLocation, TEXT("Category"), TEXT("Targeting"));
				MetaData->SetValue(NewProp_StartLocation, TEXT("ExposeOnSpawn"), TEXT("TRUE"));
				MetaData->SetValue(NewProp_StartLocation, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTargetActor.h"));
				MetaData->SetValue(NewProp_StartLocation, TEXT("ToolTip"), TEXT("Describes where the targeting action starts, usually the player character or a socket on the player character. //UPROPERTY(BlueprintReadOnly, meta=(ExposeOnSpawn=true), Category=Targeting)"));
				MetaData->SetValue(NewProp_ShouldProduceTargetDataOnServer, TEXT("Category"), TEXT("Advanced"));
				MetaData->SetValue(NewProp_ShouldProduceTargetDataOnServer, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTargetActor.h"));
				MetaData->SetValue(NewProp_ShouldProduceTargetDataOnServer, TEXT("ToolTip"), TEXT("The TargetData this class produces can be entirely generated on the server. We don't require the client to send us full or partial TargetData (possibly just a 'confirm')"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AGameplayAbilityTargetActor(Z_Construct_UClass_AGameplayAbilityTargetActor, TEXT("AGameplayAbilityTargetActor"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(AGameplayAbilityTargetActor);
	UClass* Z_Construct_UClass_AGameplayAbilityTargetActor_Radius_NoRegister()
	{
		return AGameplayAbilityTargetActor_Radius::StaticClass();
	}
	UClass* Z_Construct_UClass_AGameplayAbilityTargetActor_Radius()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AGameplayAbilityTargetActor();
			Z_Construct_UPackage_GameplayAbilities();
			OuterClass = AGameplayAbilityTargetActor_Radius::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900280;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Radius = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Radius"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Radius, AGameplayAbilityTargetActor_Radius), 0x0001000000000005);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Abilities/GameplayAbilityTargetActor_Radius.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTargetActor_Radius.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Selects everything within a given radius of the source actor."));
				MetaData->SetValue(NewProp_Radius, TEXT("Category"), TEXT("Radius"));
				MetaData->SetValue(NewProp_Radius, TEXT("ExposeOnSpawn"), TEXT("TRUE"));
				MetaData->SetValue(NewProp_Radius, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTargetActor_Radius.h"));
				MetaData->SetValue(NewProp_Radius, TEXT("ToolTip"), TEXT("Radius of target acquisition around the ability's start location."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AGameplayAbilityTargetActor_Radius(Z_Construct_UClass_AGameplayAbilityTargetActor_Radius, TEXT("AGameplayAbilityTargetActor_Radius"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(AGameplayAbilityTargetActor_Radius);
	UClass* Z_Construct_UClass_AGameplayAbilityTargetActor_Trace_NoRegister()
	{
		return AGameplayAbilityTargetActor_Trace::StaticClass();
	}
	UClass* Z_Construct_UClass_AGameplayAbilityTargetActor_Trace()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AGameplayAbilityTargetActor();
			Z_Construct_UPackage_GameplayAbilities();
			OuterClass = AGameplayAbilityTargetActor_Trace::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900285;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTraceAffectsAimPitch, AGameplayAbilityTargetActor_Trace, bool);
				UProperty* NewProp_bTraceAffectsAimPitch = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bTraceAffectsAimPitch"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTraceAffectsAimPitch, AGameplayAbilityTargetActor_Trace), 0x0001000000000005, CPP_BOOL_PROPERTY_BITMASK(bTraceAffectsAimPitch, AGameplayAbilityTargetActor_Trace), sizeof(bool), true);
				UProperty* NewProp_TraceProfile = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TraceProfile"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TraceProfile, AGameplayAbilityTargetActor_Trace), 0x0001000000004005, Z_Construct_UScriptStruct_FCollisionProfileName());
				UProperty* NewProp_MaxRange = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxRange"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MaxRange, AGameplayAbilityTargetActor_Trace), 0x0001000000000005);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("Game"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Abilities/GameplayAbilityTargetActor_Trace.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTargetActor_Trace.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Intermediate base class for all line-trace type targeting actors."));
				MetaData->SetValue(NewProp_bTraceAffectsAimPitch, TEXT("Category"), TEXT("Trace"));
				MetaData->SetValue(NewProp_bTraceAffectsAimPitch, TEXT("ExposeOnSpawn"), TEXT("TRUE"));
				MetaData->SetValue(NewProp_bTraceAffectsAimPitch, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTargetActor_Trace.h"));
				MetaData->SetValue(NewProp_bTraceAffectsAimPitch, TEXT("ToolTip"), TEXT("Does the trace affect the aiming pitch"));
				MetaData->SetValue(NewProp_TraceProfile, TEXT("Category"), TEXT("Trace"));
				MetaData->SetValue(NewProp_TraceProfile, TEXT("ExposeOnSpawn"), TEXT("TRUE"));
				MetaData->SetValue(NewProp_TraceProfile, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTargetActor_Trace.h"));
				MetaData->SetValue(NewProp_MaxRange, TEXT("Category"), TEXT("Trace"));
				MetaData->SetValue(NewProp_MaxRange, TEXT("ExposeOnSpawn"), TEXT("TRUE"));
				MetaData->SetValue(NewProp_MaxRange, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTargetActor_Trace.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AGameplayAbilityTargetActor_Trace(Z_Construct_UClass_AGameplayAbilityTargetActor_Trace, TEXT("AGameplayAbilityTargetActor_Trace"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(AGameplayAbilityTargetActor_Trace);
	UClass* Z_Construct_UClass_AGameplayAbilityTargetActor_GroundTrace_NoRegister()
	{
		return AGameplayAbilityTargetActor_GroundTrace::StaticClass();
	}
	UClass* Z_Construct_UClass_AGameplayAbilityTargetActor_GroundTrace()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AGameplayAbilityTargetActor_Trace();
			Z_Construct_UPackage_GameplayAbilities();
			OuterClass = AGameplayAbilityTargetActor_GroundTrace::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900284;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_CollisionHeight = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CollisionHeight"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(CollisionHeight, AGameplayAbilityTargetActor_GroundTrace), 0x0001000000000005);
				UProperty* NewProp_CollisionRadius = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CollisionRadius"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(CollisionRadius, AGameplayAbilityTargetActor_GroundTrace), 0x0001000000000005);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("Game"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Abilities/GameplayAbilityTargetActor_GroundTrace.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTargetActor_GroundTrace.h"));
				MetaData->SetValue(NewProp_CollisionHeight, TEXT("Category"), TEXT("Targeting"));
				MetaData->SetValue(NewProp_CollisionHeight, TEXT("ExposeOnSpawn"), TEXT("TRUE"));
				MetaData->SetValue(NewProp_CollisionHeight, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTargetActor_GroundTrace.h"));
				MetaData->SetValue(NewProp_CollisionHeight, TEXT("ToolTip"), TEXT("Height for a capsule. Implicitly indicates a capsule is desired if this is greater than zero."));
				MetaData->SetValue(NewProp_CollisionRadius, TEXT("Category"), TEXT("Targeting"));
				MetaData->SetValue(NewProp_CollisionRadius, TEXT("ExposeOnSpawn"), TEXT("TRUE"));
				MetaData->SetValue(NewProp_CollisionRadius, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTargetActor_GroundTrace.h"));
				MetaData->SetValue(NewProp_CollisionRadius, TEXT("ToolTip"), TEXT("Radius for a sphere or capsule."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AGameplayAbilityTargetActor_GroundTrace(Z_Construct_UClass_AGameplayAbilityTargetActor_GroundTrace, TEXT("AGameplayAbilityTargetActor_GroundTrace"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(AGameplayAbilityTargetActor_GroundTrace);
	UClass* Z_Construct_UClass_AGameplayAbilityWorldReticle_ActorVisualization_NoRegister()
	{
		return AGameplayAbilityWorldReticle_ActorVisualization::StaticClass();
	}
	UClass* Z_Construct_UClass_AGameplayAbilityWorldReticle_ActorVisualization()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AGameplayAbilityWorldReticle();
			Z_Construct_UPackage_GameplayAbilities();
			OuterClass = AGameplayAbilityWorldReticle_ActorVisualization::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20800280;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_VisualizationComponents = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VisualizationComponents"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(VisualizationComponents, AGameplayAbilityWorldReticle_ActorVisualization), 0x0000008000000008);
				UProperty* NewProp_VisualizationComponents_Inner = new(EC_InternalUseOnlyConstructor, NewProp_VisualizationComponents, TEXT("VisualizationComponents"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000080008, Z_Construct_UClass_UActorComponent_NoRegister());
				UProperty* NewProp_CollisionComponent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CollisionComponent"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(CollisionComponent, AGameplayAbilityWorldReticle_ActorVisualization), 0x0000000000080008, Z_Construct_UClass_UCapsuleComponent_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Abilities/GameplayAbilityWorldReticle_ActorVisualization.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityWorldReticle_ActorVisualization.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("This is a dummy reticle for internal use by visualization placement tasks. It builds a custom visual model of the visualization being placed."));
				MetaData->SetValue(NewProp_VisualizationComponents, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_VisualizationComponents, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityWorldReticle_ActorVisualization.h"));
				MetaData->SetValue(NewProp_CollisionComponent, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_CollisionComponent, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityWorldReticle_ActorVisualization.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AGameplayAbilityWorldReticle_ActorVisualization(Z_Construct_UClass_AGameplayAbilityWorldReticle_ActorVisualization, TEXT("AGameplayAbilityWorldReticle_ActorVisualization"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(AGameplayAbilityWorldReticle_ActorVisualization);
	UClass* Z_Construct_UClass_AGameplayAbilityTargetActor_ActorPlacement_NoRegister()
	{
		return AGameplayAbilityTargetActor_ActorPlacement::StaticClass();
	}
	UClass* Z_Construct_UClass_AGameplayAbilityTargetActor_ActorPlacement()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AGameplayAbilityTargetActor_GroundTrace();
			Z_Construct_UPackage_GameplayAbilities();
			OuterClass = AGameplayAbilityTargetActor_ActorPlacement::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20800284;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_PlacedActorMaterial = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PlacedActorMaterial"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(PlacedActorMaterial, AGameplayAbilityTargetActor_ActorPlacement), 0x0001000000000005, Z_Construct_UClass_UMaterialInterface_NoRegister());
				UProperty* NewProp_PlacedActorClass = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PlacedActorClass"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(PlacedActorClass, AGameplayAbilityTargetActor_ActorPlacement), 0x0001000000000005, Z_Construct_UClass_UObject_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("Game"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Abilities/GameplayAbilityTargetActor_ActorPlacement.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTargetActor_ActorPlacement.h"));
				MetaData->SetValue(NewProp_PlacedActorMaterial, TEXT("Category"), TEXT("Projectile"));
				MetaData->SetValue(NewProp_PlacedActorMaterial, TEXT("ExposeOnSpawn"), TEXT("TRUE"));
				MetaData->SetValue(NewProp_PlacedActorMaterial, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTargetActor_ActorPlacement.h"));
				MetaData->SetValue(NewProp_PlacedActorMaterial, TEXT("ToolTip"), TEXT("Override Material 0 on our placed actor's meshes with this material for visualization."));
				MetaData->SetValue(NewProp_PlacedActorClass, TEXT("Category"), TEXT("Targeting"));
				MetaData->SetValue(NewProp_PlacedActorClass, TEXT("ExposeOnSpawn"), TEXT("TRUE"));
				MetaData->SetValue(NewProp_PlacedActorClass, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTargetActor_ActorPlacement.h"));
				MetaData->SetValue(NewProp_PlacedActorClass, TEXT("ToolTip"), TEXT("Actor we intend to place."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AGameplayAbilityTargetActor_ActorPlacement(Z_Construct_UClass_AGameplayAbilityTargetActor_ActorPlacement, TEXT("AGameplayAbilityTargetActor_ActorPlacement"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(AGameplayAbilityTargetActor_ActorPlacement);
	UClass* Z_Construct_UClass_AGameplayAbilityTargetActor_SingleLineTrace_NoRegister()
	{
		return AGameplayAbilityTargetActor_SingleLineTrace::StaticClass();
	}
	UClass* Z_Construct_UClass_AGameplayAbilityTargetActor_SingleLineTrace()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AGameplayAbilityTargetActor_Trace();
			Z_Construct_UPackage_GameplayAbilities();
			OuterClass = AGameplayAbilityTargetActor_SingleLineTrace::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900284;


				OuterClass->ClassConfigName = FName(TEXT("Game"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Abilities/GameplayAbilityTargetActor_SingleLineTrace.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Abilities/GameplayAbilityTargetActor_SingleLineTrace.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AGameplayAbilityTargetActor_SingleLineTrace(Z_Construct_UClass_AGameplayAbilityTargetActor_SingleLineTrace, TEXT("AGameplayAbilityTargetActor_SingleLineTrace"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(AGameplayAbilityTargetActor_SingleLineTrace);
	UFunction* Z_Construct_UFunction_AGameplayCueNotify_Actor_K2_HandleGameplayCue()
	{
		UObject* Outer=Z_Construct_UClass_AGameplayCueNotify_Actor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_HandleGameplayCue"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08020800, 65535, sizeof(GameplayCueNotify_Actor_eventK2_HandleGameplayCue_Parms));
			UProperty* NewProp_Parameters = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Parameters"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Parameters, GameplayCueNotify_Actor_eventK2_HandleGameplayCue_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayCueParameters());
			UProperty* NewProp_EventType = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("EventType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(EventType, GameplayCueNotify_Actor_eventK2_HandleGameplayCue_Parms), 0x0000000000000080, Z_Construct_UEnum_GameplayAbilities_EGameplayCueEvent());
			UProperty* NewProp_MyTarget = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MyTarget"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(MyTarget, GameplayCueNotify_Actor_eventK2_HandleGameplayCue_Parms), 0x0000000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("GameplayCueNotify"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("HandleGameplayCue"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/GameplayCueNotify_Actor.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Generic Event Graph event that will get called for every event type"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AGameplayCueNotify_Actor_OnActive()
	{
		UObject* Outer=Z_Construct_UClass_AGameplayCueNotify_Actor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnActive"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08020C00, 65535, sizeof(GameplayCueNotify_Actor_eventOnActive_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, GameplayCueNotify_Actor_eventOnActive_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, GameplayCueNotify_Actor_eventOnActive_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, GameplayCueNotify_Actor_eventOnActive_Parms), sizeof(bool), true);
			UProperty* NewProp_Parameters = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Parameters"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Parameters, GameplayCueNotify_Actor_eventOnActive_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayCueParameters());
			UProperty* NewProp_MyTarget = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MyTarget"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(MyTarget, GameplayCueNotify_Actor_eventOnActive_Parms), 0x0000000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("GameplayCueNotify"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/GameplayCueNotify_Actor.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AGameplayCueNotify_Actor_OnExecute()
	{
		UObject* Outer=Z_Construct_UClass_AGameplayCueNotify_Actor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnExecute"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08020C00, 65535, sizeof(GameplayCueNotify_Actor_eventOnExecute_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, GameplayCueNotify_Actor_eventOnExecute_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, GameplayCueNotify_Actor_eventOnExecute_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, GameplayCueNotify_Actor_eventOnExecute_Parms), sizeof(bool), true);
			UProperty* NewProp_Parameters = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Parameters"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Parameters, GameplayCueNotify_Actor_eventOnExecute_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayCueParameters());
			UProperty* NewProp_MyTarget = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MyTarget"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(MyTarget, GameplayCueNotify_Actor_eventOnExecute_Parms), 0x0000000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("GameplayCueNotify"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/GameplayCueNotify_Actor.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AGameplayCueNotify_Actor_OnOwnerDestroyed()
	{
		UObject* Outer=Z_Construct_UClass_AGameplayCueNotify_Actor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnOwnerDestroyed"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020400, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/GameplayCueNotify_Actor.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AGameplayCueNotify_Actor_OnRemove()
	{
		UObject* Outer=Z_Construct_UClass_AGameplayCueNotify_Actor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnRemove"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08020C00, 65535, sizeof(GameplayCueNotify_Actor_eventOnRemove_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, GameplayCueNotify_Actor_eventOnRemove_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, GameplayCueNotify_Actor_eventOnRemove_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, GameplayCueNotify_Actor_eventOnRemove_Parms), sizeof(bool), true);
			UProperty* NewProp_Parameters = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Parameters"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Parameters, GameplayCueNotify_Actor_eventOnRemove_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayCueParameters());
			UProperty* NewProp_MyTarget = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MyTarget"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(MyTarget, GameplayCueNotify_Actor_eventOnRemove_Parms), 0x0000000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("GameplayCueNotify"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/GameplayCueNotify_Actor.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AGameplayCueNotify_Actor_WhileActive()
	{
		UObject* Outer=Z_Construct_UClass_AGameplayCueNotify_Actor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WhileActive"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08020C00, 65535, sizeof(GameplayCueNotify_Actor_eventWhileActive_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, GameplayCueNotify_Actor_eventWhileActive_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, GameplayCueNotify_Actor_eventWhileActive_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, GameplayCueNotify_Actor_eventWhileActive_Parms), sizeof(bool), true);
			UProperty* NewProp_Parameters = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Parameters"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Parameters, GameplayCueNotify_Actor_eventWhileActive_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayCueParameters());
			UProperty* NewProp_MyTarget = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MyTarget"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(MyTarget, GameplayCueNotify_Actor_eventWhileActive_Parms), 0x0000000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("GameplayCueNotify"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/GameplayCueNotify_Actor.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_AGameplayCueNotify_Actor_NoRegister()
	{
		return AGameplayCueNotify_Actor::StaticClass();
	}
	UClass* Z_Construct_UClass_AGameplayCueNotify_Actor()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AActor();
			Z_Construct_UPackage_GameplayAbilities();
			OuterClass = AGameplayCueNotify_Actor::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_AGameplayCueNotify_Actor_K2_HandleGameplayCue());
				OuterClass->LinkChild(Z_Construct_UFunction_AGameplayCueNotify_Actor_OnActive());
				OuterClass->LinkChild(Z_Construct_UFunction_AGameplayCueNotify_Actor_OnExecute());
				OuterClass->LinkChild(Z_Construct_UFunction_AGameplayCueNotify_Actor_OnOwnerDestroyed());
				OuterClass->LinkChild(Z_Construct_UFunction_AGameplayCueNotify_Actor_OnRemove());
				OuterClass->LinkChild(Z_Construct_UFunction_AGameplayCueNotify_Actor_WhileActive());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUniqueInstancePerSourceObject, AGameplayCueNotify_Actor, bool);
				UProperty* NewProp_bUniqueInstancePerSourceObject = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUniqueInstancePerSourceObject"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUniqueInstancePerSourceObject, AGameplayCueNotify_Actor), 0x0000000000010001, CPP_BOOL_PROPERTY_BITMASK(bUniqueInstancePerSourceObject, AGameplayCueNotify_Actor), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUniqueInstancePerInstigator, AGameplayCueNotify_Actor, bool);
				UProperty* NewProp_bUniqueInstancePerInstigator = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUniqueInstancePerInstigator"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUniqueInstancePerInstigator, AGameplayCueNotify_Actor), 0x0000000000010001, CPP_BOOL_PROPERTY_BITMASK(bUniqueInstancePerInstigator, AGameplayCueNotify_Actor), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsOverride, AGameplayCueNotify_Actor, bool);
				UProperty* NewProp_IsOverride = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("IsOverride"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsOverride, AGameplayCueNotify_Actor), 0x0000000000010001, CPP_BOOL_PROPERTY_BITMASK(IsOverride, AGameplayCueNotify_Actor), sizeof(bool), true);
				UProperty* NewProp_AutoDestroyDelay = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AutoDestroyDelay"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(AutoDestroyDelay, AGameplayCueNotify_Actor), 0x0000000000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAutoDestroyOnRemove, AGameplayCueNotify_Actor, bool);
				UProperty* NewProp_bAutoDestroyOnRemove = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAutoDestroyOnRemove"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAutoDestroyOnRemove, AGameplayCueNotify_Actor), 0x0000000000010001, CPP_BOOL_PROPERTY_BITMASK(bAutoDestroyOnRemove, AGameplayCueNotify_Actor), sizeof(bool), true);
				UProperty* NewProp_GameplayCueName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GameplayCueName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(GameplayCueName, AGameplayCueNotify_Actor), 0x0000010000000000);
				UProperty* NewProp_GameplayCueTag = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GameplayCueTag"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(GameplayCueTag, AGameplayCueNotify_Actor), 0x0000000000010001, Z_Construct_UScriptStruct_FGameplayTag());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AGameplayCueNotify_Actor_K2_HandleGameplayCue()); // 4156805689
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AGameplayCueNotify_Actor_OnActive()); // 856316222
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AGameplayCueNotify_Actor_OnExecute()); // 2112778788
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AGameplayCueNotify_Actor_OnOwnerDestroyed()); // 3079789216
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AGameplayCueNotify_Actor_OnRemove()); // 668674880
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AGameplayCueNotify_Actor_WhileActive()); // 3954282374
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Replication"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("GameplayCueNotify_Actor.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/GameplayCueNotify_Actor.h"));
				MetaData->SetValue(OuterClass, TEXT("ShowWorldContextPin"), TEXT(""));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("A self contained handler of a GameplayCue. These are similiar to AnimNotifies in implementation.\nInstanced GameplayCueNotify which runs arbitrary blueprint code. (TODO: This should be the NON-instanced version!)\n\n\nTODO/Fixme:\n        -Unsure: Leave K2_HandleGameplayCue in as generic function?\n        -OnExecute/Active/Remove are more clear, easy to use. Make it harder to share info between events."));
				MetaData->SetValue(NewProp_bUniqueInstancePerSourceObject, TEXT("Category"), TEXT("GameplayCue"));
				MetaData->SetValue(NewProp_bUniqueInstancePerSourceObject, TEXT("ModuleRelativePath"), TEXT("Public/GameplayCueNotify_Actor.h"));
				MetaData->SetValue(NewProp_bUniqueInstancePerSourceObject, TEXT("ToolTip"), TEXT("Does this cue get a new instance for each source object? For example if two source objects apply a GC to the same source, do we create two of these GameplayCue Notify actors or just one?\nIf the notify is simply playing FX or sounds on the source, it should not need unique instances. If this Notify is attaching a beam from the source object to the target, it does need a unique instance per instigator."));
				MetaData->SetValue(NewProp_bUniqueInstancePerInstigator, TEXT("Category"), TEXT("GameplayCue"));
				MetaData->SetValue(NewProp_bUniqueInstancePerInstigator, TEXT("ModuleRelativePath"), TEXT("Public/GameplayCueNotify_Actor.h"));
				MetaData->SetValue(NewProp_bUniqueInstancePerInstigator, TEXT("ToolTip"), TEXT("Does this cue get a new instance for each instigator? For example if two instigators apply a GC to the same source, do we create two of these GameplayCue Notify actors or just one?\nIf the notify is simply playing FX or sounds on the source, it should not need unique instances. If this Notify is attaching a beam from the instigator to the target, it does need a unique instance per instigator."));
				MetaData->SetValue(NewProp_IsOverride, TEXT("Category"), TEXT("GameplayCue"));
				MetaData->SetValue(NewProp_IsOverride, TEXT("ModuleRelativePath"), TEXT("Public/GameplayCueNotify_Actor.h"));
				MetaData->SetValue(NewProp_IsOverride, TEXT("ToolTip"), TEXT("Does this Cue override other cues, or is it called in addition to them? E.g., If this is Damage.Physical.Slash, we wont call Damage.Physical afer we run this cue."));
				MetaData->SetValue(NewProp_AutoDestroyDelay, TEXT("Category"), TEXT("GameplayCue"));
				MetaData->SetValue(NewProp_AutoDestroyDelay, TEXT("ModuleRelativePath"), TEXT("Public/GameplayCueNotify_Actor.h"));
				MetaData->SetValue(NewProp_AutoDestroyDelay, TEXT("ToolTip"), TEXT("If bAutoDestroyOnRemove is true, the actor will stay alive for this many seconds before being auto destroyed."));
				MetaData->SetValue(NewProp_bAutoDestroyOnRemove, TEXT("Category"), TEXT("GameplayCue"));
				MetaData->SetValue(NewProp_bAutoDestroyOnRemove, TEXT("ModuleRelativePath"), TEXT("Public/GameplayCueNotify_Actor.h"));
				MetaData->SetValue(NewProp_bAutoDestroyOnRemove, TEXT("ToolTip"), TEXT("We will auto destroy this GameplayCueActor when the OnRemove event fires (after OnRemove is called)."));
				MetaData->SetValue(NewProp_GameplayCueName, TEXT("ModuleRelativePath"), TEXT("Public/GameplayCueNotify_Actor.h"));
				MetaData->SetValue(NewProp_GameplayCueName, TEXT("ToolTip"), TEXT("Mirrors GameplayCueTag in order to be asset registry searchable"));
				MetaData->SetValue(NewProp_GameplayCueTag, TEXT("Categories"), TEXT("GameplayCue"));
				MetaData->SetValue(NewProp_GameplayCueTag, TEXT("Category"), TEXT("GameplayCue"));
				MetaData->SetValue(NewProp_GameplayCueTag, TEXT("ModuleRelativePath"), TEXT("Public/GameplayCueNotify_Actor.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AGameplayCueNotify_Actor(Z_Construct_UClass_AGameplayCueNotify_Actor, TEXT("AGameplayCueNotify_Actor"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(AGameplayCueNotify_Actor);
	UEnum* Z_Construct_UEnum_GameplayAbilities_EGameplayCuePayloadType()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UEnum_GameplayAbilities_EGameplayCuePayloadType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EGameplayCuePayloadType"), 0, Get_Z_Construct_UEnum_GameplayAbilities_EGameplayCuePayloadType_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EGameplayCuePayloadType"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayCuePayloadType::EffectContext")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayCuePayloadType::CueParameters")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayCuePayloadType::FromSpec")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayCuePayloadType::EGameplayCuePayloadType_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/GameplayCueManager.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Type of payload to pass along with this cue."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_GameplayAbilities_EGameplayCuePayloadType_CRC() { return 2571591175U; }
	UScriptStruct* Z_Construct_UScriptStruct_FGameplayCuePendingExecute()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UScriptStruct_FGameplayCuePendingExecute_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("GameplayCuePendingExecute"), sizeof(FGameplayCuePendingExecute), Get_Z_Construct_UScriptStruct_FGameplayCuePendingExecute_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GameplayCuePendingExecute"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FGameplayCuePendingExecute>, EStructFlags(0x00000005));
			UProperty* NewProp_CueParameters = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CueParameters"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(CueParameters, FGameplayCuePendingExecute), 0x0000000000000000, Z_Construct_UScriptStruct_FGameplayCueParameters());
			UProperty* NewProp_FromSpec = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("FromSpec"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(FromSpec, FGameplayCuePendingExecute), 0x0000000000000000, Z_Construct_UScriptStruct_FGameplayEffectSpecForRPC());
			UProperty* NewProp_OwningComponent = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("OwningComponent"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(OwningComponent, FGameplayCuePendingExecute), 0x0000000000080008, Z_Construct_UClass_UAbilitySystemComponent_NoRegister());
			UProperty* NewProp_PayloadType = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PayloadType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(PayloadType, FGameplayCuePendingExecute), 0x0000000000000000, Z_Construct_UEnum_GameplayAbilities_EGameplayCuePayloadType());
			UProperty* NewProp_PredictionKey = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PredictionKey"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PredictionKey, FGameplayCuePendingExecute), 0x0000000000000000, Z_Construct_UScriptStruct_FPredictionKey());
			UProperty* NewProp_GameplayCueTag = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("GameplayCueTag"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(GameplayCueTag, FGameplayCuePendingExecute), 0x0000000000000000, Z_Construct_UScriptStruct_FGameplayTag());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/GameplayCueManager.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Structure to keep track of pending gameplay cues that haven't been applied yet."));
			MetaData->SetValue(NewProp_CueParameters, TEXT("ModuleRelativePath"), TEXT("Public/GameplayCueManager.h"));
			MetaData->SetValue(NewProp_CueParameters, TEXT("ToolTip"), TEXT("Store the full cue parameters or just the effect context depending on type"));
			MetaData->SetValue(NewProp_FromSpec, TEXT("ModuleRelativePath"), TEXT("Public/GameplayCueManager.h"));
			MetaData->SetValue(NewProp_FromSpec, TEXT("ToolTip"), TEXT("If this cue is from a spec, here's the copy of that spec"));
			MetaData->SetValue(NewProp_OwningComponent, TEXT("EditInline"), TEXT("true"));
			MetaData->SetValue(NewProp_OwningComponent, TEXT("ModuleRelativePath"), TEXT("Public/GameplayCueManager.h"));
			MetaData->SetValue(NewProp_OwningComponent, TEXT("ToolTip"), TEXT("What component to send the cue on"));
			MetaData->SetValue(NewProp_PayloadType, TEXT("ModuleRelativePath"), TEXT("Public/GameplayCueManager.h"));
			MetaData->SetValue(NewProp_PayloadType, TEXT("ToolTip"), TEXT("What type of payload is attached to this cue"));
			MetaData->SetValue(NewProp_PredictionKey, TEXT("ModuleRelativePath"), TEXT("Public/GameplayCueManager.h"));
			MetaData->SetValue(NewProp_PredictionKey, TEXT("ToolTip"), TEXT("Prediction key that spawned this cue"));
			MetaData->SetValue(NewProp_GameplayCueTag, TEXT("ModuleRelativePath"), TEXT("Public/GameplayCueManager.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FGameplayCuePendingExecute_CRC() { return 1477677620U; }
	UClass* Z_Construct_UClass_UGameplayCueManager_NoRegister()
	{
		return UGameplayCueManager::StaticClass();
	}
	UClass* Z_Construct_UClass_UGameplayCueManager()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UDataAsset();
			Z_Construct_UPackage_GameplayAbilities();
			OuterClass = UGameplayCueManager::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_GameplayCueSendContextCount = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GameplayCueSendContextCount"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(GameplayCueSendContextCount, UGameplayCueManager), 0x0000080000000000);
				UProperty* NewProp_PendingExecuteCues = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PendingExecuteCues"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(PendingExecuteCues, UGameplayCueManager), 0x0000088000000000);
				UProperty* NewProp_PendingExecuteCues_Inner = new(EC_InternalUseOnlyConstructor, NewProp_PendingExecuteCues, TEXT("PendingExecuteCues"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000008000000000, Z_Construct_UScriptStruct_FGameplayCuePendingExecute());
				UProperty* NewProp_StreamableManager = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StreamableManager"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(StreamableManager, UGameplayCueManager), 0x0000000000002000, Z_Construct_UScriptStruct_FStreamableManager());
				UProperty* NewProp_GameplayCueNotifyStaticObjectLibrary = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GameplayCueNotifyStaticObjectLibrary"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(GameplayCueNotifyStaticObjectLibrary, UGameplayCueManager), 0x0000000000002000, Z_Construct_UClass_UObjectLibrary_NoRegister());
				UProperty* NewProp_GameplayCueNotifyActorObjectLibrary = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GameplayCueNotifyActorObjectLibrary"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(GameplayCueNotifyActorObjectLibrary, UGameplayCueManager), 0x0000000000002000, Z_Construct_UClass_UObjectLibrary_NoRegister());
				UProperty* NewProp_GlobalCueSet = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GlobalCueSet"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(GlobalCueSet, UGameplayCueManager), 0x0000000000002000, Z_Construct_UClass_UGameplayCueSet_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("GameplayCueManager.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/GameplayCueManager.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("A self contained handler of a GameplayCue. These are similar to AnimNotifies in implementation."));
				MetaData->SetValue(NewProp_GameplayCueSendContextCount, TEXT("ModuleRelativePath"), TEXT("Public/GameplayCueManager.h"));
				MetaData->SetValue(NewProp_GameplayCueSendContextCount, TEXT("ToolTip"), TEXT("Number of active gameplay cue send contexts, when it goes to 0 cues are flushed"));
				MetaData->SetValue(NewProp_PendingExecuteCues, TEXT("ModuleRelativePath"), TEXT("Public/GameplayCueManager.h"));
				MetaData->SetValue(NewProp_PendingExecuteCues, TEXT("ToolTip"), TEXT("List of gameplay cue executes that haven't been processed yet"));
				MetaData->SetValue(NewProp_StreamableManager, TEXT("ModuleRelativePath"), TEXT("Public/GameplayCueManager.h"));
				MetaData->SetValue(NewProp_GameplayCueNotifyStaticObjectLibrary, TEXT("ModuleRelativePath"), TEXT("Public/GameplayCueManager.h"));
				MetaData->SetValue(NewProp_GameplayCueNotifyActorObjectLibrary, TEXT("ModuleRelativePath"), TEXT("Public/GameplayCueManager.h"));
				MetaData->SetValue(NewProp_GlobalCueSet, TEXT("ModuleRelativePath"), TEXT("Public/GameplayCueManager.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UGameplayCueManager(Z_Construct_UClass_UGameplayCueManager, TEXT("UGameplayCueManager"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UGameplayCueManager);
	UFunction* Z_Construct_UFunction_UGameplayCueNotify_Static_K2_HandleGameplayCue()
	{
		UObject* Outer=Z_Construct_UClass_UGameplayCueNotify_Static();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_HandleGameplayCue"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x48020800, 65535, sizeof(GameplayCueNotify_Static_eventK2_HandleGameplayCue_Parms));
			UProperty* NewProp_Parameters = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Parameters"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Parameters, GameplayCueNotify_Static_eventK2_HandleGameplayCue_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayCueParameters());
			UProperty* NewProp_EventType = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("EventType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(EventType, GameplayCueNotify_Static_eventK2_HandleGameplayCue_Parms), 0x0000000000000080, Z_Construct_UEnum_GameplayAbilities_EGameplayCueEvent());
			UProperty* NewProp_MyTarget = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MyTarget"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(MyTarget, GameplayCueNotify_Static_eventK2_HandleGameplayCue_Parms), 0x0000000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("GameplayCueNotify"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("HandleGameplayCue"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/GameplayCueNotify_Static.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Generic Event Graph event that will get called for every event type"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayCueNotify_Static_OnActive()
	{
		UObject* Outer=Z_Construct_UClass_UGameplayCueNotify_Static();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnActive"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x5C020C00, 65535, sizeof(GameplayCueNotify_Static_eventOnActive_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, GameplayCueNotify_Static_eventOnActive_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, GameplayCueNotify_Static_eventOnActive_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, GameplayCueNotify_Static_eventOnActive_Parms), sizeof(bool), true);
			UProperty* NewProp_Parameters = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Parameters"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Parameters, GameplayCueNotify_Static_eventOnActive_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayCueParameters());
			UProperty* NewProp_MyTarget = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MyTarget"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(MyTarget, GameplayCueNotify_Static_eventOnActive_Parms), 0x0000000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("GameplayCueNotify"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/GameplayCueNotify_Static.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayCueNotify_Static_OnExecute()
	{
		UObject* Outer=Z_Construct_UClass_UGameplayCueNotify_Static();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnExecute"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x5C020C00, 65535, sizeof(GameplayCueNotify_Static_eventOnExecute_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, GameplayCueNotify_Static_eventOnExecute_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, GameplayCueNotify_Static_eventOnExecute_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, GameplayCueNotify_Static_eventOnExecute_Parms), sizeof(bool), true);
			UProperty* NewProp_Parameters = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Parameters"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Parameters, GameplayCueNotify_Static_eventOnExecute_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayCueParameters());
			UProperty* NewProp_MyTarget = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MyTarget"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(MyTarget, GameplayCueNotify_Static_eventOnExecute_Parms), 0x0000000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("GameplayCueNotify"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/GameplayCueNotify_Static.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayCueNotify_Static_OnRemove()
	{
		UObject* Outer=Z_Construct_UClass_UGameplayCueNotify_Static();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnRemove"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x5C020C00, 65535, sizeof(GameplayCueNotify_Static_eventOnRemove_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, GameplayCueNotify_Static_eventOnRemove_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, GameplayCueNotify_Static_eventOnRemove_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, GameplayCueNotify_Static_eventOnRemove_Parms), sizeof(bool), true);
			UProperty* NewProp_Parameters = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Parameters"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Parameters, GameplayCueNotify_Static_eventOnRemove_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayCueParameters());
			UProperty* NewProp_MyTarget = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MyTarget"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(MyTarget, GameplayCueNotify_Static_eventOnRemove_Parms), 0x0000000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("GameplayCueNotify"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/GameplayCueNotify_Static.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayCueNotify_Static_WhileActive()
	{
		UObject* Outer=Z_Construct_UClass_UGameplayCueNotify_Static();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WhileActive"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x5C020C00, 65535, sizeof(GameplayCueNotify_Static_eventWhileActive_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, GameplayCueNotify_Static_eventWhileActive_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, GameplayCueNotify_Static_eventWhileActive_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, GameplayCueNotify_Static_eventWhileActive_Parms), sizeof(bool), true);
			UProperty* NewProp_Parameters = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Parameters"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Parameters, GameplayCueNotify_Static_eventWhileActive_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayCueParameters());
			UProperty* NewProp_MyTarget = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MyTarget"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(MyTarget, GameplayCueNotify_Static_eventWhileActive_Parms), 0x0000000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("GameplayCueNotify"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/GameplayCueNotify_Static.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UGameplayCueNotify_Static_NoRegister()
	{
		return UGameplayCueNotify_Static::StaticClass();
	}
	UClass* Z_Construct_UClass_UGameplayCueNotify_Static()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_GameplayAbilities();
			OuterClass = UGameplayCueNotify_Static::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayCueNotify_Static_K2_HandleGameplayCue());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayCueNotify_Static_OnActive());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayCueNotify_Static_OnExecute());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayCueNotify_Static_OnRemove());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayCueNotify_Static_WhileActive());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsOverride, UGameplayCueNotify_Static, bool);
				UProperty* NewProp_IsOverride = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("IsOverride"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsOverride, UGameplayCueNotify_Static), 0x0000000000010001, CPP_BOOL_PROPERTY_BITMASK(IsOverride, UGameplayCueNotify_Static), sizeof(bool), true);
				UProperty* NewProp_GameplayCueName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GameplayCueName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(GameplayCueName, UGameplayCueNotify_Static), 0x0000010000000000);
				UProperty* NewProp_GameplayCueTag = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GameplayCueTag"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(GameplayCueTag, UGameplayCueNotify_Static), 0x0000000000010001, Z_Construct_UScriptStruct_FGameplayTag());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayCueNotify_Static_K2_HandleGameplayCue()); // 2859947815
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayCueNotify_Static_OnActive()); // 2750913999
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayCueNotify_Static_OnExecute()); // 3429830811
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayCueNotify_Static_OnRemove()); // 2707015426
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayCueNotify_Static_WhileActive()); // 2217010170
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Replication"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("GameplayCueNotify_Static.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/GameplayCueNotify_Static.h"));
				MetaData->SetValue(OuterClass, TEXT("ShowWorldContextPin"), TEXT(""));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("A self contained handler of a GameplayCue. These are similiar to AnimNotifies in implementation.\nInstanced GameplayCueNotify which runs arbitrary blueprint code. (TODO: This should be the NON-instanced version!)\n\n\nTODO/Fixme:\n        -Unsure: Leave K2_HandleGameplayCue in as generic function?\n        -OnExecute/Active/Remove are more clear, easy to use. Make it harder to share info between events."));
				MetaData->SetValue(NewProp_IsOverride, TEXT("Category"), TEXT("GameplayCue"));
				MetaData->SetValue(NewProp_IsOverride, TEXT("ModuleRelativePath"), TEXT("Public/GameplayCueNotify_Static.h"));
				MetaData->SetValue(NewProp_IsOverride, TEXT("ToolTip"), TEXT("Does this Cue override other cues, or is it called in addition to them? E.g., If this is Damage.Physical.Slash, we wont call Damage.Physical afer we run this cue."));
				MetaData->SetValue(NewProp_GameplayCueName, TEXT("ModuleRelativePath"), TEXT("Public/GameplayCueNotify_Static.h"));
				MetaData->SetValue(NewProp_GameplayCueName, TEXT("ToolTip"), TEXT("Mirrors GameplayCueTag in order to be asset registry searchable"));
				MetaData->SetValue(NewProp_GameplayCueTag, TEXT("Categories"), TEXT("GameplayCue"));
				MetaData->SetValue(NewProp_GameplayCueTag, TEXT("Category"), TEXT("GameplayCue"));
				MetaData->SetValue(NewProp_GameplayCueTag, TEXT("ModuleRelativePath"), TEXT("Public/GameplayCueNotify_Static.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UGameplayCueNotify_Static(Z_Construct_UClass_UGameplayCueNotify_Static, TEXT("UGameplayCueNotify_Static"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UGameplayCueNotify_Static);
	UClass* Z_Construct_UClass_UGameplayCueNotify_HitImpact_NoRegister()
	{
		return UGameplayCueNotify_HitImpact::StaticClass();
	}
	UClass* Z_Construct_UClass_UGameplayCueNotify_HitImpact()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UGameplayCueNotify_Static();
			Z_Construct_UPackage_GameplayAbilities();
			OuterClass = UGameplayCueNotify_HitImpact::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ParticleSystem = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ParticleSystem"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ParticleSystem, UGameplayCueNotify_HitImpact), 0x0000000000000005, Z_Construct_UClass_UParticleSystem_NoRegister());
				UProperty* NewProp_Sound = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Sound"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Sound, UGameplayCueNotify_HitImpact), 0x0000000000000005, Z_Construct_UClass_USoundBase_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Replication"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("GameplayCueNotify_HitImpact.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/GameplayCueNotify_HitImpact.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Non instanced GAmeplayCueNotify for spawning particle and sound FX.\nStill WIP - needs to be fleshed out more."));
				MetaData->SetValue(NewProp_ParticleSystem, TEXT("Category"), TEXT("GameplayCue"));
				MetaData->SetValue(NewProp_ParticleSystem, TEXT("ModuleRelativePath"), TEXT("Public/GameplayCueNotify_HitImpact.h"));
				MetaData->SetValue(NewProp_ParticleSystem, TEXT("ToolTip"), TEXT("Effects to play for weapon attacks against specific surfaces"));
				MetaData->SetValue(NewProp_Sound, TEXT("Category"), TEXT("GameplayCue"));
				MetaData->SetValue(NewProp_Sound, TEXT("ModuleRelativePath"), TEXT("Public/GameplayCueNotify_HitImpact.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UGameplayCueNotify_HitImpact(Z_Construct_UClass_UGameplayCueNotify_HitImpact, TEXT("UGameplayCueNotify_HitImpact"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UGameplayCueNotify_HitImpact);
	UScriptStruct* Z_Construct_UScriptStruct_FGameplayCueNotifyData()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UScriptStruct_FGameplayCueNotifyData_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("GameplayCueNotifyData"), sizeof(FGameplayCueNotifyData), Get_Z_Construct_UScriptStruct_FGameplayCueNotifyData_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GameplayCueNotifyData"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FGameplayCueNotifyData>, EStructFlags(0x00000001));
			UProperty* NewProp_LoadedGameplayCueClass = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LoadedGameplayCueClass"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(LoadedGameplayCueClass, FGameplayCueNotifyData), 0x0000000000002000, Z_Construct_UClass_UObject_NoRegister());
			UProperty* NewProp_GameplayCueNotifyObj = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("GameplayCueNotifyObj"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(GameplayCueNotifyObj, FGameplayCueNotifyData), 0x0000000000000001, Z_Construct_UScriptStruct_FStringAssetReference());
			UProperty* NewProp_GameplayCueTag = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("GameplayCueTag"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(GameplayCueTag, FGameplayCueNotifyData), 0x0000000000000001, Z_Construct_UScriptStruct_FGameplayTag());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/GameplayCueSet.h"));
			MetaData->SetValue(NewProp_LoadedGameplayCueClass, TEXT("ModuleRelativePath"), TEXT("Public/GameplayCueSet.h"));
			MetaData->SetValue(NewProp_GameplayCueNotifyObj, TEXT("AllowedClasses"), TEXT("GameplayCueNotify"));
			MetaData->SetValue(NewProp_GameplayCueNotifyObj, TEXT("Category"), TEXT("GameplayCue"));
			MetaData->SetValue(NewProp_GameplayCueNotifyObj, TEXT("ModuleRelativePath"), TEXT("Public/GameplayCueSet.h"));
			MetaData->SetValue(NewProp_GameplayCueTag, TEXT("Category"), TEXT("GameplayCue"));
			MetaData->SetValue(NewProp_GameplayCueTag, TEXT("ModuleRelativePath"), TEXT("Public/GameplayCueSet.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FGameplayCueNotifyData_CRC() { return 1398672804U; }
	UClass* Z_Construct_UClass_UGameplayCueSet_NoRegister()
	{
		return UGameplayCueSet::StaticClass();
	}
	UClass* Z_Construct_UClass_UGameplayCueSet()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UDataAsset();
			Z_Construct_UPackage_GameplayAbilities();
			OuterClass = UGameplayCueSet::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_GameplayCueData = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GameplayCueData"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(GameplayCueData, UGameplayCueSet), 0x0000000000000001);
				UProperty* NewProp_GameplayCueData_Inner = new(EC_InternalUseOnlyConstructor, NewProp_GameplayCueData, TEXT("GameplayCueData"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FGameplayCueNotifyData());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("GameplayCueSet.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/GameplayCueSet.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("A set of gameplay cue actors to handle gameplay cue events"));
				MetaData->SetValue(NewProp_GameplayCueData, TEXT("Category"), TEXT("CueSet"));
				MetaData->SetValue(NewProp_GameplayCueData, TEXT("ModuleRelativePath"), TEXT("Public/GameplayCueSet.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UGameplayCueSet(Z_Construct_UClass_UGameplayCueSet, TEXT("UGameplayCueSet"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UGameplayCueSet);
	UClass* Z_Construct_UClass_UGameplayEffectTemplate_NoRegister()
	{
		return UGameplayEffectTemplate::StaticClass();
	}
	UClass* Z_Construct_UClass_UGameplayEffectTemplate()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UGameplayEffect();
			Z_Construct_UPackage_GameplayAbilities();
			OuterClass = UGameplayEffectTemplate::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20800080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_EditableProperties = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EditableProperties"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(EditableProperties, UGameplayEffectTemplate), 0x0000000800010001);
				UProperty* NewProp_EditableProperties_Inner = new(EC_InternalUseOnlyConstructor, NewProp_EditableProperties, TEXT("EditableProperties"), RF_Public|RF_Transient|RF_Native) UStrProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000800000000);
#endif // WITH_EDITORONLY_DATA
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("GameplayEffectTemplate.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffectTemplate.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("The idea here is that UGameplayEffectTemplates are templates created by system designers for commonly used\nGameplayEffects. For example: StandardPhysicalDamage, StandardSnare, etc.\n\nThis allows for A) Less experienced designers to create new ones based on the templates B) Easier/quicker creation\nof GameplayEffects: don't have to worry about forgeting a tag or stacking rule, etc.\n\nThe template provides:\n        -Default values\n        -What properties are editable by default\n\nDefault values are simply the default values of the UGameplayEffectTemplate (since it is a UGameplayEffect). Whatever values\nare different than CDO values will be copied over when making a new GameplayEffect from a template.\n\nEditableProperties describes what properties should be exposed by default when editing a templated gameplayeffect. This is just\na string list. Properties whose name match strings in that list will be shown, the rest will be hidden. All properties can always be\nseen/edited by just checking \"ShowAllProperties\" on the GameplayEffect itself."));
				MetaData->SetValue(NewProp_EditableProperties, TEXT("Category"), TEXT("Template"));
				MetaData->SetValue(NewProp_EditableProperties, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffectTemplate.h"));
				MetaData->SetValue(NewProp_EditableProperties, TEXT("ToolTip"), TEXT("Names of the properties that should be exposed in the limited/basic view when editing a GameplayEffect based on this template"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UGameplayEffectTemplate(Z_Construct_UClass_UGameplayEffectTemplate, TEXT("UGameplayEffectTemplate"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UGameplayEffectTemplate);
	UScriptStruct* Z_Construct_UScriptStruct_FGameplayEffectCustomExecutionOutput()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UScriptStruct_FGameplayEffectCustomExecutionOutput_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("GameplayEffectCustomExecutionOutput"), sizeof(FGameplayEffectCustomExecutionOutput), Get_Z_Construct_UScriptStruct_FGameplayEffectCustomExecutionOutput_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GameplayEffectCustomExecutionOutput"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FGameplayEffectCustomExecutionOutput>, EStructFlags(0x00000201));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bHandledGameplayCuesManually, FGameplayEffectCustomExecutionOutput, uint8);
			UProperty* NewProp_bHandledGameplayCuesManually = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bHandledGameplayCuesManually"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bHandledGameplayCuesManually, FGameplayEffectCustomExecutionOutput), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bHandledGameplayCuesManually, FGameplayEffectCustomExecutionOutput), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bHandledStackCountManually, FGameplayEffectCustomExecutionOutput, uint8);
			UProperty* NewProp_bHandledStackCountManually = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bHandledStackCountManually"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bHandledStackCountManually, FGameplayEffectCustomExecutionOutput), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bHandledStackCountManually, FGameplayEffectCustomExecutionOutput), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTriggerConditionalGameplayEffects, FGameplayEffectCustomExecutionOutput, uint8);
			UProperty* NewProp_bTriggerConditionalGameplayEffects = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bTriggerConditionalGameplayEffects"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTriggerConditionalGameplayEffects, FGameplayEffectCustomExecutionOutput), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bTriggerConditionalGameplayEffects, FGameplayEffectCustomExecutionOutput), sizeof(uint8), false);
			UProperty* NewProp_OutputModifiers = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("OutputModifiers"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(OutputModifiers, FGameplayEffectCustomExecutionOutput), 0x0000000000000000);
			UProperty* NewProp_OutputModifiers_Inner = new(EC_InternalUseOnlyConstructor, NewProp_OutputModifiers, TEXT("OutputModifiers"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FGameplayModifierEvaluatedData());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffectExecutionCalculation.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Struct representing the output of a custom gameplay effect execution."));
			MetaData->SetValue(NewProp_bHandledGameplayCuesManually, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffectExecutionCalculation.h"));
			MetaData->SetValue(NewProp_bHandledGameplayCuesManually, TEXT("ToolTip"), TEXT("If true, the execution itself has manually invoked all gameplay cues and the GE system doesn't have to automatically handle them."));
			MetaData->SetValue(NewProp_bHandledStackCountManually, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffectExecutionCalculation.h"));
			MetaData->SetValue(NewProp_bHandledStackCountManually, TEXT("ToolTip"), TEXT("If true, the execution itself has manually handled the stack count of the effect and the GE system doesn't have to automatically handle it"));
			MetaData->SetValue(NewProp_bTriggerConditionalGameplayEffects, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffectExecutionCalculation.h"));
			MetaData->SetValue(NewProp_bTriggerConditionalGameplayEffects, TEXT("ToolTip"), TEXT("If true, the execution wants to trigger conditional gameplay effects when it completes"));
			MetaData->SetValue(NewProp_OutputModifiers, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffectExecutionCalculation.h"));
			MetaData->SetValue(NewProp_OutputModifiers, TEXT("ToolTip"), TEXT("Modifiers emitted by the execution"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FGameplayEffectCustomExecutionOutput_CRC() { return 1475971112U; }
	UScriptStruct* Z_Construct_UScriptStruct_FGameplayEffectCustomExecutionParameters()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UScriptStruct_FGameplayEffectCustomExecutionParameters_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("GameplayEffectCustomExecutionParameters"), sizeof(FGameplayEffectCustomExecutionParameters), Get_Z_Construct_UScriptStruct_FGameplayEffectCustomExecutionParameters_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GameplayEffectCustomExecutionParameters"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FGameplayEffectCustomExecutionParameters>, EStructFlags(0x00000201));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffectExecutionCalculation.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Struct representing parameters for a custom gameplay effect execution. Should not be held onto via reference, used just for the scope of the execution"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FGameplayEffectCustomExecutionParameters_CRC() { return 2358637092U; }
	UFunction* Z_Construct_UFunction_UGameplayEffectExecutionCalculation_Execute()
	{
		UObject* Outer=Z_Construct_UClass_UGameplayEffectExecutionCalculation();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Execute"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x48420C00, 65535, sizeof(GameplayEffectExecutionCalculation_eventExecute_Parms));
			UProperty* NewProp_OutExecutionOutput = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutExecutionOutput"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(OutExecutionOutput, GameplayEffectExecutionCalculation_eventExecute_Parms), 0x0000000000000180, Z_Construct_UScriptStruct_FGameplayEffectCustomExecutionOutput());
			UProperty* NewProp_ExecutionParams = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ExecutionParams"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ExecutionParams, GameplayEffectExecutionCalculation_eventExecute_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FGameplayEffectCustomExecutionParameters());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Calculation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffectExecutionCalculation.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Called whenever the owning gameplay effect is executed. Allowed to do essentially whatever is desired, including generating new\nmodifiers to instantly execute as well.\n\n@note: Native subclasses should override the auto-generated Execute_Implementation function and NOT this one.\n\n@param ExecutionParams               Parameters for the custom execution calculation\n@param OutExecutionOutput    [OUT] Output data populated by the execution detailing further behavior or results of the execution"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UGameplayEffectExecutionCalculation_NoRegister()
	{
		return UGameplayEffectExecutionCalculation::StaticClass();
	}
	UClass* Z_Construct_UClass_UGameplayEffectExecutionCalculation()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UGameplayEffectCalculation();
			Z_Construct_UPackage_GameplayAbilities();
			OuterClass = UGameplayEffectExecutionCalculation::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100081;

				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayEffectExecutionCalculation_Execute());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_InvalidScopedModifierAttributes = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InvalidScopedModifierAttributes"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(InvalidScopedModifierAttributes, UGameplayEffectExecutionCalculation), 0x0000080800010001);
				UProperty* NewProp_InvalidScopedModifierAttributes_Inner = new(EC_InternalUseOnlyConstructor, NewProp_InvalidScopedModifierAttributes, TEXT("InvalidScopedModifierAttributes"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000800000000, Z_Construct_UScriptStruct_FGameplayEffectAttributeCaptureDefinition());
#endif // WITH_EDITORONLY_DATA
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bRequiresPassedInTags, UGameplayEffectExecutionCalculation, bool);
				UProperty* NewProp_bRequiresPassedInTags = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bRequiresPassedInTags"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bRequiresPassedInTags, UGameplayEffectExecutionCalculation), 0x0000080000010015, CPP_BOOL_PROPERTY_BITMASK(bRequiresPassedInTags, UGameplayEffectExecutionCalculation), sizeof(bool), true);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayEffectExecutionCalculation_Execute()); // 2553208707
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("GameplayEffectExecutionCalculation.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffectExecutionCalculation.h"));
				MetaData->SetValue(NewProp_InvalidScopedModifierAttributes, TEXT("Category"), TEXT("Attributes"));
				MetaData->SetValue(NewProp_InvalidScopedModifierAttributes, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffectExecutionCalculation.h"));
				MetaData->SetValue(NewProp_InvalidScopedModifierAttributes, TEXT("ToolTip"), TEXT("Any attribute in this list will not show up as a valid option for scoped modifiers; Used to allow attribute capture for internal calculation while preventing modification"));
				MetaData->SetValue(NewProp_bRequiresPassedInTags, TEXT("Category"), TEXT("Attributes"));
				MetaData->SetValue(NewProp_bRequiresPassedInTags, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffectExecutionCalculation.h"));
				MetaData->SetValue(NewProp_bRequiresPassedInTags, TEXT("ToolTip"), TEXT("Used to indicate if this execution uses Passed In Tags"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UGameplayEffectExecutionCalculation(Z_Construct_UClass_UGameplayEffectExecutionCalculation, TEXT("UGameplayEffectExecutionCalculation"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UGameplayEffectExecutionCalculation);
	UFunction* Z_Construct_UFunction_UGameplayModMagnitudeCalculation_CalculateBaseMagnitude()
	{
		UObject* Outer=Z_Construct_UClass_UGameplayModMagnitudeCalculation();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CalculateBaseMagnitude"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x48420C00, 65535, sizeof(GameplayModMagnitudeCalculation_eventCalculateBaseMagnitude_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, GameplayModMagnitudeCalculation_eventCalculateBaseMagnitude_Parms), 0x0000000000000580);
			UProperty* NewProp_Spec = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Spec"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Spec, GameplayModMagnitudeCalculation_eventCalculateBaseMagnitude_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FGameplayEffectSpec());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Calculation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/GameplayModMagnitudeCalculation.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Calculate the base magnitude of the gameplay effect modifier, given the specified spec. Note that the owngin spec def can still modify this base value\nwith a coeffecient and pre/post multiply adds. see FCustomCalculationBasedFloat::CalculateMagnitude for details.\n\n@param Spec  Gameplay effect spec to use to calculate the magnitude with\n\n@return Computed magnitude of the modifier"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UGameplayModMagnitudeCalculation_NoRegister()
	{
		return UGameplayModMagnitudeCalculation::StaticClass();
	}
	UClass* Z_Construct_UClass_UGameplayModMagnitudeCalculation()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UGameplayEffectCalculation();
			Z_Construct_UPackage_GameplayAbilities();
			OuterClass = UGameplayModMagnitudeCalculation::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100081;

				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayModMagnitudeCalculation_CalculateBaseMagnitude());

				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayModMagnitudeCalculation_CalculateBaseMagnitude()); // 791933917
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("GameplayModMagnitudeCalculation.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/GameplayModMagnitudeCalculation.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Class used to perform custom gameplay effect modifier calculations, either via blueprint or native code"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UGameplayModMagnitudeCalculation(Z_Construct_UClass_UGameplayModMagnitudeCalculation, TEXT("UGameplayModMagnitudeCalculation"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UGameplayModMagnitudeCalculation);
	UClass* Z_Construct_UClass_UGameplayEffectExtension_NoRegister()
	{
		return UGameplayEffectExtension::StaticClass();
	}
	UClass* Z_Construct_UClass_UGameplayEffectExtension()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_GameplayAbilities();
			OuterClass = UGameplayEffectExtension::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_RelevantTargetAttributes = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RelevantTargetAttributes"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(RelevantTargetAttributes, UGameplayEffectExtension), 0x0000000000010001);
				UProperty* NewProp_RelevantTargetAttributes_Inner = new(EC_InternalUseOnlyConstructor, NewProp_RelevantTargetAttributes, TEXT("RelevantTargetAttributes"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FGameplayAttribute());
				UProperty* NewProp_RelevantSourceAttributes = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RelevantSourceAttributes"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(RelevantSourceAttributes, UGameplayEffectExtension), 0x0000000000010001);
				UProperty* NewProp_RelevantSourceAttributes_Inner = new(EC_InternalUseOnlyConstructor, NewProp_RelevantSourceAttributes, TEXT("RelevantSourceAttributes"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FGameplayAttribute());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("GameplayEffectExtension.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffectExtension.h"));
				MetaData->SetValue(NewProp_RelevantTargetAttributes, TEXT("Category"), TEXT("Calculation"));
				MetaData->SetValue(NewProp_RelevantTargetAttributes, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffectExtension.h"));
				MetaData->SetValue(NewProp_RelevantTargetAttributes, TEXT("ToolTip"), TEXT("Attributes on the target that are relevant to calculating modifications using this extension"));
				MetaData->SetValue(NewProp_RelevantSourceAttributes, TEXT("Category"), TEXT("Calculation"));
				MetaData->SetValue(NewProp_RelevantSourceAttributes, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffectExtension.h"));
				MetaData->SetValue(NewProp_RelevantSourceAttributes, TEXT("ToolTip"), TEXT("Attributes on the source instigator that are relevant to calculating modifications using this extension"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UGameplayEffectExtension(Z_Construct_UClass_UGameplayEffectExtension, TEXT("UGameplayEffectExtension"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UGameplayEffectExtension);
	UClass* Z_Construct_UClass_UGameplayEffectExtension_LifestealTest_NoRegister()
	{
		return UGameplayEffectExtension_LifestealTest::StaticClass();
	}
	UClass* Z_Construct_UClass_UGameplayEffectExtension_LifestealTest()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UGameplayEffectExtension();
			Z_Construct_UPackage_GameplayAbilities();
			OuterClass = UGameplayEffectExtension_LifestealTest::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_HealthRestoreGameplayEffect = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HealthRestoreGameplayEffect"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(HealthRestoreGameplayEffect, UGameplayEffectExtension_LifestealTest), 0x0000000000010001, Z_Construct_UClass_UGameplayEffect_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("GameplayEffectExtension_LifestealTest.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffectExtension_LifestealTest.h"));
				MetaData->SetValue(NewProp_HealthRestoreGameplayEffect, TEXT("Category"), TEXT("Lifesteal"));
				MetaData->SetValue(NewProp_HealthRestoreGameplayEffect, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffectExtension_LifestealTest.h"));
				MetaData->SetValue(NewProp_HealthRestoreGameplayEffect, TEXT("ToolTip"), TEXT("The GameplayEffect to apply when restoring health to the instigator"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UGameplayEffectExtension_LifestealTest(Z_Construct_UClass_UGameplayEffectExtension_LifestealTest, TEXT("UGameplayEffectExtension_LifestealTest"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UGameplayEffectExtension_LifestealTest);
	UClass* Z_Construct_UClass_UGameplayEffectExtension_ShieldTest_NoRegister()
	{
		return UGameplayEffectExtension_ShieldTest::StaticClass();
	}
	UClass* Z_Construct_UClass_UGameplayEffectExtension_ShieldTest()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UGameplayEffectExtension();
			Z_Construct_UPackage_GameplayAbilities();
			OuterClass = UGameplayEffectExtension_ShieldTest::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ShieldRemoveGameplayEffect = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ShieldRemoveGameplayEffect"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ShieldRemoveGameplayEffect, UGameplayEffectExtension_ShieldTest), 0x0000000000010001, Z_Construct_UClass_UGameplayEffect_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("GameplayEffectExtension_ShieldTest.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffectExtension_ShieldTest.h"));
				MetaData->SetValue(NewProp_ShieldRemoveGameplayEffect, TEXT("Category"), TEXT("Lifesteal"));
				MetaData->SetValue(NewProp_ShieldRemoveGameplayEffect, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffectExtension_ShieldTest.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UGameplayEffectExtension_ShieldTest(Z_Construct_UClass_UGameplayEffectExtension_ShieldTest, TEXT("UGameplayEffectExtension_ShieldTest"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UGameplayEffectExtension_ShieldTest);
	UClass* Z_Construct_UClass_UGameplayEffectUIData_NoRegister()
	{
		return UGameplayEffectUIData::StaticClass();
	}
	UClass* Z_Construct_UClass_UGameplayEffectUIData()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_GameplayAbilities();
			OuterClass = UGameplayEffectUIData::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20103081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("GameplayEffectUIData.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffectUIData.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("UGameplayEffectUIData\nBase class to provide game-specific data about how to describe a Gameplay Effect in the UI. Subclass with data to use in your game."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UGameplayEffectUIData(Z_Construct_UClass_UGameplayEffectUIData, TEXT("UGameplayEffectUIData"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UGameplayEffectUIData);
	UClass* Z_Construct_UClass_UGameplayEffectUIData_TextOnly_NoRegister()
	{
		return UGameplayEffectUIData_TextOnly::StaticClass();
	}
	UClass* Z_Construct_UClass_UGameplayEffectUIData_TextOnly()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UGameplayEffectUIData();
			Z_Construct_UPackage_GameplayAbilities();
			OuterClass = UGameplayEffectUIData_TextOnly::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20003080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Description = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Description"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(Description, UGameplayEffectUIData_TextOnly), 0x0000000000010015);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("GameplayEffectUIData_TextOnly.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffectUIData_TextOnly.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("UI data that contains only text. This is mostly used as an example of a subclass of UGameplayEffectUIData.\nIf your game needs only text, this is a reasonable class to use. To include more data, make a custom subclass of UGameplayEffectUIData."));
				MetaData->SetValue(NewProp_Description, TEXT("Category"), TEXT("Data"));
				MetaData->SetValue(NewProp_Description, TEXT("ModuleRelativePath"), TEXT("Public/GameplayEffectUIData_TextOnly.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UGameplayEffectUIData_TextOnly(Z_Construct_UClass_UGameplayEffectUIData_TextOnly, TEXT("UGameplayEffectUIData_TextOnly"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UGameplayEffectUIData_TextOnly);
	UScriptStruct* Z_Construct_UScriptStruct_FGameplayTagResponseTableEntry()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UScriptStruct_FGameplayTagResponseTableEntry_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("GameplayTagResponseTableEntry"), sizeof(FGameplayTagResponseTableEntry), Get_Z_Construct_UScriptStruct_FGameplayTagResponseTableEntry_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GameplayTagResponseTableEntry"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FGameplayTagResponseTableEntry>, EStructFlags(0x00000001));
			UProperty* NewProp_Negative = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Negative"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Negative, FGameplayTagResponseTableEntry), 0x0000000000000001, Z_Construct_UScriptStruct_FGameplayTagReponsePair());
			UProperty* NewProp_Positive = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Positive"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Positive, FGameplayTagResponseTableEntry), 0x0000000000000001, Z_Construct_UScriptStruct_FGameplayTagReponsePair());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/GameplayTagResponseTable.h"));
			MetaData->SetValue(NewProp_Negative, TEXT("Category"), TEXT("Response"));
			MetaData->SetValue(NewProp_Negative, TEXT("ModuleRelativePath"), TEXT("Public/GameplayTagResponseTable.h"));
			MetaData->SetValue(NewProp_Negative, TEXT("ToolTip"), TEXT("Tags that count as \"negative\" toward to final response count. If the overall count is negative, this ResponseGameplayEffect is applied."));
			MetaData->SetValue(NewProp_Positive, TEXT("Category"), TEXT("Response"));
			MetaData->SetValue(NewProp_Positive, TEXT("ModuleRelativePath"), TEXT("Public/GameplayTagResponseTable.h"));
			MetaData->SetValue(NewProp_Positive, TEXT("ToolTip"), TEXT("Tags that count as \"positive\" toward to final response count. If the overall count is positive, this ResponseGameplayEffect is applied."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FGameplayTagResponseTableEntry_CRC() { return 3436678025U; }
	UScriptStruct* Z_Construct_UScriptStruct_FGameplayTagReponsePair()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayAbilities();
		extern uint32 Get_Z_Construct_UScriptStruct_FGameplayTagReponsePair_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("GameplayTagReponsePair"), sizeof(FGameplayTagReponsePair), Get_Z_Construct_UScriptStruct_FGameplayTagReponsePair_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GameplayTagReponsePair"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FGameplayTagReponsePair>, EStructFlags(0x00000001));
			UProperty* NewProp_ResponseGameplayEffect = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ResponseGameplayEffect"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(ResponseGameplayEffect, FGameplayTagReponsePair), 0x0004000000000001, Z_Construct_UClass_UGameplayEffect_NoRegister());
			UProperty* NewProp_Tag = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Tag"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Tag, FGameplayTagReponsePair), 0x0000000000000001, Z_Construct_UScriptStruct_FGameplayTag());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/GameplayTagResponseTable.h"));
			MetaData->SetValue(NewProp_ResponseGameplayEffect, TEXT("Category"), TEXT("Response"));
			MetaData->SetValue(NewProp_ResponseGameplayEffect, TEXT("ModuleRelativePath"), TEXT("Public/GameplayTagResponseTable.h"));
			MetaData->SetValue(NewProp_ResponseGameplayEffect, TEXT("ToolTip"), TEXT("The GameplayEffect to apply in reponse to the tag"));
			MetaData->SetValue(NewProp_Tag, TEXT("Category"), TEXT("Response"));
			MetaData->SetValue(NewProp_Tag, TEXT("ModuleRelativePath"), TEXT("Public/GameplayTagResponseTable.h"));
			MetaData->SetValue(NewProp_Tag, TEXT("ToolTip"), TEXT("Tag that triggers this response"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FGameplayTagReponsePair_CRC() { return 2574688332U; }
	UFunction* Z_Construct_UFunction_UGameplayTagReponseTable_TagResponseEvent()
	{
		struct GameplayTagReponseTable_eventTagResponseEvent_Parms
		{
			FGameplayTag Tag;
			int32 NewCount;
			UAbilitySystemComponent* ASC;
			int32 idx;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayTagReponseTable();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TagResponseEvent"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00080401, 65535, sizeof(GameplayTagReponseTable_eventTagResponseEvent_Parms));
			UProperty* NewProp_idx = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("idx"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(idx, GameplayTagReponseTable_eventTagResponseEvent_Parms), 0x0000000000000080);
			UProperty* NewProp_ASC = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ASC"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ASC, GameplayTagReponseTable_eventTagResponseEvent_Parms), 0x0000000000080080, Z_Construct_UClass_UAbilitySystemComponent_NoRegister());
			UProperty* NewProp_NewCount = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewCount"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(NewCount, GameplayTagReponseTable_eventTagResponseEvent_Parms), 0x0000000000000080);
			UProperty* NewProp_Tag = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Tag"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Tag, GameplayTagReponseTable_eventTagResponseEvent_Parms), 0x0000000000000082, Z_Construct_UScriptStruct_FGameplayTag());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/GameplayTagResponseTable.h"));
			MetaData->SetValue(NewProp_ASC, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UGameplayTagReponseTable_NoRegister()
	{
		return UGameplayTagReponseTable::StaticClass();
	}
	UClass* Z_Construct_UClass_UGameplayTagReponseTable()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UDataAsset();
			Z_Construct_UPackage_GameplayAbilities();
			OuterClass = UGameplayTagReponseTable::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayTagReponseTable_TagResponseEvent());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Entries = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Entries"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Entries, UGameplayTagReponseTable), 0x0000000000000001);
				UProperty* NewProp_Entries_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Entries, TEXT("Entries"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FGameplayTagResponseTableEntry());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayTagReponseTable_TagResponseEvent()); // 387944429
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("GameplayTagResponseTable.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/GameplayTagResponseTable.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("A data driven table for applying gameplay effects based on tag count. This allows designers to map a\n\"tag count\" -> \"response Gameplay Effect\" relationship.\n\nFor example, \"for every stack of \"Status.Haste\" I get 1 level of GE_Response_Haste. This class facilitates\nbuilding this table and automatically registering and responding to tag events on the ability system component."));
				MetaData->SetValue(NewProp_Entries, TEXT("Category"), TEXT("Response"));
				MetaData->SetValue(NewProp_Entries, TEXT("ModuleRelativePath"), TEXT("Public/GameplayTagResponseTable.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UGameplayTagReponseTable(Z_Construct_UClass_UGameplayTagReponseTable, TEXT("UGameplayTagReponseTable"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UGameplayTagReponseTable);
	UClass* Z_Construct_UClass_UTickableAttributeSetInterface_NoRegister()
	{
		return UTickableAttributeSetInterface::StaticClass();
	}
	UClass* Z_Construct_UClass_UTickableAttributeSetInterface()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			UInterface::StaticClass();
			Z_Construct_UPackage_GameplayAbilities();
			OuterClass = UTickableAttributeSetInterface::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20084081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("CannotImplementInterfaceInBlueprint"), TEXT(""));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UTickableAttributeSetInterface(Z_Construct_UClass_UTickableAttributeSetInterface, TEXT("UTickableAttributeSetInterface"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UTickableAttributeSetInterface);
	UPackage* Z_Construct_UPackage_GameplayAbilities()
	{
		static UPackage* ReturnPackage = NULL;
		if (!ReturnPackage)
		{
			ReturnPackage = CastChecked<UPackage>(StaticFindObjectFast(UPackage::StaticClass(), NULL, FName(TEXT("/Script/GameplayAbilities")), false, false));
			ReturnPackage->SetPackageFlags(PKG_CompiledIn | 0x00000000);
			FGuid Guid;
			Guid.A = 0x373281B7;
			Guid.B = 0x0A667F9B;
			Guid.C = 0x00000000;
			Guid.D = 0x00000000;
			ReturnPackage->SetGuid(Guid);

			Z_Construct_UDelegateFunction_GameplayAbilities_ActiveGameplayEffectQueryCustomMatch_Dynamic__DelegateSignature();
			Z_Construct_UDelegateFunction_UAbilitySystemComponent_AbilityAbilityKey__DelegateSignature();
			Z_Construct_UDelegateFunction_UAbilitySystemComponent_AbilityConfirmOrCancel__DelegateSignature();
			Z_Construct_UDelegateFunction_GameplayAbilities_MoveToLocationDelegate__DelegateSignature();
			Z_Construct_UDelegateFunction_GameplayAbilities_NetworkSyncDelegate__DelegateSignature();
			Z_Construct_UDelegateFunction_GameplayAbilities_MontageWaitSimpleDelegate__DelegateSignature();
			Z_Construct_UDelegateFunction_GameplayAbilities_RepeatedActionDelegate__DelegateSignature();
			Z_Construct_UDelegateFunction_GameplayAbilities_SpawnActorDelegate__DelegateSignature();
			Z_Construct_UDelegateFunction_GameplayAbilities_AbilityStateDelegate__DelegateSignature();
			Z_Construct_UDelegateFunction_GameplayAbilities_VisualizeTargetingDelegate__DelegateSignature();
			Z_Construct_UDelegateFunction_GameplayAbilities_WaitAbilityActivateDelegate__DelegateSignature();
			Z_Construct_UDelegateFunction_GameplayAbilities_WaitAbilityCommitDelegate__DelegateSignature();
			Z_Construct_UDelegateFunction_GameplayAbilities_WaitAttributeChangeDelegate__DelegateSignature();
			Z_Construct_UDelegateFunction_GameplayAbilities_WaitCancelDelegate__DelegateSignature();
			Z_Construct_UDelegateFunction_GameplayAbilities_WaitConfirmCancelDelegate__DelegateSignature();
			Z_Construct_UDelegateFunction_GameplayAbilities_WaitDelayDelegate__DelegateSignature();
			Z_Construct_UDelegateFunction_GameplayAbilities_GameplayEffectAppliedSelfDelegate__DelegateSignature();
			Z_Construct_UDelegateFunction_GameplayAbilities_GameplayEffectAppliedTargetDelegate__DelegateSignature();
			Z_Construct_UDelegateFunction_GameplayAbilities_WaitGameplayEffectRemovedDelegate__DelegateSignature();
			Z_Construct_UDelegateFunction_GameplayAbilities_WaitGameplayTagDelegate__DelegateSignature();
			Z_Construct_UDelegateFunction_GameplayAbilities_InputPressDelegate__DelegateSignature();
			Z_Construct_UDelegateFunction_GameplayAbilities_InputReleaseDelegate__DelegateSignature();
			Z_Construct_UDelegateFunction_GameplayAbilities_MovementModeChangedDelegate__DelegateSignature();
			Z_Construct_UDelegateFunction_GameplayAbilities_WaitOverlapDelegate__DelegateSignature();
			Z_Construct_UDelegateFunction_GameplayAbilities_WaitTargetDataDelegate__DelegateSignature();
			Z_Construct_UDelegateFunction_GameplayAbilities_WaitVelocityChangeDelegate__DelegateSignature();
		}
		return ReturnPackage;
	}
#endif

PRAGMA_ENABLE_DEPRECATION_WARNINGS
