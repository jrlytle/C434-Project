// Copyright 1998-2015 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Boilerplate C++ definitions for a single module.
	This is automatically generated by UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "Private/GameplayTagsModulePrivatePCH.h"
#include "GameplayTags.generated.dep.h"
PRAGMA_DISABLE_DEPRECATION_WARNINGS
void EmptyLinkFunctionForGeneratedCodeGameplayTags() {}
static class UEnum* EGameplayTagQueryExprType_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYTAGS_API class UEnum* Z_Construct_UEnum_GameplayTags_EGameplayTagQueryExprType();
		extern GAMEPLAYTAGS_API class UPackage* Z_Construct_UPackage_GameplayTags();
		Singleton = GetStaticEnum(Z_Construct_UEnum_GameplayTags_EGameplayTagQueryExprType, Z_Construct_UPackage_GameplayTags(), TEXT("EGameplayTagQueryExprType"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EGameplayTagQueryExprType(EGameplayTagQueryExprType_StaticEnum, TEXT("/Script/GameplayTags"));
static class UEnum* EGameplayContainerMatchType_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYTAGS_API class UEnum* Z_Construct_UEnum_GameplayTags_EGameplayContainerMatchType();
		extern GAMEPLAYTAGS_API class UPackage* Z_Construct_UPackage_GameplayTags();
		Singleton = GetStaticEnum(Z_Construct_UEnum_GameplayTags_EGameplayContainerMatchType, Z_Construct_UPackage_GameplayTags(), TEXT("EGameplayContainerMatchType"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EGameplayContainerMatchType(EGameplayContainerMatchType_StaticEnum, TEXT("/Script/GameplayTags"));
static class UEnum* EGameplayTagMatchType_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYTAGS_API class UEnum* Z_Construct_UEnum_GameplayTags_EGameplayTagMatchType();
		extern GAMEPLAYTAGS_API class UPackage* Z_Construct_UPackage_GameplayTags();
		Singleton = GetStaticEnum(Z_Construct_UEnum_GameplayTags_EGameplayTagMatchType, Z_Construct_UPackage_GameplayTags(), TEXT("EGameplayTagMatchType"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EGameplayTagMatchType(EGameplayTagMatchType_StaticEnum, TEXT("/Script/GameplayTags"));
class UScriptStruct* FGameplayTagQuery::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYTAGS_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayTagQuery();
		extern GAMEPLAYTAGS_API uint32 Get_Z_Construct_UScriptStruct_FGameplayTagQuery_CRC();
		extern GAMEPLAYTAGS_API class UPackage* Z_Construct_UPackage_GameplayTags();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FGameplayTagQuery, Z_Construct_UPackage_GameplayTags(), TEXT("GameplayTagQuery"), sizeof(FGameplayTagQuery), Get_Z_Construct_UScriptStruct_FGameplayTagQuery_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FGameplayTagQuery(FGameplayTagQuery::StaticStruct, TEXT("/Script/GameplayTags"));
static struct FScriptStruct_GameplayTags_StaticRegisterNativesFGameplayTagQuery
{
	FScriptStruct_GameplayTags_StaticRegisterNativesFGameplayTagQuery()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("GameplayTagQuery")),new UScriptStruct::TCppStructOps<FGameplayTagQuery>);
	}
} ScriptStruct_GameplayTags_StaticRegisterNativesFGameplayTagQuery;
class UScriptStruct* FGameplayTagContainer::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYTAGS_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayTagContainer();
		extern GAMEPLAYTAGS_API uint32 Get_Z_Construct_UScriptStruct_FGameplayTagContainer_CRC();
		extern GAMEPLAYTAGS_API class UPackage* Z_Construct_UPackage_GameplayTags();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FGameplayTagContainer, Z_Construct_UPackage_GameplayTags(), TEXT("GameplayTagContainer"), sizeof(FGameplayTagContainer), Get_Z_Construct_UScriptStruct_FGameplayTagContainer_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FGameplayTagContainer(FGameplayTagContainer::StaticStruct, TEXT("/Script/GameplayTags"));
static struct FScriptStruct_GameplayTags_StaticRegisterNativesFGameplayTagContainer
{
	FScriptStruct_GameplayTags_StaticRegisterNativesFGameplayTagContainer()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("GameplayTagContainer")),new UScriptStruct::TCppStructOps<FGameplayTagContainer>);
	}
} ScriptStruct_GameplayTags_StaticRegisterNativesFGameplayTagContainer;
class UScriptStruct* FGameplayTag::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYTAGS_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayTag();
		extern GAMEPLAYTAGS_API uint32 Get_Z_Construct_UScriptStruct_FGameplayTag_CRC();
		extern GAMEPLAYTAGS_API class UPackage* Z_Construct_UPackage_GameplayTags();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FGameplayTag, Z_Construct_UPackage_GameplayTags(), TEXT("GameplayTag"), sizeof(FGameplayTag), Get_Z_Construct_UScriptStruct_FGameplayTag_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FGameplayTag(FGameplayTag::StaticStruct, TEXT("/Script/GameplayTags"));
static struct FScriptStruct_GameplayTags_StaticRegisterNativesFGameplayTag
{
	FScriptStruct_GameplayTags_StaticRegisterNativesFGameplayTag()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("GameplayTag")),new UScriptStruct::TCppStructOps<FGameplayTag>);
	}
} ScriptStruct_GameplayTags_StaticRegisterNativesFGameplayTag;
	void UEditableGameplayTagQuery::StaticRegisterNativesUEditableGameplayTagQuery()
	{
	}
	IMPLEMENT_CLASS(UEditableGameplayTagQuery, 1035385213);
	void UEditableGameplayTagQueryExpression::StaticRegisterNativesUEditableGameplayTagQueryExpression()
	{
	}
	IMPLEMENT_CLASS(UEditableGameplayTagQueryExpression, 3799718889);
	void UEditableGameplayTagQueryExpression_AnyTagsMatch::StaticRegisterNativesUEditableGameplayTagQueryExpression_AnyTagsMatch()
	{
	}
	IMPLEMENT_CLASS(UEditableGameplayTagQueryExpression_AnyTagsMatch, 997264302);
	void UEditableGameplayTagQueryExpression_AllTagsMatch::StaticRegisterNativesUEditableGameplayTagQueryExpression_AllTagsMatch()
	{
	}
	IMPLEMENT_CLASS(UEditableGameplayTagQueryExpression_AllTagsMatch, 477490525);
	void UEditableGameplayTagQueryExpression_NoTagsMatch::StaticRegisterNativesUEditableGameplayTagQueryExpression_NoTagsMatch()
	{
	}
	IMPLEMENT_CLASS(UEditableGameplayTagQueryExpression_NoTagsMatch, 781241633);
	void UEditableGameplayTagQueryExpression_AnyExprMatch::StaticRegisterNativesUEditableGameplayTagQueryExpression_AnyExprMatch()
	{
	}
	IMPLEMENT_CLASS(UEditableGameplayTagQueryExpression_AnyExprMatch, 2157481710);
	void UEditableGameplayTagQueryExpression_AllExprMatch::StaticRegisterNativesUEditableGameplayTagQueryExpression_AllExprMatch()
	{
	}
	IMPLEMENT_CLASS(UEditableGameplayTagQueryExpression_AllExprMatch, 514967419);
	void UEditableGameplayTagQueryExpression_NoExprMatch::StaticRegisterNativesUEditableGameplayTagQueryExpression_NoExprMatch()
	{
	}
	IMPLEMENT_CLASS(UEditableGameplayTagQueryExpression_NoExprMatch, 2926857242);
	void UGameplayTagAssetInterface::StaticRegisterNativesUGameplayTagAssetInterface()
	{
		FNativeFunctionRegistrar::RegisterFunction(UGameplayTagAssetInterface::StaticClass(),"GetOwnedGameplayTags",(Native)&IGameplayTagAssetInterface::execGetOwnedGameplayTags);
		FNativeFunctionRegistrar::RegisterFunction(UGameplayTagAssetInterface::StaticClass(),"HasAllMatchingGameplayTags",(Native)&IGameplayTagAssetInterface::execHasAllMatchingGameplayTags);
		FNativeFunctionRegistrar::RegisterFunction(UGameplayTagAssetInterface::StaticClass(),"HasAnyMatchingGameplayTags",(Native)&IGameplayTagAssetInterface::execHasAnyMatchingGameplayTags);
		FNativeFunctionRegistrar::RegisterFunction(UGameplayTagAssetInterface::StaticClass(),"HasMatchingGameplayTag",(Native)&IGameplayTagAssetInterface::execHasMatchingGameplayTag);
	}
	IMPLEMENT_CLASS(UGameplayTagAssetInterface, 1241179246);
	void UBlueprintGameplayTagLibrary::StaticRegisterNativesUBlueprintGameplayTagLibrary()
	{
		FNativeFunctionRegistrar::RegisterFunction(UBlueprintGameplayTagLibrary::StaticClass(),"AppendGameplayTagContainers",(Native)&UBlueprintGameplayTagLibrary::execAppendGameplayTagContainers);
		FNativeFunctionRegistrar::RegisterFunction(UBlueprintGameplayTagLibrary::StaticClass(),"DoesContainerHaveTag",(Native)&UBlueprintGameplayTagLibrary::execDoesContainerHaveTag);
		FNativeFunctionRegistrar::RegisterFunction(UBlueprintGameplayTagLibrary::StaticClass(),"DoesContainerMatchAllTagsInContainer",(Native)&UBlueprintGameplayTagLibrary::execDoesContainerMatchAllTagsInContainer);
		FNativeFunctionRegistrar::RegisterFunction(UBlueprintGameplayTagLibrary::StaticClass(),"DoesContainerMatchAnyTagsInContainer",(Native)&UBlueprintGameplayTagLibrary::execDoesContainerMatchAnyTagsInContainer);
		FNativeFunctionRegistrar::RegisterFunction(UBlueprintGameplayTagLibrary::StaticClass(),"DoesContainerMatchTagQuery",(Native)&UBlueprintGameplayTagLibrary::execDoesContainerMatchTagQuery);
		FNativeFunctionRegistrar::RegisterFunction(UBlueprintGameplayTagLibrary::StaticClass(),"DoesTagAssetInterfaceHaveTag",(Native)&UBlueprintGameplayTagLibrary::execDoesTagAssetInterfaceHaveTag);
		FNativeFunctionRegistrar::RegisterFunction(UBlueprintGameplayTagLibrary::StaticClass(),"DoGameplayTagsMatch",(Native)&UBlueprintGameplayTagLibrary::execDoGameplayTagsMatch);
		FNativeFunctionRegistrar::RegisterFunction(UBlueprintGameplayTagLibrary::StaticClass(),"GetNumGameplayTagsInContainer",(Native)&UBlueprintGameplayTagLibrary::execGetNumGameplayTagsInContainer);
		FNativeFunctionRegistrar::RegisterFunction(UBlueprintGameplayTagLibrary::StaticClass(),"HasAllMatchingGameplayTags",(Native)&UBlueprintGameplayTagLibrary::execHasAllMatchingGameplayTags);
		FNativeFunctionRegistrar::RegisterFunction(UBlueprintGameplayTagLibrary::StaticClass(),"MakeGameplayTagQuery",(Native)&UBlueprintGameplayTagLibrary::execMakeGameplayTagQuery);
		FNativeFunctionRegistrar::RegisterFunction(UBlueprintGameplayTagLibrary::StaticClass(),"MakeLiteralGameplayTag",(Native)&UBlueprintGameplayTagLibrary::execMakeLiteralGameplayTag);
	}
	IMPLEMENT_CLASS(UBlueprintGameplayTagLibrary, 3325995171);
class UScriptStruct* FGameplayTagNode::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYTAGS_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayTagNode();
		extern GAMEPLAYTAGS_API uint32 Get_Z_Construct_UScriptStruct_FGameplayTagNode_CRC();
		extern GAMEPLAYTAGS_API class UPackage* Z_Construct_UPackage_GameplayTags();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FGameplayTagNode, Z_Construct_UPackage_GameplayTags(), TEXT("GameplayTagNode"), sizeof(FGameplayTagNode), Get_Z_Construct_UScriptStruct_FGameplayTagNode_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FGameplayTagNode(FGameplayTagNode::StaticStruct, TEXT("/Script/GameplayTags"));
static struct FScriptStruct_GameplayTags_StaticRegisterNativesFGameplayTagNode
{
	FScriptStruct_GameplayTags_StaticRegisterNativesFGameplayTagNode()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("GameplayTagNode")),new UScriptStruct::TCppStructOps<FGameplayTagNode>);
	}
} ScriptStruct_GameplayTags_StaticRegisterNativesFGameplayTagNode;
class UScriptStruct* FGameplayTagTableRow::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern GAMEPLAYTAGS_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayTagTableRow();
		extern GAMEPLAYTAGS_API uint32 Get_Z_Construct_UScriptStruct_FGameplayTagTableRow_CRC();
		extern GAMEPLAYTAGS_API class UPackage* Z_Construct_UPackage_GameplayTags();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FGameplayTagTableRow, Z_Construct_UPackage_GameplayTags(), TEXT("GameplayTagTableRow"), sizeof(FGameplayTagTableRow), Get_Z_Construct_UScriptStruct_FGameplayTagTableRow_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FGameplayTagTableRow(FGameplayTagTableRow::StaticStruct, TEXT("/Script/GameplayTags"));
static struct FScriptStruct_GameplayTags_StaticRegisterNativesFGameplayTagTableRow
{
	FScriptStruct_GameplayTags_StaticRegisterNativesFGameplayTagTableRow()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("GameplayTagTableRow")),new UScriptStruct::TCppStructOps<FGameplayTagTableRow>);
	}
} ScriptStruct_GameplayTags_StaticRegisterNativesFGameplayTagTableRow;
	void UGameplayTagsManager::StaticRegisterNativesUGameplayTagsManager()
	{
		FNativeFunctionRegistrar::RegisterFunction(UGameplayTagsManager::StaticClass(),"RequestGameplayTag",(Native)&UGameplayTagsManager::execRequestGameplayTag);
	}
	IMPLEMENT_CLASS(UGameplayTagsManager, 4262397107);
	void UGameplayTagsSettings::StaticRegisterNativesUGameplayTagsSettings()
	{
	}
	IMPLEMENT_CLASS(UGameplayTagsSettings, 1394057616);
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	COREUOBJECT_API class UClass* Z_Construct_UClass_UObject();
	ENGINE_API class UClass* Z_Construct_UClass_UBlueprintFunctionLibrary();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTableRowBase();
	ENGINE_API class UClass* Z_Construct_UClass_UDataTable_NoRegister();

	GAMEPLAYTAGS_API class UEnum* Z_Construct_UEnum_GameplayTags_EGameplayTagQueryExprType();
	GAMEPLAYTAGS_API class UEnum* Z_Construct_UEnum_GameplayTags_EGameplayContainerMatchType();
	GAMEPLAYTAGS_API class UEnum* Z_Construct_UEnum_GameplayTags_EGameplayTagMatchType();
	GAMEPLAYTAGS_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayTagQuery();
	GAMEPLAYTAGS_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayTagContainer();
	GAMEPLAYTAGS_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayTag();
	GAMEPLAYTAGS_API class UClass* Z_Construct_UClass_UEditableGameplayTagQuery_NoRegister();
	GAMEPLAYTAGS_API class UClass* Z_Construct_UClass_UEditableGameplayTagQuery();
	GAMEPLAYTAGS_API class UClass* Z_Construct_UClass_UEditableGameplayTagQueryExpression_NoRegister();
	GAMEPLAYTAGS_API class UClass* Z_Construct_UClass_UEditableGameplayTagQueryExpression();
	GAMEPLAYTAGS_API class UClass* Z_Construct_UClass_UEditableGameplayTagQueryExpression_AnyTagsMatch_NoRegister();
	GAMEPLAYTAGS_API class UClass* Z_Construct_UClass_UEditableGameplayTagQueryExpression_AnyTagsMatch();
	GAMEPLAYTAGS_API class UClass* Z_Construct_UClass_UEditableGameplayTagQueryExpression_AllTagsMatch_NoRegister();
	GAMEPLAYTAGS_API class UClass* Z_Construct_UClass_UEditableGameplayTagQueryExpression_AllTagsMatch();
	GAMEPLAYTAGS_API class UClass* Z_Construct_UClass_UEditableGameplayTagQueryExpression_NoTagsMatch_NoRegister();
	GAMEPLAYTAGS_API class UClass* Z_Construct_UClass_UEditableGameplayTagQueryExpression_NoTagsMatch();
	GAMEPLAYTAGS_API class UClass* Z_Construct_UClass_UEditableGameplayTagQueryExpression_AnyExprMatch_NoRegister();
	GAMEPLAYTAGS_API class UClass* Z_Construct_UClass_UEditableGameplayTagQueryExpression_AnyExprMatch();
	GAMEPLAYTAGS_API class UClass* Z_Construct_UClass_UEditableGameplayTagQueryExpression_AllExprMatch_NoRegister();
	GAMEPLAYTAGS_API class UClass* Z_Construct_UClass_UEditableGameplayTagQueryExpression_AllExprMatch();
	GAMEPLAYTAGS_API class UClass* Z_Construct_UClass_UEditableGameplayTagQueryExpression_NoExprMatch_NoRegister();
	GAMEPLAYTAGS_API class UClass* Z_Construct_UClass_UEditableGameplayTagQueryExpression_NoExprMatch();
	GAMEPLAYTAGS_API class UFunction* Z_Construct_UFunction_UGameplayTagAssetInterface_GetOwnedGameplayTags();
	GAMEPLAYTAGS_API class UFunction* Z_Construct_UFunction_UGameplayTagAssetInterface_HasAllMatchingGameplayTags();
	GAMEPLAYTAGS_API class UFunction* Z_Construct_UFunction_UGameplayTagAssetInterface_HasAnyMatchingGameplayTags();
	GAMEPLAYTAGS_API class UFunction* Z_Construct_UFunction_UGameplayTagAssetInterface_HasMatchingGameplayTag();
	GAMEPLAYTAGS_API class UClass* Z_Construct_UClass_UGameplayTagAssetInterface_NoRegister();
	GAMEPLAYTAGS_API class UClass* Z_Construct_UClass_UGameplayTagAssetInterface();
	GAMEPLAYTAGS_API class UFunction* Z_Construct_UFunction_UBlueprintGameplayTagLibrary_AppendGameplayTagContainers();
	GAMEPLAYTAGS_API class UFunction* Z_Construct_UFunction_UBlueprintGameplayTagLibrary_DoesContainerHaveTag();
	GAMEPLAYTAGS_API class UFunction* Z_Construct_UFunction_UBlueprintGameplayTagLibrary_DoesContainerMatchAllTagsInContainer();
	GAMEPLAYTAGS_API class UFunction* Z_Construct_UFunction_UBlueprintGameplayTagLibrary_DoesContainerMatchAnyTagsInContainer();
	GAMEPLAYTAGS_API class UFunction* Z_Construct_UFunction_UBlueprintGameplayTagLibrary_DoesContainerMatchTagQuery();
	GAMEPLAYTAGS_API class UFunction* Z_Construct_UFunction_UBlueprintGameplayTagLibrary_DoesTagAssetInterfaceHaveTag();
	GAMEPLAYTAGS_API class UFunction* Z_Construct_UFunction_UBlueprintGameplayTagLibrary_DoGameplayTagsMatch();
	GAMEPLAYTAGS_API class UFunction* Z_Construct_UFunction_UBlueprintGameplayTagLibrary_GetNumGameplayTagsInContainer();
	GAMEPLAYTAGS_API class UFunction* Z_Construct_UFunction_UBlueprintGameplayTagLibrary_HasAllMatchingGameplayTags();
	GAMEPLAYTAGS_API class UFunction* Z_Construct_UFunction_UBlueprintGameplayTagLibrary_MakeGameplayTagQuery();
	GAMEPLAYTAGS_API class UFunction* Z_Construct_UFunction_UBlueprintGameplayTagLibrary_MakeLiteralGameplayTag();
	GAMEPLAYTAGS_API class UClass* Z_Construct_UClass_UBlueprintGameplayTagLibrary_NoRegister();
	GAMEPLAYTAGS_API class UClass* Z_Construct_UClass_UBlueprintGameplayTagLibrary();
	GAMEPLAYTAGS_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayTagNode();
	GAMEPLAYTAGS_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayTagTableRow();
	GAMEPLAYTAGS_API class UFunction* Z_Construct_UFunction_UGameplayTagsManager_RequestGameplayTag();
	GAMEPLAYTAGS_API class UClass* Z_Construct_UClass_UGameplayTagsManager_NoRegister();
	GAMEPLAYTAGS_API class UClass* Z_Construct_UClass_UGameplayTagsManager();
	GAMEPLAYTAGS_API class UClass* Z_Construct_UClass_UGameplayTagsSettings_NoRegister();
	GAMEPLAYTAGS_API class UClass* Z_Construct_UClass_UGameplayTagsSettings();
	GAMEPLAYTAGS_API class UPackage* Z_Construct_UPackage_GameplayTags();
	UEnum* Z_Construct_UEnum_GameplayTags_EGameplayTagQueryExprType()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayTags();
		extern uint32 Get_Z_Construct_UEnum_GameplayTags_EGameplayTagQueryExprType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EGameplayTagQueryExprType"), 0, Get_Z_Construct_UEnum_GameplayTags_EGameplayTagQueryExprType_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EGameplayTagQueryExprType"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayTagQueryExprType::Undefined")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayTagQueryExprType::AnyTagsMatch")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayTagQueryExprType::AllTagsMatch")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayTagQueryExprType::NoTagsMatch")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayTagQueryExprType::AnyExprMatch")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayTagQueryExprType::AllExprMatch")), 5));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayTagQueryExprType::NoExprMatch")), 6));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayTagQueryExprType::EGameplayTagQueryExprType_MAX")), 7));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/GameplayTagContainer.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Enumerates the list of supported query expression types."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_GameplayTags_EGameplayTagQueryExprType_CRC() { return 1324638866U; }
	UEnum* Z_Construct_UEnum_GameplayTags_EGameplayContainerMatchType()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayTags();
		extern uint32 Get_Z_Construct_UEnum_GameplayTags_EGameplayContainerMatchType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EGameplayContainerMatchType"), 0, Get_Z_Construct_UEnum_GameplayTags_EGameplayContainerMatchType_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EGameplayContainerMatchType"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayContainerMatchType::Any")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayContainerMatchType::All")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayContainerMatchType::EGameplayContainerMatchType_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("All.ToolTip"), TEXT("Means the filter is populated by any tag matches in this container."));
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/GameplayTagContainer.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_GameplayTags_EGameplayContainerMatchType_CRC() { return 324898788U; }
	UEnum* Z_Construct_UEnum_GameplayTags_EGameplayTagMatchType()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayTags();
		extern uint32 Get_Z_Construct_UEnum_GameplayTags_EGameplayTagMatchType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EGameplayTagMatchType"), 0, Get_Z_Construct_UEnum_GameplayTags_EGameplayTagMatchType_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EGameplayTagMatchType"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayTagMatchType::Explicit")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayTagMatchType::IncludeParentTags")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGameplayTagMatchType::EGameplayTagMatchType_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("IncludeParentTags.ToolTip"), TEXT("This will check for a match against just this tag"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/GameplayTagContainer.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_GameplayTags_EGameplayTagMatchType_CRC() { return 3500931484U; }
	UScriptStruct* Z_Construct_UScriptStruct_FGameplayTagQuery()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayTags();
		extern uint32 Get_Z_Construct_UScriptStruct_FGameplayTagQuery_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("GameplayTagQuery"), sizeof(FGameplayTagQuery), Get_Z_Construct_UScriptStruct_FGameplayTagQuery_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GameplayTagQuery"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FGameplayTagQuery>, EStructFlags(0x00000201));
			UProperty* NewProp_AutoDescription = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("AutoDescription"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(AutoDescription, FGameplayTagQuery), 0x0000000000000000);
			UProperty* NewProp_UserDescription = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UserDescription"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(UserDescription, FGameplayTagQuery), 0x0000000000000000);
			UProperty* NewProp_QueryTokenStream = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("QueryTokenStream"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(QueryTokenStream, FGameplayTagQuery), 0x0000000000000000);
			UProperty* NewProp_QueryTokenStream_Inner = new(EC_InternalUseOnlyConstructor, NewProp_QueryTokenStream, TEXT("QueryTokenStream"), RF_Public|RF_Transient|RF_Native) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_TagDictionary = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TagDictionary"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(TagDictionary, FGameplayTagQuery), 0x0000000000000000);
			UProperty* NewProp_TagDictionary_Inner = new(EC_InternalUseOnlyConstructor, NewProp_TagDictionary, TEXT("TagDictionary"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FGameplayTag());
			UProperty* NewProp_TokenStreamVersion = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TokenStreamVersion"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(TokenStreamVersion, FGameplayTagQuery), 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("HasNativeMake"), TEXT("GameplayTags.UBlueprintGameplayTagLibrary.MakeGameplayTagQuery"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/GameplayTagContainer.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("An FGameplayTagQuery is a logical query that can be run against an FGameplayTagContainer.  A query that succeeds is said to \"match\".\nQueries are logical expressions that can test the intersection properties of another tag container (all, any, or none), or the matching state of a set of sub-expressions\n(all, any, or none). This allows queries to be arbitrarily recursive and very expressive.  For instance, if you wanted to test if a given tag container contained tags\n((A && B) || (C)) && (!D), you would construct your query in the form ALL( ANY( ALL(A,B), ALL(C) ), NONE(D) )\n\nYou can expose the query structs to Blueprints and edit them with a custom editor, or you can construct them natively in code.\n\nExample of how to build a query via code:\n    FGameplayTagQuery Q;\n    Q.BuildQuery(\n            FGameplayTagQueryExpression()\n            .AllTagsMatch()\n            .AddTag(IGameplayTagsModule::RequestGameplayTag(FName(TEXT(\"Animal.Mammal.Dog.Corgi\"))))\n            .AddTag(IGameplayTagsModule::RequestGameplayTag(FName(TEXT(\"Plant.Tree.Spruce\"))))\n            );\n\nQueries are internally represented as a byte stream that is memory-efficient and can be evaluated quickly at runtime.\nNote: these have an extensive details and graph pin customization for editing, so there is no need to expose the internals to Blueprints."));
			MetaData->SetValue(NewProp_AutoDescription, TEXT("ModuleRelativePath"), TEXT("Classes/GameplayTagContainer.h"));
			MetaData->SetValue(NewProp_AutoDescription, TEXT("ToolTip"), TEXT("Auto-generated string describing the query"));
			MetaData->SetValue(NewProp_UserDescription, TEXT("ModuleRelativePath"), TEXT("Classes/GameplayTagContainer.h"));
			MetaData->SetValue(NewProp_UserDescription, TEXT("ToolTip"), TEXT("User-provided string describing the query"));
			MetaData->SetValue(NewProp_QueryTokenStream, TEXT("ModuleRelativePath"), TEXT("Classes/GameplayTagContainer.h"));
			MetaData->SetValue(NewProp_QueryTokenStream, TEXT("ToolTip"), TEXT("Stream representation of the actual hierarchical query"));
			MetaData->SetValue(NewProp_TagDictionary, TEXT("ModuleRelativePath"), TEXT("Classes/GameplayTagContainer.h"));
			MetaData->SetValue(NewProp_TagDictionary, TEXT("ToolTip"), TEXT("List of tags referenced by this entire query. Token stream stored indices into this list."));
			MetaData->SetValue(NewProp_TokenStreamVersion, TEXT("ModuleRelativePath"), TEXT("Classes/GameplayTagContainer.h"));
			MetaData->SetValue(NewProp_TokenStreamVersion, TEXT("ToolTip"), TEXT("Versioning for future token stream protocol changes. See EGameplayTagQueryStreamVersion."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FGameplayTagQuery_CRC() { return 3590740925U; }
	UScriptStruct* Z_Construct_UScriptStruct_FGameplayTagContainer()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayTags();
		extern uint32 Get_Z_Construct_UScriptStruct_FGameplayTagContainer_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("GameplayTagContainer"), sizeof(FGameplayTagContainer), Get_Z_Construct_UScriptStruct_FGameplayTagContainer_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GameplayTagContainer"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FGameplayTagContainer>, EStructFlags(0x00000201));
			UProperty* NewProp_Tags = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Tags"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Tags_DEPRECATED, FGameplayTagContainer), 0x0000000020000000);
			UProperty* NewProp_Tags_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Tags, TEXT("Tags"), RF_Public|RF_Transient|RF_Native) UNameProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000020000000);
			UProperty* NewProp_GameplayTags = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("GameplayTags"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(GameplayTags, FGameplayTagContainer), 0x0000080000000004);
			UProperty* NewProp_GameplayTags_Inner = new(EC_InternalUseOnlyConstructor, NewProp_GameplayTags, TEXT("GameplayTags"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FGameplayTag());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/GameplayTagContainer.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Simple struct for a gameplay tag container"));
			MetaData->SetValue(NewProp_Tags, TEXT("ModuleRelativePath"), TEXT("Classes/GameplayTagContainer.h"));
			MetaData->SetValue(NewProp_Tags, TEXT("ToolTip"), TEXT("Array of gameplay tags"));
			MetaData->SetValue(NewProp_GameplayTags, TEXT("Category"), TEXT("GameplayTags"));
			MetaData->SetValue(NewProp_GameplayTags, TEXT("ModuleRelativePath"), TEXT("Classes/GameplayTagContainer.h"));
			MetaData->SetValue(NewProp_GameplayTags, TEXT("ToolTip"), TEXT("Array of gameplay tags"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FGameplayTagContainer_CRC() { return 2517896038U; }
	UScriptStruct* Z_Construct_UScriptStruct_FGameplayTag()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayTags();
		extern uint32 Get_Z_Construct_UScriptStruct_FGameplayTag_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("GameplayTag"), sizeof(FGameplayTag), Get_Z_Construct_UScriptStruct_FGameplayTag_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GameplayTag"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FGameplayTag>, EStructFlags(0x00000201));
			UProperty* NewProp_TagName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TagName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(TagName, FGameplayTag), 0x0000000000020001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/GameplayTagContainer.h"));
			MetaData->SetValue(NewProp_TagName, TEXT("Category"), TEXT("GameplayTags"));
			MetaData->SetValue(NewProp_TagName, TEXT("ModuleRelativePath"), TEXT("Classes/GameplayTagContainer.h"));
			MetaData->SetValue(NewProp_TagName, TEXT("ToolTip"), TEXT("This Tags Name"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FGameplayTag_CRC() { return 1986534459U; }
	UClass* Z_Construct_UClass_UEditableGameplayTagQuery_NoRegister()
	{
		return UEditableGameplayTagQuery::StaticClass();
	}
	UClass* Z_Construct_UClass_UEditableGameplayTagQuery()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_GameplayTags();
			OuterClass = UEditableGameplayTagQuery::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20903088;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_TagQueryExportText_Helper = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TagQueryExportText_Helper"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TagQueryExportText_Helper, UEditableGameplayTagQuery), 0x0000000000000000, Z_Construct_UScriptStruct_FGameplayTagQuery());
				UProperty* NewProp_RootExpression = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RootExpression"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(RootExpression, UEditableGameplayTagQuery), 0x0002000000090009, Z_Construct_UClass_UEditableGameplayTagQueryExpression_NoRegister());
				UProperty* NewProp_UserDescription = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UserDescription"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(UserDescription, UEditableGameplayTagQuery), 0x0000000000010001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("GameplayTagContainer.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/GameplayTagContainer.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("This is an editor-only representation of a query, designed to be editable with a typical property window.\nTo edit a query in the editor, an FGameplayTagQuery is converted to a set of UObjects and edited,  When finished,\nthe query struct is rewritten and these UObjects are discarded.\nThis query representation is not intended for runtime use."));
				MetaData->SetValue(NewProp_TagQueryExportText_Helper, TEXT("ModuleRelativePath"), TEXT("Classes/GameplayTagContainer.h"));
				MetaData->SetValue(NewProp_TagQueryExportText_Helper, TEXT("ToolTip"), TEXT("Property to hold a gameplay tag query so we can use the exporttext path to get a string representation."));
				MetaData->SetValue(NewProp_RootExpression, TEXT("Category"), TEXT("Query"));
				MetaData->SetValue(NewProp_RootExpression, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_RootExpression, TEXT("ModuleRelativePath"), TEXT("Classes/GameplayTagContainer.h"));
				MetaData->SetValue(NewProp_RootExpression, TEXT("ToolTip"), TEXT("The base expression of this query."));
				MetaData->SetValue(NewProp_UserDescription, TEXT("Category"), TEXT("Query"));
				MetaData->SetValue(NewProp_UserDescription, TEXT("ModuleRelativePath"), TEXT("Classes/GameplayTagContainer.h"));
				MetaData->SetValue(NewProp_UserDescription, TEXT("ToolTip"), TEXT("User-supplied description, shown in property details. Auto-generated description is shown if not supplied."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UEditableGameplayTagQuery(Z_Construct_UClass_UEditableGameplayTagQuery, TEXT("UEditableGameplayTagQuery"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UEditableGameplayTagQuery);
	UClass* Z_Construct_UClass_UEditableGameplayTagQueryExpression_NoRegister()
	{
		return UEditableGameplayTagQueryExpression::StaticClass();
	}
	UClass* Z_Construct_UClass_UEditableGameplayTagQueryExpression()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_GameplayTags();
			OuterClass = UEditableGameplayTagQueryExpression::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20103089;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("GameplayTagContainer.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/GameplayTagContainer.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UEditableGameplayTagQueryExpression(Z_Construct_UClass_UEditableGameplayTagQueryExpression, TEXT("UEditableGameplayTagQueryExpression"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UEditableGameplayTagQueryExpression);
	UClass* Z_Construct_UClass_UEditableGameplayTagQueryExpression_AnyTagsMatch_NoRegister()
	{
		return UEditableGameplayTagQueryExpression_AnyTagsMatch::StaticClass();
	}
	UClass* Z_Construct_UClass_UEditableGameplayTagQueryExpression_AnyTagsMatch()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UEditableGameplayTagQueryExpression();
			Z_Construct_UPackage_GameplayTags();
			OuterClass = UEditableGameplayTagQueryExpression_AnyTagsMatch::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20003088;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Tags = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Tags"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Tags, UEditableGameplayTagQueryExpression_AnyTagsMatch), 0x0000000000010001, Z_Construct_UScriptStruct_FGameplayTagContainer());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Any Tags Match"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("GameplayTagContainer.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/GameplayTagContainer.h"));
				MetaData->SetValue(NewProp_Tags, TEXT("Category"), TEXT("Expr"));
				MetaData->SetValue(NewProp_Tags, TEXT("ModuleRelativePath"), TEXT("Classes/GameplayTagContainer.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UEditableGameplayTagQueryExpression_AnyTagsMatch(Z_Construct_UClass_UEditableGameplayTagQueryExpression_AnyTagsMatch, TEXT("UEditableGameplayTagQueryExpression_AnyTagsMatch"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UEditableGameplayTagQueryExpression_AnyTagsMatch);
	UClass* Z_Construct_UClass_UEditableGameplayTagQueryExpression_AllTagsMatch_NoRegister()
	{
		return UEditableGameplayTagQueryExpression_AllTagsMatch::StaticClass();
	}
	UClass* Z_Construct_UClass_UEditableGameplayTagQueryExpression_AllTagsMatch()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UEditableGameplayTagQueryExpression();
			Z_Construct_UPackage_GameplayTags();
			OuterClass = UEditableGameplayTagQueryExpression_AllTagsMatch::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20003088;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Tags = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Tags"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Tags, UEditableGameplayTagQueryExpression_AllTagsMatch), 0x0000000000010001, Z_Construct_UScriptStruct_FGameplayTagContainer());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("All Tags Match"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("GameplayTagContainer.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/GameplayTagContainer.h"));
				MetaData->SetValue(NewProp_Tags, TEXT("Category"), TEXT("Expr"));
				MetaData->SetValue(NewProp_Tags, TEXT("ModuleRelativePath"), TEXT("Classes/GameplayTagContainer.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UEditableGameplayTagQueryExpression_AllTagsMatch(Z_Construct_UClass_UEditableGameplayTagQueryExpression_AllTagsMatch, TEXT("UEditableGameplayTagQueryExpression_AllTagsMatch"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UEditableGameplayTagQueryExpression_AllTagsMatch);
	UClass* Z_Construct_UClass_UEditableGameplayTagQueryExpression_NoTagsMatch_NoRegister()
	{
		return UEditableGameplayTagQueryExpression_NoTagsMatch::StaticClass();
	}
	UClass* Z_Construct_UClass_UEditableGameplayTagQueryExpression_NoTagsMatch()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UEditableGameplayTagQueryExpression();
			Z_Construct_UPackage_GameplayTags();
			OuterClass = UEditableGameplayTagQueryExpression_NoTagsMatch::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20003088;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Tags = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Tags"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Tags, UEditableGameplayTagQueryExpression_NoTagsMatch), 0x0000000000010001, Z_Construct_UScriptStruct_FGameplayTagContainer());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("No Tags Match"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("GameplayTagContainer.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/GameplayTagContainer.h"));
				MetaData->SetValue(NewProp_Tags, TEXT("Category"), TEXT("Expr"));
				MetaData->SetValue(NewProp_Tags, TEXT("ModuleRelativePath"), TEXT("Classes/GameplayTagContainer.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UEditableGameplayTagQueryExpression_NoTagsMatch(Z_Construct_UClass_UEditableGameplayTagQueryExpression_NoTagsMatch, TEXT("UEditableGameplayTagQueryExpression_NoTagsMatch"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UEditableGameplayTagQueryExpression_NoTagsMatch);
	UClass* Z_Construct_UClass_UEditableGameplayTagQueryExpression_AnyExprMatch_NoRegister()
	{
		return UEditableGameplayTagQueryExpression_AnyExprMatch::StaticClass();
	}
	UClass* Z_Construct_UClass_UEditableGameplayTagQueryExpression_AnyExprMatch()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UEditableGameplayTagQueryExpression();
			Z_Construct_UPackage_GameplayTags();
			OuterClass = UEditableGameplayTagQueryExpression_AnyExprMatch::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20803088;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Expressions = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Expressions"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Expressions, UEditableGameplayTagQueryExpression_AnyExprMatch), 0x0000008000000009);
				UProperty* NewProp_Expressions_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Expressions, TEXT("Expressions"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0002000000080008, Z_Construct_UClass_UEditableGameplayTagQueryExpression_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Any Expressions Match"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("GameplayTagContainer.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/GameplayTagContainer.h"));
				MetaData->SetValue(NewProp_Expressions, TEXT("Category"), TEXT("Expr"));
				MetaData->SetValue(NewProp_Expressions, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_Expressions, TEXT("ModuleRelativePath"), TEXT("Classes/GameplayTagContainer.h"));
				MetaData->SetValue(NewProp_Expressions_Inner, TEXT("Category"), TEXT("Expr"));
				MetaData->SetValue(NewProp_Expressions_Inner, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_Expressions_Inner, TEXT("ModuleRelativePath"), TEXT("Classes/GameplayTagContainer.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UEditableGameplayTagQueryExpression_AnyExprMatch(Z_Construct_UClass_UEditableGameplayTagQueryExpression_AnyExprMatch, TEXT("UEditableGameplayTagQueryExpression_AnyExprMatch"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UEditableGameplayTagQueryExpression_AnyExprMatch);
	UClass* Z_Construct_UClass_UEditableGameplayTagQueryExpression_AllExprMatch_NoRegister()
	{
		return UEditableGameplayTagQueryExpression_AllExprMatch::StaticClass();
	}
	UClass* Z_Construct_UClass_UEditableGameplayTagQueryExpression_AllExprMatch()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UEditableGameplayTagQueryExpression();
			Z_Construct_UPackage_GameplayTags();
			OuterClass = UEditableGameplayTagQueryExpression_AllExprMatch::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20803088;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Expressions = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Expressions"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Expressions, UEditableGameplayTagQueryExpression_AllExprMatch), 0x0000008000000009);
				UProperty* NewProp_Expressions_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Expressions, TEXT("Expressions"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0002000000080008, Z_Construct_UClass_UEditableGameplayTagQueryExpression_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("All Expressions Match"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("GameplayTagContainer.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/GameplayTagContainer.h"));
				MetaData->SetValue(NewProp_Expressions, TEXT("Category"), TEXT("Expr"));
				MetaData->SetValue(NewProp_Expressions, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_Expressions, TEXT("ModuleRelativePath"), TEXT("Classes/GameplayTagContainer.h"));
				MetaData->SetValue(NewProp_Expressions_Inner, TEXT("Category"), TEXT("Expr"));
				MetaData->SetValue(NewProp_Expressions_Inner, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_Expressions_Inner, TEXT("ModuleRelativePath"), TEXT("Classes/GameplayTagContainer.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UEditableGameplayTagQueryExpression_AllExprMatch(Z_Construct_UClass_UEditableGameplayTagQueryExpression_AllExprMatch, TEXT("UEditableGameplayTagQueryExpression_AllExprMatch"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UEditableGameplayTagQueryExpression_AllExprMatch);
	UClass* Z_Construct_UClass_UEditableGameplayTagQueryExpression_NoExprMatch_NoRegister()
	{
		return UEditableGameplayTagQueryExpression_NoExprMatch::StaticClass();
	}
	UClass* Z_Construct_UClass_UEditableGameplayTagQueryExpression_NoExprMatch()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UEditableGameplayTagQueryExpression();
			Z_Construct_UPackage_GameplayTags();
			OuterClass = UEditableGameplayTagQueryExpression_NoExprMatch::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20803088;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Expressions = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Expressions"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Expressions, UEditableGameplayTagQueryExpression_NoExprMatch), 0x0000008000000009);
				UProperty* NewProp_Expressions_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Expressions, TEXT("Expressions"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0002000000080008, Z_Construct_UClass_UEditableGameplayTagQueryExpression_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("No Expressions Match"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("GameplayTagContainer.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/GameplayTagContainer.h"));
				MetaData->SetValue(NewProp_Expressions, TEXT("Category"), TEXT("Expr"));
				MetaData->SetValue(NewProp_Expressions, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_Expressions, TEXT("ModuleRelativePath"), TEXT("Classes/GameplayTagContainer.h"));
				MetaData->SetValue(NewProp_Expressions_Inner, TEXT("Category"), TEXT("Expr"));
				MetaData->SetValue(NewProp_Expressions_Inner, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_Expressions_Inner, TEXT("ModuleRelativePath"), TEXT("Classes/GameplayTagContainer.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UEditableGameplayTagQueryExpression_NoExprMatch(Z_Construct_UClass_UEditableGameplayTagQueryExpression_NoExprMatch, TEXT("UEditableGameplayTagQueryExpression_NoExprMatch"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UEditableGameplayTagQueryExpression_NoExprMatch);
	UFunction* Z_Construct_UFunction_UGameplayTagAssetInterface_GetOwnedGameplayTags()
	{
		struct GameplayTagAssetInterface_eventGetOwnedGameplayTags_Parms
		{
			FGameplayTagContainer TagContainer;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayTagAssetInterface();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetOwnedGameplayTags"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54420400, 65535, sizeof(GameplayTagAssetInterface_eventGetOwnedGameplayTags_Parms));
			UProperty* NewProp_TagContainer = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TagContainer"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TagContainer, GameplayTagAssetInterface_eventGetOwnedGameplayTags_Parms), 0x0000000000000180, Z_Construct_UScriptStruct_FGameplayTagContainer());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("GameplayTags"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/GameplayTagAssetInterface.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get any owned gameplay tags on the asset\n\n@param OutTags       [OUT] Set of tags on the asset"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayTagAssetInterface_HasAllMatchingGameplayTags()
	{
		struct GameplayTagAssetInterface_eventHasAllMatchingGameplayTags_Parms
		{
			FGameplayTagContainer TagContainer;
			bool bCountEmptyAsMatch;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayTagAssetInterface();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("HasAllMatchingGameplayTags"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54420400, 65535, sizeof(GameplayTagAssetInterface_eventHasAllMatchingGameplayTags_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, GameplayTagAssetInterface_eventHasAllMatchingGameplayTags_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, GameplayTagAssetInterface_eventHasAllMatchingGameplayTags_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, GameplayTagAssetInterface_eventHasAllMatchingGameplayTags_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCountEmptyAsMatch, GameplayTagAssetInterface_eventHasAllMatchingGameplayTags_Parms, bool);
			UProperty* NewProp_bCountEmptyAsMatch = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bCountEmptyAsMatch"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCountEmptyAsMatch, GameplayTagAssetInterface_eventHasAllMatchingGameplayTags_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bCountEmptyAsMatch, GameplayTagAssetInterface_eventHasAllMatchingGameplayTags_Parms), sizeof(bool), true);
			UProperty* NewProp_TagContainer = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TagContainer"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TagContainer, GameplayTagAssetInterface_eventHasAllMatchingGameplayTags_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FGameplayTagContainer());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("GameplayTags"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bCountEmptyAsMatch"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/GameplayTagAssetInterface.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Check if the asset has gameplay tags that matches against all of the specified tags (expands to include parents of asset tags)\n\n@param TagContainer                  Tag container to check for a match\n@param bCountEmptyAsMatch    If true, the parameter tag container will count as matching, even if it's empty\n\n@return True if the asset has matches all of the gameplay tags"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayTagAssetInterface_HasAnyMatchingGameplayTags()
	{
		struct GameplayTagAssetInterface_eventHasAnyMatchingGameplayTags_Parms
		{
			FGameplayTagContainer TagContainer;
			bool bCountEmptyAsMatch;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayTagAssetInterface();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("HasAnyMatchingGameplayTags"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54420400, 65535, sizeof(GameplayTagAssetInterface_eventHasAnyMatchingGameplayTags_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, GameplayTagAssetInterface_eventHasAnyMatchingGameplayTags_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, GameplayTagAssetInterface_eventHasAnyMatchingGameplayTags_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, GameplayTagAssetInterface_eventHasAnyMatchingGameplayTags_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCountEmptyAsMatch, GameplayTagAssetInterface_eventHasAnyMatchingGameplayTags_Parms, bool);
			UProperty* NewProp_bCountEmptyAsMatch = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bCountEmptyAsMatch"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCountEmptyAsMatch, GameplayTagAssetInterface_eventHasAnyMatchingGameplayTags_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bCountEmptyAsMatch, GameplayTagAssetInterface_eventHasAnyMatchingGameplayTags_Parms), sizeof(bool), true);
			UProperty* NewProp_TagContainer = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TagContainer"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TagContainer, GameplayTagAssetInterface_eventHasAnyMatchingGameplayTags_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FGameplayTagContainer());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("GameplayTags"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bCountEmptyAsMatch"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/GameplayTagAssetInterface.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Check if the asset has gameplay tags that matches against any of the specified tags (expands to include parents of asset tags)\n\n@param TagContainer                  Tag container to check for a match\n@param bCountEmptyAsMatch    If true, the parameter tag container will count as matching, even if it's empty\n\n@return True if the asset has matches any of the gameplay tags"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGameplayTagAssetInterface_HasMatchingGameplayTag()
	{
		struct GameplayTagAssetInterface_eventHasMatchingGameplayTag_Parms
		{
			FGameplayTag TagToCheck;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayTagAssetInterface();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("HasMatchingGameplayTag"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020400, 65535, sizeof(GameplayTagAssetInterface_eventHasMatchingGameplayTag_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, GameplayTagAssetInterface_eventHasMatchingGameplayTag_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, GameplayTagAssetInterface_eventHasMatchingGameplayTag_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, GameplayTagAssetInterface_eventHasMatchingGameplayTag_Parms), sizeof(bool), true);
			UProperty* NewProp_TagToCheck = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TagToCheck"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TagToCheck, GameplayTagAssetInterface_eventHasMatchingGameplayTag_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayTag());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("GameplayTags"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/GameplayTagAssetInterface.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Check if the asset has a gameplay tag that matches against the specified tag (expands to include parents of asset tags)\n\n@param TagToCheck    Tag to check for a match\n\n@return True if the asset has a gameplay tag that matches, false if not"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UGameplayTagAssetInterface_NoRegister()
	{
		return UGameplayTagAssetInterface::StaticClass();
	}
	UClass* Z_Construct_UClass_UGameplayTagAssetInterface()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			UInterface::StaticClass();
			Z_Construct_UPackage_GameplayTags();
			OuterClass = UGameplayTagAssetInterface::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20084081;

				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayTagAssetInterface_GetOwnedGameplayTags());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayTagAssetInterface_HasAllMatchingGameplayTags());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayTagAssetInterface_HasAnyMatchingGameplayTags());
				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayTagAssetInterface_HasMatchingGameplayTag());

				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayTagAssetInterface_GetOwnedGameplayTags()); // 4214885081
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayTagAssetInterface_HasAllMatchingGameplayTags()); // 3711940007
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayTagAssetInterface_HasAnyMatchingGameplayTags()); // 1713346129
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayTagAssetInterface_HasMatchingGameplayTag()); // 2494200114
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("CannotImplementInterfaceInBlueprint"), TEXT(""));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UGameplayTagAssetInterface(Z_Construct_UClass_UGameplayTagAssetInterface, TEXT("UGameplayTagAssetInterface"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UGameplayTagAssetInterface);
	UFunction* Z_Construct_UFunction_UBlueprintGameplayTagLibrary_AppendGameplayTagContainers()
	{
		struct BlueprintGameplayTagLibrary_eventAppendGameplayTagContainers_Parms
		{
			FGameplayTagContainer InTagContainer;
			FGameplayTagContainer InOutTagContainer;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UBlueprintGameplayTagLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AppendGameplayTagContainers"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(BlueprintGameplayTagLibrary_eventAppendGameplayTagContainers_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, BlueprintGameplayTagLibrary_eventAppendGameplayTagContainers_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, BlueprintGameplayTagLibrary_eventAppendGameplayTagContainers_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, BlueprintGameplayTagLibrary_eventAppendGameplayTagContainers_Parms), sizeof(bool), true);
			UProperty* NewProp_InOutTagContainer = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InOutTagContainer"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InOutTagContainer, BlueprintGameplayTagLibrary_eventAppendGameplayTagContainers_Parms), 0x0000000008000180, Z_Construct_UScriptStruct_FGameplayTagContainer());
			UProperty* NewProp_InTagContainer = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InTagContainer"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InTagContainer, BlueprintGameplayTagLibrary_eventAppendGameplayTagContainers_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FGameplayTagContainer());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("GameplayTags|Tag Container"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BlueprintGameplayTagLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Takes 2 Gameplay Tag Containers Appends the In Container to the In/Out Container\n\n@param InTagContainer                 The container to append.\n@param InOutTagContainer              The container that will be appended too."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBlueprintGameplayTagLibrary_DoesContainerHaveTag()
	{
		struct BlueprintGameplayTagLibrary_eventDoesContainerHaveTag_Parms
		{
			FGameplayTagContainer TagContainer;
			TEnumAsByte<EGameplayTagMatchType::Type> ContainerTagsMatchType;
			FGameplayTag Tag;
			TEnumAsByte<EGameplayTagMatchType::Type> TagMatchType;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UBlueprintGameplayTagLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DoesContainerHaveTag"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(BlueprintGameplayTagLibrary_eventDoesContainerHaveTag_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, BlueprintGameplayTagLibrary_eventDoesContainerHaveTag_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, BlueprintGameplayTagLibrary_eventDoesContainerHaveTag_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, BlueprintGameplayTagLibrary_eventDoesContainerHaveTag_Parms), sizeof(bool), true);
			UProperty* NewProp_TagMatchType = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TagMatchType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(TagMatchType, BlueprintGameplayTagLibrary_eventDoesContainerHaveTag_Parms), 0x0000000000000080, Z_Construct_UEnum_GameplayTags_EGameplayTagMatchType());
			UProperty* NewProp_Tag = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Tag"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Tag, BlueprintGameplayTagLibrary_eventDoesContainerHaveTag_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FGameplayTag());
			UProperty* NewProp_ContainerTagsMatchType = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ContainerTagsMatchType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(ContainerTagsMatchType, BlueprintGameplayTagLibrary_eventDoesContainerHaveTag_Parms), 0x0000000000000080, Z_Construct_UEnum_GameplayTags_EGameplayTagMatchType());
			UProperty* NewProp_TagContainer = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TagContainer"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TagContainer, BlueprintGameplayTagLibrary_eventDoesContainerHaveTag_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FGameplayTagContainer());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("GameplayTags|Tag Container"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BlueprintGameplayTagLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Check if the specified tag container has the specified tag, using the specified tag matching types\n\n@param TagContainer                          Container to check for the tag\n@param ContainerTagsMatchType        Matching options to use for tags inside the container\n@param Tag                                           Tag to check for in the container\n@param TagMatchType                          Matching option to use for the tag\n\n@return True if the container has the specified tag, false if it does not"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBlueprintGameplayTagLibrary_DoesContainerMatchAllTagsInContainer()
	{
		struct BlueprintGameplayTagLibrary_eventDoesContainerMatchAllTagsInContainer_Parms
		{
			FGameplayTagContainer TagContainer;
			FGameplayTagContainer OtherContainer;
			bool bCountEmptyAsMatch;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UBlueprintGameplayTagLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DoesContainerMatchAllTagsInContainer"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(BlueprintGameplayTagLibrary_eventDoesContainerMatchAllTagsInContainer_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, BlueprintGameplayTagLibrary_eventDoesContainerMatchAllTagsInContainer_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, BlueprintGameplayTagLibrary_eventDoesContainerMatchAllTagsInContainer_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, BlueprintGameplayTagLibrary_eventDoesContainerMatchAllTagsInContainer_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCountEmptyAsMatch, BlueprintGameplayTagLibrary_eventDoesContainerMatchAllTagsInContainer_Parms, bool);
			UProperty* NewProp_bCountEmptyAsMatch = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bCountEmptyAsMatch"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCountEmptyAsMatch, BlueprintGameplayTagLibrary_eventDoesContainerMatchAllTagsInContainer_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bCountEmptyAsMatch, BlueprintGameplayTagLibrary_eventDoesContainerMatchAllTagsInContainer_Parms), sizeof(bool), true);
			UProperty* NewProp_OtherContainer = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OtherContainer"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(OtherContainer, BlueprintGameplayTagLibrary_eventDoesContainerMatchAllTagsInContainer_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FGameplayTagContainer());
			UProperty* NewProp_TagContainer = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TagContainer"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TagContainer, BlueprintGameplayTagLibrary_eventDoesContainerMatchAllTagsInContainer_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FGameplayTagContainer());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("GameplayTags|Tag Container"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BlueprintGameplayTagLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Check if the specified tag container matches ALL of the tags in the other container. Matching is performed by expanding the tag container out to include all of its parent tags as well.\n\n@param TagContainer                  Container to check if it matches all of the tags in the other container\n@param OtherContainer                Container to check against\n@param bCountEmptyAsMatch    If true, the other container will count as a match, even if it's empty\n\n@return True if the container matches ALL of the tags in the other container"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBlueprintGameplayTagLibrary_DoesContainerMatchAnyTagsInContainer()
	{
		struct BlueprintGameplayTagLibrary_eventDoesContainerMatchAnyTagsInContainer_Parms
		{
			FGameplayTagContainer TagContainer;
			FGameplayTagContainer OtherContainer;
			bool bCountEmptyAsMatch;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UBlueprintGameplayTagLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DoesContainerMatchAnyTagsInContainer"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(BlueprintGameplayTagLibrary_eventDoesContainerMatchAnyTagsInContainer_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, BlueprintGameplayTagLibrary_eventDoesContainerMatchAnyTagsInContainer_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, BlueprintGameplayTagLibrary_eventDoesContainerMatchAnyTagsInContainer_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, BlueprintGameplayTagLibrary_eventDoesContainerMatchAnyTagsInContainer_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCountEmptyAsMatch, BlueprintGameplayTagLibrary_eventDoesContainerMatchAnyTagsInContainer_Parms, bool);
			UProperty* NewProp_bCountEmptyAsMatch = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bCountEmptyAsMatch"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCountEmptyAsMatch, BlueprintGameplayTagLibrary_eventDoesContainerMatchAnyTagsInContainer_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bCountEmptyAsMatch, BlueprintGameplayTagLibrary_eventDoesContainerMatchAnyTagsInContainer_Parms), sizeof(bool), true);
			UProperty* NewProp_OtherContainer = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OtherContainer"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(OtherContainer, BlueprintGameplayTagLibrary_eventDoesContainerMatchAnyTagsInContainer_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FGameplayTagContainer());
			UProperty* NewProp_TagContainer = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TagContainer"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TagContainer, BlueprintGameplayTagLibrary_eventDoesContainerMatchAnyTagsInContainer_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FGameplayTagContainer());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("GameplayTags|Tag Container"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BlueprintGameplayTagLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Check if the specified tag container matches ANY of the tags in the other container. Matching is performed by expanding the tag container out to include all of its parent tags as well.\n\n@param TagContainer                  Container to check if it matches any of the tags in the other container\n@param OtherContainer                Container to check against\n@param bCountEmptyAsMatch    If true, the other container will count as a match, even if it's empty\n\n@return True if the container matches ANY of the tags in the other container"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBlueprintGameplayTagLibrary_DoesContainerMatchTagQuery()
	{
		struct BlueprintGameplayTagLibrary_eventDoesContainerMatchTagQuery_Parms
		{
			FGameplayTagContainer TagContainer;
			FGameplayTagQuery TagQuery;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UBlueprintGameplayTagLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DoesContainerMatchTagQuery"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(BlueprintGameplayTagLibrary_eventDoesContainerMatchTagQuery_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, BlueprintGameplayTagLibrary_eventDoesContainerMatchTagQuery_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, BlueprintGameplayTagLibrary_eventDoesContainerMatchTagQuery_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, BlueprintGameplayTagLibrary_eventDoesContainerMatchTagQuery_Parms), sizeof(bool), true);
			UProperty* NewProp_TagQuery = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TagQuery"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TagQuery, BlueprintGameplayTagLibrary_eventDoesContainerMatchTagQuery_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FGameplayTagQuery());
			UProperty* NewProp_TagContainer = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TagContainer"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TagContainer, BlueprintGameplayTagLibrary_eventDoesContainerMatchTagQuery_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FGameplayTagContainer());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("GameplayTags|Tag Container"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BlueprintGameplayTagLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Check if the specified tag container matches the given Tag Query.\n\n@param TagContainer                  Container to check if it matches all of the tags in the other container\n@param TagQuery                              Query to match against\n\n@return True if the container matches the query, false otherwise."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBlueprintGameplayTagLibrary_DoesTagAssetInterfaceHaveTag()
	{
		struct BlueprintGameplayTagLibrary_eventDoesTagAssetInterfaceHaveTag_Parms
		{
			TScriptInterface<IGameplayTagAssetInterface> TagContainerInterface;
			TEnumAsByte<EGameplayTagMatchType::Type> ContainerTagsMatchType;
			FGameplayTag Tag;
			TEnumAsByte<EGameplayTagMatchType::Type> TagMatchType;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UBlueprintGameplayTagLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DoesTagAssetInterfaceHaveTag"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(BlueprintGameplayTagLibrary_eventDoesTagAssetInterfaceHaveTag_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, BlueprintGameplayTagLibrary_eventDoesTagAssetInterfaceHaveTag_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, BlueprintGameplayTagLibrary_eventDoesTagAssetInterfaceHaveTag_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, BlueprintGameplayTagLibrary_eventDoesTagAssetInterfaceHaveTag_Parms), sizeof(bool), true);
			UProperty* NewProp_TagMatchType = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TagMatchType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(TagMatchType, BlueprintGameplayTagLibrary_eventDoesTagAssetInterfaceHaveTag_Parms), 0x0000000000000080, Z_Construct_UEnum_GameplayTags_EGameplayTagMatchType());
			UProperty* NewProp_Tag = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Tag"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Tag, BlueprintGameplayTagLibrary_eventDoesTagAssetInterfaceHaveTag_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FGameplayTag());
			UProperty* NewProp_ContainerTagsMatchType = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ContainerTagsMatchType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(ContainerTagsMatchType, BlueprintGameplayTagLibrary_eventDoesTagAssetInterfaceHaveTag_Parms), 0x0000000000000080, Z_Construct_UEnum_GameplayTags_EGameplayTagMatchType());
			UProperty* NewProp_TagContainerInterface = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TagContainerInterface"), RF_Public|RF_Transient|RF_Native) UInterfaceProperty(CPP_PROPERTY_BASE(TagContainerInterface, BlueprintGameplayTagLibrary_eventDoesTagAssetInterfaceHaveTag_Parms), 0x0004000000000080, Z_Construct_UClass_UGameplayTagAssetInterface_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("TRUE"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BlueprintGameplayTagLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Check if the specified tag container has the specified tag, using the specified tag matching types\n\n@param TagContainerInterface          An Interface to a tag container\n@param ContainerTagsMatchType         Matching options to use for tags inside the container\n@param Tag                                            Tag to check for in the container\n@param TagMatchType                           Matching option to use for the tag\n\n@return True if the container has the specified tag, false if it does not"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBlueprintGameplayTagLibrary_DoGameplayTagsMatch()
	{
		struct BlueprintGameplayTagLibrary_eventDoGameplayTagsMatch_Parms
		{
			FGameplayTag TagOne;
			FGameplayTag TagTwo;
			TEnumAsByte<EGameplayTagMatchType::Type> TagOneMatchType;
			TEnumAsByte<EGameplayTagMatchType::Type> TagTwoMatchType;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UBlueprintGameplayTagLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DoGameplayTagsMatch"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(BlueprintGameplayTagLibrary_eventDoGameplayTagsMatch_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, BlueprintGameplayTagLibrary_eventDoGameplayTagsMatch_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, BlueprintGameplayTagLibrary_eventDoGameplayTagsMatch_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, BlueprintGameplayTagLibrary_eventDoGameplayTagsMatch_Parms), sizeof(bool), true);
			UProperty* NewProp_TagTwoMatchType = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TagTwoMatchType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(TagTwoMatchType, BlueprintGameplayTagLibrary_eventDoGameplayTagsMatch_Parms), 0x0000000000000080, Z_Construct_UEnum_GameplayTags_EGameplayTagMatchType());
			UProperty* NewProp_TagOneMatchType = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TagOneMatchType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(TagOneMatchType, BlueprintGameplayTagLibrary_eventDoGameplayTagsMatch_Parms), 0x0000000000000080, Z_Construct_UEnum_GameplayTags_EGameplayTagMatchType());
			UProperty* NewProp_TagTwo = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TagTwo"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TagTwo, BlueprintGameplayTagLibrary_eventDoGameplayTagsMatch_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FGameplayTag());
			UProperty* NewProp_TagOne = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TagOne"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TagOne, BlueprintGameplayTagLibrary_eventDoGameplayTagsMatch_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FGameplayTag());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("GameplayTags"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BlueprintGameplayTagLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Determine if the specified gameplay tags match, given the specified match types\n\n@param TagOne                        First tag to check\n@param TagTwo                        Second tag to check\n@param TagOneMatchType       Matching type to use on the first tag\n@param TagTwoMatchType       Matching type to use on the second tag\n\n@return True if the tags match, false if they do not"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBlueprintGameplayTagLibrary_GetNumGameplayTagsInContainer()
	{
		struct BlueprintGameplayTagLibrary_eventGetNumGameplayTagsInContainer_Parms
		{
			FGameplayTagContainer TagContainer;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UBlueprintGameplayTagLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetNumGameplayTagsInContainer"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(BlueprintGameplayTagLibrary_eventGetNumGameplayTagsInContainer_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, BlueprintGameplayTagLibrary_eventGetNumGameplayTagsInContainer_Parms), 0x0000000000000580);
			UProperty* NewProp_TagContainer = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TagContainer"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TagContainer, BlueprintGameplayTagLibrary_eventGetNumGameplayTagsInContainer_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FGameplayTagContainer());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("GameplayTags|Tag Container"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BlueprintGameplayTagLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get the number of gameplay tags in the specified container\n\n@param TagContainer  Tag container to get the number of tags from\n\n@return The number of tags in the specified container"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBlueprintGameplayTagLibrary_HasAllMatchingGameplayTags()
	{
		struct BlueprintGameplayTagLibrary_eventHasAllMatchingGameplayTags_Parms
		{
			TScriptInterface<IGameplayTagAssetInterface> TagContainerInterface;
			FGameplayTagContainer OtherContainer;
			bool bCountEmptyAsMatch;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UBlueprintGameplayTagLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("HasAllMatchingGameplayTags"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(BlueprintGameplayTagLibrary_eventHasAllMatchingGameplayTags_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, BlueprintGameplayTagLibrary_eventHasAllMatchingGameplayTags_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, BlueprintGameplayTagLibrary_eventHasAllMatchingGameplayTags_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, BlueprintGameplayTagLibrary_eventHasAllMatchingGameplayTags_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCountEmptyAsMatch, BlueprintGameplayTagLibrary_eventHasAllMatchingGameplayTags_Parms, bool);
			UProperty* NewProp_bCountEmptyAsMatch = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bCountEmptyAsMatch"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCountEmptyAsMatch, BlueprintGameplayTagLibrary_eventHasAllMatchingGameplayTags_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bCountEmptyAsMatch, BlueprintGameplayTagLibrary_eventHasAllMatchingGameplayTags_Parms), sizeof(bool), true);
			UProperty* NewProp_OtherContainer = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OtherContainer"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(OtherContainer, BlueprintGameplayTagLibrary_eventHasAllMatchingGameplayTags_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FGameplayTagContainer());
			UProperty* NewProp_TagContainerInterface = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TagContainerInterface"), RF_Public|RF_Transient|RF_Native) UInterfaceProperty(CPP_PROPERTY_BASE(TagContainerInterface, BlueprintGameplayTagLibrary_eventHasAllMatchingGameplayTags_Parms), 0x0004000000000080, Z_Construct_UClass_UGameplayTagAssetInterface_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("TRUE"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BlueprintGameplayTagLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Check Gameplay tags in the interface has all of the specified tags in the tag container (expands to include parents of asset tags)\n\n@param TagContainerInterface         An Interface to a tag container\n@param OtherContainer                        A Tag Container\n\n@return True if the tagcontainer in the interface has all the tags inside the container."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBlueprintGameplayTagLibrary_MakeGameplayTagQuery()
	{
		struct BlueprintGameplayTagLibrary_eventMakeGameplayTagQuery_Parms
		{
			FGameplayTagQuery TagQuery;
			FGameplayTagQuery ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UBlueprintGameplayTagLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MakeGameplayTagQuery"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(BlueprintGameplayTagLibrary_eventMakeGameplayTagQuery_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, BlueprintGameplayTagLibrary_eventMakeGameplayTagQuery_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FGameplayTagQuery());
			UProperty* NewProp_TagQuery = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TagQuery"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TagQuery, BlueprintGameplayTagLibrary_eventMakeGameplayTagQuery_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayTagQuery());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("GameplayTags"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BlueprintGameplayTagLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Creates a literal FGameplayTagQuery\n\n@param       Value   value to set the FGameplayTagQuery to\n\n@return      The literal FGameplayTagQuery"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBlueprintGameplayTagLibrary_MakeLiteralGameplayTag()
	{
		struct BlueprintGameplayTagLibrary_eventMakeLiteralGameplayTag_Parms
		{
			FGameplayTag Value;
			FGameplayTag ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UBlueprintGameplayTagLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MakeLiteralGameplayTag"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(BlueprintGameplayTagLibrary_eventMakeLiteralGameplayTag_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, BlueprintGameplayTagLibrary_eventMakeLiteralGameplayTag_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FGameplayTag());
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Value, BlueprintGameplayTagLibrary_eventMakeLiteralGameplayTag_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGameplayTag());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("GameplayTags"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BlueprintGameplayTagLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Creates a literal FGameplayTag\n\n@param       Value   value to set the FGameplayTag to\n\n@return      The literal FGameplayTag"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UBlueprintGameplayTagLibrary_NoRegister()
	{
		return UBlueprintGameplayTagLibrary::StaticClass();
	}
	UClass* Z_Construct_UClass_UBlueprintGameplayTagLibrary()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBlueprintFunctionLibrary();
			Z_Construct_UPackage_GameplayTags();
			OuterClass = UBlueprintGameplayTagLibrary::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;

				OuterClass->LinkChild(Z_Construct_UFunction_UBlueprintGameplayTagLibrary_AppendGameplayTagContainers());
				OuterClass->LinkChild(Z_Construct_UFunction_UBlueprintGameplayTagLibrary_DoesContainerHaveTag());
				OuterClass->LinkChild(Z_Construct_UFunction_UBlueprintGameplayTagLibrary_DoesContainerMatchAllTagsInContainer());
				OuterClass->LinkChild(Z_Construct_UFunction_UBlueprintGameplayTagLibrary_DoesContainerMatchAnyTagsInContainer());
				OuterClass->LinkChild(Z_Construct_UFunction_UBlueprintGameplayTagLibrary_DoesContainerMatchTagQuery());
				OuterClass->LinkChild(Z_Construct_UFunction_UBlueprintGameplayTagLibrary_DoesTagAssetInterfaceHaveTag());
				OuterClass->LinkChild(Z_Construct_UFunction_UBlueprintGameplayTagLibrary_DoGameplayTagsMatch());
				OuterClass->LinkChild(Z_Construct_UFunction_UBlueprintGameplayTagLibrary_GetNumGameplayTagsInContainer());
				OuterClass->LinkChild(Z_Construct_UFunction_UBlueprintGameplayTagLibrary_HasAllMatchingGameplayTags());
				OuterClass->LinkChild(Z_Construct_UFunction_UBlueprintGameplayTagLibrary_MakeGameplayTagQuery());
				OuterClass->LinkChild(Z_Construct_UFunction_UBlueprintGameplayTagLibrary_MakeLiteralGameplayTag());

				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UBlueprintGameplayTagLibrary_AppendGameplayTagContainers()); // 938951930
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UBlueprintGameplayTagLibrary_DoesContainerHaveTag()); // 2734394443
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UBlueprintGameplayTagLibrary_DoesContainerMatchAllTagsInContainer()); // 1233346768
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UBlueprintGameplayTagLibrary_DoesContainerMatchAnyTagsInContainer()); // 204065199
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UBlueprintGameplayTagLibrary_DoesContainerMatchTagQuery()); // 1493398066
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UBlueprintGameplayTagLibrary_DoesTagAssetInterfaceHaveTag()); // 1137774017
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UBlueprintGameplayTagLibrary_DoGameplayTagsMatch()); // 368826740
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UBlueprintGameplayTagLibrary_GetNumGameplayTagsInContainer()); // 2758941007
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UBlueprintGameplayTagLibrary_HasAllMatchingGameplayTags()); // 4174950713
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UBlueprintGameplayTagLibrary_MakeGameplayTagQuery()); // 432118197
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UBlueprintGameplayTagLibrary_MakeLiteralGameplayTag()); // 929144690
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BlueprintGameplayTagLibrary.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/BlueprintGameplayTagLibrary.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBlueprintGameplayTagLibrary(Z_Construct_UClass_UBlueprintGameplayTagLibrary, TEXT("UBlueprintGameplayTagLibrary"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBlueprintGameplayTagLibrary);
	UScriptStruct* Z_Construct_UScriptStruct_FGameplayTagNode()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayTags();
		extern uint32 Get_Z_Construct_UScriptStruct_FGameplayTagNode_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("GameplayTagNode"), sizeof(FGameplayTagNode), Get_Z_Construct_UScriptStruct_FGameplayTagNode_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GameplayTagNode"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FGameplayTagNode>, EStructFlags(0x00000001));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/GameplayTagsManager.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Simple tree node for gameplay tags"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FGameplayTagNode_CRC() { return 1326987706U; }
	UScriptStruct* Z_Construct_UScriptStruct_FGameplayTagTableRow()
	{
		UPackage* Outer=Z_Construct_UPackage_GameplayTags();
		extern uint32 Get_Z_Construct_UScriptStruct_FGameplayTagTableRow_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("GameplayTagTableRow"), sizeof(FGameplayTagTableRow), Get_Z_Construct_UScriptStruct_FGameplayTagTableRow_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GameplayTagTableRow"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FTableRowBase(), new UScriptStruct::TCppStructOps<FGameplayTagTableRow>, EStructFlags(0x00000001));
			UProperty* NewProp_CategoryText = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CategoryText"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(CategoryText, FGameplayTagTableRow), 0x0000000000000005);
			UProperty* NewProp_Tag = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Tag"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Tag, FGameplayTagTableRow), 0x0000000000000005);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/GameplayTagsManager.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Simple struct for a table row in the gameplay tag table"));
			MetaData->SetValue(NewProp_CategoryText, TEXT("Category"), TEXT("GameplayTag"));
			MetaData->SetValue(NewProp_CategoryText, TEXT("ModuleRelativePath"), TEXT("Classes/GameplayTagsManager.h"));
			MetaData->SetValue(NewProp_CategoryText, TEXT("ToolTip"), TEXT("Text that describes this category - not all tags have categories"));
			MetaData->SetValue(NewProp_Tag, TEXT("Category"), TEXT("GameplayTag"));
			MetaData->SetValue(NewProp_Tag, TEXT("ModuleRelativePath"), TEXT("Classes/GameplayTagsManager.h"));
			MetaData->SetValue(NewProp_Tag, TEXT("ToolTip"), TEXT("Tag specified in the table"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FGameplayTagTableRow_CRC() { return 991496985U; }
	UFunction* Z_Construct_UFunction_UGameplayTagsManager_RequestGameplayTag()
	{
		struct GameplayTagsManager_eventRequestGameplayTag_Parms
		{
			FName TagName;
			bool ErrorIfNotFound;
			FGameplayTag ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGameplayTagsManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RequestGameplayTag"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(GameplayTagsManager_eventRequestGameplayTag_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, GameplayTagsManager_eventRequestGameplayTag_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FGameplayTag());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ErrorIfNotFound, GameplayTagsManager_eventRequestGameplayTag_Parms, bool);
			UProperty* NewProp_ErrorIfNotFound = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ErrorIfNotFound"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ErrorIfNotFound, GameplayTagsManager_eventRequestGameplayTag_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(ErrorIfNotFound, GameplayTagsManager_eventRequestGameplayTag_Parms), sizeof(bool), true);
			UProperty* NewProp_TagName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TagName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(TagName, GameplayTagsManager_eventRequestGameplayTag_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("GameplayTags"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_ErrorIfNotFound"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/GameplayTagsManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the FGameplayTag that corresponds to the TagName\n\n@param TagName The Name of the tag to search for\n\n@param ErrorIfNotfound: ensure() that tag exists.\n\n@return Will return the corresponding FGameplayTag or an empty one if not found."));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UGameplayTagsManager_NoRegister()
	{
		return UGameplayTagsManager::StaticClass();
	}
	UClass* Z_Construct_UClass_UGameplayTagsManager()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_GameplayTags();
			OuterClass = UGameplayTagsManager::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_UGameplayTagsManager_RequestGameplayTag());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_GameplayTagTables = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GameplayTagTables"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(GameplayTagTables, UGameplayTagsManager), 0x0000000000000000);
				UProperty* NewProp_GameplayTagTables_Inner = new(EC_InternalUseOnlyConstructor, NewProp_GameplayTagTables, TEXT("GameplayTagTables"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UDataTable_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGameplayTagsManager_RequestGameplayTag()); // 155310127
				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("GameplayTagsManager.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/GameplayTagsManager.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Holds global data loaded at startup, is in a singleton UObject so it works properly with hot reload"));
				MetaData->SetValue(NewProp_GameplayTagTables, TEXT("ModuleRelativePath"), TEXT("Classes/GameplayTagsManager.h"));
				MetaData->SetValue(NewProp_GameplayTagTables, TEXT("ToolTip"), TEXT("Holds all of the valid gameplay-related tags that can be applied to assets"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UGameplayTagsManager(Z_Construct_UClass_UGameplayTagsManager, TEXT("UGameplayTagsManager"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UGameplayTagsManager);
	UClass* Z_Construct_UClass_UGameplayTagsSettings_NoRegister()
	{
		return UGameplayTagsSettings::StaticClass();
	}
	UClass* Z_Construct_UClass_UGameplayTagsSettings()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_GameplayTags();
			OuterClass = UGameplayTagsSettings::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100286;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_GameplayTags = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GameplayTags"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(GameplayTags, UGameplayTagsSettings), 0x0000000000004001);
				UProperty* NewProp_GameplayTags_Inner = new(EC_InternalUseOnlyConstructor, NewProp_GameplayTags, TEXT("GameplayTags"), RF_Public|RF_Transient|RF_Native) UStrProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000004000);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("GameplayTags"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("GameplayTagsSettings.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/GameplayTagsSettings.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Class for importing GameplayTags directly from a config file.\nFGameplayTagsEditorModule::StartupModule adds this class to the Project Settings menu to be edited.\nEditing this in Project Settings will output changes to Config/DEfaultEngine.ini.\n\nPrimary advantages of this approach are:\n-Adding new tags doesn't require checking out external and editing file (CSV or xls) then reimporting.\n-New tags are mergeable since .ini are text and non exclusive checkout.\n\nTo do:\n-Better support could be added for adding new tags. We could match existing tags and autocomplete subtags as\nthe user types (e.g, autocomplete 'Damage.Physical' as the user is adding a 'Damage.Physical.Slash' tag)."));
				MetaData->SetValue(NewProp_GameplayTags, TEXT("Category"), TEXT("GameplayTags"));
				MetaData->SetValue(NewProp_GameplayTags, TEXT("ModuleRelativePath"), TEXT("Classes/GameplayTagsSettings.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UGameplayTagsSettings(Z_Construct_UClass_UGameplayTagsSettings, TEXT("UGameplayTagsSettings"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UGameplayTagsSettings);
	UPackage* Z_Construct_UPackage_GameplayTags()
	{
		static UPackage* ReturnPackage = NULL;
		if (!ReturnPackage)
		{
			ReturnPackage = CastChecked<UPackage>(StaticFindObjectFast(UPackage::StaticClass(), NULL, FName(TEXT("/Script/GameplayTags")), false, false));
			ReturnPackage->SetPackageFlags(PKG_CompiledIn | 0x00000000);
			FGuid Guid;
			Guid.A = 0xEF32158F;
			Guid.B = 0x827A55F0;
			Guid.C = 0x00000000;
			Guid.D = 0x00000000;
			ReturnPackage->SetGuid(Guid);

		}
		return ReturnPackage;
	}
#endif

PRAGMA_ENABLE_DEPRECATION_WARNINGS
