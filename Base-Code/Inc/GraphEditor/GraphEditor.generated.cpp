// Copyright 1998-2015 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Boilerplate C++ definitions for a single module.
	This is automatically generated by UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "Private/GraphEditorCommon.h"
#include "GraphEditor.generated.dep.h"
PRAGMA_DISABLE_DEPRECATION_WARNINGS
void EmptyLinkFunctionForGeneratedCodeGraphEditor() {}
	void UGraphEditorSettings::StaticRegisterNativesUGraphEditorSettings()
	{
	}
	IMPLEMENT_CLASS(UGraphEditorSettings, 3102467216);
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	COREUOBJECT_API class UClass* Z_Construct_UClass_UObject();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FLinearColor();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FVector2D();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EBlueprintPinStyleType();

	GRAPHEDITOR_API class UClass* Z_Construct_UClass_UGraphEditorSettings_NoRegister();
	GRAPHEDITOR_API class UClass* Z_Construct_UClass_UGraphEditorSettings();
	GRAPHEDITOR_API class UPackage* Z_Construct_UPackage_GraphEditor();
	UClass* Z_Construct_UClass_UGraphEditorSettings_NoRegister()
	{
		return UGraphEditorSettings::StaticClass();
	}
	UClass* Z_Construct_UClass_UGraphEditorSettings()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_GraphEditor();
			OuterClass = UGraphEditorSettings::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100084;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_TracePositionExponent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TracePositionExponent"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(TracePositionExponent, UGraphEditorSettings), 0x0000000000000000);
				UProperty* NewProp_TracePositionBonusPeriod = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TracePositionBonusPeriod"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(TracePositionBonusPeriod, UGraphEditorSettings), 0x0000000000000000);
				UProperty* NewProp_TraceReleaseExponent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TraceReleaseExponent"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(TraceReleaseExponent, UGraphEditorSettings), 0x0000000000000000);
				UProperty* NewProp_TraceReleasePeriod = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TraceReleasePeriod"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(TraceReleasePeriod, UGraphEditorSettings), 0x0000000000000000);
				UProperty* NewProp_TraceReleaseWireThickness = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TraceReleaseWireThickness"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(TraceReleaseWireThickness, UGraphEditorSettings), 0x0000000000004001);
				UProperty* NewProp_TraceReleaseColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TraceReleaseColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TraceReleaseColor, UGraphEditorSettings), 0x0000000000004001, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_TraceSustainHoldPeriod = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TraceSustainHoldPeriod"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(TraceSustainHoldPeriod, UGraphEditorSettings), 0x0000000000000000);
				UProperty* NewProp_TraceSustainWireThickness = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TraceSustainWireThickness"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(TraceSustainWireThickness, UGraphEditorSettings), 0x0000000000004001);
				UProperty* NewProp_TraceSustainColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TraceSustainColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TraceSustainColor, UGraphEditorSettings), 0x0000000000004001, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_TraceDecayExponent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TraceDecayExponent"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(TraceDecayExponent, UGraphEditorSettings), 0x0000000000000000);
				UProperty* NewProp_TraceDecayPeriod = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TraceDecayPeriod"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(TraceDecayPeriod, UGraphEditorSettings), 0x0000000000000000);
				UProperty* NewProp_TraceAttackHoldPeriod = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TraceAttackHoldPeriod"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(TraceAttackHoldPeriod, UGraphEditorSettings), 0x0000000000000000);
				UProperty* NewProp_TraceAttackWireThickness = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TraceAttackWireThickness"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(TraceAttackWireThickness, UGraphEditorSettings), 0x0000000000004001);
				UProperty* NewProp_TraceAttackColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TraceAttackColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TraceAttackColor, UGraphEditorSettings), 0x0000000000004001, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_DefaultCommentNodeTitleColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultCommentNodeTitleColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DefaultCommentNodeTitleColor, UGraphEditorSettings), 0x0000000000004001, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_ResultNodeTitleColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ResultNodeTitleColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ResultNodeTitleColor, UGraphEditorSettings), 0x0000000000004001, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_ExecSequenceNodeTitleColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ExecSequenceNodeTitleColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ExecSequenceNodeTitleColor, UGraphEditorSettings), 0x0000000000004001, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_ExecBranchNodeTitleColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ExecBranchNodeTitleColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ExecBranchNodeTitleColor, UGraphEditorSettings), 0x0000000000004001, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_FunctionTerminatorNodeTitleColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FunctionTerminatorNodeTitleColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(FunctionTerminatorNodeTitleColor, UGraphEditorSettings), 0x0000000000004001, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_ParentFunctionCallNodeTitleColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ParentFunctionCallNodeTitleColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ParentFunctionCallNodeTitleColor, UGraphEditorSettings), 0x0000000000004001, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_PureFunctionCallNodeTitleColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PureFunctionCallNodeTitleColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PureFunctionCallNodeTitleColor, UGraphEditorSettings), 0x0000000000004001, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_FunctionCallNodeTitleColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FunctionCallNodeTitleColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(FunctionCallNodeTitleColor, UGraphEditorSettings), 0x0000000000004001, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_EventNodeTitleColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EventNodeTitleColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(EventNodeTitleColor, UGraphEditorSettings), 0x0000000000004001, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_IndexPinTypeColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("IndexPinTypeColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(IndexPinTypeColor, UGraphEditorSettings), 0x0000000000004001, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_TransformPinTypeColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TransformPinTypeColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TransformPinTypeColor, UGraphEditorSettings), 0x0000000000004001, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_RotatorPinTypeColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RotatorPinTypeColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(RotatorPinTypeColor, UGraphEditorSettings), 0x0000000000004001, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_VectorPinTypeColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VectorPinTypeColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(VectorPinTypeColor, UGraphEditorSettings), 0x0000000000004001, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_WildcardPinTypeColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WildcardPinTypeColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(WildcardPinTypeColor, UGraphEditorSettings), 0x0000000000004001, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_StructPinTypeColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StructPinTypeColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(StructPinTypeColor, UGraphEditorSettings), 0x0000000000004001, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_TextPinTypeColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TextPinTypeColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TextPinTypeColor, UGraphEditorSettings), 0x0000000000004001, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_StringPinTypeColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StringPinTypeColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(StringPinTypeColor, UGraphEditorSettings), 0x0000000000004001, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_InterfacePinTypeColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InterfacePinTypeColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InterfacePinTypeColor, UGraphEditorSettings), 0x0000000000004001, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_ObjectPinTypeColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ObjectPinTypeColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ObjectPinTypeColor, UGraphEditorSettings), 0x0000000000004001, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_DelegatePinTypeColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DelegatePinTypeColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DelegatePinTypeColor, UGraphEditorSettings), 0x0000000000004001, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_AssetClassPinTypeColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AssetClassPinTypeColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(AssetClassPinTypeColor, UGraphEditorSettings), 0x0000000000004001, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_AssetPinTypeColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AssetPinTypeColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(AssetPinTypeColor, UGraphEditorSettings), 0x0000000000004001, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_NamePinTypeColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NamePinTypeColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(NamePinTypeColor, UGraphEditorSettings), 0x0000000000004001, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_FloatPinTypeColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FloatPinTypeColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(FloatPinTypeColor, UGraphEditorSettings), 0x0000000000004001, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_IntPinTypeColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("IntPinTypeColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(IntPinTypeColor, UGraphEditorSettings), 0x0000000000004001, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_ClassPinTypeColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ClassPinTypeColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ClassPinTypeColor, UGraphEditorSettings), 0x0000000000004001, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_BytePinTypeColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BytePinTypeColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(BytePinTypeColor, UGraphEditorSettings), 0x0000000000004001, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_BooleanPinTypeColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BooleanPinTypeColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(BooleanPinTypeColor, UGraphEditorSettings), 0x0000000000004001, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_ExecutionPinTypeColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ExecutionPinTypeColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ExecutionPinTypeColor, UGraphEditorSettings), 0x0000000000004001, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_DefaultPinTypeColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultPinTypeColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DefaultPinTypeColor, UGraphEditorSettings), 0x0000000000004001, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_BackwardSplineTangentFromVerticalDelta = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BackwardSplineTangentFromVerticalDelta"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(BackwardSplineTangentFromVerticalDelta, UGraphEditorSettings), 0x0000040000004001, Z_Construct_UScriptStruct_FVector2D());
				UProperty* NewProp_BackwardSplineTangentFromHorizontalDelta = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BackwardSplineTangentFromHorizontalDelta"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(BackwardSplineTangentFromHorizontalDelta, UGraphEditorSettings), 0x0000040000004001, Z_Construct_UScriptStruct_FVector2D());
				UProperty* NewProp_BackwardSplineVerticalDeltaRange = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BackwardSplineVerticalDeltaRange"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(BackwardSplineVerticalDeltaRange, UGraphEditorSettings), 0x0000040000004001);
				UProperty* NewProp_BackwardSplineHorizontalDeltaRange = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BackwardSplineHorizontalDeltaRange"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(BackwardSplineHorizontalDeltaRange, UGraphEditorSettings), 0x0000040000004001);
				UProperty* NewProp_ForwardSplineTangentFromVerticalDelta = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ForwardSplineTangentFromVerticalDelta"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ForwardSplineTangentFromVerticalDelta, UGraphEditorSettings), 0x0000040000004001, Z_Construct_UScriptStruct_FVector2D());
				UProperty* NewProp_ForwardSplineTangentFromHorizontalDelta = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ForwardSplineTangentFromHorizontalDelta"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ForwardSplineTangentFromHorizontalDelta, UGraphEditorSettings), 0x0000040000004001, Z_Construct_UScriptStruct_FVector2D());
				UProperty* NewProp_ForwardSplineVerticalDeltaRange = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ForwardSplineVerticalDeltaRange"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ForwardSplineVerticalDeltaRange, UGraphEditorSettings), 0x0000040000004001);
				UProperty* NewProp_ForwardSplineHorizontalDeltaRange = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ForwardSplineHorizontalDeltaRange"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ForwardSplineHorizontalDeltaRange, UGraphEditorSettings), 0x0000040000004001);
				UProperty* NewProp_SplineHoverTolerance = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SplineHoverTolerance"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(SplineHoverTolerance, UGraphEditorSettings), 0x0000000000004001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTreatSplinesLikePins, UGraphEditorSettings, bool);
				UProperty* NewProp_bTreatSplinesLikePins = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bTreatSplinesLikePins"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTreatSplinesLikePins, UGraphEditorSettings), 0x0000000000004001, CPP_BOOL_PROPERTY_BITMASK(bTreatSplinesLikePins, UGraphEditorSettings), sizeof(bool), true);
				UProperty* NewProp_PaddingTowardsNodeEdge = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PaddingTowardsNodeEdge"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(PaddingTowardsNodeEdge, UGraphEditorSettings), 0x0000040000000001);
				UProperty* NewProp_PaddingLeftOfOutput = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PaddingLeftOfOutput"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(PaddingLeftOfOutput, UGraphEditorSettings), 0x0000040000000001);
				UProperty* NewProp_PaddingRightOfInput = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PaddingRightOfInput"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(PaddingRightOfInput, UGraphEditorSettings), 0x0000040000000001);
				UProperty* NewProp_PaddingBelowPin = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PaddingBelowPin"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(PaddingBelowPin, UGraphEditorSettings), 0x0000040000000001);
				UProperty* NewProp_PaddingAbovePin = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PaddingAbovePin"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(PaddingAbovePin, UGraphEditorSettings), 0x0000040000000001);
				UProperty* NewProp_DataPinStyle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DataPinStyle"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(DataPinStyle, UGraphEditorSettings), 0x0000000000004001, Z_Construct_UEnum_Engine_EBlueprintPinStyleType());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("EditorPerProjectUserSettings"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("GraphEditorSettings.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/GraphEditorSettings.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Implements settings for the graph editor."));
				MetaData->SetValue(NewProp_TracePositionExponent, TEXT("ModuleRelativePath"), TEXT("Public/GraphEditorSettings.h"));
				MetaData->SetValue(NewProp_TracePositionBonusPeriod, TEXT("ModuleRelativePath"), TEXT("Public/GraphEditorSettings.h"));
				MetaData->SetValue(NewProp_TracePositionBonusPeriod, TEXT("ToolTip"), TEXT("How much of a bonus does an exec get for being near the top of the trace stack, and how does that fall off with position?"));
				MetaData->SetValue(NewProp_TraceReleaseExponent, TEXT("ModuleRelativePath"), TEXT("Public/GraphEditorSettings.h"));
				MetaData->SetValue(NewProp_TraceReleasePeriod, TEXT("ModuleRelativePath"), TEXT("Public/GraphEditorSettings.h"));
				MetaData->SetValue(NewProp_TraceReleasePeriod, TEXT("ToolTip"), TEXT("How long does it take to fade from the sustain to the release color"));
				MetaData->SetValue(NewProp_TraceReleaseWireThickness, TEXT("Category"), TEXT("Tracing"));
				MetaData->SetValue(NewProp_TraceReleaseWireThickness, TEXT("ModuleRelativePath"), TEXT("Public/GraphEditorSettings.h"));
				MetaData->SetValue(NewProp_TraceReleaseColor, TEXT("Category"), TEXT("Tracing"));
				MetaData->SetValue(NewProp_TraceReleaseColor, TEXT("ModuleRelativePath"), TEXT("Public/GraphEditorSettings.h"));
				MetaData->SetValue(NewProp_TraceSustainHoldPeriod, TEXT("ModuleRelativePath"), TEXT("Public/GraphEditorSettings.h"));
				MetaData->SetValue(NewProp_TraceSustainHoldPeriod, TEXT("ToolTip"), TEXT("How long is the sustain color fully visible"));
				MetaData->SetValue(NewProp_TraceSustainWireThickness, TEXT("Category"), TEXT("Tracing"));
				MetaData->SetValue(NewProp_TraceSustainWireThickness, TEXT("ModuleRelativePath"), TEXT("Public/GraphEditorSettings.h"));
				MetaData->SetValue(NewProp_TraceSustainColor, TEXT("Category"), TEXT("Tracing"));
				MetaData->SetValue(NewProp_TraceSustainColor, TEXT("ModuleRelativePath"), TEXT("Public/GraphEditorSettings.h"));
				MetaData->SetValue(NewProp_TraceDecayExponent, TEXT("ModuleRelativePath"), TEXT("Public/GraphEditorSettings.h"));
				MetaData->SetValue(NewProp_TraceDecayPeriod, TEXT("ModuleRelativePath"), TEXT("Public/GraphEditorSettings.h"));
				MetaData->SetValue(NewProp_TraceDecayPeriod, TEXT("ToolTip"), TEXT("How long does it take to fade from the attack to the sustain color"));
				MetaData->SetValue(NewProp_TraceAttackHoldPeriod, TEXT("ModuleRelativePath"), TEXT("Public/GraphEditorSettings.h"));
				MetaData->SetValue(NewProp_TraceAttackHoldPeriod, TEXT("ToolTip"), TEXT("How long is the attack color fully visible"));
				MetaData->SetValue(NewProp_TraceAttackWireThickness, TEXT("Category"), TEXT("Tracing"));
				MetaData->SetValue(NewProp_TraceAttackWireThickness, TEXT("ModuleRelativePath"), TEXT("Public/GraphEditorSettings.h"));
				MetaData->SetValue(NewProp_TraceAttackColor, TEXT("Category"), TEXT("Tracing"));
				MetaData->SetValue(NewProp_TraceAttackColor, TEXT("ModuleRelativePath"), TEXT("Public/GraphEditorSettings.h"));
				MetaData->SetValue(NewProp_DefaultCommentNodeTitleColor, TEXT("Category"), TEXT("NodeTitleColors"));
				MetaData->SetValue(NewProp_DefaultCommentNodeTitleColor, TEXT("ModuleRelativePath"), TEXT("Public/GraphEditorSettings.h"));
				MetaData->SetValue(NewProp_DefaultCommentNodeTitleColor, TEXT("ToolTip"), TEXT("Default Comment node title color"));
				MetaData->SetValue(NewProp_ResultNodeTitleColor, TEXT("Category"), TEXT("NodeTitleColors"));
				MetaData->SetValue(NewProp_ResultNodeTitleColor, TEXT("ModuleRelativePath"), TEXT("Public/GraphEditorSettings.h"));
				MetaData->SetValue(NewProp_ResultNodeTitleColor, TEXT("ToolTip"), TEXT("Result node title color"));
				MetaData->SetValue(NewProp_ExecSequenceNodeTitleColor, TEXT("Category"), TEXT("NodeTitleColors"));
				MetaData->SetValue(NewProp_ExecSequenceNodeTitleColor, TEXT("ModuleRelativePath"), TEXT("Public/GraphEditorSettings.h"));
				MetaData->SetValue(NewProp_ExecSequenceNodeTitleColor, TEXT("ToolTip"), TEXT("Exec Sequence node title color"));
				MetaData->SetValue(NewProp_ExecBranchNodeTitleColor, TEXT("Category"), TEXT("NodeTitleColors"));
				MetaData->SetValue(NewProp_ExecBranchNodeTitleColor, TEXT("ModuleRelativePath"), TEXT("Public/GraphEditorSettings.h"));
				MetaData->SetValue(NewProp_ExecBranchNodeTitleColor, TEXT("ToolTip"), TEXT("Exec Branch node title color"));
				MetaData->SetValue(NewProp_FunctionTerminatorNodeTitleColor, TEXT("Category"), TEXT("NodeTitleColors"));
				MetaData->SetValue(NewProp_FunctionTerminatorNodeTitleColor, TEXT("ModuleRelativePath"), TEXT("Public/GraphEditorSettings.h"));
				MetaData->SetValue(NewProp_FunctionTerminatorNodeTitleColor, TEXT("ToolTip"), TEXT("Function Terminator node title color"));
				MetaData->SetValue(NewProp_ParentFunctionCallNodeTitleColor, TEXT("Category"), TEXT("NodeTitleColors"));
				MetaData->SetValue(NewProp_ParentFunctionCallNodeTitleColor, TEXT("ModuleRelativePath"), TEXT("Public/GraphEditorSettings.h"));
				MetaData->SetValue(NewProp_ParentFunctionCallNodeTitleColor, TEXT("ToolTip"), TEXT("Parent class function call node title color"));
				MetaData->SetValue(NewProp_PureFunctionCallNodeTitleColor, TEXT("Category"), TEXT("NodeTitleColors"));
				MetaData->SetValue(NewProp_PureFunctionCallNodeTitleColor, TEXT("ModuleRelativePath"), TEXT("Public/GraphEditorSettings.h"));
				MetaData->SetValue(NewProp_PureFunctionCallNodeTitleColor, TEXT("ToolTip"), TEXT("Pure function call node title color"));
				MetaData->SetValue(NewProp_FunctionCallNodeTitleColor, TEXT("Category"), TEXT("NodeTitleColors"));
				MetaData->SetValue(NewProp_FunctionCallNodeTitleColor, TEXT("ModuleRelativePath"), TEXT("Public/GraphEditorSettings.h"));
				MetaData->SetValue(NewProp_FunctionCallNodeTitleColor, TEXT("ToolTip"), TEXT("CallFunction node title color"));
				MetaData->SetValue(NewProp_EventNodeTitleColor, TEXT("Category"), TEXT("NodeTitleColors"));
				MetaData->SetValue(NewProp_EventNodeTitleColor, TEXT("ModuleRelativePath"), TEXT("Public/GraphEditorSettings.h"));
				MetaData->SetValue(NewProp_EventNodeTitleColor, TEXT("ToolTip"), TEXT("Event node title color"));
				MetaData->SetValue(NewProp_IndexPinTypeColor, TEXT("Category"), TEXT("PinColors"));
				MetaData->SetValue(NewProp_IndexPinTypeColor, TEXT("ModuleRelativePath"), TEXT("Public/GraphEditorSettings.h"));
				MetaData->SetValue(NewProp_IndexPinTypeColor, TEXT("ToolTip"), TEXT("Index pin type color"));
				MetaData->SetValue(NewProp_TransformPinTypeColor, TEXT("Category"), TEXT("PinColors"));
				MetaData->SetValue(NewProp_TransformPinTypeColor, TEXT("ModuleRelativePath"), TEXT("Public/GraphEditorSettings.h"));
				MetaData->SetValue(NewProp_TransformPinTypeColor, TEXT("ToolTip"), TEXT("Transform pin type color"));
				MetaData->SetValue(NewProp_RotatorPinTypeColor, TEXT("Category"), TEXT("PinColors"));
				MetaData->SetValue(NewProp_RotatorPinTypeColor, TEXT("ModuleRelativePath"), TEXT("Public/GraphEditorSettings.h"));
				MetaData->SetValue(NewProp_RotatorPinTypeColor, TEXT("ToolTip"), TEXT("Rotator pin type color"));
				MetaData->SetValue(NewProp_VectorPinTypeColor, TEXT("Category"), TEXT("PinColors"));
				MetaData->SetValue(NewProp_VectorPinTypeColor, TEXT("ModuleRelativePath"), TEXT("Public/GraphEditorSettings.h"));
				MetaData->SetValue(NewProp_VectorPinTypeColor, TEXT("ToolTip"), TEXT("Vector pin type color"));
				MetaData->SetValue(NewProp_WildcardPinTypeColor, TEXT("Category"), TEXT("PinColors"));
				MetaData->SetValue(NewProp_WildcardPinTypeColor, TEXT("ModuleRelativePath"), TEXT("Public/GraphEditorSettings.h"));
				MetaData->SetValue(NewProp_WildcardPinTypeColor, TEXT("ToolTip"), TEXT("Wildcard pin type color"));
				MetaData->SetValue(NewProp_StructPinTypeColor, TEXT("Category"), TEXT("PinColors"));
				MetaData->SetValue(NewProp_StructPinTypeColor, TEXT("ModuleRelativePath"), TEXT("Public/GraphEditorSettings.h"));
				MetaData->SetValue(NewProp_StructPinTypeColor, TEXT("ToolTip"), TEXT("Struct pin type color"));
				MetaData->SetValue(NewProp_TextPinTypeColor, TEXT("Category"), TEXT("PinColors"));
				MetaData->SetValue(NewProp_TextPinTypeColor, TEXT("ModuleRelativePath"), TEXT("Public/GraphEditorSettings.h"));
				MetaData->SetValue(NewProp_TextPinTypeColor, TEXT("ToolTip"), TEXT("Text pin type color"));
				MetaData->SetValue(NewProp_StringPinTypeColor, TEXT("Category"), TEXT("PinColors"));
				MetaData->SetValue(NewProp_StringPinTypeColor, TEXT("ModuleRelativePath"), TEXT("Public/GraphEditorSettings.h"));
				MetaData->SetValue(NewProp_StringPinTypeColor, TEXT("ToolTip"), TEXT("String pin type color"));
				MetaData->SetValue(NewProp_InterfacePinTypeColor, TEXT("Category"), TEXT("PinColors"));
				MetaData->SetValue(NewProp_InterfacePinTypeColor, TEXT("ModuleRelativePath"), TEXT("Public/GraphEditorSettings.h"));
				MetaData->SetValue(NewProp_InterfacePinTypeColor, TEXT("ToolTip"), TEXT("Interface pin type color"));
				MetaData->SetValue(NewProp_ObjectPinTypeColor, TEXT("Category"), TEXT("PinColors"));
				MetaData->SetValue(NewProp_ObjectPinTypeColor, TEXT("ModuleRelativePath"), TEXT("Public/GraphEditorSettings.h"));
				MetaData->SetValue(NewProp_ObjectPinTypeColor, TEXT("ToolTip"), TEXT("Object pin type color"));
				MetaData->SetValue(NewProp_DelegatePinTypeColor, TEXT("Category"), TEXT("PinColors"));
				MetaData->SetValue(NewProp_DelegatePinTypeColor, TEXT("ModuleRelativePath"), TEXT("Public/GraphEditorSettings.h"));
				MetaData->SetValue(NewProp_DelegatePinTypeColor, TEXT("ToolTip"), TEXT("Delegate pin type color"));
				MetaData->SetValue(NewProp_AssetClassPinTypeColor, TEXT("Category"), TEXT("PinColors"));
				MetaData->SetValue(NewProp_AssetClassPinTypeColor, TEXT("ModuleRelativePath"), TEXT("Public/GraphEditorSettings.h"));
				MetaData->SetValue(NewProp_AssetClassPinTypeColor, TEXT("ToolTip"), TEXT("Asset Class pin type color"));
				MetaData->SetValue(NewProp_AssetPinTypeColor, TEXT("Category"), TEXT("PinColors"));
				MetaData->SetValue(NewProp_AssetPinTypeColor, TEXT("ModuleRelativePath"), TEXT("Public/GraphEditorSettings.h"));
				MetaData->SetValue(NewProp_AssetPinTypeColor, TEXT("ToolTip"), TEXT("Asset pin type color"));
				MetaData->SetValue(NewProp_NamePinTypeColor, TEXT("Category"), TEXT("PinColors"));
				MetaData->SetValue(NewProp_NamePinTypeColor, TEXT("ModuleRelativePath"), TEXT("Public/GraphEditorSettings.h"));
				MetaData->SetValue(NewProp_NamePinTypeColor, TEXT("ToolTip"), TEXT("Name pin type color"));
				MetaData->SetValue(NewProp_FloatPinTypeColor, TEXT("Category"), TEXT("PinColors"));
				MetaData->SetValue(NewProp_FloatPinTypeColor, TEXT("ModuleRelativePath"), TEXT("Public/GraphEditorSettings.h"));
				MetaData->SetValue(NewProp_FloatPinTypeColor, TEXT("ToolTip"), TEXT("Floating-point pin type color"));
				MetaData->SetValue(NewProp_IntPinTypeColor, TEXT("Category"), TEXT("PinColors"));
				MetaData->SetValue(NewProp_IntPinTypeColor, TEXT("ModuleRelativePath"), TEXT("Public/GraphEditorSettings.h"));
				MetaData->SetValue(NewProp_IntPinTypeColor, TEXT("ToolTip"), TEXT("Integer pin type color"));
				MetaData->SetValue(NewProp_ClassPinTypeColor, TEXT("Category"), TEXT("PinColors"));
				MetaData->SetValue(NewProp_ClassPinTypeColor, TEXT("ModuleRelativePath"), TEXT("Public/GraphEditorSettings.h"));
				MetaData->SetValue(NewProp_ClassPinTypeColor, TEXT("ToolTip"), TEXT("Class pin type color"));
				MetaData->SetValue(NewProp_BytePinTypeColor, TEXT("Category"), TEXT("PinColors"));
				MetaData->SetValue(NewProp_BytePinTypeColor, TEXT("ModuleRelativePath"), TEXT("Public/GraphEditorSettings.h"));
				MetaData->SetValue(NewProp_BytePinTypeColor, TEXT("ToolTip"), TEXT("Byte pin type color"));
				MetaData->SetValue(NewProp_BooleanPinTypeColor, TEXT("Category"), TEXT("PinColors"));
				MetaData->SetValue(NewProp_BooleanPinTypeColor, TEXT("ModuleRelativePath"), TEXT("Public/GraphEditorSettings.h"));
				MetaData->SetValue(NewProp_BooleanPinTypeColor, TEXT("ToolTip"), TEXT("Boolean pin type color"));
				MetaData->SetValue(NewProp_ExecutionPinTypeColor, TEXT("Category"), TEXT("PinColors"));
				MetaData->SetValue(NewProp_ExecutionPinTypeColor, TEXT("ModuleRelativePath"), TEXT("Public/GraphEditorSettings.h"));
				MetaData->SetValue(NewProp_ExecutionPinTypeColor, TEXT("ToolTip"), TEXT("Execution pin type color"));
				MetaData->SetValue(NewProp_DefaultPinTypeColor, TEXT("Category"), TEXT("PinColors"));
				MetaData->SetValue(NewProp_DefaultPinTypeColor, TEXT("ModuleRelativePath"), TEXT("Public/GraphEditorSettings.h"));
				MetaData->SetValue(NewProp_DefaultPinTypeColor, TEXT("ToolTip"), TEXT("The default color is used only for types not specifically defined below.  Generally if it's seen, it means another type needs to be defined so that the wire in question can have an appropriate color."));
				MetaData->SetValue(NewProp_BackwardSplineTangentFromVerticalDelta, TEXT("Category"), TEXT("Splines"));
				MetaData->SetValue(NewProp_BackwardSplineTangentFromVerticalDelta, TEXT("ModuleRelativePath"), TEXT("Public/GraphEditorSettings.h"));
				MetaData->SetValue(NewProp_BackwardSplineTangentFromVerticalDelta, TEXT("ToolTip"), TEXT("The amount that the vertical delta affects the generated tangent handle of splines (when the wire is moving backwards)"));
				MetaData->SetValue(NewProp_BackwardSplineTangentFromHorizontalDelta, TEXT("Category"), TEXT("Splines"));
				MetaData->SetValue(NewProp_BackwardSplineTangentFromHorizontalDelta, TEXT("ModuleRelativePath"), TEXT("Public/GraphEditorSettings.h"));
				MetaData->SetValue(NewProp_BackwardSplineTangentFromHorizontalDelta, TEXT("ToolTip"), TEXT("The amount that the horizontal delta affects the generated tangent handle of splines (when the wire is moving backwards)"));
				MetaData->SetValue(NewProp_BackwardSplineVerticalDeltaRange, TEXT("Category"), TEXT("Splines"));
				MetaData->SetValue(NewProp_BackwardSplineVerticalDeltaRange, TEXT("ModuleRelativePath"), TEXT("Public/GraphEditorSettings.h"));
				MetaData->SetValue(NewProp_BackwardSplineVerticalDeltaRange, TEXT("ToolTip"), TEXT("The maximum value to clamp the absolute value of the vertical distance between endpoints when calculating tangents (when the wire is moving backwards)"));
				MetaData->SetValue(NewProp_BackwardSplineHorizontalDeltaRange, TEXT("Category"), TEXT("Splines"));
				MetaData->SetValue(NewProp_BackwardSplineHorizontalDeltaRange, TEXT("ModuleRelativePath"), TEXT("Public/GraphEditorSettings.h"));
				MetaData->SetValue(NewProp_BackwardSplineHorizontalDeltaRange, TEXT("ToolTip"), TEXT("The maximum value to clamp the absolute value of the horizontal distance between endpoints when calculating tangents (when the wire is moving backwards)"));
				MetaData->SetValue(NewProp_ForwardSplineTangentFromVerticalDelta, TEXT("Category"), TEXT("Splines"));
				MetaData->SetValue(NewProp_ForwardSplineTangentFromVerticalDelta, TEXT("ModuleRelativePath"), TEXT("Public/GraphEditorSettings.h"));
				MetaData->SetValue(NewProp_ForwardSplineTangentFromVerticalDelta, TEXT("ToolTip"), TEXT("The amount that the vertical delta affects the generated tangent handle of splines (when the wire is moving forward)"));
				MetaData->SetValue(NewProp_ForwardSplineTangentFromHorizontalDelta, TEXT("Category"), TEXT("Splines"));
				MetaData->SetValue(NewProp_ForwardSplineTangentFromHorizontalDelta, TEXT("ModuleRelativePath"), TEXT("Public/GraphEditorSettings.h"));
				MetaData->SetValue(NewProp_ForwardSplineTangentFromHorizontalDelta, TEXT("ToolTip"), TEXT("The amount that the horizontal delta affects the generated tangent handle of splines (when the wire is moving forward)"));
				MetaData->SetValue(NewProp_ForwardSplineVerticalDeltaRange, TEXT("Category"), TEXT("Splines"));
				MetaData->SetValue(NewProp_ForwardSplineVerticalDeltaRange, TEXT("ModuleRelativePath"), TEXT("Public/GraphEditorSettings.h"));
				MetaData->SetValue(NewProp_ForwardSplineVerticalDeltaRange, TEXT("ToolTip"), TEXT("The maximum value to clamp the absolute value of the vertical distance between endpoints when calculating tangents (when the wire is moving forward)"));
				MetaData->SetValue(NewProp_ForwardSplineHorizontalDeltaRange, TEXT("Category"), TEXT("Splines"));
				MetaData->SetValue(NewProp_ForwardSplineHorizontalDeltaRange, TEXT("ModuleRelativePath"), TEXT("Public/GraphEditorSettings.h"));
				MetaData->SetValue(NewProp_ForwardSplineHorizontalDeltaRange, TEXT("ToolTip"), TEXT("The maximum value to clamp the absolute value of the horizontal distance between endpoints when calculating tangents (when the wire is moving forward)"));
				MetaData->SetValue(NewProp_SplineHoverTolerance, TEXT("Category"), TEXT("Splines"));
				MetaData->SetValue(NewProp_SplineHoverTolerance, TEXT("EditCondition"), TEXT("bTreatSplinesLikePins"));
				MetaData->SetValue(NewProp_SplineHoverTolerance, TEXT("ModuleRelativePath"), TEXT("Public/GraphEditorSettings.h"));
				MetaData->SetValue(NewProp_SplineHoverTolerance, TEXT("ToolTip"), TEXT("The distance threshold controlling how close the mouse has to be to the spline in order to trigger a hover response"));
				MetaData->SetValue(NewProp_bTreatSplinesLikePins, TEXT("Category"), TEXT("Splines"));
				MetaData->SetValue(NewProp_bTreatSplinesLikePins, TEXT("ModuleRelativePath"), TEXT("Public/GraphEditorSettings.h"));
				MetaData->SetValue(NewProp_bTreatSplinesLikePins, TEXT("ToolTip"), TEXT("If enabled, allows splines to be Alt+Clicked to break them or Ctrl+Dragged to move them as if these actions were taking place on the associated pin."));
				MetaData->SetValue(NewProp_PaddingTowardsNodeEdge, TEXT("Category"), TEXT("GeneralStyle"));
				MetaData->SetValue(NewProp_PaddingTowardsNodeEdge, TEXT("ModuleRelativePath"), TEXT("Public/GraphEditorSettings.h"));
				MetaData->SetValue(NewProp_PaddingTowardsNodeEdge, TEXT("ToolTip"), TEXT("config,"));
				MetaData->SetValue(NewProp_PaddingLeftOfOutput, TEXT("Category"), TEXT("GeneralStyle"));
				MetaData->SetValue(NewProp_PaddingLeftOfOutput, TEXT("ModuleRelativePath"), TEXT("Public/GraphEditorSettings.h"));
				MetaData->SetValue(NewProp_PaddingLeftOfOutput, TEXT("ToolTip"), TEXT("config,"));
				MetaData->SetValue(NewProp_PaddingRightOfInput, TEXT("Category"), TEXT("GeneralStyle"));
				MetaData->SetValue(NewProp_PaddingRightOfInput, TEXT("ModuleRelativePath"), TEXT("Public/GraphEditorSettings.h"));
				MetaData->SetValue(NewProp_PaddingRightOfInput, TEXT("ToolTip"), TEXT("config,"));
				MetaData->SetValue(NewProp_PaddingBelowPin, TEXT("Category"), TEXT("GeneralStyle"));
				MetaData->SetValue(NewProp_PaddingBelowPin, TEXT("ModuleRelativePath"), TEXT("Public/GraphEditorSettings.h"));
				MetaData->SetValue(NewProp_PaddingBelowPin, TEXT("ToolTip"), TEXT("config,"));
				MetaData->SetValue(NewProp_PaddingAbovePin, TEXT("Category"), TEXT("GeneralStyle"));
				MetaData->SetValue(NewProp_PaddingAbovePin, TEXT("ModuleRelativePath"), TEXT("Public/GraphEditorSettings.h"));
				MetaData->SetValue(NewProp_PaddingAbovePin, TEXT("ToolTip"), TEXT("config,"));
				MetaData->SetValue(NewProp_DataPinStyle, TEXT("Category"), TEXT("GeneralStyle"));
				MetaData->SetValue(NewProp_DataPinStyle, TEXT("ModuleRelativePath"), TEXT("Public/GraphEditorSettings.h"));
				MetaData->SetValue(NewProp_DataPinStyle, TEXT("ToolTip"), TEXT("The visual styling to use for graph editor pins (in Blueprints, materials, etc...)"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UGraphEditorSettings(Z_Construct_UClass_UGraphEditorSettings, TEXT("UGraphEditorSettings"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UGraphEditorSettings);
	UPackage* Z_Construct_UPackage_GraphEditor()
	{
		static UPackage* ReturnPackage = NULL;
		if (!ReturnPackage)
		{
			ReturnPackage = CastChecked<UPackage>(StaticFindObjectFast(UPackage::StaticClass(), NULL, FName(TEXT("/Script/GraphEditor")), false, false));
			ReturnPackage->SetPackageFlags(PKG_CompiledIn | 0x00000000);
			FGuid Guid;
			Guid.A = 0xE1BB2959;
			Guid.B = 0x8B7D1974;
			Guid.C = 0x00000000;
			Guid.D = 0x00000000;
			ReturnPackage->SetGuid(Guid);

		}
		return ReturnPackage;
	}
#endif

PRAGMA_ENABLE_DEPRECATION_WARNINGS
