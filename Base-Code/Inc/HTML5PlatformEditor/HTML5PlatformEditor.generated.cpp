// Copyright 1998-2015 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Boilerplate C++ definitions for a single module.
	This is automatically generated by UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "Private/HTML5PlatformEditorPrivatePCH.h"
#include "HTML5PlatformEditor.generated.dep.h"
PRAGMA_DISABLE_DEPRECATION_WARNINGS
void EmptyLinkFunctionForGeneratedCodeHTML5PlatformEditor() {}
class UScriptStruct* FHTML5DeviceMapping::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern HTML5PLATFORMEDITOR_API class UScriptStruct* Z_Construct_UScriptStruct_FHTML5DeviceMapping();
		extern HTML5PLATFORMEDITOR_API uint32 Get_Z_Construct_UScriptStruct_FHTML5DeviceMapping_CRC();
		extern HTML5PLATFORMEDITOR_API class UPackage* Z_Construct_UPackage_HTML5PlatformEditor();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FHTML5DeviceMapping, Z_Construct_UPackage_HTML5PlatformEditor(), TEXT("HTML5DeviceMapping"), sizeof(FHTML5DeviceMapping), Get_Z_Construct_UScriptStruct_FHTML5DeviceMapping_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FHTML5DeviceMapping(FHTML5DeviceMapping::StaticStruct, TEXT("/Script/HTML5PlatformEditor"));
static struct FScriptStruct_HTML5PlatformEditor_StaticRegisterNativesFHTML5DeviceMapping
{
	FScriptStruct_HTML5PlatformEditor_StaticRegisterNativesFHTML5DeviceMapping()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("HTML5DeviceMapping")),new UScriptStruct::TCppStructOps<FHTML5DeviceMapping>);
	}
} ScriptStruct_HTML5PlatformEditor_StaticRegisterNativesFHTML5DeviceMapping;
	void UHTML5SDKSettings::StaticRegisterNativesUHTML5SDKSettings()
	{
	}
	IMPLEMENT_CLASS(UHTML5SDKSettings, 1024585190);
class UScriptStruct* FHTML5LevelTransitions::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern HTML5PLATFORMEDITOR_API class UScriptStruct* Z_Construct_UScriptStruct_FHTML5LevelTransitions();
		extern HTML5PLATFORMEDITOR_API uint32 Get_Z_Construct_UScriptStruct_FHTML5LevelTransitions_CRC();
		extern HTML5PLATFORMEDITOR_API class UPackage* Z_Construct_UPackage_HTML5PlatformEditor();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FHTML5LevelTransitions, Z_Construct_UPackage_HTML5PlatformEditor(), TEXT("HTML5LevelTransitions"), sizeof(FHTML5LevelTransitions), Get_Z_Construct_UScriptStruct_FHTML5LevelTransitions_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FHTML5LevelTransitions(FHTML5LevelTransitions::StaticStruct, TEXT("/Script/HTML5PlatformEditor"));
static struct FScriptStruct_HTML5PlatformEditor_StaticRegisterNativesFHTML5LevelTransitions
{
	FScriptStruct_HTML5PlatformEditor_StaticRegisterNativesFHTML5LevelTransitions()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("HTML5LevelTransitions")),new UScriptStruct::TCppStructOps<FHTML5LevelTransitions>);
	}
} ScriptStruct_HTML5PlatformEditor_StaticRegisterNativesFHTML5LevelTransitions;
	void UHTML5TargetSettings::StaticRegisterNativesUHTML5TargetSettings()
	{
	}
	IMPLEMENT_CLASS(UHTML5TargetSettings, 3696630546);
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FFilePath();
	COREUOBJECT_API class UClass* Z_Construct_UClass_UObject();

	HTML5PLATFORMEDITOR_API class UScriptStruct* Z_Construct_UScriptStruct_FHTML5DeviceMapping();
	HTML5PLATFORMEDITOR_API class UClass* Z_Construct_UClass_UHTML5SDKSettings_NoRegister();
	HTML5PLATFORMEDITOR_API class UClass* Z_Construct_UClass_UHTML5SDKSettings();
	HTML5PLATFORMEDITOR_API class UScriptStruct* Z_Construct_UScriptStruct_FHTML5LevelTransitions();
	HTML5PLATFORMEDITOR_API class UClass* Z_Construct_UClass_UHTML5TargetSettings_NoRegister();
	HTML5PLATFORMEDITOR_API class UClass* Z_Construct_UClass_UHTML5TargetSettings();
	HTML5PLATFORMEDITOR_API class UPackage* Z_Construct_UPackage_HTML5PlatformEditor();
	UScriptStruct* Z_Construct_UScriptStruct_FHTML5DeviceMapping()
	{
		UPackage* Outer=Z_Construct_UPackage_HTML5PlatformEditor();
		extern uint32 Get_Z_Construct_UScriptStruct_FHTML5DeviceMapping_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("HTML5DeviceMapping"), sizeof(FHTML5DeviceMapping), Get_Z_Construct_UScriptStruct_FHTML5DeviceMapping_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("HTML5DeviceMapping"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FHTML5DeviceMapping>, EStructFlags(0x00000001));
			UProperty* NewProp_DevicePath = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DevicePath"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DevicePath, FHTML5DeviceMapping), 0x0000000000000001, Z_Construct_UScriptStruct_FFilePath());
			UProperty* NewProp_DeviceName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DeviceName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(DeviceName, FHTML5DeviceMapping), 0x0000000000000001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Private/HTML5SDKSettings.h"));
			MetaData->SetValue(NewProp_DevicePath, TEXT("Category"), TEXT("HTML5_Devices"));
			MetaData->SetValue(NewProp_DevicePath, TEXT("DisplayName"), TEXT("Browser filepath"));
			MetaData->SetValue(NewProp_DevicePath, TEXT("ModuleRelativePath"), TEXT("Private/HTML5SDKSettings.h"));
			MetaData->SetValue(NewProp_DeviceName, TEXT("Category"), TEXT("HTML5_Devices"));
			MetaData->SetValue(NewProp_DeviceName, TEXT("DisplayName"), TEXT("Browser name"));
			MetaData->SetValue(NewProp_DeviceName, TEXT("ModuleRelativePath"), TEXT("Private/HTML5SDKSettings.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FHTML5DeviceMapping_CRC() { return 1683058796U; }
	UClass* Z_Construct_UClass_UHTML5SDKSettings_NoRegister()
	{
		return UHTML5SDKSettings::StaticClass();
	}
	UClass* Z_Construct_UClass_UHTML5SDKSettings()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_HTML5PlatformEditor();
			OuterClass = UHTML5SDKSettings::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x28100084;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_DeviceMap = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DeviceMap"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(DeviceMap, UHTML5SDKSettings), 0x0000000000044001);
				UProperty* NewProp_DeviceMap_Inner = new(EC_InternalUseOnlyConstructor, NewProp_DeviceMap, TEXT("DeviceMap"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000004000, Z_Construct_UScriptStruct_FHTML5DeviceMapping());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("HTML5SDKSettings.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Private/HTML5SDKSettings.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Implements the settings for the HTML5 SDK setup."));
				MetaData->SetValue(NewProp_DeviceMap, TEXT("Category"), TEXT("HTML5_Devices"));
				MetaData->SetValue(NewProp_DeviceMap, TEXT("DisplayName"), TEXT("Available browsers"));
				MetaData->SetValue(NewProp_DeviceMap, TEXT("ModuleRelativePath"), TEXT("Private/HTML5SDKSettings.h"));
				MetaData->SetValue(NewProp_DeviceMap, TEXT("ToolTip"), TEXT("Available browsers that can be used when launching HTML5 builds."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UHTML5SDKSettings(Z_Construct_UClass_UHTML5SDKSettings, TEXT("UHTML5SDKSettings"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UHTML5SDKSettings);
	UScriptStruct* Z_Construct_UScriptStruct_FHTML5LevelTransitions()
	{
		UPackage* Outer=Z_Construct_UPackage_HTML5PlatformEditor();
		extern uint32 Get_Z_Construct_UScriptStruct_FHTML5LevelTransitions_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("HTML5LevelTransitions"), sizeof(FHTML5LevelTransitions), Get_Z_Construct_UScriptStruct_FHTML5LevelTransitions_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("HTML5LevelTransitions"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FHTML5LevelTransitions>, EStructFlags(0x00000001));
			UProperty* NewProp_MapTo = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MapTo"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MapTo, FHTML5LevelTransitions), 0x0000000000000001, Z_Construct_UScriptStruct_FFilePath());
			UProperty* NewProp_MapFrom = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MapFrom"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MapFrom, FHTML5LevelTransitions), 0x0000000000000001, Z_Construct_UScriptStruct_FFilePath());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/HTML5TargetSettings.h"));
			MetaData->SetValue(NewProp_MapTo, TEXT("Category"), TEXT("HTML5_LevelTransitions"));
			MetaData->SetValue(NewProp_MapTo, TEXT("DisplayName"), TEXT("To Map"));
			MetaData->SetValue(NewProp_MapTo, TEXT("ModuleRelativePath"), TEXT("Classes/HTML5TargetSettings.h"));
			MetaData->SetValue(NewProp_MapFrom, TEXT("Category"), TEXT("HTML5_LevelTransitions"));
			MetaData->SetValue(NewProp_MapFrom, TEXT("DisplayName"), TEXT("From Map"));
			MetaData->SetValue(NewProp_MapFrom, TEXT("ModuleRelativePath"), TEXT("Classes/HTML5TargetSettings.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FHTML5LevelTransitions_CRC() { return 479927429U; }
	UClass* Z_Construct_UClass_UHTML5TargetSettings_NoRegister()
	{
		return UHTML5TargetSettings::StaticClass();
	}
	UClass* Z_Construct_UClass_UHTML5TargetSettings()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_HTML5PlatformEditor();
			OuterClass = UHTML5TargetSettings::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100086;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_S3FolderName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("S3FolderName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(S3FolderName, UHTML5TargetSettings), 0x0000000000044001);
				UProperty* NewProp_S3BucketName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("S3BucketName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(S3BucketName, UHTML5TargetSettings), 0x0000000000044001);
				UProperty* NewProp_S3SecretAccessKey = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("S3SecretAccessKey"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(S3SecretAccessKey, UHTML5TargetSettings), 0x0000000000044001);
				UProperty* NewProp_S3KeyID = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("S3KeyID"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(S3KeyID, UHTML5TargetSettings), 0x0000000000044001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(UploadToS3, UHTML5TargetSettings, bool);
				UProperty* NewProp_UploadToS3 = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UploadToS3"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(UploadToS3, UHTML5TargetSettings), 0x0000000000044001, CPP_BOOL_PROPERTY_BITMASK(UploadToS3, UHTML5TargetSettings), sizeof(bool), true);
				UProperty* NewProp_LevelTransitions = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LevelTransitions"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(LevelTransitions, UHTML5TargetSettings), 0x0000000000044001);
				UProperty* NewProp_LevelTransitions_Inner = new(EC_InternalUseOnlyConstructor, NewProp_LevelTransitions, TEXT("LevelTransitions"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000004000, Z_Construct_UScriptStruct_FHTML5LevelTransitions());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(UseAsyncLevelLoading, UHTML5TargetSettings, bool);
				UProperty* NewProp_UseAsyncLevelLoading = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UseAsyncLevelLoading"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(UseAsyncLevelLoading, UHTML5TargetSettings), 0x0000000000044001, CPP_BOOL_PROPERTY_BITMASK(UseAsyncLevelLoading, UHTML5TargetSettings), sizeof(bool), true);
				UProperty* NewProp_DeployServerPort = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DeployServerPort"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(DeployServerPort, UHTML5TargetSettings), 0x0000000000044001);
				UProperty* NewProp_HeapSizeShipping = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HeapSizeShipping"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(HeapSizeShipping, UHTML5TargetSettings), 0x0000000000044001);
				UProperty* NewProp_HeapSizeDevelopment = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HeapSizeDevelopment"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(HeapSizeDevelopment, UHTML5TargetSettings), 0x0000000000044001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("HTML5TargetSettings.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/HTML5TargetSettings.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Implements the settings for the HTML5 target platform."));
				MetaData->SetValue(NewProp_S3FolderName, TEXT("Category"), TEXT("Amazon_S3"));
				MetaData->SetValue(NewProp_S3FolderName, TEXT("DisplayName"), TEXT("Nested Folder Name"));
				MetaData->SetValue(NewProp_S3FolderName, TEXT("ModuleRelativePath"), TEXT("Classes/HTML5TargetSettings.h"));
				MetaData->SetValue(NewProp_S3FolderName, TEXT("ToolTip"), TEXT("Provide another level of nesting beyond the bucket. Can be left empty, defaults to game name."));
				MetaData->SetValue(NewProp_S3BucketName, TEXT("Category"), TEXT("Amazon_S3"));
				MetaData->SetValue(NewProp_S3BucketName, TEXT("DisplayName"), TEXT("Amazon S3 Bucket Name"));
				MetaData->SetValue(NewProp_S3BucketName, TEXT("ModuleRelativePath"), TEXT("Classes/HTML5TargetSettings.h"));
				MetaData->SetValue(NewProp_S3BucketName, TEXT("ToolTip"), TEXT("Required"));
				MetaData->SetValue(NewProp_S3SecretAccessKey, TEXT("Category"), TEXT("Amazon_S3"));
				MetaData->SetValue(NewProp_S3SecretAccessKey, TEXT("DisplayName"), TEXT("Amazon S3 Secret Access Key"));
				MetaData->SetValue(NewProp_S3SecretAccessKey, TEXT("ModuleRelativePath"), TEXT("Classes/HTML5TargetSettings.h"));
				MetaData->SetValue(NewProp_S3SecretAccessKey, TEXT("ToolTip"), TEXT("Required"));
				MetaData->SetValue(NewProp_S3KeyID, TEXT("Category"), TEXT("Amazon_S3"));
				MetaData->SetValue(NewProp_S3KeyID, TEXT("DisplayName"), TEXT("Amazon S3 Key ID"));
				MetaData->SetValue(NewProp_S3KeyID, TEXT("ModuleRelativePath"), TEXT("Classes/HTML5TargetSettings.h"));
				MetaData->SetValue(NewProp_S3KeyID, TEXT("ToolTip"), TEXT("Required"));
				MetaData->SetValue(NewProp_UploadToS3, TEXT("Category"), TEXT("Amazon_S3"));
				MetaData->SetValue(NewProp_UploadToS3, TEXT("DisplayName"), TEXT("Upload builds to Amazon S3 when packaging"));
				MetaData->SetValue(NewProp_UploadToS3, TEXT("ModuleRelativePath"), TEXT("Classes/HTML5TargetSettings.h"));
				MetaData->SetValue(NewProp_LevelTransitions, TEXT("Category"), TEXT("Packaging"));
				MetaData->SetValue(NewProp_LevelTransitions, TEXT("DisplayName"), TEXT("Level transitions for delta paks [experimental,depends on download maps]"));
				MetaData->SetValue(NewProp_LevelTransitions, TEXT("ModuleRelativePath"), TEXT("Classes/HTML5TargetSettings.h"));
				MetaData->SetValue(NewProp_LevelTransitions, TEXT("ToolTip"), TEXT("Generate Delta Pak files for these level transitions."));
				MetaData->SetValue(NewProp_UseAsyncLevelLoading, TEXT("Category"), TEXT("Packaging"));
				MetaData->SetValue(NewProp_UseAsyncLevelLoading, TEXT("DisplayName"), TEXT("Download maps on the fly [experimental]"));
				MetaData->SetValue(NewProp_UseAsyncLevelLoading, TEXT("ModuleRelativePath"), TEXT("Classes/HTML5TargetSettings.h"));
				MetaData->SetValue(NewProp_UseAsyncLevelLoading, TEXT("ToolTip"), TEXT("Use a loading level and download maps during transitions."));
				MetaData->SetValue(NewProp_DeployServerPort, TEXT("Category"), TEXT("Memory"));
				MetaData->SetValue(NewProp_DeployServerPort, TEXT("ClampMax"), TEXT("65535"));
				MetaData->SetValue(NewProp_DeployServerPort, TEXT("ClampMin"), TEXT("49152"));
				MetaData->SetValue(NewProp_DeployServerPort, TEXT("DisplayName"), TEXT("Port to use when deploying game from the editor"));
				MetaData->SetValue(NewProp_DeployServerPort, TEXT("ModuleRelativePath"), TEXT("Classes/HTML5TargetSettings.h"));
				MetaData->SetValue(NewProp_DeployServerPort, TEXT("ToolTip"), TEXT("Port to use when deploying game from the editor"));
				MetaData->SetValue(NewProp_HeapSizeShipping, TEXT("Category"), TEXT("Memory"));
				MetaData->SetValue(NewProp_HeapSizeShipping, TEXT("ClampMax"), TEXT("4096"));
				MetaData->SetValue(NewProp_HeapSizeShipping, TEXT("ClampMin"), TEXT("1"));
				MetaData->SetValue(NewProp_HeapSizeShipping, TEXT("DisplayName"), TEXT("Heap Size (in MB)"));
				MetaData->SetValue(NewProp_HeapSizeShipping, TEXT("ModuleRelativePath"), TEXT("Classes/HTML5TargetSettings.h"));
				MetaData->SetValue(NewProp_HeapSizeShipping, TEXT("ToolTip"), TEXT("Setting to control HTML5 Heap size"));
				MetaData->SetValue(NewProp_HeapSizeDevelopment, TEXT("Category"), TEXT("Memory"));
				MetaData->SetValue(NewProp_HeapSizeDevelopment, TEXT("ClampMax"), TEXT("4096"));
				MetaData->SetValue(NewProp_HeapSizeDevelopment, TEXT("ClampMin"), TEXT("1"));
				MetaData->SetValue(NewProp_HeapSizeDevelopment, TEXT("DisplayName"), TEXT("Development Heap Size (in MB)"));
				MetaData->SetValue(NewProp_HeapSizeDevelopment, TEXT("ModuleRelativePath"), TEXT("Classes/HTML5TargetSettings.h"));
				MetaData->SetValue(NewProp_HeapSizeDevelopment, TEXT("ToolTip"), TEXT("Setting to control HTML5 Heap size (in Development)"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UHTML5TargetSettings(Z_Construct_UClass_UHTML5TargetSettings, TEXT("UHTML5TargetSettings"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UHTML5TargetSettings);
	UPackage* Z_Construct_UPackage_HTML5PlatformEditor()
	{
		static UPackage* ReturnPackage = NULL;
		if (!ReturnPackage)
		{
			ReturnPackage = CastChecked<UPackage>(StaticFindObjectFast(UPackage::StaticClass(), NULL, FName(TEXT("/Script/HTML5PlatformEditor")), false, false));
			ReturnPackage->SetPackageFlags(PKG_CompiledIn | 0x00000000);
			FGuid Guid;
			Guid.A = 0x5AAB58B7;
			Guid.B = 0x6EC13065;
			Guid.C = 0x00000000;
			Guid.D = 0x00000000;
			ReturnPackage->SetGuid(Guid);

		}
		return ReturnPackage;
	}
#endif

PRAGMA_ENABLE_DEPRECATION_WARNINGS
