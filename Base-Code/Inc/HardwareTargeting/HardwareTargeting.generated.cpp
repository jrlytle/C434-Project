// Copyright 1998-2015 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Boilerplate C++ definitions for a single module.
	This is automatically generated by UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "Private/HardwareTargetingPrivatePCH.h"
#include "HardwareTargeting.generated.dep.h"
PRAGMA_DISABLE_DEPRECATION_WARNINGS
void EmptyLinkFunctionForGeneratedCodeHardwareTargeting() {}
static class UEnum* EGraphicsPreset_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern HARDWARETARGETING_API class UEnum* Z_Construct_UEnum_HardwareTargeting_EGraphicsPreset();
		extern HARDWARETARGETING_API class UPackage* Z_Construct_UPackage_HardwareTargeting();
		Singleton = GetStaticEnum(Z_Construct_UEnum_HardwareTargeting_EGraphicsPreset, Z_Construct_UPackage_HardwareTargeting(), TEXT("EGraphicsPreset"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EGraphicsPreset(EGraphicsPreset_StaticEnum, TEXT("/Script/HardwareTargeting"));
static class UEnum* EHardwareClass_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern HARDWARETARGETING_API class UEnum* Z_Construct_UEnum_HardwareTargeting_EHardwareClass();
		extern HARDWARETARGETING_API class UPackage* Z_Construct_UPackage_HardwareTargeting();
		Singleton = GetStaticEnum(Z_Construct_UEnum_HardwareTargeting_EHardwareClass, Z_Construct_UPackage_HardwareTargeting(), TEXT("EHardwareClass"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EHardwareClass(EHardwareClass_StaticEnum, TEXT("/Script/HardwareTargeting"));
	void UHardwareTargetingSettings::StaticRegisterNativesUHardwareTargetingSettings()
	{
	}
	IMPLEMENT_CLASS(UHardwareTargetingSettings, 2188889067);
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	COREUOBJECT_API class UClass* Z_Construct_UClass_UObject();

	HARDWARETARGETING_API class UEnum* Z_Construct_UEnum_HardwareTargeting_EGraphicsPreset();
	HARDWARETARGETING_API class UEnum* Z_Construct_UEnum_HardwareTargeting_EHardwareClass();
	HARDWARETARGETING_API class UClass* Z_Construct_UClass_UHardwareTargetingSettings_NoRegister();
	HARDWARETARGETING_API class UClass* Z_Construct_UClass_UHardwareTargetingSettings();
	HARDWARETARGETING_API class UPackage* Z_Construct_UPackage_HardwareTargeting();
	UEnum* Z_Construct_UEnum_HardwareTargeting_EGraphicsPreset()
	{
		UPackage* Outer=Z_Construct_UPackage_HardwareTargeting();
		extern uint32 Get_Z_Construct_UEnum_HardwareTargeting_EGraphicsPreset_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EGraphicsPreset"), 0, Get_Z_Construct_UEnum_HardwareTargeting_EGraphicsPreset_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EGraphicsPreset"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGraphicsPreset::Unspecified")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGraphicsPreset::Maximum")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGraphicsPreset::Scalable")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGraphicsPreset::EGraphicsPreset_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("Maximum.ToolTip"), TEXT("Maximum quality - High-end features default to enabled"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/HardwareTargetingSettings.h"));
			MetaData->SetValue(ReturnEnum, TEXT("Scalable.ToolTip"), TEXT("Scalable quality - Some features are disabled by default but can be enabled based on the actual hardware"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Enum specifying a graphics preset preference"));
			MetaData->SetValue(ReturnEnum, TEXT("Unspecified.ToolTip"), TEXT("Unspecified, meaning no choice has been made yet"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_HardwareTargeting_EGraphicsPreset_CRC() { return 2657561585U; }
	UEnum* Z_Construct_UEnum_HardwareTargeting_EHardwareClass()
	{
		UPackage* Outer=Z_Construct_UPackage_HardwareTargeting();
		extern uint32 Get_Z_Construct_UEnum_HardwareTargeting_EHardwareClass_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EHardwareClass"), 0, Get_Z_Construct_UEnum_HardwareTargeting_EHardwareClass_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EHardwareClass"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EHardwareClass::Unspecified")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EHardwareClass::Desktop")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EHardwareClass::Mobile")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EHardwareClass::EHardwareClass_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("Desktop.ToolTip"), TEXT("Desktop or console"));
			MetaData->SetValue(ReturnEnum, TEXT("Mobile.ToolTip"), TEXT("Mobile or tablet"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/HardwareTargetingSettings.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Enum specifying a class of hardware"));
			MetaData->SetValue(ReturnEnum, TEXT("Unspecified.ToolTip"), TEXT("Unspecified, meaning no choice has been made yet"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_HardwareTargeting_EHardwareClass_CRC() { return 2463235158U; }
	UClass* Z_Construct_UClass_UHardwareTargetingSettings_NoRegister()
	{
		return UHardwareTargetingSettings::StaticClass();
	}
	UClass* Z_Construct_UClass_UHardwareTargetingSettings()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_HardwareTargeting();
			OuterClass = UHardwareTargetingSettings::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100086;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_AppliedDefaultGraphicsPerformance = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AppliedDefaultGraphicsPerformance"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(AppliedDefaultGraphicsPerformance, UHardwareTargetingSettings), 0x0000000000004000, Z_Construct_UEnum_HardwareTargeting_EGraphicsPreset());
				UProperty* NewProp_DefaultGraphicsPerformance = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultGraphicsPerformance"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(DefaultGraphicsPerformance, UHardwareTargetingSettings), 0x0000000000004001, Z_Construct_UEnum_HardwareTargeting_EGraphicsPreset());
				UProperty* NewProp_AppliedTargetedHardwareClass = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AppliedTargetedHardwareClass"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(AppliedTargetedHardwareClass, UHardwareTargetingSettings), 0x0000000000004000, Z_Construct_UEnum_HardwareTargeting_EHardwareClass());
				UProperty* NewProp_TargetedHardwareClass = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TargetedHardwareClass"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(TargetedHardwareClass, UHardwareTargetingSettings), 0x0000000000004001, Z_Construct_UEnum_HardwareTargeting_EHardwareClass());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("HardwareTargetingSettings.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/HardwareTargetingSettings.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Hardware targeting settings, stored in default config, per-project"));
				MetaData->SetValue(NewProp_AppliedDefaultGraphicsPerformance, TEXT("ModuleRelativePath"), TEXT("Public/HardwareTargetingSettings.h"));
				MetaData->SetValue(NewProp_AppliedDefaultGraphicsPerformance, TEXT("ToolTip"), TEXT("Enum that is set to DefaultGraphicsPerformance when the settings have been successfully applied"));
				MetaData->SetValue(NewProp_DefaultGraphicsPerformance, TEXT("Category"), TEXT("None"));
				MetaData->SetValue(NewProp_DefaultGraphicsPerformance, TEXT("ModuleRelativePath"), TEXT("Public/HardwareTargetingSettings.h"));
				MetaData->SetValue(NewProp_DefaultGraphicsPerformance, TEXT("ToolTip"), TEXT("Enum specifying a graphics preset to use for this game"));
				MetaData->SetValue(NewProp_AppliedTargetedHardwareClass, TEXT("ModuleRelativePath"), TEXT("Public/HardwareTargetingSettings.h"));
				MetaData->SetValue(NewProp_AppliedTargetedHardwareClass, TEXT("ToolTip"), TEXT("Enum that is set to TargetedHardwareClass when the settings have been successfully applied"));
				MetaData->SetValue(NewProp_TargetedHardwareClass, TEXT("Category"), TEXT("None"));
				MetaData->SetValue(NewProp_TargetedHardwareClass, TEXT("ModuleRelativePath"), TEXT("Public/HardwareTargetingSettings.h"));
				MetaData->SetValue(NewProp_TargetedHardwareClass, TEXT("ToolTip"), TEXT("Enum specifying which class of hardware this game is targeting"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UHardwareTargetingSettings(Z_Construct_UClass_UHardwareTargetingSettings, TEXT("UHardwareTargetingSettings"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UHardwareTargetingSettings);
	UPackage* Z_Construct_UPackage_HardwareTargeting()
	{
		static UPackage* ReturnPackage = NULL;
		if (!ReturnPackage)
		{
			ReturnPackage = CastChecked<UPackage>(StaticFindObjectFast(UPackage::StaticClass(), NULL, FName(TEXT("/Script/HardwareTargeting")), false, false));
			ReturnPackage->SetPackageFlags(PKG_CompiledIn | 0x00000000);
			FGuid Guid;
			Guid.A = 0x5C64A8B3;
			Guid.B = 0x054A64CA;
			Guid.C = 0x00000000;
			Guid.D = 0x00000000;
			ReturnPackage->SetGuid(Guid);

		}
		return ReturnPackage;
	}
#endif

PRAGMA_ENABLE_DEPRECATION_WARNINGS
