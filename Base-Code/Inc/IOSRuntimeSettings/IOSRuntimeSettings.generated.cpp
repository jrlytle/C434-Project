// Copyright 1998-2015 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Boilerplate C++ definitions for a single module.
	This is automatically generated by UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "Private/IOSRuntimeSettingsPrivatePCH.h"
#include "IOSRuntimeSettings.generated.dep.h"
PRAGMA_DISABLE_DEPRECATION_WARNINGS
void EmptyLinkFunctionForGeneratedCodeIOSRuntimeSettings() {}
static class UEnum* EIOSVersion_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern IOSRUNTIMESETTINGS_API class UEnum* Z_Construct_UEnum_IOSRuntimeSettings_EIOSVersion();
		extern IOSRUNTIMESETTINGS_API class UPackage* Z_Construct_UPackage_IOSRuntimeSettings();
		Singleton = GetStaticEnum(Z_Construct_UEnum_IOSRuntimeSettings_EIOSVersion, Z_Construct_UPackage_IOSRuntimeSettings(), TEXT("EIOSVersion"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EIOSVersion(EIOSVersion_StaticEnum, TEXT("/Script/IOSRuntimeSettings"));
static class UEnum* EPowerUsageFrameRateLock_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern IOSRUNTIMESETTINGS_API class UEnum* Z_Construct_UEnum_IOSRuntimeSettings_EPowerUsageFrameRateLock();
		extern IOSRUNTIMESETTINGS_API class UPackage* Z_Construct_UPackage_IOSRuntimeSettings();
		Singleton = GetStaticEnum(Z_Construct_UEnum_IOSRuntimeSettings_EPowerUsageFrameRateLock, Z_Construct_UPackage_IOSRuntimeSettings(), TEXT("EPowerUsageFrameRateLock"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EPowerUsageFrameRateLock(EPowerUsageFrameRateLock_StaticEnum, TEXT("/Script/IOSRuntimeSettings"));
class UScriptStruct* FIOSBuildResourceDirectory::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern IOSRUNTIMESETTINGS_API class UScriptStruct* Z_Construct_UScriptStruct_FIOSBuildResourceDirectory();
		extern IOSRUNTIMESETTINGS_API uint32 Get_Z_Construct_UScriptStruct_FIOSBuildResourceDirectory_CRC();
		extern IOSRUNTIMESETTINGS_API class UPackage* Z_Construct_UPackage_IOSRuntimeSettings();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FIOSBuildResourceDirectory, Z_Construct_UPackage_IOSRuntimeSettings(), TEXT("IOSBuildResourceDirectory"), sizeof(FIOSBuildResourceDirectory), Get_Z_Construct_UScriptStruct_FIOSBuildResourceDirectory_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FIOSBuildResourceDirectory(FIOSBuildResourceDirectory::StaticStruct, TEXT("/Script/IOSRuntimeSettings"));
static struct FScriptStruct_IOSRuntimeSettings_StaticRegisterNativesFIOSBuildResourceDirectory
{
	FScriptStruct_IOSRuntimeSettings_StaticRegisterNativesFIOSBuildResourceDirectory()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("IOSBuildResourceDirectory")),new UScriptStruct::TCppStructOps<FIOSBuildResourceDirectory>);
	}
} ScriptStruct_IOSRuntimeSettings_StaticRegisterNativesFIOSBuildResourceDirectory;
class UScriptStruct* FIOSBuildResourceFilePath::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern IOSRUNTIMESETTINGS_API class UScriptStruct* Z_Construct_UScriptStruct_FIOSBuildResourceFilePath();
		extern IOSRUNTIMESETTINGS_API uint32 Get_Z_Construct_UScriptStruct_FIOSBuildResourceFilePath_CRC();
		extern IOSRUNTIMESETTINGS_API class UPackage* Z_Construct_UPackage_IOSRuntimeSettings();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FIOSBuildResourceFilePath, Z_Construct_UPackage_IOSRuntimeSettings(), TEXT("IOSBuildResourceFilePath"), sizeof(FIOSBuildResourceFilePath), Get_Z_Construct_UScriptStruct_FIOSBuildResourceFilePath_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FIOSBuildResourceFilePath(FIOSBuildResourceFilePath::StaticStruct, TEXT("/Script/IOSRuntimeSettings"));
static struct FScriptStruct_IOSRuntimeSettings_StaticRegisterNativesFIOSBuildResourceFilePath
{
	FScriptStruct_IOSRuntimeSettings_StaticRegisterNativesFIOSBuildResourceFilePath()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("IOSBuildResourceFilePath")),new UScriptStruct::TCppStructOps<FIOSBuildResourceFilePath>);
	}
} ScriptStruct_IOSRuntimeSettings_StaticRegisterNativesFIOSBuildResourceFilePath;
	void UIOSRuntimeSettings::StaticRegisterNativesUIOSRuntimeSettings()
	{
	}
	IMPLEMENT_CLASS(UIOSRuntimeSettings, 1799215191);
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	COREUOBJECT_API class UClass* Z_Construct_UClass_UObject();

	IOSRUNTIMESETTINGS_API class UEnum* Z_Construct_UEnum_IOSRuntimeSettings_EIOSVersion();
	IOSRUNTIMESETTINGS_API class UEnum* Z_Construct_UEnum_IOSRuntimeSettings_EPowerUsageFrameRateLock();
	IOSRUNTIMESETTINGS_API class UScriptStruct* Z_Construct_UScriptStruct_FIOSBuildResourceDirectory();
	IOSRUNTIMESETTINGS_API class UScriptStruct* Z_Construct_UScriptStruct_FIOSBuildResourceFilePath();
	IOSRUNTIMESETTINGS_API class UClass* Z_Construct_UClass_UIOSRuntimeSettings_NoRegister();
	IOSRUNTIMESETTINGS_API class UClass* Z_Construct_UClass_UIOSRuntimeSettings();
	IOSRUNTIMESETTINGS_API class UPackage* Z_Construct_UPackage_IOSRuntimeSettings();
	UEnum* Z_Construct_UEnum_IOSRuntimeSettings_EIOSVersion()
	{
		UPackage* Outer=Z_Construct_UPackage_IOSRuntimeSettings();
		extern uint32 Get_Z_Construct_UEnum_IOSRuntimeSettings_EIOSVersion_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EIOSVersion"), 0, Get_Z_Construct_UEnum_IOSRuntimeSettings_EIOSVersion_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EIOSVersion"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EIOSVersion::IOS_61")), 6));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EIOSVersion::IOS_7")), 7));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EIOSVersion::IOS_8")), 8));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EIOSVersion::IOS_MAX")), 9));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("IOS_61.DisplayName"), TEXT("6.1"));
			MetaData->SetValue(ReturnEnum, TEXT("IOS_61.ToolTip"), TEXT("iOS 6.1"));
			MetaData->SetValue(ReturnEnum, TEXT("IOS_7.DisplayName"), TEXT("7.0"));
			MetaData->SetValue(ReturnEnum, TEXT("IOS_7.ToolTip"), TEXT("iOS 7"));
			MetaData->SetValue(ReturnEnum, TEXT("IOS_8.DisplayName"), TEXT("8.0"));
			MetaData->SetValue(ReturnEnum, TEXT("IOS_8.ToolTip"), TEXT("iOS 8"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/IOSRuntimeSettings.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_IOSRuntimeSettings_EIOSVersion_CRC() { return 433729233U; }
	UEnum* Z_Construct_UEnum_IOSRuntimeSettings_EPowerUsageFrameRateLock()
	{
		UPackage* Outer=Z_Construct_UPackage_IOSRuntimeSettings();
		extern uint32 Get_Z_Construct_UEnum_IOSRuntimeSettings_EPowerUsageFrameRateLock_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EPowerUsageFrameRateLock"), 0, Get_Z_Construct_UEnum_IOSRuntimeSettings_EPowerUsageFrameRateLock_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EPowerUsageFrameRateLock"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPowerUsageFrameRateLock::PUFRL_None")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPowerUsageFrameRateLock::PUFRL_20")), 20));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPowerUsageFrameRateLock::PUFRL_30")), 30));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPowerUsageFrameRateLock::PUFRL_60")), 60));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPowerUsageFrameRateLock::PUFRL_MAX")), 61));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/IOSRuntimeSettings.h"));
			MetaData->SetValue(ReturnEnum, TEXT("PUFRL_20.DisplayName"), TEXT("20 FPS"));
			MetaData->SetValue(ReturnEnum, TEXT("PUFRL_20.ToolTip"), TEXT("Frame rate is limited to a maximum of 20 frames per second."));
			MetaData->SetValue(ReturnEnum, TEXT("PUFRL_30.DisplayName"), TEXT("30 FPS"));
			MetaData->SetValue(ReturnEnum, TEXT("PUFRL_30.ToolTip"), TEXT("Frame rate is limited to a maximum of 30 frames per second."));
			MetaData->SetValue(ReturnEnum, TEXT("PUFRL_60.DisplayName"), TEXT("60 FPS"));
			MetaData->SetValue(ReturnEnum, TEXT("PUFRL_60.ToolTip"), TEXT("Frame rate is limited to a maximum of 60 frames per second."));
			MetaData->SetValue(ReturnEnum, TEXT("PUFRL_None.DisplayName"), TEXT("None"));
			MetaData->SetValue(ReturnEnum, TEXT("PUFRL_None.ToolTip"), TEXT("Frame rate is not limited."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_IOSRuntimeSettings_EPowerUsageFrameRateLock_CRC() { return 501338674U; }
	UScriptStruct* Z_Construct_UScriptStruct_FIOSBuildResourceDirectory()
	{
		UPackage* Outer=Z_Construct_UPackage_IOSRuntimeSettings();
		extern uint32 Get_Z_Construct_UScriptStruct_FIOSBuildResourceDirectory_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("IOSBuildResourceDirectory"), sizeof(FIOSBuildResourceDirectory), Get_Z_Construct_UScriptStruct_FIOSBuildResourceDirectory_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IOSBuildResourceDirectory"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FIOSBuildResourceDirectory>, EStructFlags(0x00000001));
			UProperty* NewProp_Path = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Path"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Path, FIOSBuildResourceDirectory), 0x0000000000000001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/IOSRuntimeSettings.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("IOS Build resource file struct, used to serialize Directorys to the configs for use in the build system,"));
			MetaData->SetValue(NewProp_Path, TEXT("Category"), TEXT("Directory"));
			MetaData->SetValue(NewProp_Path, TEXT("ModuleRelativePath"), TEXT("Classes/IOSRuntimeSettings.h"));
			MetaData->SetValue(NewProp_Path, TEXT("ToolTip"), TEXT("The path to the file."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FIOSBuildResourceDirectory_CRC() { return 3122245680U; }
	UScriptStruct* Z_Construct_UScriptStruct_FIOSBuildResourceFilePath()
	{
		UPackage* Outer=Z_Construct_UPackage_IOSRuntimeSettings();
		extern uint32 Get_Z_Construct_UScriptStruct_FIOSBuildResourceFilePath_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("IOSBuildResourceFilePath"), sizeof(FIOSBuildResourceFilePath), Get_Z_Construct_UScriptStruct_FIOSBuildResourceFilePath_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IOSBuildResourceFilePath"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FIOSBuildResourceFilePath>, EStructFlags(0x00000001));
			UProperty* NewProp_FilePath = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("FilePath"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(FilePath, FIOSBuildResourceFilePath), 0x0000000000000001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/IOSRuntimeSettings.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("IOS Build resource file struct, used to serialize filepaths to the configs for use in the build system,"));
			MetaData->SetValue(NewProp_FilePath, TEXT("Category"), TEXT("FilePath"));
			MetaData->SetValue(NewProp_FilePath, TEXT("ModuleRelativePath"), TEXT("Classes/IOSRuntimeSettings.h"));
			MetaData->SetValue(NewProp_FilePath, TEXT("ToolTip"), TEXT("The path to the file."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FIOSBuildResourceFilePath_CRC() { return 4293251894U; }
	UClass* Z_Construct_UClass_UIOSRuntimeSettings_NoRegister()
	{
		return UIOSRuntimeSettings::StaticClass();
	}
	UClass* Z_Construct_UClass_UIOSRuntimeSettings()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_IOSRuntimeSettings();
			OuterClass = UIOSRuntimeSettings::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100086;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_SigningCertificate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SigningCertificate"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(SigningCertificate, UIOSRuntimeSettings), 0x0000000000044001);
				UProperty* NewProp_MobileProvision = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MobileProvision"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(MobileProvision, UIOSRuntimeSettings), 0x0000000000044001);
				UProperty* NewProp_FacebookAppID = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FacebookAppID"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(FacebookAppID, UIOSRuntimeSettings), 0x0000000000044001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnableFacebookSupport, UIOSRuntimeSettings, bool);
				UProperty* NewProp_bEnableFacebookSupport = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bEnableFacebookSupport"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnableFacebookSupport, UIOSRuntimeSettings), 0x0000000000044001, CPP_BOOL_PROPERTY_BITMASK(bEnableFacebookSupport, UIOSRuntimeSettings), sizeof(bool), true);
				UProperty* NewProp_AdditionalPlistData = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AdditionalPlistData"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(AdditionalPlistData, UIOSRuntimeSettings), 0x0000000000044001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSupportsIPhone, UIOSRuntimeSettings, uint8);
				UProperty* NewProp_bSupportsIPhone = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bSupportsIPhone"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSupportsIPhone, UIOSRuntimeSettings), 0x0000000000044001, CPP_BOOL_PROPERTY_BITMASK(bSupportsIPhone, UIOSRuntimeSettings), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSupportsIPad, UIOSRuntimeSettings, uint8);
				UProperty* NewProp_bSupportsIPad = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bSupportsIPad"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSupportsIPad, UIOSRuntimeSettings), 0x0000000000044001, CPP_BOOL_PROPERTY_BITMASK(bSupportsIPad, UIOSRuntimeSettings), sizeof(uint8), false);
				UProperty* NewProp_MinimumiOSVersion = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MinimumiOSVersion"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(MinimumiOSVersion, UIOSRuntimeSettings), 0x0000000000044001, Z_Construct_UEnum_IOSRuntimeSettings_EIOSVersion());
				UProperty* NewProp_FrameRateLock = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FrameRateLock"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(FrameRateLock, UIOSRuntimeSettings), 0x0000000000044001, Z_Construct_UEnum_IOSRuntimeSettings_EPowerUsageFrameRateLock());
				UProperty* NewProp_VersionInfo = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VersionInfo"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(VersionInfo, UIOSRuntimeSettings), 0x0000000000044001);
				UProperty* NewProp_BundleIdentifier = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BundleIdentifier"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(BundleIdentifier, UIOSRuntimeSettings), 0x0000000000044001);
				UProperty* NewProp_BundleName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BundleName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(BundleName, UIOSRuntimeSettings), 0x0000000000044001);
				UProperty* NewProp_BundleDisplayName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BundleDisplayName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(BundleDisplayName, UIOSRuntimeSettings), 0x0000000000044001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSupportsLandscapeRightOrientation, UIOSRuntimeSettings, uint8);
				UProperty* NewProp_bSupportsLandscapeRightOrientation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bSupportsLandscapeRightOrientation"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSupportsLandscapeRightOrientation, UIOSRuntimeSettings), 0x0000000000044001, CPP_BOOL_PROPERTY_BITMASK(bSupportsLandscapeRightOrientation, UIOSRuntimeSettings), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSupportsLandscapeLeftOrientation, UIOSRuntimeSettings, uint8);
				UProperty* NewProp_bSupportsLandscapeLeftOrientation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bSupportsLandscapeLeftOrientation"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSupportsLandscapeLeftOrientation, UIOSRuntimeSettings), 0x0000000000044001, CPP_BOOL_PROPERTY_BITMASK(bSupportsLandscapeLeftOrientation, UIOSRuntimeSettings), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSupportsUpsideDownOrientation, UIOSRuntimeSettings, uint8);
				UProperty* NewProp_bSupportsUpsideDownOrientation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bSupportsUpsideDownOrientation"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSupportsUpsideDownOrientation, UIOSRuntimeSettings), 0x0000000000044001, CPP_BOOL_PROPERTY_BITMASK(bSupportsUpsideDownOrientation, UIOSRuntimeSettings), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSupportsPortraitOrientation, UIOSRuntimeSettings, uint8);
				UProperty* NewProp_bSupportsPortraitOrientation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bSupportsPortraitOrientation"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSupportsPortraitOrientation, UIOSRuntimeSettings), 0x0000000000044001, CPP_BOOL_PROPERTY_BITMASK(bSupportsPortraitOrientation, UIOSRuntimeSettings), sizeof(uint8), false);
				UProperty* NewProp_SSHPrivateKeyOverridePath = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SSHPrivateKeyOverridePath"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SSHPrivateKeyOverridePath, UIOSRuntimeSettings), 0x0000000000044001, Z_Construct_UScriptStruct_FIOSBuildResourceFilePath());
				UProperty* NewProp_SSHPrivateKeyLocation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SSHPrivateKeyLocation"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(SSHPrivateKeyLocation, UIOSRuntimeSettings), 0x0000000000020001);
				UProperty* NewProp_DeltaCopyInstallPath = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DeltaCopyInstallPath"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DeltaCopyInstallPath, UIOSRuntimeSettings), 0x0000000000044001, Z_Construct_UScriptStruct_FIOSBuildResourceDirectory());
				UProperty* NewProp_RSyncUsername = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RSyncUsername"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(RSyncUsername, UIOSRuntimeSettings), 0x0000000000044001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseRSync, UIOSRuntimeSettings, bool);
				UProperty* NewProp_bUseRSync = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUseRSync"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseRSync, UIOSRuntimeSettings), 0x0000000000044001, CPP_BOOL_PROPERTY_BITMASK(bUseRSync, UIOSRuntimeSettings), sizeof(bool), true);
				UProperty* NewProp_RemoteServerName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RemoteServerName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(RemoteServerName, UIOSRuntimeSettings), 0x0000000000044001);
				UProperty* NewProp_AdditionalShippingLinkerFlags = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AdditionalShippingLinkerFlags"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(AdditionalShippingLinkerFlags, UIOSRuntimeSettings), 0x0000000000044001);
				UProperty* NewProp_AdditionalLinkerFlags = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AdditionalLinkerFlags"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(AdditionalLinkerFlags, UIOSRuntimeSettings), 0x0000000000044001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bShipForArmV7S, UIOSRuntimeSettings, bool);
				UProperty* NewProp_bShipForArmV7S = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bShipForArmV7S"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bShipForArmV7S, UIOSRuntimeSettings), 0x0000000000044001, CPP_BOOL_PROPERTY_BITMASK(bShipForArmV7S, UIOSRuntimeSettings), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bShipForArm64, UIOSRuntimeSettings, bool);
				UProperty* NewProp_bShipForArm64 = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bShipForArm64"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bShipForArm64, UIOSRuntimeSettings), 0x0000000000044001, CPP_BOOL_PROPERTY_BITMASK(bShipForArm64, UIOSRuntimeSettings), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bShipForArmV7, UIOSRuntimeSettings, bool);
				UProperty* NewProp_bShipForArmV7 = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bShipForArmV7"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bShipForArmV7, UIOSRuntimeSettings), 0x0000000000044001, CPP_BOOL_PROPERTY_BITMASK(bShipForArmV7, UIOSRuntimeSettings), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDevForArmV7S, UIOSRuntimeSettings, bool);
				UProperty* NewProp_bDevForArmV7S = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bDevForArmV7S"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDevForArmV7S, UIOSRuntimeSettings), 0x0000000000044001, CPP_BOOL_PROPERTY_BITMASK(bDevForArmV7S, UIOSRuntimeSettings), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDevForArm64, UIOSRuntimeSettings, bool);
				UProperty* NewProp_bDevForArm64 = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bDevForArm64"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDevForArm64, UIOSRuntimeSettings), 0x0000000000044001, CPP_BOOL_PROPERTY_BITMASK(bDevForArm64, UIOSRuntimeSettings), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDevForArmV7, UIOSRuntimeSettings, bool);
				UProperty* NewProp_bDevForArmV7 = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bDevForArmV7"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDevForArmV7, UIOSRuntimeSettings), 0x0000000000044001, CPP_BOOL_PROPERTY_BITMASK(bDevForArmV7, UIOSRuntimeSettings), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSupportsOpenGLES2, UIOSRuntimeSettings, bool);
				UProperty* NewProp_bSupportsOpenGLES2 = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bSupportsOpenGLES2"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSupportsOpenGLES2, UIOSRuntimeSettings), 0x0000000000044001, CPP_BOOL_PROPERTY_BITMASK(bSupportsOpenGLES2, UIOSRuntimeSettings), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSupportsMetalMRT, UIOSRuntimeSettings, bool);
				UProperty* NewProp_bSupportsMetalMRT = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bSupportsMetalMRT"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSupportsMetalMRT, UIOSRuntimeSettings), 0x0000000000044001, CPP_BOOL_PROPERTY_BITMASK(bSupportsMetalMRT, UIOSRuntimeSettings), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSupportsMetal, UIOSRuntimeSettings, bool);
				UProperty* NewProp_bSupportsMetal = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bSupportsMetal"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSupportsMetal, UIOSRuntimeSettings), 0x0000000000044001, CPP_BOOL_PROPERTY_BITMASK(bSupportsMetal, UIOSRuntimeSettings), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnableCloudKitSupport, UIOSRuntimeSettings, uint8);
				UProperty* NewProp_bEnableCloudKitSupport = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bEnableCloudKitSupport"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnableCloudKitSupport, UIOSRuntimeSettings), 0x0000000000044001, CPP_BOOL_PROPERTY_BITMASK(bEnableCloudKitSupport, UIOSRuntimeSettings), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnableGameCenterSupport, UIOSRuntimeSettings, uint8);
				UProperty* NewProp_bEnableGameCenterSupport = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bEnableGameCenterSupport"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnableGameCenterSupport, UIOSRuntimeSettings), 0x0000000000044001, CPP_BOOL_PROPERTY_BITMASK(bEnableGameCenterSupport, UIOSRuntimeSettings), sizeof(uint8), false);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("IOSRuntimeSettings.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/IOSRuntimeSettings.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Implements the settings for the iOS target platform."));
				MetaData->SetValue(NewProp_SigningCertificate, TEXT("Category"), TEXT("Build"));
				MetaData->SetValue(NewProp_SigningCertificate, TEXT("ModuleRelativePath"), TEXT("Classes/IOSRuntimeSettings.h"));
				MetaData->SetValue(NewProp_SigningCertificate, TEXT("ToolTip"), TEXT("Signing certificate to utilize when signing"));
				MetaData->SetValue(NewProp_MobileProvision, TEXT("Category"), TEXT("Build"));
				MetaData->SetValue(NewProp_MobileProvision, TEXT("ModuleRelativePath"), TEXT("Classes/IOSRuntimeSettings.h"));
				MetaData->SetValue(NewProp_MobileProvision, TEXT("ToolTip"), TEXT("Mobile provision to utilize when signing"));
				MetaData->SetValue(NewProp_FacebookAppID, TEXT("Category"), TEXT("Online"));
				MetaData->SetValue(NewProp_FacebookAppID, TEXT("EditCondition"), TEXT("bEnableFacebookSupport"));
				MetaData->SetValue(NewProp_FacebookAppID, TEXT("ModuleRelativePath"), TEXT("Classes/IOSRuntimeSettings.h"));
				MetaData->SetValue(NewProp_FacebookAppID, TEXT("ToolTip"), TEXT("Facebook App ID obtained from Facebook's Developer Centre"));
				MetaData->SetValue(NewProp_bEnableFacebookSupport, TEXT("Category"), TEXT("Online"));
				MetaData->SetValue(NewProp_bEnableFacebookSupport, TEXT("ModuleRelativePath"), TEXT("Classes/IOSRuntimeSettings.h"));
				MetaData->SetValue(NewProp_bEnableFacebookSupport, TEXT("ToolTip"), TEXT("Whether the app supports Facebook"));
				MetaData->SetValue(NewProp_AdditionalPlistData, TEXT("Category"), TEXT("ExtraData"));
				MetaData->SetValue(NewProp_AdditionalPlistData, TEXT("ModuleRelativePath"), TEXT("Classes/IOSRuntimeSettings.h"));
				MetaData->SetValue(NewProp_AdditionalPlistData, TEXT("ToolTip"), TEXT("Any additional plist key/value data utilizing \\n for a new line"));
				MetaData->SetValue(NewProp_bSupportsIPhone, TEXT("Category"), TEXT("DeviceUsage"));
				MetaData->SetValue(NewProp_bSupportsIPhone, TEXT("ModuleRelativePath"), TEXT("Classes/IOSRuntimeSettings.h"));
				MetaData->SetValue(NewProp_bSupportsIPhone, TEXT("ToolTip"), TEXT("Whether or not to add support for iPhone devices"));
				MetaData->SetValue(NewProp_bSupportsIPad, TEXT("Category"), TEXT("DeviceUsage"));
				MetaData->SetValue(NewProp_bSupportsIPad, TEXT("ModuleRelativePath"), TEXT("Classes/IOSRuntimeSettings.h"));
				MetaData->SetValue(NewProp_bSupportsIPad, TEXT("ToolTip"), TEXT("Whether or not to add support for iPad devices"));
				MetaData->SetValue(NewProp_MinimumiOSVersion, TEXT("Category"), TEXT("OSInfo"));
				MetaData->SetValue(NewProp_MinimumiOSVersion, TEXT("ModuleRelativePath"), TEXT("Classes/IOSRuntimeSettings.h"));
				MetaData->SetValue(NewProp_MinimumiOSVersion, TEXT("ToolTip"), TEXT("Minimum iOS version this game supports"));
				MetaData->SetValue(NewProp_FrameRateLock, TEXT("Category"), TEXT("PowerUsage"));
				MetaData->SetValue(NewProp_FrameRateLock, TEXT("ConfigHierarchyEditable"), TEXT(""));
				MetaData->SetValue(NewProp_FrameRateLock, TEXT("ModuleRelativePath"), TEXT("Classes/IOSRuntimeSettings.h"));
				MetaData->SetValue(NewProp_FrameRateLock, TEXT("ToolTip"), TEXT("Set the maximum frame rate to save on power consumption"));
				MetaData->SetValue(NewProp_VersionInfo, TEXT("Category"), TEXT("BundleInformation"));
				MetaData->SetValue(NewProp_VersionInfo, TEXT("ModuleRelativePath"), TEXT("Classes/IOSRuntimeSettings.h"));
				MetaData->SetValue(NewProp_VersionInfo, TEXT("ToolTip"), TEXT("Specifies the version for the application."));
				MetaData->SetValue(NewProp_BundleIdentifier, TEXT("Category"), TEXT("BundleInformation"));
				MetaData->SetValue(NewProp_BundleIdentifier, TEXT("ModuleRelativePath"), TEXT("Classes/IOSRuntimeSettings.h"));
				MetaData->SetValue(NewProp_BundleIdentifier, TEXT("ToolTip"), TEXT("Specifies the bundle identifier for the application."));
				MetaData->SetValue(NewProp_BundleName, TEXT("Category"), TEXT("BundleInformation"));
				MetaData->SetValue(NewProp_BundleName, TEXT("ModuleRelativePath"), TEXT("Classes/IOSRuntimeSettings.h"));
				MetaData->SetValue(NewProp_BundleName, TEXT("ToolTip"), TEXT("Specifies the the name of the application bundle. This is the short name for the application bundle."));
				MetaData->SetValue(NewProp_BundleDisplayName, TEXT("Category"), TEXT("BundleInformation"));
				MetaData->SetValue(NewProp_BundleDisplayName, TEXT("ModuleRelativePath"), TEXT("Classes/IOSRuntimeSettings.h"));
				MetaData->SetValue(NewProp_BundleDisplayName, TEXT("ToolTip"), TEXT("Specifies the the display name for the application. This will be displayed under the icon on the device."));
				MetaData->SetValue(NewProp_bSupportsLandscapeRightOrientation, TEXT("Category"), TEXT("DeviceOrientations"));
				MetaData->SetValue(NewProp_bSupportsLandscapeRightOrientation, TEXT("ModuleRelativePath"), TEXT("Classes/IOSRuntimeSettings.h"));
				MetaData->SetValue(NewProp_bSupportsLandscapeRightOrientation, TEXT("ToolTip"), TEXT("Supports right landscape orientation. Portrait will not be supported."));
				MetaData->SetValue(NewProp_bSupportsLandscapeLeftOrientation, TEXT("Category"), TEXT("DeviceOrientations"));
				MetaData->SetValue(NewProp_bSupportsLandscapeLeftOrientation, TEXT("ModuleRelativePath"), TEXT("Classes/IOSRuntimeSettings.h"));
				MetaData->SetValue(NewProp_bSupportsLandscapeLeftOrientation, TEXT("ToolTip"), TEXT("Supports left landscape orientation. Portrait will not be supported."));
				MetaData->SetValue(NewProp_bSupportsUpsideDownOrientation, TEXT("Category"), TEXT("DeviceOrientations"));
				MetaData->SetValue(NewProp_bSupportsUpsideDownOrientation, TEXT("ModuleRelativePath"), TEXT("Classes/IOSRuntimeSettings.h"));
				MetaData->SetValue(NewProp_bSupportsUpsideDownOrientation, TEXT("ToolTip"), TEXT("Supports upside down portrait orientation. Landscape will not be supported."));
				MetaData->SetValue(NewProp_bSupportsPortraitOrientation, TEXT("Category"), TEXT("DeviceOrientations"));
				MetaData->SetValue(NewProp_bSupportsPortraitOrientation, TEXT("ModuleRelativePath"), TEXT("Classes/IOSRuntimeSettings.h"));
				MetaData->SetValue(NewProp_bSupportsPortraitOrientation, TEXT("ToolTip"), TEXT("Supports default portrait orientation. Landscape will not be supported."));
				MetaData->SetValue(NewProp_SSHPrivateKeyOverridePath, TEXT("Category"), TEXT("Build"));
				MetaData->SetValue(NewProp_SSHPrivateKeyOverridePath, TEXT("ConfigHierarchyEditable"), TEXT(""));
				MetaData->SetValue(NewProp_SSHPrivateKeyOverridePath, TEXT("DisplayName"), TEXT("Override existing SSH permissions file"));
				MetaData->SetValue(NewProp_SSHPrivateKeyOverridePath, TEXT("EditCondition"), TEXT("bUseRSync"));
				MetaData->SetValue(NewProp_SSHPrivateKeyOverridePath, TEXT("ModuleRelativePath"), TEXT("Classes/IOSRuntimeSettings.h"));
				MetaData->SetValue(NewProp_SSHPrivateKeyOverridePath, TEXT("ToolTip"), TEXT("The path of the ssh permissions key to be used when connecting to the remote server."));
				MetaData->SetValue(NewProp_SSHPrivateKeyLocation, TEXT("Category"), TEXT("Build"));
				MetaData->SetValue(NewProp_SSHPrivateKeyLocation, TEXT("DisplayName"), TEXT("Found Existing SSH permissions file"));
				MetaData->SetValue(NewProp_SSHPrivateKeyLocation, TEXT("ModuleRelativePath"), TEXT("Classes/IOSRuntimeSettings.h"));
				MetaData->SetValue(NewProp_SSHPrivateKeyLocation, TEXT("ToolTip"), TEXT("The existing location of an SSH Key found by UE4."));
				MetaData->SetValue(NewProp_DeltaCopyInstallPath, TEXT("Category"), TEXT("Build"));
				MetaData->SetValue(NewProp_DeltaCopyInstallPath, TEXT("ConfigHierarchyEditable"), TEXT(""));
				MetaData->SetValue(NewProp_DeltaCopyInstallPath, TEXT("EditCondition"), TEXT("bUseRSync"));
				MetaData->SetValue(NewProp_DeltaCopyInstallPath, TEXT("ModuleRelativePath"), TEXT("Classes/IOSRuntimeSettings.h"));
				MetaData->SetValue(NewProp_DeltaCopyInstallPath, TEXT("ToolTip"), TEXT("The install directory of DeltaCopy."));
				MetaData->SetValue(NewProp_RSyncUsername, TEXT("Category"), TEXT("Build"));
				MetaData->SetValue(NewProp_RSyncUsername, TEXT("ConfigHierarchyEditable"), TEXT(""));
				MetaData->SetValue(NewProp_RSyncUsername, TEXT("DisplayName"), TEXT("Username on Remote Server."));
				MetaData->SetValue(NewProp_RSyncUsername, TEXT("EditCondition"), TEXT("bUseRSync"));
				MetaData->SetValue(NewProp_RSyncUsername, TEXT("ModuleRelativePath"), TEXT("Classes/IOSRuntimeSettings.h"));
				MetaData->SetValue(NewProp_RSyncUsername, TEXT("ToolTip"), TEXT("The mac users name which matches the SSH Private Key, for remote builds using RSync."));
				MetaData->SetValue(NewProp_bUseRSync, TEXT("Category"), TEXT("Build"));
				MetaData->SetValue(NewProp_bUseRSync, TEXT("ConfigHierarchyEditable"), TEXT(""));
				MetaData->SetValue(NewProp_bUseRSync, TEXT("DisplayName"), TEXT("Use RSync for building IOS"));
				MetaData->SetValue(NewProp_bUseRSync, TEXT("ModuleRelativePath"), TEXT("Classes/IOSRuntimeSettings.h"));
				MetaData->SetValue(NewProp_bUseRSync, TEXT("ToolTip"), TEXT("Enable the use of RSync for remote builds on a mac"));
				MetaData->SetValue(NewProp_RemoteServerName, TEXT("Category"), TEXT("Build"));
				MetaData->SetValue(NewProp_RemoteServerName, TEXT("ConfigHierarchyEditable"), TEXT(""));
				MetaData->SetValue(NewProp_RemoteServerName, TEXT("ModuleRelativePath"), TEXT("Classes/IOSRuntimeSettings.h"));
				MetaData->SetValue(NewProp_RemoteServerName, TEXT("ToolTip"), TEXT("The name or ip address of the remote mac which will be used to build IOS"));
				MetaData->SetValue(NewProp_AdditionalShippingLinkerFlags, TEXT("Category"), TEXT("Build"));
				MetaData->SetValue(NewProp_AdditionalShippingLinkerFlags, TEXT("ConfigHierarchyEditable"), TEXT(""));
				MetaData->SetValue(NewProp_AdditionalShippingLinkerFlags, TEXT("DispalyName"), TEXT("Additional Shipping Linker Flags"));
				MetaData->SetValue(NewProp_AdditionalShippingLinkerFlags, TEXT("ModuleRelativePath"), TEXT("Classes/IOSRuntimeSettings.h"));
				MetaData->SetValue(NewProp_AdditionalShippingLinkerFlags, TEXT("ToolTip"), TEXT("Any additional linker flags to pass to the linker in shipping builds"));
				MetaData->SetValue(NewProp_AdditionalLinkerFlags, TEXT("Category"), TEXT("Build"));
				MetaData->SetValue(NewProp_AdditionalLinkerFlags, TEXT("ConfigHierarchyEditable"), TEXT(""));
				MetaData->SetValue(NewProp_AdditionalLinkerFlags, TEXT("DispalyName"), TEXT("Additional Non-Shipping Linker Flags"));
				MetaData->SetValue(NewProp_AdditionalLinkerFlags, TEXT("ModuleRelativePath"), TEXT("Classes/IOSRuntimeSettings.h"));
				MetaData->SetValue(NewProp_AdditionalLinkerFlags, TEXT("ToolTip"), TEXT("Any additional linker flags to pass to the linker in non-shipping builds"));
				MetaData->SetValue(NewProp_bShipForArmV7S, TEXT("Category"), TEXT("Build"));
				MetaData->SetValue(NewProp_bShipForArmV7S, TEXT("DisplayName"), TEXT("Support armv7s in Shipping"));
				MetaData->SetValue(NewProp_bShipForArmV7S, TEXT("ModuleRelativePath"), TEXT("Classes/IOSRuntimeSettings.h"));
				MetaData->SetValue(NewProp_bShipForArmV7S, TEXT("ToolTip"), TEXT("Enable ArmV7s support?"));
				MetaData->SetValue(NewProp_bShipForArm64, TEXT("Category"), TEXT("Build"));
				MetaData->SetValue(NewProp_bShipForArm64, TEXT("DisplayName"), TEXT("Support arm64 in Shipping"));
				MetaData->SetValue(NewProp_bShipForArm64, TEXT("ModuleRelativePath"), TEXT("Classes/IOSRuntimeSettings.h"));
				MetaData->SetValue(NewProp_bShipForArm64, TEXT("ToolTip"), TEXT("Enable Arm64 support?"));
				MetaData->SetValue(NewProp_bShipForArmV7, TEXT("Category"), TEXT("Build"));
				MetaData->SetValue(NewProp_bShipForArmV7, TEXT("DisplayName"), TEXT("Support armv7 in Shipping"));
				MetaData->SetValue(NewProp_bShipForArmV7, TEXT("ModuleRelativePath"), TEXT("Classes/IOSRuntimeSettings.h"));
				MetaData->SetValue(NewProp_bShipForArmV7, TEXT("ToolTip"), TEXT("Enable ArmV7 support? (this will be used if all type are unchecked)"));
				MetaData->SetValue(NewProp_bDevForArmV7S, TEXT("Category"), TEXT("Build"));
				MetaData->SetValue(NewProp_bDevForArmV7S, TEXT("DisplayName"), TEXT("Support armv7s in Development"));
				MetaData->SetValue(NewProp_bDevForArmV7S, TEXT("ModuleRelativePath"), TEXT("Classes/IOSRuntimeSettings.h"));
				MetaData->SetValue(NewProp_bDevForArmV7S, TEXT("ToolTip"), TEXT("Enable ArmV7s support?"));
				MetaData->SetValue(NewProp_bDevForArm64, TEXT("Category"), TEXT("Build"));
				MetaData->SetValue(NewProp_bDevForArm64, TEXT("DisplayName"), TEXT("Support arm64 in Development"));
				MetaData->SetValue(NewProp_bDevForArm64, TEXT("ModuleRelativePath"), TEXT("Classes/IOSRuntimeSettings.h"));
				MetaData->SetValue(NewProp_bDevForArm64, TEXT("ToolTip"), TEXT("Enable Arm64 support?"));
				MetaData->SetValue(NewProp_bDevForArmV7, TEXT("Category"), TEXT("Build"));
				MetaData->SetValue(NewProp_bDevForArmV7, TEXT("DisplayName"), TEXT("Support armv7 in Development"));
				MetaData->SetValue(NewProp_bDevForArmV7, TEXT("ModuleRelativePath"), TEXT("Classes/IOSRuntimeSettings.h"));
				MetaData->SetValue(NewProp_bDevForArmV7, TEXT("ToolTip"), TEXT("Enable ArmV7 support? (this will be used if all type are unchecked)"));
				MetaData->SetValue(NewProp_bSupportsOpenGLES2, TEXT("Category"), TEXT("Rendering"));
				MetaData->SetValue(NewProp_bSupportsOpenGLES2, TEXT("ModuleRelativePath"), TEXT("Classes/IOSRuntimeSettings.h"));
				MetaData->SetValue(NewProp_bSupportsOpenGLES2, TEXT("ToolTip"), TEXT("Whether or not to add support for OpenGL ES2 (if this is false, then your game should specify minimum IOS8 version)"));
				MetaData->SetValue(NewProp_bSupportsMetalMRT, TEXT("Category"), TEXT("Rendering"));
				MetaData->SetValue(NewProp_bSupportsMetalMRT, TEXT("DisplayName"), TEXT("[Work in Progress] Support Deferred Rendering with Metal (A8 and up devices)"));
				MetaData->SetValue(NewProp_bSupportsMetalMRT, TEXT("ModuleRelativePath"), TEXT("Classes/IOSRuntimeSettings.h"));
				MetaData->SetValue(NewProp_bSupportsMetalMRT, TEXT("ToolTip"), TEXT("Whether or not to add support for deferred rendering Metal API (requires IOS8 and A8 processors)"));
				MetaData->SetValue(NewProp_bSupportsMetal, TEXT("Category"), TEXT("Rendering"));
				MetaData->SetValue(NewProp_bSupportsMetal, TEXT("DisplayName"), TEXT("Support Forward Rendering with Metal (A7 and up devices)"));
				MetaData->SetValue(NewProp_bSupportsMetal, TEXT("ModuleRelativePath"), TEXT("Classes/IOSRuntimeSettings.h"));
				MetaData->SetValue(NewProp_bSupportsMetal, TEXT("ToolTip"), TEXT("Whether or not to add support for Metal API (requires IOS8 and A7 processors)."));
				MetaData->SetValue(NewProp_bEnableCloudKitSupport, TEXT("Category"), TEXT("Online"));
				MetaData->SetValue(NewProp_bEnableCloudKitSupport, TEXT("ModuleRelativePath"), TEXT("Classes/IOSRuntimeSettings.h"));
				MetaData->SetValue(NewProp_bEnableCloudKitSupport, TEXT("ToolTip"), TEXT("Should Cloud Kit support (iOS Online Subsystem) be enabled?"));
				MetaData->SetValue(NewProp_bEnableGameCenterSupport, TEXT("Category"), TEXT("Online"));
				MetaData->SetValue(NewProp_bEnableGameCenterSupport, TEXT("ConfigHierarchyEditable"), TEXT(""));
				MetaData->SetValue(NewProp_bEnableGameCenterSupport, TEXT("ModuleRelativePath"), TEXT("Classes/IOSRuntimeSettings.h"));
				MetaData->SetValue(NewProp_bEnableGameCenterSupport, TEXT("ToolTip"), TEXT("Should Game Center support (iOS Online Subsystem) be enabled?"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UIOSRuntimeSettings(Z_Construct_UClass_UIOSRuntimeSettings, TEXT("UIOSRuntimeSettings"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UIOSRuntimeSettings);
	UPackage* Z_Construct_UPackage_IOSRuntimeSettings()
	{
		static UPackage* ReturnPackage = NULL;
		if (!ReturnPackage)
		{
			ReturnPackage = CastChecked<UPackage>(StaticFindObjectFast(UPackage::StaticClass(), NULL, FName(TEXT("/Script/IOSRuntimeSettings")), false, false));
			ReturnPackage->SetPackageFlags(PKG_CompiledIn | 0x00000000);
			FGuid Guid;
			Guid.A = 0x7C2A5B14;
			Guid.B = 0x7F8DBAA6;
			Guid.C = 0x00000000;
			Guid.D = 0x00000000;
			ReturnPackage->SetGuid(Guid);

		}
		return ReturnPackage;
	}
#endif

PRAGMA_ENABLE_DEPRECATION_WARNINGS
