// Copyright 1998-2015 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Boilerplate C++ definitions for a single module.
	This is automatically generated by UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "Classes/Landscape.h"
#include "Landscape.generated.dep.h"
PRAGMA_DISABLE_DEPRECATION_WARNINGS
void EmptyLinkFunctionForGeneratedCodeLandscape() {}
	void UControlPointMeshComponent::StaticRegisterNativesUControlPointMeshComponent()
	{
	}
	IMPLEMENT_CLASS(UControlPointMeshComponent, 1860091076);
class UScriptStruct* FGrassVariety::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern LANDSCAPE_API class UScriptStruct* Z_Construct_UScriptStruct_FGrassVariety();
		extern LANDSCAPE_API uint32 Get_Z_Construct_UScriptStruct_FGrassVariety_CRC();
		extern LANDSCAPE_API class UPackage* Z_Construct_UPackage_Landscape();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FGrassVariety, Z_Construct_UPackage_Landscape(), TEXT("GrassVariety"), sizeof(FGrassVariety), Get_Z_Construct_UScriptStruct_FGrassVariety_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FGrassVariety(FGrassVariety::StaticStruct, TEXT("/Script/Landscape"));
static struct FScriptStruct_Landscape_StaticRegisterNativesFGrassVariety
{
	FScriptStruct_Landscape_StaticRegisterNativesFGrassVariety()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("GrassVariety")),new UScriptStruct::TCppStructOps<FGrassVariety>);
	}
} ScriptStruct_Landscape_StaticRegisterNativesFGrassVariety;
	void ULandscapeGrassType::StaticRegisterNativesULandscapeGrassType()
	{
	}
	IMPLEMENT_CLASS(ULandscapeGrassType, 2049087093);
class UScriptStruct* FWeightmapLayerAllocationInfo::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern LANDSCAPE_API class UScriptStruct* Z_Construct_UScriptStruct_FWeightmapLayerAllocationInfo();
		extern LANDSCAPE_API uint32 Get_Z_Construct_UScriptStruct_FWeightmapLayerAllocationInfo_CRC();
		extern LANDSCAPE_API class UPackage* Z_Construct_UPackage_Landscape();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FWeightmapLayerAllocationInfo, Z_Construct_UPackage_Landscape(), TEXT("WeightmapLayerAllocationInfo"), sizeof(FWeightmapLayerAllocationInfo), Get_Z_Construct_UScriptStruct_FWeightmapLayerAllocationInfo_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FWeightmapLayerAllocationInfo(FWeightmapLayerAllocationInfo::StaticStruct, TEXT("/Script/Landscape"));
static struct FScriptStruct_Landscape_StaticRegisterNativesFWeightmapLayerAllocationInfo
{
	FScriptStruct_Landscape_StaticRegisterNativesFWeightmapLayerAllocationInfo()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("WeightmapLayerAllocationInfo")),new UScriptStruct::TCppStructOps<FWeightmapLayerAllocationInfo>);
	}
} ScriptStruct_Landscape_StaticRegisterNativesFWeightmapLayerAllocationInfo;
	void ULandscapeComponent::StaticRegisterNativesULandscapeComponent()
	{
	}
	IMPLEMENT_CLASS(ULandscapeComponent, 953950955);
	void ALandscapeGizmoActor::StaticRegisterNativesALandscapeGizmoActor()
	{
	}
	IMPLEMENT_CLASS(ALandscapeGizmoActor, 418630717);
static class UEnum* ELandscapeGizmoType_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern LANDSCAPE_API class UEnum* Z_Construct_UEnum_Landscape_ELandscapeGizmoType();
		extern LANDSCAPE_API class UPackage* Z_Construct_UPackage_Landscape();
		Singleton = GetStaticEnum(Z_Construct_UEnum_Landscape_ELandscapeGizmoType, Z_Construct_UPackage_Landscape(), TEXT("ELandscapeGizmoType"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_ELandscapeGizmoType(ELandscapeGizmoType_StaticEnum, TEXT("/Script/Landscape"));
class UScriptStruct* FGizmoSelectData::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern LANDSCAPE_API class UScriptStruct* Z_Construct_UScriptStruct_FGizmoSelectData();
		extern LANDSCAPE_API uint32 Get_Z_Construct_UScriptStruct_FGizmoSelectData_CRC();
		extern LANDSCAPE_API class UPackage* Z_Construct_UPackage_Landscape();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FGizmoSelectData, Z_Construct_UPackage_Landscape(), TEXT("GizmoSelectData"), sizeof(FGizmoSelectData), Get_Z_Construct_UScriptStruct_FGizmoSelectData_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FGizmoSelectData(FGizmoSelectData::StaticStruct, TEXT("/Script/Landscape"));
static struct FScriptStruct_Landscape_StaticRegisterNativesFGizmoSelectData
{
	FScriptStruct_Landscape_StaticRegisterNativesFGizmoSelectData()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("GizmoSelectData")),new UScriptStruct::TCppStructOps<FGizmoSelectData>);
	}
} ScriptStruct_Landscape_StaticRegisterNativesFGizmoSelectData;
	void ALandscapeGizmoActiveActor::StaticRegisterNativesALandscapeGizmoActiveActor()
	{
	}
	IMPLEMENT_CLASS(ALandscapeGizmoActiveActor, 2898315184);
	void ULandscapeGizmoRenderComponent::StaticRegisterNativesULandscapeGizmoRenderComponent()
	{
	}
	IMPLEMENT_CLASS(ULandscapeGizmoRenderComponent, 2796503118);
	void ULandscapeHeightfieldCollisionComponent::StaticRegisterNativesULandscapeHeightfieldCollisionComponent()
	{
	}
	IMPLEMENT_CLASS(ULandscapeHeightfieldCollisionComponent, 3537408109);
	void ULandscapeMeshCollisionComponent::StaticRegisterNativesULandscapeMeshCollisionComponent()
	{
	}
	IMPLEMENT_CLASS(ULandscapeMeshCollisionComponent, 267695139);
class UScriptStruct* FLandscapeInfoLayerSettings::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern LANDSCAPE_API class UScriptStruct* Z_Construct_UScriptStruct_FLandscapeInfoLayerSettings();
		extern LANDSCAPE_API uint32 Get_Z_Construct_UScriptStruct_FLandscapeInfoLayerSettings_CRC();
		extern LANDSCAPE_API class UPackage* Z_Construct_UPackage_Landscape();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FLandscapeInfoLayerSettings, Z_Construct_UPackage_Landscape(), TEXT("LandscapeInfoLayerSettings"), sizeof(FLandscapeInfoLayerSettings), Get_Z_Construct_UScriptStruct_FLandscapeInfoLayerSettings_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FLandscapeInfoLayerSettings(FLandscapeInfoLayerSettings::StaticStruct, TEXT("/Script/Landscape"));
static struct FScriptStruct_Landscape_StaticRegisterNativesFLandscapeInfoLayerSettings
{
	FScriptStruct_Landscape_StaticRegisterNativesFLandscapeInfoLayerSettings()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("LandscapeInfoLayerSettings")),new UScriptStruct::TCppStructOps<FLandscapeInfoLayerSettings>);
	}
} ScriptStruct_Landscape_StaticRegisterNativesFLandscapeInfoLayerSettings;
	void ULandscapeInfo::StaticRegisterNativesULandscapeInfo()
	{
	}
	IMPLEMENT_CLASS(ULandscapeInfo, 2047866955);
	void ULandscapeInfoMap::StaticRegisterNativesULandscapeInfoMap()
	{
	}
	IMPLEMENT_CLASS(ULandscapeInfoMap, 3457231587);
	void ULandscapeLayerInfoObject::StaticRegisterNativesULandscapeLayerInfoObject()
	{
	}
	IMPLEMENT_CLASS(ULandscapeLayerInfoObject, 2458435087);
	void ULandscapeMaterialInstanceConstant::StaticRegisterNativesULandscapeMaterialInstanceConstant()
	{
	}
	IMPLEMENT_CLASS(ULandscapeMaterialInstanceConstant, 2318458704);
	void ALandscapeMeshProxyActor::StaticRegisterNativesALandscapeMeshProxyActor()
	{
	}
	IMPLEMENT_CLASS(ALandscapeMeshProxyActor, 43102494);
	void ULandscapeMeshProxyComponent::StaticRegisterNativesULandscapeMeshProxyComponent()
	{
	}
	IMPLEMENT_CLASS(ULandscapeMeshProxyComponent, 3345379170);
static class UEnum* ELandscapeLODFalloff_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern LANDSCAPE_API class UEnum* Z_Construct_UEnum_Landscape_ELandscapeLODFalloff();
		extern LANDSCAPE_API class UPackage* Z_Construct_UPackage_Landscape();
		Singleton = GetStaticEnum(Z_Construct_UEnum_Landscape_ELandscapeLODFalloff, Z_Construct_UPackage_Landscape(), TEXT("ELandscapeLODFalloff"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_ELandscapeLODFalloff(ELandscapeLODFalloff_StaticEnum, TEXT("/Script/Landscape"));
static class UEnum* ELandscapeLayerPaintingRestriction_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern LANDSCAPE_API class UEnum* Z_Construct_UEnum_Landscape_ELandscapeLayerPaintingRestriction();
		extern LANDSCAPE_API class UPackage* Z_Construct_UPackage_Landscape();
		Singleton = GetStaticEnum(Z_Construct_UEnum_Landscape_ELandscapeLayerPaintingRestriction, Z_Construct_UPackage_Landscape(), TEXT("ELandscapeLayerPaintingRestriction"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_ELandscapeLayerPaintingRestriction(ELandscapeLayerPaintingRestriction_StaticEnum, TEXT("/Script/Landscape"));
class UScriptStruct* FLandscapeImportLayerInfo::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern LANDSCAPE_API class UScriptStruct* Z_Construct_UScriptStruct_FLandscapeImportLayerInfo();
		extern LANDSCAPE_API uint32 Get_Z_Construct_UScriptStruct_FLandscapeImportLayerInfo_CRC();
		extern LANDSCAPE_API class UPackage* Z_Construct_UPackage_Landscape();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FLandscapeImportLayerInfo, Z_Construct_UPackage_Landscape(), TEXT("LandscapeImportLayerInfo"), sizeof(FLandscapeImportLayerInfo), Get_Z_Construct_UScriptStruct_FLandscapeImportLayerInfo_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FLandscapeImportLayerInfo(FLandscapeImportLayerInfo::StaticStruct, TEXT("/Script/Landscape"));
static struct FScriptStruct_Landscape_StaticRegisterNativesFLandscapeImportLayerInfo
{
	FScriptStruct_Landscape_StaticRegisterNativesFLandscapeImportLayerInfo()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("LandscapeImportLayerInfo")),new UScriptStruct::TCppStructOps<FLandscapeImportLayerInfo>);
	}
} ScriptStruct_Landscape_StaticRegisterNativesFLandscapeImportLayerInfo;
class UScriptStruct* FLandscapeLayerStruct::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern LANDSCAPE_API class UScriptStruct* Z_Construct_UScriptStruct_FLandscapeLayerStruct();
		extern LANDSCAPE_API uint32 Get_Z_Construct_UScriptStruct_FLandscapeLayerStruct_CRC();
		extern LANDSCAPE_API class UPackage* Z_Construct_UPackage_Landscape();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FLandscapeLayerStruct, Z_Construct_UPackage_Landscape(), TEXT("LandscapeLayerStruct"), sizeof(FLandscapeLayerStruct), Get_Z_Construct_UScriptStruct_FLandscapeLayerStruct_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FLandscapeLayerStruct(FLandscapeLayerStruct::StaticStruct, TEXT("/Script/Landscape"));
static struct FScriptStruct_Landscape_StaticRegisterNativesFLandscapeLayerStruct
{
	FScriptStruct_Landscape_StaticRegisterNativesFLandscapeLayerStruct()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("LandscapeLayerStruct")),new UScriptStruct::TCppStructOps<FLandscapeLayerStruct>);
	}
} ScriptStruct_Landscape_StaticRegisterNativesFLandscapeLayerStruct;
class UScriptStruct* FLandscapeEditorLayerSettings::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern LANDSCAPE_API class UScriptStruct* Z_Construct_UScriptStruct_FLandscapeEditorLayerSettings();
		extern LANDSCAPE_API uint32 Get_Z_Construct_UScriptStruct_FLandscapeEditorLayerSettings_CRC();
		extern LANDSCAPE_API class UPackage* Z_Construct_UPackage_Landscape();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FLandscapeEditorLayerSettings, Z_Construct_UPackage_Landscape(), TEXT("LandscapeEditorLayerSettings"), sizeof(FLandscapeEditorLayerSettings), Get_Z_Construct_UScriptStruct_FLandscapeEditorLayerSettings_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FLandscapeEditorLayerSettings(FLandscapeEditorLayerSettings::StaticStruct, TEXT("/Script/Landscape"));
static struct FScriptStruct_Landscape_StaticRegisterNativesFLandscapeEditorLayerSettings
{
	FScriptStruct_Landscape_StaticRegisterNativesFLandscapeEditorLayerSettings()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("LandscapeEditorLayerSettings")),new UScriptStruct::TCppStructOps<FLandscapeEditorLayerSettings>);
	}
} ScriptStruct_Landscape_StaticRegisterNativesFLandscapeEditorLayerSettings;
class UScriptStruct* FLandscapeWeightmapUsage::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern LANDSCAPE_API class UScriptStruct* Z_Construct_UScriptStruct_FLandscapeWeightmapUsage();
		extern LANDSCAPE_API uint32 Get_Z_Construct_UScriptStruct_FLandscapeWeightmapUsage_CRC();
		extern LANDSCAPE_API class UPackage* Z_Construct_UPackage_Landscape();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FLandscapeWeightmapUsage, Z_Construct_UPackage_Landscape(), TEXT("LandscapeWeightmapUsage"), sizeof(FLandscapeWeightmapUsage), Get_Z_Construct_UScriptStruct_FLandscapeWeightmapUsage_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FLandscapeWeightmapUsage(FLandscapeWeightmapUsage::StaticStruct, TEXT("/Script/Landscape"));
static struct FScriptStruct_Landscape_StaticRegisterNativesFLandscapeWeightmapUsage
{
	FScriptStruct_Landscape_StaticRegisterNativesFLandscapeWeightmapUsage()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("LandscapeWeightmapUsage")),new UScriptStruct::TCppStructOps<FLandscapeWeightmapUsage>);
	}
} ScriptStruct_Landscape_StaticRegisterNativesFLandscapeWeightmapUsage;
	void ALandscapeProxy::StaticRegisterNativesALandscapeProxy()
	{
		FNativeFunctionRegistrar::RegisterFunction(ALandscapeProxy::StaticClass(),"ChangeLODDistanceFactor",(Native)&ALandscapeProxy::execChangeLODDistanceFactor);
		FNativeFunctionRegistrar::RegisterFunction(ALandscapeProxy::StaticClass(),"EditorApplySpline",(Native)&ALandscapeProxy::execEditorApplySpline);
	}
	IMPLEMENT_CLASS(ALandscapeProxy, 1940531683);
static class UEnum* ELandscapeSetupErrors_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern LANDSCAPE_API class UEnum* Z_Construct_UEnum_Landscape_ELandscapeSetupErrors();
		extern LANDSCAPE_API class UPackage* Z_Construct_UPackage_Landscape();
		Singleton = GetStaticEnum(Z_Construct_UEnum_Landscape_ELandscapeSetupErrors, Z_Construct_UPackage_Landscape(), TEXT("ELandscapeSetupErrors"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_ELandscapeSetupErrors(ELandscapeSetupErrors_StaticEnum, TEXT("/Script/Landscape"));
	void ALandscape::StaticRegisterNativesALandscape()
	{
	}
	IMPLEMENT_CLASS(ALandscape, 3631797760);
static class UEnum* LandscapeSplineMeshOrientation_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern LANDSCAPE_API class UEnum* Z_Construct_UEnum_Landscape_LandscapeSplineMeshOrientation();
		extern LANDSCAPE_API class UPackage* Z_Construct_UPackage_Landscape();
		Singleton = GetStaticEnum(Z_Construct_UEnum_Landscape_LandscapeSplineMeshOrientation, Z_Construct_UPackage_Landscape(), TEXT("LandscapeSplineMeshOrientation"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_LandscapeSplineMeshOrientation(LandscapeSplineMeshOrientation_StaticEnum, TEXT("/Script/Landscape"));
class UScriptStruct* FLandscapeSplineMeshEntry::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern LANDSCAPE_API class UScriptStruct* Z_Construct_UScriptStruct_FLandscapeSplineMeshEntry();
		extern LANDSCAPE_API uint32 Get_Z_Construct_UScriptStruct_FLandscapeSplineMeshEntry_CRC();
		extern LANDSCAPE_API class UPackage* Z_Construct_UPackage_Landscape();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FLandscapeSplineMeshEntry, Z_Construct_UPackage_Landscape(), TEXT("LandscapeSplineMeshEntry"), sizeof(FLandscapeSplineMeshEntry), Get_Z_Construct_UScriptStruct_FLandscapeSplineMeshEntry_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FLandscapeSplineMeshEntry(FLandscapeSplineMeshEntry::StaticStruct, TEXT("/Script/Landscape"));
static struct FScriptStruct_Landscape_StaticRegisterNativesFLandscapeSplineMeshEntry
{
	FScriptStruct_Landscape_StaticRegisterNativesFLandscapeSplineMeshEntry()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("LandscapeSplineMeshEntry")),new UScriptStruct::TCppStructOps<FLandscapeSplineMeshEntry>);
	}
} ScriptStruct_Landscape_StaticRegisterNativesFLandscapeSplineMeshEntry;
class UScriptStruct* FLandscapeSplineSegmentConnection::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern LANDSCAPE_API class UScriptStruct* Z_Construct_UScriptStruct_FLandscapeSplineSegmentConnection();
		extern LANDSCAPE_API uint32 Get_Z_Construct_UScriptStruct_FLandscapeSplineSegmentConnection_CRC();
		extern LANDSCAPE_API class UPackage* Z_Construct_UPackage_Landscape();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FLandscapeSplineSegmentConnection, Z_Construct_UPackage_Landscape(), TEXT("LandscapeSplineSegmentConnection"), sizeof(FLandscapeSplineSegmentConnection), Get_Z_Construct_UScriptStruct_FLandscapeSplineSegmentConnection_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FLandscapeSplineSegmentConnection(FLandscapeSplineSegmentConnection::StaticStruct, TEXT("/Script/Landscape"));
static struct FScriptStruct_Landscape_StaticRegisterNativesFLandscapeSplineSegmentConnection
{
	FScriptStruct_Landscape_StaticRegisterNativesFLandscapeSplineSegmentConnection()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("LandscapeSplineSegmentConnection")),new UScriptStruct::TCppStructOps<FLandscapeSplineSegmentConnection>);
	}
} ScriptStruct_Landscape_StaticRegisterNativesFLandscapeSplineSegmentConnection;
class UScriptStruct* FLandscapeSplineInterpPoint::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern LANDSCAPE_API class UScriptStruct* Z_Construct_UScriptStruct_FLandscapeSplineInterpPoint();
		extern LANDSCAPE_API uint32 Get_Z_Construct_UScriptStruct_FLandscapeSplineInterpPoint_CRC();
		extern LANDSCAPE_API class UPackage* Z_Construct_UPackage_Landscape();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FLandscapeSplineInterpPoint, Z_Construct_UPackage_Landscape(), TEXT("LandscapeSplineInterpPoint"), sizeof(FLandscapeSplineInterpPoint), Get_Z_Construct_UScriptStruct_FLandscapeSplineInterpPoint_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FLandscapeSplineInterpPoint(FLandscapeSplineInterpPoint::StaticStruct, TEXT("/Script/Landscape"));
static struct FScriptStruct_Landscape_StaticRegisterNativesFLandscapeSplineInterpPoint
{
	FScriptStruct_Landscape_StaticRegisterNativesFLandscapeSplineInterpPoint()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("LandscapeSplineInterpPoint")),new UScriptStruct::TCppStructOps<FLandscapeSplineInterpPoint>);
	}
} ScriptStruct_Landscape_StaticRegisterNativesFLandscapeSplineInterpPoint;
	void ULandscapeSplineSegment::StaticRegisterNativesULandscapeSplineSegment()
	{
	}
	IMPLEMENT_CLASS(ULandscapeSplineSegment, 2768205072);
class UScriptStruct* FLandscapeSplineConnection::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern LANDSCAPE_API class UScriptStruct* Z_Construct_UScriptStruct_FLandscapeSplineConnection();
		extern LANDSCAPE_API uint32 Get_Z_Construct_UScriptStruct_FLandscapeSplineConnection_CRC();
		extern LANDSCAPE_API class UPackage* Z_Construct_UPackage_Landscape();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FLandscapeSplineConnection, Z_Construct_UPackage_Landscape(), TEXT("LandscapeSplineConnection"), sizeof(FLandscapeSplineConnection), Get_Z_Construct_UScriptStruct_FLandscapeSplineConnection_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FLandscapeSplineConnection(FLandscapeSplineConnection::StaticStruct, TEXT("/Script/Landscape"));
static struct FScriptStruct_Landscape_StaticRegisterNativesFLandscapeSplineConnection
{
	FScriptStruct_Landscape_StaticRegisterNativesFLandscapeSplineConnection()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("LandscapeSplineConnection")),new UScriptStruct::TCppStructOps<FLandscapeSplineConnection>);
	}
} ScriptStruct_Landscape_StaticRegisterNativesFLandscapeSplineConnection;
	void ULandscapeSplineControlPoint::StaticRegisterNativesULandscapeSplineControlPoint()
	{
	}
	IMPLEMENT_CLASS(ULandscapeSplineControlPoint, 2135835528);
class UScriptStruct* FForeignWorldSplineData::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern LANDSCAPE_API class UScriptStruct* Z_Construct_UScriptStruct_FForeignWorldSplineData();
		extern LANDSCAPE_API uint32 Get_Z_Construct_UScriptStruct_FForeignWorldSplineData_CRC();
		extern LANDSCAPE_API class UPackage* Z_Construct_UPackage_Landscape();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FForeignWorldSplineData, Z_Construct_UPackage_Landscape(), TEXT("ForeignWorldSplineData"), sizeof(FForeignWorldSplineData), Get_Z_Construct_UScriptStruct_FForeignWorldSplineData_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FForeignWorldSplineData(FForeignWorldSplineData::StaticStruct, TEXT("/Script/Landscape"));
static struct FScriptStruct_Landscape_StaticRegisterNativesFForeignWorldSplineData
{
	FScriptStruct_Landscape_StaticRegisterNativesFForeignWorldSplineData()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("ForeignWorldSplineData")),new UScriptStruct::TCppStructOps<FForeignWorldSplineData>);
	}
} ScriptStruct_Landscape_StaticRegisterNativesFForeignWorldSplineData;
class UScriptStruct* FForeignSplineSegmentData::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern LANDSCAPE_API class UScriptStruct* Z_Construct_UScriptStruct_FForeignSplineSegmentData();
		extern LANDSCAPE_API uint32 Get_Z_Construct_UScriptStruct_FForeignSplineSegmentData_CRC();
		extern LANDSCAPE_API class UPackage* Z_Construct_UPackage_Landscape();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FForeignSplineSegmentData, Z_Construct_UPackage_Landscape(), TEXT("ForeignSplineSegmentData"), sizeof(FForeignSplineSegmentData), Get_Z_Construct_UScriptStruct_FForeignSplineSegmentData_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FForeignSplineSegmentData(FForeignSplineSegmentData::StaticStruct, TEXT("/Script/Landscape"));
static struct FScriptStruct_Landscape_StaticRegisterNativesFForeignSplineSegmentData
{
	FScriptStruct_Landscape_StaticRegisterNativesFForeignSplineSegmentData()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("ForeignSplineSegmentData")),new UScriptStruct::TCppStructOps<FForeignSplineSegmentData>);
	}
} ScriptStruct_Landscape_StaticRegisterNativesFForeignSplineSegmentData;
class UScriptStruct* FForeignControlPointData::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern LANDSCAPE_API class UScriptStruct* Z_Construct_UScriptStruct_FForeignControlPointData();
		extern LANDSCAPE_API uint32 Get_Z_Construct_UScriptStruct_FForeignControlPointData_CRC();
		extern LANDSCAPE_API class UPackage* Z_Construct_UPackage_Landscape();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FForeignControlPointData, Z_Construct_UPackage_Landscape(), TEXT("ForeignControlPointData"), sizeof(FForeignControlPointData), Get_Z_Construct_UScriptStruct_FForeignControlPointData_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FForeignControlPointData(FForeignControlPointData::StaticStruct, TEXT("/Script/Landscape"));
static struct FScriptStruct_Landscape_StaticRegisterNativesFForeignControlPointData
{
	FScriptStruct_Landscape_StaticRegisterNativesFForeignControlPointData()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("ForeignControlPointData")),new UScriptStruct::TCppStructOps<FForeignControlPointData>);
	}
} ScriptStruct_Landscape_StaticRegisterNativesFForeignControlPointData;
	void ULandscapeSplinesComponent::StaticRegisterNativesULandscapeSplinesComponent()
	{
	}
	IMPLEMENT_CLASS(ULandscapeSplinesComponent, 1764647610);
class UScriptStruct* FGrassInput::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern LANDSCAPE_API class UScriptStruct* Z_Construct_UScriptStruct_FGrassInput();
		extern LANDSCAPE_API uint32 Get_Z_Construct_UScriptStruct_FGrassInput_CRC();
		extern LANDSCAPE_API class UPackage* Z_Construct_UPackage_Landscape();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FGrassInput, Z_Construct_UPackage_Landscape(), TEXT("GrassInput"), sizeof(FGrassInput), Get_Z_Construct_UScriptStruct_FGrassInput_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FGrassInput(FGrassInput::StaticStruct, TEXT("/Script/Landscape"));
static struct FScriptStruct_Landscape_StaticRegisterNativesFGrassInput
{
	FScriptStruct_Landscape_StaticRegisterNativesFGrassInput()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("GrassInput")),new UScriptStruct::TCppStructOps<FGrassInput>);
	}
} ScriptStruct_Landscape_StaticRegisterNativesFGrassInput;
	void UMaterialExpressionLandscapeGrassOutput::StaticRegisterNativesUMaterialExpressionLandscapeGrassOutput()
	{
	}
	IMPLEMENT_CLASS(UMaterialExpressionLandscapeGrassOutput, 45505142);
static class UEnum* ELandscapeLayerBlendType_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern LANDSCAPE_API class UEnum* Z_Construct_UEnum_Landscape_ELandscapeLayerBlendType();
		extern LANDSCAPE_API class UPackage* Z_Construct_UPackage_Landscape();
		Singleton = GetStaticEnum(Z_Construct_UEnum_Landscape_ELandscapeLayerBlendType, Z_Construct_UPackage_Landscape(), TEXT("ELandscapeLayerBlendType"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_ELandscapeLayerBlendType(ELandscapeLayerBlendType_StaticEnum, TEXT("/Script/Landscape"));
class UScriptStruct* FLayerBlendInput::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern LANDSCAPE_API class UScriptStruct* Z_Construct_UScriptStruct_FLayerBlendInput();
		extern LANDSCAPE_API uint32 Get_Z_Construct_UScriptStruct_FLayerBlendInput_CRC();
		extern LANDSCAPE_API class UPackage* Z_Construct_UPackage_Landscape();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FLayerBlendInput, Z_Construct_UPackage_Landscape(), TEXT("LayerBlendInput"), sizeof(FLayerBlendInput), Get_Z_Construct_UScriptStruct_FLayerBlendInput_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FLayerBlendInput(FLayerBlendInput::StaticStruct, TEXT("/Script/Landscape"));
static struct FScriptStruct_Landscape_StaticRegisterNativesFLayerBlendInput
{
	FScriptStruct_Landscape_StaticRegisterNativesFLayerBlendInput()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("LayerBlendInput")),new UScriptStruct::TCppStructOps<FLayerBlendInput>);
	}
} ScriptStruct_Landscape_StaticRegisterNativesFLayerBlendInput;
	void UMaterialExpressionLandscapeLayerBlend::StaticRegisterNativesUMaterialExpressionLandscapeLayerBlend()
	{
	}
	IMPLEMENT_CLASS(UMaterialExpressionLandscapeLayerBlend, 2135212067);
static class UEnum* ELandscapeCustomizedCoordType_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern LANDSCAPE_API class UEnum* Z_Construct_UEnum_Landscape_ELandscapeCustomizedCoordType();
		extern LANDSCAPE_API class UPackage* Z_Construct_UPackage_Landscape();
		Singleton = GetStaticEnum(Z_Construct_UEnum_Landscape_ELandscapeCustomizedCoordType, Z_Construct_UPackage_Landscape(), TEXT("ELandscapeCustomizedCoordType"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_ELandscapeCustomizedCoordType(ELandscapeCustomizedCoordType_StaticEnum, TEXT("/Script/Landscape"));
static class UEnum* ETerrainCoordMappingType_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern LANDSCAPE_API class UEnum* Z_Construct_UEnum_Landscape_ETerrainCoordMappingType();
		extern LANDSCAPE_API class UPackage* Z_Construct_UPackage_Landscape();
		Singleton = GetStaticEnum(Z_Construct_UEnum_Landscape_ETerrainCoordMappingType, Z_Construct_UPackage_Landscape(), TEXT("ETerrainCoordMappingType"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_ETerrainCoordMappingType(ETerrainCoordMappingType_StaticEnum, TEXT("/Script/Landscape"));
	void UMaterialExpressionLandscapeLayerCoords::StaticRegisterNativesUMaterialExpressionLandscapeLayerCoords()
	{
	}
	IMPLEMENT_CLASS(UMaterialExpressionLandscapeLayerCoords, 2426150515);
	void UMaterialExpressionLandscapeLayerSample::StaticRegisterNativesUMaterialExpressionLandscapeLayerSample()
	{
	}
	IMPLEMENT_CLASS(UMaterialExpressionLandscapeLayerSample, 266126474);
	void UMaterialExpressionLandscapeLayerSwitch::StaticRegisterNativesUMaterialExpressionLandscapeLayerSwitch()
	{
	}
	IMPLEMENT_CLASS(UMaterialExpressionLandscapeLayerSwitch, 2717268807);
	void UMaterialExpressionLandscapeLayerWeight::StaticRegisterNativesUMaterialExpressionLandscapeLayerWeight()
	{
	}
	IMPLEMENT_CLASS(UMaterialExpressionLandscapeLayerWeight, 1005688141);
	void UMaterialExpressionLandscapeVisibilityMask::StaticRegisterNativesUMaterialExpressionLandscapeVisibilityMask()
	{
	}
	IMPLEMENT_CLASS(UMaterialExpressionLandscapeVisibilityMask, 3621614770);
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	ENGINE_API class UClass* Z_Construct_UClass_UStaticMeshComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UStaticMesh_NoRegister();
	COREUOBJECT_API class UClass* Z_Construct_UClass_UObject();
	ENGINE_API class UClass* Z_Construct_UClass_UPrimitiveComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UTexture2D_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialInterface_NoRegister();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FGuid();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FBox();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FVector4();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialInstanceConstant_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AActor();
	ENGINE_API class UClass* Z_Construct_UClass_UBillboardComponent_NoRegister();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FRotator();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterial_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialInstance_NoRegister();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FVector();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FVector2D();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicalMaterial_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialInstanceConstant();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FIntPoint();
	ENGINE_API class UClass* Z_Construct_UClass_USplineComponent_NoRegister();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ENavDataGatheringMode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBodyInstance();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FLightmassPrimitiveSettings();
	ENGINE_API class UClass* Z_Construct_UClass_UHierarchicalInstancedStaticMeshComponent_NoRegister();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESplineMeshAxis();
	ENGINE_API class UClass* Z_Construct_UClass_UWorld_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USplineMeshComponent_NoRegister();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FInterpCurveVector();
	ENGINE_API class UClass* Z_Construct_UClass_UMeshComponent_NoRegister();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FColor();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FExpressionInput();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionCustomOutput();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpression();

	LANDSCAPE_API class UClass* Z_Construct_UClass_UControlPointMeshComponent_NoRegister();
	LANDSCAPE_API class UClass* Z_Construct_UClass_UControlPointMeshComponent();
	LANDSCAPE_API class UScriptStruct* Z_Construct_UScriptStruct_FGrassVariety();
	LANDSCAPE_API class UClass* Z_Construct_UClass_ULandscapeGrassType_NoRegister();
	LANDSCAPE_API class UClass* Z_Construct_UClass_ULandscapeGrassType();
	LANDSCAPE_API class UScriptStruct* Z_Construct_UScriptStruct_FWeightmapLayerAllocationInfo();
	LANDSCAPE_API class UClass* Z_Construct_UClass_ULandscapeComponent_NoRegister();
	LANDSCAPE_API class UClass* Z_Construct_UClass_ULandscapeComponent();
	LANDSCAPE_API class UClass* Z_Construct_UClass_ALandscapeGizmoActor_NoRegister();
	LANDSCAPE_API class UClass* Z_Construct_UClass_ALandscapeGizmoActor();
	LANDSCAPE_API class UEnum* Z_Construct_UEnum_Landscape_ELandscapeGizmoType();
	LANDSCAPE_API class UScriptStruct* Z_Construct_UScriptStruct_FGizmoSelectData();
	LANDSCAPE_API class UClass* Z_Construct_UClass_ALandscapeGizmoActiveActor_NoRegister();
	LANDSCAPE_API class UClass* Z_Construct_UClass_ALandscapeGizmoActiveActor();
	LANDSCAPE_API class UClass* Z_Construct_UClass_ULandscapeGizmoRenderComponent_NoRegister();
	LANDSCAPE_API class UClass* Z_Construct_UClass_ULandscapeGizmoRenderComponent();
	LANDSCAPE_API class UClass* Z_Construct_UClass_ULandscapeHeightfieldCollisionComponent_NoRegister();
	LANDSCAPE_API class UClass* Z_Construct_UClass_ULandscapeHeightfieldCollisionComponent();
	LANDSCAPE_API class UClass* Z_Construct_UClass_ULandscapeMeshCollisionComponent_NoRegister();
	LANDSCAPE_API class UClass* Z_Construct_UClass_ULandscapeMeshCollisionComponent();
	LANDSCAPE_API class UScriptStruct* Z_Construct_UScriptStruct_FLandscapeInfoLayerSettings();
	LANDSCAPE_API class UClass* Z_Construct_UClass_ULandscapeInfo_NoRegister();
	LANDSCAPE_API class UClass* Z_Construct_UClass_ULandscapeInfo();
	LANDSCAPE_API class UClass* Z_Construct_UClass_ULandscapeInfoMap_NoRegister();
	LANDSCAPE_API class UClass* Z_Construct_UClass_ULandscapeInfoMap();
	LANDSCAPE_API class UClass* Z_Construct_UClass_ULandscapeLayerInfoObject_NoRegister();
	LANDSCAPE_API class UClass* Z_Construct_UClass_ULandscapeLayerInfoObject();
	LANDSCAPE_API class UClass* Z_Construct_UClass_ULandscapeMaterialInstanceConstant_NoRegister();
	LANDSCAPE_API class UClass* Z_Construct_UClass_ULandscapeMaterialInstanceConstant();
	LANDSCAPE_API class UClass* Z_Construct_UClass_ALandscapeMeshProxyActor_NoRegister();
	LANDSCAPE_API class UClass* Z_Construct_UClass_ALandscapeMeshProxyActor();
	LANDSCAPE_API class UClass* Z_Construct_UClass_ULandscapeMeshProxyComponent_NoRegister();
	LANDSCAPE_API class UClass* Z_Construct_UClass_ULandscapeMeshProxyComponent();
	LANDSCAPE_API class UEnum* Z_Construct_UEnum_Landscape_ELandscapeLODFalloff();
	LANDSCAPE_API class UEnum* Z_Construct_UEnum_Landscape_ELandscapeLayerPaintingRestriction();
	LANDSCAPE_API class UScriptStruct* Z_Construct_UScriptStruct_FLandscapeImportLayerInfo();
	LANDSCAPE_API class UScriptStruct* Z_Construct_UScriptStruct_FLandscapeLayerStruct();
	LANDSCAPE_API class UScriptStruct* Z_Construct_UScriptStruct_FLandscapeEditorLayerSettings();
	LANDSCAPE_API class UScriptStruct* Z_Construct_UScriptStruct_FLandscapeWeightmapUsage();
	LANDSCAPE_API class UFunction* Z_Construct_UFunction_ALandscapeProxy_ChangeLODDistanceFactor();
	LANDSCAPE_API class UFunction* Z_Construct_UFunction_ALandscapeProxy_EditorApplySpline();
	LANDSCAPE_API class UClass* Z_Construct_UClass_ALandscapeProxy_NoRegister();
	LANDSCAPE_API class UClass* Z_Construct_UClass_ALandscapeProxy();
	LANDSCAPE_API class UEnum* Z_Construct_UEnum_Landscape_ELandscapeSetupErrors();
	LANDSCAPE_API class UClass* Z_Construct_UClass_ALandscape_NoRegister();
	LANDSCAPE_API class UClass* Z_Construct_UClass_ALandscape();
	LANDSCAPE_API class UEnum* Z_Construct_UEnum_Landscape_LandscapeSplineMeshOrientation();
	LANDSCAPE_API class UScriptStruct* Z_Construct_UScriptStruct_FLandscapeSplineMeshEntry();
	LANDSCAPE_API class UScriptStruct* Z_Construct_UScriptStruct_FLandscapeSplineSegmentConnection();
	LANDSCAPE_API class UScriptStruct* Z_Construct_UScriptStruct_FLandscapeSplineInterpPoint();
	LANDSCAPE_API class UClass* Z_Construct_UClass_ULandscapeSplineSegment_NoRegister();
	LANDSCAPE_API class UClass* Z_Construct_UClass_ULandscapeSplineSegment();
	LANDSCAPE_API class UScriptStruct* Z_Construct_UScriptStruct_FLandscapeSplineConnection();
	LANDSCAPE_API class UClass* Z_Construct_UClass_ULandscapeSplineControlPoint_NoRegister();
	LANDSCAPE_API class UClass* Z_Construct_UClass_ULandscapeSplineControlPoint();
	LANDSCAPE_API class UScriptStruct* Z_Construct_UScriptStruct_FForeignWorldSplineData();
	LANDSCAPE_API class UScriptStruct* Z_Construct_UScriptStruct_FForeignSplineSegmentData();
	LANDSCAPE_API class UScriptStruct* Z_Construct_UScriptStruct_FForeignControlPointData();
	LANDSCAPE_API class UClass* Z_Construct_UClass_ULandscapeSplinesComponent_NoRegister();
	LANDSCAPE_API class UClass* Z_Construct_UClass_ULandscapeSplinesComponent();
	LANDSCAPE_API class UScriptStruct* Z_Construct_UScriptStruct_FGrassInput();
	LANDSCAPE_API class UClass* Z_Construct_UClass_UMaterialExpressionLandscapeGrassOutput_NoRegister();
	LANDSCAPE_API class UClass* Z_Construct_UClass_UMaterialExpressionLandscapeGrassOutput();
	LANDSCAPE_API class UEnum* Z_Construct_UEnum_Landscape_ELandscapeLayerBlendType();
	LANDSCAPE_API class UScriptStruct* Z_Construct_UScriptStruct_FLayerBlendInput();
	LANDSCAPE_API class UClass* Z_Construct_UClass_UMaterialExpressionLandscapeLayerBlend_NoRegister();
	LANDSCAPE_API class UClass* Z_Construct_UClass_UMaterialExpressionLandscapeLayerBlend();
	LANDSCAPE_API class UEnum* Z_Construct_UEnum_Landscape_ELandscapeCustomizedCoordType();
	LANDSCAPE_API class UEnum* Z_Construct_UEnum_Landscape_ETerrainCoordMappingType();
	LANDSCAPE_API class UClass* Z_Construct_UClass_UMaterialExpressionLandscapeLayerCoords_NoRegister();
	LANDSCAPE_API class UClass* Z_Construct_UClass_UMaterialExpressionLandscapeLayerCoords();
	LANDSCAPE_API class UClass* Z_Construct_UClass_UMaterialExpressionLandscapeLayerSample_NoRegister();
	LANDSCAPE_API class UClass* Z_Construct_UClass_UMaterialExpressionLandscapeLayerSample();
	LANDSCAPE_API class UClass* Z_Construct_UClass_UMaterialExpressionLandscapeLayerSwitch_NoRegister();
	LANDSCAPE_API class UClass* Z_Construct_UClass_UMaterialExpressionLandscapeLayerSwitch();
	LANDSCAPE_API class UClass* Z_Construct_UClass_UMaterialExpressionLandscapeLayerWeight_NoRegister();
	LANDSCAPE_API class UClass* Z_Construct_UClass_UMaterialExpressionLandscapeLayerWeight();
	LANDSCAPE_API class UClass* Z_Construct_UClass_UMaterialExpressionLandscapeVisibilityMask_NoRegister();
	LANDSCAPE_API class UClass* Z_Construct_UClass_UMaterialExpressionLandscapeVisibilityMask();
	LANDSCAPE_API class UPackage* Z_Construct_UPackage_Landscape();
	UClass* Z_Construct_UClass_UControlPointMeshComponent_NoRegister()
	{
		return UControlPointMeshComponent::StaticClass();
	}
	UClass* Z_Construct_UClass_UControlPointMeshComponent()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UStaticMeshComponent();
			Z_Construct_UPackage_Landscape();
			OuterClass = UControlPointMeshComponent::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20A81080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
#if WITH_EDITORONLY_DATA
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSelected, UControlPointMeshComponent, uint8);
				UProperty* NewProp_bSelected = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bSelected"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSelected, UControlPointMeshComponent), 0x0000000800002000, CPP_BOOL_PROPERTY_BITMASK(bSelected, UControlPointMeshComponent), sizeof(uint8), false);
#endif // WITH_EDITORONLY_DATA
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Activation Components|Activation Trigger ComponentReplication"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("ControlPointMeshComponent.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/ControlPointMeshComponent.h"));
				MetaData->SetValue(NewProp_bSelected, TEXT("ModuleRelativePath"), TEXT("Classes/ControlPointMeshComponent.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UControlPointMeshComponent(Z_Construct_UClass_UControlPointMeshComponent, TEXT("UControlPointMeshComponent"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UControlPointMeshComponent);
	UScriptStruct* Z_Construct_UScriptStruct_FGrassVariety()
	{
		UPackage* Outer=Z_Construct_UPackage_Landscape();
		extern uint32 Get_Z_Construct_UScriptStruct_FGrassVariety_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("GrassVariety"), sizeof(FGrassVariety), Get_Z_Construct_UScriptStruct_FGrassVariety_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GrassVariety"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FGrassVariety>, EStructFlags(0x00000001));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(AlignToSurface, FGrassVariety, bool);
			UProperty* NewProp_AlignToSurface = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("AlignToSurface"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(AlignToSurface, FGrassVariety), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(AlignToSurface, FGrassVariety), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(RandomRotation, FGrassVariety, bool);
			UProperty* NewProp_RandomRotation = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RandomRotation"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(RandomRotation, FGrassVariety), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(RandomRotation, FGrassVariety), sizeof(bool), true);
			UProperty* NewProp_MinLOD = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MinLOD"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MinLOD, FGrassVariety), 0x0000000000000001);
			UProperty* NewProp_EndCullDistance = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("EndCullDistance"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(EndCullDistance, FGrassVariety), 0x0000000000000001);
			UProperty* NewProp_StartCullDistance = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("StartCullDistance"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(StartCullDistance, FGrassVariety), 0x0000000000000001);
			UProperty* NewProp_PlacementJitter = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PlacementJitter"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(PlacementJitter, FGrassVariety), 0x0000000000000001);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseGrid, FGrassVariety, bool);
			UProperty* NewProp_bUseGrid = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bUseGrid"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseGrid, FGrassVariety), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bUseGrid, FGrassVariety), sizeof(bool), true);
			UProperty* NewProp_GrassDensity = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("GrassDensity"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(GrassDensity, FGrassVariety), 0x0000000000000001);
			UProperty* NewProp_GrassMesh = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("GrassMesh"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(GrassMesh, FGrassVariety), 0x0000000000000001, Z_Construct_UClass_UStaticMesh_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeGrassType.h"));
			MetaData->SetValue(NewProp_AlignToSurface, TEXT("Category"), TEXT("Grass"));
			MetaData->SetValue(NewProp_AlignToSurface, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeGrassType.h"));
			MetaData->SetValue(NewProp_RandomRotation, TEXT("Category"), TEXT("Grass"));
			MetaData->SetValue(NewProp_RandomRotation, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeGrassType.h"));
			MetaData->SetValue(NewProp_MinLOD, TEXT("Category"), TEXT("Grass"));
			MetaData->SetValue(NewProp_MinLOD, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeGrassType.h"));
			MetaData->SetValue(NewProp_MinLOD, TEXT("ToolTip"), TEXT("Specifies the smallest LOD that will be used for this component.\nIf -1 (default), the MinLOD of the static mesh asset will be used instead."));
			MetaData->SetValue(NewProp_EndCullDistance, TEXT("Category"), TEXT("Grass"));
			MetaData->SetValue(NewProp_EndCullDistance, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeGrassType.h"));
			MetaData->SetValue(NewProp_EndCullDistance, TEXT("ToolTip"), TEXT("The distance where instances will have completely faded out when using a PerInstanceFadeAmount material node. 0 disables.\nWhen the entire cluster is beyond this distance, the cluster is completely culled and not rendered at all."));
			MetaData->SetValue(NewProp_StartCullDistance, TEXT("Category"), TEXT("Grass"));
			MetaData->SetValue(NewProp_StartCullDistance, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeGrassType.h"));
			MetaData->SetValue(NewProp_StartCullDistance, TEXT("ToolTip"), TEXT("The distance where instances will begin to fade out if using a PerInstanceFadeAmount material node. 0 disables."));
			MetaData->SetValue(NewProp_PlacementJitter, TEXT("Category"), TEXT("Grass"));
			MetaData->SetValue(NewProp_PlacementJitter, TEXT("ClampMax"), TEXT("1"));
			MetaData->SetValue(NewProp_PlacementJitter, TEXT("ClampMin"), TEXT("0"));
			MetaData->SetValue(NewProp_PlacementJitter, TEXT("EditCondition"), TEXT("bUseGrid"));
			MetaData->SetValue(NewProp_PlacementJitter, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeGrassType.h"));
			MetaData->SetValue(NewProp_PlacementJitter, TEXT("UIMax"), TEXT("1"));
			MetaData->SetValue(NewProp_PlacementJitter, TEXT("UIMin"), TEXT("0"));
			MetaData->SetValue(NewProp_bUseGrid, TEXT("Category"), TEXT("Grass"));
			MetaData->SetValue(NewProp_bUseGrid, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeGrassType.h"));
			MetaData->SetValue(NewProp_bUseGrid, TEXT("ToolTip"), TEXT("If true, use a jittered grid sequence for placement, otherwise use a halton sequence."));
			MetaData->SetValue(NewProp_GrassDensity, TEXT("Category"), TEXT("Grass"));
			MetaData->SetValue(NewProp_GrassDensity, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeGrassType.h"));
			MetaData->SetValue(NewProp_GrassDensity, TEXT("ToolTip"), TEXT("Instances per 10 square meters."));
			MetaData->SetValue(NewProp_GrassMesh, TEXT("Category"), TEXT("Grass"));
			MetaData->SetValue(NewProp_GrassMesh, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeGrassType.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FGrassVariety_CRC() { return 2854417618U; }
	UClass* Z_Construct_UClass_ULandscapeGrassType_NoRegister()
	{
		return ULandscapeGrassType::StaticClass();
	}
	UClass* Z_Construct_UClass_ULandscapeGrassType()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Landscape();
			OuterClass = ULandscapeGrassType::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(AlignToSurface_DEPRECATED, ULandscapeGrassType, bool);
				UProperty* NewProp_AlignToSurface = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AlignToSurface"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(AlignToSurface_DEPRECATED, ULandscapeGrassType), 0x0000000020000000, CPP_BOOL_PROPERTY_BITMASK(AlignToSurface_DEPRECATED, ULandscapeGrassType), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(RandomRotation_DEPRECATED, ULandscapeGrassType, bool);
				UProperty* NewProp_RandomRotation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RandomRotation"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(RandomRotation_DEPRECATED, ULandscapeGrassType), 0x0000000020000000, CPP_BOOL_PROPERTY_BITMASK(RandomRotation_DEPRECATED, ULandscapeGrassType), sizeof(bool), true);
				UProperty* NewProp_EndCullDistance = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EndCullDistance"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(EndCullDistance_DEPRECATED, ULandscapeGrassType), 0x0000000020000000);
				UProperty* NewProp_StartCullDistance = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StartCullDistance"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(StartCullDistance_DEPRECATED, ULandscapeGrassType), 0x0000000020000000);
				UProperty* NewProp_PlacementJitter = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PlacementJitter"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(PlacementJitter_DEPRECATED, ULandscapeGrassType), 0x0000000020000000);
				UProperty* NewProp_GrassDensity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GrassDensity"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(GrassDensity_DEPRECATED, ULandscapeGrassType), 0x0000000020000000);
				UProperty* NewProp_GrassMesh = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GrassMesh"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(GrassMesh_DEPRECATED, ULandscapeGrassType), 0x0000000020000000, Z_Construct_UClass_UStaticMesh_NoRegister());
				UProperty* NewProp_GrassVarieties = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GrassVarieties"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(GrassVarieties, ULandscapeGrassType), 0x0000000000000001);
				UProperty* NewProp_GrassVarieties_Inner = new(EC_InternalUseOnlyConstructor, NewProp_GrassVarieties, TEXT("GrassVarieties"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FGrassVariety());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("LandscapeGrassType.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeGrassType.h"));
				MetaData->SetValue(NewProp_AlignToSurface, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeGrassType.h"));
				MetaData->SetValue(NewProp_RandomRotation, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeGrassType.h"));
				MetaData->SetValue(NewProp_EndCullDistance, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeGrassType.h"));
				MetaData->SetValue(NewProp_StartCullDistance, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeGrassType.h"));
				MetaData->SetValue(NewProp_PlacementJitter, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeGrassType.h"));
				MetaData->SetValue(NewProp_GrassDensity, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeGrassType.h"));
				MetaData->SetValue(NewProp_GrassMesh, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeGrassType.h"));
				MetaData->SetValue(NewProp_GrassVarieties, TEXT("Category"), TEXT("Grass"));
				MetaData->SetValue(NewProp_GrassVarieties, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeGrassType.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ULandscapeGrassType(Z_Construct_UClass_ULandscapeGrassType, TEXT("ULandscapeGrassType"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(ULandscapeGrassType);
	UScriptStruct* Z_Construct_UScriptStruct_FWeightmapLayerAllocationInfo()
	{
		UPackage* Outer=Z_Construct_UPackage_Landscape();
		extern uint32 Get_Z_Construct_UScriptStruct_FWeightmapLayerAllocationInfo_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("WeightmapLayerAllocationInfo"), sizeof(FWeightmapLayerAllocationInfo), Get_Z_Construct_UScriptStruct_FWeightmapLayerAllocationInfo_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WeightmapLayerAllocationInfo"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FWeightmapLayerAllocationInfo>, EStructFlags(0x00000001));
			UProperty* NewProp_GrassMapChannelIndex = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("GrassMapChannelIndex"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(GrassMapChannelIndex, FWeightmapLayerAllocationInfo), 0x0000000000000000);
			UProperty* NewProp_WeightmapTextureChannel = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("WeightmapTextureChannel"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(WeightmapTextureChannel, FWeightmapLayerAllocationInfo), 0x0000000000000000);
			UProperty* NewProp_WeightmapTextureIndex = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("WeightmapTextureIndex"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(WeightmapTextureIndex, FWeightmapLayerAllocationInfo), 0x0000000000000000);
			UProperty* NewProp_LayerInfo = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LayerInfo"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(LayerInfo, FWeightmapLayerAllocationInfo), 0x0000000000000000, Z_Construct_UClass_ULandscapeLayerInfoObject_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeComponent.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Stores information about which weightmap texture and channel each layer is stored"));
			MetaData->SetValue(NewProp_GrassMapChannelIndex, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeComponent.h"));
			MetaData->SetValue(NewProp_GrassMapChannelIndex, TEXT("ToolTip"), TEXT("Only relevant in non-editor builds, this indicates which channel in the data array is this layer...must be > 1 to be valid, the first two are height *"));
			MetaData->SetValue(NewProp_WeightmapTextureChannel, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeComponent.h"));
			MetaData->SetValue(NewProp_WeightmapTextureIndex, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeComponent.h"));
			MetaData->SetValue(NewProp_LayerInfo, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeComponent.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FWeightmapLayerAllocationInfo_CRC() { return 3725213338U; }
	UClass* Z_Construct_UClass_ULandscapeComponent_NoRegister()
	{
		return ULandscapeComponent::StaticClass();
	}
	UClass* Z_Construct_UClass_ULandscapeComponent()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPrimitiveComponent();
			Z_Construct_UPackage_Landscape();
			OuterClass = ULandscapeComponent::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20A80080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_MobileWeightNormalmapTexture = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MobileWeightNormalmapTexture"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(MobileWeightNormalmapTexture, ULandscapeComponent), 0x0000800000000000, Z_Construct_UClass_UTexture2D_NoRegister());
				UProperty* NewProp_MobileMaterialInterface = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MobileMaterialInterface"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(MobileMaterialInterface, ULandscapeComponent), 0x0000800000000000, Z_Construct_UClass_UMaterialInterface_NoRegister());
				UProperty* NewProp_MobileBlendableLayerMask = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MobileBlendableLayerMask"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(MobileBlendableLayerMask, ULandscapeComponent), 0x0000000000000000);
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_MobileDataSourceHash = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MobileDataSourceHash"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MobileDataSourceHash, ULandscapeComponent), 0x0000000800202000, Z_Construct_UScriptStruct_FGuid());
				UProperty* NewProp_SelectDataTexture = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SelectDataTexture"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(SelectDataTexture, ULandscapeComponent), 0x0000000800202000, Z_Construct_UClass_UTexture2D_NoRegister());
				UProperty* NewProp_LightingLODBias = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LightingLODBias"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(LightingLODBias, ULandscapeComponent), 0x0000000800000001);
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_GIBakedBaseColorTexture = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GIBakedBaseColorTexture"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(GIBakedBaseColorTexture, ULandscapeComponent), 0x0000000000000015, Z_Construct_UClass_UTexture2D_NoRegister());
				UProperty* NewProp_BakedTextureMaterialGuid = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BakedTextureMaterialGuid"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(BakedTextureMaterialGuid, ULandscapeComponent), 0x0000000000000000, Z_Construct_UScriptStruct_FGuid());
				UProperty* NewProp_StateId = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StateId"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(StateId, ULandscapeComponent), 0x0000000000000000, Z_Construct_UScriptStruct_FGuid());
				UProperty* NewProp_LODBias = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LODBias"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(LODBias, ULandscapeComponent), 0x0000000000000015);
				UProperty* NewProp_ForcedLOD = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ForcedLOD"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ForcedLOD, ULandscapeComponent), 0x0000000000000015);
				UProperty* NewProp_StaticLightingResolution = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StaticLightingResolution"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(StaticLightingResolution, ULandscapeComponent), 0x0000000000000001);
				UProperty* NewProp_CollisionMipLevel = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CollisionMipLevel"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(CollisionMipLevel, ULandscapeComponent), 0x0000000000000001);
				UProperty* NewProp_IrrelevantLights = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("IrrelevantLights"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(IrrelevantLights, ULandscapeComponent), 0x0000000000000000);
				UProperty* NewProp_IrrelevantLights_Inner = new(EC_InternalUseOnlyConstructor, NewProp_IrrelevantLights, TEXT("IrrelevantLights"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FGuid());
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_LightingGuid = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LightingGuid"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LightingGuid, ULandscapeComponent), 0x0000000800000000, Z_Construct_UScriptStruct_FGuid());
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_CollisionComponent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CollisionComponent"), RF_Public|RF_Transient|RF_Native) ULazyObjectProperty(CPP_PROPERTY_BASE(CollisionComponent, ULandscapeComponent), 0x0004000000080008, Z_Construct_UClass_ULandscapeHeightfieldCollisionComponent_NoRegister());
				UProperty* NewProp_CachedLocalBox = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CachedLocalBox"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(CachedLocalBox, ULandscapeComponent), 0x0000000000000000, Z_Construct_UScriptStruct_FBox());
				UProperty* NewProp_HeightmapTexture = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HeightmapTexture"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(HeightmapTexture, ULandscapeComponent), 0x0000400000000000, Z_Construct_UClass_UTexture2D_NoRegister());
				UProperty* NewProp_HeightmapScaleBias = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HeightmapScaleBias"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(HeightmapScaleBias, ULandscapeComponent), 0x0000000000000000, Z_Construct_UScriptStruct_FVector4());
				UProperty* NewProp_WeightmapSubsectionOffset = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WeightmapSubsectionOffset"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(WeightmapSubsectionOffset, ULandscapeComponent), 0x0000000000000000);
				UProperty* NewProp_WeightmapScaleBias = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WeightmapScaleBias"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(WeightmapScaleBias, ULandscapeComponent), 0x0000000000000000, Z_Construct_UScriptStruct_FVector4());
				UProperty* NewProp_XYOffsetmapTexture = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("XYOffsetmapTexture"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(XYOffsetmapTexture, ULandscapeComponent), 0x0000400000000000, Z_Construct_UClass_UTexture2D_NoRegister());
				UProperty* NewProp_WeightmapTextures = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WeightmapTextures"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(WeightmapTextures, ULandscapeComponent), 0x0000400000000000);
				UProperty* NewProp_WeightmapTextures_Inner = new(EC_InternalUseOnlyConstructor, NewProp_WeightmapTextures, TEXT("WeightmapTextures"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UTexture2D_NoRegister());
				UProperty* NewProp_WeightmapLayerAllocations = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WeightmapLayerAllocations"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(WeightmapLayerAllocations, ULandscapeComponent), 0x0000000000000000);
				UProperty* NewProp_WeightmapLayerAllocations_Inner = new(EC_InternalUseOnlyConstructor, NewProp_WeightmapLayerAllocations, TEXT("WeightmapLayerAllocations"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FWeightmapLayerAllocationInfo());
				UProperty* NewProp_MaterialInstance = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaterialInstance"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(MaterialInstance, ULandscapeComponent), 0x0000400000000000, Z_Construct_UClass_UMaterialInstanceConstant_NoRegister());
				UProperty* NewProp_OverrideHoleMaterial = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OverrideHoleMaterial"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(OverrideHoleMaterial, ULandscapeComponent), 0x0000040000000005, Z_Construct_UClass_UMaterialInterface_NoRegister());
				UProperty* NewProp_OverrideMaterial = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OverrideMaterial"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(OverrideMaterial, ULandscapeComponent), 0x0000000000000005, Z_Construct_UClass_UMaterialInterface_NoRegister());
				UProperty* NewProp_NumSubsections = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NumSubsections"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(NumSubsections, ULandscapeComponent), 0x0000000000000000);
				UProperty* NewProp_SubsectionSizeQuads = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SubsectionSizeQuads"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(SubsectionSizeQuads, ULandscapeComponent), 0x0000000000000000);
				UProperty* NewProp_ComponentSizeQuads = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ComponentSizeQuads"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ComponentSizeQuads, ULandscapeComponent), 0x0000000000000000);
				UProperty* NewProp_SectionBaseY = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SectionBaseY"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(SectionBaseY, ULandscapeComponent), 0x0000000000020015);
				UProperty* NewProp_SectionBaseX = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SectionBaseX"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(SectionBaseX, ULandscapeComponent), 0x0000000000020015);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Display Attachment Physics Debug Collision Movement Rendering PrimitiveComponent Object Transform Mobility Trigger ComponentReplication"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("LandscapeComponent.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeComponent.h"));
				MetaData->SetValue(OuterClass, TEXT("ShowCategories"), TEXT("Rendering|Material"));
				MetaData->SetValue(NewProp_MobileWeightNormalmapTexture, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeComponent.h"));
				MetaData->SetValue(NewProp_MobileWeightNormalmapTexture, TEXT("ToolTip"), TEXT("Generated weight/normal map texture used for ES2. Serialized only when cooking or loading cooked builds."));
				MetaData->SetValue(NewProp_MobileMaterialInterface, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeComponent.h"));
				MetaData->SetValue(NewProp_MobileMaterialInterface, TEXT("ToolTip"), TEXT("Material interface used for ES2. Serialized only when cooking or loading cooked builds."));
				MetaData->SetValue(NewProp_MobileBlendableLayerMask, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeComponent.h"));
				MetaData->SetValue(NewProp_MobileBlendableLayerMask, TEXT("ToolTip"), TEXT("For ES2"));
				MetaData->SetValue(NewProp_MobileDataSourceHash, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeComponent.h"));
				MetaData->SetValue(NewProp_MobileDataSourceHash, TEXT("ToolTip"), TEXT("Hash of source for ES2 generated data. Used for mobile preview and cook-in-editor\nto determine if we need to re-generate ES2 pixel data."));
				MetaData->SetValue(NewProp_SelectDataTexture, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeComponent.h"));
				MetaData->SetValue(NewProp_LightingLODBias, TEXT("Category"), TEXT("LandscapeComponent"));
				MetaData->SetValue(NewProp_LightingLODBias, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeComponent.h"));
				MetaData->SetValue(NewProp_LightingLODBias, TEXT("ToolTip"), TEXT("LOD level Bias to use when lighting buidling via lightmass, -1 Means automatic LOD calculation based on ForcedLOD + LODBias"));
				MetaData->SetValue(NewProp_GIBakedBaseColorTexture, TEXT("Category"), TEXT("BakedTextures"));
				MetaData->SetValue(NewProp_GIBakedBaseColorTexture, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeComponent.h"));
				MetaData->SetValue(NewProp_GIBakedBaseColorTexture, TEXT("ToolTip"), TEXT("Pre-baked Base Color texture for use by distance field GI"));
				MetaData->SetValue(NewProp_BakedTextureMaterialGuid, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeComponent.h"));
				MetaData->SetValue(NewProp_BakedTextureMaterialGuid, TEXT("ToolTip"), TEXT("The Material Guid that used when baking, to detect material recompilations"));
				MetaData->SetValue(NewProp_StateId, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeComponent.h"));
				MetaData->SetValue(NewProp_LODBias, TEXT("Category"), TEXT("LandscapeComponent"));
				MetaData->SetValue(NewProp_LODBias, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeComponent.h"));
				MetaData->SetValue(NewProp_LODBias, TEXT("ToolTip"), TEXT("LOD level Bias to use when rendering"));
				MetaData->SetValue(NewProp_ForcedLOD, TEXT("Category"), TEXT("LandscapeComponent"));
				MetaData->SetValue(NewProp_ForcedLOD, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeComponent.h"));
				MetaData->SetValue(NewProp_ForcedLOD, TEXT("ToolTip"), TEXT("Forced LOD level to use when rendering"));
				MetaData->SetValue(NewProp_StaticLightingResolution, TEXT("Category"), TEXT("LandscapeComponent"));
				MetaData->SetValue(NewProp_StaticLightingResolution, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeComponent.h"));
				MetaData->SetValue(NewProp_StaticLightingResolution, TEXT("ToolTip"), TEXT("StaticLightingResolution overriding per component, default value 0 means no overriding"));
				MetaData->SetValue(NewProp_CollisionMipLevel, TEXT("Category"), TEXT("LandscapeComponent"));
				MetaData->SetValue(NewProp_CollisionMipLevel, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeComponent.h"));
				MetaData->SetValue(NewProp_CollisionMipLevel, TEXT("ToolTip"), TEXT("Heightfield mipmap used to generate collision"));
				MetaData->SetValue(NewProp_IrrelevantLights, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeComponent.h"));
				MetaData->SetValue(NewProp_IrrelevantLights, TEXT("ToolTip"), TEXT("INTERNAL: Array of lights that don't apply to the terrain component."));
				MetaData->SetValue(NewProp_LightingGuid, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeComponent.h"));
				MetaData->SetValue(NewProp_LightingGuid, TEXT("ToolTip"), TEXT("Unique ID for this component, used for caching during distributed lighting"));
				MetaData->SetValue(NewProp_CollisionComponent, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeComponent.h"));
				MetaData->SetValue(NewProp_CollisionComponent, TEXT("ToolTip"), TEXT("Reference to associated collision component"));
				MetaData->SetValue(NewProp_CachedLocalBox, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeComponent.h"));
				MetaData->SetValue(NewProp_CachedLocalBox, TEXT("ToolTip"), TEXT("Cached local-space bounding box, created at heightmap update time"));
				MetaData->SetValue(NewProp_HeightmapTexture, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeComponent.h"));
				MetaData->SetValue(NewProp_HeightmapTexture, TEXT("ToolTip"), TEXT("Heightmap texture reference"));
				MetaData->SetValue(NewProp_HeightmapScaleBias, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeComponent.h"));
				MetaData->SetValue(NewProp_HeightmapScaleBias, TEXT("ToolTip"), TEXT("UV offset to Heightmap data from component local coordinates"));
				MetaData->SetValue(NewProp_WeightmapSubsectionOffset, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeComponent.h"));
				MetaData->SetValue(NewProp_WeightmapSubsectionOffset, TEXT("ToolTip"), TEXT("U or V offset into the weightmap for the first subsection, in texture UV space"));
				MetaData->SetValue(NewProp_WeightmapScaleBias, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeComponent.h"));
				MetaData->SetValue(NewProp_WeightmapScaleBias, TEXT("ToolTip"), TEXT("UV offset to component's weightmap data from component local coordinates"));
				MetaData->SetValue(NewProp_XYOffsetmapTexture, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeComponent.h"));
				MetaData->SetValue(NewProp_XYOffsetmapTexture, TEXT("ToolTip"), TEXT("XYOffsetmap texture reference"));
				MetaData->SetValue(NewProp_WeightmapTextures, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeComponent.h"));
				MetaData->SetValue(NewProp_WeightmapTextures, TEXT("ToolTip"), TEXT("Weightmap texture reference"));
				MetaData->SetValue(NewProp_WeightmapLayerAllocations, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeComponent.h"));
				MetaData->SetValue(NewProp_WeightmapLayerAllocations, TEXT("ToolTip"), TEXT("List of layers, and the weightmap and channel they are stored"));
				MetaData->SetValue(NewProp_MaterialInstance, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeComponent.h"));
				MetaData->SetValue(NewProp_OverrideHoleMaterial, TEXT("Category"), TEXT("LandscapeComponent"));
				MetaData->SetValue(NewProp_OverrideHoleMaterial, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeComponent.h"));
				MetaData->SetValue(NewProp_OverrideMaterial, TEXT("Category"), TEXT("LandscapeComponent"));
				MetaData->SetValue(NewProp_OverrideMaterial, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeComponent.h"));
				MetaData->SetValue(NewProp_NumSubsections, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeComponent.h"));
				MetaData->SetValue(NewProp_NumSubsections, TEXT("ToolTip"), TEXT("Number of subsections in X or Y axis"));
				MetaData->SetValue(NewProp_SubsectionSizeQuads, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeComponent.h"));
				MetaData->SetValue(NewProp_SubsectionSizeQuads, TEXT("ToolTip"), TEXT("Number of quads for a subsection of the component. SubsectionSizeQuads+1 must be a power of two."));
				MetaData->SetValue(NewProp_ComponentSizeQuads, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeComponent.h"));
				MetaData->SetValue(NewProp_ComponentSizeQuads, TEXT("ToolTip"), TEXT("Total number of quads for this component, has to be >0"));
				MetaData->SetValue(NewProp_SectionBaseY, TEXT("Category"), TEXT("LandscapeComponent"));
				MetaData->SetValue(NewProp_SectionBaseY, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeComponent.h"));
				MetaData->SetValue(NewProp_SectionBaseY, TEXT("ToolTip"), TEXT("Y offset from global components grid origin (in quads)"));
				MetaData->SetValue(NewProp_SectionBaseX, TEXT("Category"), TEXT("LandscapeComponent"));
				MetaData->SetValue(NewProp_SectionBaseX, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeComponent.h"));
				MetaData->SetValue(NewProp_SectionBaseX, TEXT("ToolTip"), TEXT("X offset from global components grid origin (in quads)"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ULandscapeComponent(Z_Construct_UClass_ULandscapeComponent, TEXT("ULandscapeComponent"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(ULandscapeComponent);
	UClass* Z_Construct_UClass_ALandscapeGizmoActor_NoRegister()
	{
		return ALandscapeGizmoActor::StaticClass();
	}
	UClass* Z_Construct_UClass_ALandscapeGizmoActor()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AActor();
			Z_Construct_UPackage_Landscape();
			OuterClass = ALandscapeGizmoActor::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880280;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_SpriteComponent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SpriteComponent"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(SpriteComponent, ALandscapeGizmoActor), 0x0000000800080008, Z_Construct_UClass_UBillboardComponent_NoRegister());
				UProperty* NewProp_TargetLandscapeInfo = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TargetLandscapeInfo"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(TargetLandscapeInfo, ALandscapeGizmoActor), 0x0000000800002001, Z_Construct_UClass_ULandscapeInfo_NoRegister());
				UProperty* NewProp_RelativeScaleZ = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RelativeScaleZ"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(RelativeScaleZ, ALandscapeGizmoActor), 0x0000000800000001);
				UProperty* NewProp_MinRelativeZ = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MinRelativeZ"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MinRelativeZ, ALandscapeGizmoActor), 0x0000000800000001);
				UProperty* NewProp_MarginZ = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MarginZ"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MarginZ, ALandscapeGizmoActor), 0x0000000800000001);
				UProperty* NewProp_LengthZ = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LengthZ"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(LengthZ, ALandscapeGizmoActor), 0x0000000800000001);
				UProperty* NewProp_Height = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Height"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Height, ALandscapeGizmoActor), 0x0000000800000001);
				UProperty* NewProp_Width = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Width"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Width, ALandscapeGizmoActor), 0x0000000800000001);
#endif // WITH_EDITORONLY_DATA
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("LandscapeGizmoActor.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("false"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeGizmoActor.h"));
				MetaData->SetValue(NewProp_SpriteComponent, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_SpriteComponent, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeGizmoActor.h"));
				MetaData->SetValue(NewProp_TargetLandscapeInfo, TEXT("Category"), TEXT("Gizmo"));
				MetaData->SetValue(NewProp_TargetLandscapeInfo, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeGizmoActor.h"));
				MetaData->SetValue(NewProp_RelativeScaleZ, TEXT("Category"), TEXT("Gizmo"));
				MetaData->SetValue(NewProp_RelativeScaleZ, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeGizmoActor.h"));
				MetaData->SetValue(NewProp_MinRelativeZ, TEXT("Category"), TEXT("Gizmo"));
				MetaData->SetValue(NewProp_MinRelativeZ, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeGizmoActor.h"));
				MetaData->SetValue(NewProp_MarginZ, TEXT("Category"), TEXT("Gizmo"));
				MetaData->SetValue(NewProp_MarginZ, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeGizmoActor.h"));
				MetaData->SetValue(NewProp_LengthZ, TEXT("Category"), TEXT("Gizmo"));
				MetaData->SetValue(NewProp_LengthZ, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeGizmoActor.h"));
				MetaData->SetValue(NewProp_Height, TEXT("Category"), TEXT("Gizmo"));
				MetaData->SetValue(NewProp_Height, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeGizmoActor.h"));
				MetaData->SetValue(NewProp_Width, TEXT("Category"), TEXT("Gizmo"));
				MetaData->SetValue(NewProp_Width, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeGizmoActor.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ALandscapeGizmoActor(Z_Construct_UClass_ALandscapeGizmoActor, TEXT("ALandscapeGizmoActor"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(ALandscapeGizmoActor);
	UEnum* Z_Construct_UEnum_Landscape_ELandscapeGizmoType()
	{
		UPackage* Outer=Z_Construct_UPackage_Landscape();
		extern uint32 Get_Z_Construct_UEnum_Landscape_ELandscapeGizmoType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ELandscapeGizmoType"), 0, Get_Z_Construct_UEnum_Landscape_ELandscapeGizmoType_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ELandscapeGizmoType"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("LGT_None")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("LGT_Height")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("LGT_Weight")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("LGT_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeGizmoActiveActor.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Landscape_ELandscapeGizmoType_CRC() { return 3435515815U; }
	UScriptStruct* Z_Construct_UScriptStruct_FGizmoSelectData()
	{
		UPackage* Outer=Z_Construct_UPackage_Landscape();
		extern uint32 Get_Z_Construct_UScriptStruct_FGizmoSelectData_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("GizmoSelectData"), sizeof(FGizmoSelectData), Get_Z_Construct_UScriptStruct_FGizmoSelectData_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GizmoSelectData"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FGizmoSelectData>, EStructFlags(0x00000001));
#if WITH_EDITORONLY_DATA
			UProperty* NewProp_HeightData = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("HeightData"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(HeightData, FGizmoSelectData), 0x0000000800000000);
			UProperty* NewProp_Ratio = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Ratio"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Ratio, FGizmoSelectData), 0x0000000800000000);
#endif // WITH_EDITORONLY_DATA
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeGizmoActiveActor.h"));
			MetaData->SetValue(NewProp_HeightData, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeGizmoActiveActor.h"));
			MetaData->SetValue(NewProp_Ratio, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeGizmoActiveActor.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FGizmoSelectData_CRC() { return 780006274U; }
	UClass* Z_Construct_UClass_ALandscapeGizmoActiveActor_NoRegister()
	{
		return ALandscapeGizmoActiveActor::StaticClass();
	}
	UClass* Z_Construct_UClass_ALandscapeGizmoActiveActor()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_ALandscapeGizmoActor();
			Z_Construct_UPackage_Landscape();
			OuterClass = ALandscapeGizmoActiveActor::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880280;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_UnsnappedRotation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UnsnappedRotation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(UnsnappedRotation, ALandscapeGizmoActiveActor), 0x0000000800002000, Z_Construct_UScriptStruct_FRotator());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSnapToLandscapeGrid, ALandscapeGizmoActiveActor, bool);
				UProperty* NewProp_bSnapToLandscapeGrid = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bSnapToLandscapeGrid"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSnapToLandscapeGrid, ALandscapeGizmoActiveActor), 0x0000000800002000, CPP_BOOL_PROPERTY_BITMASK(bSnapToLandscapeGrid, ALandscapeGizmoActiveActor), sizeof(bool), true);
				UProperty* NewProp_LayerInfos = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LayerInfos"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(LayerInfos, ALandscapeGizmoActiveActor), 0x0000000800020001);
				UProperty* NewProp_LayerInfos_Inner = new(EC_InternalUseOnlyConstructor, NewProp_LayerInfos, TEXT("LayerInfos"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000800020000, Z_Construct_UClass_ULandscapeLayerInfoObject_NoRegister());
				UProperty* NewProp_GizmoMeshMaterial = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GizmoMeshMaterial"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(GizmoMeshMaterial, ALandscapeGizmoActiveActor), 0x0000000800000000, Z_Construct_UClass_UMaterial_NoRegister());
				UProperty* NewProp_GizmoDataMaterial = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GizmoDataMaterial"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(GizmoDataMaterial, ALandscapeGizmoActiveActor), 0x0000000800000000, Z_Construct_UClass_UMaterialInstance_NoRegister());
				UProperty* NewProp_GizmoMaterial = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GizmoMaterial"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(GizmoMaterial, ALandscapeGizmoActiveActor), 0x0000000800000000, Z_Construct_UClass_UMaterial_NoRegister());
				UProperty* NewProp_FrustumVerts = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FrustumVerts"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(FrustumVerts, ALandscapeGizmoActiveActor), 0x0000000800002000, Z_Construct_UScriptStruct_FVector());
				NewProp_FrustumVerts->ArrayDim = CPP_ARRAY_DIM(FrustumVerts, ALandscapeGizmoActiveActor);
				UProperty* NewProp_CachedScaleXY = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CachedScaleXY"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(CachedScaleXY, ALandscapeGizmoActiveActor), 0x0000000800000000);
				UProperty* NewProp_CachedHeight = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CachedHeight"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(CachedHeight, ALandscapeGizmoActiveActor), 0x0000000800000000);
				UProperty* NewProp_CachedWidth = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CachedWidth"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(CachedWidth, ALandscapeGizmoActiveActor), 0x0000000800000000);
				UProperty* NewProp_SampleSizeY = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SampleSizeY"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(SampleSizeY, ALandscapeGizmoActiveActor), 0x0000000800000000);
				UProperty* NewProp_SampleSizeX = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SampleSizeX"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(SampleSizeX, ALandscapeGizmoActiveActor), 0x0000000800000000);
				UProperty* NewProp_SampledNormal = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SampledNormal"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(SampledNormal, ALandscapeGizmoActiveActor), 0x0000000800000000);
				UProperty* NewProp_SampledNormal_Inner = new(EC_InternalUseOnlyConstructor, NewProp_SampledNormal, TEXT("SampledNormal"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000800000000, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_SampledHeight = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SampledHeight"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(SampledHeight, ALandscapeGizmoActiveActor), 0x0000000800000000);
				UProperty* NewProp_SampledHeight_Inner = new(EC_InternalUseOnlyConstructor, NewProp_SampledHeight, TEXT("SampledHeight"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000800000000, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_TextureScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TextureScale"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TextureScale, ALandscapeGizmoActiveActor), 0x0000000800000000, Z_Construct_UScriptStruct_FVector2D());
				UProperty* NewProp_GizmoTexture = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GizmoTexture"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(GizmoTexture, ALandscapeGizmoActiveActor), 0x0000000800002000, Z_Construct_UClass_UTexture2D_NoRegister());
				UProperty* NewProp_DataType = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DataType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(DataType, ALandscapeGizmoActiveActor), 0x0000000800002000, Z_Construct_UEnum_Landscape_ELandscapeGizmoType());
#endif // WITH_EDITORONLY_DATA
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("LandscapeGizmoActiveActor.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeGizmoActiveActor.h"));
				MetaData->SetValue(NewProp_UnsnappedRotation, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeGizmoActiveActor.h"));
				MetaData->SetValue(NewProp_bSnapToLandscapeGrid, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeGizmoActiveActor.h"));
				MetaData->SetValue(NewProp_LayerInfos, TEXT("Category"), TEXT("LandscapeGizmoActiveActor"));
				MetaData->SetValue(NewProp_LayerInfos, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeGizmoActiveActor.h"));
				MetaData->SetValue(NewProp_GizmoMeshMaterial, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeGizmoActiveActor.h"));
				MetaData->SetValue(NewProp_GizmoDataMaterial, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeGizmoActiveActor.h"));
				MetaData->SetValue(NewProp_GizmoMaterial, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeGizmoActiveActor.h"));
				MetaData->SetValue(NewProp_FrustumVerts, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeGizmoActiveActor.h"));
				MetaData->SetValue(NewProp_CachedScaleXY, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeGizmoActiveActor.h"));
				MetaData->SetValue(NewProp_CachedHeight, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeGizmoActiveActor.h"));
				MetaData->SetValue(NewProp_CachedWidth, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeGizmoActiveActor.h"));
				MetaData->SetValue(NewProp_SampleSizeY, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeGizmoActiveActor.h"));
				MetaData->SetValue(NewProp_SampleSizeX, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeGizmoActiveActor.h"));
				MetaData->SetValue(NewProp_SampledNormal, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeGizmoActiveActor.h"));
				MetaData->SetValue(NewProp_SampledHeight, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeGizmoActiveActor.h"));
				MetaData->SetValue(NewProp_TextureScale, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeGizmoActiveActor.h"));
				MetaData->SetValue(NewProp_GizmoTexture, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeGizmoActiveActor.h"));
				MetaData->SetValue(NewProp_DataType, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeGizmoActiveActor.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ALandscapeGizmoActiveActor(Z_Construct_UClass_ALandscapeGizmoActiveActor, TEXT("ALandscapeGizmoActiveActor"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(ALandscapeGizmoActiveActor);
	UClass* Z_Construct_UClass_ULandscapeGizmoRenderComponent_NoRegister()
	{
		return ULandscapeGizmoRenderComponent::StaticClass();
	}
	UClass* Z_Construct_UClass_ULandscapeGizmoRenderComponent()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPrimitiveComponent();
			Z_Construct_UPackage_Landscape();
			OuterClass = ULandscapeGizmoRenderComponent::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20A00080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Mobility Trigger ComponentReplication"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("LandscapeGizmoRenderComponent.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeGizmoRenderComponent.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ULandscapeGizmoRenderComponent(Z_Construct_UClass_ULandscapeGizmoRenderComponent, TEXT("ULandscapeGizmoRenderComponent"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(ULandscapeGizmoRenderComponent);
	UClass* Z_Construct_UClass_ULandscapeHeightfieldCollisionComponent_NoRegister()
	{
		return ULandscapeHeightfieldCollisionComponent::StaticClass();
	}
	UClass* Z_Construct_UClass_ULandscapeHeightfieldCollisionComponent()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPrimitiveComponent();
			Z_Construct_UPackage_Landscape();
			OuterClass = ULandscapeHeightfieldCollisionComponent::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20A80080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_CookedPhysicalMaterials = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CookedPhysicalMaterials"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(CookedPhysicalMaterials, ULandscapeHeightfieldCollisionComponent), 0x0000000000000000);
				UProperty* NewProp_CookedPhysicalMaterials_Inner = new(EC_InternalUseOnlyConstructor, NewProp_CookedPhysicalMaterials, TEXT("CookedPhysicalMaterials"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UPhysicalMaterial_NoRegister());
				UProperty* NewProp_RenderComponent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RenderComponent"), RF_Public|RF_Transient|RF_Native) ULazyObjectProperty(CPP_PROPERTY_BASE(RenderComponent, ULandscapeHeightfieldCollisionComponent), 0x0004000000080008, Z_Construct_UClass_ULandscapeComponent_NoRegister());
				UProperty* NewProp_CachedLocalBox = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CachedLocalBox"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(CachedLocalBox, ULandscapeHeightfieldCollisionComponent), 0x0000000000000000, Z_Construct_UScriptStruct_FBox());
				UProperty* NewProp_HeightfieldGuid = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HeightfieldGuid"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(HeightfieldGuid, ULandscapeHeightfieldCollisionComponent), 0x0000000000000000, Z_Construct_UScriptStruct_FGuid());
				UProperty* NewProp_CollisionQuadFlags = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CollisionQuadFlags"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(CollisionQuadFlags, ULandscapeHeightfieldCollisionComponent), 0x0000000000000000);
				UProperty* NewProp_CollisionQuadFlags_Inner = new(EC_InternalUseOnlyConstructor, NewProp_CollisionQuadFlags, TEXT("CollisionQuadFlags"), RF_Public|RF_Transient|RF_Native) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
				UProperty* NewProp_CollisionScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CollisionScale"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(CollisionScale, ULandscapeHeightfieldCollisionComponent), 0x0000000000000000);
				UProperty* NewProp_CollisionSizeQuads = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CollisionSizeQuads"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(CollisionSizeQuads, ULandscapeHeightfieldCollisionComponent), 0x0000000000000000);
				UProperty* NewProp_SectionBaseY = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SectionBaseY"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(SectionBaseY, ULandscapeHeightfieldCollisionComponent), 0x0000000000000000);
				UProperty* NewProp_SectionBaseX = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SectionBaseX"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(SectionBaseX, ULandscapeHeightfieldCollisionComponent), 0x0000000000000000);
				UProperty* NewProp_ComponentLayerInfos = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ComponentLayerInfos"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ComponentLayerInfos, ULandscapeHeightfieldCollisionComponent), 0x0000000000000000);
				UProperty* NewProp_ComponentLayerInfos_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ComponentLayerInfos, TEXT("ComponentLayerInfos"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_ULandscapeLayerInfoObject_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Mobility Trigger ComponentReplication"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("LandscapeHeightfieldCollisionComponent.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeHeightfieldCollisionComponent.h"));
				MetaData->SetValue(NewProp_CookedPhysicalMaterials, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeHeightfieldCollisionComponent.h"));
				MetaData->SetValue(NewProp_CookedPhysicalMaterials, TEXT("ToolTip"), TEXT("This is a list of physical materials that is actually used by a cooked HeightField"));
				MetaData->SetValue(NewProp_RenderComponent, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeHeightfieldCollisionComponent.h"));
				MetaData->SetValue(NewProp_RenderComponent, TEXT("ToolTip"), TEXT("Reference to render component"));
				MetaData->SetValue(NewProp_CachedLocalBox, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeHeightfieldCollisionComponent.h"));
				MetaData->SetValue(NewProp_CachedLocalBox, TEXT("ToolTip"), TEXT("Cached local-space bounding box, created at heightmap update time"));
				MetaData->SetValue(NewProp_HeightfieldGuid, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeHeightfieldCollisionComponent.h"));
				MetaData->SetValue(NewProp_HeightfieldGuid, TEXT("ToolTip"), TEXT("Guid used to share PhysX heightfield objects in the editor"));
				MetaData->SetValue(NewProp_CollisionQuadFlags, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeHeightfieldCollisionComponent.h"));
				MetaData->SetValue(NewProp_CollisionQuadFlags, TEXT("ToolTip"), TEXT("The flags for each collision quad. See ECollisionQuadFlags."));
				MetaData->SetValue(NewProp_CollisionScale, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeHeightfieldCollisionComponent.h"));
				MetaData->SetValue(NewProp_CollisionScale, TEXT("ToolTip"), TEXT("Collision scale: (ComponentSizeQuads) / (CollisionSizeQuads)"));
				MetaData->SetValue(NewProp_CollisionSizeQuads, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeHeightfieldCollisionComponent.h"));
				MetaData->SetValue(NewProp_CollisionSizeQuads, TEXT("ToolTip"), TEXT("Size of component in collision quads"));
				MetaData->SetValue(NewProp_SectionBaseY, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeHeightfieldCollisionComponent.h"));
				MetaData->SetValue(NewProp_SectionBaseX, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeHeightfieldCollisionComponent.h"));
				MetaData->SetValue(NewProp_SectionBaseX, TEXT("ToolTip"), TEXT("Offset of component in landscape quads"));
				MetaData->SetValue(NewProp_ComponentLayerInfos, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeHeightfieldCollisionComponent.h"));
				MetaData->SetValue(NewProp_ComponentLayerInfos, TEXT("ToolTip"), TEXT("List of layers painted on this component. Matches the WeightmapLayerAllocations array in the LandscapeComponent."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ULandscapeHeightfieldCollisionComponent(Z_Construct_UClass_ULandscapeHeightfieldCollisionComponent, TEXT("ULandscapeHeightfieldCollisionComponent"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(ULandscapeHeightfieldCollisionComponent);
	UClass* Z_Construct_UClass_ULandscapeMeshCollisionComponent_NoRegister()
	{
		return ULandscapeMeshCollisionComponent::StaticClass();
	}
	UClass* Z_Construct_UClass_ULandscapeMeshCollisionComponent()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_ULandscapeHeightfieldCollisionComponent();
			Z_Construct_UPackage_Landscape();
			OuterClass = ULandscapeMeshCollisionComponent::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20A00080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_MeshGuid = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MeshGuid"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MeshGuid, ULandscapeMeshCollisionComponent), 0x0000000000000000, Z_Construct_UScriptStruct_FGuid());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Mobility Trigger ComponentReplication"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("LandscapeMeshCollisionComponent.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeMeshCollisionComponent.h"));
				MetaData->SetValue(NewProp_MeshGuid, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeMeshCollisionComponent.h"));
				MetaData->SetValue(NewProp_MeshGuid, TEXT("ToolTip"), TEXT("Guid used to share PhysX heightfield objects in the editor"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ULandscapeMeshCollisionComponent(Z_Construct_UClass_ULandscapeMeshCollisionComponent, TEXT("ULandscapeMeshCollisionComponent"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(ULandscapeMeshCollisionComponent);
	UScriptStruct* Z_Construct_UScriptStruct_FLandscapeInfoLayerSettings()
	{
		UPackage* Outer=Z_Construct_UPackage_Landscape();
		extern uint32 Get_Z_Construct_UScriptStruct_FLandscapeInfoLayerSettings_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("LandscapeInfoLayerSettings"), sizeof(FLandscapeInfoLayerSettings), Get_Z_Construct_UScriptStruct_FLandscapeInfoLayerSettings_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LandscapeInfoLayerSettings"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FLandscapeInfoLayerSettings>, EStructFlags(0x00000001));
#if WITH_EDITORONLY_DATA
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bValid, FLandscapeInfoLayerSettings, uint8);
			UProperty* NewProp_bValid = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bValid"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bValid, FLandscapeInfoLayerSettings), 0x0000000800002000, CPP_BOOL_PROPERTY_BITMASK(bValid, FLandscapeInfoLayerSettings), sizeof(uint8), false);
			UProperty* NewProp_DebugColorChannel = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DebugColorChannel"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(DebugColorChannel, FLandscapeInfoLayerSettings), 0x0000000800002000);
			UProperty* NewProp_Owner = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Owner"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Owner, FLandscapeInfoLayerSettings), 0x0000000800000000, Z_Construct_UClass_ALandscapeProxy_NoRegister());
			UProperty* NewProp_ThumbnailMIC = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ThumbnailMIC"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ThumbnailMIC, FLandscapeInfoLayerSettings), 0x0000000800002000, Z_Construct_UClass_UMaterialInstanceConstant_NoRegister());
#endif // WITH_EDITORONLY_DATA
			UProperty* NewProp_LayerName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LayerName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(LayerName, FLandscapeInfoLayerSettings), 0x0000000000000000);
			UProperty* NewProp_LayerInfoObj = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LayerInfoObj"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(LayerInfoObj, FLandscapeInfoLayerSettings), 0x0000000000000000, Z_Construct_UClass_ULandscapeLayerInfoObject_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeInfo.h"));
			MetaData->SetValue(NewProp_bValid, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeInfo.h"));
			MetaData->SetValue(NewProp_DebugColorChannel, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeInfo.h"));
			MetaData->SetValue(NewProp_Owner, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeInfo.h"));
			MetaData->SetValue(NewProp_ThumbnailMIC, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeInfo.h"));
			MetaData->SetValue(NewProp_LayerName, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeInfo.h"));
			MetaData->SetValue(NewProp_LayerInfoObj, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeInfo.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FLandscapeInfoLayerSettings_CRC() { return 3106299513U; }
	UClass* Z_Construct_UClass_ULandscapeInfo_NoRegister()
	{
		return ULandscapeInfo::StaticClass();
	}
	UClass* Z_Construct_UClass_ULandscapeInfo()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Landscape();
			OuterClass = ULandscapeInfo::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_Layers = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Layers"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Layers, ULandscapeInfo), 0x0000000800000000);
				UProperty* NewProp_Layers_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Layers, TEXT("Layers"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000800000000, Z_Construct_UScriptStruct_FLandscapeInfoLayerSettings());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsValid, ULandscapeInfo, uint8);
				UProperty* NewProp_bIsValid = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsValid"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsValid, ULandscapeInfo), 0x0000000800002000, CPP_BOOL_PROPERTY_BITMASK(bIsValid, ULandscapeInfo), sizeof(uint8), false);
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_DrawScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DrawScale"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DrawScale, ULandscapeInfo), 0x0000000000000000, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_ComponentNumSubsections = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ComponentNumSubsections"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ComponentNumSubsections, ULandscapeInfo), 0x0000000000000000);
				UProperty* NewProp_SubsectionSizeQuads = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SubsectionSizeQuads"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(SubsectionSizeQuads, ULandscapeInfo), 0x0000000000000000);
				UProperty* NewProp_ComponentSizeQuads = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ComponentSizeQuads"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ComponentSizeQuads, ULandscapeInfo), 0x0000000000000000);
				UProperty* NewProp_LandscapeGuid = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LandscapeGuid"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LandscapeGuid, ULandscapeInfo), 0x0000000000000000, Z_Construct_UScriptStruct_FGuid());
				UProperty* NewProp_LandscapeActor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LandscapeActor"), RF_Public|RF_Transient|RF_Native) ULazyObjectProperty(CPP_PROPERTY_BASE(LandscapeActor, ULandscapeInfo), 0x0004000000000000, Z_Construct_UClass_ALandscape_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("LandscapeInfo.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeInfo.h"));
				MetaData->SetValue(NewProp_Layers, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeInfo.h"));
				MetaData->SetValue(NewProp_bIsValid, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeInfo.h"));
				MetaData->SetValue(NewProp_DrawScale, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeInfo.h"));
				MetaData->SetValue(NewProp_ComponentNumSubsections, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeInfo.h"));
				MetaData->SetValue(NewProp_SubsectionSizeQuads, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeInfo.h"));
				MetaData->SetValue(NewProp_ComponentSizeQuads, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeInfo.h"));
				MetaData->SetValue(NewProp_LandscapeGuid, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeInfo.h"));
				MetaData->SetValue(NewProp_LandscapeActor, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeInfo.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ULandscapeInfo(Z_Construct_UClass_ULandscapeInfo, TEXT("ULandscapeInfo"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(ULandscapeInfo);
	UClass* Z_Construct_UClass_ULandscapeInfoMap_NoRegister()
	{
		return ULandscapeInfoMap::StaticClass();
	}
	UClass* Z_Construct_UClass_ULandscapeInfoMap()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Landscape();
			OuterClass = ULandscapeInfoMap::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("LandscapeInfoMap.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeInfoMap.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ULandscapeInfoMap(Z_Construct_UClass_ULandscapeInfoMap, TEXT("ULandscapeInfoMap"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(ULandscapeInfoMap);
	UClass* Z_Construct_UClass_ULandscapeLayerInfoObject_NoRegister()
	{
		return ULandscapeLayerInfoObject::StaticClass();
	}
	UClass* Z_Construct_UClass_ULandscapeLayerInfoObject()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Landscape();
			OuterClass = ULandscapeLayerInfoObject::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
#if WITH_EDITORONLY_DATA
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bNoWeightBlend, ULandscapeLayerInfoObject, uint8);
				UProperty* NewProp_bNoWeightBlend = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bNoWeightBlend"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bNoWeightBlend, ULandscapeLayerInfoObject), 0x0000000800020001, CPP_BOOL_PROPERTY_BITMASK(bNoWeightBlend, ULandscapeLayerInfoObject), sizeof(uint8), false);
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_Hardness = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Hardness"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Hardness, ULandscapeLayerInfoObject), 0x0000000000000001);
				UProperty* NewProp_PhysMaterial = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PhysMaterial"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(PhysMaterial, ULandscapeLayerInfoObject), 0x0000000000000001, Z_Construct_UClass_UPhysicalMaterial_NoRegister());
				UProperty* NewProp_LayerName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LayerName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(LayerName, ULandscapeLayerInfoObject), 0x0000010000020001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("LandscapeLayerInfoObject.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeLayerInfoObject.h"));
				MetaData->SetValue(NewProp_bNoWeightBlend, TEXT("Category"), TEXT("LandscapeLayerInfoObject"));
				MetaData->SetValue(NewProp_bNoWeightBlend, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeLayerInfoObject.h"));
				MetaData->SetValue(NewProp_Hardness, TEXT("Category"), TEXT("LandscapeLayerInfoObject"));
				MetaData->SetValue(NewProp_Hardness, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeLayerInfoObject.h"));
				MetaData->SetValue(NewProp_PhysMaterial, TEXT("Category"), TEXT("LandscapeLayerInfoObject"));
				MetaData->SetValue(NewProp_PhysMaterial, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeLayerInfoObject.h"));
				MetaData->SetValue(NewProp_LayerName, TEXT("Category"), TEXT("LandscapeLayerInfoObject"));
				MetaData->SetValue(NewProp_LayerName, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeLayerInfoObject.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ULandscapeLayerInfoObject(Z_Construct_UClass_ULandscapeLayerInfoObject, TEXT("ULandscapeLayerInfoObject"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(ULandscapeLayerInfoObject);
	UClass* Z_Construct_UClass_ULandscapeMaterialInstanceConstant_NoRegister()
	{
		return ULandscapeMaterialInstanceConstant::StaticClass();
	}
	UClass* Z_Construct_UClass_ULandscapeMaterialInstanceConstant()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialInstanceConstant();
			Z_Construct_UPackage_Landscape();
			OuterClass = ULandscapeMaterialInstanceConstant::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20882080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_DataWeightmapSize = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DataWeightmapSize"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(DataWeightmapSize, ULandscapeMaterialInstanceConstant), 0x0000000000000000);
				UProperty* NewProp_DataWeightmapIndex = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DataWeightmapIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(DataWeightmapIndex, ULandscapeMaterialInstanceConstant), 0x0000000000000000);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsLayerThumbnail, ULandscapeMaterialInstanceConstant, uint8);
				UProperty* NewProp_bIsLayerThumbnail = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsLayerThumbnail"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsLayerThumbnail, ULandscapeMaterialInstanceConstant), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bIsLayerThumbnail, ULandscapeMaterialInstanceConstant), sizeof(uint8), false);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("LandscapeMaterialInstanceConstant.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeMaterialInstanceConstant.h"));
				MetaData->SetValue(NewProp_DataWeightmapSize, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeMaterialInstanceConstant.h"));
				MetaData->SetValue(NewProp_DataWeightmapIndex, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeMaterialInstanceConstant.h"));
				MetaData->SetValue(NewProp_bIsLayerThumbnail, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeMaterialInstanceConstant.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ULandscapeMaterialInstanceConstant(Z_Construct_UClass_ULandscapeMaterialInstanceConstant, TEXT("ULandscapeMaterialInstanceConstant"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(ULandscapeMaterialInstanceConstant);
	UClass* Z_Construct_UClass_ALandscapeMeshProxyActor_NoRegister()
	{
		return ALandscapeMeshProxyActor::StaticClass();
	}
	UClass* Z_Construct_UClass_ALandscapeMeshProxyActor()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AActor();
			Z_Construct_UPackage_Landscape();
			OuterClass = ALandscapeMeshProxyActor::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_LandscapeMeshProxyComponent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LandscapeMeshProxyComponent"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(LandscapeMeshProxyComponent, ALandscapeMeshProxyActor), 0x00000000000a001d, Z_Construct_UClass_ULandscapeMeshProxyComponent_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("LandscapeMeshProxyActor.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeMeshProxyActor.h"));
				MetaData->SetValue(NewProp_LandscapeMeshProxyComponent, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_LandscapeMeshProxyComponent, TEXT("Category"), TEXT("LandscapeMeshProxyActor"));
				MetaData->SetValue(NewProp_LandscapeMeshProxyComponent, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_LandscapeMeshProxyComponent, TEXT("ExposeFunctionCategories"), TEXT("Mesh,Rendering,Physics,Components|StaticMesh"));
				MetaData->SetValue(NewProp_LandscapeMeshProxyComponent, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeMeshProxyActor.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ALandscapeMeshProxyActor(Z_Construct_UClass_ALandscapeMeshProxyActor, TEXT("ALandscapeMeshProxyActor"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(ALandscapeMeshProxyActor);
	UClass* Z_Construct_UClass_ULandscapeMeshProxyComponent_NoRegister()
	{
		return ULandscapeMeshProxyComponent::StaticClass();
	}
	UClass* Z_Construct_UClass_ULandscapeMeshProxyComponent()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UStaticMeshComponent();
			Z_Construct_UPackage_Landscape();
			OuterClass = ULandscapeMeshProxyComponent::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20A81080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ProxyLOD = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ProxyLOD"), RF_Public|RF_Transient|RF_Native) UInt8Property(CPP_PROPERTY_BASE(ProxyLOD, ULandscapeMeshProxyComponent), 0x0000000000000000);
				UProperty* NewProp_ProxyComponentBases = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ProxyComponentBases"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ProxyComponentBases, ULandscapeMeshProxyComponent), 0x0000000000000000);
				UProperty* NewProp_ProxyComponentBases_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ProxyComponentBases, TEXT("ProxyComponentBases"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FIntPoint());
				UProperty* NewProp_LandscapeGuid = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LandscapeGuid"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LandscapeGuid, ULandscapeMeshProxyComponent), 0x0000000000000000, Z_Construct_UScriptStruct_FGuid());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Activation Components|Activation Trigger ComponentReplication"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("LandscapeMeshProxyComponent.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeMeshProxyComponent.h"));
				MetaData->SetValue(NewProp_ProxyLOD, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeMeshProxyComponent.h"));
				MetaData->SetValue(NewProp_ProxyLOD, TEXT("ToolTip"), TEXT("LOD level proxy was generated for"));
				MetaData->SetValue(NewProp_ProxyComponentBases, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeMeshProxyComponent.h"));
				MetaData->SetValue(NewProp_ProxyComponentBases, TEXT("ToolTip"), TEXT("The components this proxy was generated for"));
				MetaData->SetValue(NewProp_LandscapeGuid, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeMeshProxyComponent.h"));
				MetaData->SetValue(NewProp_LandscapeGuid, TEXT("ToolTip"), TEXT("The landscape this proxy was generated for"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ULandscapeMeshProxyComponent(Z_Construct_UClass_ULandscapeMeshProxyComponent, TEXT("ULandscapeMeshProxyComponent"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(ULandscapeMeshProxyComponent);
	UEnum* Z_Construct_UEnum_Landscape_ELandscapeLODFalloff()
	{
		UPackage* Outer=Z_Construct_UPackage_Landscape();
		extern uint32 Get_Z_Construct_UEnum_Landscape_ELandscapeLODFalloff_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ELandscapeLODFalloff"), 0, Get_Z_Construct_UEnum_Landscape_ELandscapeLODFalloff_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ELandscapeLODFalloff"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ELandscapeLODFalloff::Linear")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ELandscapeLODFalloff::SquareRoot")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ELandscapeLODFalloff::ELandscapeLODFalloff_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("Linear.DisplayName"), TEXT("Linear"));
			MetaData->SetValue(ReturnEnum, TEXT("Linear.ToolTip"), TEXT("Default mode."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeProxy.h"));
			MetaData->SetValue(ReturnEnum, TEXT("SquareRoot.DisplayName"), TEXT("Square Root"));
			MetaData->SetValue(ReturnEnum, TEXT("SquareRoot.ToolTip"), TEXT("Square Root give more natural transition, and also keep the same LOD."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Landscape_ELandscapeLODFalloff_CRC() { return 4065924369U; }
	UEnum* Z_Construct_UEnum_Landscape_ELandscapeLayerPaintingRestriction()
	{
		UPackage* Outer=Z_Construct_UPackage_Landscape();
		extern uint32 Get_Z_Construct_UEnum_Landscape_ELandscapeLayerPaintingRestriction_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ELandscapeLayerPaintingRestriction"), 0, Get_Z_Construct_UEnum_Landscape_ELandscapeLayerPaintingRestriction_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ELandscapeLayerPaintingRestriction"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ELandscapeLayerPaintingRestriction::None")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ELandscapeLayerPaintingRestriction::UseMaxLayers")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ELandscapeLayerPaintingRestriction::ExistingOnly")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ELandscapeLayerPaintingRestriction::ELandscapeLayerPaintingRestriction_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ExistingOnly.DisplayName"), TEXT("Existing Layers Only"));
			MetaData->SetValue(ReturnEnum, TEXT("ExistingOnly.ToolTip"), TEXT("Restricts painting to only components that already have this layer."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeProxy.h"));
			MetaData->SetValue(ReturnEnum, TEXT("None.DisplayName"), TEXT("None"));
			MetaData->SetValue(ReturnEnum, TEXT("None.ToolTip"), TEXT("No restriction, can paint anywhere (default)."));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("this is only here because putting it in LandscapeEditorObject.h (where it belongs)\nresults in Engine being dependent on LandscapeEditor, as the actual landscape editing\ncode (e.g. LandscapeEdit.h) is in /Engine/ for some reason..."));
			MetaData->SetValue(ReturnEnum, TEXT("UseMaxLayers.DisplayName"), TEXT("Limit Layer Count"));
			MetaData->SetValue(ReturnEnum, TEXT("UseMaxLayers.ToolTip"), TEXT("Uses the MaxPaintedLayersPerComponent setting from the LandscapeProxy."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Landscape_ELandscapeLayerPaintingRestriction_CRC() { return 971745565U; }
	UScriptStruct* Z_Construct_UScriptStruct_FLandscapeImportLayerInfo()
	{
		UPackage* Outer=Z_Construct_UPackage_Landscape();
		extern uint32 Get_Z_Construct_UScriptStruct_FLandscapeImportLayerInfo_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("LandscapeImportLayerInfo"), sizeof(FLandscapeImportLayerInfo), Get_Z_Construct_UScriptStruct_FLandscapeImportLayerInfo_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LandscapeImportLayerInfo"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FLandscapeImportLayerInfo>, EStructFlags(0x00000001));
#if WITH_EDITORONLY_DATA
			UProperty* NewProp_SourceFilePath = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SourceFilePath"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(SourceFilePath, FLandscapeImportLayerInfo), 0x0000000800000001);
			UProperty* NewProp_ThumbnailMIC = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ThumbnailMIC"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ThumbnailMIC, FLandscapeImportLayerInfo), 0x0000000800020001, Z_Construct_UClass_UMaterialInstanceConstant_NoRegister());
			UProperty* NewProp_LayerInfo = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LayerInfo"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(LayerInfo, FLandscapeImportLayerInfo), 0x0000000800000001, Z_Construct_UClass_ULandscapeLayerInfoObject_NoRegister());
			UProperty* NewProp_LayerName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LayerName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(LayerName, FLandscapeImportLayerInfo), 0x0000000800020001);
#endif // WITH_EDITORONLY_DATA
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeProxy.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Structure storing Layer Data for import"));
			MetaData->SetValue(NewProp_SourceFilePath, TEXT("Category"), TEXT("Import"));
			MetaData->SetValue(NewProp_SourceFilePath, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeProxy.h"));
			MetaData->SetValue(NewProp_SourceFilePath, TEXT("ToolTip"), TEXT("Optional"));
			MetaData->SetValue(NewProp_ThumbnailMIC, TEXT("Category"), TEXT("Import"));
			MetaData->SetValue(NewProp_ThumbnailMIC, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeProxy.h"));
			MetaData->SetValue(NewProp_LayerInfo, TEXT("Category"), TEXT("Import"));
			MetaData->SetValue(NewProp_LayerInfo, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeProxy.h"));
			MetaData->SetValue(NewProp_LayerName, TEXT("Category"), TEXT("Import"));
			MetaData->SetValue(NewProp_LayerName, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeProxy.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FLandscapeImportLayerInfo_CRC() { return 2642904321U; }
	UScriptStruct* Z_Construct_UScriptStruct_FLandscapeLayerStruct()
	{
		UPackage* Outer=Z_Construct_UPackage_Landscape();
		extern uint32 Get_Z_Construct_UScriptStruct_FLandscapeLayerStruct_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("LandscapeLayerStruct"), sizeof(FLandscapeLayerStruct), Get_Z_Construct_UScriptStruct_FLandscapeLayerStruct_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LandscapeLayerStruct"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FLandscapeLayerStruct>, EStructFlags(0x00000001));
#if WITH_EDITORONLY_DATA
			UProperty* NewProp_SourceFilePath = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SourceFilePath"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(SourceFilePath, FLandscapeLayerStruct), 0x0000000800000000);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSelected, FLandscapeLayerStruct, uint8);
			UProperty* NewProp_bSelected = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bSelected"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSelected, FLandscapeLayerStruct), 0x0000000800002000, CPP_BOOL_PROPERTY_BITMASK(bSelected, FLandscapeLayerStruct), sizeof(uint8), false);
			UProperty* NewProp_DebugColorChannel = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DebugColorChannel"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(DebugColorChannel, FLandscapeLayerStruct), 0x0000000800002000);
			UProperty* NewProp_Owner = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Owner"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Owner, FLandscapeLayerStruct), 0x0000000800000000, Z_Construct_UClass_ALandscapeProxy_NoRegister());
			UProperty* NewProp_ThumbnailMIC = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ThumbnailMIC"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ThumbnailMIC, FLandscapeLayerStruct), 0x0000000800002000, Z_Construct_UClass_UMaterialInstanceConstant_NoRegister());
#endif // WITH_EDITORONLY_DATA
			UProperty* NewProp_LayerInfoObj = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LayerInfoObj"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(LayerInfoObj, FLandscapeLayerStruct), 0x0000000000000000, Z_Construct_UClass_ULandscapeLayerInfoObject_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeProxy.h"));
			MetaData->SetValue(NewProp_SourceFilePath, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeProxy.h"));
			MetaData->SetValue(NewProp_bSelected, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeProxy.h"));
			MetaData->SetValue(NewProp_DebugColorChannel, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeProxy.h"));
			MetaData->SetValue(NewProp_Owner, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeProxy.h"));
			MetaData->SetValue(NewProp_ThumbnailMIC, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeProxy.h"));
			MetaData->SetValue(NewProp_LayerInfoObj, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeProxy.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FLandscapeLayerStruct_CRC() { return 3439657671U; }
	UScriptStruct* Z_Construct_UScriptStruct_FLandscapeEditorLayerSettings()
	{
		UPackage* Outer=Z_Construct_UPackage_Landscape();
		extern uint32 Get_Z_Construct_UScriptStruct_FLandscapeEditorLayerSettings_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("LandscapeEditorLayerSettings"), sizeof(FLandscapeEditorLayerSettings), Get_Z_Construct_UScriptStruct_FLandscapeEditorLayerSettings_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LandscapeEditorLayerSettings"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FLandscapeEditorLayerSettings>, EStructFlags(0x00000001));
#if WITH_EDITORONLY_DATA
			UProperty* NewProp_ReimportLayerFilePath = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ReimportLayerFilePath"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ReimportLayerFilePath, FLandscapeEditorLayerSettings), 0x0000000800000000);
			UProperty* NewProp_LayerInfoObj = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LayerInfoObj"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(LayerInfoObj, FLandscapeEditorLayerSettings), 0x0000000800000000, Z_Construct_UClass_ULandscapeLayerInfoObject_NoRegister());
#endif // WITH_EDITORONLY_DATA
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeProxy.h"));
			MetaData->SetValue(NewProp_ReimportLayerFilePath, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeProxy.h"));
			MetaData->SetValue(NewProp_LayerInfoObj, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeProxy.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FLandscapeEditorLayerSettings_CRC() { return 485831733U; }
	UScriptStruct* Z_Construct_UScriptStruct_FLandscapeWeightmapUsage()
	{
		UPackage* Outer=Z_Construct_UPackage_Landscape();
		extern uint32 Get_Z_Construct_UScriptStruct_FLandscapeWeightmapUsage_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("LandscapeWeightmapUsage"), sizeof(FLandscapeWeightmapUsage), Get_Z_Construct_UScriptStruct_FLandscapeWeightmapUsage_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LandscapeWeightmapUsage"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FLandscapeWeightmapUsage>, EStructFlags(0x00000005));
			UProperty* NewProp_ChannelUsage = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ChannelUsage"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ChannelUsage, FLandscapeWeightmapUsage), 0x0000000000080008, Z_Construct_UClass_ULandscapeComponent_NoRegister());
			NewProp_ChannelUsage->ArrayDim = CPP_ARRAY_DIM(ChannelUsage, FLandscapeWeightmapUsage);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeProxy.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Structure storing channel usage for weightmap textures"));
			MetaData->SetValue(NewProp_ChannelUsage, TEXT("EditInline"), TEXT("true"));
			MetaData->SetValue(NewProp_ChannelUsage, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeProxy.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FLandscapeWeightmapUsage_CRC() { return 2119068938U; }
	UFunction* Z_Construct_UFunction_ALandscapeProxy_ChangeLODDistanceFactor()
	{
		struct LandscapeProxy_eventChangeLODDistanceFactor_Parms
		{
			float InLODDistanceFactor;
		};
		UObject* Outer=Z_Construct_UClass_ALandscapeProxy();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ChangeLODDistanceFactor"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020400, 65535, sizeof(LandscapeProxy_eventChangeLODDistanceFactor_Parms));
			UProperty* NewProp_InLODDistanceFactor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InLODDistanceFactor"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InLODDistanceFactor, LandscapeProxy_eventChangeLODDistanceFactor_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Rendering"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeProxy.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Change the Level of Detail distance factor"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ALandscapeProxy_EditorApplySpline()
	{
		struct LandscapeProxy_eventEditorApplySpline_Parms
		{
			USplineComponent* InSplineComponent;
			float StartWidth;
			float EndWidth;
			float StartSideFalloff;
			float EndSideFalloff;
			float StartRoll;
			float EndRoll;
			int32 NumSubdivisions;
			bool bRaiseHeights;
			bool bLowerHeights;
			ULandscapeLayerInfoObject* PaintLayer;
		};
		UObject* Outer=Z_Construct_UClass_ALandscapeProxy();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EditorApplySpline"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(LandscapeProxy_eventEditorApplySpline_Parms));
			UProperty* NewProp_PaintLayer = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PaintLayer"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(PaintLayer, LandscapeProxy_eventEditorApplySpline_Parms), 0x0000000000000080, Z_Construct_UClass_ULandscapeLayerInfoObject_NoRegister());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLowerHeights, LandscapeProxy_eventEditorApplySpline_Parms, bool);
			UProperty* NewProp_bLowerHeights = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bLowerHeights"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLowerHeights, LandscapeProxy_eventEditorApplySpline_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bLowerHeights, LandscapeProxy_eventEditorApplySpline_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bRaiseHeights, LandscapeProxy_eventEditorApplySpline_Parms, bool);
			UProperty* NewProp_bRaiseHeights = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bRaiseHeights"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bRaiseHeights, LandscapeProxy_eventEditorApplySpline_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bRaiseHeights, LandscapeProxy_eventEditorApplySpline_Parms), sizeof(bool), true);
			UProperty* NewProp_NumSubdivisions = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NumSubdivisions"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(NumSubdivisions, LandscapeProxy_eventEditorApplySpline_Parms), 0x0000000000000080);
			UProperty* NewProp_EndRoll = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("EndRoll"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(EndRoll, LandscapeProxy_eventEditorApplySpline_Parms), 0x0000000000000080);
			UProperty* NewProp_StartRoll = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("StartRoll"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(StartRoll, LandscapeProxy_eventEditorApplySpline_Parms), 0x0000000000000080);
			UProperty* NewProp_EndSideFalloff = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("EndSideFalloff"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(EndSideFalloff, LandscapeProxy_eventEditorApplySpline_Parms), 0x0000000000000080);
			UProperty* NewProp_StartSideFalloff = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("StartSideFalloff"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(StartSideFalloff, LandscapeProxy_eventEditorApplySpline_Parms), 0x0000000000000080);
			UProperty* NewProp_EndWidth = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("EndWidth"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(EndWidth, LandscapeProxy_eventEditorApplySpline_Parms), 0x0000000000000080);
			UProperty* NewProp_StartWidth = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("StartWidth"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(StartWidth, LandscapeProxy_eventEditorApplySpline_Parms), 0x0000000000000080);
			UProperty* NewProp_InSplineComponent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InSplineComponent"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(InSplineComponent, LandscapeProxy_eventEditorApplySpline_Parms), 0x0000000000080080, Z_Construct_UClass_USplineComponent_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Landscape Editor"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bLowerHeights"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bRaiseHeights"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_EndRoll"), TEXT("0.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_EndSideFalloff"), TEXT("200.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_EndWidth"), TEXT("200.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_NumSubdivisions"), TEXT("20"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_StartRoll"), TEXT("0.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_StartSideFalloff"), TEXT("200.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_StartWidth"), TEXT("200.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeProxy.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Deform landscape using a given spline\n@param StartWidth - Width of the spline at the start node, in Spline Component local space\n@param EndWidth   - Width of the spline at the end node, in Spline Component local space\n@param StartSideFalloff - Width of the falloff at either side of the spline at the start node, in Spline Component local space\n@param EndSideFalloff - Width of the falloff at either side of the spline at the end node, in Spline Component local space\n@param StartRoll - Roll applied to the spline at the start node, in degrees. 0 is flat\n@param EndRoll - Roll applied to the spline at the end node, in degrees. 0 is flat\n@param NumSubdivisions - Number of triangles to place along the spline when applying it to the landscape. Higher numbers give better results, but setting it too high will be slow and may cause artifacts\n@param bRaiseHeights - Allow the landscape to be raised up to the level of the spline. If both bRaiseHeights and bLowerHeights are false, no height modification of the landscape will be performed\n@param bLowerHeights - Allow the landscape to be lowered down to the level of the spline. If both bRaiseHeights and bLowerHeights are false, no height modification of the landscape will be performed\n@param PaintLayer - LayerInfo to paint, or none to skip painting. The landscape must be configured with the same layer info in one of its layers or this will do nothing!"));
			MetaData->SetValue(NewProp_InSplineComponent, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_ALandscapeProxy_NoRegister()
	{
		return ALandscapeProxy::StaticClass();
	}
	UClass* Z_Construct_UClass_ALandscapeProxy()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AActor();
			Z_Construct_UPackage_Landscape();
			OuterClass = ALandscapeProxy::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880280;

				OuterClass->LinkChild(Z_Construct_UFunction_ALandscapeProxy_ChangeLODDistanceFactor());
				OuterClass->LinkChild(Z_Construct_UFunction_ALandscapeProxy_EditorApplySpline());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_MaxPaintedLayersPerComponent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxPaintedLayersPerComponent"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MaxPaintedLayersPerComponent, ALandscapeProxy), 0x0000000800000001);
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_LODFalloff = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LODFalloff"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(LODFalloff, ALandscapeProxy), 0x0000000000000001, Z_Construct_UEnum_Landscape_ELandscapeLODFalloff());
				UProperty* NewProp_NavigationGeometryGatheringMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NavigationGeometryGatheringMode"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(NavigationGeometryGatheringMode, ALandscapeProxy), 0x0000040000000001, Z_Construct_UEnum_Engine_ENavDataGatheringMode());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUsedForNavigation, ALandscapeProxy, uint8);
				UProperty* NewProp_bUsedForNavigation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUsedForNavigation"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUsedForNavigation, ALandscapeProxy), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bUsedForNavigation, ALandscapeProxy), sizeof(uint8), false);
				UProperty* NewProp_NumSubsections = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NumSubsections"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(NumSubsections, ALandscapeProxy), 0x0000000000000000);
				UProperty* NewProp_SubsectionSizeQuads = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SubsectionSizeQuads"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(SubsectionSizeQuads, ALandscapeProxy), 0x0000000000000000);
				UProperty* NewProp_ComponentSizeQuads = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ComponentSizeQuads"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ComponentSizeQuads, ALandscapeProxy), 0x0000000000000000);
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_EditorLayerSettings = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EditorLayerSettings"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(EditorLayerSettings, ALandscapeProxy), 0x0000000800000000);
				UProperty* NewProp_EditorLayerSettings_Inner = new(EC_InternalUseOnlyConstructor, NewProp_EditorLayerSettings, TEXT("EditorLayerSettings"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000800000000, Z_Construct_UScriptStruct_FLandscapeEditorLayerSettings());
				UProperty* NewProp_ReimportHeightmapFilePath = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ReimportHeightmapFilePath"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ReimportHeightmapFilePath, ALandscapeProxy), 0x0000000800000000);
				UProperty* NewProp_EditorCachedLayerInfos = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EditorCachedLayerInfos"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(EditorCachedLayerInfos_DEPRECATED, ALandscapeProxy), 0x0000000820000000);
				UProperty* NewProp_EditorCachedLayerInfos_Inner = new(EC_InternalUseOnlyConstructor, NewProp_EditorCachedLayerInfos, TEXT("EditorCachedLayerInfos"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000820000000, Z_Construct_UClass_ULandscapeLayerInfoObject_NoRegister());
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_BodyInstance = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BodyInstance"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(BodyInstance, ALandscapeProxy), 0x0000000000000015, Z_Construct_UScriptStruct_FBodyInstance());
				UProperty* NewProp_CollisionThickness = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CollisionThickness"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(CollisionThickness, ALandscapeProxy), 0x0000000000000001);
				UProperty* NewProp_CollisionMipLevel = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CollisionMipLevel"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(CollisionMipLevel, ALandscapeProxy), 0x0000000000000001);
				UProperty* NewProp_LightmassSettings = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LightmassSettings"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LightmassSettings, ALandscapeProxy), 0x0000000000000001, Z_Construct_UScriptStruct_FLightmassPrimitiveSettings());
#if WITH_EDITORONLY_DATA
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsMovingToLevel, ALandscapeProxy, uint8);
				UProperty* NewProp_bIsMovingToLevel = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsMovingToLevel"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsMovingToLevel, ALandscapeProxy), 0x0000000800002000, CPP_BOOL_PROPERTY_BITMASK(bIsMovingToLevel, ALandscapeProxy), sizeof(uint8), false);
#endif // WITH_EDITORONLY_DATA
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsProxy, ALandscapeProxy, uint8);
				UProperty* NewProp_bIsProxy = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsProxy"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsProxy, ALandscapeProxy), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bIsProxy, ALandscapeProxy), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCastFarShadow, ALandscapeProxy, uint8);
				UProperty* NewProp_bCastFarShadow = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bCastFarShadow"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCastFarShadow, ALandscapeProxy), 0x0000040000000001, CPP_BOOL_PROPERTY_BITMASK(bCastFarShadow, ALandscapeProxy), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCastShadowAsTwoSided, ALandscapeProxy, uint8);
				UProperty* NewProp_bCastShadowAsTwoSided = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bCastShadowAsTwoSided"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCastShadowAsTwoSided, ALandscapeProxy), 0x0000040000000001, CPP_BOOL_PROPERTY_BITMASK(bCastShadowAsTwoSided, ALandscapeProxy), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCastStaticShadow, ALandscapeProxy, uint8);
				UProperty* NewProp_bCastStaticShadow = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bCastStaticShadow"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCastStaticShadow, ALandscapeProxy), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bCastStaticShadow, ALandscapeProxy), sizeof(uint8), false);
				UProperty* NewProp_LandscapeActor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LandscapeActor"), RF_Public|RF_Transient|RF_Native) ULazyObjectProperty(CPP_PROPERTY_BASE(LandscapeActor, ALandscapeProxy), 0x0004000000000001, Z_Construct_UClass_ALandscape_NoRegister());
				UProperty* NewProp_StaticLightingResolution = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StaticLightingResolution"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(StaticLightingResolution, ALandscapeProxy), 0x0000000000000001);
				UProperty* NewProp_FoliageComponents = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FoliageComponents"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(FoliageComponents, ALandscapeProxy), 0x0000008000202008);
				UProperty* NewProp_FoliageComponents_Inner = new(EC_InternalUseOnlyConstructor, NewProp_FoliageComponents, TEXT("FoliageComponents"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000080008, Z_Construct_UClass_UHierarchicalInstancedStaticMeshComponent_NoRegister());
				UProperty* NewProp_CollisionComponents = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CollisionComponents"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(CollisionComponents, ALandscapeProxy), 0x0000008000000008);
				UProperty* NewProp_CollisionComponents_Inner = new(EC_InternalUseOnlyConstructor, NewProp_CollisionComponents, TEXT("CollisionComponents"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000080008, Z_Construct_UClass_ULandscapeHeightfieldCollisionComponent_NoRegister());
				UProperty* NewProp_LandscapeComponents = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LandscapeComponents"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(LandscapeComponents, ALandscapeProxy), 0x0000008000000008);
				UProperty* NewProp_LandscapeComponents_Inner = new(EC_InternalUseOnlyConstructor, NewProp_LandscapeComponents, TEXT("LandscapeComponents"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000080008, Z_Construct_UClass_ULandscapeComponent_NoRegister());
				UProperty* NewProp_LODDistanceFactor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LODDistanceFactor"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(LODDistanceFactor, ALandscapeProxy), 0x0000000000000001);
				UProperty* NewProp_LandscapeHoleMaterial = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LandscapeHoleMaterial"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(LandscapeHoleMaterial, ALandscapeProxy), 0x0000040000000001, Z_Construct_UClass_UMaterialInterface_NoRegister());
				UProperty* NewProp_LandscapeMaterial = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LandscapeMaterial"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(LandscapeMaterial, ALandscapeProxy), 0x0000000000000001, Z_Construct_UClass_UMaterialInterface_NoRegister());
				UProperty* NewProp_StreamingDistanceMultiplier = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StreamingDistanceMultiplier"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(StreamingDistanceMultiplier, ALandscapeProxy), 0x0000000000000001);
				UProperty* NewProp_DefaultPhysMaterial = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultPhysMaterial"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(DefaultPhysMaterial, ALandscapeProxy), 0x0000000000000001, Z_Construct_UClass_UPhysicalMaterial_NoRegister());
				UProperty* NewProp_StaticLightingLOD = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StaticLightingLOD"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(StaticLightingLOD, ALandscapeProxy), 0x0000000000000001);
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_ExportLOD = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ExportLOD"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ExportLOD, ALandscapeProxy), 0x0000000800000001);
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_MaxLODLevel = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxLODLevel"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MaxLODLevel, ALandscapeProxy), 0x0000000000000001);
#if WITH_EDITORONLY_DATA
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bStaticSectionOffset, ALandscapeProxy, bool);
				UProperty* NewProp_bStaticSectionOffset = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bStaticSectionOffset"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bStaticSectionOffset, ALandscapeProxy), 0x0000000800000000, CPP_BOOL_PROPERTY_BITMASK(bStaticSectionOffset, ALandscapeProxy), sizeof(bool), true);
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_LandscapeSectionOffset = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LandscapeSectionOffset"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LandscapeSectionOffset, ALandscapeProxy), 0x0000000000000000, Z_Construct_UScriptStruct_FIntPoint());
				UProperty* NewProp_LandscapeGuid = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LandscapeGuid"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LandscapeGuid, ALandscapeProxy), 0x0000080000000000, Z_Construct_UScriptStruct_FGuid());
				UProperty* NewProp_SplineComponent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SplineComponent"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(SplineComponent, ALandscapeProxy), 0x0000000000080008, Z_Construct_UClass_ULandscapeSplinesComponent_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ALandscapeProxy_ChangeLODDistanceFactor()); // 553654224
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ALandscapeProxy_EditorApplySpline()); // 2069221728
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Display Attachment Physics Debug LOD"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("LandscapeProxy.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("false"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeProxy.h"));
				MetaData->SetValue(NewProp_MaxPaintedLayersPerComponent, TEXT("Category"), TEXT("Landscape"));
				MetaData->SetValue(NewProp_MaxPaintedLayersPerComponent, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeProxy.h"));
				MetaData->SetValue(NewProp_LODFalloff, TEXT("Category"), TEXT("LOD"));
				MetaData->SetValue(NewProp_LODFalloff, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeProxy.h"));
				MetaData->SetValue(NewProp_NavigationGeometryGatheringMode, TEXT("Category"), TEXT("Landscape"));
				MetaData->SetValue(NewProp_NavigationGeometryGatheringMode, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeProxy.h"));
				MetaData->SetValue(NewProp_bUsedForNavigation, TEXT("Category"), TEXT("Landscape"));
				MetaData->SetValue(NewProp_bUsedForNavigation, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeProxy.h"));
				MetaData->SetValue(NewProp_bUsedForNavigation, TEXT("ToolTip"), TEXT("Hints navigation system whether this landscape will ever be navigated on. true by default, but make sure to set it to false for faraway, background landscapes"));
				MetaData->SetValue(NewProp_NumSubsections, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeProxy.h"));
				MetaData->SetValue(NewProp_NumSubsections, TEXT("ToolTip"), TEXT("Number of quads for a subsection of a component. SubsectionSizeQuads+1 must be a power of two."));
				MetaData->SetValue(NewProp_SubsectionSizeQuads, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeProxy.h"));
				MetaData->SetValue(NewProp_SubsectionSizeQuads, TEXT("ToolTip"), TEXT("Total number of quads in each component"));
				MetaData->SetValue(NewProp_ComponentSizeQuads, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeProxy.h"));
				MetaData->SetValue(NewProp_ComponentSizeQuads, TEXT("ToolTip"), TEXT("Data set at creation time"));
				MetaData->SetValue(NewProp_EditorLayerSettings, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeProxy.h"));
				MetaData->SetValue(NewProp_ReimportHeightmapFilePath, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeProxy.h"));
				MetaData->SetValue(NewProp_EditorCachedLayerInfos, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeProxy.h"));
				MetaData->SetValue(NewProp_BodyInstance, TEXT("Category"), TEXT("Collision"));
				MetaData->SetValue(NewProp_BodyInstance, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeProxy.h"));
				MetaData->SetValue(NewProp_BodyInstance, TEXT("ShowOnlyInnerProperties"), TEXT(""));
				MetaData->SetValue(NewProp_BodyInstance, TEXT("ToolTip"), TEXT("Collision profile settings for this landscape"));
				MetaData->SetValue(NewProp_CollisionThickness, TEXT("Category"), TEXT("Landscape"));
				MetaData->SetValue(NewProp_CollisionThickness, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeProxy.h"));
				MetaData->SetValue(NewProp_CollisionThickness, TEXT("ToolTip"), TEXT("Thickness of the collision surface, in unreal units"));
				MetaData->SetValue(NewProp_CollisionMipLevel, TEXT("Category"), TEXT("Landscape"));
				MetaData->SetValue(NewProp_CollisionMipLevel, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeProxy.h"));
				MetaData->SetValue(NewProp_CollisionMipLevel, TEXT("ToolTip"), TEXT("Landscape LOD to use for collision tests. Higher numbers use less memory and process faster, but are much less accurate"));
				MetaData->SetValue(NewProp_LightmassSettings, TEXT("Category"), TEXT("Lightmass"));
				MetaData->SetValue(NewProp_LightmassSettings, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeProxy.h"));
				MetaData->SetValue(NewProp_LightmassSettings, TEXT("ToolTip"), TEXT("The Lightmass settings for this object."));
				MetaData->SetValue(NewProp_bIsMovingToLevel, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeProxy.h"));
				MetaData->SetValue(NewProp_bIsProxy, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeProxy.h"));
				MetaData->SetValue(NewProp_bCastFarShadow, TEXT("Category"), TEXT("Lighting"));
				MetaData->SetValue(NewProp_bCastFarShadow, TEXT("DisplayName"), TEXT("Far Shadow"));
				MetaData->SetValue(NewProp_bCastFarShadow, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeProxy.h"));
				MetaData->SetValue(NewProp_bCastFarShadow, TEXT("ToolTip"), TEXT("Whether this primitive should cast shadows in the far shadow cascades."));
				MetaData->SetValue(NewProp_bCastShadowAsTwoSided, TEXT("Category"), TEXT("Lighting"));
				MetaData->SetValue(NewProp_bCastShadowAsTwoSided, TEXT("DisplayName"), TEXT("Shadow Two Sided"));
				MetaData->SetValue(NewProp_bCastShadowAsTwoSided, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeProxy.h"));
				MetaData->SetValue(NewProp_bCastShadowAsTwoSided, TEXT("ToolTip"), TEXT("Whether this primitive should cast dynamic shadows as if it were a two sided material."));
				MetaData->SetValue(NewProp_bCastStaticShadow, TEXT("Category"), TEXT("Lighting"));
				MetaData->SetValue(NewProp_bCastStaticShadow, TEXT("DisplayName"), TEXT("Static Shadow"));
				MetaData->SetValue(NewProp_bCastStaticShadow, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeProxy.h"));
				MetaData->SetValue(NewProp_LandscapeActor, TEXT("Category"), TEXT("LandscapeProxy"));
				MetaData->SetValue(NewProp_LandscapeActor, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeProxy.h"));
				MetaData->SetValue(NewProp_StaticLightingResolution, TEXT("Category"), TEXT("Lighting"));
				MetaData->SetValue(NewProp_StaticLightingResolution, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeProxy.h"));
				MetaData->SetValue(NewProp_StaticLightingResolution, TEXT("ToolTip"), TEXT("The resolution to cache lighting at, in texels/quad in one axis\nTotal resolution would be changed by StaticLightingResolution*StaticLightingResolution\nAutomatically calculate proper value for removing seams"));
				MetaData->SetValue(NewProp_FoliageComponents, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_FoliageComponents, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeProxy.h"));
				MetaData->SetValue(NewProp_CollisionComponents, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_CollisionComponents, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeProxy.h"));
				MetaData->SetValue(NewProp_CollisionComponents, TEXT("ToolTip"), TEXT("Array of LandscapeHeightfieldCollisionComponent"));
				MetaData->SetValue(NewProp_LandscapeComponents, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_LandscapeComponents, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeProxy.h"));
				MetaData->SetValue(NewProp_LandscapeComponents, TEXT("ToolTip"), TEXT("The array of LandscapeComponent that are used by the landscape"));
				MetaData->SetValue(NewProp_LODDistanceFactor, TEXT("Category"), TEXT("LOD"));
				MetaData->SetValue(NewProp_LODDistanceFactor, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeProxy.h"));
				MetaData->SetValue(NewProp_LandscapeHoleMaterial, TEXT("Category"), TEXT("Landscape"));
				MetaData->SetValue(NewProp_LandscapeHoleMaterial, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeProxy.h"));
				MetaData->SetValue(NewProp_LandscapeHoleMaterial, TEXT("ToolTip"), TEXT("Material used to render landscape components with holes. If not set, LandscapeMaterial will be used (blend mode will be overridden to Masked if it is set to Opaque)"));
				MetaData->SetValue(NewProp_LandscapeMaterial, TEXT("Category"), TEXT("Landscape"));
				MetaData->SetValue(NewProp_LandscapeMaterial, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeProxy.h"));
				MetaData->SetValue(NewProp_LandscapeMaterial, TEXT("ToolTip"), TEXT("Combined material used to render the landscape"));
				MetaData->SetValue(NewProp_StreamingDistanceMultiplier, TEXT("Category"), TEXT("Landscape"));
				MetaData->SetValue(NewProp_StreamingDistanceMultiplier, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeProxy.h"));
				MetaData->SetValue(NewProp_StreamingDistanceMultiplier, TEXT("ToolTip"), TEXT("Allows artists to adjust the distance where textures using UV 0 are streamed in/out.\n1.0 is the default, whereas a higher value increases the streamed-in resolution.\nValue can be < 0 (from legcay content, or code changes)"));
				MetaData->SetValue(NewProp_DefaultPhysMaterial, TEXT("Category"), TEXT("Landscape"));
				MetaData->SetValue(NewProp_DefaultPhysMaterial, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeProxy.h"));
				MetaData->SetValue(NewProp_DefaultPhysMaterial, TEXT("ToolTip"), TEXT("Default physical material, used when no per-layer values physical materials"));
				MetaData->SetValue(NewProp_StaticLightingLOD, TEXT("Category"), TEXT("Lighting"));
				MetaData->SetValue(NewProp_StaticLightingLOD, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeProxy.h"));
				MetaData->SetValue(NewProp_StaticLightingLOD, TEXT("ToolTip"), TEXT("LOD level to use when running lightmass (increase to 1 or 2 for large landscapes to stop lightmass crashing)"));
				MetaData->SetValue(NewProp_ExportLOD, TEXT("Category"), TEXT("LOD"));
				MetaData->SetValue(NewProp_ExportLOD, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeProxy.h"));
				MetaData->SetValue(NewProp_ExportLOD, TEXT("ToolTip"), TEXT("LOD level to use when exporting the landscape to obj or FBX"));
				MetaData->SetValue(NewProp_MaxLODLevel, TEXT("Category"), TEXT("LOD"));
				MetaData->SetValue(NewProp_MaxLODLevel, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeProxy.h"));
				MetaData->SetValue(NewProp_MaxLODLevel, TEXT("ToolTip"), TEXT("Max LOD level to use when rendering, -1 means the max available"));
				MetaData->SetValue(NewProp_bStaticSectionOffset, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeProxy.h"));
				MetaData->SetValue(NewProp_bStaticSectionOffset, TEXT("ToolTip"), TEXT("To support legacy landscape section offset modification under world composition mode"));
				MetaData->SetValue(NewProp_LandscapeSectionOffset, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeProxy.h"));
				MetaData->SetValue(NewProp_LandscapeSectionOffset, TEXT("ToolTip"), TEXT("Offset in quads from global components grid origin (in quads) *"));
				MetaData->SetValue(NewProp_LandscapeGuid, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeProxy.h"));
				MetaData->SetValue(NewProp_LandscapeGuid, TEXT("ToolTip"), TEXT("Guid for LandscapeEditorInfo *"));
				MetaData->SetValue(NewProp_SplineComponent, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_SplineComponent, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeProxy.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ALandscapeProxy(Z_Construct_UClass_ALandscapeProxy, TEXT("ALandscapeProxy"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(ALandscapeProxy);
	UEnum* Z_Construct_UEnum_Landscape_ELandscapeSetupErrors()
	{
		UPackage* Outer=Z_Construct_UPackage_Landscape();
		extern uint32 Get_Z_Construct_UEnum_Landscape_ELandscapeSetupErrors_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ELandscapeSetupErrors"), 0, Get_Z_Construct_UEnum_Landscape_ELandscapeSetupErrors_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ELandscapeSetupErrors"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("LSE_None")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("LSE_NoLandscapeInfo")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("LSE_CollsionXY")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("LSE_NoLayerInfo")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("LSE_MAX")), 4));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("LSE_CollsionXY.ToolTip"), TEXT("There was already component with same X,Y."));
			MetaData->SetValue(ReturnEnum, TEXT("LSE_NoLandscapeInfo.ToolTip"), TEXT("No Landscape Info available."));
			MetaData->SetValue(ReturnEnum, TEXT("LSE_NoLayerInfo.ToolTip"), TEXT("No Layer Info, need to add proper layers."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Landscape.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Landscape_ELandscapeSetupErrors_CRC() { return 349928196U; }
	UClass* Z_Construct_UClass_ALandscape_NoRegister()
	{
		return ALandscape::StaticClass();
	}
	UClass* Z_Construct_UClass_ALandscape()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_ALandscapeProxy();
			Z_Construct_UPackage_Landscape();
			OuterClass = ALandscape::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("LandscapeProxy Attachment Physics Debug"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Landscape.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Landscape.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ALandscape(Z_Construct_UClass_ALandscape, TEXT("ALandscape"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(ALandscape);
	UEnum* Z_Construct_UEnum_Landscape_LandscapeSplineMeshOrientation()
	{
		UPackage* Outer=Z_Construct_UPackage_Landscape();
		extern uint32 Get_Z_Construct_UEnum_Landscape_LandscapeSplineMeshOrientation_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("LandscapeSplineMeshOrientation"), 0, Get_Z_Construct_UEnum_Landscape_LandscapeSplineMeshOrientation_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LandscapeSplineMeshOrientation"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("LSMO_XUp")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("LSMO_YUp")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("LSMO_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplineSegment.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Deprecated"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Landscape_LandscapeSplineMeshOrientation_CRC() { return 933763522U; }
	UScriptStruct* Z_Construct_UScriptStruct_FLandscapeSplineMeshEntry()
	{
		UPackage* Outer=Z_Construct_UPackage_Landscape();
		extern uint32 Get_Z_Construct_UScriptStruct_FLandscapeSplineMeshEntry_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("LandscapeSplineMeshEntry"), sizeof(FLandscapeSplineMeshEntry), Get_Z_Construct_UScriptStruct_FLandscapeSplineMeshEntry_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LandscapeSplineMeshEntry"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FLandscapeSplineMeshEntry>, EStructFlags(0x00000001));
			UProperty* NewProp_UpAxis = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UpAxis"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(UpAxis, FLandscapeSplineMeshEntry), 0x0000000000000001, Z_Construct_UEnum_Engine_ESplineMeshAxis());
			UProperty* NewProp_ForwardAxis = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ForwardAxis"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(ForwardAxis, FLandscapeSplineMeshEntry), 0x0000000000000001, Z_Construct_UEnum_Engine_ESplineMeshAxis());
			UProperty* NewProp_Orientation = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Orientation"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(Orientation_DEPRECATED, FLandscapeSplineMeshEntry), 0x0000000020000000, Z_Construct_UEnum_Landscape_LandscapeSplineMeshOrientation());
			UProperty* NewProp_Scale = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Scale"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Scale, FLandscapeSplineMeshEntry), 0x0000000000000001, Z_Construct_UScriptStruct_FVector());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bScaleToWidth, FLandscapeSplineMeshEntry, uint8);
			UProperty* NewProp_bScaleToWidth = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bScaleToWidth"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bScaleToWidth, FLandscapeSplineMeshEntry), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bScaleToWidth, FLandscapeSplineMeshEntry), sizeof(uint8), false);
			UProperty* NewProp_CenterAdjust = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CenterAdjust"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(CenterAdjust, FLandscapeSplineMeshEntry), 0x0000040000000001, Z_Construct_UScriptStruct_FVector2D());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCenterH, FLandscapeSplineMeshEntry, uint8);
			UProperty* NewProp_bCenterH = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bCenterH"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCenterH, FLandscapeSplineMeshEntry), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bCenterH, FLandscapeSplineMeshEntry), sizeof(uint8), false);
			UProperty* NewProp_MaterialOverrides = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MaterialOverrides"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(MaterialOverrides, FLandscapeSplineMeshEntry), 0x0000040000000001);
			UProperty* NewProp_MaterialOverrides_Inner = new(EC_InternalUseOnlyConstructor, NewProp_MaterialOverrides, TEXT("MaterialOverrides"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UMaterialInterface_NoRegister());
			UProperty* NewProp_Mesh = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Mesh"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Mesh, FLandscapeSplineMeshEntry), 0x0000000000000001, Z_Construct_UClass_UStaticMesh_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplineSegment.h"));
			MetaData->SetValue(NewProp_UpAxis, TEXT("Category"), TEXT("LandscapeSplineMeshEntry"));
			MetaData->SetValue(NewProp_UpAxis, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplineSegment.h"));
			MetaData->SetValue(NewProp_UpAxis, TEXT("ToolTip"), TEXT("Chooses the up axis for the spline mesh orientation"));
			MetaData->SetValue(NewProp_ForwardAxis, TEXT("Category"), TEXT("LandscapeSplineMeshEntry"));
			MetaData->SetValue(NewProp_ForwardAxis, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplineSegment.h"));
			MetaData->SetValue(NewProp_ForwardAxis, TEXT("ToolTip"), TEXT("Chooses the forward axis for the spline mesh orientation"));
			MetaData->SetValue(NewProp_Orientation, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplineSegment.h"));
			MetaData->SetValue(NewProp_Orientation, TEXT("ToolTip"), TEXT("Orientation of the spline mesh, X=Up or Y=Up"));
			MetaData->SetValue(NewProp_Scale, TEXT("Category"), TEXT("LandscapeSplineMeshEntry"));
			MetaData->SetValue(NewProp_Scale, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplineSegment.h"));
			MetaData->SetValue(NewProp_Scale, TEXT("ToolTip"), TEXT("Scale of the spline mesh, (Z=Forwards)"));
			MetaData->SetValue(NewProp_bScaleToWidth, TEXT("Category"), TEXT("LandscapeSplineMeshEntry"));
			MetaData->SetValue(NewProp_bScaleToWidth, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplineSegment.h"));
			MetaData->SetValue(NewProp_bScaleToWidth, TEXT("ToolTip"), TEXT("Whether to scale the mesh to fit the width of the spline"));
			MetaData->SetValue(NewProp_CenterAdjust, TEXT("Category"), TEXT("LandscapeSplineMeshEntry"));
			MetaData->SetValue(NewProp_CenterAdjust, TEXT("DisplayName"), TEXT("Center Adjust"));
			MetaData->SetValue(NewProp_CenterAdjust, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplineSegment.h"));
			MetaData->SetValue(NewProp_CenterAdjust, TEXT("ToolTip"), TEXT("Tweak to center the mesh correctly on the spline"));
			MetaData->SetValue(NewProp_bCenterH, TEXT("Category"), TEXT("LandscapeSplineMeshEntry"));
			MetaData->SetValue(NewProp_bCenterH, TEXT("DisplayName"), TEXT("Center Horizontally"));
			MetaData->SetValue(NewProp_bCenterH, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplineSegment.h"));
			MetaData->SetValue(NewProp_bCenterH, TEXT("ToolTip"), TEXT("Whether to automatically center the mesh horizontally on the spline"));
			MetaData->SetValue(NewProp_MaterialOverrides, TEXT("Category"), TEXT("LandscapeSplineMeshEntry"));
			MetaData->SetValue(NewProp_MaterialOverrides, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplineSegment.h"));
			MetaData->SetValue(NewProp_MaterialOverrides, TEXT("ToolTip"), TEXT("Overrides mesh's materials"));
			MetaData->SetValue(NewProp_Mesh, TEXT("Category"), TEXT("LandscapeSplineMeshEntry"));
			MetaData->SetValue(NewProp_Mesh, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplineSegment.h"));
			MetaData->SetValue(NewProp_Mesh, TEXT("ToolTip"), TEXT("Mesh to use on the spline"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FLandscapeSplineMeshEntry_CRC() { return 3359544207U; }
	UScriptStruct* Z_Construct_UScriptStruct_FLandscapeSplineSegmentConnection()
	{
		UPackage* Outer=Z_Construct_UPackage_Landscape();
		extern uint32 Get_Z_Construct_UScriptStruct_FLandscapeSplineSegmentConnection_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("LandscapeSplineSegmentConnection"), sizeof(FLandscapeSplineSegmentConnection), Get_Z_Construct_UScriptStruct_FLandscapeSplineSegmentConnection_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LandscapeSplineSegmentConnection"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FLandscapeSplineSegmentConnection>, EStructFlags(0x00000001));
			UProperty* NewProp_SocketName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SocketName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(SocketName, FLandscapeSplineSegmentConnection), 0x0000000000000001);
			UProperty* NewProp_TangentLen = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TangentLen"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(TangentLen, FLandscapeSplineSegmentConnection), 0x0000000000000001);
			UProperty* NewProp_ControlPoint = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ControlPoint"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ControlPoint, FLandscapeSplineSegmentConnection), 0x0000000000000000, Z_Construct_UClass_ULandscapeSplineControlPoint_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplineSegment.h"));
			MetaData->SetValue(NewProp_SocketName, TEXT("Category"), TEXT("LandscapeSplineSegmentConnection"));
			MetaData->SetValue(NewProp_SocketName, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplineSegment.h"));
			MetaData->SetValue(NewProp_SocketName, TEXT("ToolTip"), TEXT("Socket on the control point that we are connected to"));
			MetaData->SetValue(NewProp_TangentLen, TEXT("Category"), TEXT("LandscapeSplineSegmentConnection"));
			MetaData->SetValue(NewProp_TangentLen, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplineSegment.h"));
			MetaData->SetValue(NewProp_TangentLen, TEXT("ToolTip"), TEXT("Tangent length of the connection"));
			MetaData->SetValue(NewProp_ControlPoint, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplineSegment.h"));
			MetaData->SetValue(NewProp_ControlPoint, TEXT("ToolTip"), TEXT("Control point connected to this end of the segment"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FLandscapeSplineSegmentConnection_CRC() { return 4186700491U; }
	UScriptStruct* Z_Construct_UScriptStruct_FLandscapeSplineInterpPoint()
	{
		UPackage* Outer=Z_Construct_UPackage_Landscape();
		extern uint32 Get_Z_Construct_UScriptStruct_FLandscapeSplineInterpPoint_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("LandscapeSplineInterpPoint"), sizeof(FLandscapeSplineInterpPoint), Get_Z_Construct_UScriptStruct_FLandscapeSplineInterpPoint_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LandscapeSplineInterpPoint"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FLandscapeSplineInterpPoint>, EStructFlags(0x00000001));
			UProperty* NewProp_StartEndFalloff = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("StartEndFalloff"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(StartEndFalloff, FLandscapeSplineInterpPoint), 0x0000000000000000);
			UProperty* NewProp_FalloffRight = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("FalloffRight"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(FalloffRight, FLandscapeSplineInterpPoint), 0x0000000000000000, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_FalloffLeft = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("FalloffLeft"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(FalloffLeft, FLandscapeSplineInterpPoint), 0x0000000000000000, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Right = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Right"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Right, FLandscapeSplineInterpPoint), 0x0000000000000000, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Left = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Left"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Left, FLandscapeSplineInterpPoint), 0x0000000000000000, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Center = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Center"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Center, FLandscapeSplineInterpPoint), 0x0000000000000000, Z_Construct_UScriptStruct_FVector());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplineSegment.h"));
			MetaData->SetValue(NewProp_StartEndFalloff, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplineSegment.h"));
			MetaData->SetValue(NewProp_StartEndFalloff, TEXT("ToolTip"), TEXT("Start/End Falloff fraction"));
			MetaData->SetValue(NewProp_FalloffRight, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplineSegment.h"));
			MetaData->SetValue(NewProp_FalloffRight, TEXT("ToolTip"), TEXT("Right FalloffPoint"));
			MetaData->SetValue(NewProp_FalloffLeft, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplineSegment.h"));
			MetaData->SetValue(NewProp_FalloffLeft, TEXT("ToolTip"), TEXT("Left Falloff Point"));
			MetaData->SetValue(NewProp_Right, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplineSegment.h"));
			MetaData->SetValue(NewProp_Right, TEXT("ToolTip"), TEXT("Right Point"));
			MetaData->SetValue(NewProp_Left, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplineSegment.h"));
			MetaData->SetValue(NewProp_Left, TEXT("ToolTip"), TEXT("Left Point"));
			MetaData->SetValue(NewProp_Center, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplineSegment.h"));
			MetaData->SetValue(NewProp_Center, TEXT("ToolTip"), TEXT("Center Point"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FLandscapeSplineInterpPoint_CRC() { return 1800604223U; }
	UClass* Z_Construct_UClass_ULandscapeSplineSegment_NoRegister()
	{
		return ULandscapeSplineSegment::StaticClass();
	}
	UClass* Z_Construct_UClass_ULandscapeSplineSegment()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Landscape();
			OuterClass = ULandscapeSplineSegment::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_ModificationKey = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ModificationKey"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ModificationKey, ULandscapeSplineSegment), 0x0000c80800000000, Z_Construct_UScriptStruct_FGuid());
				UProperty* NewProp_ForeignWorlds = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ForeignWorlds"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ForeignWorlds, ULandscapeSplineSegment), 0x0004c80800000000);
				UProperty* NewProp_ForeignWorlds_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ForeignWorlds, TEXT("ForeignWorlds"), RF_Public|RF_Transient|RF_Native) UAssetObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0004000800000000, Z_Construct_UClass_UWorld_NoRegister());
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_LocalMeshComponents = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LocalMeshComponents"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(LocalMeshComponents, ULandscapeSplineSegment), 0x0000488000000008);
				UProperty* NewProp_LocalMeshComponents_Inner = new(EC_InternalUseOnlyConstructor, NewProp_LocalMeshComponents, TEXT("LocalMeshComponents"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000080008, Z_Construct_UClass_USplineMeshComponent_NoRegister());
				UProperty* NewProp_Bounds = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Bounds"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Bounds, ULandscapeSplineSegment), 0x0000080000000000, Z_Construct_UScriptStruct_FBox());
				UProperty* NewProp_Points = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Points"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Points, ULandscapeSplineSegment), 0x0000080000000000);
				UProperty* NewProp_Points_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Points, TEXT("Points"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FLandscapeSplineInterpPoint());
				UProperty* NewProp_SplineInfo = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SplineInfo"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SplineInfo, ULandscapeSplineSegment), 0x0000080000000000, Z_Construct_UScriptStruct_FInterpCurveVector());
#if WITH_EDITORONLY_DATA
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bNavDirty, ULandscapeSplineSegment, uint8);
				UProperty* NewProp_bNavDirty = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bNavDirty"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bNavDirty, ULandscapeSplineSegment), 0x0000080800002000, CPP_BOOL_PROPERTY_BITMASK(bNavDirty, ULandscapeSplineSegment), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSelected, ULandscapeSplineSegment, uint8);
				UProperty* NewProp_bSelected = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bSelected"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSelected, ULandscapeSplineSegment), 0x0000080800002000, CPP_BOOL_PROPERTY_BITMASK(bSelected, ULandscapeSplineSegment), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bPlaceSplineMeshesInStreamingLevels, ULandscapeSplineSegment, uint8);
				UProperty* NewProp_bPlaceSplineMeshesInStreamingLevels = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bPlaceSplineMeshesInStreamingLevels"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bPlaceSplineMeshesInStreamingLevels, ULandscapeSplineSegment), 0x0000040800000001, CPP_BOOL_PROPERTY_BITMASK(bPlaceSplineMeshesInStreamingLevels, ULandscapeSplineSegment), sizeof(uint8), false);
				UProperty* NewProp_TranslucencySortPriority = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TranslucencySortPriority"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(TranslucencySortPriority, ULandscapeSplineSegment), 0x0000040800000001);
				UProperty* NewProp_LDMaxDrawDistance = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LDMaxDrawDistance"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(LDMaxDrawDistance, ULandscapeSplineSegment), 0x0000040800000001);
				UProperty* NewProp_RandomSeed = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RandomSeed"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(RandomSeed, ULandscapeSplineSegment), 0x0000040800000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCastShadow, ULandscapeSplineSegment, uint8);
				UProperty* NewProp_bCastShadow = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bCastShadow"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCastShadow, ULandscapeSplineSegment), 0x0000000800000001, CPP_BOOL_PROPERTY_BITMASK(bCastShadow, ULandscapeSplineSegment), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnableCollision, ULandscapeSplineSegment, uint8);
				UProperty* NewProp_bEnableCollision = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bEnableCollision"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnableCollision, ULandscapeSplineSegment), 0x0000000800000001, CPP_BOOL_PROPERTY_BITMASK(bEnableCollision, ULandscapeSplineSegment), sizeof(uint8), false);
				UProperty* NewProp_SplineMeshes = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SplineMeshes"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(SplineMeshes, ULandscapeSplineSegment), 0x0000000800000001);
				UProperty* NewProp_SplineMeshes_Inner = new(EC_InternalUseOnlyConstructor, NewProp_SplineMeshes, TEXT("SplineMeshes"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000800000000, Z_Construct_UScriptStruct_FLandscapeSplineMeshEntry());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLowerTerrain, ULandscapeSplineSegment, uint8);
				UProperty* NewProp_bLowerTerrain = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bLowerTerrain"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLowerTerrain, ULandscapeSplineSegment), 0x0000000800000001, CPP_BOOL_PROPERTY_BITMASK(bLowerTerrain, ULandscapeSplineSegment), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bRaiseTerrain, ULandscapeSplineSegment, uint8);
				UProperty* NewProp_bRaiseTerrain = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bRaiseTerrain"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bRaiseTerrain, ULandscapeSplineSegment), 0x0000000800000001, CPP_BOOL_PROPERTY_BITMASK(bRaiseTerrain, ULandscapeSplineSegment), sizeof(uint8), false);
				UProperty* NewProp_LayerName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LayerName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(LayerName, ULandscapeSplineSegment), 0x0000000800000001);
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_Connections = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Connections"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Connections, ULandscapeSplineSegment), 0x0000000000000041, Z_Construct_UScriptStruct_FLandscapeSplineSegmentConnection());
				NewProp_Connections->ArrayDim = CPP_ARRAY_DIM(Connections, ULandscapeSplineSegment);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("AutoExpandCategories"), TEXT("LandscapeSplineSegment LandscapeSplineMeshes"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("LandscapeSplineSegment.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplineSegment.h"));
				MetaData->SetValue(NewProp_ModificationKey, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplineSegment.h"));
				MetaData->SetValue(NewProp_ModificationKey, TEXT("ToolTip"), TEXT("Key for tracking whether this segment has been modified relative to the mesh components stored in other streaming levels"));
				MetaData->SetValue(NewProp_ForeignWorlds, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplineSegment.h"));
				MetaData->SetValue(NewProp_ForeignWorlds, TEXT("ToolTip"), TEXT("World references for mesh components stored in other streaming levels"));
				MetaData->SetValue(NewProp_LocalMeshComponents, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_LocalMeshComponents, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplineSegment.h"));
				MetaData->SetValue(NewProp_LocalMeshComponents, TEXT("ToolTip"), TEXT("Spline meshes"));
				MetaData->SetValue(NewProp_Bounds, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplineSegment.h"));
				MetaData->SetValue(NewProp_Bounds, TEXT("ToolTip"), TEXT("Bounds of points"));
				MetaData->SetValue(NewProp_Points, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplineSegment.h"));
				MetaData->SetValue(NewProp_Points, TEXT("ToolTip"), TEXT("Spline points"));
				MetaData->SetValue(NewProp_SplineInfo, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplineSegment.h"));
				MetaData->SetValue(NewProp_SplineInfo, TEXT("ToolTip"), TEXT("Actual data for spline."));
				MetaData->SetValue(NewProp_bNavDirty, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplineSegment.h"));
				MetaData->SetValue(NewProp_bSelected, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplineSegment.h"));
				MetaData->SetValue(NewProp_bPlaceSplineMeshesInStreamingLevels, TEXT("Category"), TEXT("LandscapeSplineMeshes"));
				MetaData->SetValue(NewProp_bPlaceSplineMeshesInStreamingLevels, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplineSegment.h"));
				MetaData->SetValue(NewProp_bPlaceSplineMeshesInStreamingLevels, TEXT("ToolTip"), TEXT("Whether spline meshes should be placed in landscape proxy streaming levels (true) or the spline's level (false)"));
				MetaData->SetValue(NewProp_TranslucencySortPriority, TEXT("Category"), TEXT("LandscapeSplineMeshes"));
				MetaData->SetValue(NewProp_TranslucencySortPriority, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplineSegment.h"));
				MetaData->SetValue(NewProp_TranslucencySortPriority, TEXT("ToolTip"), TEXT("Translucent objects with a lower sort priority draw behind objects with a higher priority.\nTranslucent objects with the same priority are rendered from back-to-front based on their bounds origin.\n\nIgnored if the object is not translucent.  The default priority is zero.\nWarning: This should never be set to a non-default value unless you know what you are doing, as it will prevent the renderer from sorting correctly."));
				MetaData->SetValue(NewProp_LDMaxDrawDistance, TEXT("Category"), TEXT("LandscapeSplineMeshes"));
				MetaData->SetValue(NewProp_LDMaxDrawDistance, TEXT("DisplayName"), TEXT("Max Draw Distance"));
				MetaData->SetValue(NewProp_LDMaxDrawDistance, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplineSegment.h"));
				MetaData->SetValue(NewProp_LDMaxDrawDistance, TEXT("ToolTip"), TEXT("Max draw distance for all the mesh pieces used in this spline"));
				MetaData->SetValue(NewProp_RandomSeed, TEXT("Category"), TEXT("LandscapeSplineMeshes"));
				MetaData->SetValue(NewProp_RandomSeed, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplineSegment.h"));
				MetaData->SetValue(NewProp_RandomSeed, TEXT("ToolTip"), TEXT("Random seed used for choosing which order to use spline meshes. Ignored if only one mesh is set."));
				MetaData->SetValue(NewProp_bCastShadow, TEXT("Category"), TEXT("LandscapeSplineMeshes"));
				MetaData->SetValue(NewProp_bCastShadow, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplineSegment.h"));
				MetaData->SetValue(NewProp_bCastShadow, TEXT("ToolTip"), TEXT("Whether the Spline Meshes should cast a shadow."));
				MetaData->SetValue(NewProp_bEnableCollision, TEXT("Category"), TEXT("LandscapeSplineMeshes"));
				MetaData->SetValue(NewProp_bEnableCollision, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplineSegment.h"));
				MetaData->SetValue(NewProp_bEnableCollision, TEXT("ToolTip"), TEXT("Whether to generate collision for the Spline Meshes."));
				MetaData->SetValue(NewProp_SplineMeshes, TEXT("Category"), TEXT("LandscapeSplineMeshes"));
				MetaData->SetValue(NewProp_SplineMeshes, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplineSegment.h"));
				MetaData->SetValue(NewProp_SplineMeshes, TEXT("ToolTip"), TEXT("Spline meshes from this list are used in random order along the spline."));
				MetaData->SetValue(NewProp_bLowerTerrain, TEXT("Category"), TEXT("LandscapeDeformation"));
				MetaData->SetValue(NewProp_bLowerTerrain, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplineSegment.h"));
				MetaData->SetValue(NewProp_bLowerTerrain, TEXT("ToolTip"), TEXT("If the spline is below the terrain, whether to lower the terrain down to the level of the spline when applying it to the landscape."));
				MetaData->SetValue(NewProp_bRaiseTerrain, TEXT("Category"), TEXT("LandscapeDeformation"));
				MetaData->SetValue(NewProp_bRaiseTerrain, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplineSegment.h"));
				MetaData->SetValue(NewProp_bRaiseTerrain, TEXT("ToolTip"), TEXT("If the spline is above the terrain, whether to raise the terrain up to the level of the spline when applying it to the landscape."));
				MetaData->SetValue(NewProp_LayerName, TEXT("Category"), TEXT("LandscapeDeformation"));
				MetaData->SetValue(NewProp_LayerName, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplineSegment.h"));
				MetaData->SetValue(NewProp_LayerName, TEXT("ToolTip"), TEXT("Name of blend layer to paint when applying spline to landscape\nIf \"none\", no layer is painted"));
				MetaData->SetValue(NewProp_Connections, TEXT("Category"), TEXT("LandscapeSplineSegment"));
				MetaData->SetValue(NewProp_Connections, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplineSegment.h"));
				MetaData->SetValue(NewProp_Connections, TEXT("ToolTip"), TEXT("Directly editable data:"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ULandscapeSplineSegment(Z_Construct_UClass_ULandscapeSplineSegment, TEXT("ULandscapeSplineSegment"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(ULandscapeSplineSegment);
	UScriptStruct* Z_Construct_UScriptStruct_FLandscapeSplineConnection()
	{
		UPackage* Outer=Z_Construct_UPackage_Landscape();
		extern uint32 Get_Z_Construct_UScriptStruct_FLandscapeSplineConnection_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("LandscapeSplineConnection"), sizeof(FLandscapeSplineConnection), Get_Z_Construct_UScriptStruct_FLandscapeSplineConnection_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LandscapeSplineConnection"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FLandscapeSplineConnection>, EStructFlags(0x00000001));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(End, FLandscapeSplineConnection, uint8);
			UProperty* NewProp_End = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("End"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(End, FLandscapeSplineConnection), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(End, FLandscapeSplineConnection), sizeof(uint8), false);
			UProperty* NewProp_Segment = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Segment"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Segment, FLandscapeSplineConnection), 0x0000000000000000, Z_Construct_UClass_ULandscapeSplineSegment_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplineControlPoint.h"));
			MetaData->SetValue(NewProp_End, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplineControlPoint.h"));
			MetaData->SetValue(NewProp_End, TEXT("ToolTip"), TEXT("Which end of the segment is connected to this control point"));
			MetaData->SetValue(NewProp_Segment, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplineControlPoint.h"));
			MetaData->SetValue(NewProp_Segment, TEXT("ToolTip"), TEXT("Segment connected to this control point"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FLandscapeSplineConnection_CRC() { return 368760214U; }
	UClass* Z_Construct_UClass_ULandscapeSplineControlPoint_NoRegister()
	{
		return ULandscapeSplineControlPoint::StaticClass();
	}
	UClass* Z_Construct_UClass_ULandscapeSplineControlPoint()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Landscape();
			OuterClass = ULandscapeSplineControlPoint::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_ModificationKey = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ModificationKey"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ModificationKey, ULandscapeSplineControlPoint), 0x0000c80800000000, Z_Construct_UScriptStruct_FGuid());
				UProperty* NewProp_ForeignWorld = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ForeignWorld"), RF_Public|RF_Transient|RF_Native) UAssetObjectProperty(CPP_PROPERTY_BASE(ForeignWorld, ULandscapeSplineControlPoint), 0x0004c80800000000, Z_Construct_UClass_UWorld_NoRegister());
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_LocalMeshComponent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LocalMeshComponent"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(LocalMeshComponent, ULandscapeSplineControlPoint), 0x0000480000080008, Z_Construct_UClass_UControlPointMeshComponent_NoRegister());
				UProperty* NewProp_Bounds = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Bounds"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Bounds, ULandscapeSplineControlPoint), 0x0000080000000000, Z_Construct_UScriptStruct_FBox());
				UProperty* NewProp_Points = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Points"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Points, ULandscapeSplineControlPoint), 0x0000080000000000);
				UProperty* NewProp_Points_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Points, TEXT("Points"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FLandscapeSplineInterpPoint());
				UProperty* NewProp_ConnectedSegments = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConnectedSegments"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ConnectedSegments, ULandscapeSplineControlPoint), 0x0000400000000000);
				UProperty* NewProp_ConnectedSegments_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ConnectedSegments, TEXT("ConnectedSegments"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FLandscapeSplineConnection());
#if WITH_EDITORONLY_DATA
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bNavDirty, ULandscapeSplineControlPoint, uint8);
				UProperty* NewProp_bNavDirty = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bNavDirty"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bNavDirty, ULandscapeSplineControlPoint), 0x0000080800002000, CPP_BOOL_PROPERTY_BITMASK(bNavDirty, ULandscapeSplineControlPoint), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSelected, ULandscapeSplineControlPoint, uint8);
				UProperty* NewProp_bSelected = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bSelected"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSelected, ULandscapeSplineControlPoint), 0x0000080800002000, CPP_BOOL_PROPERTY_BITMASK(bSelected, ULandscapeSplineControlPoint), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bPlaceSplineMeshesInStreamingLevels, ULandscapeSplineControlPoint, uint8);
				UProperty* NewProp_bPlaceSplineMeshesInStreamingLevels = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bPlaceSplineMeshesInStreamingLevels"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bPlaceSplineMeshesInStreamingLevels, ULandscapeSplineControlPoint), 0x0000040800000001, CPP_BOOL_PROPERTY_BITMASK(bPlaceSplineMeshesInStreamingLevels, ULandscapeSplineControlPoint), sizeof(uint8), false);
				UProperty* NewProp_TranslucencySortPriority = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TranslucencySortPriority"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(TranslucencySortPriority, ULandscapeSplineControlPoint), 0x0000040800000001);
				UProperty* NewProp_LDMaxDrawDistance = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LDMaxDrawDistance"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(LDMaxDrawDistance, ULandscapeSplineControlPoint), 0x0000040800000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCastShadow, ULandscapeSplineControlPoint, uint8);
				UProperty* NewProp_bCastShadow = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bCastShadow"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCastShadow, ULandscapeSplineControlPoint), 0x0000000800000001, CPP_BOOL_PROPERTY_BITMASK(bCastShadow, ULandscapeSplineControlPoint), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnableCollision, ULandscapeSplineControlPoint, uint8);
				UProperty* NewProp_bEnableCollision = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bEnableCollision"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnableCollision, ULandscapeSplineControlPoint), 0x0000000800000001, CPP_BOOL_PROPERTY_BITMASK(bEnableCollision, ULandscapeSplineControlPoint), sizeof(uint8), false);
				UProperty* NewProp_MeshScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MeshScale"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MeshScale, ULandscapeSplineControlPoint), 0x0000000800000001, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_MaterialOverrides = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaterialOverrides"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(MaterialOverrides, ULandscapeSplineControlPoint), 0x0000000800000001);
				UProperty* NewProp_MaterialOverrides_Inner = new(EC_InternalUseOnlyConstructor, NewProp_MaterialOverrides, TEXT("MaterialOverrides"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000800000000, Z_Construct_UClass_UMaterialInterface_NoRegister());
				UProperty* NewProp_Mesh = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Mesh"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Mesh, ULandscapeSplineControlPoint), 0x0000000800000001, Z_Construct_UClass_UStaticMesh_NoRegister());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLowerTerrain, ULandscapeSplineControlPoint, uint8);
				UProperty* NewProp_bLowerTerrain = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bLowerTerrain"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLowerTerrain, ULandscapeSplineControlPoint), 0x0000000800000001, CPP_BOOL_PROPERTY_BITMASK(bLowerTerrain, ULandscapeSplineControlPoint), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bRaiseTerrain, ULandscapeSplineControlPoint, uint8);
				UProperty* NewProp_bRaiseTerrain = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bRaiseTerrain"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bRaiseTerrain, ULandscapeSplineControlPoint), 0x0000000800000001, CPP_BOOL_PROPERTY_BITMASK(bRaiseTerrain, ULandscapeSplineControlPoint), sizeof(uint8), false);
				UProperty* NewProp_LayerName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LayerName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(LayerName, ULandscapeSplineControlPoint), 0x0000000800000001);
				UProperty* NewProp_SegmentMeshOffset = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SegmentMeshOffset"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(SegmentMeshOffset, ULandscapeSplineControlPoint), 0x0000000800000001);
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_EndFalloff = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EndFalloff"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(EndFalloff, ULandscapeSplineControlPoint), 0x0000000000000001);
				UProperty* NewProp_SideFalloff = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SideFalloff"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(SideFalloff, ULandscapeSplineControlPoint), 0x0000000000000001);
				UProperty* NewProp_Width = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Width"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Width, ULandscapeSplineControlPoint), 0x0000000000000001);
				UProperty* NewProp_Rotation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Rotation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Rotation, ULandscapeSplineControlPoint), 0x0000000000000001, Z_Construct_UScriptStruct_FRotator());
				UProperty* NewProp_Location = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Location"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Location, ULandscapeSplineControlPoint), 0x0000000000000001, Z_Construct_UScriptStruct_FVector());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("AutoExpandCategories"), TEXT("LandscapeSplineControlPoint"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("LandscapeSplineControlPoint.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplineControlPoint.h"));
				MetaData->SetValue(NewProp_ModificationKey, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplineControlPoint.h"));
				MetaData->SetValue(NewProp_ModificationKey, TEXT("ToolTip"), TEXT("Key for tracking whether this segment has been modified relative to the mesh component stored in another streaming level"));
				MetaData->SetValue(NewProp_ForeignWorld, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplineControlPoint.h"));
				MetaData->SetValue(NewProp_ForeignWorld, TEXT("ToolTip"), TEXT("World reference for if mesh component is stored in another streaming level"));
				MetaData->SetValue(NewProp_LocalMeshComponent, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_LocalMeshComponent, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplineControlPoint.h"));
				MetaData->SetValue(NewProp_LocalMeshComponent, TEXT("ToolTip"), TEXT("Control point mesh"));
				MetaData->SetValue(NewProp_Bounds, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplineControlPoint.h"));
				MetaData->SetValue(NewProp_Bounds, TEXT("ToolTip"), TEXT("Bounds of points"));
				MetaData->SetValue(NewProp_Points, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplineControlPoint.h"));
				MetaData->SetValue(NewProp_Points, TEXT("ToolTip"), TEXT("Spline points"));
				MetaData->SetValue(NewProp_ConnectedSegments, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplineControlPoint.h"));
				MetaData->SetValue(NewProp_bNavDirty, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplineControlPoint.h"));
				MetaData->SetValue(NewProp_bSelected, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplineControlPoint.h"));
				MetaData->SetValue(NewProp_bPlaceSplineMeshesInStreamingLevels, TEXT("Category"), TEXT("Mesh"));
				MetaData->SetValue(NewProp_bPlaceSplineMeshesInStreamingLevels, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplineControlPoint.h"));
				MetaData->SetValue(NewProp_bPlaceSplineMeshesInStreamingLevels, TEXT("ToolTip"), TEXT("Whether control point mesh should be placed in landscape proxy streaming level (true) or the spline's level (false)"));
				MetaData->SetValue(NewProp_TranslucencySortPriority, TEXT("Category"), TEXT("Mesh"));
				MetaData->SetValue(NewProp_TranslucencySortPriority, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplineControlPoint.h"));
				MetaData->SetValue(NewProp_TranslucencySortPriority, TEXT("ToolTip"), TEXT("Translucent objects with a lower sort priority draw behind objects with a higher priority.\nTranslucent objects with the same priority are rendered from back-to-front based on their bounds origin.\n\nIgnored if the object is not translucent.  The default priority is zero.\nWarning: This should never be set to a non-default value unless you know what you are doing, as it will prevent the renderer from sorting correctly."));
				MetaData->SetValue(NewProp_LDMaxDrawDistance, TEXT("Category"), TEXT("Mesh"));
				MetaData->SetValue(NewProp_LDMaxDrawDistance, TEXT("DisplayName"), TEXT("Max Draw Distance"));
				MetaData->SetValue(NewProp_LDMaxDrawDistance, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplineControlPoint.h"));
				MetaData->SetValue(NewProp_LDMaxDrawDistance, TEXT("ToolTip"), TEXT("Max draw distance for the mesh used on this control point"));
				MetaData->SetValue(NewProp_bCastShadow, TEXT("Category"), TEXT("Mesh"));
				MetaData->SetValue(NewProp_bCastShadow, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplineControlPoint.h"));
				MetaData->SetValue(NewProp_bCastShadow, TEXT("ToolTip"), TEXT("Whether the Control Point Mesh should cast a shadow."));
				MetaData->SetValue(NewProp_bEnableCollision, TEXT("Category"), TEXT("Mesh"));
				MetaData->SetValue(NewProp_bEnableCollision, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplineControlPoint.h"));
				MetaData->SetValue(NewProp_bEnableCollision, TEXT("ToolTip"), TEXT("Whether to enable collision for the Control Point Mesh."));
				MetaData->SetValue(NewProp_MeshScale, TEXT("Category"), TEXT("Mesh"));
				MetaData->SetValue(NewProp_MeshScale, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplineControlPoint.h"));
				MetaData->SetValue(NewProp_MeshScale, TEXT("ToolTip"), TEXT("Scale of the control point mesh"));
				MetaData->SetValue(NewProp_MaterialOverrides, TEXT("Category"), TEXT("Mesh"));
				MetaData->SetValue(NewProp_MaterialOverrides, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplineControlPoint.h"));
				MetaData->SetValue(NewProp_MaterialOverrides, TEXT("ToolTip"), TEXT("Overrides mesh's materials"));
				MetaData->SetValue(NewProp_Mesh, TEXT("Category"), TEXT("Mesh"));
				MetaData->SetValue(NewProp_Mesh, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplineControlPoint.h"));
				MetaData->SetValue(NewProp_Mesh, TEXT("ToolTip"), TEXT("Mesh to use on the control point"));
				MetaData->SetValue(NewProp_bLowerTerrain, TEXT("Category"), TEXT("LandscapeDeformation"));
				MetaData->SetValue(NewProp_bLowerTerrain, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplineControlPoint.h"));
				MetaData->SetValue(NewProp_bLowerTerrain, TEXT("ToolTip"), TEXT("If the spline is below the terrain, whether to lower the terrain down to the level of the spline when applying it to the landscape."));
				MetaData->SetValue(NewProp_bRaiseTerrain, TEXT("Category"), TEXT("LandscapeDeformation"));
				MetaData->SetValue(NewProp_bRaiseTerrain, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplineControlPoint.h"));
				MetaData->SetValue(NewProp_bRaiseTerrain, TEXT("ToolTip"), TEXT("If the spline is above the terrain, whether to raise the terrain up to the level of the spline when applying it to the landscape."));
				MetaData->SetValue(NewProp_LayerName, TEXT("Category"), TEXT("LandscapeDeformation"));
				MetaData->SetValue(NewProp_LayerName, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplineControlPoint.h"));
				MetaData->SetValue(NewProp_LayerName, TEXT("ToolTip"), TEXT("Name of blend layer to paint when applying spline to landscape\nIf \"none\", no layer is painted"));
				MetaData->SetValue(NewProp_SegmentMeshOffset, TEXT("Category"), TEXT("LandscapeSpline"));
				MetaData->SetValue(NewProp_SegmentMeshOffset, TEXT("DisplayName"), TEXT("Mesh Vertical Offset"));
				MetaData->SetValue(NewProp_SegmentMeshOffset, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplineControlPoint.h"));
				MetaData->SetValue(NewProp_SegmentMeshOffset, TEXT("ToolTip"), TEXT("Vertical offset of the spline segment mesh. Useful for a river's surface, among other things."));
				MetaData->SetValue(NewProp_EndFalloff, TEXT("Category"), TEXT("LandscapeSpline"));
				MetaData->SetValue(NewProp_EndFalloff, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplineControlPoint.h"));
				MetaData->SetValue(NewProp_EndFalloff, TEXT("ToolTip"), TEXT("Falloff at the start/end of the spline (if this point is a start or end point, otherwise ignored)."));
				MetaData->SetValue(NewProp_SideFalloff, TEXT("Category"), TEXT("LandscapeSpline"));
				MetaData->SetValue(NewProp_SideFalloff, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplineControlPoint.h"));
				MetaData->SetValue(NewProp_SideFalloff, TEXT("ToolTip"), TEXT("Falloff at the sides of the spline at this point."));
				MetaData->SetValue(NewProp_Width, TEXT("Category"), TEXT("LandscapeSpline"));
				MetaData->SetValue(NewProp_Width, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplineControlPoint.h"));
				MetaData->SetValue(NewProp_Width, TEXT("ToolTip"), TEXT("Width of the spline at this point."));
				MetaData->SetValue(NewProp_Rotation, TEXT("Category"), TEXT("LandscapeSpline"));
				MetaData->SetValue(NewProp_Rotation, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplineControlPoint.h"));
				MetaData->SetValue(NewProp_Rotation, TEXT("ToolTip"), TEXT("Rotation of tangent vector at this point (in landscape-space)"));
				MetaData->SetValue(NewProp_Location, TEXT("Category"), TEXT("LandscapeSpline"));
				MetaData->SetValue(NewProp_Location, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplineControlPoint.h"));
				MetaData->SetValue(NewProp_Location, TEXT("ToolTip"), TEXT("Location in Landscape-space"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ULandscapeSplineControlPoint(Z_Construct_UClass_ULandscapeSplineControlPoint, TEXT("ULandscapeSplineControlPoint"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(ULandscapeSplineControlPoint);
	UScriptStruct* Z_Construct_UScriptStruct_FForeignWorldSplineData()
	{
		UPackage* Outer=Z_Construct_UPackage_Landscape();
		extern uint32 Get_Z_Construct_UScriptStruct_FForeignWorldSplineData_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("ForeignWorldSplineData"), sizeof(FForeignWorldSplineData), Get_Z_Construct_UScriptStruct_FForeignWorldSplineData_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ForeignWorldSplineData"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FForeignWorldSplineData>, EStructFlags(0x00000005));
#if WITH_EDITORONLY_DATA
			UProperty* NewProp_ForeignSplineSegmentDataMap = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ForeignSplineSegmentDataMap"), RF_Public|RF_Transient|RF_Native) UMapProperty(CPP_PROPERTY_BASE(ForeignSplineSegmentDataMap, FForeignWorldSplineData), 0x0000008800000000);
			UProperty* NewProp_ForeignSplineSegmentDataMap_Key_KeyProp = new(EC_InternalUseOnlyConstructor, NewProp_ForeignSplineSegmentDataMap, TEXT("ForeignSplineSegmentDataMap_Key"), RF_Public|RF_Transient|RF_Native) ULazyObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000008800000000, Z_Construct_UClass_ULandscapeSplineSegment_NoRegister());
			UProperty* NewProp_ForeignSplineSegmentDataMap_ValueProp = new(EC_InternalUseOnlyConstructor, NewProp_ForeignSplineSegmentDataMap, TEXT("ForeignSplineSegmentDataMap"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 1, 0x0000008800000000, Z_Construct_UScriptStruct_FForeignSplineSegmentData());
			UProperty* NewProp_ForeignControlPointDataMap = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ForeignControlPointDataMap"), RF_Public|RF_Transient|RF_Native) UMapProperty(CPP_PROPERTY_BASE(ForeignControlPointDataMap, FForeignWorldSplineData), 0x0000008800000000);
			UProperty* NewProp_ForeignControlPointDataMap_Key_KeyProp = new(EC_InternalUseOnlyConstructor, NewProp_ForeignControlPointDataMap, TEXT("ForeignControlPointDataMap_Key"), RF_Public|RF_Transient|RF_Native) ULazyObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000008800000000, Z_Construct_UClass_ULandscapeSplineControlPoint_NoRegister());
			UProperty* NewProp_ForeignControlPointDataMap_ValueProp = new(EC_InternalUseOnlyConstructor, NewProp_ForeignControlPointDataMap, TEXT("ForeignControlPointDataMap"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 1, 0x0000008800000000, Z_Construct_UScriptStruct_FForeignControlPointData());
#endif // WITH_EDITORONLY_DATA
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplinesComponent.h"));
			MetaData->SetValue(NewProp_ForeignSplineSegmentDataMap, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplinesComponent.h"));
			MetaData->SetValue(NewProp_ForeignControlPointDataMap, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplinesComponent.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FForeignWorldSplineData_CRC() { return 2311769930U; }
	UScriptStruct* Z_Construct_UScriptStruct_FForeignSplineSegmentData()
	{
		UPackage* Outer=Z_Construct_UPackage_Landscape();
		extern uint32 Get_Z_Construct_UScriptStruct_FForeignSplineSegmentData_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("ForeignSplineSegmentData"), sizeof(FForeignSplineSegmentData), Get_Z_Construct_UScriptStruct_FForeignSplineSegmentData_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ForeignSplineSegmentData"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FForeignSplineSegmentData>, EStructFlags(0x00000005));
#if WITH_EDITORONLY_DATA
			UProperty* NewProp_MeshComponents = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MeshComponents"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(MeshComponents, FForeignSplineSegmentData), 0x0000008800000008);
			UProperty* NewProp_MeshComponents_Inner = new(EC_InternalUseOnlyConstructor, NewProp_MeshComponents, TEXT("MeshComponents"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000800080008, Z_Construct_UClass_USplineMeshComponent_NoRegister());
			UProperty* NewProp_ModificationKey = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ModificationKey"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ModificationKey, FForeignSplineSegmentData), 0x0000000800000000, Z_Construct_UScriptStruct_FGuid());
#endif // WITH_EDITORONLY_DATA
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplinesComponent.h"));
			MetaData->SetValue(NewProp_MeshComponents, TEXT("EditInline"), TEXT("true"));
			MetaData->SetValue(NewProp_MeshComponents, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplinesComponent.h"));
			MetaData->SetValue(NewProp_ModificationKey, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplinesComponent.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FForeignSplineSegmentData_CRC() { return 2257093836U; }
	UScriptStruct* Z_Construct_UScriptStruct_FForeignControlPointData()
	{
		UPackage* Outer=Z_Construct_UPackage_Landscape();
		extern uint32 Get_Z_Construct_UScriptStruct_FForeignControlPointData_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("ForeignControlPointData"), sizeof(FForeignControlPointData), Get_Z_Construct_UScriptStruct_FForeignControlPointData_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ForeignControlPointData"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FForeignControlPointData>, EStructFlags(0x00000005));
#if WITH_EDITORONLY_DATA
			UProperty* NewProp_MeshComponent = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MeshComponent"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(MeshComponent, FForeignControlPointData), 0x0000000800080008, Z_Construct_UClass_UControlPointMeshComponent_NoRegister());
			UProperty* NewProp_ModificationKey = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ModificationKey"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ModificationKey, FForeignControlPointData), 0x0000000800000000, Z_Construct_UScriptStruct_FGuid());
#endif // WITH_EDITORONLY_DATA
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplinesComponent.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("structs for ForeignWorldSplineDataMap\nthese are editor-only, but we don't have the concept of an editor-only USTRUCT"));
			MetaData->SetValue(NewProp_MeshComponent, TEXT("EditInline"), TEXT("true"));
			MetaData->SetValue(NewProp_MeshComponent, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplinesComponent.h"));
			MetaData->SetValue(NewProp_ModificationKey, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplinesComponent.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FForeignControlPointData_CRC() { return 2466399205U; }
	UClass* Z_Construct_UClass_ULandscapeSplinesComponent_NoRegister()
	{
		return ULandscapeSplinesComponent::StaticClass();
	}
	UClass* Z_Construct_UClass_ULandscapeSplinesComponent()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPrimitiveComponent();
			Z_Construct_UPackage_Landscape();
			OuterClass = ULandscapeSplinesComponent::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20A80080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_CookedForeignMeshComponents = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CookedForeignMeshComponents"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(CookedForeignMeshComponents, ULandscapeSplinesComponent), 0x0000488000000008);
				UProperty* NewProp_CookedForeignMeshComponents_Inner = new(EC_InternalUseOnlyConstructor, NewProp_CookedForeignMeshComponents, TEXT("CookedForeignMeshComponents"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000080008, Z_Construct_UClass_UMeshComponent_NoRegister());
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_ForeignWorldSplineDataMap = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ForeignWorldSplineDataMap"), RF_Public|RF_Transient|RF_Native) UMapProperty(CPP_PROPERTY_BASE(ForeignWorldSplineDataMap, ULandscapeSplinesComponent), 0x0000488800000000);
				UProperty* NewProp_ForeignWorldSplineDataMap_Key_KeyProp = new(EC_InternalUseOnlyConstructor, NewProp_ForeignWorldSplineDataMap, TEXT("ForeignWorldSplineDataMap_Key"), RF_Public|RF_Transient|RF_Native) UAssetObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000008800000000, Z_Construct_UClass_UWorld_NoRegister());
				UProperty* NewProp_ForeignWorldSplineDataMap_ValueProp = new(EC_InternalUseOnlyConstructor, NewProp_ForeignWorldSplineDataMap, TEXT("ForeignWorldSplineDataMap"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 1, 0x0000008800000000, Z_Construct_UScriptStruct_FForeignWorldSplineData());
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_Segments = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Segments"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Segments, ULandscapeSplinesComponent), 0x0000480000000000);
				UProperty* NewProp_Segments_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Segments, TEXT("Segments"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_ULandscapeSplineSegment_NoRegister());
				UProperty* NewProp_ControlPoints = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ControlPoints"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ControlPoints, ULandscapeSplinesComponent), 0x0000480000000000);
				UProperty* NewProp_ControlPoints_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ControlPoints, TEXT("ControlPoints"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_ULandscapeSplineControlPoint_NoRegister());
#if WITH_EDITORONLY_DATA
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bShowSplineEditorMesh, ULandscapeSplinesComponent, uint8);
				UProperty* NewProp_bShowSplineEditorMesh = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bShowSplineEditorMesh"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bShowSplineEditorMesh, ULandscapeSplinesComponent), 0x0000000c00002000, CPP_BOOL_PROPERTY_BITMASK(bShowSplineEditorMesh, ULandscapeSplinesComponent), sizeof(uint8), false);
				UProperty* NewProp_SplineEditorMesh = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SplineEditorMesh"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(SplineEditorMesh, ULandscapeSplinesComponent), 0x0000000800000000, Z_Construct_UClass_UStaticMesh_NoRegister());
				UProperty* NewProp_ControlPointSprite = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ControlPointSprite"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ControlPointSprite, ULandscapeSplinesComponent), 0x0000000800000000, Z_Construct_UClass_UTexture2D_NoRegister());
				UProperty* NewProp_SplineColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SplineColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SplineColor, ULandscapeSplinesComponent), 0x0000000800000000, Z_Construct_UScriptStruct_FColor());
				UProperty* NewProp_SplineResolution = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SplineResolution"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(SplineResolution, ULandscapeSplinesComponent), 0x0000000800000000);
#endif // WITH_EDITORONLY_DATA
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Mobility Trigger ComponentReplication"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("LandscapeSplinesComponent.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplinesComponent.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("ULandscapeSplinesComponent"));
				MetaData->SetValue(NewProp_CookedForeignMeshComponents, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_CookedForeignMeshComponents, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplinesComponent.h"));
				MetaData->SetValue(NewProp_CookedForeignMeshComponents, TEXT("ToolTip"), TEXT("References to components owned by landscape splines in other levels\nfor cooked build (uncooked keeps references via ForeignWorldSplineDataMap)"));
				MetaData->SetValue(NewProp_ForeignWorldSplineDataMap, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplinesComponent.h"));
				MetaData->SetValue(NewProp_ForeignWorldSplineDataMap, TEXT("ToolTip"), TEXT("Serialized"));
				MetaData->SetValue(NewProp_Segments, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplinesComponent.h"));
				MetaData->SetValue(NewProp_ControlPoints, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplinesComponent.h"));
				MetaData->SetValue(NewProp_bShowSplineEditorMesh, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplinesComponent.h"));
				MetaData->SetValue(NewProp_bShowSplineEditorMesh, TEXT("ToolTip"), TEXT("Whether we are in-editor and showing spline editor meshes"));
				MetaData->SetValue(NewProp_SplineEditorMesh, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplinesComponent.h"));
				MetaData->SetValue(NewProp_SplineEditorMesh, TEXT("ToolTip"), TEXT("Mesh used to draw splines that have no mesh"));
				MetaData->SetValue(NewProp_ControlPointSprite, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplinesComponent.h"));
				MetaData->SetValue(NewProp_ControlPointSprite, TEXT("ToolTip"), TEXT("Sprite used to draw control points"));
				MetaData->SetValue(NewProp_SplineColor, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplinesComponent.h"));
				MetaData->SetValue(NewProp_SplineColor, TEXT("ToolTip"), TEXT("Color to use to draw the splines"));
				MetaData->SetValue(NewProp_SplineResolution, TEXT("ModuleRelativePath"), TEXT("Classes/LandscapeSplinesComponent.h"));
				MetaData->SetValue(NewProp_SplineResolution, TEXT("ToolTip"), TEXT("Resolution of the spline, in distance per point"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ULandscapeSplinesComponent(Z_Construct_UClass_ULandscapeSplinesComponent, TEXT("ULandscapeSplinesComponent"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(ULandscapeSplinesComponent);
	UScriptStruct* Z_Construct_UScriptStruct_FGrassInput()
	{
		UPackage* Outer=Z_Construct_UPackage_Landscape();
		extern uint32 Get_Z_Construct_UScriptStruct_FGrassInput_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("GrassInput"), sizeof(FGrassInput), Get_Z_Construct_UScriptStruct_FGrassInput_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GrassInput"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FGrassInput>, EStructFlags(0x00000001));
			UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Input"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Input, FGrassInput), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
			UProperty* NewProp_GrassType = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("GrassType"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(GrassType, FGrassInput), 0x0000000000000001, Z_Construct_UClass_ULandscapeGrassType_NoRegister());
			UProperty* NewProp_Name = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Name"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(Name, FGrassInput), 0x0000000000000001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionLandscapeGrassOutput.h"));
			MetaData->SetValue(NewProp_Input, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionLandscapeGrassOutput.h"));
			MetaData->SetValue(NewProp_Input, TEXT("RequiredInput"), TEXT("true"));
			MetaData->SetValue(NewProp_GrassType, TEXT("Category"), TEXT("Grass"));
			MetaData->SetValue(NewProp_GrassType, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionLandscapeGrassOutput.h"));
			MetaData->SetValue(NewProp_Name, TEXT("Category"), TEXT("Grass"));
			MetaData->SetValue(NewProp_Name, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionLandscapeGrassOutput.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FGrassInput_CRC() { return 1927649101U; }
	UClass* Z_Construct_UClass_UMaterialExpressionLandscapeGrassOutput_NoRegister()
	{
		return UMaterialExpressionLandscapeGrassOutput::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionLandscapeGrassOutput()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpressionCustomOutput();
			Z_Construct_UPackage_Landscape();
			OuterClass = UMaterialExpressionLandscapeGrassOutput::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_GrassTypes = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GrassTypes"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(GrassTypes, UMaterialExpressionLandscapeGrassOutput), 0x0000000000000001);
				UProperty* NewProp_GrassTypes_Inner = new(EC_InternalUseOnlyConstructor, NewProp_GrassTypes, TEXT("GrassTypes"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FGrassInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionLandscapeGrassOutput.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionLandscapeGrassOutput.h"));
				MetaData->SetValue(NewProp_GrassTypes, TEXT("Category"), TEXT("UMaterialExpressionLandscapeGrassOutput"));
				MetaData->SetValue(NewProp_GrassTypes, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionLandscapeGrassOutput.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionLandscapeGrassOutput(Z_Construct_UClass_UMaterialExpressionLandscapeGrassOutput, TEXT("UMaterialExpressionLandscapeGrassOutput"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionLandscapeGrassOutput);
	UEnum* Z_Construct_UEnum_Landscape_ELandscapeLayerBlendType()
	{
		UPackage* Outer=Z_Construct_UPackage_Landscape();
		extern uint32 Get_Z_Construct_UEnum_Landscape_ELandscapeLayerBlendType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ELandscapeLayerBlendType"), 0, Get_Z_Construct_UEnum_Landscape_ELandscapeLayerBlendType_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ELandscapeLayerBlendType"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("LB_WeightBlend")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("LB_AlphaBlend")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("LB_HeightBlend")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("LB_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionLandscapeLayerBlend.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Landscape_ELandscapeLayerBlendType_CRC() { return 3000959595U; }
	UScriptStruct* Z_Construct_UScriptStruct_FLayerBlendInput()
	{
		UPackage* Outer=Z_Construct_UPackage_Landscape();
		extern uint32 Get_Z_Construct_UScriptStruct_FLayerBlendInput_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("LayerBlendInput"), sizeof(FLayerBlendInput), Get_Z_Construct_UScriptStruct_FLayerBlendInput_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LayerBlendInput"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FLayerBlendInput>, EStructFlags(0x00000001));
			UProperty* NewProp_ConstHeightInput = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ConstHeightInput"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ConstHeightInput, FLayerBlendInput), 0x0000000000000001);
			UProperty* NewProp_ConstLayerInput = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ConstLayerInput"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ConstLayerInput, FLayerBlendInput), 0x0000000000000001, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_PreviewWeight = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PreviewWeight"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(PreviewWeight, FLayerBlendInput), 0x0000000000000001);
			UProperty* NewProp_HeightInput = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("HeightInput"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(HeightInput, FLayerBlendInput), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
			UProperty* NewProp_LayerInput = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LayerInput"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LayerInput, FLayerBlendInput), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
			UProperty* NewProp_BlendType = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BlendType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(BlendType, FLayerBlendInput), 0x0000000000000001, Z_Construct_UEnum_Landscape_ELandscapeLayerBlendType());
			UProperty* NewProp_LayerName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LayerName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(LayerName, FLayerBlendInput), 0x0000000000000001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionLandscapeLayerBlend.h"));
			MetaData->SetValue(NewProp_ConstHeightInput, TEXT("Category"), TEXT("LayerBlendInput"));
			MetaData->SetValue(NewProp_ConstHeightInput, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionLandscapeLayerBlend.h"));
			MetaData->SetValue(NewProp_ConstHeightInput, TEXT("ToolTip"), TEXT("only used if HeightInput is not hooked up"));
			MetaData->SetValue(NewProp_ConstLayerInput, TEXT("Category"), TEXT("LayerBlendInput"));
			MetaData->SetValue(NewProp_ConstLayerInput, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionLandscapeLayerBlend.h"));
			MetaData->SetValue(NewProp_ConstLayerInput, TEXT("ToolTip"), TEXT("only used if LayerInput is not hooked up"));
			MetaData->SetValue(NewProp_PreviewWeight, TEXT("Category"), TEXT("LayerBlendInput"));
			MetaData->SetValue(NewProp_PreviewWeight, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionLandscapeLayerBlend.h"));
			MetaData->SetValue(NewProp_HeightInput, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionLandscapeLayerBlend.h"));
			MetaData->SetValue(NewProp_HeightInput, TEXT("RequiredInput"), TEXT("false"));
			MetaData->SetValue(NewProp_HeightInput, TEXT("ToolTip"), TEXT("Defaults to 'ConstHeightInput' if not specified"));
			MetaData->SetValue(NewProp_LayerInput, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionLandscapeLayerBlend.h"));
			MetaData->SetValue(NewProp_LayerInput, TEXT("RequiredInput"), TEXT("false"));
			MetaData->SetValue(NewProp_LayerInput, TEXT("ToolTip"), TEXT("Defaults to 'ConstLayerInput' if not specified"));
			MetaData->SetValue(NewProp_BlendType, TEXT("Category"), TEXT("LayerBlendInput"));
			MetaData->SetValue(NewProp_BlendType, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionLandscapeLayerBlend.h"));
			MetaData->SetValue(NewProp_LayerName, TEXT("Category"), TEXT("LayerBlendInput"));
			MetaData->SetValue(NewProp_LayerName, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionLandscapeLayerBlend.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FLayerBlendInput_CRC() { return 3427444571U; }
	UClass* Z_Construct_UClass_UMaterialExpressionLandscapeLayerBlend_NoRegister()
	{
		return UMaterialExpressionLandscapeLayerBlend::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionLandscapeLayerBlend()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Landscape();
			OuterClass = UMaterialExpressionLandscapeLayerBlend::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ExpressionGUID = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ExpressionGUID"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ExpressionGUID, UMaterialExpressionLandscapeLayerBlend), 0x0000000000000000, Z_Construct_UScriptStruct_FGuid());
				UProperty* NewProp_Layers = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Layers"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Layers, UMaterialExpressionLandscapeLayerBlend), 0x0000000000000001);
				UProperty* NewProp_Layers_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Layers, TEXT("Layers"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FLayerBlendInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionLandscapeLayerBlend.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionLandscapeLayerBlend.h"));
				MetaData->SetValue(NewProp_ExpressionGUID, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionLandscapeLayerBlend.h"));
				MetaData->SetValue(NewProp_ExpressionGUID, TEXT("ToolTip"), TEXT("GUID that should be unique within the material, this is used for parameter renaming."));
				MetaData->SetValue(NewProp_Layers, TEXT("Category"), TEXT("MaterialExpressionLandscapeLayerBlend"));
				MetaData->SetValue(NewProp_Layers, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionLandscapeLayerBlend.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionLandscapeLayerBlend(Z_Construct_UClass_UMaterialExpressionLandscapeLayerBlend, TEXT("UMaterialExpressionLandscapeLayerBlend"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionLandscapeLayerBlend);
	UEnum* Z_Construct_UEnum_Landscape_ELandscapeCustomizedCoordType()
	{
		UPackage* Outer=Z_Construct_UPackage_Landscape();
		extern uint32 Get_Z_Construct_UEnum_Landscape_ELandscapeCustomizedCoordType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ELandscapeCustomizedCoordType"), 0, Get_Z_Construct_UEnum_Landscape_ELandscapeCustomizedCoordType_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ELandscapeCustomizedCoordType"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("LCCT_None")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("LCCT_CustomUV0")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("LCCT_CustomUV1")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("LCCT_CustomUV2")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("LCCT_WeightMapUV")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("LCCT_MAX")), 5));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("LCCT_None.ToolTip"), TEXT("Don't use customized UV, just use original UV."));
			MetaData->SetValue(ReturnEnum, TEXT("LCCT_WeightMapUV.ToolTip"), TEXT("Use original WeightMapUV, which could not be customized."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionLandscapeLayerCoords.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Landscape_ELandscapeCustomizedCoordType_CRC() { return 777175915U; }
	UEnum* Z_Construct_UEnum_Landscape_ETerrainCoordMappingType()
	{
		UPackage* Outer=Z_Construct_UPackage_Landscape();
		extern uint32 Get_Z_Construct_UEnum_Landscape_ETerrainCoordMappingType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ETerrainCoordMappingType"), 0, Get_Z_Construct_UEnum_Landscape_ETerrainCoordMappingType_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ETerrainCoordMappingType"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TCMT_Auto")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TCMT_XY")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TCMT_XZ")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TCMT_YZ")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TCMT_MAX")), 4));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionLandscapeLayerCoords.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Landscape_ETerrainCoordMappingType_CRC() { return 1188783436U; }
	UClass* Z_Construct_UClass_UMaterialExpressionLandscapeLayerCoords_NoRegister()
	{
		return UMaterialExpressionLandscapeLayerCoords::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionLandscapeLayerCoords()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Landscape();
			OuterClass = UMaterialExpressionLandscapeLayerCoords::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_MappingPanV = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MappingPanV"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MappingPanV, UMaterialExpressionLandscapeLayerCoords), 0x0000000000000001);
				UProperty* NewProp_MappingPanU = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MappingPanU"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MappingPanU, UMaterialExpressionLandscapeLayerCoords), 0x0000000000000001);
				UProperty* NewProp_MappingRotation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MappingRotation"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MappingRotation, UMaterialExpressionLandscapeLayerCoords), 0x0000000000000001);
				UProperty* NewProp_MappingScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MappingScale"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MappingScale, UMaterialExpressionLandscapeLayerCoords), 0x0000000000000001);
				UProperty* NewProp_CustomUVType = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CustomUVType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(CustomUVType, UMaterialExpressionLandscapeLayerCoords), 0x0000000000000001, Z_Construct_UEnum_Landscape_ELandscapeCustomizedCoordType());
				UProperty* NewProp_MappingType = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MappingType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(MappingType, UMaterialExpressionLandscapeLayerCoords), 0x0000000000000001, Z_Construct_UEnum_Landscape_ETerrainCoordMappingType());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionLandscapeLayerCoords.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionLandscapeLayerCoords.h"));
				MetaData->SetValue(NewProp_MappingPanV, TEXT("Category"), TEXT("MaterialExpressionLandscapeLayerCoords"));
				MetaData->SetValue(NewProp_MappingPanV, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionLandscapeLayerCoords.h"));
				MetaData->SetValue(NewProp_MappingPanV, TEXT("ToolTip"), TEXT("Offset to apply to the mapping along V."));
				MetaData->SetValue(NewProp_MappingPanU, TEXT("Category"), TEXT("MaterialExpressionLandscapeLayerCoords"));
				MetaData->SetValue(NewProp_MappingPanU, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionLandscapeLayerCoords.h"));
				MetaData->SetValue(NewProp_MappingPanU, TEXT("ToolTip"), TEXT("Offset to apply to the mapping along U."));
				MetaData->SetValue(NewProp_MappingRotation, TEXT("Category"), TEXT("MaterialExpressionLandscapeLayerCoords"));
				MetaData->SetValue(NewProp_MappingRotation, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionLandscapeLayerCoords.h"));
				MetaData->SetValue(NewProp_MappingRotation, TEXT("ToolTip"), TEXT("Rotation to apply to the mapping."));
				MetaData->SetValue(NewProp_MappingScale, TEXT("Category"), TEXT("MaterialExpressionLandscapeLayerCoords"));
				MetaData->SetValue(NewProp_MappingScale, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionLandscapeLayerCoords.h"));
				MetaData->SetValue(NewProp_MappingScale, TEXT("ToolTip"), TEXT("Uniform scale to apply to the mapping."));
				MetaData->SetValue(NewProp_CustomUVType, TEXT("Category"), TEXT("MaterialExpressionLandscapeLayerCoords"));
				MetaData->SetValue(NewProp_CustomUVType, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionLandscapeLayerCoords.h"));
				MetaData->SetValue(NewProp_CustomUVType, TEXT("ToolTip"), TEXT("Determines the mapping place to use on the terrain."));
				MetaData->SetValue(NewProp_MappingType, TEXT("Category"), TEXT("MaterialExpressionLandscapeLayerCoords"));
				MetaData->SetValue(NewProp_MappingType, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionLandscapeLayerCoords.h"));
				MetaData->SetValue(NewProp_MappingType, TEXT("ToolTip"), TEXT("Determines the mapping place to use on the terrain."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionLandscapeLayerCoords(Z_Construct_UClass_UMaterialExpressionLandscapeLayerCoords, TEXT("UMaterialExpressionLandscapeLayerCoords"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionLandscapeLayerCoords);
	UClass* Z_Construct_UClass_UMaterialExpressionLandscapeLayerSample_NoRegister()
	{
		return UMaterialExpressionLandscapeLayerSample::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionLandscapeLayerSample()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Landscape();
			OuterClass = UMaterialExpressionLandscapeLayerSample::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ExpressionGUID = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ExpressionGUID"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ExpressionGUID, UMaterialExpressionLandscapeLayerSample), 0x0000000000000000, Z_Construct_UScriptStruct_FGuid());
				UProperty* NewProp_PreviewWeight = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PreviewWeight"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(PreviewWeight, UMaterialExpressionLandscapeLayerSample), 0x0000000000000001);
				UProperty* NewProp_ParameterName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ParameterName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(ParameterName, UMaterialExpressionLandscapeLayerSample), 0x0000000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionLandscapeLayerSample.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionLandscapeLayerSample.h"));
				MetaData->SetValue(NewProp_ExpressionGUID, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionLandscapeLayerSample.h"));
				MetaData->SetValue(NewProp_ExpressionGUID, TEXT("ToolTip"), TEXT("GUID that should be unique within the material, this is used for parameter renaming."));
				MetaData->SetValue(NewProp_PreviewWeight, TEXT("Category"), TEXT("MaterialExpressionLandscapeLayerWeight"));
				MetaData->SetValue(NewProp_PreviewWeight, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionLandscapeLayerSample.h"));
				MetaData->SetValue(NewProp_ParameterName, TEXT("Category"), TEXT("MaterialExpressionLandscapeLayerWeight"));
				MetaData->SetValue(NewProp_ParameterName, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionLandscapeLayerSample.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionLandscapeLayerSample(Z_Construct_UClass_UMaterialExpressionLandscapeLayerSample, TEXT("UMaterialExpressionLandscapeLayerSample"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionLandscapeLayerSample);
	UClass* Z_Construct_UClass_UMaterialExpressionLandscapeLayerSwitch_NoRegister()
	{
		return UMaterialExpressionLandscapeLayerSwitch::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionLandscapeLayerSwitch()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Landscape();
			OuterClass = UMaterialExpressionLandscapeLayerSwitch::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ExpressionGUID = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ExpressionGUID"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ExpressionGUID, UMaterialExpressionLandscapeLayerSwitch), 0x0000000000000000, Z_Construct_UScriptStruct_FGuid());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(PreviewUsed, UMaterialExpressionLandscapeLayerSwitch, uint8);
				UProperty* NewProp_PreviewUsed = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PreviewUsed"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(PreviewUsed, UMaterialExpressionLandscapeLayerSwitch), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(PreviewUsed, UMaterialExpressionLandscapeLayerSwitch), sizeof(uint8), false);
				UProperty* NewProp_ParameterName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ParameterName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(ParameterName, UMaterialExpressionLandscapeLayerSwitch), 0x0000000000000001);
				UProperty* NewProp_LayerNotUsed = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LayerNotUsed"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LayerNotUsed, UMaterialExpressionLandscapeLayerSwitch), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_LayerUsed = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LayerUsed"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LayerUsed, UMaterialExpressionLandscapeLayerSwitch), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionLandscapeLayerSwitch.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionLandscapeLayerSwitch.h"));
				MetaData->SetValue(NewProp_ExpressionGUID, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionLandscapeLayerSwitch.h"));
				MetaData->SetValue(NewProp_ExpressionGUID, TEXT("ToolTip"), TEXT("GUID that should be unique within the material, this is used for parameter renaming."));
				MetaData->SetValue(NewProp_PreviewUsed, TEXT("Category"), TEXT("MaterialExpressionLandscapeLayerSwitch"));
				MetaData->SetValue(NewProp_PreviewUsed, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionLandscapeLayerSwitch.h"));
				MetaData->SetValue(NewProp_ParameterName, TEXT("Category"), TEXT("MaterialExpressionLandscapeLayerSwitch"));
				MetaData->SetValue(NewProp_ParameterName, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionLandscapeLayerSwitch.h"));
				MetaData->SetValue(NewProp_LayerNotUsed, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionLandscapeLayerSwitch.h"));
				MetaData->SetValue(NewProp_LayerUsed, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionLandscapeLayerSwitch.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionLandscapeLayerSwitch(Z_Construct_UClass_UMaterialExpressionLandscapeLayerSwitch, TEXT("UMaterialExpressionLandscapeLayerSwitch"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionLandscapeLayerSwitch);
	UClass* Z_Construct_UClass_UMaterialExpressionLandscapeLayerWeight_NoRegister()
	{
		return UMaterialExpressionLandscapeLayerWeight::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionLandscapeLayerWeight()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Landscape();
			OuterClass = UMaterialExpressionLandscapeLayerWeight::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ExpressionGUID = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ExpressionGUID"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ExpressionGUID, UMaterialExpressionLandscapeLayerWeight), 0x0000000000000000, Z_Construct_UScriptStruct_FGuid());
				UProperty* NewProp_ConstBase = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConstBase"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ConstBase, UMaterialExpressionLandscapeLayerWeight), 0x0000000000000001, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_PreviewWeight = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PreviewWeight"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(PreviewWeight, UMaterialExpressionLandscapeLayerWeight), 0x0000000000000001);
				UProperty* NewProp_ParameterName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ParameterName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(ParameterName, UMaterialExpressionLandscapeLayerWeight), 0x0000000000000001);
				UProperty* NewProp_Layer = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Layer"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Layer, UMaterialExpressionLandscapeLayerWeight), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_Base = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Base"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Base, UMaterialExpressionLandscapeLayerWeight), 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionLandscapeLayerWeight.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionLandscapeLayerWeight.h"));
				MetaData->SetValue(NewProp_ExpressionGUID, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionLandscapeLayerWeight.h"));
				MetaData->SetValue(NewProp_ExpressionGUID, TEXT("ToolTip"), TEXT("GUID that should be unique within the material, this is used for parameter renaming."));
				MetaData->SetValue(NewProp_ConstBase, TEXT("Category"), TEXT("MaterialExpressionLandscapeLayerWeight"));
				MetaData->SetValue(NewProp_ConstBase, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionLandscapeLayerWeight.h"));
				MetaData->SetValue(NewProp_ConstBase, TEXT("ToolTip"), TEXT("only used if Base is not hooked up"));
				MetaData->SetValue(NewProp_PreviewWeight, TEXT("Category"), TEXT("MaterialExpressionLandscapeLayerWeight"));
				MetaData->SetValue(NewProp_PreviewWeight, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionLandscapeLayerWeight.h"));
				MetaData->SetValue(NewProp_ParameterName, TEXT("Category"), TEXT("MaterialExpressionLandscapeLayerWeight"));
				MetaData->SetValue(NewProp_ParameterName, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionLandscapeLayerWeight.h"));
				MetaData->SetValue(NewProp_Layer, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionLandscapeLayerWeight.h"));
				MetaData->SetValue(NewProp_Layer, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_Layer, TEXT("ToolTip"), TEXT("Ignored if not specified"));
				MetaData->SetValue(NewProp_Base, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionLandscapeLayerWeight.h"));
				MetaData->SetValue(NewProp_Base, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_Base, TEXT("ToolTip"), TEXT("Defaults to 'ConstBase' if not specified"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionLandscapeLayerWeight(Z_Construct_UClass_UMaterialExpressionLandscapeLayerWeight, TEXT("UMaterialExpressionLandscapeLayerWeight"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionLandscapeLayerWeight);
	UClass* Z_Construct_UClass_UMaterialExpressionLandscapeVisibilityMask_NoRegister()
	{
		return UMaterialExpressionLandscapeVisibilityMask::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionLandscapeVisibilityMask()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage_Landscape();
			OuterClass = UMaterialExpressionLandscapeVisibilityMask::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ExpressionGUID = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ExpressionGUID"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ExpressionGUID, UMaterialExpressionLandscapeVisibilityMask), 0x0000000000000000, Z_Construct_UScriptStruct_FGuid());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionLandscapeVisibilityMask.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionLandscapeVisibilityMask.h"));
				MetaData->SetValue(NewProp_ExpressionGUID, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionLandscapeVisibilityMask.h"));
				MetaData->SetValue(NewProp_ExpressionGUID, TEXT("ToolTip"), TEXT("GUID that should be unique within the material, this is used for parameter renaming."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionLandscapeVisibilityMask(Z_Construct_UClass_UMaterialExpressionLandscapeVisibilityMask, TEXT("UMaterialExpressionLandscapeVisibilityMask"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionLandscapeVisibilityMask);
	UPackage* Z_Construct_UPackage_Landscape()
	{
		static UPackage* ReturnPackage = NULL;
		if (!ReturnPackage)
		{
			ReturnPackage = CastChecked<UPackage>(StaticFindObjectFast(UPackage::StaticClass(), NULL, FName(TEXT("/Script/Landscape")), false, false));
			ReturnPackage->SetPackageFlags(PKG_CompiledIn | 0x00000000);
			FGuid Guid;
			Guid.A = 0xA00B7657;
			Guid.B = 0xEC4FEBC3;
			Guid.C = 0x00000000;
			Guid.D = 0x00000000;
			ReturnPackage->SetGuid(Guid);

		}
		return ReturnPackage;
	}
#endif

PRAGMA_ENABLE_DEPRECATION_WARNINGS
