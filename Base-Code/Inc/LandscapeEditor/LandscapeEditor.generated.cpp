// Copyright 1998-2015 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Boilerplate C++ definitions for a single module.
	This is automatically generated by UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "Private/LandscapeEditorPrivatePCH.h"
#include "LandscapeEditor.generated.dep.h"
PRAGMA_DISABLE_DEPRECATION_WARNINGS
void EmptyLinkFunctionForGeneratedCodeLandscapeEditor() {}
	void UActorFactoryLandscape::StaticRegisterNativesUActorFactoryLandscape()
	{
	}
	IMPLEMENT_CLASS(UActorFactoryLandscape, 2663211787);
static class UEnum* ELandscapeImportLayerError_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern LANDSCAPEEDITOR_API class UEnum* Z_Construct_UEnum_LandscapeEditor_ELandscapeImportLayerError();
		extern LANDSCAPEEDITOR_API class UPackage* Z_Construct_UPackage_LandscapeEditor();
		Singleton = GetStaticEnum(Z_Construct_UEnum_LandscapeEditor_ELandscapeImportLayerError, Z_Construct_UPackage_LandscapeEditor(), TEXT("ELandscapeImportLayerError"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_ELandscapeImportLayerError(ELandscapeImportLayerError_StaticEnum, TEXT("/Script/LandscapeEditor"));
static class UEnum* ELandscapeImportHeightmapError_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern LANDSCAPEEDITOR_API class UEnum* Z_Construct_UEnum_LandscapeEditor_ELandscapeImportHeightmapError();
		extern LANDSCAPEEDITOR_API class UPackage* Z_Construct_UPackage_LandscapeEditor();
		Singleton = GetStaticEnum(Z_Construct_UEnum_LandscapeEditor_ELandscapeImportHeightmapError, Z_Construct_UPackage_LandscapeEditor(), TEXT("ELandscapeImportHeightmapError"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_ELandscapeImportHeightmapError(ELandscapeImportHeightmapError_StaticEnum, TEXT("/Script/LandscapeEditor"));
static class UEnum* ELandscapeMirrorOperation_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern LANDSCAPEEDITOR_API class UEnum* Z_Construct_UEnum_LandscapeEditor_ELandscapeMirrorOperation();
		extern LANDSCAPEEDITOR_API class UPackage* Z_Construct_UPackage_LandscapeEditor();
		Singleton = GetStaticEnum(Z_Construct_UEnum_LandscapeEditor_ELandscapeMirrorOperation, Z_Construct_UPackage_LandscapeEditor(), TEXT("ELandscapeMirrorOperation"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_ELandscapeMirrorOperation(ELandscapeMirrorOperation_StaticEnum, TEXT("/Script/LandscapeEditor"));
static class UEnum* EColorChannel_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern LANDSCAPEEDITOR_API class UEnum* Z_Construct_UEnum_LandscapeEditor_EColorChannel();
		extern LANDSCAPEEDITOR_API class UPackage* Z_Construct_UPackage_LandscapeEditor();
		Singleton = GetStaticEnum(Z_Construct_UEnum_LandscapeEditor_EColorChannel, Z_Construct_UPackage_LandscapeEditor(), TEXT("EColorChannel"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EColorChannel(EColorChannel_StaticEnum, TEXT("/Script/LandscapeEditor"));
static class UEnum* ELandscapeConvertMode_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern LANDSCAPEEDITOR_API class UEnum* Z_Construct_UEnum_LandscapeEditor_ELandscapeConvertMode();
		extern LANDSCAPEEDITOR_API class UPackage* Z_Construct_UPackage_LandscapeEditor();
		Singleton = GetStaticEnum(Z_Construct_UEnum_LandscapeEditor_ELandscapeConvertMode, Z_Construct_UPackage_LandscapeEditor(), TEXT("ELandscapeConvertMode"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_ELandscapeConvertMode(ELandscapeConvertMode_StaticEnum, TEXT("/Script/LandscapeEditor"));
static class UEnum* ELandscapeToolPasteMode_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern LANDSCAPEEDITOR_API class UEnum* Z_Construct_UEnum_LandscapeEditor_ELandscapeToolPasteMode();
		extern LANDSCAPEEDITOR_API class UPackage* Z_Construct_UPackage_LandscapeEditor();
		Singleton = GetStaticEnum(Z_Construct_UEnum_LandscapeEditor_ELandscapeToolPasteMode, Z_Construct_UPackage_LandscapeEditor(), TEXT("ELandscapeToolPasteMode"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_ELandscapeToolPasteMode(ELandscapeToolPasteMode_StaticEnum, TEXT("/Script/LandscapeEditor"));
static class UEnum* ELandscapeToolNoiseMode_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern LANDSCAPEEDITOR_API class UEnum* Z_Construct_UEnum_LandscapeEditor_ELandscapeToolNoiseMode();
		extern LANDSCAPEEDITOR_API class UPackage* Z_Construct_UPackage_LandscapeEditor();
		Singleton = GetStaticEnum(Z_Construct_UEnum_LandscapeEditor_ELandscapeToolNoiseMode, Z_Construct_UPackage_LandscapeEditor(), TEXT("ELandscapeToolNoiseMode"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_ELandscapeToolNoiseMode(ELandscapeToolNoiseMode_StaticEnum, TEXT("/Script/LandscapeEditor"));
static class UEnum* ELandscapeToolHydroErosionMode_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern LANDSCAPEEDITOR_API class UEnum* Z_Construct_UEnum_LandscapeEditor_ELandscapeToolHydroErosionMode();
		extern LANDSCAPEEDITOR_API class UPackage* Z_Construct_UPackage_LandscapeEditor();
		Singleton = GetStaticEnum(Z_Construct_UEnum_LandscapeEditor_ELandscapeToolHydroErosionMode, Z_Construct_UPackage_LandscapeEditor(), TEXT("ELandscapeToolHydroErosionMode"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_ELandscapeToolHydroErosionMode(ELandscapeToolHydroErosionMode_StaticEnum, TEXT("/Script/LandscapeEditor"));
static class UEnum* ELandscapeToolErosionMode_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern LANDSCAPEEDITOR_API class UEnum* Z_Construct_UEnum_LandscapeEditor_ELandscapeToolErosionMode();
		extern LANDSCAPEEDITOR_API class UPackage* Z_Construct_UPackage_LandscapeEditor();
		Singleton = GetStaticEnum(Z_Construct_UEnum_LandscapeEditor_ELandscapeToolErosionMode, Z_Construct_UPackage_LandscapeEditor(), TEXT("ELandscapeToolErosionMode"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_ELandscapeToolErosionMode(ELandscapeToolErosionMode_StaticEnum, TEXT("/Script/LandscapeEditor"));
static class UEnum* ELandscapeToolFlattenMode_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern LANDSCAPEEDITOR_API class UEnum* Z_Construct_UEnum_LandscapeEditor_ELandscapeToolFlattenMode();
		extern LANDSCAPEEDITOR_API class UPackage* Z_Construct_UPackage_LandscapeEditor();
		Singleton = GetStaticEnum(Z_Construct_UEnum_LandscapeEditor_ELandscapeToolFlattenMode, Z_Construct_UPackage_LandscapeEditor(), TEXT("ELandscapeToolFlattenMode"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_ELandscapeToolFlattenMode(ELandscapeToolFlattenMode_StaticEnum, TEXT("/Script/LandscapeEditor"));
class UScriptStruct* FLandscapePatternBrushWorldSpaceSettings::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern LANDSCAPEEDITOR_API class UScriptStruct* Z_Construct_UScriptStruct_FLandscapePatternBrushWorldSpaceSettings();
		extern LANDSCAPEEDITOR_API uint32 Get_Z_Construct_UScriptStruct_FLandscapePatternBrushWorldSpaceSettings_CRC();
		extern LANDSCAPEEDITOR_API class UPackage* Z_Construct_UPackage_LandscapeEditor();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FLandscapePatternBrushWorldSpaceSettings, Z_Construct_UPackage_LandscapeEditor(), TEXT("LandscapePatternBrushWorldSpaceSettings"), sizeof(FLandscapePatternBrushWorldSpaceSettings), Get_Z_Construct_UScriptStruct_FLandscapePatternBrushWorldSpaceSettings_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FLandscapePatternBrushWorldSpaceSettings(FLandscapePatternBrushWorldSpaceSettings::StaticStruct, TEXT("/Script/LandscapeEditor"));
static struct FScriptStruct_LandscapeEditor_StaticRegisterNativesFLandscapePatternBrushWorldSpaceSettings
{
	FScriptStruct_LandscapeEditor_StaticRegisterNativesFLandscapePatternBrushWorldSpaceSettings()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("LandscapePatternBrushWorldSpaceSettings")),new UScriptStruct::TCppStructOps<FLandscapePatternBrushWorldSpaceSettings>);
	}
} ScriptStruct_LandscapeEditor_StaticRegisterNativesFLandscapePatternBrushWorldSpaceSettings;
class UScriptStruct* FLandscapeImportLayer::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern LANDSCAPEEDITOR_API class UScriptStruct* Z_Construct_UScriptStruct_FLandscapeImportLayer();
		extern LANDSCAPEEDITOR_API uint32 Get_Z_Construct_UScriptStruct_FLandscapeImportLayer_CRC();
		extern LANDSCAPEEDITOR_API class UPackage* Z_Construct_UPackage_LandscapeEditor();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FLandscapeImportLayer, Z_Construct_UPackage_LandscapeEditor(), TEXT("LandscapeImportLayer"), sizeof(FLandscapeImportLayer), Get_Z_Construct_UScriptStruct_FLandscapeImportLayer_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FLandscapeImportLayer(FLandscapeImportLayer::StaticStruct, TEXT("/Script/LandscapeEditor"));
static struct FScriptStruct_LandscapeEditor_StaticRegisterNativesFLandscapeImportLayer
{
	FScriptStruct_LandscapeEditor_StaticRegisterNativesFLandscapeImportLayer()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("LandscapeImportLayer")),new UScriptStruct::TCppStructOps<FLandscapeImportLayer>);
	}
} ScriptStruct_LandscapeEditor_StaticRegisterNativesFLandscapeImportLayer;
class UScriptStruct* FGizmoImportLayer::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern LANDSCAPEEDITOR_API class UScriptStruct* Z_Construct_UScriptStruct_FGizmoImportLayer();
		extern LANDSCAPEEDITOR_API uint32 Get_Z_Construct_UScriptStruct_FGizmoImportLayer_CRC();
		extern LANDSCAPEEDITOR_API class UPackage* Z_Construct_UPackage_LandscapeEditor();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FGizmoImportLayer, Z_Construct_UPackage_LandscapeEditor(), TEXT("GizmoImportLayer"), sizeof(FGizmoImportLayer), Get_Z_Construct_UScriptStruct_FGizmoImportLayer_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FGizmoImportLayer(FGizmoImportLayer::StaticStruct, TEXT("/Script/LandscapeEditor"));
static struct FScriptStruct_LandscapeEditor_StaticRegisterNativesFGizmoImportLayer
{
	FScriptStruct_LandscapeEditor_StaticRegisterNativesFGizmoImportLayer()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("GizmoImportLayer")),new UScriptStruct::TCppStructOps<FGizmoImportLayer>);
	}
} ScriptStruct_LandscapeEditor_StaticRegisterNativesFGizmoImportLayer;
	void ULandscapeEditorObject::StaticRegisterNativesULandscapeEditorObject()
	{
	}
	IMPLEMENT_CLASS(ULandscapeEditorObject, 1561157938);
	void ALandscapePlaceholder::StaticRegisterNativesALandscapePlaceholder()
	{
	}
	IMPLEMENT_CLASS(ALandscapePlaceholder, 3931403785);
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	UNREALED_API class UClass* Z_Construct_UClass_UActorFactory();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FVector2D();
	LANDSCAPE_API class UScriptStruct* Z_Construct_UScriptStruct_FLandscapeImportLayerInfo();
	COREUOBJECT_API class UClass* Z_Construct_UClass_UObject();
	LANDSCAPE_API class UEnum* Z_Construct_UEnum_Landscape_ELandscapeLayerPaintingRestriction();
	ENGINE_API class UClass* Z_Construct_UClass_UTexture2D_NoRegister();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FVector();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FRotator();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FIntPoint();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialInterface_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AActor();

	LANDSCAPEEDITOR_API class UClass* Z_Construct_UClass_UActorFactoryLandscape_NoRegister();
	LANDSCAPEEDITOR_API class UClass* Z_Construct_UClass_UActorFactoryLandscape();
	LANDSCAPEEDITOR_API class UEnum* Z_Construct_UEnum_LandscapeEditor_ELandscapeImportLayerError();
	LANDSCAPEEDITOR_API class UEnum* Z_Construct_UEnum_LandscapeEditor_ELandscapeImportHeightmapError();
	LANDSCAPEEDITOR_API class UEnum* Z_Construct_UEnum_LandscapeEditor_ELandscapeMirrorOperation();
	LANDSCAPEEDITOR_API class UEnum* Z_Construct_UEnum_LandscapeEditor_EColorChannel();
	LANDSCAPEEDITOR_API class UEnum* Z_Construct_UEnum_LandscapeEditor_ELandscapeConvertMode();
	LANDSCAPEEDITOR_API class UEnum* Z_Construct_UEnum_LandscapeEditor_ELandscapeToolPasteMode();
	LANDSCAPEEDITOR_API class UEnum* Z_Construct_UEnum_LandscapeEditor_ELandscapeToolNoiseMode();
	LANDSCAPEEDITOR_API class UEnum* Z_Construct_UEnum_LandscapeEditor_ELandscapeToolHydroErosionMode();
	LANDSCAPEEDITOR_API class UEnum* Z_Construct_UEnum_LandscapeEditor_ELandscapeToolErosionMode();
	LANDSCAPEEDITOR_API class UEnum* Z_Construct_UEnum_LandscapeEditor_ELandscapeToolFlattenMode();
	LANDSCAPEEDITOR_API class UScriptStruct* Z_Construct_UScriptStruct_FLandscapePatternBrushWorldSpaceSettings();
	LANDSCAPEEDITOR_API class UScriptStruct* Z_Construct_UScriptStruct_FLandscapeImportLayer();
	LANDSCAPEEDITOR_API class UScriptStruct* Z_Construct_UScriptStruct_FGizmoImportLayer();
	LANDSCAPEEDITOR_API class UClass* Z_Construct_UClass_ULandscapeEditorObject_NoRegister();
	LANDSCAPEEDITOR_API class UClass* Z_Construct_UClass_ULandscapeEditorObject();
	LANDSCAPEEDITOR_API class UClass* Z_Construct_UClass_ALandscapePlaceholder_NoRegister();
	LANDSCAPEEDITOR_API class UClass* Z_Construct_UClass_ALandscapePlaceholder();
	LANDSCAPEEDITOR_API class UPackage* Z_Construct_UPackage_LandscapeEditor();
	UClass* Z_Construct_UClass_UActorFactoryLandscape_NoRegister()
	{
		return UActorFactoryLandscape::StaticClass();
	}
	UClass* Z_Construct_UClass_UActorFactoryLandscape()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UActorFactory();
			Z_Construct_UPackage_LandscapeEditor();
			OuterClass = UActorFactoryLandscape::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x2008308C;


				OuterClass->ClassConfigName = FName(TEXT("Editor"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Classes/ActorFactoryLandscape.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Private/Classes/ActorFactoryLandscape.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UActorFactoryLandscape(Z_Construct_UClass_UActorFactoryLandscape, TEXT("UActorFactoryLandscape"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UActorFactoryLandscape);
	UEnum* Z_Construct_UEnum_LandscapeEditor_ELandscapeImportLayerError()
	{
		UPackage* Outer=Z_Construct_UPackage_LandscapeEditor();
		extern uint32 Get_Z_Construct_UEnum_LandscapeEditor_ELandscapeImportLayerError_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ELandscapeImportLayerError"), 0, Get_Z_Construct_UEnum_LandscapeEditor_ELandscapeImportLayerError_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ELandscapeImportLayerError"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ELandscapeImportLayerError::None")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ELandscapeImportLayerError::MissingLayerInfo")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ELandscapeImportLayerError::FileNotFound")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ELandscapeImportLayerError::FileSizeMismatch")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ELandscapeImportLayerError::CorruptFile")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ELandscapeImportLayerError::ColorPng")), 5));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ELandscapeImportLayerError::ELandscapeImportLayerError_MAX")), 6));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_LandscapeEditor_ELandscapeImportLayerError_CRC() { return 834631133U; }
	UEnum* Z_Construct_UEnum_LandscapeEditor_ELandscapeImportHeightmapError()
	{
		UPackage* Outer=Z_Construct_UPackage_LandscapeEditor();
		extern uint32 Get_Z_Construct_UEnum_LandscapeEditor_ELandscapeImportHeightmapError_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ELandscapeImportHeightmapError"), 0, Get_Z_Construct_UEnum_LandscapeEditor_ELandscapeImportHeightmapError_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ELandscapeImportHeightmapError"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ELandscapeImportHeightmapError::None")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ELandscapeImportHeightmapError::FileNotFound")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ELandscapeImportHeightmapError::InvalidSize")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ELandscapeImportHeightmapError::CorruptFile")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ELandscapeImportHeightmapError::ColorPng")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ELandscapeImportHeightmapError::LowBitDepth")), 5));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ELandscapeImportHeightmapError::ELandscapeImportHeightmapError_MAX")), 6));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_LandscapeEditor_ELandscapeImportHeightmapError_CRC() { return 501443924U; }
	UEnum* Z_Construct_UEnum_LandscapeEditor_ELandscapeMirrorOperation()
	{
		UPackage* Outer=Z_Construct_UPackage_LandscapeEditor();
		extern uint32 Get_Z_Construct_UEnum_LandscapeEditor_ELandscapeMirrorOperation_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ELandscapeMirrorOperation"), 0, Get_Z_Construct_UEnum_LandscapeEditor_ELandscapeMirrorOperation_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ELandscapeMirrorOperation"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ELandscapeMirrorOperation::MinusXToPlusX")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ELandscapeMirrorOperation::PlusXToMinusX")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ELandscapeMirrorOperation::MinusYToPlusY")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ELandscapeMirrorOperation::PlusYToMinusY")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ELandscapeMirrorOperation::ELandscapeMirrorOperation_MAX")), 4));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("MinusXToPlusX.DisplayName"), TEXT("-X to +X"));
			MetaData->SetValue(ReturnEnum, TEXT("MinusYToPlusY.DisplayName"), TEXT("-Y to +Y"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
			MetaData->SetValue(ReturnEnum, TEXT("PlusXToMinusX.DisplayName"), TEXT("+X to -X"));
			MetaData->SetValue(ReturnEnum, TEXT("PlusYToMinusY.DisplayName"), TEXT("+Y to -Y"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_LandscapeEditor_ELandscapeMirrorOperation_CRC() { return 1362599502U; }
	UEnum* Z_Construct_UEnum_LandscapeEditor_EColorChannel()
	{
		UPackage* Outer=Z_Construct_UPackage_LandscapeEditor();
		extern uint32 Get_Z_Construct_UEnum_LandscapeEditor_EColorChannel_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EColorChannel"), 0, Get_Z_Construct_UEnum_LandscapeEditor_EColorChannel_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EColorChannel"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EColorChannel::Red")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EColorChannel::Green")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EColorChannel::Blue")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EColorChannel::Alpha")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EColorChannel::EColorChannel_MAX")), 4));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_LandscapeEditor_EColorChannel_CRC() { return 2214272356U; }
	UEnum* Z_Construct_UEnum_LandscapeEditor_ELandscapeConvertMode()
	{
		UPackage* Outer=Z_Construct_UPackage_LandscapeEditor();
		extern uint32 Get_Z_Construct_UEnum_LandscapeEditor_ELandscapeConvertMode_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ELandscapeConvertMode"), 0, Get_Z_Construct_UEnum_LandscapeEditor_ELandscapeConvertMode_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ELandscapeConvertMode"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ELandscapeConvertMode::Expand")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ELandscapeConvertMode::Clip")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ELandscapeConvertMode::Resample")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ELandscapeConvertMode::ELandscapeConvertMode_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("Clip.ToolTip"), TEXT("Given the new component size, the edges of the landscape will be trimmed until its overall size is a whole number of landscape components."));
			MetaData->SetValue(ReturnEnum, TEXT("Expand.ToolTip"), TEXT("Given the new component size, the edges of the landscape will be expanded as necessary until its overall size is a whole number of landscape components."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
			MetaData->SetValue(ReturnEnum, TEXT("Resample.ToolTip"), TEXT("The landscape will have the same overall size in the world, and have the same number of components. Existing landscape geometry and layer data will be resampled to match the new resolution."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_LandscapeEditor_ELandscapeConvertMode_CRC() { return 1266947959U; }
	UEnum* Z_Construct_UEnum_LandscapeEditor_ELandscapeToolPasteMode()
	{
		UPackage* Outer=Z_Construct_UPackage_LandscapeEditor();
		extern uint32 Get_Z_Construct_UEnum_LandscapeEditor_ELandscapeToolPasteMode_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ELandscapeToolPasteMode"), 0, Get_Z_Construct_UEnum_LandscapeEditor_ELandscapeToolPasteMode_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ELandscapeToolPasteMode"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ELandscapeToolPasteMode::Both")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ELandscapeToolPasteMode::Raise")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ELandscapeToolPasteMode::Lower")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ELandscapeToolPasteMode::ELandscapeToolPasteMode_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("Both.ToolTip"), TEXT("Paste may both raise and lower values"));
			MetaData->SetValue(ReturnEnum, TEXT("Lower.ToolTip"), TEXT("Paste may only lower values, places where the pasted data would be above the heightmap are left unchanged. Good for copy/pasting valleys or pits"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
			MetaData->SetValue(ReturnEnum, TEXT("Raise.ToolTip"), TEXT("Paste may only raise values, places where the pasted data would be below the heightmap are left unchanged. Good for copy/pasting mountains"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_LandscapeEditor_ELandscapeToolPasteMode_CRC() { return 792964687U; }
	UEnum* Z_Construct_UEnum_LandscapeEditor_ELandscapeToolNoiseMode()
	{
		UPackage* Outer=Z_Construct_UPackage_LandscapeEditor();
		extern uint32 Get_Z_Construct_UEnum_LandscapeEditor_ELandscapeToolNoiseMode_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ELandscapeToolNoiseMode"), 0, Get_Z_Construct_UEnum_LandscapeEditor_ELandscapeToolNoiseMode_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ELandscapeToolNoiseMode"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ELandscapeToolNoiseMode::Both")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ELandscapeToolNoiseMode::Raise")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ELandscapeToolNoiseMode::Lower")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ELandscapeToolNoiseMode::ELandscapeToolNoiseMode_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("Both.ToolTip"), TEXT("Noise will both raise and lower the heightmap"));
			MetaData->SetValue(ReturnEnum, TEXT("Lower.ToolTip"), TEXT("Noise will only lower the heightmap"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
			MetaData->SetValue(ReturnEnum, TEXT("Raise.ToolTip"), TEXT("Noise will only raise the heightmap"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Temp"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_LandscapeEditor_ELandscapeToolNoiseMode_CRC() { return 2346941012U; }
	UEnum* Z_Construct_UEnum_LandscapeEditor_ELandscapeToolHydroErosionMode()
	{
		UPackage* Outer=Z_Construct_UPackage_LandscapeEditor();
		extern uint32 Get_Z_Construct_UEnum_LandscapeEditor_ELandscapeToolHydroErosionMode_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ELandscapeToolHydroErosionMode"), 0, Get_Z_Construct_UEnum_LandscapeEditor_ELandscapeToolHydroErosionMode_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ELandscapeToolHydroErosionMode"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ELandscapeToolHydroErosionMode::Both")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ELandscapeToolHydroErosionMode::Positive")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ELandscapeToolHydroErosionMode::ELandscapeToolHydroErosionMode_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("Both.ToolTip"), TEXT("Rains in some places and not others, randomly"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
			MetaData->SetValue(ReturnEnum, TEXT("Positive.ToolTip"), TEXT("Rain is applied to the entire area"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_LandscapeEditor_ELandscapeToolHydroErosionMode_CRC() { return 2865299033U; }
	UEnum* Z_Construct_UEnum_LandscapeEditor_ELandscapeToolErosionMode()
	{
		UPackage* Outer=Z_Construct_UPackage_LandscapeEditor();
		extern uint32 Get_Z_Construct_UEnum_LandscapeEditor_ELandscapeToolErosionMode_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ELandscapeToolErosionMode"), 0, Get_Z_Construct_UEnum_LandscapeEditor_ELandscapeToolErosionMode_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ELandscapeToolErosionMode"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ELandscapeToolErosionMode::Both")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ELandscapeToolErosionMode::Raise")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ELandscapeToolErosionMode::Lower")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ELandscapeToolErosionMode::ELandscapeToolErosionMode_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("Both.ToolTip"), TEXT("Apply all erosion effects, both raising and lowering the heightmap"));
			MetaData->SetValue(ReturnEnum, TEXT("Lower.ToolTip"), TEXT("Only applies erosion effects that result in lowering the heightmap"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
			MetaData->SetValue(ReturnEnum, TEXT("Raise.ToolTip"), TEXT("Only applies erosion effects that result in raising the heightmap"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_LandscapeEditor_ELandscapeToolErosionMode_CRC() { return 3892353717U; }
	UEnum* Z_Construct_UEnum_LandscapeEditor_ELandscapeToolFlattenMode()
	{
		UPackage* Outer=Z_Construct_UPackage_LandscapeEditor();
		extern uint32 Get_Z_Construct_UEnum_LandscapeEditor_ELandscapeToolFlattenMode_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ELandscapeToolFlattenMode"), 0, Get_Z_Construct_UEnum_LandscapeEditor_ELandscapeToolFlattenMode_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ELandscapeToolFlattenMode"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ELandscapeToolFlattenMode::Both")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ELandscapeToolFlattenMode::Raise")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ELandscapeToolFlattenMode::Lower")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ELandscapeToolFlattenMode::ELandscapeToolFlattenMode_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("Both.ToolTip"), TEXT("Flatten may both raise and lower values"));
			MetaData->SetValue(ReturnEnum, TEXT("Lower.ToolTip"), TEXT("Flatten may only lower values, values below the clicked point will be left unchanged"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
			MetaData->SetValue(ReturnEnum, TEXT("Raise.ToolTip"), TEXT("Flatten may only raise values, values above the clicked point will be left unchanged"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_LandscapeEditor_ELandscapeToolFlattenMode_CRC() { return 1066861468U; }
	UScriptStruct* Z_Construct_UScriptStruct_FLandscapePatternBrushWorldSpaceSettings()
	{
		UPackage* Outer=Z_Construct_UPackage_LandscapeEditor();
		extern uint32 Get_Z_Construct_UScriptStruct_FLandscapePatternBrushWorldSpaceSettings_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("LandscapePatternBrushWorldSpaceSettings"), sizeof(FLandscapePatternBrushWorldSpaceSettings), Get_Z_Construct_UScriptStruct_FLandscapePatternBrushWorldSpaceSettings_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LandscapePatternBrushWorldSpaceSettings"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FLandscapePatternBrushWorldSpaceSettings>, EStructFlags(0x00000001));
			UProperty* NewProp_RepeatSize = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RepeatSize"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(RepeatSize, FLandscapePatternBrushWorldSpaceSettings), 0x0000000000000001);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCenterTextureOnOrigin, FLandscapePatternBrushWorldSpaceSettings, bool);
			UProperty* NewProp_bCenterTextureOnOrigin = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bCenterTextureOnOrigin"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCenterTextureOnOrigin, FLandscapePatternBrushWorldSpaceSettings), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bCenterTextureOnOrigin, FLandscapePatternBrushWorldSpaceSettings), sizeof(bool), true);
			UProperty* NewProp_Rotation = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Rotation"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Rotation, FLandscapePatternBrushWorldSpaceSettings), 0x0000000000000001);
			UProperty* NewProp_Origin = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Origin"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Origin, FLandscapePatternBrushWorldSpaceSettings), 0x0000000000000001, Z_Construct_UScriptStruct_FVector2D());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
			MetaData->SetValue(NewProp_RepeatSize, TEXT("Category"), TEXT("World-Space"));
			MetaData->SetValue(NewProp_RepeatSize, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
			MetaData->SetValue(NewProp_bCenterTextureOnOrigin, TEXT("Category"), TEXT("World-Space"));
			MetaData->SetValue(NewProp_bCenterTextureOnOrigin, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
			MetaData->SetValue(NewProp_bCenterTextureOnOrigin, TEXT("ToolTip"), TEXT("if true, the texture used for the pattern is centered on the PatternOrigin.\nif false, the corner of the texture is placed at the PatternOrigin"));
			MetaData->SetValue(NewProp_Rotation, TEXT("Category"), TEXT("World-Space"));
			MetaData->SetValue(NewProp_Rotation, TEXT("ClampMax"), TEXT("360"));
			MetaData->SetValue(NewProp_Rotation, TEXT("ClampMin"), TEXT("-360"));
			MetaData->SetValue(NewProp_Rotation, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
			MetaData->SetValue(NewProp_Rotation, TEXT("UIMax"), TEXT("180"));
			MetaData->SetValue(NewProp_Rotation, TEXT("UIMin"), TEXT("-180"));
			MetaData->SetValue(NewProp_Origin, TEXT("Category"), TEXT("World-Space"));
			MetaData->SetValue(NewProp_Origin, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FLandscapePatternBrushWorldSpaceSettings_CRC() { return 3548400963U; }
	UScriptStruct* Z_Construct_UScriptStruct_FLandscapeImportLayer()
	{
		UPackage* Outer=Z_Construct_UPackage_LandscapeEditor();
		extern uint32 Get_Z_Construct_UScriptStruct_FLandscapeImportLayer_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("LandscapeImportLayer"), sizeof(FLandscapeImportLayer), Get_Z_Construct_UScriptStruct_FLandscapeImportLayer_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LandscapeImportLayer"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FLandscapeImportLayerInfo(), new UScriptStruct::TCppStructOps<FLandscapeImportLayer>, EStructFlags(0x00000001));
			UProperty* NewProp_ImportError = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ImportError"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(ImportError, FLandscapeImportLayer), 0x0000000000020001, Z_Construct_UEnum_LandscapeEditor_ELandscapeImportLayerError());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
			MetaData->SetValue(NewProp_ImportError, TEXT("Category"), TEXT("Import"));
			MetaData->SetValue(NewProp_ImportError, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FLandscapeImportLayer_CRC() { return 1558359770U; }
	UScriptStruct* Z_Construct_UScriptStruct_FGizmoImportLayer()
	{
		UPackage* Outer=Z_Construct_UPackage_LandscapeEditor();
		extern uint32 Get_Z_Construct_UScriptStruct_FGizmoImportLayer_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("GizmoImportLayer"), sizeof(FGizmoImportLayer), Get_Z_Construct_UScriptStruct_FGizmoImportLayer_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GizmoImportLayer"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FGizmoImportLayer>, EStructFlags(0x00000001));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bNoImport, FGizmoImportLayer, bool);
			UProperty* NewProp_bNoImport = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bNoImport"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bNoImport, FGizmoImportLayer), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bNoImport, FGizmoImportLayer), sizeof(bool), true);
			UProperty* NewProp_LayerName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LayerName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(LayerName, FGizmoImportLayer), 0x0000000000000001);
			UProperty* NewProp_LayerFilename = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LayerFilename"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(LayerFilename, FGizmoImportLayer), 0x0000000000000001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
			MetaData->SetValue(NewProp_bNoImport, TEXT("Category"), TEXT("Import"));
			MetaData->SetValue(NewProp_bNoImport, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
			MetaData->SetValue(NewProp_LayerName, TEXT("Category"), TEXT("Import"));
			MetaData->SetValue(NewProp_LayerName, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
			MetaData->SetValue(NewProp_LayerFilename, TEXT("Category"), TEXT("Import"));
			MetaData->SetValue(NewProp_LayerFilename, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FGizmoImportLayer_CRC() { return 3965293630U; }
	UClass* Z_Construct_UClass_ULandscapeEditorObject_NoRegister()
	{
		return ULandscapeEditorObject::StaticClass();
	}
	UClass* Z_Construct_UClass_ULandscapeEditorObject()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_LandscapeEditor();
			OuterClass = ULandscapeEditorObject::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_PaintingRestriction = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PaintingRestriction"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(PaintingRestriction, ULandscapeEditorObject), 0x0000000400000001, Z_Construct_UEnum_Landscape_ELandscapeLayerPaintingRestriction());
				UProperty* NewProp_BrushComponentSize = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BrushComponentSize"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(BrushComponentSize, ULandscapeEditorObject), 0x0000000400000001);
				UProperty* NewProp_AlphaTextureData = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AlphaTextureData"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(AlphaTextureData, ULandscapeEditorObject), 0x0000000400000000);
				UProperty* NewProp_AlphaTextureData_Inner = new(EC_InternalUseOnlyConstructor, NewProp_AlphaTextureData, TEXT("AlphaTextureData"), RF_Public|RF_Transient|RF_Native) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
				UProperty* NewProp_AlphaTextureSizeY = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AlphaTextureSizeY"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(AlphaTextureSizeY, ULandscapeEditorObject), 0x0000000400000000);
				UProperty* NewProp_AlphaTextureSizeX = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AlphaTextureSizeX"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(AlphaTextureSizeX, ULandscapeEditorObject), 0x0000000400000000);
				UProperty* NewProp_AlphaTextureChannel = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AlphaTextureChannel"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(AlphaTextureChannel, ULandscapeEditorObject), 0x0000000400000001, Z_Construct_UEnum_LandscapeEditor_EColorChannel());
				UProperty* NewProp_AlphaTexture = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AlphaTexture"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(AlphaTexture, ULandscapeEditorObject), 0x0000000400000001, Z_Construct_UClass_UTexture2D_NoRegister());
				UProperty* NewProp_WorldSpacePatternBrushSettings = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WorldSpacePatternBrushSettings"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(WorldSpacePatternBrushSettings, ULandscapeEditorObject), 0x0000000400000001, Z_Construct_UScriptStruct_FLandscapePatternBrushWorldSpaceSettings());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseWorldSpacePatternBrush, ULandscapeEditorObject, bool);
				UProperty* NewProp_bUseWorldSpacePatternBrush = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUseWorldSpacePatternBrush"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseWorldSpacePatternBrush, ULandscapeEditorObject), 0x0000000400000001, CPP_BOOL_PROPERTY_BITMASK(bUseWorldSpacePatternBrush, ULandscapeEditorObject), sizeof(bool), true);
				UProperty* NewProp_AlphaBrushPanV = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AlphaBrushPanV"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(AlphaBrushPanV, ULandscapeEditorObject), 0x0000000400000001);
				UProperty* NewProp_AlphaBrushPanU = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AlphaBrushPanU"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(AlphaBrushPanU, ULandscapeEditorObject), 0x0000000400000001);
				UProperty* NewProp_AlphaBrushRotation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AlphaBrushRotation"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(AlphaBrushRotation, ULandscapeEditorObject), 0x0000000400000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAlphaBrushAutoRotate, ULandscapeEditorObject, bool);
				UProperty* NewProp_bAlphaBrushAutoRotate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAlphaBrushAutoRotate"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAlphaBrushAutoRotate, ULandscapeEditorObject), 0x0000000400000001, CPP_BOOL_PROPERTY_BITMASK(bAlphaBrushAutoRotate, ULandscapeEditorObject), sizeof(bool), true);
				UProperty* NewProp_AlphaBrushScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AlphaBrushScale"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(AlphaBrushScale, ULandscapeEditorObject), 0x0000000400000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseClayBrush, ULandscapeEditorObject, bool);
				UProperty* NewProp_bUseClayBrush = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUseClayBrush"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseClayBrush, ULandscapeEditorObject), 0x0000000400000001, CPP_BOOL_PROPERTY_BITMASK(bUseClayBrush, ULandscapeEditorObject), sizeof(bool), true);
				UProperty* NewProp_BrushFalloff = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BrushFalloff"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(BrushFalloff, ULandscapeEditorObject), 0x0000000400000001);
				UProperty* NewProp_BrushRadius = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BrushRadius"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(BrushRadius, ULandscapeEditorObject), 0x0000000400000001);
				UProperty* NewProp_ImportLandscape_Layers = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ImportLandscape_Layers"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ImportLandscape_Layers, ULandscapeEditorObject), 0x0000000400000041);
				UProperty* NewProp_ImportLandscape_Layers_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ImportLandscape_Layers, TEXT("ImportLandscape_Layers"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FLandscapeImportLayer());
				UProperty* NewProp_ImportLandscape_Data = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ImportLandscape_Data"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ImportLandscape_Data, ULandscapeEditorObject), 0x0000000400000000);
				UProperty* NewProp_ImportLandscape_Data_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ImportLandscape_Data, TEXT("ImportLandscape_Data"), RF_Public|RF_Transient|RF_Native) UUInt16Property(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
				UProperty* NewProp_ImportLandscape_Height = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ImportLandscape_Height"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ImportLandscape_Height, ULandscapeEditorObject), 0x0000000400000000);
				UProperty* NewProp_ImportLandscape_Width = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ImportLandscape_Width"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ImportLandscape_Width, ULandscapeEditorObject), 0x0000000400000000);
				UProperty* NewProp_ImportLandscape_HeightmapFilename = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ImportLandscape_HeightmapFilename"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ImportLandscape_HeightmapFilename, ULandscapeEditorObject), 0x0000000400000001);
				UProperty* NewProp_ImportLandscape_HeightmapError = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ImportLandscape_HeightmapError"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(ImportLandscape_HeightmapError, ULandscapeEditorObject), 0x0000000400020001, Z_Construct_UEnum_LandscapeEditor_ELandscapeImportHeightmapError());
				UProperty* NewProp_NewLandscape_Scale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NewLandscape_Scale"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(NewLandscape_Scale, ULandscapeEditorObject), 0x0000000000000001, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_NewLandscape_Rotation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NewLandscape_Rotation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(NewLandscape_Rotation, ULandscapeEditorObject), 0x0000000000000001, Z_Construct_UScriptStruct_FRotator());
				UProperty* NewProp_NewLandscape_Location = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NewLandscape_Location"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(NewLandscape_Location, ULandscapeEditorObject), 0x0000000000000001, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_NewLandscape_ComponentCount = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NewLandscape_ComponentCount"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(NewLandscape_ComponentCount, ULandscapeEditorObject), 0x0000000000000001, Z_Construct_UScriptStruct_FIntPoint());
				UProperty* NewProp_NewLandscape_SectionsPerComponent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NewLandscape_SectionsPerComponent"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(NewLandscape_SectionsPerComponent, ULandscapeEditorObject), 0x0000000000000001);
				UProperty* NewProp_NewLandscape_QuadsPerSection = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NewLandscape_QuadsPerSection"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(NewLandscape_QuadsPerSection, ULandscapeEditorObject), 0x0000000000000001);
				UProperty* NewProp_NewLandscape_Material = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NewLandscape_Material"), RF_Public|RF_Transient|RF_Native) UWeakObjectProperty(CPP_PROPERTY_BASE(NewLandscape_Material, ULandscapeEditorObject), 0x0004000000000001, Z_Construct_UClass_UMaterialInterface_NoRegister());
				UProperty* NewProp_ResizeLandscape_ConvertMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ResizeLandscape_ConvertMode"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(ResizeLandscape_ConvertMode, ULandscapeEditorObject), 0x0000000400000001, Z_Construct_UEnum_LandscapeEditor_ELandscapeConvertMode());
				UProperty* NewProp_ResizeLandscape_ComponentCount = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ResizeLandscape_ComponentCount"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ResizeLandscape_ComponentCount, ULandscapeEditorObject), 0x0000000400000001, Z_Construct_UScriptStruct_FIntPoint());
				UProperty* NewProp_ResizeLandscape_SectionsPerComponent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ResizeLandscape_SectionsPerComponent"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ResizeLandscape_SectionsPerComponent, ULandscapeEditorObject), 0x0000000400000001);
				UProperty* NewProp_ResizeLandscape_QuadsPerSection = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ResizeLandscape_QuadsPerSection"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ResizeLandscape_QuadsPerSection, ULandscapeEditorObject), 0x0000000400000001);
				UProperty* NewProp_MirrorOp = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MirrorOp"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(MirrorOp, ULandscapeEditorObject), 0x0000000400000001, Z_Construct_UEnum_LandscapeEditor_ELandscapeMirrorOperation());
				UProperty* NewProp_MirrorPoint = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MirrorPoint"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MirrorPoint, ULandscapeEditorObject), 0x0000000000002001, Z_Construct_UScriptStruct_FVector2D());
				UProperty* NewProp_GizmoImportLayers = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GizmoImportLayers"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(GizmoImportLayers, ULandscapeEditorObject), 0x0000040400000001);
				UProperty* NewProp_GizmoImportLayers_Inner = new(EC_InternalUseOnlyConstructor, NewProp_GizmoImportLayers, TEXT("GizmoImportLayers"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FGizmoImportLayer());
				UProperty* NewProp_GizmoImportSize = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GizmoImportSize"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(GizmoImportSize, ULandscapeEditorObject), 0x0000040400000001, Z_Construct_UScriptStruct_FIntPoint());
				UProperty* NewProp_GizmoHeightmapFilenameString = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GizmoHeightmapFilenameString"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(GizmoHeightmapFilenameString, ULandscapeEditorObject), 0x0000040400000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSmoothGizmoBrush, ULandscapeEditorObject, bool);
				UProperty* NewProp_bSmoothGizmoBrush = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bSmoothGizmoBrush"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSmoothGizmoBrush, ULandscapeEditorObject), 0x0000000400000001, CPP_BOOL_PROPERTY_BITMASK(bSmoothGizmoBrush, ULandscapeEditorObject), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSnapGizmo, ULandscapeEditorObject, bool);
				UProperty* NewProp_bSnapGizmo = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bSnapGizmo"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSnapGizmo, ULandscapeEditorObject), 0x0000000400000001, CPP_BOOL_PROPERTY_BITMASK(bSnapGizmo, ULandscapeEditorObject), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bApplyToAllTargets, ULandscapeEditorObject, bool);
				UProperty* NewProp_bApplyToAllTargets = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bApplyToAllTargets"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bApplyToAllTargets, ULandscapeEditorObject), 0x0000000400000001, CPP_BOOL_PROPERTY_BITMASK(bApplyToAllTargets, ULandscapeEditorObject), sizeof(bool), true);
				UProperty* NewProp_PasteMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PasteMode"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(PasteMode, ULandscapeEditorObject), 0x0000000400000001, Z_Construct_UEnum_LandscapeEditor_ELandscapeToolPasteMode());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseNegativeMask, ULandscapeEditorObject, bool);
				UProperty* NewProp_bUseNegativeMask = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUseNegativeMask"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseNegativeMask, ULandscapeEditorObject), 0x0000000400000001, CPP_BOOL_PROPERTY_BITMASK(bUseNegativeMask, ULandscapeEditorObject), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseSelectedRegion, ULandscapeEditorObject, bool);
				UProperty* NewProp_bUseSelectedRegion = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUseSelectedRegion"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseSelectedRegion, ULandscapeEditorObject), 0x0000000400000001, CPP_BOOL_PROPERTY_BITMASK(bUseSelectedRegion, ULandscapeEditorObject), sizeof(bool), true);
				UProperty* NewProp_NoiseScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NoiseScale"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(NoiseScale, ULandscapeEditorObject), 0x0000000400000001);
				UProperty* NewProp_NoiseMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NoiseMode"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(NoiseMode, ULandscapeEditorObject), 0x0000000400000001, Z_Construct_UEnum_LandscapeEditor_ELandscapeToolNoiseMode());
				UProperty* NewProp_HErosionDetailScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HErosionDetailScale"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(HErosionDetailScale, ULandscapeEditorObject), 0x0000000400000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bHErosionDetailSmooth, ULandscapeEditorObject, bool);
				UProperty* NewProp_bHErosionDetailSmooth = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bHErosionDetailSmooth"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bHErosionDetailSmooth, ULandscapeEditorObject), 0x0000000400000000, CPP_BOOL_PROPERTY_BITMASK(bHErosionDetailSmooth, ULandscapeEditorObject), sizeof(bool), true);
				UProperty* NewProp_RainDistScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RainDistScale"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(RainDistScale, ULandscapeEditorObject), 0x0000000400000001);
				UProperty* NewProp_RainDistMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RainDistMode"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(RainDistMode, ULandscapeEditorObject), 0x0000000400000001, Z_Construct_UEnum_LandscapeEditor_ELandscapeToolHydroErosionMode());
				UProperty* NewProp_HErodeIterationNum = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HErodeIterationNum"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(HErodeIterationNum, ULandscapeEditorObject), 0x0000000400000001);
				UProperty* NewProp_SedimentCapacity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SedimentCapacity"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(SedimentCapacity, ULandscapeEditorObject), 0x0000000400000001);
				UProperty* NewProp_RainAmount = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RainAmount"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(RainAmount, ULandscapeEditorObject), 0x0000000400000001);
				UProperty* NewProp_ErosionNoiseScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ErosionNoiseScale"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ErosionNoiseScale, ULandscapeEditorObject), 0x0000000400000001);
				UProperty* NewProp_ErosionNoiseMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ErosionNoiseMode"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(ErosionNoiseMode, ULandscapeEditorObject), 0x0000000400000001, Z_Construct_UEnum_LandscapeEditor_ELandscapeToolErosionMode());
				UProperty* NewProp_ErodeIterationNum = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ErodeIterationNum"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ErodeIterationNum, ULandscapeEditorObject), 0x0000000400000001);
				UProperty* NewProp_ErodeSurfaceThickness = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ErodeSurfaceThickness"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ErodeSurfaceThickness, ULandscapeEditorObject), 0x0000000400000001);
				UProperty* NewProp_ErodeThresh = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ErodeThresh"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ErodeThresh, ULandscapeEditorObject), 0x0000000400000001);
				UProperty* NewProp_DetailScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DetailScale"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DetailScale, ULandscapeEditorObject), 0x0000000400000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDetailSmooth, ULandscapeEditorObject, bool);
				UProperty* NewProp_bDetailSmooth = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bDetailSmooth"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDetailSmooth, ULandscapeEditorObject), 0x0000000400000000, CPP_BOOL_PROPERTY_BITMASK(bDetailSmooth, ULandscapeEditorObject), sizeof(bool), true);
				UProperty* NewProp_SmoothFilterKernelSize = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SmoothFilterKernelSize"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(SmoothFilterKernelSize, ULandscapeEditorObject), 0x0000000400000001);
				UProperty* NewProp_RampSideFalloff = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RampSideFalloff"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(RampSideFalloff, ULandscapeEditorObject), 0x0000000400000001);
				UProperty* NewProp_RampWidth = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RampWidth"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(RampWidth, ULandscapeEditorObject), 0x0000000400000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bShowFlattenTargetPreview, ULandscapeEditorObject, bool);
				UProperty* NewProp_bShowFlattenTargetPreview = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bShowFlattenTargetPreview"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bShowFlattenTargetPreview, ULandscapeEditorObject), 0x0000040400000001, CPP_BOOL_PROPERTY_BITMASK(bShowFlattenTargetPreview, ULandscapeEditorObject), sizeof(bool), true);
				UProperty* NewProp_FlattenTarget = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FlattenTarget"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(FlattenTarget, ULandscapeEditorObject), 0x0000000400000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseFlattenTarget, ULandscapeEditorObject, bool);
				UProperty* NewProp_bUseFlattenTarget = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUseFlattenTarget"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseFlattenTarget, ULandscapeEditorObject), 0x0000000400000000, CPP_BOOL_PROPERTY_BITMASK(bUseFlattenTarget, ULandscapeEditorObject), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bPickValuePerApply, ULandscapeEditorObject, bool);
				UProperty* NewProp_bPickValuePerApply = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bPickValuePerApply"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bPickValuePerApply, ULandscapeEditorObject), 0x0000000400000001, CPP_BOOL_PROPERTY_BITMASK(bPickValuePerApply, ULandscapeEditorObject), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseSlopeFlatten, ULandscapeEditorObject, bool);
				UProperty* NewProp_bUseSlopeFlatten = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUseSlopeFlatten"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseSlopeFlatten, ULandscapeEditorObject), 0x0000000400000001, CPP_BOOL_PROPERTY_BITMASK(bUseSlopeFlatten, ULandscapeEditorObject), sizeof(bool), true);
				UProperty* NewProp_FlattenMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FlattenMode"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(FlattenMode, ULandscapeEditorObject), 0x0000000400000001, Z_Construct_UEnum_LandscapeEditor_ELandscapeToolFlattenMode());
				UProperty* NewProp_MaximumValueRadius = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaximumValueRadius"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MaximumValueRadius, ULandscapeEditorObject), 0x0000000400000000);
				UProperty* NewProp_WeightTargetValue = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WeightTargetValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(WeightTargetValue, ULandscapeEditorObject), 0x0000000400000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseWeightTargetValue, ULandscapeEditorObject, bool);
				UProperty* NewProp_bUseWeightTargetValue = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUseWeightTargetValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseWeightTargetValue, ULandscapeEditorObject), 0x0000000400000000, CPP_BOOL_PROPERTY_BITMASK(bUseWeightTargetValue, ULandscapeEditorObject), sizeof(bool), true);
				UProperty* NewProp_ToolStrength = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ToolStrength"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ToolStrength, ULandscapeEditorObject), 0x0000000400000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("LandscapeEditorObject.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
				MetaData->SetValue(NewProp_PaintingRestriction, TEXT("Category"), TEXT("Target Layers"));
				MetaData->SetValue(NewProp_PaintingRestriction, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
				MetaData->SetValue(NewProp_PaintingRestriction, TEXT("ShowForTargetTypes"), TEXT("Weightmap,Visibility"));
				MetaData->SetValue(NewProp_PaintingRestriction, TEXT("ToolTip"), TEXT("Limits painting to only the components that already have the selected layer"));
				MetaData->SetValue(NewProp_BrushComponentSize, TEXT("Category"), TEXT("Brush Settings"));
				MetaData->SetValue(NewProp_BrushComponentSize, TEXT("ClampMax"), TEXT("128"));
				MetaData->SetValue(NewProp_BrushComponentSize, TEXT("ClampMin"), TEXT("1"));
				MetaData->SetValue(NewProp_BrushComponentSize, TEXT("DisplayName"), TEXT("Brush Size"));
				MetaData->SetValue(NewProp_BrushComponentSize, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
				MetaData->SetValue(NewProp_BrushComponentSize, TEXT("ShowForBrushes"), TEXT("BrushSet_Component"));
				MetaData->SetValue(NewProp_BrushComponentSize, TEXT("SliderExponent"), TEXT("3"));
				MetaData->SetValue(NewProp_BrushComponentSize, TEXT("ToolTip"), TEXT("Number of components X/Y to affect at once. 1 means 1x1, 2 means 2x2, etc"));
				MetaData->SetValue(NewProp_BrushComponentSize, TEXT("UIMax"), TEXT("64"));
				MetaData->SetValue(NewProp_BrushComponentSize, TEXT("UIMin"), TEXT("1"));
				MetaData->SetValue(NewProp_AlphaTextureData, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
				MetaData->SetValue(NewProp_AlphaTextureSizeY, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
				MetaData->SetValue(NewProp_AlphaTextureSizeX, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
				MetaData->SetValue(NewProp_AlphaTextureChannel, TEXT("Category"), TEXT("Brush Settings"));
				MetaData->SetValue(NewProp_AlphaTextureChannel, TEXT("DisplayName"), TEXT("Texture Channel"));
				MetaData->SetValue(NewProp_AlphaTextureChannel, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
				MetaData->SetValue(NewProp_AlphaTextureChannel, TEXT("ShowForBrushes"), TEXT("BrushSet_Alpha,BrushSet_Pattern"));
				MetaData->SetValue(NewProp_AlphaTextureChannel, TEXT("ToolTip"), TEXT("Channel of Mask Texture to use"));
				MetaData->SetValue(NewProp_AlphaTexture, TEXT("Category"), TEXT("Brush Settings"));
				MetaData->SetValue(NewProp_AlphaTexture, TEXT("DisplayName"), TEXT("Texture"));
				MetaData->SetValue(NewProp_AlphaTexture, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
				MetaData->SetValue(NewProp_AlphaTexture, TEXT("ShowForBrushes"), TEXT("BrushSet_Alpha,BrushSet_Pattern"));
				MetaData->SetValue(NewProp_AlphaTexture, TEXT("ToolTip"), TEXT("Mask texture to use"));
				MetaData->SetValue(NewProp_WorldSpacePatternBrushSettings, TEXT("Category"), TEXT("Brush Settings"));
				MetaData->SetValue(NewProp_WorldSpacePatternBrushSettings, TEXT("DisplayName"), TEXT("World-Space Settings"));
				MetaData->SetValue(NewProp_WorldSpacePatternBrushSettings, TEXT("EditCondition"), TEXT("bUseWorldSpacePatternBrush"));
				MetaData->SetValue(NewProp_WorldSpacePatternBrushSettings, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
				MetaData->SetValue(NewProp_WorldSpacePatternBrushSettings, TEXT("ShowForBrushes"), TEXT("BrushSet_Pattern"));
				MetaData->SetValue(NewProp_bUseWorldSpacePatternBrush, TEXT("Category"), TEXT("Brush Settings"));
				MetaData->SetValue(NewProp_bUseWorldSpacePatternBrush, TEXT("DisplayName"), TEXT("Use World-Space"));
				MetaData->SetValue(NewProp_bUseWorldSpacePatternBrush, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
				MetaData->SetValue(NewProp_bUseWorldSpacePatternBrush, TEXT("ShowForBrushes"), TEXT("BrushSet_Pattern"));
				MetaData->SetValue(NewProp_AlphaBrushPanV, TEXT("Category"), TEXT("Brush Settings"));
				MetaData->SetValue(NewProp_AlphaBrushPanV, TEXT("ClampMax"), TEXT("1"));
				MetaData->SetValue(NewProp_AlphaBrushPanV, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_AlphaBrushPanV, TEXT("DisplayName"), TEXT("Texture Pan V"));
				MetaData->SetValue(NewProp_AlphaBrushPanV, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
				MetaData->SetValue(NewProp_AlphaBrushPanV, TEXT("ShowForBrushes"), TEXT("BrushSet_Pattern"));
				MetaData->SetValue(NewProp_AlphaBrushPanV, TEXT("ToolTip"), TEXT("Vertically offsets the brush mask texture"));
				MetaData->SetValue(NewProp_AlphaBrushPanU, TEXT("Category"), TEXT("Brush Settings"));
				MetaData->SetValue(NewProp_AlphaBrushPanU, TEXT("ClampMax"), TEXT("1"));
				MetaData->SetValue(NewProp_AlphaBrushPanU, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_AlphaBrushPanU, TEXT("DisplayName"), TEXT("Texture Pan U"));
				MetaData->SetValue(NewProp_AlphaBrushPanU, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
				MetaData->SetValue(NewProp_AlphaBrushPanU, TEXT("ShowForBrushes"), TEXT("BrushSet_Pattern"));
				MetaData->SetValue(NewProp_AlphaBrushPanU, TEXT("ToolTip"), TEXT("Horizontally offsets the brush mask texture"));
				MetaData->SetValue(NewProp_AlphaBrushRotation, TEXT("Category"), TEXT("Brush Settings"));
				MetaData->SetValue(NewProp_AlphaBrushRotation, TEXT("ClampMax"), TEXT("360"));
				MetaData->SetValue(NewProp_AlphaBrushRotation, TEXT("ClampMin"), TEXT("-360"));
				MetaData->SetValue(NewProp_AlphaBrushRotation, TEXT("DisplayName"), TEXT("Texture Rotation"));
				MetaData->SetValue(NewProp_AlphaBrushRotation, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
				MetaData->SetValue(NewProp_AlphaBrushRotation, TEXT("ShowForBrushes"), TEXT("BrushSet_Alpha,BrushSet_Pattern"));
				MetaData->SetValue(NewProp_AlphaBrushRotation, TEXT("ToolTip"), TEXT("Rotates the brush mask texture"));
				MetaData->SetValue(NewProp_AlphaBrushRotation, TEXT("UIMax"), TEXT("180"));
				MetaData->SetValue(NewProp_AlphaBrushRotation, TEXT("UIMin"), TEXT("-180"));
				MetaData->SetValue(NewProp_bAlphaBrushAutoRotate, TEXT("Category"), TEXT("Brush Settings"));
				MetaData->SetValue(NewProp_bAlphaBrushAutoRotate, TEXT("DisplayName"), TEXT("Auto-Rotate"));
				MetaData->SetValue(NewProp_bAlphaBrushAutoRotate, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
				MetaData->SetValue(NewProp_bAlphaBrushAutoRotate, TEXT("ShowForBrushes"), TEXT("BrushSet_Alpha"));
				MetaData->SetValue(NewProp_bAlphaBrushAutoRotate, TEXT("ToolTip"), TEXT("Rotate brush to follow mouse"));
				MetaData->SetValue(NewProp_AlphaBrushScale, TEXT("Category"), TEXT("Brush Settings"));
				MetaData->SetValue(NewProp_AlphaBrushScale, TEXT("ClampMax"), TEXT("5"));
				MetaData->SetValue(NewProp_AlphaBrushScale, TEXT("ClampMin"), TEXT("0.005"));
				MetaData->SetValue(NewProp_AlphaBrushScale, TEXT("DisplayName"), TEXT("Texture Scale"));
				MetaData->SetValue(NewProp_AlphaBrushScale, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
				MetaData->SetValue(NewProp_AlphaBrushScale, TEXT("ShowForBrushes"), TEXT("BrushSet_Pattern"));
				MetaData->SetValue(NewProp_AlphaBrushScale, TEXT("SliderExponent"), TEXT("3"));
				MetaData->SetValue(NewProp_AlphaBrushScale, TEXT("ToolTip"), TEXT("Scale of the brush texture. A scale of 1.000 maps the brush texture to the landscape at a 1 pixel = 1 vertex size"));
				MetaData->SetValue(NewProp_bUseClayBrush, TEXT("Category"), TEXT("Brush Settings"));
				MetaData->SetValue(NewProp_bUseClayBrush, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
				MetaData->SetValue(NewProp_bUseClayBrush, TEXT("ShowForBrushes"), TEXT("BrushSet_Circle,BrushSet_Alpha,BrushSet_Pattern"));
				MetaData->SetValue(NewProp_bUseClayBrush, TEXT("ShowForTools"), TEXT("Sculpt"));
				MetaData->SetValue(NewProp_bUseClayBrush, TEXT("ToolTip"), TEXT("Selects the Clay Brush painting mode"));
				MetaData->SetValue(NewProp_BrushFalloff, TEXT("Category"), TEXT("Brush Settings"));
				MetaData->SetValue(NewProp_BrushFalloff, TEXT("ClampMax"), TEXT("1"));
				MetaData->SetValue(NewProp_BrushFalloff, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_BrushFalloff, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
				MetaData->SetValue(NewProp_BrushFalloff, TEXT("ShowForBrushes"), TEXT("BrushSet_Circle,BrushSet_Gizmo,BrushSet_Pattern"));
				MetaData->SetValue(NewProp_BrushFalloff, TEXT("ToolTip"), TEXT("The falloff at the edge of the brush, as a fraction of the brush's size. 0 = no falloff, 1 = all falloff"));
				MetaData->SetValue(NewProp_BrushRadius, TEXT("Category"), TEXT("Brush Settings"));
				MetaData->SetValue(NewProp_BrushRadius, TEXT("ClampMax"), TEXT("65536"));
				MetaData->SetValue(NewProp_BrushRadius, TEXT("ClampMin"), TEXT("1"));
				MetaData->SetValue(NewProp_BrushRadius, TEXT("DisplayName"), TEXT("Brush Size"));
				MetaData->SetValue(NewProp_BrushRadius, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
				MetaData->SetValue(NewProp_BrushRadius, TEXT("ShowForBrushes"), TEXT("BrushSet_Circle,BrushSet_Alpha,BrushSet_Pattern"));
				MetaData->SetValue(NewProp_BrushRadius, TEXT("SliderExponent"), TEXT("3"));
				MetaData->SetValue(NewProp_BrushRadius, TEXT("ToolTip"), TEXT("The radius of the brush, in unreal units"));
				MetaData->SetValue(NewProp_BrushRadius, TEXT("UIMax"), TEXT("8192"));
				MetaData->SetValue(NewProp_BrushRadius, TEXT("UIMin"), TEXT("1"));
				MetaData->SetValue(NewProp_ImportLandscape_Layers, TEXT("Category"), TEXT("New Landscape"));
				MetaData->SetValue(NewProp_ImportLandscape_Layers, TEXT("DisplayName"), TEXT("Layers"));
				MetaData->SetValue(NewProp_ImportLandscape_Layers, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
				MetaData->SetValue(NewProp_ImportLandscape_Layers, TEXT("ShowForTools"), TEXT("NewLandscape"));
				MetaData->SetValue(NewProp_ImportLandscape_Layers, TEXT("ToolTip"), TEXT("The landscape layers that will be created. Only layer names referenced in the material assigned above are shown here. Modify the material to add more layers."));
				MetaData->SetValue(NewProp_ImportLandscape_Data, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
				MetaData->SetValue(NewProp_ImportLandscape_Height, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
				MetaData->SetValue(NewProp_ImportLandscape_Width, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
				MetaData->SetValue(NewProp_ImportLandscape_HeightmapFilename, TEXT("Category"), TEXT("New Landscape"));
				MetaData->SetValue(NewProp_ImportLandscape_HeightmapFilename, TEXT("DisplayName"), TEXT("Heightmap File"));
				MetaData->SetValue(NewProp_ImportLandscape_HeightmapFilename, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
				MetaData->SetValue(NewProp_ImportLandscape_HeightmapFilename, TEXT("ShowForTools"), TEXT("NewLandscape"));
				MetaData->SetValue(NewProp_ImportLandscape_HeightmapFilename, TEXT("ToolTip"), TEXT("Specify a height map file in 16-bit RAW or PNG format"));
				MetaData->SetValue(NewProp_ImportLandscape_HeightmapError, TEXT("Category"), TEXT("New Landscape"));
				MetaData->SetValue(NewProp_ImportLandscape_HeightmapError, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
				MetaData->SetValue(NewProp_ImportLandscape_HeightmapError, TEXT("ShowForTools"), TEXT("NewLandscape"));
				MetaData->SetValue(NewProp_NewLandscape_Scale, TEXT("Category"), TEXT("New Landscape"));
				MetaData->SetValue(NewProp_NewLandscape_Scale, TEXT("DisplayName"), TEXT("Scale"));
				MetaData->SetValue(NewProp_NewLandscape_Scale, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
				MetaData->SetValue(NewProp_NewLandscape_Scale, TEXT("ShowForTools"), TEXT("NewLandscape"));
				MetaData->SetValue(NewProp_NewLandscape_Scale, TEXT("ToolTip"), TEXT("The scale of the new landscape. This is the distance between each vertex on the landscape, defaulting to 100 units."));
				MetaData->SetValue(NewProp_NewLandscape_Rotation, TEXT("Category"), TEXT("New Landscape"));
				MetaData->SetValue(NewProp_NewLandscape_Rotation, TEXT("DisplayName"), TEXT("Rotation"));
				MetaData->SetValue(NewProp_NewLandscape_Rotation, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
				MetaData->SetValue(NewProp_NewLandscape_Rotation, TEXT("ShowForTools"), TEXT("NewLandscape"));
				MetaData->SetValue(NewProp_NewLandscape_Rotation, TEXT("ToolTip"), TEXT("The rotation of the new landscape"));
				MetaData->SetValue(NewProp_NewLandscape_Location, TEXT("Category"), TEXT("New Landscape"));
				MetaData->SetValue(NewProp_NewLandscape_Location, TEXT("DisplayName"), TEXT("Location"));
				MetaData->SetValue(NewProp_NewLandscape_Location, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
				MetaData->SetValue(NewProp_NewLandscape_Location, TEXT("ShowForTools"), TEXT("NewLandscape"));
				MetaData->SetValue(NewProp_NewLandscape_Location, TEXT("ToolTip"), TEXT("The location of the new landscape"));
				MetaData->SetValue(NewProp_NewLandscape_ComponentCount, TEXT("Category"), TEXT("New Landscape"));
				MetaData->SetValue(NewProp_NewLandscape_ComponentCount, TEXT("DisplayName"), TEXT("Number of Components"));
				MetaData->SetValue(NewProp_NewLandscape_ComponentCount, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
				MetaData->SetValue(NewProp_NewLandscape_ComponentCount, TEXT("ShowForTools"), TEXT("NewLandscape"));
				MetaData->SetValue(NewProp_NewLandscape_ComponentCount, TEXT("ToolTip"), TEXT("The number of components in the X and Y direction, determining the overall size of the landscape."));
				MetaData->SetValue(NewProp_NewLandscape_SectionsPerComponent, TEXT("Category"), TEXT("New Landscape"));
				MetaData->SetValue(NewProp_NewLandscape_SectionsPerComponent, TEXT("DisplayName"), TEXT("Sections Per Component"));
				MetaData->SetValue(NewProp_NewLandscape_SectionsPerComponent, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
				MetaData->SetValue(NewProp_NewLandscape_SectionsPerComponent, TEXT("ShowForTools"), TEXT("NewLandscape"));
				MetaData->SetValue(NewProp_NewLandscape_SectionsPerComponent, TEXT("ToolTip"), TEXT("The number of sections in a single landscape component. This along with the section size determines the size of each landscape component. A component is the base unit of rendering and culling."));
				MetaData->SetValue(NewProp_NewLandscape_QuadsPerSection, TEXT("Category"), TEXT("New Landscape"));
				MetaData->SetValue(NewProp_NewLandscape_QuadsPerSection, TEXT("DisplayName"), TEXT("Section Size"));
				MetaData->SetValue(NewProp_NewLandscape_QuadsPerSection, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
				MetaData->SetValue(NewProp_NewLandscape_QuadsPerSection, TEXT("ShowForTools"), TEXT("NewLandscape"));
				MetaData->SetValue(NewProp_NewLandscape_QuadsPerSection, TEXT("ToolTip"), TEXT("The number of quads in a single landscape section. One section is the unit of LOD transition for landscape rendering."));
				MetaData->SetValue(NewProp_NewLandscape_Material, TEXT("Category"), TEXT("New Landscape"));
				MetaData->SetValue(NewProp_NewLandscape_Material, TEXT("DisplayName"), TEXT("Material"));
				MetaData->SetValue(NewProp_NewLandscape_Material, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
				MetaData->SetValue(NewProp_NewLandscape_Material, TEXT("ShowForTools"), TEXT("NewLandscape"));
				MetaData->SetValue(NewProp_NewLandscape_Material, TEXT("ToolTip"), TEXT("Material initially applied to the landscape. Setting a material here exposes properties for setting up layer info based on the landscape blend nodes in the material."));
				MetaData->SetValue(NewProp_ResizeLandscape_ConvertMode, TEXT("Category"), TEXT("Change Component Size"));
				MetaData->SetValue(NewProp_ResizeLandscape_ConvertMode, TEXT("DisplayName"), TEXT("Resize Mode"));
				MetaData->SetValue(NewProp_ResizeLandscape_ConvertMode, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
				MetaData->SetValue(NewProp_ResizeLandscape_ConvertMode, TEXT("ShowForTools"), TEXT("ResizeLandscape"));
				MetaData->SetValue(NewProp_ResizeLandscape_ConvertMode, TEXT("ToolTip"), TEXT("Determines how the new component size will be applied to the existing landscape geometry."));
				MetaData->SetValue(NewProp_ResizeLandscape_ComponentCount, TEXT("Category"), TEXT("Change Component Size"));
				MetaData->SetValue(NewProp_ResizeLandscape_ComponentCount, TEXT("DisplayName"), TEXT("Number of Components"));
				MetaData->SetValue(NewProp_ResizeLandscape_ComponentCount, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
				MetaData->SetValue(NewProp_ResizeLandscape_ComponentCount, TEXT("ShowForTools"), TEXT("ResizeLandscape"));
				MetaData->SetValue(NewProp_ResizeLandscape_ComponentCount, TEXT("ToolTip"), TEXT("Number of components in resulting landscape"));
				MetaData->SetValue(NewProp_ResizeLandscape_SectionsPerComponent, TEXT("Category"), TEXT("Change Component Size"));
				MetaData->SetValue(NewProp_ResizeLandscape_SectionsPerComponent, TEXT("DisplayName"), TEXT("Sections Per Component"));
				MetaData->SetValue(NewProp_ResizeLandscape_SectionsPerComponent, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
				MetaData->SetValue(NewProp_ResizeLandscape_SectionsPerComponent, TEXT("ShowForTools"), TEXT("ResizeLandscape"));
				MetaData->SetValue(NewProp_ResizeLandscape_SectionsPerComponent, TEXT("ToolTip"), TEXT("Number of sections per landscape component"));
				MetaData->SetValue(NewProp_ResizeLandscape_QuadsPerSection, TEXT("Category"), TEXT("Change Component Size"));
				MetaData->SetValue(NewProp_ResizeLandscape_QuadsPerSection, TEXT("DisplayName"), TEXT("Section Size"));
				MetaData->SetValue(NewProp_ResizeLandscape_QuadsPerSection, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
				MetaData->SetValue(NewProp_ResizeLandscape_QuadsPerSection, TEXT("ShowForTools"), TEXT("ResizeLandscape"));
				MetaData->SetValue(NewProp_ResizeLandscape_QuadsPerSection, TEXT("ToolTip"), TEXT("Number of quads per landscape component section"));
				MetaData->SetValue(NewProp_MirrorOp, TEXT("Category"), TEXT("Tool Settings"));
				MetaData->SetValue(NewProp_MirrorOp, TEXT("DisplayName"), TEXT("Operation"));
				MetaData->SetValue(NewProp_MirrorOp, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
				MetaData->SetValue(NewProp_MirrorOp, TEXT("ShowForTools"), TEXT("Mirror"));
				MetaData->SetValue(NewProp_MirrorOp, TEXT("ToolTip"), TEXT("Type of mirroring operation to perform e.g. \"Minus X To Plus X\" copies and flips the -X half of the landscape onto the +X half"));
				MetaData->SetValue(NewProp_MirrorPoint, TEXT("Category"), TEXT("Tool Settings"));
				MetaData->SetValue(NewProp_MirrorPoint, TEXT("DisplayName"), TEXT("Mirror Point"));
				MetaData->SetValue(NewProp_MirrorPoint, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
				MetaData->SetValue(NewProp_MirrorPoint, TEXT("ShowForTools"), TEXT("Mirror"));
				MetaData->SetValue(NewProp_MirrorPoint, TEXT("ToolTip"), TEXT("Location of the mirror plane, defaults to the center of the landscape. Doesn't normally need to be changed!"));
				MetaData->SetValue(NewProp_GizmoImportLayers, TEXT("Category"), TEXT("Tool Settings"));
				MetaData->SetValue(NewProp_GizmoImportLayers, TEXT("DisplayName"), TEXT("Layers"));
				MetaData->SetValue(NewProp_GizmoImportLayers, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
				MetaData->SetValue(NewProp_GizmoImportLayers, TEXT("ShowForTools"), TEXT("CopyPaste"));
				MetaData->SetValue(NewProp_GizmoImportSize, TEXT("Category"), TEXT("Tool Settings"));
				MetaData->SetValue(NewProp_GizmoImportSize, TEXT("DisplayName"), TEXT("Heightmap Size"));
				MetaData->SetValue(NewProp_GizmoImportSize, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
				MetaData->SetValue(NewProp_GizmoImportSize, TEXT("ShowForTools"), TEXT("CopyPaste"));
				MetaData->SetValue(NewProp_GizmoHeightmapFilenameString, TEXT("Category"), TEXT("Tool Settings"));
				MetaData->SetValue(NewProp_GizmoHeightmapFilenameString, TEXT("DisplayName"), TEXT("Heightmap"));
				MetaData->SetValue(NewProp_GizmoHeightmapFilenameString, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
				MetaData->SetValue(NewProp_GizmoHeightmapFilenameString, TEXT("ShowForTools"), TEXT("CopyPaste"));
				MetaData->SetValue(NewProp_bSmoothGizmoBrush, TEXT("Category"), TEXT("Tool Settings"));
				MetaData->SetValue(NewProp_bSmoothGizmoBrush, TEXT("DisplayName"), TEXT("Use Smooth Gizmo Brush"));
				MetaData->SetValue(NewProp_bSmoothGizmoBrush, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
				MetaData->SetValue(NewProp_bSmoothGizmoBrush, TEXT("ShowForTools"), TEXT("CopyPaste"));
				MetaData->SetValue(NewProp_bSmoothGizmoBrush, TEXT("ToolTip"), TEXT("Smooths the edges of the gizmo data into the landscape. Without this, the edges of the pasted data will be sharp"));
				MetaData->SetValue(NewProp_bSnapGizmo, TEXT("Category"), TEXT("Tool Settings"));
				MetaData->SetValue(NewProp_bSnapGizmo, TEXT("DisplayName"), TEXT("Snap Gizmo to Landscape grid"));
				MetaData->SetValue(NewProp_bSnapGizmo, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
				MetaData->SetValue(NewProp_bSnapGizmo, TEXT("ShowForTools"), TEXT("CopyPaste"));
				MetaData->SetValue(NewProp_bSnapGizmo, TEXT("ToolTip"), TEXT("Makes sure the gizmo is snapped perfectly to the landscape so that the sample points line up, which makes copy/paste less blurry. Irrelevant if gizmo is scaled"));
				MetaData->SetValue(NewProp_bApplyToAllTargets, TEXT("Category"), TEXT("Tool Settings"));
				MetaData->SetValue(NewProp_bApplyToAllTargets, TEXT("DisplayName"), TEXT("Gizmo copy/paste all layers"));
				MetaData->SetValue(NewProp_bApplyToAllTargets, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
				MetaData->SetValue(NewProp_bApplyToAllTargets, TEXT("ShowForTools"), TEXT("CopyPaste"));
				MetaData->SetValue(NewProp_bApplyToAllTargets, TEXT("ToolTip"), TEXT("If set, copies/pastes all layers, otherwise only copy/pastes the layer selected in the targets panel"));
				MetaData->SetValue(NewProp_PasteMode, TEXT("Category"), TEXT("Tool Settings"));
				MetaData->SetValue(NewProp_PasteMode, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
				MetaData->SetValue(NewProp_PasteMode, TEXT("ShowForTools"), TEXT("CopyPaste"));
				MetaData->SetValue(NewProp_PasteMode, TEXT("ToolTip"), TEXT("Whether to paste will only raise, only lower, or both"));
				MetaData->SetValue(NewProp_bUseNegativeMask, TEXT("Category"), TEXT("Tool Settings"));
				MetaData->SetValue(NewProp_bUseNegativeMask, TEXT("DisplayName"), TEXT("Negative Mask"));
				MetaData->SetValue(NewProp_bUseNegativeMask, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
				MetaData->SetValue(NewProp_bUseNegativeMask, TEXT("ShowForMask"), TEXT(""));
				MetaData->SetValue(NewProp_bUseNegativeMask, TEXT("ShowForTools"), TEXT("Mask"));
				MetaData->SetValue(NewProp_bUseNegativeMask, TEXT("ToolTip"), TEXT("If enabled, protects the selected region from changes\nIf disabled, only allows changes in the selected region"));
				MetaData->SetValue(NewProp_bUseSelectedRegion, TEXT("Category"), TEXT("Tool Settings"));
				MetaData->SetValue(NewProp_bUseSelectedRegion, TEXT("DisplayName"), TEXT("Use Region as Mask"));
				MetaData->SetValue(NewProp_bUseSelectedRegion, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
				MetaData->SetValue(NewProp_bUseSelectedRegion, TEXT("ShowForMask"), TEXT(""));
				MetaData->SetValue(NewProp_bUseSelectedRegion, TEXT("ShowForTools"), TEXT("Mask"));
				MetaData->SetValue(NewProp_bUseSelectedRegion, TEXT("ToolTip"), TEXT("Uses selected region as a mask for other tools"));
				MetaData->SetValue(NewProp_NoiseScale, TEXT("Category"), TEXT("Tool Settings"));
				MetaData->SetValue(NewProp_NoiseScale, TEXT("ClampMax"), TEXT("512"));
				MetaData->SetValue(NewProp_NoiseScale, TEXT("ClampMin"), TEXT("1"));
				MetaData->SetValue(NewProp_NoiseScale, TEXT("DisplayName"), TEXT("Noise Scale"));
				MetaData->SetValue(NewProp_NoiseScale, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
				MetaData->SetValue(NewProp_NoiseScale, TEXT("ShowForTools"), TEXT("Noise"));
				MetaData->SetValue(NewProp_NoiseScale, TEXT("ToolTip"), TEXT("The size of the perlin noise filter used"));
				MetaData->SetValue(NewProp_NoiseScale, TEXT("UIMax"), TEXT("256"));
				MetaData->SetValue(NewProp_NoiseScale, TEXT("UIMin"), TEXT("1.1"));
				MetaData->SetValue(NewProp_NoiseMode, TEXT("Category"), TEXT("Tool Settings"));
				MetaData->SetValue(NewProp_NoiseMode, TEXT("DisplayName"), TEXT("Noise Mode"));
				MetaData->SetValue(NewProp_NoiseMode, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
				MetaData->SetValue(NewProp_NoiseMode, TEXT("ShowForTools"), TEXT("Noise"));
				MetaData->SetValue(NewProp_NoiseMode, TEXT("ToolTip"), TEXT("Whether to apply noise that raises, lowers, or both"));
				MetaData->SetValue(NewProp_HErosionDetailScale, TEXT("Category"), TEXT("Tool Settings"));
				MetaData->SetValue(NewProp_HErosionDetailScale, TEXT("ClampMax"), TEXT("0.99"));
				MetaData->SetValue(NewProp_HErosionDetailScale, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_HErosionDetailScale, TEXT("DisplayName"), TEXT("Detail Smooth"));
				MetaData->SetValue(NewProp_HErosionDetailScale, TEXT("EditCondition"), TEXT("bHErosionDetailSmooth"));
				MetaData->SetValue(NewProp_HErosionDetailScale, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
				MetaData->SetValue(NewProp_HErosionDetailScale, TEXT("ShowForTools"), TEXT("HydraErosion"));
				MetaData->SetValue(NewProp_HErosionDetailScale, TEXT("ToolTip"), TEXT("Larger detail smoothing values remove more details, while smaller values preserve more details"));
				MetaData->SetValue(NewProp_bHErosionDetailSmooth, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
				MetaData->SetValue(NewProp_bHErosionDetailSmooth, TEXT("ToolTip"), TEXT("If checked, performs a detail-preserving smooth to the erosion effect using the specified detail smoothing value"));
				MetaData->SetValue(NewProp_RainDistScale, TEXT("Category"), TEXT("Tool Settings"));
				MetaData->SetValue(NewProp_RainDistScale, TEXT("ClampMax"), TEXT("512"));
				MetaData->SetValue(NewProp_RainDistScale, TEXT("ClampMin"), TEXT("1"));
				MetaData->SetValue(NewProp_RainDistScale, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
				MetaData->SetValue(NewProp_RainDistScale, TEXT("ShowForTools"), TEXT("HydraErosion"));
				MetaData->SetValue(NewProp_RainDistScale, TEXT("ToolTip"), TEXT("The size of the noise filter for applying initial rain to the surface"));
				MetaData->SetValue(NewProp_RainDistScale, TEXT("UIMax"), TEXT("256"));
				MetaData->SetValue(NewProp_RainDistScale, TEXT("UIMin"), TEXT("1.1"));
				MetaData->SetValue(NewProp_RainDistMode, TEXT("Category"), TEXT("Tool Settings"));
				MetaData->SetValue(NewProp_RainDistMode, TEXT("DisplayName"), TEXT("Initial Rain Distribution"));
				MetaData->SetValue(NewProp_RainDistMode, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
				MetaData->SetValue(NewProp_RainDistMode, TEXT("ShowForTools"), TEXT("HydraErosion"));
				MetaData->SetValue(NewProp_RainDistMode, TEXT("ToolTip"), TEXT("Initial Rain Distribution"));
				MetaData->SetValue(NewProp_HErodeIterationNum, TEXT("Category"), TEXT("Tool Settings"));
				MetaData->SetValue(NewProp_HErodeIterationNum, TEXT("ClampMax"), TEXT("300"));
				MetaData->SetValue(NewProp_HErodeIterationNum, TEXT("ClampMin"), TEXT("1"));
				MetaData->SetValue(NewProp_HErodeIterationNum, TEXT("DisplayName"), TEXT("Iterations"));
				MetaData->SetValue(NewProp_HErodeIterationNum, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
				MetaData->SetValue(NewProp_HErodeIterationNum, TEXT("ShowForTools"), TEXT("HydraErosion"));
				MetaData->SetValue(NewProp_HErodeIterationNum, TEXT("ToolTip"), TEXT("Number of erosion iterations, more means more erosion but is slower"));
				MetaData->SetValue(NewProp_HErodeIterationNum, TEXT("UIMax"), TEXT("150"));
				MetaData->SetValue(NewProp_HErodeIterationNum, TEXT("UIMin"), TEXT("1"));
				MetaData->SetValue(NewProp_SedimentCapacity, TEXT("Category"), TEXT("Tool Settings"));
				MetaData->SetValue(NewProp_SedimentCapacity, TEXT("ClampMax"), TEXT("1.0"));
				MetaData->SetValue(NewProp_SedimentCapacity, TEXT("ClampMin"), TEXT("0.1"));
				MetaData->SetValue(NewProp_SedimentCapacity, TEXT("DisplayName"), TEXT("Sediment Cap."));
				MetaData->SetValue(NewProp_SedimentCapacity, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
				MetaData->SetValue(NewProp_SedimentCapacity, TEXT("ShowForTools"), TEXT("HydraErosion"));
				MetaData->SetValue(NewProp_SedimentCapacity, TEXT("ToolTip"), TEXT("The amount of sediment that the water can carry. Larger values will result in more erosion"));
				MetaData->SetValue(NewProp_RainAmount, TEXT("Category"), TEXT("Tool Settings"));
				MetaData->SetValue(NewProp_RainAmount, TEXT("ClampMax"), TEXT("512"));
				MetaData->SetValue(NewProp_RainAmount, TEXT("ClampMin"), TEXT("1"));
				MetaData->SetValue(NewProp_RainAmount, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
				MetaData->SetValue(NewProp_RainAmount, TEXT("ShowForTools"), TEXT("HydraErosion"));
				MetaData->SetValue(NewProp_RainAmount, TEXT("ToolTip"), TEXT("The amount of rain to apply to the surface. Larger values will result in more erosion"));
				MetaData->SetValue(NewProp_RainAmount, TEXT("UIMax"), TEXT("256"));
				MetaData->SetValue(NewProp_RainAmount, TEXT("UIMin"), TEXT("1"));
				MetaData->SetValue(NewProp_ErosionNoiseScale, TEXT("Category"), TEXT("Tool Settings"));
				MetaData->SetValue(NewProp_ErosionNoiseScale, TEXT("ClampMax"), TEXT("512"));
				MetaData->SetValue(NewProp_ErosionNoiseScale, TEXT("ClampMin"), TEXT("1"));
				MetaData->SetValue(NewProp_ErosionNoiseScale, TEXT("DisplayName"), TEXT("Noise Scale"));
				MetaData->SetValue(NewProp_ErosionNoiseScale, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
				MetaData->SetValue(NewProp_ErosionNoiseScale, TEXT("ShowForTools"), TEXT("Erosion"));
				MetaData->SetValue(NewProp_ErosionNoiseScale, TEXT("ToolTip"), TEXT("The size of the perlin noise filter used"));
				MetaData->SetValue(NewProp_ErosionNoiseScale, TEXT("UIMax"), TEXT("256"));
				MetaData->SetValue(NewProp_ErosionNoiseScale, TEXT("UIMin"), TEXT("1.1"));
				MetaData->SetValue(NewProp_ErosionNoiseMode, TEXT("Category"), TEXT("Tool Settings"));
				MetaData->SetValue(NewProp_ErosionNoiseMode, TEXT("DisplayName"), TEXT("Noise Mode"));
				MetaData->SetValue(NewProp_ErosionNoiseMode, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
				MetaData->SetValue(NewProp_ErosionNoiseMode, TEXT("ShowForTools"), TEXT("Erosion"));
				MetaData->SetValue(NewProp_ErosionNoiseMode, TEXT("ToolTip"), TEXT("Whether to erode by lowering, raising, or both"));
				MetaData->SetValue(NewProp_ErodeIterationNum, TEXT("Category"), TEXT("Tool Settings"));
				MetaData->SetValue(NewProp_ErodeIterationNum, TEXT("ClampMax"), TEXT("300"));
				MetaData->SetValue(NewProp_ErodeIterationNum, TEXT("ClampMin"), TEXT("1"));
				MetaData->SetValue(NewProp_ErodeIterationNum, TEXT("DisplayName"), TEXT("Iterations"));
				MetaData->SetValue(NewProp_ErodeIterationNum, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
				MetaData->SetValue(NewProp_ErodeIterationNum, TEXT("ShowForTools"), TEXT("Erosion"));
				MetaData->SetValue(NewProp_ErodeIterationNum, TEXT("ToolTip"), TEXT("Number of erosion iterations, more means more erosion but is slower"));
				MetaData->SetValue(NewProp_ErodeIterationNum, TEXT("UIMax"), TEXT("150"));
				MetaData->SetValue(NewProp_ErodeIterationNum, TEXT("UIMin"), TEXT("1"));
				MetaData->SetValue(NewProp_ErodeSurfaceThickness, TEXT("Category"), TEXT("Tool Settings"));
				MetaData->SetValue(NewProp_ErodeSurfaceThickness, TEXT("ClampMax"), TEXT("1024"));
				MetaData->SetValue(NewProp_ErodeSurfaceThickness, TEXT("ClampMin"), TEXT("128"));
				MetaData->SetValue(NewProp_ErodeSurfaceThickness, TEXT("DisplayName"), TEXT("Surface Thickness"));
				MetaData->SetValue(NewProp_ErodeSurfaceThickness, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
				MetaData->SetValue(NewProp_ErodeSurfaceThickness, TEXT("ShowForTools"), TEXT("Erosion"));
				MetaData->SetValue(NewProp_ErodeSurfaceThickness, TEXT("ToolTip"), TEXT("The thickness of the surface for the layer weight erosion effect"));
				MetaData->SetValue(NewProp_ErodeSurfaceThickness, TEXT("UIMax"), TEXT("512"));
				MetaData->SetValue(NewProp_ErodeSurfaceThickness, TEXT("UIMin"), TEXT("128"));
				MetaData->SetValue(NewProp_ErodeThresh, TEXT("Category"), TEXT("Tool Settings"));
				MetaData->SetValue(NewProp_ErodeThresh, TEXT("ClampMax"), TEXT("256"));
				MetaData->SetValue(NewProp_ErodeThresh, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_ErodeThresh, TEXT("DisplayName"), TEXT("Threshold"));
				MetaData->SetValue(NewProp_ErodeThresh, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
				MetaData->SetValue(NewProp_ErodeThresh, TEXT("ShowForTools"), TEXT("Erosion"));
				MetaData->SetValue(NewProp_ErodeThresh, TEXT("ToolTip"), TEXT("The minimum height difference necessary for the erosion effects to be applied. Smaller values will result in more erosion being applied"));
				MetaData->SetValue(NewProp_ErodeThresh, TEXT("UIMax"), TEXT("128"));
				MetaData->SetValue(NewProp_ErodeThresh, TEXT("UIMin"), TEXT("0"));
				MetaData->SetValue(NewProp_DetailScale, TEXT("Category"), TEXT("Tool Settings"));
				MetaData->SetValue(NewProp_DetailScale, TEXT("ClampMax"), TEXT("0.99"));
				MetaData->SetValue(NewProp_DetailScale, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_DetailScale, TEXT("DisplayName"), TEXT("Detail Smooth"));
				MetaData->SetValue(NewProp_DetailScale, TEXT("EditCondition"), TEXT("bDetailSmooth"));
				MetaData->SetValue(NewProp_DetailScale, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
				MetaData->SetValue(NewProp_DetailScale, TEXT("ShowForTools"), TEXT("Smooth"));
				MetaData->SetValue(NewProp_DetailScale, TEXT("ToolTip"), TEXT("Larger detail smoothing values remove more details, while smaller values preserve more details"));
				MetaData->SetValue(NewProp_bDetailSmooth, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
				MetaData->SetValue(NewProp_bDetailSmooth, TEXT("ToolTip"), TEXT("If checked, performs a detail preserving smooth using the specified detail smoothing value"));
				MetaData->SetValue(NewProp_SmoothFilterKernelSize, TEXT("Category"), TEXT("Tool Settings"));
				MetaData->SetValue(NewProp_SmoothFilterKernelSize, TEXT("ClampMax"), TEXT("31"));
				MetaData->SetValue(NewProp_SmoothFilterKernelSize, TEXT("ClampMin"), TEXT("1"));
				MetaData->SetValue(NewProp_SmoothFilterKernelSize, TEXT("DisplayName"), TEXT("Filter Kernel Radius"));
				MetaData->SetValue(NewProp_SmoothFilterKernelSize, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
				MetaData->SetValue(NewProp_SmoothFilterKernelSize, TEXT("ShowForTools"), TEXT("Smooth"));
				MetaData->SetValue(NewProp_SmoothFilterKernelSize, TEXT("ToolTip"), TEXT("The radius smoothing is performed over\nHigher values smooth out bigger details, lower values only smooth out smaller details"));
				MetaData->SetValue(NewProp_SmoothFilterKernelSize, TEXT("UIMax"), TEXT("7"));
				MetaData->SetValue(NewProp_SmoothFilterKernelSize, TEXT("UIMin"), TEXT("0"));
				MetaData->SetValue(NewProp_RampSideFalloff, TEXT("Category"), TEXT("Tool Settings"));
				MetaData->SetValue(NewProp_RampSideFalloff, TEXT("ClampMax"), TEXT("1"));
				MetaData->SetValue(NewProp_RampSideFalloff, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_RampSideFalloff, TEXT("DisplayName"), TEXT("Side Falloff"));
				MetaData->SetValue(NewProp_RampSideFalloff, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
				MetaData->SetValue(NewProp_RampSideFalloff, TEXT("ShowForTools"), TEXT("Ramp"));
				MetaData->SetValue(NewProp_RampSideFalloff, TEXT("ToolTip"), TEXT("Falloff on side of ramp"));
				MetaData->SetValue(NewProp_RampSideFalloff, TEXT("UIMax"), TEXT("1"));
				MetaData->SetValue(NewProp_RampSideFalloff, TEXT("UIMin"), TEXT("0"));
				MetaData->SetValue(NewProp_RampWidth, TEXT("Category"), TEXT("Tool Settings"));
				MetaData->SetValue(NewProp_RampWidth, TEXT("ClampMin"), TEXT("1"));
				MetaData->SetValue(NewProp_RampWidth, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
				MetaData->SetValue(NewProp_RampWidth, TEXT("ShowForTools"), TEXT("Ramp"));
				MetaData->SetValue(NewProp_RampWidth, TEXT("SliderExponent"), TEXT("3"));
				MetaData->SetValue(NewProp_RampWidth, TEXT("ToolTip"), TEXT("Width of ramp"));
				MetaData->SetValue(NewProp_RampWidth, TEXT("UIMax"), TEXT("8192"));
				MetaData->SetValue(NewProp_RampWidth, TEXT("UIMin"), TEXT("1"));
				MetaData->SetValue(NewProp_bShowFlattenTargetPreview, TEXT("Category"), TEXT("Tool Settings"));
				MetaData->SetValue(NewProp_bShowFlattenTargetPreview, TEXT("DisplayName"), TEXT("Show Preview Grid"));
				MetaData->SetValue(NewProp_bShowFlattenTargetPreview, TEXT("EditCondition"), TEXT("bUseFlattenTarget"));
				MetaData->SetValue(NewProp_bShowFlattenTargetPreview, TEXT("HideEditConditionToggle"), TEXT(""));
				MetaData->SetValue(NewProp_bShowFlattenTargetPreview, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
				MetaData->SetValue(NewProp_bShowFlattenTargetPreview, TEXT("ShowForTargetTypes"), TEXT("Heightmap"));
				MetaData->SetValue(NewProp_bShowFlattenTargetPreview, TEXT("ShowForTools"), TEXT("Flatten"));
				MetaData->SetValue(NewProp_bShowFlattenTargetPreview, TEXT("ToolTip"), TEXT("Whether to show the preview grid for the flatten target height"));
				MetaData->SetValue(NewProp_bShowFlattenTargetPreview, TEXT("UIMax"), TEXT("32768"));
				MetaData->SetValue(NewProp_bShowFlattenTargetPreview, TEXT("UIMin"), TEXT("-32768"));
				MetaData->SetValue(NewProp_FlattenTarget, TEXT("Category"), TEXT("Tool Settings"));
				MetaData->SetValue(NewProp_FlattenTarget, TEXT("EditCondition"), TEXT("bUseFlattenTarget"));
				MetaData->SetValue(NewProp_FlattenTarget, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
				MetaData->SetValue(NewProp_FlattenTarget, TEXT("ShowForTargetTypes"), TEXT("Heightmap"));
				MetaData->SetValue(NewProp_FlattenTarget, TEXT("ShowForTools"), TEXT("Flatten"));
				MetaData->SetValue(NewProp_FlattenTarget, TEXT("ToolTip"), TEXT("Target height to flatten towards (in Unreal Units)"));
				MetaData->SetValue(NewProp_FlattenTarget, TEXT("UIMax"), TEXT("32768"));
				MetaData->SetValue(NewProp_FlattenTarget, TEXT("UIMin"), TEXT("-32768"));
				MetaData->SetValue(NewProp_bUseFlattenTarget, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
				MetaData->SetValue(NewProp_bUseFlattenTarget, TEXT("ToolTip"), TEXT("Enable to flatten towards a target height"));
				MetaData->SetValue(NewProp_bPickValuePerApply, TEXT("Category"), TEXT("Tool Settings"));
				MetaData->SetValue(NewProp_bPickValuePerApply, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
				MetaData->SetValue(NewProp_bPickValuePerApply, TEXT("ShowForTargetTypes"), TEXT("Heightmap"));
				MetaData->SetValue(NewProp_bPickValuePerApply, TEXT("ShowForTools"), TEXT("Flatten"));
				MetaData->SetValue(NewProp_bPickValuePerApply, TEXT("ToolTip"), TEXT("Constantly picks new values to flatten towards when dragging around, instead of only using the first clicked point"));
				MetaData->SetValue(NewProp_bUseSlopeFlatten, TEXT("Category"), TEXT("Tool Settings"));
				MetaData->SetValue(NewProp_bUseSlopeFlatten, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
				MetaData->SetValue(NewProp_bUseSlopeFlatten, TEXT("ShowForTargetTypes"), TEXT("Heightmap"));
				MetaData->SetValue(NewProp_bUseSlopeFlatten, TEXT("ShowForTools"), TEXT("Flatten"));
				MetaData->SetValue(NewProp_bUseSlopeFlatten, TEXT("ToolTip"), TEXT("Flattens to the angle of the clicked point, instead of horizontal"));
				MetaData->SetValue(NewProp_FlattenMode, TEXT("Category"), TEXT("Tool Settings"));
				MetaData->SetValue(NewProp_FlattenMode, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
				MetaData->SetValue(NewProp_FlattenMode, TEXT("ShowForTools"), TEXT("Flatten"));
				MetaData->SetValue(NewProp_FlattenMode, TEXT("ToolTip"), TEXT("Whether to flatten by lowering, raising, or both"));
				MetaData->SetValue(NewProp_MaximumValueRadius, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
				MetaData->SetValue(NewProp_MaximumValueRadius, TEXT("ToolTip"), TEXT("I have no idea what this is for but it's used by the noise and erosion tools, and isn't exposed to the UI"));
				MetaData->SetValue(NewProp_WeightTargetValue, TEXT("Category"), TEXT("Tool Settings"));
				MetaData->SetValue(NewProp_WeightTargetValue, TEXT("ClampMax"), TEXT("10"));
				MetaData->SetValue(NewProp_WeightTargetValue, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_WeightTargetValue, TEXT("DisplayName"), TEXT("Use Target Value"));
				MetaData->SetValue(NewProp_WeightTargetValue, TEXT("EditCondition"), TEXT("bUseWeightTargetValue"));
				MetaData->SetValue(NewProp_WeightTargetValue, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
				MetaData->SetValue(NewProp_WeightTargetValue, TEXT("ShowForTools"), TEXT("Paint,Sculpt,Noise"));
				MetaData->SetValue(NewProp_WeightTargetValue, TEXT("ToolTip"), TEXT("Enable to make tools blend towards a target value"));
				MetaData->SetValue(NewProp_WeightTargetValue, TEXT("UIMax"), TEXT("1"));
				MetaData->SetValue(NewProp_WeightTargetValue, TEXT("UIMin"), TEXT("0"));
				MetaData->SetValue(NewProp_bUseWeightTargetValue, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
				MetaData->SetValue(NewProp_bUseWeightTargetValue, TEXT("ToolTip"), TEXT("Enable to make tools blend towards a target value"));
				MetaData->SetValue(NewProp_ToolStrength, TEXT("Category"), TEXT("Tool Settings"));
				MetaData->SetValue(NewProp_ToolStrength, TEXT("ClampMax"), TEXT("10"));
				MetaData->SetValue(NewProp_ToolStrength, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_ToolStrength, TEXT("ModuleRelativePath"), TEXT("Public/LandscapeEditorObject.h"));
				MetaData->SetValue(NewProp_ToolStrength, TEXT("ShowForTools"), TEXT("Paint,Sculpt,Smooth,Flatten,Erosion,HydraErosion,Noise,Mask,CopyPaste"));
				MetaData->SetValue(NewProp_ToolStrength, TEXT("ToolTip"), TEXT("Strength of the tool. If you're using a pen/tablet with pressure-sensing, the pressure used affects the strength of the tool."));
				MetaData->SetValue(NewProp_ToolStrength, TEXT("UIMax"), TEXT("1"));
				MetaData->SetValue(NewProp_ToolStrength, TEXT("UIMin"), TEXT("0"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ULandscapeEditorObject(Z_Construct_UClass_ULandscapeEditorObject, TEXT("ULandscapeEditorObject"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(ULandscapeEditorObject);
	UClass* Z_Construct_UClass_ALandscapePlaceholder_NoRegister()
	{
		return ALandscapePlaceholder::StaticClass();
	}
	UClass* Z_Construct_UClass_ALandscapePlaceholder()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AActor();
			Z_Construct_UPackage_LandscapeEditor();
			OuterClass = ALandscapePlaceholder::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20800280;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Classes/LandscapePlaceholder.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Private/Classes/LandscapePlaceholder.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ALandscapePlaceholder(Z_Construct_UClass_ALandscapePlaceholder, TEXT("ALandscapePlaceholder"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(ALandscapePlaceholder);
	UPackage* Z_Construct_UPackage_LandscapeEditor()
	{
		static UPackage* ReturnPackage = NULL;
		if (!ReturnPackage)
		{
			ReturnPackage = CastChecked<UPackage>(StaticFindObjectFast(UPackage::StaticClass(), NULL, FName(TEXT("/Script/LandscapeEditor")), false, false));
			ReturnPackage->SetPackageFlags(PKG_CompiledIn | 0x00000000);
			FGuid Guid;
			Guid.A = 0x46A7CEED;
			Guid.B = 0x6242A39D;
			Guid.C = 0x00000000;
			Guid.D = 0x00000000;
			ReturnPackage->SetGuid(Guid);

		}
		return ReturnPackage;
	}
#endif

PRAGMA_ENABLE_DEPRECATION_WARNINGS
