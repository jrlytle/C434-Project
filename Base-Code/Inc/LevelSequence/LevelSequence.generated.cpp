// Copyright 1998-2015 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Boilerplate C++ definitions for a single module.
	This is automatically generated by UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "Private/LevelSequencePCH.h"
#include "LevelSequence.generated.dep.h"
PRAGMA_DISABLE_DEPRECATION_WARNINGS
void EmptyLinkFunctionForGeneratedCodeLevelSequence() {}
class UScriptStruct* FLevelSequenceObject::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern LEVELSEQUENCE_API class UScriptStruct* Z_Construct_UScriptStruct_FLevelSequenceObject();
		extern LEVELSEQUENCE_API uint32 Get_Z_Construct_UScriptStruct_FLevelSequenceObject_CRC();
		extern LEVELSEQUENCE_API class UPackage* Z_Construct_UPackage_LevelSequence();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FLevelSequenceObject, Z_Construct_UPackage_LevelSequence(), TEXT("LevelSequenceObject"), sizeof(FLevelSequenceObject), Get_Z_Construct_UScriptStruct_FLevelSequenceObject_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FLevelSequenceObject(FLevelSequenceObject::StaticStruct, TEXT("/Script/LevelSequence"));
static struct FScriptStruct_LevelSequence_StaticRegisterNativesFLevelSequenceObject
{
	FScriptStruct_LevelSequence_StaticRegisterNativesFLevelSequenceObject()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("LevelSequenceObject")),new UScriptStruct::TCppStructOps<FLevelSequenceObject>);
	}
} ScriptStruct_LevelSequence_StaticRegisterNativesFLevelSequenceObject;
class UScriptStruct* FLevelSequenceObjectReferenceMap::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern LEVELSEQUENCE_API class UScriptStruct* Z_Construct_UScriptStruct_FLevelSequenceObjectReferenceMap();
		extern LEVELSEQUENCE_API uint32 Get_Z_Construct_UScriptStruct_FLevelSequenceObjectReferenceMap_CRC();
		extern LEVELSEQUENCE_API class UPackage* Z_Construct_UPackage_LevelSequence();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FLevelSequenceObjectReferenceMap, Z_Construct_UPackage_LevelSequence(), TEXT("LevelSequenceObjectReferenceMap"), sizeof(FLevelSequenceObjectReferenceMap), Get_Z_Construct_UScriptStruct_FLevelSequenceObjectReferenceMap_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FLevelSequenceObjectReferenceMap(FLevelSequenceObjectReferenceMap::StaticStruct, TEXT("/Script/LevelSequence"));
static struct FScriptStruct_LevelSequence_StaticRegisterNativesFLevelSequenceObjectReferenceMap
{
	FScriptStruct_LevelSequence_StaticRegisterNativesFLevelSequenceObjectReferenceMap()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("LevelSequenceObjectReferenceMap")),new UScriptStruct::TCppStructOps<FLevelSequenceObjectReferenceMap>);
	}
} ScriptStruct_LevelSequence_StaticRegisterNativesFLevelSequenceObjectReferenceMap;
class UScriptStruct* FLevelSequenceObjectReference::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern LEVELSEQUENCE_API class UScriptStruct* Z_Construct_UScriptStruct_FLevelSequenceObjectReference();
		extern LEVELSEQUENCE_API uint32 Get_Z_Construct_UScriptStruct_FLevelSequenceObjectReference_CRC();
		extern LEVELSEQUENCE_API class UPackage* Z_Construct_UPackage_LevelSequence();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FLevelSequenceObjectReference, Z_Construct_UPackage_LevelSequence(), TEXT("LevelSequenceObjectReference"), sizeof(FLevelSequenceObjectReference), Get_Z_Construct_UScriptStruct_FLevelSequenceObjectReference_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FLevelSequenceObjectReference(FLevelSequenceObjectReference::StaticStruct, TEXT("/Script/LevelSequence"));
static struct FScriptStruct_LevelSequence_StaticRegisterNativesFLevelSequenceObjectReference
{
	FScriptStruct_LevelSequence_StaticRegisterNativesFLevelSequenceObjectReference()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("LevelSequenceObjectReference")),new UScriptStruct::TCppStructOps<FLevelSequenceObjectReference>);
	}
} ScriptStruct_LevelSequence_StaticRegisterNativesFLevelSequenceObjectReference;
	void ULevelSequence::StaticRegisterNativesULevelSequence()
	{
	}
	IMPLEMENT_CLASS(ULevelSequence, 667851165);
	void ULevelSequenceInstance::StaticRegisterNativesULevelSequenceInstance()
	{
	}
	IMPLEMENT_CLASS(ULevelSequenceInstance, 1929541118);
class UScriptStruct* FLevelSequencePlaybackSettings::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern LEVELSEQUENCE_API class UScriptStruct* Z_Construct_UScriptStruct_FLevelSequencePlaybackSettings();
		extern LEVELSEQUENCE_API uint32 Get_Z_Construct_UScriptStruct_FLevelSequencePlaybackSettings_CRC();
		extern LEVELSEQUENCE_API class UPackage* Z_Construct_UPackage_LevelSequence();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FLevelSequencePlaybackSettings, Z_Construct_UPackage_LevelSequence(), TEXT("LevelSequencePlaybackSettings"), sizeof(FLevelSequencePlaybackSettings), Get_Z_Construct_UScriptStruct_FLevelSequencePlaybackSettings_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FLevelSequencePlaybackSettings(FLevelSequencePlaybackSettings::StaticStruct, TEXT("/Script/LevelSequence"));
static struct FScriptStruct_LevelSequence_StaticRegisterNativesFLevelSequencePlaybackSettings
{
	FScriptStruct_LevelSequence_StaticRegisterNativesFLevelSequencePlaybackSettings()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("LevelSequencePlaybackSettings")),new UScriptStruct::TCppStructOps<FLevelSequencePlaybackSettings>);
	}
} ScriptStruct_LevelSequence_StaticRegisterNativesFLevelSequencePlaybackSettings;
	void ULevelSequencePlayer::StaticRegisterNativesULevelSequencePlayer()
	{
		FNativeFunctionRegistrar::RegisterFunction(ULevelSequencePlayer::StaticClass(),"CreateLevelSequencePlayer",(Native)&ULevelSequencePlayer::execCreateLevelSequencePlayer);
		FNativeFunctionRegistrar::RegisterFunction(ULevelSequencePlayer::StaticClass(),"GetLength",(Native)&ULevelSequencePlayer::execGetLength);
		FNativeFunctionRegistrar::RegisterFunction(ULevelSequencePlayer::StaticClass(),"GetPlaybackPosition",(Native)&ULevelSequencePlayer::execGetPlaybackPosition);
		FNativeFunctionRegistrar::RegisterFunction(ULevelSequencePlayer::StaticClass(),"GetPlayRate",(Native)&ULevelSequencePlayer::execGetPlayRate);
		FNativeFunctionRegistrar::RegisterFunction(ULevelSequencePlayer::StaticClass(),"IsPlaying",(Native)&ULevelSequencePlayer::execIsPlaying);
		FNativeFunctionRegistrar::RegisterFunction(ULevelSequencePlayer::StaticClass(),"Pause",(Native)&ULevelSequencePlayer::execPause);
		FNativeFunctionRegistrar::RegisterFunction(ULevelSequencePlayer::StaticClass(),"Play",(Native)&ULevelSequencePlayer::execPlay);
		FNativeFunctionRegistrar::RegisterFunction(ULevelSequencePlayer::StaticClass(),"PlayLooping",(Native)&ULevelSequencePlayer::execPlayLooping);
		FNativeFunctionRegistrar::RegisterFunction(ULevelSequencePlayer::StaticClass(),"SetPlaybackPosition",(Native)&ULevelSequencePlayer::execSetPlaybackPosition);
		FNativeFunctionRegistrar::RegisterFunction(ULevelSequencePlayer::StaticClass(),"SetPlayRate",(Native)&ULevelSequencePlayer::execSetPlayRate);
		FNativeFunctionRegistrar::RegisterFunction(ULevelSequencePlayer::StaticClass(),"Stop",(Native)&ULevelSequencePlayer::execStop);
	}
	IMPLEMENT_CLASS(ULevelSequencePlayer, 834859455);
	void ALevelSequenceActor::StaticRegisterNativesALevelSequenceActor()
	{
		FNativeFunctionRegistrar::RegisterFunction(ALevelSequenceActor::StaticClass(),"SetSequence",(Native)&ALevelSequenceActor::execSetSequence);
	}
	IMPLEMENT_CLASS(ALevelSequenceActor, 1637728953);
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	COREUOBJECT_API class UClass* Z_Construct_UClass_UObject_NoRegister();
	COREUOBJECT_API class UClass* Z_Construct_UClass_UObject();
	MOVIESCENE_API class UClass* Z_Construct_UClass_UMovieScene_NoRegister();
	MOVIESCENE_API class UClass* Z_Construct_UClass_UMovieSceneSequence();
	ENGINE_API class UClass* Z_Construct_UClass_AActor();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FStringAssetReference();

	LEVELSEQUENCE_API class UScriptStruct* Z_Construct_UScriptStruct_FLevelSequenceObject();
	LEVELSEQUENCE_API class UScriptStruct* Z_Construct_UScriptStruct_FLevelSequenceObjectReferenceMap();
	LEVELSEQUENCE_API class UScriptStruct* Z_Construct_UScriptStruct_FLevelSequenceObjectReference();
	LEVELSEQUENCE_API class UClass* Z_Construct_UClass_ULevelSequence_NoRegister();
	LEVELSEQUENCE_API class UClass* Z_Construct_UClass_ULevelSequence();
	LEVELSEQUENCE_API class UClass* Z_Construct_UClass_ULevelSequenceInstance_NoRegister();
	LEVELSEQUENCE_API class UClass* Z_Construct_UClass_ULevelSequenceInstance();
	LEVELSEQUENCE_API class UScriptStruct* Z_Construct_UScriptStruct_FLevelSequencePlaybackSettings();
	LEVELSEQUENCE_API class UFunction* Z_Construct_UFunction_ULevelSequencePlayer_CreateLevelSequencePlayer();
	LEVELSEQUENCE_API class UFunction* Z_Construct_UFunction_ULevelSequencePlayer_GetLength();
	LEVELSEQUENCE_API class UFunction* Z_Construct_UFunction_ULevelSequencePlayer_GetPlaybackPosition();
	LEVELSEQUENCE_API class UFunction* Z_Construct_UFunction_ULevelSequencePlayer_GetPlayRate();
	LEVELSEQUENCE_API class UFunction* Z_Construct_UFunction_ULevelSequencePlayer_IsPlaying();
	LEVELSEQUENCE_API class UFunction* Z_Construct_UFunction_ULevelSequencePlayer_Pause();
	LEVELSEQUENCE_API class UFunction* Z_Construct_UFunction_ULevelSequencePlayer_Play();
	LEVELSEQUENCE_API class UFunction* Z_Construct_UFunction_ULevelSequencePlayer_PlayLooping();
	LEVELSEQUENCE_API class UFunction* Z_Construct_UFunction_ULevelSequencePlayer_SetPlaybackPosition();
	LEVELSEQUENCE_API class UFunction* Z_Construct_UFunction_ULevelSequencePlayer_SetPlayRate();
	LEVELSEQUENCE_API class UFunction* Z_Construct_UFunction_ULevelSequencePlayer_Stop();
	LEVELSEQUENCE_API class UClass* Z_Construct_UClass_ULevelSequencePlayer_NoRegister();
	LEVELSEQUENCE_API class UClass* Z_Construct_UClass_ULevelSequencePlayer();
	LEVELSEQUENCE_API class UFunction* Z_Construct_UFunction_ALevelSequenceActor_SetSequence();
	LEVELSEQUENCE_API class UClass* Z_Construct_UClass_ALevelSequenceActor_NoRegister();
	LEVELSEQUENCE_API class UClass* Z_Construct_UClass_ALevelSequenceActor();
	LEVELSEQUENCE_API class UPackage* Z_Construct_UPackage_LevelSequence();
	UScriptStruct* Z_Construct_UScriptStruct_FLevelSequenceObject()
	{
		UPackage* Outer=Z_Construct_UPackage_LevelSequence();
		extern uint32 Get_Z_Construct_UScriptStruct_FLevelSequenceObject_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("LevelSequenceObject"), sizeof(FLevelSequenceObject), Get_Z_Construct_UScriptStruct_FLevelSequenceObject_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LevelSequenceObject"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FLevelSequenceObject>, EStructFlags(0x00000001));
			UProperty* NewProp_CachedComponent = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CachedComponent"), RF_Public|RF_Transient|RF_Native) UWeakObjectProperty(CPP_PROPERTY_BASE(CachedComponent, FLevelSequenceObject), 0x0004000000002000, Z_Construct_UClass_UObject_NoRegister());
			UProperty* NewProp_ComponentName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ComponentName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ComponentName, FLevelSequenceObject), 0x0000000000000000);
			UProperty* NewProp_ObjectOrOwner = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ObjectOrOwner"), RF_Public|RF_Transient|RF_Native) ULazyObjectProperty(CPP_PROPERTY_BASE(ObjectOrOwner, FLevelSequenceObject), 0x0004000000000000, Z_Construct_UClass_UObject_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/LevelSequenceObject.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Structure for animated Actor objects."));
			MetaData->SetValue(NewProp_CachedComponent, TEXT("ModuleRelativePath"), TEXT("Public/LevelSequenceObject.h"));
			MetaData->SetValue(NewProp_CachedComponent, TEXT("ToolTip"), TEXT("Cached pointer to the Actor component (only if ComponentName is set)."));
			MetaData->SetValue(NewProp_ComponentName, TEXT("ModuleRelativePath"), TEXT("Public/LevelSequenceObject.h"));
			MetaData->SetValue(NewProp_ComponentName, TEXT("ToolTip"), TEXT("Optional name of an ActorComponent."));
			MetaData->SetValue(NewProp_ObjectOrOwner, TEXT("ModuleRelativePath"), TEXT("Public/LevelSequenceObject.h"));
			MetaData->SetValue(NewProp_ObjectOrOwner, TEXT("ToolTip"), TEXT("The object or the owner of the object being possessed."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FLevelSequenceObject_CRC() { return 1530057746U; }
	UScriptStruct* Z_Construct_UScriptStruct_FLevelSequenceObjectReferenceMap()
	{
		UPackage* Outer=Z_Construct_UPackage_LevelSequence();
		extern uint32 Get_Z_Construct_UScriptStruct_FLevelSequenceObjectReferenceMap_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("LevelSequenceObjectReferenceMap"), sizeof(FLevelSequenceObjectReferenceMap), Get_Z_Construct_UScriptStruct_FLevelSequenceObjectReferenceMap_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LevelSequenceObjectReferenceMap"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FLevelSequenceObjectReferenceMap>, EStructFlags(0x00000001));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/LevelSequenceObjectReference.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FLevelSequenceObjectReferenceMap_CRC() { return 3529092414U; }
	UScriptStruct* Z_Construct_UScriptStruct_FLevelSequenceObjectReference()
	{
		UPackage* Outer=Z_Construct_UPackage_LevelSequence();
		extern uint32 Get_Z_Construct_UScriptStruct_FLevelSequenceObjectReference_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("LevelSequenceObjectReference"), sizeof(FLevelSequenceObjectReference), Get_Z_Construct_UScriptStruct_FLevelSequenceObjectReference_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LevelSequenceObjectReference"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FLevelSequenceObjectReference>, EStructFlags(0x00000001));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/LevelSequenceObjectReference.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("An external reference to an level sequence object, resolvable through an arbitrary context."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FLevelSequenceObjectReference_CRC() { return 771817697U; }
	UClass* Z_Construct_UClass_ULevelSequence_NoRegister()
	{
		return ULevelSequence::StaticClass();
	}
	UClass* Z_Construct_UClass_ULevelSequence()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_LevelSequence();
			OuterClass = ULevelSequence::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_PossessedObjects = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PossessedObjects"), RF_Public|RF_Transient|RF_Native) UMapProperty(CPP_PROPERTY_BASE(PossessedObjects_DEPRECATED, ULevelSequence), 0x0000000020000000);
				UProperty* NewProp_PossessedObjects_Key_KeyProp = new(EC_InternalUseOnlyConstructor, NewProp_PossessedObjects, TEXT("PossessedObjects_Key"), RF_Public|RF_Transient|RF_Native) UStrProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
				UProperty* NewProp_PossessedObjects_ValueProp = new(EC_InternalUseOnlyConstructor, NewProp_PossessedObjects, TEXT("PossessedObjects"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 1, 0x0000000020000000, Z_Construct_UScriptStruct_FLevelSequenceObject());
				UProperty* NewProp_MovieScene = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MovieScene"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(MovieScene, ULevelSequence), 0x0000000000000000, Z_Construct_UClass_UMovieScene_NoRegister());
				UProperty* NewProp_DefaultObjectReferences = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultObjectReferences"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DefaultObjectReferences, ULevelSequence), 0x0000000000000000, Z_Construct_UScriptStruct_FLevelSequenceObjectReferenceMap());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("LevelSequence.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/LevelSequence.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Movie scene animation for Actors."));
				MetaData->SetValue(NewProp_PossessedObjects, TEXT("ModuleRelativePath"), TEXT("Public/LevelSequence.h"));
				MetaData->SetValue(NewProp_PossessedObjects, TEXT("ToolTip"), TEXT("Deprecated property housing old possessed object bindings"));
				MetaData->SetValue(NewProp_MovieScene, TEXT("ModuleRelativePath"), TEXT("Public/LevelSequence.h"));
				MetaData->SetValue(NewProp_MovieScene, TEXT("ToolTip"), TEXT("Pointer to the movie scene that controls this animation."));
				MetaData->SetValue(NewProp_DefaultObjectReferences, TEXT("ModuleRelativePath"), TEXT("Public/LevelSequence.h"));
				MetaData->SetValue(NewProp_DefaultObjectReferences, TEXT("ToolTip"), TEXT("Collection of possessed objects."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ULevelSequence(Z_Construct_UClass_ULevelSequence, TEXT("ULevelSequence"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(ULevelSequence);
	UClass* Z_Construct_UClass_ULevelSequenceInstance_NoRegister()
	{
		return ULevelSequenceInstance::StaticClass();
	}
	UClass* Z_Construct_UClass_ULevelSequenceInstance()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMovieSceneSequence();
			Z_Construct_UPackage_LevelSequence();
			OuterClass = ULevelSequenceInstance::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_RemappedObjectReferences = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RemappedObjectReferences"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(RemappedObjectReferences, ULevelSequenceInstance), 0x0000000000000000, Z_Construct_UScriptStruct_FLevelSequenceObjectReferenceMap());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCanRemapBindings, ULevelSequenceInstance, bool);
				UProperty* NewProp_bCanRemapBindings = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bCanRemapBindings"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCanRemapBindings, ULevelSequenceInstance), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bCanRemapBindings, ULevelSequenceInstance), sizeof(bool), true);
				UProperty* NewProp_LevelSequence = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LevelSequence"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(LevelSequence, ULevelSequenceInstance), 0x0000000000002000, Z_Construct_UClass_ULevelSequence_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("LevelSequence.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/LevelSequence.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("An instance of a ULevelSequence that supports resolution and remapping of object bindings."));
				MetaData->SetValue(NewProp_RemappedObjectReferences, TEXT("ModuleRelativePath"), TEXT("Public/LevelSequence.h"));
				MetaData->SetValue(NewProp_RemappedObjectReferences, TEXT("ToolTip"), TEXT("Collection of re-mappings for possessed objects references."));
				MetaData->SetValue(NewProp_bCanRemapBindings, TEXT("ModuleRelativePath"), TEXT("Public/LevelSequence.h"));
				MetaData->SetValue(NewProp_bCanRemapBindings, TEXT("ToolTip"), TEXT("Flag to specify whether this instance can remap bindings or not."));
				MetaData->SetValue(NewProp_LevelSequence, TEXT("ModuleRelativePath"), TEXT("Public/LevelSequence.h"));
				MetaData->SetValue(NewProp_LevelSequence, TEXT("ToolTip"), TEXT("The level sequence we are instancing."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ULevelSequenceInstance(Z_Construct_UClass_ULevelSequenceInstance, TEXT("ULevelSequenceInstance"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(ULevelSequenceInstance);
	UScriptStruct* Z_Construct_UScriptStruct_FLevelSequencePlaybackSettings()
	{
		UPackage* Outer=Z_Construct_UPackage_LevelSequence();
		extern uint32 Get_Z_Construct_UScriptStruct_FLevelSequencePlaybackSettings_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("LevelSequencePlaybackSettings"), sizeof(FLevelSequencePlaybackSettings), Get_Z_Construct_UScriptStruct_FLevelSequencePlaybackSettings_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LevelSequencePlaybackSettings"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FLevelSequencePlaybackSettings>, EStructFlags(0x00000001));
			UProperty* NewProp_PlayRate = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PlayRate"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(PlayRate, FLevelSequencePlaybackSettings), 0x0000000000000005);
			UProperty* NewProp_LoopCount = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LoopCount"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(LoopCount, FLevelSequencePlaybackSettings), 0x0000000000000005);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/LevelSequencePlayer.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Settings for the level sequence player actor."));
			MetaData->SetValue(NewProp_PlayRate, TEXT("Category"), TEXT("Playback"));
			MetaData->SetValue(NewProp_PlayRate, TEXT("ModuleRelativePath"), TEXT("Public/LevelSequencePlayer.h"));
			MetaData->SetValue(NewProp_PlayRate, TEXT("ToolTip"), TEXT("The rate at which to playback the animation"));
			MetaData->SetValue(NewProp_PlayRate, TEXT("Units"), TEXT("Multiplier"));
			MetaData->SetValue(NewProp_LoopCount, TEXT("Category"), TEXT("Playback"));
			MetaData->SetValue(NewProp_LoopCount, TEXT("DisplayName"), TEXT("Loop"));
			MetaData->SetValue(NewProp_LoopCount, TEXT("ModuleRelativePath"), TEXT("Public/LevelSequencePlayer.h"));
			MetaData->SetValue(NewProp_LoopCount, TEXT("ToolTip"), TEXT("Number of times to loop playback. -1 for infinite, else the number of times to loop before stopping"));
			MetaData->SetValue(NewProp_LoopCount, TEXT("UIMin"), TEXT("1"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FLevelSequencePlaybackSettings_CRC() { return 1315728483U; }
	UFunction* Z_Construct_UFunction_ULevelSequencePlayer_CreateLevelSequencePlayer()
	{
		struct LevelSequencePlayer_eventCreateLevelSequencePlayer_Parms
		{
			UObject* WorldContextObject;
			ULevelSequence* LevelSequence;
			FLevelSequencePlaybackSettings Settings;
			ULevelSequencePlayer* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULevelSequencePlayer();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CreateLevelSequencePlayer"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(LevelSequencePlayer_eventCreateLevelSequencePlayer_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, LevelSequencePlayer_eventCreateLevelSequencePlayer_Parms), 0x0000000000000580, Z_Construct_UClass_ULevelSequencePlayer_NoRegister());
			UProperty* NewProp_Settings = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Settings"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Settings, LevelSequencePlayer_eventCreateLevelSequencePlayer_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FLevelSequencePlaybackSettings());
			UProperty* NewProp_LevelSequence = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LevelSequence"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(LevelSequence, LevelSequencePlayer_eventCreateLevelSequencePlayer_Parms), 0x0000000000000080, Z_Construct_UClass_ULevelSequence_NoRegister());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, LevelSequencePlayer_eventCreateLevelSequencePlayer_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Game|Cinematic"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LevelSequencePlayer.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Create a new level sequence player.\n\n@param WorldContextObject Context object from which to retrieve a UWorld.\n@param LevelSequence The level sequence to play.\n@param Settings The desired playback settings"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULevelSequencePlayer_GetLength()
	{
		struct LevelSequencePlayer_eventGetLength_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULevelSequencePlayer();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetLength"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(LevelSequencePlayer_eventGetLength_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, LevelSequencePlayer_eventGetLength_Parms), 0x0000000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Game|Cinematic"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LevelSequencePlayer.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get the length of the sequence"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULevelSequencePlayer_GetPlaybackPosition()
	{
		struct LevelSequencePlayer_eventGetPlaybackPosition_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULevelSequencePlayer();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetPlaybackPosition"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(LevelSequencePlayer_eventGetPlaybackPosition_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, LevelSequencePlayer_eventGetPlaybackPosition_Parms), 0x0000000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Game|Cinematic"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LevelSequencePlayer.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get the current playback position"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULevelSequencePlayer_GetPlayRate()
	{
		struct LevelSequencePlayer_eventGetPlayRate_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULevelSequencePlayer();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetPlayRate"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(LevelSequencePlayer_eventGetPlayRate_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, LevelSequencePlayer_eventGetPlayRate_Parms), 0x0000000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Game|Cinematic"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LevelSequencePlayer.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get the playback rate of this player."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULevelSequencePlayer_IsPlaying()
	{
		struct LevelSequencePlayer_eventIsPlaying_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULevelSequencePlayer();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsPlaying"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(LevelSequencePlayer_eventIsPlaying_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, LevelSequencePlayer_eventIsPlaying_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, LevelSequencePlayer_eventIsPlaying_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, LevelSequencePlayer_eventIsPlaying_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Game|Cinematic"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LevelSequencePlayer.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Check whether the sequence is actively playing."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULevelSequencePlayer_Pause()
	{
		UObject* Outer=Z_Construct_UClass_ULevelSequencePlayer();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Pause"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Game|Cinematic"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LevelSequencePlayer.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Pause playback."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULevelSequencePlayer_Play()
	{
		UObject* Outer=Z_Construct_UClass_ULevelSequencePlayer();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Play"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Game|Cinematic"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LevelSequencePlayer.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Start playback from the current time cursor position, using the current play rate."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULevelSequencePlayer_PlayLooping()
	{
		struct LevelSequencePlayer_eventPlayLooping_Parms
		{
			int32 NumLoops;
		};
		UObject* Outer=Z_Construct_UClass_ULevelSequencePlayer();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PlayLooping"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(LevelSequencePlayer_eventPlayLooping_Parms));
			UProperty* NewProp_NumLoops = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NumLoops"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(NumLoops, LevelSequencePlayer_eventPlayLooping_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Game|Cinematic"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_NumLoops"), TEXT("-1"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LevelSequencePlayer.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Start playback from the current time cursor position, looping the specified number of times.\n@param NumLoops - The number of loops to play. -1 indicates infinite looping."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULevelSequencePlayer_SetPlaybackPosition()
	{
		struct LevelSequencePlayer_eventSetPlaybackPosition_Parms
		{
			float NewPlaybackPosition;
		};
		UObject* Outer=Z_Construct_UClass_ULevelSequencePlayer();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetPlaybackPosition"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(LevelSequencePlayer_eventSetPlaybackPosition_Parms));
			UProperty* NewProp_NewPlaybackPosition = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewPlaybackPosition"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(NewPlaybackPosition, LevelSequencePlayer_eventSetPlaybackPosition_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Game|Cinematic"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LevelSequencePlayer.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set the current playback position\n@param NewPlaybackPosition - The new playback position to set.\nIf the animation is currently playing, it will continue to do so from the new position"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULevelSequencePlayer_SetPlayRate()
	{
		struct LevelSequencePlayer_eventSetPlayRate_Parms
		{
			float PlayRate;
		};
		UObject* Outer=Z_Construct_UClass_ULevelSequencePlayer();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetPlayRate"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(LevelSequencePlayer_eventSetPlayRate_Parms));
			UProperty* NewProp_PlayRate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PlayRate"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(PlayRate, LevelSequencePlayer_eventSetPlayRate_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Game|Cinematic"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LevelSequencePlayer.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set the playback rate of this player. Negative values will play the animation in reverse.\n@param PlayRate - The new rate of playback for the animation."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULevelSequencePlayer_Stop()
	{
		UObject* Outer=Z_Construct_UClass_ULevelSequencePlayer();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Stop"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Game|Cinematic"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LevelSequencePlayer.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Stop playback."));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_ULevelSequencePlayer_NoRegister()
	{
		return ULevelSequencePlayer::StaticClass();
	}
	UClass* Z_Construct_UClass_ULevelSequencePlayer()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_LevelSequence();
			OuterClass = ULevelSequencePlayer::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_ULevelSequencePlayer_CreateLevelSequencePlayer());
				OuterClass->LinkChild(Z_Construct_UFunction_ULevelSequencePlayer_GetLength());
				OuterClass->LinkChild(Z_Construct_UFunction_ULevelSequencePlayer_GetPlaybackPosition());
				OuterClass->LinkChild(Z_Construct_UFunction_ULevelSequencePlayer_GetPlayRate());
				OuterClass->LinkChild(Z_Construct_UFunction_ULevelSequencePlayer_IsPlaying());
				OuterClass->LinkChild(Z_Construct_UFunction_ULevelSequencePlayer_Pause());
				OuterClass->LinkChild(Z_Construct_UFunction_ULevelSequencePlayer_Play());
				OuterClass->LinkChild(Z_Construct_UFunction_ULevelSequencePlayer_PlayLooping());
				OuterClass->LinkChild(Z_Construct_UFunction_ULevelSequencePlayer_SetPlaybackPosition());
				OuterClass->LinkChild(Z_Construct_UFunction_ULevelSequencePlayer_SetPlayRate());
				OuterClass->LinkChild(Z_Construct_UFunction_ULevelSequencePlayer_Stop());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_PlaybackSettings = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PlaybackSettings"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PlaybackSettings, ULevelSequencePlayer), 0x0000000000000000, Z_Construct_UScriptStruct_FLevelSequencePlaybackSettings());
				UProperty* NewProp_TimeCursorPosition = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TimeCursorPosition"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(TimeCursorPosition, ULevelSequencePlayer), 0x0000000000000000);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsPlaying, ULevelSequencePlayer, bool);
				UProperty* NewProp_bIsPlaying = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsPlaying"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsPlaying, ULevelSequencePlayer), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bIsPlaying, ULevelSequencePlayer), sizeof(bool), true);
				UProperty* NewProp_LevelSequenceInstance = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LevelSequenceInstance"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(LevelSequenceInstance, ULevelSequencePlayer), 0x0000000000000000, Z_Construct_UClass_ULevelSequenceInstance_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULevelSequencePlayer_CreateLevelSequencePlayer()); // 3258606794
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULevelSequencePlayer_GetLength()); // 739625427
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULevelSequencePlayer_GetPlaybackPosition()); // 2832162418
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULevelSequencePlayer_GetPlayRate()); // 2643758510
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULevelSequencePlayer_IsPlaying()); // 1010884002
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULevelSequencePlayer_Pause()); // 1725694550
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULevelSequencePlayer_Play()); // 1344350342
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULevelSequencePlayer_PlayLooping()); // 684387998
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULevelSequencePlayer_SetPlaybackPosition()); // 109194048
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULevelSequencePlayer_SetPlayRate()); // 1577909850
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULevelSequencePlayer_Stop()); // 4221802336
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("LevelSequencePlayer.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/LevelSequencePlayer.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("ULevelSequencePlayer is used to actually \"play\" an level sequence asset at runtime.\n\nThis class keeps track of playback state and provides functions for manipulating\nan level sequence while its playing."));
				MetaData->SetValue(NewProp_PlaybackSettings, TEXT("ModuleRelativePath"), TEXT("Public/LevelSequencePlayer.h"));
				MetaData->SetValue(NewProp_PlaybackSettings, TEXT("ToolTip"), TEXT("Specific playback settings for the animation."));
				MetaData->SetValue(NewProp_TimeCursorPosition, TEXT("ModuleRelativePath"), TEXT("Public/LevelSequencePlayer.h"));
				MetaData->SetValue(NewProp_TimeCursorPosition, TEXT("ToolTip"), TEXT("The current time cursor position within the sequence (in seconds)"));
				MetaData->SetValue(NewProp_bIsPlaying, TEXT("ModuleRelativePath"), TEXT("Public/LevelSequencePlayer.h"));
				MetaData->SetValue(NewProp_bIsPlaying, TEXT("ToolTip"), TEXT("Whether we're currently playing. If false, then sequence playback is paused or was never started."));
				MetaData->SetValue(NewProp_LevelSequenceInstance, TEXT("ModuleRelativePath"), TEXT("Public/LevelSequencePlayer.h"));
				MetaData->SetValue(NewProp_LevelSequenceInstance, TEXT("ToolTip"), TEXT("The level sequence to play."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ULevelSequencePlayer(Z_Construct_UClass_ULevelSequencePlayer, TEXT("ULevelSequencePlayer"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(ULevelSequencePlayer);
	UFunction* Z_Construct_UFunction_ALevelSequenceActor_SetSequence()
	{
		struct LevelSequenceActor_eventSetSequence_Parms
		{
			ULevelSequence* InSequence;
		};
		UObject* Outer=Z_Construct_UClass_ALevelSequenceActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetSequence"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(LevelSequenceActor_eventSetSequence_Parms));
			UProperty* NewProp_InSequence = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InSequence"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(InSequence, LevelSequenceActor_eventSetSequence_Parms), 0x0000000000000080, Z_Construct_UClass_ULevelSequence_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Game|Cinematic"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LevelSequenceActor.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_ALevelSequenceActor_NoRegister()
	{
		return ALevelSequenceActor::StaticClass();
	}
	UClass* Z_Construct_UClass_ALevelSequenceActor()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AActor();
			Z_Construct_UPackage_LevelSequence();
			OuterClass = ALevelSequenceActor::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_ALevelSequenceActor_SetSequence());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_SequenceInstance = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SequenceInstance"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(SequenceInstance, ALevelSequenceActor), 0x0002000000080008, Z_Construct_UClass_ULevelSequenceInstance_NoRegister());
				UProperty* NewProp_LevelSequence = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LevelSequence"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LevelSequence, ALevelSequenceActor), 0x0000000000000015, Z_Construct_UScriptStruct_FStringAssetReference());
				UProperty* NewProp_SequencePlayer = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SequencePlayer"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(SequencePlayer, ALevelSequenceActor), 0x0000000000002014, Z_Construct_UClass_ULevelSequencePlayer_NoRegister());
				UProperty* NewProp_PlaybackSettings = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PlaybackSettings"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PlaybackSettings, ALevelSequenceActor), 0x0000000000000015, Z_Construct_UScriptStruct_FLevelSequencePlaybackSettings());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAutoPlay, ALevelSequenceActor, bool);
				UProperty* NewProp_bAutoPlay = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAutoPlay"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAutoPlay, ALevelSequenceActor), 0x0000000000000015, CPP_BOOL_PROPERTY_BITMASK(bAutoPlay, ALevelSequenceActor), sizeof(bool), true);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ALevelSequenceActor_SetSequence()); // 2537214600
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DevelopmentStatus"), TEXT("Experimental"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Rendering Physics LOD Activation"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("LevelSequenceActor.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/LevelSequenceActor.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Actor responsible for controlling a specific level sequence in the world."));
				MetaData->SetValue(NewProp_SequenceInstance, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_SequenceInstance, TEXT("ModuleRelativePath"), TEXT("Public/LevelSequenceActor.h"));
				MetaData->SetValue(NewProp_SequenceInstance, TEXT("ToolTip"), TEXT("Instance of the level sequence we're using. Stored as a property so we can track live actor references."));
				MetaData->SetValue(NewProp_LevelSequence, TEXT("AllowedClasses"), TEXT("LevelSequence"));
				MetaData->SetValue(NewProp_LevelSequence, TEXT("Category"), TEXT("General"));
				MetaData->SetValue(NewProp_LevelSequence, TEXT("ModuleRelativePath"), TEXT("Public/LevelSequenceActor.h"));
				MetaData->SetValue(NewProp_SequencePlayer, TEXT("Category"), TEXT("Playback"));
				MetaData->SetValue(NewProp_SequencePlayer, TEXT("ModuleRelativePath"), TEXT("Public/LevelSequenceActor.h"));
				MetaData->SetValue(NewProp_PlaybackSettings, TEXT("Category"), TEXT("Playback"));
				MetaData->SetValue(NewProp_PlaybackSettings, TEXT("ModuleRelativePath"), TEXT("Public/LevelSequenceActor.h"));
				MetaData->SetValue(NewProp_PlaybackSettings, TEXT("ShowOnlyInnerProperties"), TEXT(""));
				MetaData->SetValue(NewProp_bAutoPlay, TEXT("Category"), TEXT("Playback"));
				MetaData->SetValue(NewProp_bAutoPlay, TEXT("ModuleRelativePath"), TEXT("Public/LevelSequenceActor.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ALevelSequenceActor(Z_Construct_UClass_ALevelSequenceActor, TEXT("ALevelSequenceActor"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(ALevelSequenceActor);
	UPackage* Z_Construct_UPackage_LevelSequence()
	{
		static UPackage* ReturnPackage = NULL;
		if (!ReturnPackage)
		{
			ReturnPackage = CastChecked<UPackage>(StaticFindObjectFast(UPackage::StaticClass(), NULL, FName(TEXT("/Script/LevelSequence")), false, false));
			ReturnPackage->SetPackageFlags(PKG_CompiledIn | 0x00000000);
			FGuid Guid;
			Guid.A = 0xFCE7130D;
			Guid.B = 0x94056675;
			Guid.C = 0x00000000;
			Guid.D = 0x00000000;
			ReturnPackage->SetGuid(Guid);

		}
		return ReturnPackage;
	}
#endif

PRAGMA_ENABLE_DEPRECATION_WARNINGS
