// Copyright 1998-2015 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Boilerplate C++ definitions for a single module.
	This is automatically generated by UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "Private/MediaAssetsPrivatePCH.h"
#include "MediaAssets.generated.dep.h"
PRAGMA_DISABLE_DEPRECATION_WARNINGS
void EmptyLinkFunctionForGeneratedCodeMediaAssets() {}
	void UMediaPlayer::StaticRegisterNativesUMediaPlayer()
	{
		FNativeFunctionRegistrar::RegisterFunction(UMediaPlayer::StaticClass(),"CanPause",(Native)&UMediaPlayer::execCanPause);
		FNativeFunctionRegistrar::RegisterFunction(UMediaPlayer::StaticClass(),"CanPlay",(Native)&UMediaPlayer::execCanPlay);
		FNativeFunctionRegistrar::RegisterFunction(UMediaPlayer::StaticClass(),"Close",(Native)&UMediaPlayer::execClose);
		FNativeFunctionRegistrar::RegisterFunction(UMediaPlayer::StaticClass(),"GetDuration",(Native)&UMediaPlayer::execGetDuration);
		FNativeFunctionRegistrar::RegisterFunction(UMediaPlayer::StaticClass(),"GetRate",(Native)&UMediaPlayer::execGetRate);
		FNativeFunctionRegistrar::RegisterFunction(UMediaPlayer::StaticClass(),"GetTime",(Native)&UMediaPlayer::execGetTime);
		FNativeFunctionRegistrar::RegisterFunction(UMediaPlayer::StaticClass(),"GetUrl",(Native)&UMediaPlayer::execGetUrl);
		FNativeFunctionRegistrar::RegisterFunction(UMediaPlayer::StaticClass(),"IsLooping",(Native)&UMediaPlayer::execIsLooping);
		FNativeFunctionRegistrar::RegisterFunction(UMediaPlayer::StaticClass(),"IsPaused",(Native)&UMediaPlayer::execIsPaused);
		FNativeFunctionRegistrar::RegisterFunction(UMediaPlayer::StaticClass(),"IsPlaying",(Native)&UMediaPlayer::execIsPlaying);
		FNativeFunctionRegistrar::RegisterFunction(UMediaPlayer::StaticClass(),"IsStopped",(Native)&UMediaPlayer::execIsStopped);
		FNativeFunctionRegistrar::RegisterFunction(UMediaPlayer::StaticClass(),"OpenUrl",(Native)&UMediaPlayer::execOpenUrl);
		FNativeFunctionRegistrar::RegisterFunction(UMediaPlayer::StaticClass(),"Pause",(Native)&UMediaPlayer::execPause);
		FNativeFunctionRegistrar::RegisterFunction(UMediaPlayer::StaticClass(),"Play",(Native)&UMediaPlayer::execPlay);
		FNativeFunctionRegistrar::RegisterFunction(UMediaPlayer::StaticClass(),"Rewind",(Native)&UMediaPlayer::execRewind);
		FNativeFunctionRegistrar::RegisterFunction(UMediaPlayer::StaticClass(),"Seek",(Native)&UMediaPlayer::execSeek);
		FNativeFunctionRegistrar::RegisterFunction(UMediaPlayer::StaticClass(),"SetLooping",(Native)&UMediaPlayer::execSetLooping);
		FNativeFunctionRegistrar::RegisterFunction(UMediaPlayer::StaticClass(),"SetRate",(Native)&UMediaPlayer::execSetRate);
		FNativeFunctionRegistrar::RegisterFunction(UMediaPlayer::StaticClass(),"SupportsRate",(Native)&UMediaPlayer::execSupportsRate);
		FNativeFunctionRegistrar::RegisterFunction(UMediaPlayer::StaticClass(),"SupportsScrubbing",(Native)&UMediaPlayer::execSupportsScrubbing);
		FNativeFunctionRegistrar::RegisterFunction(UMediaPlayer::StaticClass(),"SupportsSeeking",(Native)&UMediaPlayer::execSupportsSeeking);
	}
	IMPLEMENT_CLASS(UMediaPlayer, 4114671280);
	void UMediaSoundWave::StaticRegisterNativesUMediaSoundWave()
	{
		FNativeFunctionRegistrar::RegisterFunction(UMediaSoundWave::StaticClass(),"SetMediaPlayer",(Native)&UMediaSoundWave::execSetMediaPlayer);
	}
	IMPLEMENT_CLASS(UMediaSoundWave, 2149971291);
	void UMediaTexture::StaticRegisterNativesUMediaTexture()
	{
		FNativeFunctionRegistrar::RegisterFunction(UMediaTexture::StaticClass(),"SetMediaPlayer",(Native)&UMediaTexture::execSetMediaPlayer);
	}
	IMPLEMENT_CLASS(UMediaTexture, 1518472166);
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FTimespan();
	COREUOBJECT_API class UClass* Z_Construct_UClass_UObject();
	ENGINE_API class UClass* Z_Construct_UClass_USoundWave();
	ENGINE_API class UClass* Z_Construct_UClass_UTexture();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FLinearColor();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_TextureAddress();

	MEDIAASSETS_API class UFunction* Z_Construct_UDelegateFunction_MediaAssets_OnMediaPlayerMediaOpened__DelegateSignature();
	MEDIAASSETS_API class UFunction* Z_Construct_UDelegateFunction_MediaAssets_OnMediaPlayerMediaClosed__DelegateSignature();
	MEDIAASSETS_API class UFunction* Z_Construct_UFunction_UMediaPlayer_CanPause();
	MEDIAASSETS_API class UFunction* Z_Construct_UFunction_UMediaPlayer_CanPlay();
	MEDIAASSETS_API class UFunction* Z_Construct_UFunction_UMediaPlayer_Close();
	MEDIAASSETS_API class UFunction* Z_Construct_UFunction_UMediaPlayer_GetDuration();
	MEDIAASSETS_API class UFunction* Z_Construct_UFunction_UMediaPlayer_GetRate();
	MEDIAASSETS_API class UFunction* Z_Construct_UFunction_UMediaPlayer_GetTime();
	MEDIAASSETS_API class UFunction* Z_Construct_UFunction_UMediaPlayer_GetUrl();
	MEDIAASSETS_API class UFunction* Z_Construct_UFunction_UMediaPlayer_IsLooping();
	MEDIAASSETS_API class UFunction* Z_Construct_UFunction_UMediaPlayer_IsPaused();
	MEDIAASSETS_API class UFunction* Z_Construct_UFunction_UMediaPlayer_IsPlaying();
	MEDIAASSETS_API class UFunction* Z_Construct_UFunction_UMediaPlayer_IsStopped();
	MEDIAASSETS_API class UFunction* Z_Construct_UFunction_UMediaPlayer_OpenUrl();
	MEDIAASSETS_API class UFunction* Z_Construct_UFunction_UMediaPlayer_Pause();
	MEDIAASSETS_API class UFunction* Z_Construct_UFunction_UMediaPlayer_Play();
	MEDIAASSETS_API class UFunction* Z_Construct_UFunction_UMediaPlayer_Rewind();
	MEDIAASSETS_API class UFunction* Z_Construct_UFunction_UMediaPlayer_Seek();
	MEDIAASSETS_API class UFunction* Z_Construct_UFunction_UMediaPlayer_SetLooping();
	MEDIAASSETS_API class UFunction* Z_Construct_UFunction_UMediaPlayer_SetRate();
	MEDIAASSETS_API class UFunction* Z_Construct_UFunction_UMediaPlayer_SupportsRate();
	MEDIAASSETS_API class UFunction* Z_Construct_UFunction_UMediaPlayer_SupportsScrubbing();
	MEDIAASSETS_API class UFunction* Z_Construct_UFunction_UMediaPlayer_SupportsSeeking();
	MEDIAASSETS_API class UClass* Z_Construct_UClass_UMediaPlayer_NoRegister();
	MEDIAASSETS_API class UClass* Z_Construct_UClass_UMediaPlayer();
	MEDIAASSETS_API class UFunction* Z_Construct_UFunction_UMediaSoundWave_SetMediaPlayer();
	MEDIAASSETS_API class UClass* Z_Construct_UClass_UMediaSoundWave_NoRegister();
	MEDIAASSETS_API class UClass* Z_Construct_UClass_UMediaSoundWave();
	MEDIAASSETS_API class UFunction* Z_Construct_UFunction_UMediaTexture_SetMediaPlayer();
	MEDIAASSETS_API class UClass* Z_Construct_UClass_UMediaTexture_NoRegister();
	MEDIAASSETS_API class UClass* Z_Construct_UClass_UMediaTexture();
	MEDIAASSETS_API class UPackage* Z_Construct_UPackage_MediaAssets();
	UFunction* Z_Construct_UDelegateFunction_MediaAssets_OnMediaPlayerMediaOpened__DelegateSignature()
	{
		struct _Script_MediaAssets_eventOnMediaPlayerMediaOpened_Parms
		{
			FString OpenedUrl;
		};
		UObject* Outer=Z_Construct_UPackage_MediaAssets();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnMediaPlayerMediaOpened__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535, sizeof(_Script_MediaAssets_eventOnMediaPlayerMediaOpened_Parms));
			UProperty* NewProp_OpenedUrl = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OpenedUrl"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(OpenedUrl, _Script_MediaAssets_eventOnMediaPlayerMediaOpened_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/MediaPlayer.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Multicast delegate that is invoked when a media player's media has been opened."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UDelegateFunction_MediaAssets_OnMediaPlayerMediaClosed__DelegateSignature()
	{
		UObject* Outer=Z_Construct_UPackage_MediaAssets();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnMediaPlayerMediaClosed__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/MediaPlayer.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Multicast delegate that is invoked when a media player's media has been closed."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UMediaPlayer_CanPause()
	{
		struct MediaPlayer_eventCanPause_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UMediaPlayer();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CanPause"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(MediaPlayer_eventCanPause_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, MediaPlayer_eventCanPause_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, MediaPlayer_eventCanPause_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, MediaPlayer_eventCanPause_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Media|MediaPlayer"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/MediaPlayer.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Checks whether media playback can be paused right now.\n\nPlayback can be paused if the media supports pausing and if it is currently playing.\n\n@return true if pausing playback can be paused, false otherwise.\n@see CanPlay, Pause"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UMediaPlayer_CanPlay()
	{
		struct MediaPlayer_eventCanPlay_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UMediaPlayer();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CanPlay"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(MediaPlayer_eventCanPlay_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, MediaPlayer_eventCanPlay_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, MediaPlayer_eventCanPlay_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, MediaPlayer_eventCanPlay_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Media|MediaPlayer"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/MediaPlayer.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Checks whether media playback can be started right now.\n\n@return true if playback can be started, false otherwise.\n@see CanPause, Play"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UMediaPlayer_Close()
	{
		UObject* Outer=Z_Construct_UClass_UMediaPlayer();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Close"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Media|MediaPlayer"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/MediaPlayer.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Close the currently open media, if any.\n\n@see OnMediaClosed, Open, Pause, Play"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UMediaPlayer_GetDuration()
	{
		struct MediaPlayer_eventGetDuration_Parms
		{
			FTimespan ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UMediaPlayer();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetDuration"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54820401, 65535, sizeof(MediaPlayer_eventGetDuration_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, MediaPlayer_eventGetDuration_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FTimespan());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Media|MediaPlayer"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/MediaPlayer.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the media's duration.\n\n@return A time span representing the duration.\n@see GetTime, Seek"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UMediaPlayer_GetRate()
	{
		struct MediaPlayer_eventGetRate_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UMediaPlayer();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetRate"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(MediaPlayer_eventGetRate_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, MediaPlayer_eventGetRate_Parms), 0x0000000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Media|MediaPlayer"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/MediaPlayer.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the media's current playback rate.\n\n@return The playback rate.\n@see SetRate, SupportsRate"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UMediaPlayer_GetTime()
	{
		struct MediaPlayer_eventGetTime_Parms
		{
			FTimespan ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UMediaPlayer();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetTime"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54820401, 65535, sizeof(MediaPlayer_eventGetTime_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, MediaPlayer_eventGetTime_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FTimespan());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Media|MediaPlayer"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/MediaPlayer.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the media's current playback time.\n\n@return Playback time.\n@see GetDuration, Seek"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UMediaPlayer_GetUrl()
	{
		struct MediaPlayer_eventGetUrl_Parms
		{
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UMediaPlayer();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetUrl"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(MediaPlayer_eventGetUrl_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, MediaPlayer_eventGetUrl_Parms), 0x0000000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Media|MediaPlayer"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/MediaPlayer.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the URL of the currently loaded media, if any.\n\n@return Media URL, or empty string if no media was loaded.\n@see OpenUrl"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UMediaPlayer_IsLooping()
	{
		struct MediaPlayer_eventIsLooping_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UMediaPlayer();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsLooping"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(MediaPlayer_eventIsLooping_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, MediaPlayer_eventIsLooping_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, MediaPlayer_eventIsLooping_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, MediaPlayer_eventIsLooping_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Media|MediaPlayer"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/MediaPlayer.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Checks whether playback is looping.\n\n@return true if looping, false otherwise.\n@see SetLooping"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UMediaPlayer_IsPaused()
	{
		struct MediaPlayer_eventIsPaused_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UMediaPlayer();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsPaused"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(MediaPlayer_eventIsPaused_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, MediaPlayer_eventIsPaused_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, MediaPlayer_eventIsPaused_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, MediaPlayer_eventIsPaused_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Media|MediaPlayer"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/MediaPlayer.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Checks whether playback is currently paused.\n\n@return true if playback is paused, false otherwise.\n@see CanPause, IsPlaying, IsStopped, Pause"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UMediaPlayer_IsPlaying()
	{
		struct MediaPlayer_eventIsPlaying_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UMediaPlayer();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsPlaying"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(MediaPlayer_eventIsPlaying_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, MediaPlayer_eventIsPlaying_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, MediaPlayer_eventIsPlaying_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, MediaPlayer_eventIsPlaying_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Media|MediaPlayer"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/MediaPlayer.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Checks whether playback has started.\n\n@return true if playback has started, false otherwise.\n@see CanPlay, IsPaused, IsStopped, Play"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UMediaPlayer_IsStopped()
	{
		struct MediaPlayer_eventIsStopped_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UMediaPlayer();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsStopped"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(MediaPlayer_eventIsStopped_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, MediaPlayer_eventIsStopped_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, MediaPlayer_eventIsStopped_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, MediaPlayer_eventIsStopped_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Media|MediaPlayer"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/MediaPlayer.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Checks whether playback has stopped.\n\n@return true if playback has stopped, false otherwise.\n@see IsPaused, IsPlaying, Stop"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UMediaPlayer_OpenUrl()
	{
		struct MediaPlayer_eventOpenUrl_Parms
		{
			FString NewUrl;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UMediaPlayer();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OpenUrl"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(MediaPlayer_eventOpenUrl_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, MediaPlayer_eventOpenUrl_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, MediaPlayer_eventOpenUrl_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, MediaPlayer_eventOpenUrl_Parms), sizeof(bool), true);
			UProperty* NewProp_NewUrl = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewUrl"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(NewUrl, MediaPlayer_eventOpenUrl_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Media|MediaPlayer"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/MediaPlayer.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Opens the specified media URL.\n\n@param NewUrl The URL to open.\n@return true on success, false otherwise.\n@see GetUrl, Close"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UMediaPlayer_Pause()
	{
		struct MediaPlayer_eventPause_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UMediaPlayer();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Pause"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(MediaPlayer_eventPause_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, MediaPlayer_eventPause_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, MediaPlayer_eventPause_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, MediaPlayer_eventPause_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Media|MediaPlayer"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/MediaPlayer.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Pauses media playback.\n\nThis is the same as setting the playback rate to 0.0.\n\n@return true if playback is being paused, false otherwise.\n@see CanPause, Close, Play, Rewind, Seek, SetRate"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UMediaPlayer_Play()
	{
		struct MediaPlayer_eventPlay_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UMediaPlayer();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Play"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(MediaPlayer_eventPlay_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, MediaPlayer_eventPlay_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, MediaPlayer_eventPlay_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, MediaPlayer_eventPlay_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Media|MediaPlayer"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/MediaPlayer.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Starts media playback.\n\nThis is the same as setting the playback rate to 1.0.\n\n@return true if playback is starting, false otherwise.\n@see CanPlay, Close, Pause, Rewind, Seek, SetRate"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UMediaPlayer_Rewind()
	{
		struct MediaPlayer_eventRewind_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UMediaPlayer();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Rewind"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(MediaPlayer_eventRewind_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, MediaPlayer_eventRewind_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, MediaPlayer_eventRewind_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, MediaPlayer_eventRewind_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Media|MediaPlayer"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/MediaPlayer.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Rewinds the media to the beginning.\n\nThis is the same as seeking to zero time.\n\n@return true if rewinding, false otherwise.\n@see GetTime, Close, Pause, Play, Seek"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UMediaPlayer_Seek()
	{
		struct MediaPlayer_eventSeek_Parms
		{
			FTimespan InTime;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UMediaPlayer();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Seek"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C20401, 65535, sizeof(MediaPlayer_eventSeek_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, MediaPlayer_eventSeek_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, MediaPlayer_eventSeek_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, MediaPlayer_eventSeek_Parms), sizeof(bool), true);
			UProperty* NewProp_InTime = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InTime"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InTime, MediaPlayer_eventSeek_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FTimespan());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Media|MediaPlayer"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/MediaPlayer.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Seeks to the specified playback time.\n\n@param InTime The playback time to set.\n@return true on success, false otherwise.\n@see GetTime, Rewind"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UMediaPlayer_SetLooping()
	{
		struct MediaPlayer_eventSetLooping_Parms
		{
			bool InLooping;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UMediaPlayer();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetLooping"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(MediaPlayer_eventSetLooping_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, MediaPlayer_eventSetLooping_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, MediaPlayer_eventSetLooping_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, MediaPlayer_eventSetLooping_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(InLooping, MediaPlayer_eventSetLooping_Parms, bool);
			UProperty* NewProp_InLooping = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InLooping"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(InLooping, MediaPlayer_eventSetLooping_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(InLooping, MediaPlayer_eventSetLooping_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Media|MediaPlayer"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/MediaPlayer.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Enables or disables playback looping.\n\n@param Looping Whether playback should be looped.\n@return true on success, false otherwise.\n@see IsLooping"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UMediaPlayer_SetRate()
	{
		struct MediaPlayer_eventSetRate_Parms
		{
			float Rate;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UMediaPlayer();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetRate"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(MediaPlayer_eventSetRate_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, MediaPlayer_eventSetRate_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, MediaPlayer_eventSetRate_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, MediaPlayer_eventSetRate_Parms), sizeof(bool), true);
			UProperty* NewProp_Rate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Rate"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Rate, MediaPlayer_eventSetRate_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Media|MediaPlayer"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/MediaPlayer.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Changes the media's playback rate.\n\n@param Rate The playback rate to set.\n@return true on success, false otherwise.\n@see GetRate, SupportsRate"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UMediaPlayer_SupportsRate()
	{
		struct MediaPlayer_eventSupportsRate_Parms
		{
			float Rate;
			bool Unthinned;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UMediaPlayer();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SupportsRate"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(MediaPlayer_eventSupportsRate_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, MediaPlayer_eventSupportsRate_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, MediaPlayer_eventSupportsRate_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, MediaPlayer_eventSupportsRate_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(Unthinned, MediaPlayer_eventSupportsRate_Parms, bool);
			UProperty* NewProp_Unthinned = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Unthinned"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Unthinned, MediaPlayer_eventSupportsRate_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(Unthinned, MediaPlayer_eventSupportsRate_Parms), sizeof(bool), true);
			UProperty* NewProp_Rate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Rate"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Rate, MediaPlayer_eventSupportsRate_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Media|MediaPlayer"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/MediaPlayer.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Checks whether the specified playback rate is supported.\n\n@param Rate The playback rate to check.\n@param Unthinned Whether no frames should be dropped at the given rate.\n@see SupportsScrubbing, SupportsSeeking"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UMediaPlayer_SupportsScrubbing()
	{
		struct MediaPlayer_eventSupportsScrubbing_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UMediaPlayer();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SupportsScrubbing"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(MediaPlayer_eventSupportsScrubbing_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, MediaPlayer_eventSupportsScrubbing_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, MediaPlayer_eventSupportsScrubbing_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, MediaPlayer_eventSupportsScrubbing_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Media|MediaPlayer"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/MediaPlayer.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Checks whether the currently loaded media supports scrubbing.\n\n@return true if scrubbing is supported, false otherwise.\n@see SupportsRate, SupportsSeeking"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UMediaPlayer_SupportsSeeking()
	{
		struct MediaPlayer_eventSupportsSeeking_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UMediaPlayer();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SupportsSeeking"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(MediaPlayer_eventSupportsSeeking_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, MediaPlayer_eventSupportsSeeking_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, MediaPlayer_eventSupportsSeeking_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, MediaPlayer_eventSupportsSeeking_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Media|MediaPlayer"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/MediaPlayer.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Checks whether the currently loaded media can jump to a certain position.\n\n@return true if seeking is supported, false otherwise.\n@see SupportsRate, SupportsScrubbing"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UMediaPlayer_NoRegister()
	{
		return UMediaPlayer::StaticClass();
	}
	UClass* Z_Construct_UClass_UMediaPlayer()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_MediaAssets();
			OuterClass = UMediaPlayer::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_UMediaPlayer_CanPause());
				OuterClass->LinkChild(Z_Construct_UFunction_UMediaPlayer_CanPlay());
				OuterClass->LinkChild(Z_Construct_UFunction_UMediaPlayer_Close());
				OuterClass->LinkChild(Z_Construct_UFunction_UMediaPlayer_GetDuration());
				OuterClass->LinkChild(Z_Construct_UFunction_UMediaPlayer_GetRate());
				OuterClass->LinkChild(Z_Construct_UFunction_UMediaPlayer_GetTime());
				OuterClass->LinkChild(Z_Construct_UFunction_UMediaPlayer_GetUrl());
				OuterClass->LinkChild(Z_Construct_UFunction_UMediaPlayer_IsLooping());
				OuterClass->LinkChild(Z_Construct_UFunction_UMediaPlayer_IsPaused());
				OuterClass->LinkChild(Z_Construct_UFunction_UMediaPlayer_IsPlaying());
				OuterClass->LinkChild(Z_Construct_UFunction_UMediaPlayer_IsStopped());
				OuterClass->LinkChild(Z_Construct_UFunction_UMediaPlayer_OpenUrl());
				OuterClass->LinkChild(Z_Construct_UFunction_UMediaPlayer_Pause());
				OuterClass->LinkChild(Z_Construct_UFunction_UMediaPlayer_Play());
				OuterClass->LinkChild(Z_Construct_UFunction_UMediaPlayer_Rewind());
				OuterClass->LinkChild(Z_Construct_UFunction_UMediaPlayer_Seek());
				OuterClass->LinkChild(Z_Construct_UFunction_UMediaPlayer_SetLooping());
				OuterClass->LinkChild(Z_Construct_UFunction_UMediaPlayer_SetRate());
				OuterClass->LinkChild(Z_Construct_UFunction_UMediaPlayer_SupportsRate());
				OuterClass->LinkChild(Z_Construct_UFunction_UMediaPlayer_SupportsScrubbing());
				OuterClass->LinkChild(Z_Construct_UFunction_UMediaPlayer_SupportsSeeking());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_URL = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("URL"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(URL, UMediaPlayer), 0x0000080000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(Looping, UMediaPlayer, uint8);
				UProperty* NewProp_Looping = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Looping"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Looping, UMediaPlayer), 0x0000080000000001, CPP_BOOL_PROPERTY_BITMASK(Looping, UMediaPlayer), sizeof(uint8), false);
				UProperty* NewProp_OnMediaOpened = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnMediaOpened"), RF_Public|RF_Transient|RF_Native) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnMediaOpened, UMediaPlayer), 0x0000000010080000, Z_Construct_UDelegateFunction_MediaAssets_OnMediaPlayerMediaOpened__DelegateSignature());
				UProperty* NewProp_OnMediaClosed = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnMediaClosed"), RF_Public|RF_Transient|RF_Native) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnMediaClosed, UMediaPlayer), 0x0000000010080000, Z_Construct_UDelegateFunction_MediaAssets_OnMediaPlayerMediaClosed__DelegateSignature());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UMediaPlayer_CanPause()); // 2116518765
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UMediaPlayer_CanPlay()); // 3372472178
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UMediaPlayer_Close()); // 85212953
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UMediaPlayer_GetDuration()); // 1355582932
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UMediaPlayer_GetRate()); // 2022454628
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UMediaPlayer_GetTime()); // 2369148766
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UMediaPlayer_GetUrl()); // 2187720839
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UMediaPlayer_IsLooping()); // 190597770
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UMediaPlayer_IsPaused()); // 1936174468
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UMediaPlayer_IsPlaying()); // 1955270397
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UMediaPlayer_IsStopped()); // 4237826316
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UMediaPlayer_OpenUrl()); // 846519088
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UMediaPlayer_Pause()); // 3645851763
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UMediaPlayer_Play()); // 75083169
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UMediaPlayer_Rewind()); // 3880328691
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UMediaPlayer_Seek()); // 4185745920
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UMediaPlayer_SetLooping()); // 4145461196
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UMediaPlayer_SetRate()); // 116020484
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UMediaPlayer_SupportsRate()); // 4269564814
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UMediaPlayer_SupportsScrubbing()); // 3910436631
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UMediaPlayer_SupportsSeeking()); // 575521323
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("MediaPlayer.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/MediaPlayer.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Implements a media player asset that can play movies and other media.\n\nThis class is represents a media URL along with a corresponding media player\nfor exposing media playback functionality to the Engine and to Blueprints."));
				MetaData->SetValue(NewProp_URL, TEXT("Category"), TEXT("Source"));
				MetaData->SetValue(NewProp_URL, TEXT("ModuleRelativePath"), TEXT("Public/MediaPlayer.h"));
				MetaData->SetValue(NewProp_URL, TEXT("ToolTip"), TEXT("The path or URL to the media file to be played."));
				MetaData->SetValue(NewProp_Looping, TEXT("Category"), TEXT("Playback"));
				MetaData->SetValue(NewProp_Looping, TEXT("ModuleRelativePath"), TEXT("Public/MediaPlayer.h"));
				MetaData->SetValue(NewProp_Looping, TEXT("ToolTip"), TEXT("Whether playback should loop when it reaches the end."));
				MetaData->SetValue(NewProp_OnMediaOpened, TEXT("Category"), TEXT("Media|MediaPlayer"));
				MetaData->SetValue(NewProp_OnMediaOpened, TEXT("ModuleRelativePath"), TEXT("Public/MediaPlayer.h"));
				MetaData->SetValue(NewProp_OnMediaOpened, TEXT("ToolTip"), TEXT("Holds a delegate that is invoked when a media source has been opened."));
				MetaData->SetValue(NewProp_OnMediaClosed, TEXT("Category"), TEXT("Media|MediaPlayer"));
				MetaData->SetValue(NewProp_OnMediaClosed, TEXT("ModuleRelativePath"), TEXT("Public/MediaPlayer.h"));
				MetaData->SetValue(NewProp_OnMediaClosed, TEXT("ToolTip"), TEXT("Holds a delegate that is invoked when a media source has been closed."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMediaPlayer(Z_Construct_UClass_UMediaPlayer, TEXT("UMediaPlayer"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMediaPlayer);
	UFunction* Z_Construct_UFunction_UMediaSoundWave_SetMediaPlayer()
	{
		struct MediaSoundWave_eventSetMediaPlayer_Parms
		{
			UMediaPlayer* InMediaPlayer;
		};
		UObject* Outer=Z_Construct_UClass_UMediaSoundWave();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetMediaPlayer"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(MediaSoundWave_eventSetMediaPlayer_Parms));
			UProperty* NewProp_InMediaPlayer = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InMediaPlayer"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(InMediaPlayer, MediaSoundWave_eventSetMediaPlayer_Parms), 0x0000000000000080, Z_Construct_UClass_UMediaPlayer_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Media|MediaSound"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/MediaSoundWave.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the MediaPlayer asset to be used for this texture.\n\n@param InMediaPlayer The asset to set."));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UMediaSoundWave_NoRegister()
	{
		return UMediaSoundWave::StaticClass();
	}
	UClass* Z_Construct_UClass_UMediaSoundWave()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USoundWave();
			Z_Construct_UPackage_MediaAssets();
			OuterClass = UMediaSoundWave::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20901080;

				OuterClass->LinkChild(Z_Construct_UFunction_UMediaSoundWave_SetMediaPlayer());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_CurrentMediaPlayer = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CurrentMediaPlayer"), RF_Public|RF_Transient|RF_Native) UWeakObjectProperty(CPP_PROPERTY_BASE(CurrentMediaPlayer, UMediaSoundWave), 0x0004000000000000, Z_Construct_UClass_UMediaPlayer_NoRegister());
				UProperty* NewProp_MediaPlayer = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MediaPlayer"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(MediaPlayer, UMediaSoundWave), 0x0000000000000005, Z_Construct_UClass_UMediaPlayer_NoRegister());
				UProperty* NewProp_AudioTrackIndex = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AudioTrackIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(AudioTrackIndex, UMediaSoundWave), 0x0000000000000005);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UMediaSoundWave_SetMediaPlayer()); // 2426150933
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Compression Sound SoundWave Subtitles Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("MediaSoundWave.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/MediaSoundWave.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Implements a playable sound asset for audio streams from UMediaPlayer assets."));
				MetaData->SetValue(NewProp_CurrentMediaPlayer, TEXT("ModuleRelativePath"), TEXT("Public/MediaSoundWave.h"));
				MetaData->SetValue(NewProp_CurrentMediaPlayer, TEXT("ToolTip"), TEXT("Holds the media player asset currently being used."));
				MetaData->SetValue(NewProp_MediaPlayer, TEXT("Category"), TEXT("MediaPlayer"));
				MetaData->SetValue(NewProp_MediaPlayer, TEXT("ModuleRelativePath"), TEXT("Public/MediaSoundWave.h"));
				MetaData->SetValue(NewProp_MediaPlayer, TEXT("ToolTip"), TEXT("The MediaPlayer asset to stream audio from."));
				MetaData->SetValue(NewProp_AudioTrackIndex, TEXT("Category"), TEXT("MediaPlayer"));
				MetaData->SetValue(NewProp_AudioTrackIndex, TEXT("ModuleRelativePath"), TEXT("Public/MediaSoundWave.h"));
				MetaData->SetValue(NewProp_AudioTrackIndex, TEXT("ToolTip"), TEXT("The index of the MediaPlayer's audio track to get the wave data from."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMediaSoundWave(Z_Construct_UClass_UMediaSoundWave, TEXT("UMediaSoundWave"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMediaSoundWave);
	UFunction* Z_Construct_UFunction_UMediaTexture_SetMediaPlayer()
	{
		struct MediaTexture_eventSetMediaPlayer_Parms
		{
			UMediaPlayer* InMediaPlayer;
		};
		UObject* Outer=Z_Construct_UClass_UMediaTexture();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetMediaPlayer"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(MediaTexture_eventSetMediaPlayer_Parms));
			UProperty* NewProp_InMediaPlayer = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InMediaPlayer"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(InMediaPlayer, MediaTexture_eventSetMediaPlayer_Parms), 0x0000000000000080, Z_Construct_UClass_UMediaPlayer_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Media|MediaTexture"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/MediaTexture.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the media player asset to be used for this texture.\n\n@param InMediaPlayer The asset to set."));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UMediaTexture_NoRegister()
	{
		return UMediaTexture::StaticClass();
	}
	UClass* Z_Construct_UClass_UMediaTexture()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UTexture();
			Z_Construct_UPackage_MediaAssets();
			OuterClass = UMediaTexture::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_UMediaTexture_SetMediaPlayer());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_CurrentMediaPlayer = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CurrentMediaPlayer"), RF_Public|RF_Transient|RF_Native) UWeakObjectProperty(CPP_PROPERTY_BASE(CurrentMediaPlayer, UMediaTexture), 0x0004000000000000, Z_Construct_UClass_UMediaPlayer_NoRegister());
				UProperty* NewProp_MediaPlayer = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MediaPlayer"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(MediaPlayer, UMediaTexture), 0x0000080000000015, Z_Construct_UClass_UMediaPlayer_NoRegister());
				UProperty* NewProp_VideoTrackIndex = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VideoTrackIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(VideoTrackIndex, UMediaTexture), 0x0000000000000005);
				UProperty* NewProp_ClearColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ClearColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ClearColor, UMediaTexture), 0x0000000000000005, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_AddressY = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AddressY"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(AddressY, UMediaTexture), 0x0000010000000005, Z_Construct_UEnum_Engine_TextureAddress());
				UProperty* NewProp_AddressX = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AddressX"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(AddressX, UMediaTexture), 0x0000010000000005, Z_Construct_UEnum_Engine_TextureAddress());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UMediaTexture_SetMediaPlayer()); // 654547424
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Compression LevelOfDetail Object Texture"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("MediaTexture.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/MediaTexture.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Implements a texture asset for rendering video tracks from UMediaPlayer assets."));
				MetaData->SetValue(NewProp_CurrentMediaPlayer, TEXT("ModuleRelativePath"), TEXT("Public/MediaTexture.h"));
				MetaData->SetValue(NewProp_CurrentMediaPlayer, TEXT("ToolTip"), TEXT("Holds the UMediaPlayer asset currently being used."));
				MetaData->SetValue(NewProp_MediaPlayer, TEXT("Category"), TEXT("MediaPlayer"));
				MetaData->SetValue(NewProp_MediaPlayer, TEXT("ModuleRelativePath"), TEXT("Public/MediaTexture.h"));
				MetaData->SetValue(NewProp_MediaPlayer, TEXT("ToolTip"), TEXT("The MediaPlayer asset to stream video from."));
				MetaData->SetValue(NewProp_VideoTrackIndex, TEXT("Category"), TEXT("MediaPlayer"));
				MetaData->SetValue(NewProp_VideoTrackIndex, TEXT("ModuleRelativePath"), TEXT("Public/MediaTexture.h"));
				MetaData->SetValue(NewProp_VideoTrackIndex, TEXT("ToolTip"), TEXT("The index of the MediaPlayer's video track to render on this texture."));
				MetaData->SetValue(NewProp_ClearColor, TEXT("Category"), TEXT("MediaTexture"));
				MetaData->SetValue(NewProp_ClearColor, TEXT("ModuleRelativePath"), TEXT("Public/MediaTexture.h"));
				MetaData->SetValue(NewProp_ClearColor, TEXT("ToolTip"), TEXT("The color used to clear the texture if no video data is drawn."));
				MetaData->SetValue(NewProp_AddressY, TEXT("Category"), TEXT("MediaTexture"));
				MetaData->SetValue(NewProp_AddressY, TEXT("ModuleRelativePath"), TEXT("Public/MediaTexture.h"));
				MetaData->SetValue(NewProp_AddressY, TEXT("ToolTip"), TEXT("The addressing mode to use for the Y axis."));
				MetaData->SetValue(NewProp_AddressX, TEXT("Category"), TEXT("MediaTexture"));
				MetaData->SetValue(NewProp_AddressX, TEXT("ModuleRelativePath"), TEXT("Public/MediaTexture.h"));
				MetaData->SetValue(NewProp_AddressX, TEXT("ToolTip"), TEXT("The addressing mode to use for the X axis."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMediaTexture(Z_Construct_UClass_UMediaTexture, TEXT("UMediaTexture"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMediaTexture);
	UPackage* Z_Construct_UPackage_MediaAssets()
	{
		static UPackage* ReturnPackage = NULL;
		if (!ReturnPackage)
		{
			ReturnPackage = CastChecked<UPackage>(StaticFindObjectFast(UPackage::StaticClass(), NULL, FName(TEXT("/Script/MediaAssets")), false, false));
			ReturnPackage->SetPackageFlags(PKG_CompiledIn | 0x00000000);
			FGuid Guid;
			Guid.A = 0x63A25830;
			Guid.B = 0x55708F33;
			Guid.C = 0x00000000;
			Guid.D = 0x00000000;
			ReturnPackage->SetGuid(Guid);

			Z_Construct_UDelegateFunction_MediaAssets_OnMediaPlayerMediaClosed__DelegateSignature();
			Z_Construct_UDelegateFunction_MediaAssets_OnMediaPlayerMediaOpened__DelegateSignature();
		}
		return ReturnPackage;
	}
#endif

PRAGMA_ENABLE_DEPRECATION_WARNINGS
