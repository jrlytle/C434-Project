// Copyright 1998-2015 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Boilerplate C++ definitions for a single module.
	This is automatically generated by UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "Public/MoviePlayer.h"
#include "MoviePlayer.generated.dep.h"
PRAGMA_DISABLE_DEPRECATION_WARNINGS
void EmptyLinkFunctionForGeneratedCodeMoviePlayer() {}
	void UMoviePlayerSettings::StaticRegisterNativesUMoviePlayerSettings()
	{
	}
	IMPLEMENT_CLASS(UMoviePlayerSettings, 3326082595);
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	COREUOBJECT_API class UClass* Z_Construct_UClass_UObject();

	MOVIEPLAYER_API class UClass* Z_Construct_UClass_UMoviePlayerSettings_NoRegister();
	MOVIEPLAYER_API class UClass* Z_Construct_UClass_UMoviePlayerSettings();
	MOVIEPLAYER_API class UPackage* Z_Construct_UPackage_MoviePlayer();
	UClass* Z_Construct_UClass_UMoviePlayerSettings_NoRegister()
	{
		return UMoviePlayerSettings::StaticClass();
	}
	UClass* Z_Construct_UClass_UMoviePlayerSettings()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_MoviePlayer();
			OuterClass = UMoviePlayerSettings::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100086;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_StartupMovies = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StartupMovies"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(StartupMovies, UMoviePlayerSettings), 0x0000000000044001);
				UProperty* NewProp_StartupMovies_Inner = new(EC_InternalUseOnlyConstructor, NewProp_StartupMovies, TEXT("StartupMovies"), RF_Public|RF_Transient|RF_Native) UStrProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000004000);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bMoviesAreSkippable, UMoviePlayerSettings, bool);
				UProperty* NewProp_bMoviesAreSkippable = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bMoviesAreSkippable"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bMoviesAreSkippable, UMoviePlayerSettings), 0x0000000000044001, CPP_BOOL_PROPERTY_BITMASK(bMoviesAreSkippable, UMoviePlayerSettings), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bWaitForMoviesToComplete, UMoviePlayerSettings, bool);
				UProperty* NewProp_bWaitForMoviesToComplete = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bWaitForMoviesToComplete"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bWaitForMoviesToComplete, UMoviePlayerSettings), 0x0000000000044001, CPP_BOOL_PROPERTY_BITMASK(bWaitForMoviesToComplete, UMoviePlayerSettings), sizeof(bool), true);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("Game"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("MoviePlayerSettings.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/MoviePlayerSettings.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Implements the settings for the Windows target platform."));
				MetaData->SetValue(NewProp_StartupMovies, TEXT("Category"), TEXT("Movies"));
				MetaData->SetValue(NewProp_StartupMovies, TEXT("ModuleRelativePath"), TEXT("Public/MoviePlayerSettings.h"));
				MetaData->SetValue(NewProp_StartupMovies, TEXT("ToolTip"), TEXT("Movies to play on startup. Note that these must be in your game's Game/Content/Movies directory."));
				MetaData->SetValue(NewProp_bMoviesAreSkippable, TEXT("Category"), TEXT("Movies"));
				MetaData->SetValue(NewProp_bMoviesAreSkippable, TEXT("ModuleRelativePath"), TEXT("Public/MoviePlayerSettings.h"));
				MetaData->SetValue(NewProp_bMoviesAreSkippable, TEXT("ToolTip"), TEXT("If enabled, Startup movies can be skipped by the user when a mouse button is pressed."));
				MetaData->SetValue(NewProp_bWaitForMoviesToComplete, TEXT("Category"), TEXT("Movies"));
				MetaData->SetValue(NewProp_bWaitForMoviesToComplete, TEXT("ModuleRelativePath"), TEXT("Public/MoviePlayerSettings.h"));
				MetaData->SetValue(NewProp_bWaitForMoviesToComplete, TEXT("ToolTip"), TEXT("If enabled, The game waits for startup movies to complete even if loading has finished."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMoviePlayerSettings(Z_Construct_UClass_UMoviePlayerSettings, TEXT("UMoviePlayerSettings"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMoviePlayerSettings);
	UPackage* Z_Construct_UPackage_MoviePlayer()
	{
		static UPackage* ReturnPackage = NULL;
		if (!ReturnPackage)
		{
			ReturnPackage = CastChecked<UPackage>(StaticFindObjectFast(UPackage::StaticClass(), NULL, FName(TEXT("/Script/MoviePlayer")), false, false));
			ReturnPackage->SetPackageFlags(PKG_CompiledIn | 0x00000000);
			FGuid Guid;
			Guid.A = 0x50403047;
			Guid.B = 0x65E4DF27;
			Guid.C = 0x00000000;
			Guid.D = 0x00000000;
			ReturnPackage->SetGuid(Guid);

		}
		return ReturnPackage;
	}
#endif

PRAGMA_ENABLE_DEPRECATION_WARNINGS
