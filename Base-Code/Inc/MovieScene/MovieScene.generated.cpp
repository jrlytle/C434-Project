// Copyright 1998-2015 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Boilerplate C++ definitions for a single module.
	This is automatically generated by UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "Private/MovieScenePrivatePCH.h"
#include "MovieScene.generated.dep.h"
PRAGMA_DISABLE_DEPRECATION_WARNINGS
void EmptyLinkFunctionForGeneratedCodeMovieScene() {}
class UScriptStruct* FMovieSceneBinding::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern MOVIESCENE_API class UScriptStruct* Z_Construct_UScriptStruct_FMovieSceneBinding();
		extern MOVIESCENE_API uint32 Get_Z_Construct_UScriptStruct_FMovieSceneBinding_CRC();
		extern MOVIESCENE_API class UPackage* Z_Construct_UPackage_MovieScene();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FMovieSceneBinding, Z_Construct_UPackage_MovieScene(), TEXT("MovieSceneBinding"), sizeof(FMovieSceneBinding), Get_Z_Construct_UScriptStruct_FMovieSceneBinding_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FMovieSceneBinding(FMovieSceneBinding::StaticStruct, TEXT("/Script/MovieScene"));
static struct FScriptStruct_MovieScene_StaticRegisterNativesFMovieSceneBinding
{
	FScriptStruct_MovieScene_StaticRegisterNativesFMovieSceneBinding()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("MovieSceneBinding")),new UScriptStruct::TCppStructOps<FMovieSceneBinding>);
	}
} ScriptStruct_MovieScene_StaticRegisterNativesFMovieSceneBinding;
class UScriptStruct* FMovieScenePossessable::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern MOVIESCENE_API class UScriptStruct* Z_Construct_UScriptStruct_FMovieScenePossessable();
		extern MOVIESCENE_API uint32 Get_Z_Construct_UScriptStruct_FMovieScenePossessable_CRC();
		extern MOVIESCENE_API class UPackage* Z_Construct_UPackage_MovieScene();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FMovieScenePossessable, Z_Construct_UPackage_MovieScene(), TEXT("MovieScenePossessable"), sizeof(FMovieScenePossessable), Get_Z_Construct_UScriptStruct_FMovieScenePossessable_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FMovieScenePossessable(FMovieScenePossessable::StaticStruct, TEXT("/Script/MovieScene"));
static struct FScriptStruct_MovieScene_StaticRegisterNativesFMovieScenePossessable
{
	FScriptStruct_MovieScene_StaticRegisterNativesFMovieScenePossessable()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("MovieScenePossessable")),new UScriptStruct::TCppStructOps<FMovieScenePossessable>);
	}
} ScriptStruct_MovieScene_StaticRegisterNativesFMovieScenePossessable;
class UScriptStruct* FMovieSceneSpawnable::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern MOVIESCENE_API class UScriptStruct* Z_Construct_UScriptStruct_FMovieSceneSpawnable();
		extern MOVIESCENE_API uint32 Get_Z_Construct_UScriptStruct_FMovieSceneSpawnable_CRC();
		extern MOVIESCENE_API class UPackage* Z_Construct_UPackage_MovieScene();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FMovieSceneSpawnable, Z_Construct_UPackage_MovieScene(), TEXT("MovieSceneSpawnable"), sizeof(FMovieSceneSpawnable), Get_Z_Construct_UScriptStruct_FMovieSceneSpawnable_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FMovieSceneSpawnable(FMovieSceneSpawnable::StaticStruct, TEXT("/Script/MovieScene"));
static struct FScriptStruct_MovieScene_StaticRegisterNativesFMovieSceneSpawnable
{
	FScriptStruct_MovieScene_StaticRegisterNativesFMovieSceneSpawnable()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("MovieSceneSpawnable")),new UScriptStruct::TCppStructOps<FMovieSceneSpawnable>);
	}
} ScriptStruct_MovieScene_StaticRegisterNativesFMovieSceneSpawnable;
class UScriptStruct* FMovieSceneEditorData::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern MOVIESCENE_API class UScriptStruct* Z_Construct_UScriptStruct_FMovieSceneEditorData();
		extern MOVIESCENE_API uint32 Get_Z_Construct_UScriptStruct_FMovieSceneEditorData_CRC();
		extern MOVIESCENE_API class UPackage* Z_Construct_UPackage_MovieScene();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FMovieSceneEditorData, Z_Construct_UPackage_MovieScene(), TEXT("MovieSceneEditorData"), sizeof(FMovieSceneEditorData), Get_Z_Construct_UScriptStruct_FMovieSceneEditorData_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FMovieSceneEditorData(FMovieSceneEditorData::StaticStruct, TEXT("/Script/MovieScene"));
static struct FScriptStruct_MovieScene_StaticRegisterNativesFMovieSceneEditorData
{
	FScriptStruct_MovieScene_StaticRegisterNativesFMovieSceneEditorData()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("MovieSceneEditorData")),new UScriptStruct::TCppStructOps<FMovieSceneEditorData>);
	}
} ScriptStruct_MovieScene_StaticRegisterNativesFMovieSceneEditorData;
class UScriptStruct* FMovieSceneExpansionState::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern MOVIESCENE_API class UScriptStruct* Z_Construct_UScriptStruct_FMovieSceneExpansionState();
		extern MOVIESCENE_API uint32 Get_Z_Construct_UScriptStruct_FMovieSceneExpansionState_CRC();
		extern MOVIESCENE_API class UPackage* Z_Construct_UPackage_MovieScene();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FMovieSceneExpansionState, Z_Construct_UPackage_MovieScene(), TEXT("MovieSceneExpansionState"), sizeof(FMovieSceneExpansionState), Get_Z_Construct_UScriptStruct_FMovieSceneExpansionState_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FMovieSceneExpansionState(FMovieSceneExpansionState::StaticStruct, TEXT("/Script/MovieScene"));
static struct FScriptStruct_MovieScene_StaticRegisterNativesFMovieSceneExpansionState
{
	FScriptStruct_MovieScene_StaticRegisterNativesFMovieSceneExpansionState()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("MovieSceneExpansionState")),new UScriptStruct::TCppStructOps<FMovieSceneExpansionState>);
	}
} ScriptStruct_MovieScene_StaticRegisterNativesFMovieSceneExpansionState;
	void UMovieScene::StaticRegisterNativesUMovieScene()
	{
	}
	IMPLEMENT_CLASS(UMovieScene, 4019140683);
static class UEnum* EMovieSceneKeyInterpolation_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern MOVIESCENE_API class UEnum* Z_Construct_UEnum_MovieScene_EMovieSceneKeyInterpolation();
		extern MOVIESCENE_API class UPackage* Z_Construct_UPackage_MovieScene();
		Singleton = GetStaticEnum(Z_Construct_UEnum_MovieScene_EMovieSceneKeyInterpolation, Z_Construct_UPackage_MovieScene(), TEXT("EMovieSceneKeyInterpolation"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EMovieSceneKeyInterpolation(EMovieSceneKeyInterpolation_StaticEnum, TEXT("/Script/MovieScene"));
	void UMovieSceneSection::StaticRegisterNativesUMovieSceneSection()
	{
	}
	IMPLEMENT_CLASS(UMovieSceneSection, 1871235891);
	void UMovieSceneSequence::StaticRegisterNativesUMovieSceneSequence()
	{
	}
	IMPLEMENT_CLASS(UMovieSceneSequence, 546041882);
	void UMovieSceneTrack::StaticRegisterNativesUMovieSceneTrack()
	{
	}
	IMPLEMENT_CLASS(UMovieSceneTrack, 579366273);
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FGuid();
	COREUOBJECT_API class UClass* Z_Construct_UClass_UObject_NoRegister();
	COREUOBJECT_API class UClass* Z_Construct_UClass_UObject();

	MOVIESCENE_API class UScriptStruct* Z_Construct_UScriptStruct_FMovieSceneBinding();
	MOVIESCENE_API class UScriptStruct* Z_Construct_UScriptStruct_FMovieScenePossessable();
	MOVIESCENE_API class UScriptStruct* Z_Construct_UScriptStruct_FMovieSceneSpawnable();
	MOVIESCENE_API class UScriptStruct* Z_Construct_UScriptStruct_FMovieSceneEditorData();
	MOVIESCENE_API class UScriptStruct* Z_Construct_UScriptStruct_FMovieSceneExpansionState();
	MOVIESCENE_API class UClass* Z_Construct_UClass_UMovieScene_NoRegister();
	MOVIESCENE_API class UClass* Z_Construct_UClass_UMovieScene();
	MOVIESCENE_API class UEnum* Z_Construct_UEnum_MovieScene_EMovieSceneKeyInterpolation();
	MOVIESCENE_API class UClass* Z_Construct_UClass_UMovieSceneSection_NoRegister();
	MOVIESCENE_API class UClass* Z_Construct_UClass_UMovieSceneSection();
	MOVIESCENE_API class UClass* Z_Construct_UClass_UMovieSceneSequence_NoRegister();
	MOVIESCENE_API class UClass* Z_Construct_UClass_UMovieSceneSequence();
	MOVIESCENE_API class UClass* Z_Construct_UClass_UMovieSceneTrack_NoRegister();
	MOVIESCENE_API class UClass* Z_Construct_UClass_UMovieSceneTrack();
	MOVIESCENE_API class UPackage* Z_Construct_UPackage_MovieScene();
	UScriptStruct* Z_Construct_UScriptStruct_FMovieSceneBinding()
	{
		UPackage* Outer=Z_Construct_UPackage_MovieScene();
		extern uint32 Get_Z_Construct_UScriptStruct_FMovieSceneBinding_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("MovieSceneBinding"), sizeof(FMovieSceneBinding), Get_Z_Construct_UScriptStruct_FMovieSceneBinding_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MovieSceneBinding"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FMovieSceneBinding>, EStructFlags(0x00000201));
			UProperty* NewProp_Tracks = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Tracks"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Tracks, FMovieSceneBinding), 0x0000000000000000);
			UProperty* NewProp_Tracks_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Tracks, TEXT("Tracks"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UMovieSceneTrack_NoRegister());
			UProperty* NewProp_BindingName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BindingName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(BindingName, FMovieSceneBinding), 0x0000000000000000);
			UProperty* NewProp_ObjectGuid = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ObjectGuid"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ObjectGuid, FMovieSceneBinding), 0x0000000000000000, Z_Construct_UScriptStruct_FGuid());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/MovieSceneBinding.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("A set of tracks bound to runtime objects"));
			MetaData->SetValue(NewProp_Tracks, TEXT("ModuleRelativePath"), TEXT("Public/MovieSceneBinding.h"));
			MetaData->SetValue(NewProp_Tracks, TEXT("ToolTip"), TEXT("All tracks in this binding"));
			MetaData->SetValue(NewProp_BindingName, TEXT("ModuleRelativePath"), TEXT("Public/MovieSceneBinding.h"));
			MetaData->SetValue(NewProp_BindingName, TEXT("ToolTip"), TEXT("Display name"));
			MetaData->SetValue(NewProp_ObjectGuid, TEXT("ModuleRelativePath"), TEXT("Public/MovieSceneBinding.h"));
			MetaData->SetValue(NewProp_ObjectGuid, TEXT("ToolTip"), TEXT("Object binding guid for runtime objects"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FMovieSceneBinding_CRC() { return 733555381U; }
	UScriptStruct* Z_Construct_UScriptStruct_FMovieScenePossessable()
	{
		UPackage* Outer=Z_Construct_UPackage_MovieScene();
		extern uint32 Get_Z_Construct_UScriptStruct_FMovieScenePossessable_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("MovieScenePossessable"), sizeof(FMovieScenePossessable), Get_Z_Construct_UScriptStruct_FMovieScenePossessable_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MovieScenePossessable"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FMovieScenePossessable>, EStructFlags(0x00000001));
			UProperty* NewProp_PossessedObjectClass = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PossessedObjectClass"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(PossessedObjectClass, FMovieScenePossessable), 0x0000000000000000, Z_Construct_UClass_UObject_NoRegister());
			UProperty* NewProp_Name = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Name"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Name, FMovieScenePossessable), 0x0000000000000000);
			UProperty* NewProp_Guid = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Guid"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Guid, FMovieScenePossessable), 0x0000000000000000, Z_Construct_UScriptStruct_FGuid());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/MovieScenePossessable.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("MovieScenePossessable is a \"typed slot\" used to allow the MovieScene to control an already-existing object"));
			MetaData->SetValue(NewProp_PossessedObjectClass, TEXT("ModuleRelativePath"), TEXT("Public/MovieScenePossessable.h"));
			MetaData->SetValue(NewProp_PossessedObjectClass, TEXT("ToolTip"), TEXT("Type of the object we'll be possessing // @todo sequencer: Might be able to be editor-only.  We'll see.\n// @todo sequencer: This isn't used for anything yet.  We could use it to gate which types of objects can be bound to a\n// possessable \"slot\" though.  Or we could use it to generate a \"preview\" spawnable puppet when previewing with no\n// possessable object available."));
			MetaData->SetValue(NewProp_Name, TEXT("ModuleRelativePath"), TEXT("Public/MovieScenePossessable.h"));
			MetaData->SetValue(NewProp_Name, TEXT("ToolTip"), TEXT("Name label for this slot // @todo sequencer: Should be editor-only probably"));
			MetaData->SetValue(NewProp_Guid, TEXT("ModuleRelativePath"), TEXT("Public/MovieScenePossessable.h"));
			MetaData->SetValue(NewProp_Guid, TEXT("ToolTip"), TEXT("Unique identifier of the possessable object. // @todo sequencer: Guids need to be handled carefully when the asset is duplicated (or loaded after being copied on disk).\n//                                     Sometimes we'll need to generate fresh Guids."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FMovieScenePossessable_CRC() { return 4006476259U; }
	UScriptStruct* Z_Construct_UScriptStruct_FMovieSceneSpawnable()
	{
		UPackage* Outer=Z_Construct_UPackage_MovieScene();
		extern uint32 Get_Z_Construct_UScriptStruct_FMovieSceneSpawnable_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("MovieSceneSpawnable"), sizeof(FMovieSceneSpawnable), Get_Z_Construct_UScriptStruct_FMovieSceneSpawnable_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MovieSceneSpawnable"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FMovieSceneSpawnable>, EStructFlags(0x00000001));
			UProperty* NewProp_GeneratedClass = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("GeneratedClass"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(GeneratedClass, FMovieSceneSpawnable), 0x0000000000000000, Z_Construct_UClass_UObject_NoRegister());
			UProperty* NewProp_Name = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Name"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Name, FMovieSceneSpawnable), 0x0000000000000000);
			UProperty* NewProp_Guid = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Guid"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Guid, FMovieSceneSpawnable), 0x0000000000000000, Z_Construct_UScriptStruct_FGuid());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/MovieSceneSpawnable.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("MovieSceneSpawnable describes an object that can be spawned for this MovieScene"));
			MetaData->SetValue(NewProp_GeneratedClass, TEXT("ModuleRelativePath"), TEXT("Public/MovieSceneSpawnable.h"));
			MetaData->SetValue(NewProp_GeneratedClass, TEXT("ToolTip"), TEXT("Data-only blueprint-generated-class for this object // @todo sequencer: Could be weak object ptr here, IF blueprints that are inners are housekept properly without references"));
			MetaData->SetValue(NewProp_Name, TEXT("ModuleRelativePath"), TEXT("Public/MovieSceneSpawnable.h"));
			MetaData->SetValue(NewProp_Name, TEXT("ToolTip"), TEXT("Name label // @todo sequencer: Should be editor-only probably"));
			MetaData->SetValue(NewProp_Guid, TEXT("ModuleRelativePath"), TEXT("Public/MovieSceneSpawnable.h"));
			MetaData->SetValue(NewProp_Guid, TEXT("ToolTip"), TEXT("Unique identifier of the spawnable object. // @todo sequencer: Guids need to be handled carefully when the asset is duplicated (or loaded after being copied on disk).\n//                                     Sometimes we'll need to generate fresh Guids."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FMovieSceneSpawnable_CRC() { return 3982479038U; }
	UScriptStruct* Z_Construct_UScriptStruct_FMovieSceneEditorData()
	{
		UPackage* Outer=Z_Construct_UPackage_MovieScene();
		extern uint32 Get_Z_Construct_UScriptStruct_FMovieSceneEditorData_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("MovieSceneEditorData"), sizeof(FMovieSceneEditorData), Get_Z_Construct_UScriptStruct_FMovieSceneEditorData_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MovieSceneEditorData"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FMovieSceneEditorData>, EStructFlags(0x00000001));
			UProperty* NewProp_ExpansionStates = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ExpansionStates"), RF_Public|RF_Transient|RF_Native) UMapProperty(CPP_PROPERTY_BASE(ExpansionStates, FMovieSceneEditorData), 0x0000000000000000);
			UProperty* NewProp_ExpansionStates_Key_KeyProp = new(EC_InternalUseOnlyConstructor, NewProp_ExpansionStates, TEXT("ExpansionStates_Key"), RF_Public|RF_Transient|RF_Native) UStrProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_ExpansionStates_ValueProp = new(EC_InternalUseOnlyConstructor, NewProp_ExpansionStates, TEXT("ExpansionStates"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 1, 0x0000000000000000, Z_Construct_UScriptStruct_FMovieSceneExpansionState());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/MovieScene.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Editor only data that needs to be saved between sessions for editing but has no runtime purpose"));
			MetaData->SetValue(NewProp_ExpansionStates, TEXT("ModuleRelativePath"), TEXT("Public/MovieScene.h"));
			MetaData->SetValue(NewProp_ExpansionStates, TEXT("ToolTip"), TEXT("Map of node path -> expansion state."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FMovieSceneEditorData_CRC() { return 2083763928U; }
	UScriptStruct* Z_Construct_UScriptStruct_FMovieSceneExpansionState()
	{
		UPackage* Outer=Z_Construct_UPackage_MovieScene();
		extern uint32 Get_Z_Construct_UScriptStruct_FMovieSceneExpansionState_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("MovieSceneExpansionState"), sizeof(FMovieSceneExpansionState), Get_Z_Construct_UScriptStruct_FMovieSceneExpansionState_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MovieSceneExpansionState"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FMovieSceneExpansionState>, EStructFlags(0x00000001));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bExpanded, FMovieSceneExpansionState, bool);
			UProperty* NewProp_bExpanded = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bExpanded"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bExpanded, FMovieSceneExpansionState), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bExpanded, FMovieSceneExpansionState), sizeof(bool), true);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/MovieScene.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("@todo: remove this type when support for intrinsics on TMap values is added?"));
			MetaData->SetValue(NewProp_bExpanded, TEXT("ModuleRelativePath"), TEXT("Public/MovieScene.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FMovieSceneExpansionState_CRC() { return 4192932504U; }
	UClass* Z_Construct_UClass_UMovieScene_NoRegister()
	{
		return UMovieScene::StaticClass();
	}
	UClass* Z_Construct_UClass_UMovieScene()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_MovieScene();
			OuterClass = UMovieScene::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_EndTime = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EndTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(EndTime, UMovieScene), 0x0000000000000000);
				UProperty* NewProp_StartTime = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StartTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(StartTime, UMovieScene), 0x0000000000000000);
				UProperty* NewProp_OutTime = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OutTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(OutTime, UMovieScene), 0x0000000000000000);
				UProperty* NewProp_InTime = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InTime, UMovieScene), 0x0000000000000000);
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_EditorData = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EditorData"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(EditorData, UMovieScene), 0x0000000800000000, Z_Construct_UScriptStruct_FMovieSceneEditorData());
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_ShotTrack = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ShotTrack"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ShotTrack, UMovieScene), 0x0000000000000000, Z_Construct_UClass_UMovieSceneTrack_NoRegister());
				UProperty* NewProp_MasterTracks = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MasterTracks"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(MasterTracks, UMovieScene), 0x0000000000000000);
				UProperty* NewProp_MasterTracks_Inner = new(EC_InternalUseOnlyConstructor, NewProp_MasterTracks, TEXT("MasterTracks"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UMovieSceneTrack_NoRegister());
				UProperty* NewProp_ObjectBindings = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ObjectBindings"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ObjectBindings, UMovieScene), 0x0000000000000000);
				UProperty* NewProp_ObjectBindings_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ObjectBindings, TEXT("ObjectBindings"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FMovieSceneBinding());
				UProperty* NewProp_Possessables = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Possessables"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Possessables, UMovieScene), 0x0000000000000000);
				UProperty* NewProp_Possessables_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Possessables, TEXT("Possessables"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FMovieScenePossessable());
				UProperty* NewProp_Spawnables = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Spawnables"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Spawnables, UMovieScene), 0x0000000000000000);
				UProperty* NewProp_Spawnables_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Spawnables, TEXT("Spawnables"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FMovieSceneSpawnable());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("MovieScene.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/MovieScene.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Implements a movie scene asset."));
				MetaData->SetValue(NewProp_EndTime, TEXT("ModuleRelativePath"), TEXT("Public/MovieScene.h"));
				MetaData->SetValue(NewProp_EndTime, TEXT("ToolTip"), TEXT("End time of the movie scene in seconds"));
				MetaData->SetValue(NewProp_StartTime, TEXT("ModuleRelativePath"), TEXT("Public/MovieScene.h"));
				MetaData->SetValue(NewProp_StartTime, TEXT("ToolTip"), TEXT("Start time of the movie scene in seconds"));
				MetaData->SetValue(NewProp_OutTime, TEXT("ModuleRelativePath"), TEXT("Public/MovieScene.h"));
				MetaData->SetValue(NewProp_OutTime, TEXT("ToolTip"), TEXT("Out time of the movie scene in seconds"));
				MetaData->SetValue(NewProp_InTime, TEXT("ModuleRelativePath"), TEXT("Public/MovieScene.h"));
				MetaData->SetValue(NewProp_InTime, TEXT("ToolTip"), TEXT("In time of the movie scene in seconds"));
				MetaData->SetValue(NewProp_EditorData, TEXT("ModuleRelativePath"), TEXT("Public/MovieScene.h"));
				MetaData->SetValue(NewProp_EditorData, TEXT("ToolTip"), TEXT("Editor only data that needs to be saved between sessions for editing but has no runtime purpose"));
				MetaData->SetValue(NewProp_ShotTrack, TEXT("ModuleRelativePath"), TEXT("Public/MovieScene.h"));
				MetaData->SetValue(NewProp_ShotTrack, TEXT("ToolTip"), TEXT("The shot track is a specialized track for switching between cameras on a cinematic"));
				MetaData->SetValue(NewProp_MasterTracks, TEXT("ModuleRelativePath"), TEXT("Public/MovieScene.h"));
				MetaData->SetValue(NewProp_MasterTracks, TEXT("ToolTip"), TEXT("Master tracks which are not bound to spawned or possessed objects"));
				MetaData->SetValue(NewProp_ObjectBindings, TEXT("ModuleRelativePath"), TEXT("Public/MovieScene.h"));
				MetaData->SetValue(NewProp_ObjectBindings, TEXT("ToolTip"), TEXT("Tracks bound to possessed or spawned objects"));
				MetaData->SetValue(NewProp_Possessables, TEXT("ModuleRelativePath"), TEXT("Public/MovieScene.h"));
				MetaData->SetValue(NewProp_Possessables, TEXT("ToolTip"), TEXT("Typed slots for already-spawned objects that we are able to control with this MovieScene"));
				MetaData->SetValue(NewProp_Spawnables, TEXT("ModuleRelativePath"), TEXT("Public/MovieScene.h"));
				MetaData->SetValue(NewProp_Spawnables, TEXT("ToolTip"), TEXT("Data-only blueprints for all of the objects that we we're able to spawn.\nThese describe objects and actors that we may instantiate at runtime,\nor create proxy objects for previewing in the editor."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMovieScene(Z_Construct_UClass_UMovieScene, TEXT("UMovieScene"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMovieScene);
	UEnum* Z_Construct_UEnum_MovieScene_EMovieSceneKeyInterpolation()
	{
		UPackage* Outer=Z_Construct_UPackage_MovieScene();
		extern uint32 Get_Z_Construct_UEnum_MovieScene_EMovieSceneKeyInterpolation_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EMovieSceneKeyInterpolation"), 0, Get_Z_Construct_UEnum_MovieScene_EMovieSceneKeyInterpolation_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EMovieSceneKeyInterpolation"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("MSKI_Auto")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("MSKI_User")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("MSKI_Break")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("MSKI_Linear")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("MSKI_Constant")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("MSKI_MAX")), 5));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/KeyParams.h"));
			MetaData->SetValue(ReturnEnum, TEXT("MSKI_Auto.DisplayName"), TEXT("Auto"));
			MetaData->SetValue(ReturnEnum, TEXT("MSKI_Auto.ToolTip"), TEXT("Auto."));
			MetaData->SetValue(ReturnEnum, TEXT("MSKI_Break.DisplayName"), TEXT("Break"));
			MetaData->SetValue(ReturnEnum, TEXT("MSKI_Break.ToolTip"), TEXT("Break."));
			MetaData->SetValue(ReturnEnum, TEXT("MSKI_Constant.DisplayName"), TEXT("Constant"));
			MetaData->SetValue(ReturnEnum, TEXT("MSKI_Constant.ToolTip"), TEXT("Constant."));
			MetaData->SetValue(ReturnEnum, TEXT("MSKI_Linear.DisplayName"), TEXT("Linear"));
			MetaData->SetValue(ReturnEnum, TEXT("MSKI_Linear.ToolTip"), TEXT("Linear."));
			MetaData->SetValue(ReturnEnum, TEXT("MSKI_User.DisplayName"), TEXT("User"));
			MetaData->SetValue(ReturnEnum, TEXT("MSKI_User.ToolTip"), TEXT("User."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_MovieScene_EMovieSceneKeyInterpolation_CRC() { return 2662066810U; }
	UClass* Z_Construct_UClass_UMovieSceneSection_NoRegister()
	{
		return UMovieSceneSection::StaticClass();
	}
	UClass* Z_Construct_UClass_UMovieSceneSection()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_MovieScene();
			OuterClass = UMovieSceneSection::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080081;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsInfinite, UMovieSceneSection, uint8);
				UProperty* NewProp_bIsInfinite = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsInfinite"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsInfinite, UMovieSceneSection), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bIsInfinite, UMovieSceneSection), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsActive, UMovieSceneSection, uint8);
				UProperty* NewProp_bIsActive = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsActive"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsActive, UMovieSceneSection), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bIsActive, UMovieSceneSection), sizeof(uint8), false);
				UProperty* NewProp_RowIndex = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RowIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(RowIndex, UMovieSceneSection), 0x0000000000000000);
				UProperty* NewProp_EndTime = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EndTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(EndTime, UMovieSceneSection), 0x0000000000000001);
				UProperty* NewProp_StartTime = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StartTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(StartTime, UMovieSceneSection), 0x0000000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("MovieSceneSection.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/MovieSceneSection.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Base class for movie scene sections"));
				MetaData->SetValue(NewProp_bIsInfinite, TEXT("Category"), TEXT("Section"));
				MetaData->SetValue(NewProp_bIsInfinite, TEXT("ModuleRelativePath"), TEXT("Public/MovieSceneSection.h"));
				MetaData->SetValue(NewProp_bIsInfinite, TEXT("ToolTip"), TEXT("Toggle to set this section to be infinite"));
				MetaData->SetValue(NewProp_bIsActive, TEXT("Category"), TEXT("Section"));
				MetaData->SetValue(NewProp_bIsActive, TEXT("ModuleRelativePath"), TEXT("Public/MovieSceneSection.h"));
				MetaData->SetValue(NewProp_bIsActive, TEXT("ToolTip"), TEXT("Toggle whether this section is active/inactive"));
				MetaData->SetValue(NewProp_RowIndex, TEXT("ModuleRelativePath"), TEXT("Public/MovieSceneSection.h"));
				MetaData->SetValue(NewProp_RowIndex, TEXT("ToolTip"), TEXT("The row index that this section sits on"));
				MetaData->SetValue(NewProp_EndTime, TEXT("Category"), TEXT("Section"));
				MetaData->SetValue(NewProp_EndTime, TEXT("ModuleRelativePath"), TEXT("Public/MovieSceneSection.h"));
				MetaData->SetValue(NewProp_EndTime, TEXT("ToolTip"), TEXT("The end time of the section"));
				MetaData->SetValue(NewProp_StartTime, TEXT("Category"), TEXT("Section"));
				MetaData->SetValue(NewProp_StartTime, TEXT("ModuleRelativePath"), TEXT("Public/MovieSceneSection.h"));
				MetaData->SetValue(NewProp_StartTime, TEXT("ToolTip"), TEXT("The start time of the section"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMovieSceneSection(Z_Construct_UClass_UMovieSceneSection, TEXT("UMovieSceneSection"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMovieSceneSection);
	UClass* Z_Construct_UClass_UMovieSceneSequence_NoRegister()
	{
		return UMovieSceneSequence::StaticClass();
	}
	UClass* Z_Construct_UClass_UMovieSceneSequence()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_MovieScene();
			OuterClass = UMovieSceneSequence::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("MovieSceneSequence.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/MovieSceneSequence.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Abstract base class for movie scene animations (C++ version)."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMovieSceneSequence(Z_Construct_UClass_UMovieSceneSequence, TEXT("UMovieSceneSequence"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMovieSceneSequence);
	UClass* Z_Construct_UClass_UMovieSceneTrack_NoRegister()
	{
		return UMovieSceneTrack::StaticClass();
	}
	UClass* Z_Construct_UClass_UMovieSceneTrack()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_MovieScene();
			OuterClass = UMovieSceneTrack::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("MovieSceneTrack.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/MovieSceneTrack.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Base class for a track in a Movie Scene"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMovieSceneTrack(Z_Construct_UClass_UMovieSceneTrack, TEXT("UMovieSceneTrack"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMovieSceneTrack);
	UPackage* Z_Construct_UPackage_MovieScene()
	{
		static UPackage* ReturnPackage = NULL;
		if (!ReturnPackage)
		{
			ReturnPackage = CastChecked<UPackage>(StaticFindObjectFast(UPackage::StaticClass(), NULL, FName(TEXT("/Script/MovieScene")), false, false));
			ReturnPackage->SetPackageFlags(PKG_CompiledIn | 0x00000000);
			FGuid Guid;
			Guid.A = 0x3199371C;
			Guid.B = 0xECCC8005;
			Guid.C = 0x00000000;
			Guid.D = 0x00000000;
			ReturnPackage->SetGuid(Guid);

		}
		return ReturnPackage;
	}
#endif

PRAGMA_ENABLE_DEPRECATION_WARNINGS
