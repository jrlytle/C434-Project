// Copyright 1998-2015 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Boilerplate C++ definitions for a single module.
	This is automatically generated by UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "Private/MovieSceneCapturePCH.h"
#include "MovieSceneCapture.generated.dep.h"
PRAGMA_DISABLE_DEPRECATION_WARNINGS
void EmptyLinkFunctionForGeneratedCodeMovieSceneCapture() {}
static class UEnum* EMovieCaptureType_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern MOVIESCENECAPTURE_API class UEnum* Z_Construct_UEnum_MovieSceneCapture_EMovieCaptureType();
		extern MOVIESCENECAPTURE_API class UPackage* Z_Construct_UPackage_MovieSceneCapture();
		Singleton = GetStaticEnum(Z_Construct_UEnum_MovieSceneCapture_EMovieCaptureType, Z_Construct_UPackage_MovieSceneCapture(), TEXT("EMovieCaptureType"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EMovieCaptureType(EMovieCaptureType_StaticEnum, TEXT("/Script/MovieSceneCapture"));
class UScriptStruct* FMovieSceneCaptureSettings::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern MOVIESCENECAPTURE_API class UScriptStruct* Z_Construct_UScriptStruct_FMovieSceneCaptureSettings();
		extern MOVIESCENECAPTURE_API uint32 Get_Z_Construct_UScriptStruct_FMovieSceneCaptureSettings_CRC();
		extern MOVIESCENECAPTURE_API class UPackage* Z_Construct_UPackage_MovieSceneCapture();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FMovieSceneCaptureSettings, Z_Construct_UPackage_MovieSceneCapture(), TEXT("MovieSceneCaptureSettings"), sizeof(FMovieSceneCaptureSettings), Get_Z_Construct_UScriptStruct_FMovieSceneCaptureSettings_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FMovieSceneCaptureSettings(FMovieSceneCaptureSettings::StaticStruct, TEXT("/Script/MovieSceneCapture"));
static struct FScriptStruct_MovieSceneCapture_StaticRegisterNativesFMovieSceneCaptureSettings
{
	FScriptStruct_MovieSceneCapture_StaticRegisterNativesFMovieSceneCaptureSettings()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("MovieSceneCaptureSettings")),new UScriptStruct::TCppStructOps<FMovieSceneCaptureSettings>);
	}
} ScriptStruct_MovieSceneCapture_StaticRegisterNativesFMovieSceneCaptureSettings;
class UScriptStruct* FCaptureResolution::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern MOVIESCENECAPTURE_API class UScriptStruct* Z_Construct_UScriptStruct_FCaptureResolution();
		extern MOVIESCENECAPTURE_API uint32 Get_Z_Construct_UScriptStruct_FCaptureResolution_CRC();
		extern MOVIESCENECAPTURE_API class UPackage* Z_Construct_UPackage_MovieSceneCapture();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FCaptureResolution, Z_Construct_UPackage_MovieSceneCapture(), TEXT("CaptureResolution"), sizeof(FCaptureResolution), Get_Z_Construct_UScriptStruct_FCaptureResolution_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FCaptureResolution(FCaptureResolution::StaticStruct, TEXT("/Script/MovieSceneCapture"));
static struct FScriptStruct_MovieSceneCapture_StaticRegisterNativesFCaptureResolution
{
	FScriptStruct_MovieSceneCapture_StaticRegisterNativesFCaptureResolution()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("CaptureResolution")),new UScriptStruct::TCppStructOps<FCaptureResolution>);
	}
} ScriptStruct_MovieSceneCapture_StaticRegisterNativesFCaptureResolution;
	void UMovieSceneCaptureInterface::StaticRegisterNativesUMovieSceneCaptureInterface()
	{
	}
	IMPLEMENT_CLASS(UMovieSceneCaptureInterface, 602831237);
	void UMovieSceneCapture::StaticRegisterNativesUMovieSceneCapture()
	{
	}
	IMPLEMENT_CLASS(UMovieSceneCapture, 1813676922);
	void UAutomatedLevelSequenceCapture::StaticRegisterNativesUAutomatedLevelSequenceCapture()
	{
	}
	IMPLEMENT_CLASS(UAutomatedLevelSequenceCapture, 1259940695);
	void ULevelCapture::StaticRegisterNativesULevelCapture()
	{
	}
	IMPLEMENT_CLASS(ULevelCapture, 1261246652);
	void UMovieSceneCaptureEnvironment::StaticRegisterNativesUMovieSceneCaptureEnvironment()
	{
		FNativeFunctionRegistrar::RegisterFunction(UMovieSceneCaptureEnvironment::StaticClass(),"GetCaptureElapsedTime",(Native)&UMovieSceneCaptureEnvironment::execGetCaptureElapsedTime);
		FNativeFunctionRegistrar::RegisterFunction(UMovieSceneCaptureEnvironment::StaticClass(),"GetCaptureFrameNumber",(Native)&UMovieSceneCaptureEnvironment::execGetCaptureFrameNumber);
	}
	IMPLEMENT_CLASS(UMovieSceneCaptureEnvironment, 3891645765);
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDirectoryPath();
	COREUOBJECT_API class UClass* Z_Construct_UClass_UObject();
	LEVELSEQUENCE_API class UClass* Z_Construct_UClass_ULevelSequencePlayer_NoRegister();
	LEVELSEQUENCE_API class UClass* Z_Construct_UClass_ULevelSequenceInstance_NoRegister();
	LEVELSEQUENCE_API class UScriptStruct* Z_Construct_UScriptStruct_FLevelSequencePlaybackSettings();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FStringAssetReference();

	MOVIESCENECAPTURE_API class UEnum* Z_Construct_UEnum_MovieSceneCapture_EMovieCaptureType();
	MOVIESCENECAPTURE_API class UScriptStruct* Z_Construct_UScriptStruct_FMovieSceneCaptureSettings();
	MOVIESCENECAPTURE_API class UScriptStruct* Z_Construct_UScriptStruct_FCaptureResolution();
	MOVIESCENECAPTURE_API class UClass* Z_Construct_UClass_UMovieSceneCaptureInterface_NoRegister();
	MOVIESCENECAPTURE_API class UClass* Z_Construct_UClass_UMovieSceneCaptureInterface();
	MOVIESCENECAPTURE_API class UClass* Z_Construct_UClass_UMovieSceneCapture_NoRegister();
	MOVIESCENECAPTURE_API class UClass* Z_Construct_UClass_UMovieSceneCapture();
	MOVIESCENECAPTURE_API class UClass* Z_Construct_UClass_UAutomatedLevelSequenceCapture_NoRegister();
	MOVIESCENECAPTURE_API class UClass* Z_Construct_UClass_UAutomatedLevelSequenceCapture();
	MOVIESCENECAPTURE_API class UClass* Z_Construct_UClass_ULevelCapture_NoRegister();
	MOVIESCENECAPTURE_API class UClass* Z_Construct_UClass_ULevelCapture();
	MOVIESCENECAPTURE_API class UFunction* Z_Construct_UFunction_UMovieSceneCaptureEnvironment_GetCaptureElapsedTime();
	MOVIESCENECAPTURE_API class UFunction* Z_Construct_UFunction_UMovieSceneCaptureEnvironment_GetCaptureFrameNumber();
	MOVIESCENECAPTURE_API class UClass* Z_Construct_UClass_UMovieSceneCaptureEnvironment_NoRegister();
	MOVIESCENECAPTURE_API class UClass* Z_Construct_UClass_UMovieSceneCaptureEnvironment();
	MOVIESCENECAPTURE_API class UPackage* Z_Construct_UPackage_MovieSceneCapture();
	UEnum* Z_Construct_UEnum_MovieSceneCapture_EMovieCaptureType()
	{
		UPackage* Outer=Z_Construct_UPackage_MovieSceneCapture();
		extern uint32 Get_Z_Construct_UEnum_MovieSceneCapture_EMovieCaptureType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EMovieCaptureType"), 0, Get_Z_Construct_UEnum_MovieSceneCapture_EMovieCaptureType_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EMovieCaptureType"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EMovieCaptureType::AVI")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EMovieCaptureType::BMP")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EMovieCaptureType::PNG")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EMovieCaptureType::JPEG")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EMovieCaptureType::EMovieCaptureType_MAX")), 4));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("AVI.DisplayName"), TEXT("AVI Movie"));
			MetaData->SetValue(ReturnEnum, TEXT("BMP.DisplayName"), TEXT("BMP Image Sequence"));
			MetaData->SetValue(ReturnEnum, TEXT("JPEG.DisplayName"), TEXT("JPEG Image Sequence"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/MovieSceneCaptureSettings.h"));
			MetaData->SetValue(ReturnEnum, TEXT("PNG.DisplayName"), TEXT("PNG Image Sequence"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_MovieSceneCapture_EMovieCaptureType_CRC() { return 479648649U; }
	UScriptStruct* Z_Construct_UScriptStruct_FMovieSceneCaptureSettings()
	{
		UPackage* Outer=Z_Construct_UPackage_MovieSceneCapture();
		extern uint32 Get_Z_Construct_UScriptStruct_FMovieSceneCaptureSettings_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("MovieSceneCaptureSettings"), sizeof(FMovieSceneCaptureSettings), Get_Z_Construct_UScriptStruct_FMovieSceneCaptureSettings_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MovieSceneCaptureSettings"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FMovieSceneCaptureSettings>, EStructFlags(0x00000201));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bShowHUD, FMovieSceneCaptureSettings, bool);
			UProperty* NewProp_bShowHUD = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bShowHUD"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bShowHUD, FMovieSceneCaptureSettings), 0x0000040000004001, CPP_BOOL_PROPERTY_BITMASK(bShowHUD, FMovieSceneCaptureSettings), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bShowPlayer, FMovieSceneCaptureSettings, bool);
			UProperty* NewProp_bShowPlayer = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bShowPlayer"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bShowPlayer, FMovieSceneCaptureSettings), 0x0000040000004001, CPP_BOOL_PROPERTY_BITMASK(bShowPlayer, FMovieSceneCaptureSettings), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAllowTurning, FMovieSceneCaptureSettings, bool);
			UProperty* NewProp_bAllowTurning = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bAllowTurning"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAllowTurning, FMovieSceneCaptureSettings), 0x0000040000004001, CPP_BOOL_PROPERTY_BITMASK(bAllowTurning, FMovieSceneCaptureSettings), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAllowMovement, FMovieSceneCaptureSettings, bool);
			UProperty* NewProp_bAllowMovement = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bAllowMovement"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAllowMovement, FMovieSceneCaptureSettings), 0x0000040000004001, CPP_BOOL_PROPERTY_BITMASK(bAllowMovement, FMovieSceneCaptureSettings), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCinematicMode, FMovieSceneCaptureSettings, bool);
			UProperty* NewProp_bCinematicMode = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bCinematicMode"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCinematicMode, FMovieSceneCaptureSettings), 0x0000000000004001, CPP_BOOL_PROPERTY_BITMASK(bCinematicMode, FMovieSceneCaptureSettings), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnableTextureStreaming, FMovieSceneCaptureSettings, bool);
			UProperty* NewProp_bEnableTextureStreaming = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bEnableTextureStreaming"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnableTextureStreaming, FMovieSceneCaptureSettings), 0x0000000000004001, CPP_BOOL_PROPERTY_BITMASK(bEnableTextureStreaming, FMovieSceneCaptureSettings), sizeof(bool), true);
			UProperty* NewProp_Codec = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Codec"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Codec, FMovieSceneCaptureSettings), 0x0000040000004001);
			UProperty* NewProp_CompressionQuality = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CompressionQuality"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(CompressionQuality, FMovieSceneCaptureSettings), 0x0000040000004001);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseCompression, FMovieSceneCaptureSettings, bool);
			UProperty* NewProp_bUseCompression = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bUseCompression"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseCompression, FMovieSceneCaptureSettings), 0x0000000000004001, CPP_BOOL_PROPERTY_BITMASK(bUseCompression, FMovieSceneCaptureSettings), sizeof(bool), true);
			UProperty* NewProp_CaptureType = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CaptureType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(CaptureType, FMovieSceneCaptureSettings), 0x0000040000004001, Z_Construct_UEnum_MovieSceneCapture_EMovieCaptureType());
			UProperty* NewProp_Resolution = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Resolution"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Resolution, FMovieSceneCaptureSettings), 0x0000000000004001, Z_Construct_UScriptStruct_FCaptureResolution());
			UProperty* NewProp_FrameRate = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("FrameRate"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(FrameRate, FMovieSceneCaptureSettings), 0x0000000000004001);
			UProperty* NewProp_OutputFormat = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("OutputFormat"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(OutputFormat, FMovieSceneCaptureSettings), 0x0000040000004001);
			UProperty* NewProp_OutputDirectory = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("OutputDirectory"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(OutputDirectory, FMovieSceneCaptureSettings), 0x0000040000004001, Z_Construct_UScriptStruct_FDirectoryPath());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/MovieSceneCaptureSettings.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Common movie-scene capture settings"));
			MetaData->SetValue(NewProp_bShowHUD, TEXT("Category"), TEXT("Cinematic"));
			MetaData->SetValue(NewProp_bShowHUD, TEXT("ModuleRelativePath"), TEXT("Public/MovieSceneCaptureSettings.h"));
			MetaData->SetValue(NewProp_bShowHUD, TEXT("ToolTip"), TEXT("Whether to show the in-game HUD whilst capturing"));
			MetaData->SetValue(NewProp_bShowPlayer, TEXT("Category"), TEXT("Cinematic"));
			MetaData->SetValue(NewProp_bShowPlayer, TEXT("ModuleRelativePath"), TEXT("Public/MovieSceneCaptureSettings.h"));
			MetaData->SetValue(NewProp_bShowPlayer, TEXT("ToolTip"), TEXT("Whether to show the local player whilst capturing"));
			MetaData->SetValue(NewProp_bAllowTurning, TEXT("Category"), TEXT("Cinematic"));
			MetaData->SetValue(NewProp_bAllowTurning, TEXT("ModuleRelativePath"), TEXT("Public/MovieSceneCaptureSettings.h"));
			MetaData->SetValue(NewProp_bAllowTurning, TEXT("ToolTip"), TEXT("Whether to allow player rotation whilst capturing"));
			MetaData->SetValue(NewProp_bAllowMovement, TEXT("Category"), TEXT("Cinematic"));
			MetaData->SetValue(NewProp_bAllowMovement, TEXT("ModuleRelativePath"), TEXT("Public/MovieSceneCaptureSettings.h"));
			MetaData->SetValue(NewProp_bAllowMovement, TEXT("ToolTip"), TEXT("Whether to allow player movement whilst capturing"));
			MetaData->SetValue(NewProp_bCinematicMode, TEXT("Category"), TEXT("Cinematic"));
			MetaData->SetValue(NewProp_bCinematicMode, TEXT("ModuleRelativePath"), TEXT("Public/MovieSceneCaptureSettings.h"));
			MetaData->SetValue(NewProp_bCinematicMode, TEXT("ToolTip"), TEXT("Whether to enable cinematic mode whilst capturing"));
			MetaData->SetValue(NewProp_bEnableTextureStreaming, TEXT("Category"), TEXT("CaptureSettings"));
			MetaData->SetValue(NewProp_bEnableTextureStreaming, TEXT("ModuleRelativePath"), TEXT("Public/MovieSceneCaptureSettings.h"));
			MetaData->SetValue(NewProp_bEnableTextureStreaming, TEXT("ToolTip"), TEXT("Whether to enable texture streaming whilst capturing"));
			MetaData->SetValue(NewProp_Codec, TEXT("Category"), TEXT("CaptureSettings"));
			MetaData->SetValue(NewProp_Codec, TEXT("ModuleRelativePath"), TEXT("Public/MovieSceneCaptureSettings.h"));
			MetaData->SetValue(NewProp_Codec, TEXT("ToolTip"), TEXT("(Experimental) - An optional codec to use for video encoding"));
			MetaData->SetValue(NewProp_CompressionQuality, TEXT("Category"), TEXT("CaptureSettings"));
			MetaData->SetValue(NewProp_CompressionQuality, TEXT("ClampMax"), TEXT("1"));
			MetaData->SetValue(NewProp_CompressionQuality, TEXT("ClampMin"), TEXT("0"));
			MetaData->SetValue(NewProp_CompressionQuality, TEXT("ModuleRelativePath"), TEXT("Public/MovieSceneCaptureSettings.h"));
			MetaData->SetValue(NewProp_CompressionQuality, TEXT("ToolTip"), TEXT("The level of compression to apply to the captured file(s) (0-1)"));
			MetaData->SetValue(NewProp_bUseCompression, TEXT("Category"), TEXT("CaptureSettings"));
			MetaData->SetValue(NewProp_bUseCompression, TEXT("ModuleRelativePath"), TEXT("Public/MovieSceneCaptureSettings.h"));
			MetaData->SetValue(NewProp_bUseCompression, TEXT("ToolTip"), TEXT("Whether compression is enabled on the resulting file(s)"));
			MetaData->SetValue(NewProp_CaptureType, TEXT("Category"), TEXT("CaptureSettings"));
			MetaData->SetValue(NewProp_CaptureType, TEXT("ModuleRelativePath"), TEXT("Public/MovieSceneCaptureSettings.h"));
			MetaData->SetValue(NewProp_CaptureType, TEXT("ToolTip"), TEXT("The type of capture to perform"));
			MetaData->SetValue(NewProp_Resolution, TEXT("Category"), TEXT("CaptureSettings"));
			MetaData->SetValue(NewProp_Resolution, TEXT("ModuleRelativePath"), TEXT("Public/MovieSceneCaptureSettings.h"));
			MetaData->SetValue(NewProp_Resolution, TEXT("ShowOnlyInnerProperties"), TEXT(""));
			MetaData->SetValue(NewProp_Resolution, TEXT("ToolTip"), TEXT("The resolution at which to capture"));
			MetaData->SetValue(NewProp_FrameRate, TEXT("Category"), TEXT("CaptureSettings"));
			MetaData->SetValue(NewProp_FrameRate, TEXT("ModuleRelativePath"), TEXT("Public/MovieSceneCaptureSettings.h"));
			MetaData->SetValue(NewProp_FrameRate, TEXT("ToolTip"), TEXT("The frame rate at which to capture"));
			MetaData->SetValue(NewProp_OutputFormat, TEXT("Category"), TEXT("General"));
			MetaData->SetValue(NewProp_OutputFormat, TEXT("DisplayName"), TEXT("Filename Format"));
			MetaData->SetValue(NewProp_OutputFormat, TEXT("ModuleRelativePath"), TEXT("Public/MovieSceneCaptureSettings.h"));
			MetaData->SetValue(NewProp_OutputFormat, TEXT("ToolTip"), TEXT("The format to use for the resulting filename. Extension will be added automatically. Any tokens of the form {token} will be replaced with the corresponding value:\n{fps}                - The captured framerate\n{frame}              - The current frame number (only relevant for image sequences)\n{width}              - The width of the captured frames\n{height}             - The height of the captured frames"));
			MetaData->SetValue(NewProp_OutputDirectory, TEXT("Category"), TEXT("General"));
			MetaData->SetValue(NewProp_OutputDirectory, TEXT("ModuleRelativePath"), TEXT("Public/MovieSceneCaptureSettings.h"));
			MetaData->SetValue(NewProp_OutputDirectory, TEXT("RelativePath"), TEXT(""));
			MetaData->SetValue(NewProp_OutputDirectory, TEXT("ToolTip"), TEXT("The directory to output the captured file(s) in"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FMovieSceneCaptureSettings_CRC() { return 3765806547U; }
	UScriptStruct* Z_Construct_UScriptStruct_FCaptureResolution()
	{
		UPackage* Outer=Z_Construct_UPackage_MovieSceneCapture();
		extern uint32 Get_Z_Construct_UScriptStruct_FCaptureResolution_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("CaptureResolution"), sizeof(FCaptureResolution), Get_Z_Construct_UScriptStruct_FCaptureResolution_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CaptureResolution"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FCaptureResolution>, EStructFlags(0x00000201));
			UProperty* NewProp_ResY = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ResY"), RF_Public|RF_Transient|RF_Native) UUInt32Property(CPP_PROPERTY_BASE(ResY, FCaptureResolution), 0x0000000000004001);
			UProperty* NewProp_ResX = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ResX"), RF_Public|RF_Transient|RF_Native) UUInt32Property(CPP_PROPERTY_BASE(ResX, FCaptureResolution), 0x0000000000004001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/MovieSceneCaptureSettings.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Structure representing a capture resolution"));
			MetaData->SetValue(NewProp_ResY, TEXT("Category"), TEXT("Resolution"));
			MetaData->SetValue(NewProp_ResY, TEXT("ClampMax"), TEXT("7680"));
			MetaData->SetValue(NewProp_ResY, TEXT("ClampMin"), TEXT("16"));
			MetaData->SetValue(NewProp_ResY, TEXT("ModuleRelativePath"), TEXT("Public/MovieSceneCaptureSettings.h"));
			MetaData->SetValue(NewProp_ResX, TEXT("Category"), TEXT("Resolution"));
			MetaData->SetValue(NewProp_ResX, TEXT("ClampMax"), TEXT("7680"));
			MetaData->SetValue(NewProp_ResX, TEXT("ClampMin"), TEXT("16"));
			MetaData->SetValue(NewProp_ResX, TEXT("ModuleRelativePath"), TEXT("Public/MovieSceneCaptureSettings.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FCaptureResolution_CRC() { return 531619847U; }
	UClass* Z_Construct_UClass_UMovieSceneCaptureInterface_NoRegister()
	{
		return UMovieSceneCaptureInterface::StaticClass();
	}
	UClass* Z_Construct_UClass_UMovieSceneCaptureInterface()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			UInterface::StaticClass();
			Z_Construct_UPackage_MovieSceneCapture();
			OuterClass = UMovieSceneCaptureInterface::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20084081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("CannotImplementInterfaceInBlueprint"), TEXT(""));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMovieSceneCaptureInterface(Z_Construct_UClass_UMovieSceneCaptureInterface, TEXT("UMovieSceneCaptureInterface"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMovieSceneCaptureInterface);
	UClass* Z_Construct_UClass_UMovieSceneCapture_NoRegister()
	{
		return UMovieSceneCapture::StaticClass();
	}
	UClass* Z_Construct_UClass_UMovieSceneCapture()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_MovieSceneCapture();
			OuterClass = UMovieSceneCapture::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100084;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bBufferVisualizationDumpFrames, UMovieSceneCapture, bool);
				UProperty* NewProp_bBufferVisualizationDumpFrames = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bBufferVisualizationDumpFrames"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bBufferVisualizationDumpFrames, UMovieSceneCapture), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bBufferVisualizationDumpFrames, UMovieSceneCapture), sizeof(bool), true);
				UProperty* NewProp_AdditionalCommandLineArguments = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AdditionalCommandLineArguments"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(AdditionalCommandLineArguments, UMovieSceneCapture), 0x0000040000002001);
				UProperty* NewProp_Settings = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Settings"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Settings, UMovieSceneCapture), 0x0000000000004001, Z_Construct_UScriptStruct_FMovieSceneCaptureSettings());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("EditorSettings"));
				OuterClass->Interfaces.Add(FImplementedInterface(Z_Construct_UClass_UMovieSceneCaptureInterface_NoRegister(), VTABLE_OFFSET(UMovieSceneCapture, IMovieSceneCaptureInterface), false ));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("MovieSceneCapture.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/MovieSceneCapture.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Class responsible for capturing scene data"));
				MetaData->SetValue(NewProp_bBufferVisualizationDumpFrames, TEXT("ModuleRelativePath"), TEXT("Public/MovieSceneCapture.h"));
				MetaData->SetValue(NewProp_bBufferVisualizationDumpFrames, TEXT("ToolTip"), TEXT("Value used to control the BufferVisualizationDumpFrames cvar in the child process"));
				MetaData->SetValue(NewProp_AdditionalCommandLineArguments, TEXT("Category"), TEXT("General"));
				MetaData->SetValue(NewProp_AdditionalCommandLineArguments, TEXT("ModuleRelativePath"), TEXT("Public/MovieSceneCapture.h"));
				MetaData->SetValue(NewProp_AdditionalCommandLineArguments, TEXT("ToolTip"), TEXT("Additional command line arguments to pass to the external process when capturing"));
				MetaData->SetValue(NewProp_Settings, TEXT("Category"), TEXT("CaptureSettings"));
				MetaData->SetValue(NewProp_Settings, TEXT("ModuleRelativePath"), TEXT("Public/MovieSceneCapture.h"));
				MetaData->SetValue(NewProp_Settings, TEXT("ShowOnlyInnerProperties"), TEXT(""));
				MetaData->SetValue(NewProp_Settings, TEXT("ToolTip"), TEXT("Settings that define how to capture"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMovieSceneCapture(Z_Construct_UClass_UMovieSceneCapture, TEXT("UMovieSceneCapture"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMovieSceneCapture);
	UClass* Z_Construct_UClass_UAutomatedLevelSequenceCapture_NoRegister()
	{
		return UAutomatedLevelSequenceCapture::StaticClass();
	}
	UClass* Z_Construct_UClass_UAutomatedLevelSequenceCapture()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMovieSceneCapture();
			Z_Construct_UPackage_MovieSceneCapture();
			OuterClass = UAutomatedLevelSequenceCapture::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100084;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_AnimationPlayback = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AnimationPlayback"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(AnimationPlayback, UAutomatedLevelSequenceCapture), 0x0000000000002000, Z_Construct_UClass_ULevelSequencePlayer_NoRegister());
				UProperty* NewProp_AnimationInstance = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AnimationInstance"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(AnimationInstance, UAutomatedLevelSequenceCapture), 0x0000000000002000, Z_Construct_UClass_ULevelSequenceInstance_NoRegister());
				UProperty* NewProp_PrerollAmount = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PrerollAmount"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(PrerollAmount, UAutomatedLevelSequenceCapture), 0x0000040000004001);
				UProperty* NewProp_PlaybackSettings = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PlaybackSettings"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PlaybackSettings, UAutomatedLevelSequenceCapture), 0x0000000000004001, Z_Construct_UScriptStruct_FLevelSequencePlaybackSettings());
				UProperty* NewProp_Level = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Level"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Level, UAutomatedLevelSequenceCapture), 0x0000000000000001, Z_Construct_UScriptStruct_FStringAssetReference());
				UProperty* NewProp_LevelSequence = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LevelSequence"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LevelSequence, UAutomatedLevelSequenceCapture), 0x0000000000000001, Z_Construct_UScriptStruct_FStringAssetReference());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("EditorSettings"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("AutomatedLevelSequenceCapture.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/AutomatedLevelSequenceCapture.h"));
				MetaData->SetValue(NewProp_AnimationPlayback, TEXT("ModuleRelativePath"), TEXT("Public/AutomatedLevelSequenceCapture.h"));
				MetaData->SetValue(NewProp_AnimationPlayback, TEXT("ToolTip"), TEXT("Animation player used to playback the animation at runtime"));
				MetaData->SetValue(NewProp_AnimationInstance, TEXT("ModuleRelativePath"), TEXT("Public/AutomatedLevelSequenceCapture.h"));
				MetaData->SetValue(NewProp_AnimationInstance, TEXT("ToolTip"), TEXT("Animation instance created at runtime before we start capturing"));
				MetaData->SetValue(NewProp_PrerollAmount, TEXT("Category"), TEXT("CaptureSettings"));
				MetaData->SetValue(NewProp_PrerollAmount, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_PrerollAmount, TEXT("ModuleRelativePath"), TEXT("Public/AutomatedLevelSequenceCapture.h"));
				MetaData->SetValue(NewProp_PrerollAmount, TEXT("ToolTip"), TEXT("The amount of time to wait before playback and capture start. Useful for allowing Post Processing effects to settle down before capturing the animation."));
				MetaData->SetValue(NewProp_PrerollAmount, TEXT("Units"), TEXT("Seconds"));
				MetaData->SetValue(NewProp_PlaybackSettings, TEXT("Category"), TEXT("Playback Settings"));
				MetaData->SetValue(NewProp_PlaybackSettings, TEXT("ModuleRelativePath"), TEXT("Public/AutomatedLevelSequenceCapture.h"));
				MetaData->SetValue(NewProp_PlaybackSettings, TEXT("ShowOnlyInnerProperties"), TEXT(""));
				MetaData->SetValue(NewProp_PlaybackSettings, TEXT("ToolTip"), TEXT("Specific playback settings"));
				MetaData->SetValue(NewProp_Level, TEXT("AllowedClasses"), TEXT("World"));
				MetaData->SetValue(NewProp_Level, TEXT("Category"), TEXT("General"));
				MetaData->SetValue(NewProp_Level, TEXT("ModuleRelativePath"), TEXT("Public/AutomatedLevelSequenceCapture.h"));
				MetaData->SetValue(NewProp_Level, TEXT("ToolTip"), TEXT("The level to use for the capture"));
				MetaData->SetValue(NewProp_LevelSequence, TEXT("AllowedClasses"), TEXT("LevelSequence"));
				MetaData->SetValue(NewProp_LevelSequence, TEXT("Category"), TEXT("General"));
				MetaData->SetValue(NewProp_LevelSequence, TEXT("ModuleRelativePath"), TEXT("Public/AutomatedLevelSequenceCapture.h"));
				MetaData->SetValue(NewProp_LevelSequence, TEXT("ToolTip"), TEXT("The level sequence to use during capture"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UAutomatedLevelSequenceCapture(Z_Construct_UClass_UAutomatedLevelSequenceCapture, TEXT("UAutomatedLevelSequenceCapture"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UAutomatedLevelSequenceCapture);
	UClass* Z_Construct_UClass_ULevelCapture_NoRegister()
	{
		return ULevelCapture::StaticClass();
	}
	UClass* Z_Construct_UClass_ULevelCapture()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMovieSceneCapture();
			Z_Construct_UPackage_MovieSceneCapture();
			OuterClass = ULevelCapture::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100084;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Level = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Level"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Level, ULevelCapture), 0x0000000000000001, Z_Construct_UScriptStruct_FStringAssetReference());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("EditorSettings"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("LevelCapture.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/LevelCapture.h"));
				MetaData->SetValue(NewProp_Level, TEXT("AllowedClasses"), TEXT("World"));
				MetaData->SetValue(NewProp_Level, TEXT("Category"), TEXT("General"));
				MetaData->SetValue(NewProp_Level, TEXT("ModuleRelativePath"), TEXT("Public/LevelCapture.h"));
				MetaData->SetValue(NewProp_Level, TEXT("ToolTip"), TEXT("The level we want to load and capture"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ULevelCapture(Z_Construct_UClass_ULevelCapture, TEXT("ULevelCapture"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(ULevelCapture);
	UFunction* Z_Construct_UFunction_UMovieSceneCaptureEnvironment_GetCaptureElapsedTime()
	{
		struct MovieSceneCaptureEnvironment_eventGetCaptureElapsedTime_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UMovieSceneCaptureEnvironment();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetCaptureElapsedTime"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(MovieSceneCaptureEnvironment_eventGetCaptureElapsedTime_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, MovieSceneCaptureEnvironment_eventGetCaptureElapsedTime_Parms), 0x0000000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Cinematics|Capture"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/MovieSceneCaptureEnvironment.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get the total elapsed time of the current capture in seconds"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UMovieSceneCaptureEnvironment_GetCaptureFrameNumber()
	{
		struct MovieSceneCaptureEnvironment_eventGetCaptureFrameNumber_Parms
		{
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UMovieSceneCaptureEnvironment();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetCaptureFrameNumber"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(MovieSceneCaptureEnvironment_eventGetCaptureFrameNumber_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, MovieSceneCaptureEnvironment_eventGetCaptureFrameNumber_Parms), 0x0000000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Cinematics|Capture"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/MovieSceneCaptureEnvironment.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get the frame number of the current capture"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UMovieSceneCaptureEnvironment_NoRegister()
	{
		return UMovieSceneCaptureEnvironment::StaticClass();
	}
	UClass* Z_Construct_UClass_UMovieSceneCaptureEnvironment()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_MovieSceneCapture();
			OuterClass = UMovieSceneCaptureEnvironment::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;

				OuterClass->LinkChild(Z_Construct_UFunction_UMovieSceneCaptureEnvironment_GetCaptureElapsedTime());
				OuterClass->LinkChild(Z_Construct_UFunction_UMovieSceneCaptureEnvironment_GetCaptureFrameNumber());

				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UMovieSceneCaptureEnvironment_GetCaptureElapsedTime()); // 3945180576
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UMovieSceneCaptureEnvironment_GetCaptureFrameNumber()); // 1956258398
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("MovieSceneCaptureEnvironment.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/MovieSceneCaptureEnvironment.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMovieSceneCaptureEnvironment(Z_Construct_UClass_UMovieSceneCaptureEnvironment, TEXT("UMovieSceneCaptureEnvironment"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMovieSceneCaptureEnvironment);
	UPackage* Z_Construct_UPackage_MovieSceneCapture()
	{
		static UPackage* ReturnPackage = NULL;
		if (!ReturnPackage)
		{
			ReturnPackage = CastChecked<UPackage>(StaticFindObjectFast(UPackage::StaticClass(), NULL, FName(TEXT("/Script/MovieSceneCapture")), false, false));
			ReturnPackage->SetPackageFlags(PKG_CompiledIn | 0x00000000);
			FGuid Guid;
			Guid.A = 0x01ADA1B9;
			Guid.B = 0xBD3498ED;
			Guid.C = 0x00000000;
			Guid.D = 0x00000000;
			ReturnPackage->SetGuid(Guid);

		}
		return ReturnPackage;
	}
#endif

PRAGMA_ENABLE_DEPRECATION_WARNINGS
