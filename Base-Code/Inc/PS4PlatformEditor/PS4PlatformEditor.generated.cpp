// Copyright 1998-2015 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Boilerplate C++ definitions for a single module.
	This is automatically generated by UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "Private/PS4PlatformEditorPrivatePCH.h"
#include "PS4PlatformEditor.generated.dep.h"
PRAGMA_DISABLE_DEPRECATION_WARNINGS
void EmptyLinkFunctionForGeneratedCodePS4PlatformEditor() {}
static class UEnum* EPS4ProjectPackagingAppType_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern PS4PLATFORMEDITOR_API class UEnum* Z_Construct_UEnum_PS4PlatformEditor_EPS4ProjectPackagingAppType();
		extern PS4PLATFORMEDITOR_API class UPackage* Z_Construct_UPackage_PS4PlatformEditor();
		Singleton = GetStaticEnum(Z_Construct_UEnum_PS4PlatformEditor_EPS4ProjectPackagingAppType, Z_Construct_UPackage_PS4PlatformEditor(), TEXT("EPS4ProjectPackagingAppType"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EPS4ProjectPackagingAppType(EPS4ProjectPackagingAppType_StaticEnum, TEXT("/Script/PS4PlatformEditor"));
static class UEnum* EPS4ProjectPackagingStorageType_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern PS4PLATFORMEDITOR_API class UEnum* Z_Construct_UEnum_PS4PlatformEditor_EPS4ProjectPackagingStorageType();
		extern PS4PLATFORMEDITOR_API class UPackage* Z_Construct_UPackage_PS4PlatformEditor();
		Singleton = GetStaticEnum(Z_Construct_UEnum_PS4PlatformEditor_EPS4ProjectPackagingStorageType, Z_Construct_UPackage_PS4PlatformEditor(), TEXT("EPS4ProjectPackagingStorageType"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EPS4ProjectPackagingStorageType(EPS4ProjectPackagingStorageType_StaticEnum, TEXT("/Script/PS4PlatformEditor"));
	void UPS4TargetSettings::StaticRegisterNativesUPS4TargetSettings()
	{
	}
	IMPLEMENT_CLASS(UPS4TargetSettings, 200077309);
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	COREUOBJECT_API class UClass* Z_Construct_UClass_UObject();

	PS4PLATFORMEDITOR_API class UEnum* Z_Construct_UEnum_PS4PlatformEditor_EPS4ProjectPackagingAppType();
	PS4PLATFORMEDITOR_API class UEnum* Z_Construct_UEnum_PS4PlatformEditor_EPS4ProjectPackagingStorageType();
	PS4PLATFORMEDITOR_API class UClass* Z_Construct_UClass_UPS4TargetSettings_NoRegister();
	PS4PLATFORMEDITOR_API class UClass* Z_Construct_UClass_UPS4TargetSettings();
	PS4PLATFORMEDITOR_API class UPackage* Z_Construct_UPackage_PS4PlatformEditor();
	UEnum* Z_Construct_UEnum_PS4PlatformEditor_EPS4ProjectPackagingAppType()
	{
		UPackage* Outer=Z_Construct_UPackage_PS4PlatformEditor();
		extern uint32 Get_Z_Construct_UEnum_PS4PlatformEditor_EPS4ProjectPackagingAppType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EPS4ProjectPackagingAppType"), 0, Get_Z_Construct_UEnum_PS4PlatformEditor_EPS4ProjectPackagingAppType_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EPS4ProjectPackagingAppType"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PPAT_Full")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PPAT_Upgradeable")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PPAT_Demo")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PPAT_Freemium")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PPAT_MAX")), 4));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Private/PS4TargetSettings.h"));
			MetaData->SetValue(ReturnEnum, TEXT("PPAT_Demo.DisplayName"), TEXT("Demo"));
			MetaData->SetValue(ReturnEnum, TEXT("PPAT_Demo.ToolTip"), TEXT("Demo App"));
			MetaData->SetValue(ReturnEnum, TEXT("PPAT_Freemium.DisplayName"), TEXT("Freemium"));
			MetaData->SetValue(ReturnEnum, TEXT("PPAT_Freemium.ToolTip"), TEXT("Freemium App"));
			MetaData->SetValue(ReturnEnum, TEXT("PPAT_Full.DisplayName"), TEXT("Full"));
			MetaData->SetValue(ReturnEnum, TEXT("PPAT_Full.ToolTip"), TEXT("Paid Standalone Full App"));
			MetaData->SetValue(ReturnEnum, TEXT("PPAT_Upgradeable.DisplayName"), TEXT("Upgradeable"));
			MetaData->SetValue(ReturnEnum, TEXT("PPAT_Upgradeable.ToolTip"), TEXT("Upgradeable App"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Enumerates the app type."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_PS4PlatformEditor_EPS4ProjectPackagingAppType_CRC() { return 2836420203U; }
	UEnum* Z_Construct_UEnum_PS4PlatformEditor_EPS4ProjectPackagingStorageType()
	{
		UPackage* Outer=Z_Construct_UPackage_PS4PlatformEditor();
		extern uint32 Get_Z_Construct_UEnum_PS4PlatformEditor_EPS4ProjectPackagingStorageType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EPS4ProjectPackagingStorageType"), 0, Get_Z_Construct_UEnum_PS4PlatformEditor_EPS4ProjectPackagingStorageType_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EPS4ProjectPackagingStorageType"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PPST_BD25")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PPST_BD50")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PPST_Digital25")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PPST_Digital50")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PPST_MAX")), 4));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Private/PS4TargetSettings.h"));
			MetaData->SetValue(ReturnEnum, TEXT("PPST_BD25.DisplayName"), TEXT("BD25"));
			MetaData->SetValue(ReturnEnum, TEXT("PPST_BD25.ToolTip"), TEXT("Digital and BluRay, Max 25 GB."));
			MetaData->SetValue(ReturnEnum, TEXT("PPST_BD50.DisplayName"), TEXT("BD50"));
			MetaData->SetValue(ReturnEnum, TEXT("PPST_BD50.ToolTip"), TEXT("Digital and BluRay, Max 50 GB."));
			MetaData->SetValue(ReturnEnum, TEXT("PPST_Digital25.DisplayName"), TEXT("Digital25"));
			MetaData->SetValue(ReturnEnum, TEXT("PPST_Digital25.ToolTip"), TEXT("Digital only, Max 25 GB."));
			MetaData->SetValue(ReturnEnum, TEXT("PPST_Digital50.DisplayName"), TEXT("Digital50"));
			MetaData->SetValue(ReturnEnum, TEXT("PPST_Digital50.ToolTip"), TEXT("Digital only, Max 50 GB."));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Enumerates the storage type."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_PS4PlatformEditor_EPS4ProjectPackagingStorageType_CRC() { return 391711823U; }
	UClass* Z_Construct_UClass_UPS4TargetSettings_NoRegister()
	{
		return UPS4TargetSettings::StaticClass();
	}
	UClass* Z_Construct_UClass_UPS4TargetSettings()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_PS4PlatformEditor();
			OuterClass = UPS4TargetSettings::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100086;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(MoveFilesToOuterEdge, UPS4TargetSettings, bool);
				UProperty* NewProp_MoveFilesToOuterEdge = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MoveFilesToOuterEdge"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(MoveFilesToOuterEdge, UPS4TargetSettings), 0x0000000000004001, CPP_BOOL_PROPERTY_BITMASK(MoveFilesToOuterEdge, UPS4TargetSettings), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(BuildIsoImage, UPS4TargetSettings, bool);
				UProperty* NewProp_BuildIsoImage = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BuildIsoImage"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(BuildIsoImage, UPS4TargetSettings), 0x0000000000004001, CPP_BOOL_PROPERTY_BITMASK(BuildIsoImage, UPS4TargetSettings), sizeof(bool), true);
				UProperty* NewProp_AppType = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AppType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(AppType, UPS4TargetSettings), 0x0000000000004001, Z_Construct_UEnum_PS4PlatformEditor_EPS4ProjectPackagingAppType());
				UProperty* NewProp_StorageType = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StorageType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(StorageType, UPS4TargetSettings), 0x0000000000004001, Z_Construct_UEnum_PS4PlatformEditor_EPS4ProjectPackagingStorageType());
				UProperty* NewProp_TitlePasscode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TitlePasscode"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(TitlePasscode, UPS4TargetSettings), 0x0000000000004001);
				UProperty* NewProp_TitleID = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TitleID"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(TitleID, UPS4TargetSettings), 0x0000000000004001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnableCompanionApp, UPS4TargetSettings, bool);
				UProperty* NewProp_bEnableCompanionApp = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bEnableCompanionApp"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnableCompanionApp, UPS4TargetSettings), 0x0000000000004001, CPP_BOOL_PROPERTY_BITMASK(bEnableCompanionApp, UPS4TargetSettings), sizeof(bool), true);
				UProperty* NewProp_GnmUnsafeCommandBufferReserveSizeInBytes = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GnmUnsafeCommandBufferReserveSizeInBytes"), RF_Public|RF_Transient|RF_Native) UUInt32Property(CPP_PROPERTY_BASE(GnmUnsafeCommandBufferReserveSizeInBytes, UPS4TargetSettings), 0x0000000000004001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnableGnmUnsafeCommandBuffers, UPS4TargetSettings, bool);
				UProperty* NewProp_bEnableGnmUnsafeCommandBuffers = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bEnableGnmUnsafeCommandBuffers"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnableGnmUnsafeCommandBuffers, UPS4TargetSettings), 0x0000000000004001, CPP_BOOL_PROPERTY_BITMASK(bEnableGnmUnsafeCommandBuffers, UPS4TargetSettings), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnableGnmLCUEDebug, UPS4TargetSettings, bool);
				UProperty* NewProp_bEnableGnmLCUEDebug = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bEnableGnmLCUEDebug"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnableGnmLCUEDebug, UPS4TargetSettings), 0x0000000000004001, CPP_BOOL_PROPERTY_BITMASK(bEnableGnmLCUEDebug, UPS4TargetSettings), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnableUE4LCUE, UPS4TargetSettings, bool);
				UProperty* NewProp_bEnableUE4LCUE = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bEnableUE4LCUE"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnableUE4LCUE, UPS4TargetSettings), 0x0000000000004001, CPP_BOOL_PROPERTY_BITMASK(bEnableUE4LCUE, UPS4TargetSettings), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnableSulphaDebugger, UPS4TargetSettings, bool);
				UProperty* NewProp_bEnableSulphaDebugger = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bEnableSulphaDebugger"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnableSulphaDebugger, UPS4TargetSettings), 0x0000000000004001, CPP_BOOL_PROPERTY_BITMASK(bEnableSulphaDebugger, UPS4TargetSettings), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnableGPUDebugger, UPS4TargetSettings, bool);
				UProperty* NewProp_bEnableGPUDebugger = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bEnableGPUDebugger"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnableGPUDebugger, UPS4TargetSettings), 0x0000000000004001, CPP_BOOL_PROPERTY_BITMASK(bEnableGPUDebugger, UPS4TargetSettings), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnableRazorCPUEvents, UPS4TargetSettings, bool);
				UProperty* NewProp_bEnableRazorCPUEvents = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bEnableRazorCPUEvents"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnableRazorCPUEvents, UPS4TargetSettings), 0x0000000000004001, CPP_BOOL_PROPERTY_BITMASK(bEnableRazorCPUEvents, UPS4TargetSettings), sizeof(bool), true);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("PS4TargetSettings.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Private/PS4TargetSettings.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Implements the settings for the PS4 target platform."));
				MetaData->SetValue(NewProp_MoveFilesToOuterEdge, TEXT("Category"), TEXT("Packaging"));
				MetaData->SetValue(NewProp_MoveFilesToOuterEdge, TEXT("ModuleRelativePath"), TEXT("Private/PS4TargetSettings.h"));
				MetaData->SetValue(NewProp_MoveFilesToOuterEdge, TEXT("ToolTip"), TEXT("Move the package file to the outer edge of the BluRay improving read speeds but increasing file sizes"));
				MetaData->SetValue(NewProp_BuildIsoImage, TEXT("Category"), TEXT("Packaging"));
				MetaData->SetValue(NewProp_BuildIsoImage, TEXT("ModuleRelativePath"), TEXT("Private/PS4TargetSettings.h"));
				MetaData->SetValue(NewProp_BuildIsoImage, TEXT("ToolTip"), TEXT("Build ISO Image file"));
				MetaData->SetValue(NewProp_AppType, TEXT("Category"), TEXT("Packaging"));
				MetaData->SetValue(NewProp_AppType, TEXT("ModuleRelativePath"), TEXT("Private/PS4TargetSettings.h"));
				MetaData->SetValue(NewProp_AppType, TEXT("ToolTip"), TEXT("AppType"));
				MetaData->SetValue(NewProp_StorageType, TEXT("Category"), TEXT("Packaging"));
				MetaData->SetValue(NewProp_StorageType, TEXT("ModuleRelativePath"), TEXT("Private/PS4TargetSettings.h"));
				MetaData->SetValue(NewProp_StorageType, TEXT("ToolTip"), TEXT("StorageType"));
				MetaData->SetValue(NewProp_TitlePasscode, TEXT("Category"), TEXT("Packaging"));
				MetaData->SetValue(NewProp_TitlePasscode, TEXT("ConfigHierarchyEditable"), TEXT(""));
				MetaData->SetValue(NewProp_TitlePasscode, TEXT("ModuleRelativePath"), TEXT("Private/PS4TargetSettings.h"));
				MetaData->SetValue(NewProp_TitlePasscode, TEXT("ToolTip"), TEXT("TitlePasscode"));
				MetaData->SetValue(NewProp_TitleID, TEXT("Category"), TEXT("Packaging"));
				MetaData->SetValue(NewProp_TitleID, TEXT("ConfigHierarchyEditable"), TEXT(""));
				MetaData->SetValue(NewProp_TitleID, TEXT("ModuleRelativePath"), TEXT("Private/PS4TargetSettings.h"));
				MetaData->SetValue(NewProp_TitleID, TEXT("ToolTip"), TEXT("TitleID"));
				MetaData->SetValue(NewProp_bEnableCompanionApp, TEXT("Category"), TEXT("CompileTime"));
				MetaData->SetValue(NewProp_bEnableCompanionApp, TEXT("ModuleRelativePath"), TEXT("Private/PS4TargetSettings.h"));
				MetaData->SetValue(NewProp_bEnableCompanionApp, TEXT("ToolTip"), TEXT("Enable CompanionApp support."));
				MetaData->SetValue(NewProp_GnmUnsafeCommandBufferReserveSizeInBytes, TEXT("Category"), TEXT("CompileTime"));
				MetaData->SetValue(NewProp_GnmUnsafeCommandBufferReserveSizeInBytes, TEXT("ClampMin"), TEXT("8192"));
				MetaData->SetValue(NewProp_GnmUnsafeCommandBufferReserveSizeInBytes, TEXT("ModuleRelativePath"), TEXT("Private/PS4TargetSettings.h"));
				MetaData->SetValue(NewProp_GnmUnsafeCommandBufferReserveSizeInBytes, TEXT("NoSpinbox"), TEXT(""));
				MetaData->SetValue(NewProp_GnmUnsafeCommandBufferReserveSizeInBytes, TEXT("ToolTip"), TEXT("Unsafe Command Buffer reserve size. Reserve area at the end of the command buffer to prevent buffer overflow."));
				MetaData->SetValue(NewProp_bEnableGnmUnsafeCommandBuffers, TEXT("Category"), TEXT("CompileTime"));
				MetaData->SetValue(NewProp_bEnableGnmUnsafeCommandBuffers, TEXT("ModuleRelativePath"), TEXT("Private/PS4TargetSettings.h"));
				MetaData->SetValue(NewProp_bEnableGnmUnsafeCommandBuffers, TEXT("ToolTip"), TEXT("Enable use of Unsafe Command Buffers. Checks for remaining buffer space before each draw call rather than before each Gnm command for improved CPU performance. Does not work with SDK LCUE."));
				MetaData->SetValue(NewProp_bEnableGnmLCUEDebug, TEXT("Category"), TEXT("CompileTime"));
				MetaData->SetValue(NewProp_bEnableGnmLCUEDebug, TEXT("ModuleRelativePath"), TEXT("Private/PS4TargetSettings.h"));
				MetaData->SetValue(NewProp_bEnableGnmLCUEDebug, TEXT("ToolTip"), TEXT("Enable UE4 LCUE validation.  Does not work with SDK LCUE. To use debug SDK LCUE you must compile GNMX in debug mode and link in debug library in UEBuildPS4.cs."));
				MetaData->SetValue(NewProp_bEnableUE4LCUE, TEXT("Category"), TEXT("CompileTime"));
				MetaData->SetValue(NewProp_bEnableUE4LCUE, TEXT("ModuleRelativePath"), TEXT("Private/PS4TargetSettings.h"));
				MetaData->SetValue(NewProp_bEnableUE4LCUE, TEXT("ToolTip"), TEXT("Enable UE4 LCUE implementation.  Some modifications to SDK version.  Recommended."));
				MetaData->SetValue(NewProp_bEnableSulphaDebugger, TEXT("Category"), TEXT("CompileTime"));
				MetaData->SetValue(NewProp_bEnableSulphaDebugger, TEXT("ModuleRelativePath"), TEXT("Private/PS4TargetSettings.h"));
				MetaData->SetValue(NewProp_bEnableSulphaDebugger, TEXT("ToolTip"), TEXT("Enable Sulpha host side audio debugging."));
				MetaData->SetValue(NewProp_bEnableGPUDebugger, TEXT("Category"), TEXT("CompileTime"));
				MetaData->SetValue(NewProp_bEnableGPUDebugger, TEXT("ModuleRelativePath"), TEXT("Private/PS4TargetSettings.h"));
				MetaData->SetValue(NewProp_bEnableGPUDebugger, TEXT("ToolTip"), TEXT("Register shaders with the standalone GPU debugger."));
				MetaData->SetValue(NewProp_bEnableRazorCPUEvents, TEXT("Category"), TEXT("CompileTime"));
				MetaData->SetValue(NewProp_bEnableRazorCPUEvents, TEXT("ModuleRelativePath"), TEXT("Private/PS4TargetSettings.h"));
				MetaData->SetValue(NewProp_bEnableRazorCPUEvents, TEXT("ToolTip"), TEXT("To emit razor CPU events when using 'stat namedevents'"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UPS4TargetSettings(Z_Construct_UClass_UPS4TargetSettings, TEXT("UPS4TargetSettings"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UPS4TargetSettings);
	UPackage* Z_Construct_UPackage_PS4PlatformEditor()
	{
		static UPackage* ReturnPackage = NULL;
		if (!ReturnPackage)
		{
			ReturnPackage = CastChecked<UPackage>(StaticFindObjectFast(UPackage::StaticClass(), NULL, FName(TEXT("/Script/PS4PlatformEditor")), false, false));
			ReturnPackage->SetPackageFlags(PKG_CompiledIn | 0x00000000);
			FGuid Guid;
			Guid.A = 0x3BEC52FA;
			Guid.B = 0x90484DA2;
			Guid.C = 0x00000000;
			Guid.D = 0x00000000;
			ReturnPackage->SetGuid(Guid);

		}
		return ReturnPackage;
	}
#endif

PRAGMA_ENABLE_DEPRECATION_WARNINGS
