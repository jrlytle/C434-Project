// Copyright 1998-2015 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Boilerplate C++ definitions for a single module.
	This is automatically generated by UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "Private/SequencerPrivatePCH.h"
#include "Sequencer.generated.dep.h"
PRAGMA_DISABLE_DEPRECATION_WARNINGS
void EmptyLinkFunctionForGeneratedCodeSequencer() {}
	void USequencerProjectSettings::StaticRegisterNativesUSequencerProjectSettings()
	{
	}
	IMPLEMENT_CLASS(USequencerProjectSettings, 1025945538);
	void USequencerSettingsContainer::StaticRegisterNativesUSequencerSettingsContainer()
	{
	}
	IMPLEMENT_CLASS(USequencerSettingsContainer, 3206052352);
	void USequencerSettings::StaticRegisterNativesUSequencerSettings()
	{
	}
	IMPLEMENT_CLASS(USequencerSettings, 2016644700);
	void ULevelEditorSequencerSettings::StaticRegisterNativesULevelEditorSequencerSettings()
	{
	}
	IMPLEMENT_CLASS(ULevelEditorSequencerSettings, 461774454);
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	COREUOBJECT_API class UClass* Z_Construct_UClass_UObject();
	MOVIESCENE_API class UEnum* Z_Construct_UEnum_MovieScene_EMovieSceneKeyInterpolation();

	SEQUENCER_API class UClass* Z_Construct_UClass_USequencerProjectSettings_NoRegister();
	SEQUENCER_API class UClass* Z_Construct_UClass_USequencerProjectSettings();
	SEQUENCER_API class UClass* Z_Construct_UClass_USequencerSettingsContainer_NoRegister();
	SEQUENCER_API class UClass* Z_Construct_UClass_USequencerSettingsContainer();
	SEQUENCER_API class UClass* Z_Construct_UClass_USequencerSettings_NoRegister();
	SEQUENCER_API class UClass* Z_Construct_UClass_USequencerSettings();
	SEQUENCER_API class UClass* Z_Construct_UClass_ULevelEditorSequencerSettings_NoRegister();
	SEQUENCER_API class UClass* Z_Construct_UClass_ULevelEditorSequencerSettings();
	SEQUENCER_API class UPackage* Z_Construct_UPackage_Sequencer();
	UClass* Z_Construct_UClass_USequencerProjectSettings_NoRegister()
	{
		return USequencerProjectSettings::StaticClass();
	}
	UClass* Z_Construct_UClass_USequencerProjectSettings()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Sequencer();
			OuterClass = USequencerProjectSettings::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000084;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Duration = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Duration"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Duration, USequencerProjectSettings), 0x0000000000004001);
				UProperty* NewProp_InFrame = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InFrame"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(InFrame, USequencerProjectSettings), 0x0000000000004001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("EditorPerProjectUserSettings"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("SequencerProjectSettings.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Private/SequencerProjectSettings.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Settings for the Sequencer editor"));
				MetaData->SetValue(NewProp_Duration, TEXT("Category"), TEXT("Timeline"));
				MetaData->SetValue(NewProp_Duration, TEXT("ModuleRelativePath"), TEXT("Private/SequencerProjectSettings.h"));
				MetaData->SetValue(NewProp_Duration, TEXT("ToolTip"), TEXT("The default duration in seconds."));
				MetaData->SetValue(NewProp_InFrame, TEXT("Category"), TEXT("Timeline"));
				MetaData->SetValue(NewProp_InFrame, TEXT("ModuleRelativePath"), TEXT("Private/SequencerProjectSettings.h"));
				MetaData->SetValue(NewProp_InFrame, TEXT("ToolTip"), TEXT("The default in frame."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USequencerProjectSettings(Z_Construct_UClass_USequencerProjectSettings, TEXT("USequencerProjectSettings"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(USequencerProjectSettings);
	UClass* Z_Construct_UClass_USequencerSettingsContainer_NoRegister()
	{
		return USequencerSettingsContainer::StaticClass();
	}
	UClass* Z_Construct_UClass_USequencerSettingsContainer()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Sequencer();
			OuterClass = USequencerSettingsContainer::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("SequencerSettings.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Private/SequencerSettings.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Empty class used to house multiple named USequencerSettings"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USequencerSettingsContainer(Z_Construct_UClass_USequencerSettingsContainer, TEXT("USequencerSettingsContainer"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(USequencerSettingsContainer);
	UClass* Z_Construct_UClass_USequencerSettings_NoRegister()
	{
		return USequencerSettings::StaticClass();
	}
	UClass* Z_Construct_UClass_USequencerSettings()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Sequencer();
			OuterClass = USequencerSettings::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000484;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bShowCurveEditorCurveToolTips, USequencerSettings, bool);
				UProperty* NewProp_bShowCurveEditorCurveToolTips = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bShowCurveEditorCurveToolTips"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bShowCurveEditorCurveToolTips, USequencerSettings), 0x0000080000004000, CPP_BOOL_PROPERTY_BITMASK(bShowCurveEditorCurveToolTips, USequencerSettings), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bShowCurveEditor, USequencerSettings, bool);
				UProperty* NewProp_bShowCurveEditor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bShowCurveEditor"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bShowCurveEditor, USequencerSettings), 0x0000080000004000, CPP_BOOL_PROPERTY_BITMASK(bShowCurveEditor, USequencerSettings), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAutoScrollEnabled, USequencerSettings, bool);
				UProperty* NewProp_bAutoScrollEnabled = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAutoScrollEnabled"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAutoScrollEnabled, USequencerSettings), 0x0000080000004000, CPP_BOOL_PROPERTY_BITMASK(bAutoScrollEnabled, USequencerSettings), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDetailsViewVisible, USequencerSettings, bool);
				UProperty* NewProp_bDetailsViewVisible = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bDetailsViewVisible"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDetailsViewVisible, USequencerSettings), 0x0000080000004000, CPP_BOOL_PROPERTY_BITMASK(bDetailsViewVisible, USequencerSettings), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSnapCurveValueToInterval, USequencerSettings, bool);
				UProperty* NewProp_bSnapCurveValueToInterval = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bSnapCurveValueToInterval"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSnapCurveValueToInterval, USequencerSettings), 0x0000080000004000, CPP_BOOL_PROPERTY_BITMASK(bSnapCurveValueToInterval, USequencerSettings), sizeof(bool), true);
				UProperty* NewProp_CurveValueSnapInterval = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CurveValueSnapInterval"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(CurveValueSnapInterval, USequencerSettings), 0x0000080000004000);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSnapPlayTimeToDraggedKey, USequencerSettings, bool);
				UProperty* NewProp_bSnapPlayTimeToDraggedKey = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bSnapPlayTimeToDraggedKey"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSnapPlayTimeToDraggedKey, USequencerSettings), 0x0000080000004000, CPP_BOOL_PROPERTY_BITMASK(bSnapPlayTimeToDraggedKey, USequencerSettings), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSnapPlayTimeToInterval, USequencerSettings, bool);
				UProperty* NewProp_bSnapPlayTimeToInterval = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bSnapPlayTimeToInterval"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSnapPlayTimeToInterval, USequencerSettings), 0x0000080000004000, CPP_BOOL_PROPERTY_BITMASK(bSnapPlayTimeToInterval, USequencerSettings), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSnapSectionTimesToSections, USequencerSettings, bool);
				UProperty* NewProp_bSnapSectionTimesToSections = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bSnapSectionTimesToSections"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSnapSectionTimesToSections, USequencerSettings), 0x0000080000004000, CPP_BOOL_PROPERTY_BITMASK(bSnapSectionTimesToSections, USequencerSettings), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSnapSectionTimesToInterval, USequencerSettings, bool);
				UProperty* NewProp_bSnapSectionTimesToInterval = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bSnapSectionTimesToInterval"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSnapSectionTimesToInterval, USequencerSettings), 0x0000080000004000, CPP_BOOL_PROPERTY_BITMASK(bSnapSectionTimesToInterval, USequencerSettings), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSnapKeyTimesToKeys, USequencerSettings, bool);
				UProperty* NewProp_bSnapKeyTimesToKeys = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bSnapKeyTimesToKeys"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSnapKeyTimesToKeys, USequencerSettings), 0x0000080000004000, CPP_BOOL_PROPERTY_BITMASK(bSnapKeyTimesToKeys, USequencerSettings), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSnapKeyTimesToInterval, USequencerSettings, bool);
				UProperty* NewProp_bSnapKeyTimesToInterval = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bSnapKeyTimesToInterval"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSnapKeyTimesToInterval, USequencerSettings), 0x0000080000004000, CPP_BOOL_PROPERTY_BITMASK(bSnapKeyTimesToInterval, USequencerSettings), sizeof(bool), true);
				UProperty* NewProp_TimeSnapInterval = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TimeSnapInterval"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(TimeSnapInterval, USequencerSettings), 0x0000080000004000);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsSnapEnabled, USequencerSettings, bool);
				UProperty* NewProp_bIsSnapEnabled = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsSnapEnabled"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsSnapEnabled, USequencerSettings), 0x0000080000004000, CPP_BOOL_PROPERTY_BITMASK(bIsSnapEnabled, USequencerSettings), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLockInOutToStartEndRange, USequencerSettings, bool);
				UProperty* NewProp_bLockInOutToStartEndRange = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bLockInOutToStartEndRange"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLockInOutToStartEndRange, USequencerSettings), 0x0000080000004000, CPP_BOOL_PROPERTY_BITMASK(bLockInOutToStartEndRange, USequencerSettings), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bShowRangeSlider, USequencerSettings, bool);
				UProperty* NewProp_bShowRangeSlider = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bShowRangeSlider"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bShowRangeSlider, USequencerSettings), 0x0000080000004000, CPP_BOOL_PROPERTY_BITMASK(bShowRangeSlider, USequencerSettings), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bShowFrameNumbers, USequencerSettings, bool);
				UProperty* NewProp_bShowFrameNumbers = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bShowFrameNumbers"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bShowFrameNumbers, USequencerSettings), 0x0000080000004000, CPP_BOOL_PROPERTY_BITMASK(bShowFrameNumbers, USequencerSettings), sizeof(bool), true);
				UProperty* NewProp_KeyInterpolation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("KeyInterpolation"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(KeyInterpolation, USequencerSettings), 0x0000080000004000, Z_Construct_UEnum_MovieScene_EMovieSceneKeyInterpolation());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bKeyInterpPropertiesOnly, USequencerSettings, bool);
				UProperty* NewProp_bKeyInterpPropertiesOnly = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bKeyInterpPropertiesOnly"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bKeyInterpPropertiesOnly, USequencerSettings), 0x0000080000004000, CPP_BOOL_PROPERTY_BITMASK(bKeyInterpPropertiesOnly, USequencerSettings), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bKeyAllEnabled, USequencerSettings, bool);
				UProperty* NewProp_bKeyAllEnabled = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bKeyAllEnabled"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bKeyAllEnabled, USequencerSettings), 0x0000080000004000, CPP_BOOL_PROPERTY_BITMASK(bKeyAllEnabled, USequencerSettings), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAutoKeyEnabled, USequencerSettings, bool);
				UProperty* NewProp_bAutoKeyEnabled = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAutoKeyEnabled"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAutoKeyEnabled, USequencerSettings), 0x0000080000004000, CPP_BOOL_PROPERTY_BITMASK(bAutoKeyEnabled, USequencerSettings), sizeof(bool), true);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("EditorPerProjectUserSettings"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("SequencerSettings.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Private/SequencerSettings.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Serializable options for sequencer."));
				MetaData->SetValue(NewProp_bShowCurveEditorCurveToolTips, TEXT("ModuleRelativePath"), TEXT("Private/SequencerSettings.h"));
				MetaData->SetValue(NewProp_bShowCurveEditor, TEXT("ModuleRelativePath"), TEXT("Private/SequencerSettings.h"));
				MetaData->SetValue(NewProp_bAutoScrollEnabled, TEXT("ModuleRelativePath"), TEXT("Private/SequencerSettings.h"));
				MetaData->SetValue(NewProp_bDetailsViewVisible, TEXT("ModuleRelativePath"), TEXT("Private/SequencerSettings.h"));
				MetaData->SetValue(NewProp_bSnapCurveValueToInterval, TEXT("ModuleRelativePath"), TEXT("Private/SequencerSettings.h"));
				MetaData->SetValue(NewProp_CurveValueSnapInterval, TEXT("ModuleRelativePath"), TEXT("Private/SequencerSettings.h"));
				MetaData->SetValue(NewProp_bSnapPlayTimeToDraggedKey, TEXT("ModuleRelativePath"), TEXT("Private/SequencerSettings.h"));
				MetaData->SetValue(NewProp_bSnapPlayTimeToInterval, TEXT("ModuleRelativePath"), TEXT("Private/SequencerSettings.h"));
				MetaData->SetValue(NewProp_bSnapSectionTimesToSections, TEXT("ModuleRelativePath"), TEXT("Private/SequencerSettings.h"));
				MetaData->SetValue(NewProp_bSnapSectionTimesToInterval, TEXT("ModuleRelativePath"), TEXT("Private/SequencerSettings.h"));
				MetaData->SetValue(NewProp_bSnapKeyTimesToKeys, TEXT("ModuleRelativePath"), TEXT("Private/SequencerSettings.h"));
				MetaData->SetValue(NewProp_bSnapKeyTimesToInterval, TEXT("ModuleRelativePath"), TEXT("Private/SequencerSettings.h"));
				MetaData->SetValue(NewProp_TimeSnapInterval, TEXT("ModuleRelativePath"), TEXT("Private/SequencerSettings.h"));
				MetaData->SetValue(NewProp_bIsSnapEnabled, TEXT("ModuleRelativePath"), TEXT("Private/SequencerSettings.h"));
				MetaData->SetValue(NewProp_bLockInOutToStartEndRange, TEXT("ModuleRelativePath"), TEXT("Private/SequencerSettings.h"));
				MetaData->SetValue(NewProp_bShowRangeSlider, TEXT("ModuleRelativePath"), TEXT("Private/SequencerSettings.h"));
				MetaData->SetValue(NewProp_bShowFrameNumbers, TEXT("ModuleRelativePath"), TEXT("Private/SequencerSettings.h"));
				MetaData->SetValue(NewProp_KeyInterpolation, TEXT("ModuleRelativePath"), TEXT("Private/SequencerSettings.h"));
				MetaData->SetValue(NewProp_bKeyInterpPropertiesOnly, TEXT("ModuleRelativePath"), TEXT("Private/SequencerSettings.h"));
				MetaData->SetValue(NewProp_bKeyAllEnabled, TEXT("ModuleRelativePath"), TEXT("Private/SequencerSettings.h"));
				MetaData->SetValue(NewProp_bAutoKeyEnabled, TEXT("ModuleRelativePath"), TEXT("Private/SequencerSettings.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USequencerSettings(Z_Construct_UClass_USequencerSettings, TEXT("USequencerSettings"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(USequencerSettings);
	UClass* Z_Construct_UClass_ULevelEditorSequencerSettings_NoRegister()
	{
		return ULevelEditorSequencerSettings::StaticClass();
	}
	UClass* Z_Construct_UClass_ULevelEditorSequencerSettings()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USequencerSettings();
			Z_Construct_UPackage_Sequencer();
			OuterClass = ULevelEditorSequencerSettings::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000480;


				OuterClass->ClassConfigName = FName(TEXT("EditorPerProjectUserSettings"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("SequencerSettings.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Private/SequencerSettings.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Level editor specific sequencer settings"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ULevelEditorSequencerSettings(Z_Construct_UClass_ULevelEditorSequencerSettings, TEXT("ULevelEditorSequencerSettings"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(ULevelEditorSequencerSettings);
	UPackage* Z_Construct_UPackage_Sequencer()
	{
		static UPackage* ReturnPackage = NULL;
		if (!ReturnPackage)
		{
			ReturnPackage = CastChecked<UPackage>(StaticFindObjectFast(UPackage::StaticClass(), NULL, FName(TEXT("/Script/Sequencer")), false, false));
			ReturnPackage->SetPackageFlags(PKG_CompiledIn | 0x00000000);
			FGuid Guid;
			Guid.A = 0x4B5E8E4B;
			Guid.B = 0xF32A41AA;
			Guid.C = 0x00000000;
			Guid.D = 0x00000000;
			ReturnPackage->SetGuid(Guid);

		}
		return ReturnPackage;
	}
#endif

PRAGMA_ENABLE_DEPRECATION_WARNINGS
