// Copyright 1998-2015 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Boilerplate C++ definitions for a single module.
	This is automatically generated by UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "Private/SessionMessagesPrivatePCH.h"
#include "SessionMessages.generated.dep.h"
PRAGMA_DISABLE_DEPRECATION_WARNINGS
void EmptyLinkFunctionForGeneratedCodeSessionMessages() {}
class UScriptStruct* FSessionServiceLogUnsubscribe::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern SESSIONMESSAGES_API class UScriptStruct* Z_Construct_UScriptStruct_FSessionServiceLogUnsubscribe();
		extern SESSIONMESSAGES_API uint32 Get_Z_Construct_UScriptStruct_FSessionServiceLogUnsubscribe_CRC();
		extern SESSIONMESSAGES_API class UPackage* Z_Construct_UPackage_SessionMessages();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FSessionServiceLogUnsubscribe, Z_Construct_UPackage_SessionMessages(), TEXT("SessionServiceLogUnsubscribe"), sizeof(FSessionServiceLogUnsubscribe), Get_Z_Construct_UScriptStruct_FSessionServiceLogUnsubscribe_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FSessionServiceLogUnsubscribe(FSessionServiceLogUnsubscribe::StaticStruct, TEXT("/Script/SessionMessages"));
static struct FScriptStruct_SessionMessages_StaticRegisterNativesFSessionServiceLogUnsubscribe
{
	FScriptStruct_SessionMessages_StaticRegisterNativesFSessionServiceLogUnsubscribe()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("SessionServiceLogUnsubscribe")),new UScriptStruct::TCppStructOps<FSessionServiceLogUnsubscribe>);
	}
} ScriptStruct_SessionMessages_StaticRegisterNativesFSessionServiceLogUnsubscribe;
class UScriptStruct* FSessionServiceLogSubscribe::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern SESSIONMESSAGES_API class UScriptStruct* Z_Construct_UScriptStruct_FSessionServiceLogSubscribe();
		extern SESSIONMESSAGES_API uint32 Get_Z_Construct_UScriptStruct_FSessionServiceLogSubscribe_CRC();
		extern SESSIONMESSAGES_API class UPackage* Z_Construct_UPackage_SessionMessages();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FSessionServiceLogSubscribe, Z_Construct_UPackage_SessionMessages(), TEXT("SessionServiceLogSubscribe"), sizeof(FSessionServiceLogSubscribe), Get_Z_Construct_UScriptStruct_FSessionServiceLogSubscribe_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FSessionServiceLogSubscribe(FSessionServiceLogSubscribe::StaticStruct, TEXT("/Script/SessionMessages"));
static struct FScriptStruct_SessionMessages_StaticRegisterNativesFSessionServiceLogSubscribe
{
	FScriptStruct_SessionMessages_StaticRegisterNativesFSessionServiceLogSubscribe()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("SessionServiceLogSubscribe")),new UScriptStruct::TCppStructOps<FSessionServiceLogSubscribe>);
	}
} ScriptStruct_SessionMessages_StaticRegisterNativesFSessionServiceLogSubscribe;
class UScriptStruct* FSessionServiceLog::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern SESSIONMESSAGES_API class UScriptStruct* Z_Construct_UScriptStruct_FSessionServiceLog();
		extern SESSIONMESSAGES_API uint32 Get_Z_Construct_UScriptStruct_FSessionServiceLog_CRC();
		extern SESSIONMESSAGES_API class UPackage* Z_Construct_UPackage_SessionMessages();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FSessionServiceLog, Z_Construct_UPackage_SessionMessages(), TEXT("SessionServiceLog"), sizeof(FSessionServiceLog), Get_Z_Construct_UScriptStruct_FSessionServiceLog_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FSessionServiceLog(FSessionServiceLog::StaticStruct, TEXT("/Script/SessionMessages"));
static struct FScriptStruct_SessionMessages_StaticRegisterNativesFSessionServiceLog
{
	FScriptStruct_SessionMessages_StaticRegisterNativesFSessionServiceLog()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("SessionServiceLog")),new UScriptStruct::TCppStructOps<FSessionServiceLog>);
	}
} ScriptStruct_SessionMessages_StaticRegisterNativesFSessionServiceLog;
class UScriptStruct* FSessionServicePong::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern SESSIONMESSAGES_API class UScriptStruct* Z_Construct_UScriptStruct_FSessionServicePong();
		extern SESSIONMESSAGES_API uint32 Get_Z_Construct_UScriptStruct_FSessionServicePong_CRC();
		extern SESSIONMESSAGES_API class UPackage* Z_Construct_UPackage_SessionMessages();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FSessionServicePong, Z_Construct_UPackage_SessionMessages(), TEXT("SessionServicePong"), sizeof(FSessionServicePong), Get_Z_Construct_UScriptStruct_FSessionServicePong_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FSessionServicePong(FSessionServicePong::StaticStruct, TEXT("/Script/SessionMessages"));
static struct FScriptStruct_SessionMessages_StaticRegisterNativesFSessionServicePong
{
	FScriptStruct_SessionMessages_StaticRegisterNativesFSessionServicePong()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("SessionServicePong")),new UScriptStruct::TCppStructOps<FSessionServicePong>);
	}
} ScriptStruct_SessionMessages_StaticRegisterNativesFSessionServicePong;
class UScriptStruct* FSessionServicePing::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern SESSIONMESSAGES_API class UScriptStruct* Z_Construct_UScriptStruct_FSessionServicePing();
		extern SESSIONMESSAGES_API uint32 Get_Z_Construct_UScriptStruct_FSessionServicePing_CRC();
		extern SESSIONMESSAGES_API class UPackage* Z_Construct_UPackage_SessionMessages();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FSessionServicePing, Z_Construct_UPackage_SessionMessages(), TEXT("SessionServicePing"), sizeof(FSessionServicePing), Get_Z_Construct_UScriptStruct_FSessionServicePing_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FSessionServicePing(FSessionServicePing::StaticStruct, TEXT("/Script/SessionMessages"));
static struct FScriptStruct_SessionMessages_StaticRegisterNativesFSessionServicePing
{
	FScriptStruct_SessionMessages_StaticRegisterNativesFSessionServicePing()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("SessionServicePing")),new UScriptStruct::TCppStructOps<FSessionServicePing>);
	}
} ScriptStruct_SessionMessages_StaticRegisterNativesFSessionServicePing;
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FGuid();

	SESSIONMESSAGES_API class UScriptStruct* Z_Construct_UScriptStruct_FSessionServiceLogUnsubscribe();
	SESSIONMESSAGES_API class UScriptStruct* Z_Construct_UScriptStruct_FSessionServiceLogSubscribe();
	SESSIONMESSAGES_API class UScriptStruct* Z_Construct_UScriptStruct_FSessionServiceLog();
	SESSIONMESSAGES_API class UScriptStruct* Z_Construct_UScriptStruct_FSessionServicePong();
	SESSIONMESSAGES_API class UScriptStruct* Z_Construct_UScriptStruct_FSessionServicePing();
	SESSIONMESSAGES_API class UPackage* Z_Construct_UPackage_SessionMessages();
	UScriptStruct* Z_Construct_UScriptStruct_FSessionServiceLogUnsubscribe()
	{
		UPackage* Outer=Z_Construct_UPackage_SessionMessages();
		extern uint32 Get_Z_Construct_UScriptStruct_FSessionServiceLogUnsubscribe_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("SessionServiceLogUnsubscribe"), sizeof(FSessionServiceLogUnsubscribe), Get_Z_Construct_UScriptStruct_FSessionServiceLogUnsubscribe_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SessionServiceLogUnsubscribe"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FSessionServiceLogUnsubscribe>, EStructFlags(0x00000001));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/SessionServiceMessages.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Implements a message to unsubscribe from an application's console log."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FSessionServiceLogUnsubscribe_CRC() { return 4236448795U; }
	UScriptStruct* Z_Construct_UScriptStruct_FSessionServiceLogSubscribe()
	{
		UPackage* Outer=Z_Construct_UPackage_SessionMessages();
		extern uint32 Get_Z_Construct_UScriptStruct_FSessionServiceLogSubscribe_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("SessionServiceLogSubscribe"), sizeof(FSessionServiceLogSubscribe), Get_Z_Construct_UScriptStruct_FSessionServiceLogSubscribe_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SessionServiceLogSubscribe"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FSessionServiceLogSubscribe>, EStructFlags(0x00000001));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/SessionServiceMessages.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Implements a message to subscribe to an application's console log."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FSessionServiceLogSubscribe_CRC() { return 2931193867U; }
	UScriptStruct* Z_Construct_UScriptStruct_FSessionServiceLog()
	{
		UPackage* Outer=Z_Construct_UPackage_SessionMessages();
		extern uint32 Get_Z_Construct_UScriptStruct_FSessionServiceLog_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("SessionServiceLog"), sizeof(FSessionServiceLog), Get_Z_Construct_UScriptStruct_FSessionServiceLog_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SessionServiceLog"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FSessionServiceLog>, EStructFlags(0x00000001));
			UProperty* NewProp_Verbosity = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Verbosity"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(Verbosity, FSessionServiceLog), 0x0000000000000000);
			UProperty* NewProp_TimeSeconds = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TimeSeconds"), RF_Public|RF_Transient|RF_Native) UDoubleProperty(CPP_PROPERTY_BASE(TimeSeconds, FSessionServiceLog), 0x0000000000000000);
			UProperty* NewProp_InstanceId = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("InstanceId"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InstanceId, FSessionServiceLog), 0x0000000000000000, Z_Construct_UScriptStruct_FGuid());
			UProperty* NewProp_Data = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Data"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Data, FSessionServiceLog), 0x0000000000000000);
			UProperty* NewProp_Category = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Category"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(Category, FSessionServiceLog), 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/SessionServiceMessages.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Implements a message that contains a console log entry."));
			MetaData->SetValue(NewProp_Verbosity, TEXT("ModuleRelativePath"), TEXT("Classes/SessionServiceMessages.h"));
			MetaData->SetValue(NewProp_Verbosity, TEXT("ToolTip"), TEXT("Holds the log message's verbosity level."));
			MetaData->SetValue(NewProp_TimeSeconds, TEXT("ModuleRelativePath"), TEXT("Classes/SessionServiceMessages.h"));
			MetaData->SetValue(NewProp_TimeSeconds, TEXT("ToolTip"), TEXT("Holds the time in seconds since the application was started."));
			MetaData->SetValue(NewProp_InstanceId, TEXT("ModuleRelativePath"), TEXT("Classes/SessionServiceMessages.h"));
			MetaData->SetValue(NewProp_InstanceId, TEXT("ToolTip"), TEXT("Holds the application instance identifier."));
			MetaData->SetValue(NewProp_Data, TEXT("ModuleRelativePath"), TEXT("Classes/SessionServiceMessages.h"));
			MetaData->SetValue(NewProp_Data, TEXT("ToolTip"), TEXT("Holds the log message data."));
			MetaData->SetValue(NewProp_Category, TEXT("ModuleRelativePath"), TEXT("Classes/SessionServiceMessages.h"));
			MetaData->SetValue(NewProp_Category, TEXT("ToolTip"), TEXT("Holds the log message category."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FSessionServiceLog_CRC() { return 2895209953U; }
	UScriptStruct* Z_Construct_UScriptStruct_FSessionServicePong()
	{
		UPackage* Outer=Z_Construct_UPackage_SessionMessages();
		extern uint32 Get_Z_Construct_UScriptStruct_FSessionServicePong_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("SessionServicePong"), sizeof(FSessionServicePong), Get_Z_Construct_UScriptStruct_FSessionServicePong_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SessionServicePong"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FSessionServicePong>, EStructFlags(0x00000001));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(Standalone, FSessionServicePong, bool);
			UProperty* NewProp_Standalone = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Standalone"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Standalone, FSessionServicePong), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(Standalone, FSessionServicePong), sizeof(bool), true);
			UProperty* NewProp_SessionOwner = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SessionOwner"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(SessionOwner, FSessionServicePong), 0x0000000000000000);
			UProperty* NewProp_SessionName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SessionName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(SessionName, FSessionServicePong), 0x0000000000000000);
			UProperty* NewProp_SessionId = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SessionId"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SessionId, FSessionServicePong), 0x0000000000000000, Z_Construct_UScriptStruct_FGuid());
			UProperty* NewProp_PlatformName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PlatformName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(PlatformName, FSessionServicePong), 0x0000000000000000);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsConsoleBuild, FSessionServicePong, bool);
			UProperty* NewProp_IsConsoleBuild = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("IsConsoleBuild"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsConsoleBuild, FSessionServicePong), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(IsConsoleBuild, FSessionServicePong), sizeof(bool), true);
			UProperty* NewProp_InstanceName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("InstanceName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(InstanceName, FSessionServicePong), 0x0000000000000000);
			UProperty* NewProp_InstanceId = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("InstanceId"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InstanceId, FSessionServicePong), 0x0000000000000000, Z_Construct_UScriptStruct_FGuid());
			UProperty* NewProp_DeviceName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DeviceName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(DeviceName, FSessionServicePong), 0x0000000000000000);
			UProperty* NewProp_BuildDate = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BuildDate"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(BuildDate, FSessionServicePong), 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/SessionServiceMessages.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Implements a message that is published in response to FSessionServicePing."));
			MetaData->SetValue(NewProp_Standalone, TEXT("ModuleRelativePath"), TEXT("Classes/SessionServiceMessages.h"));
			MetaData->SetValue(NewProp_Standalone, TEXT("ToolTip"), TEXT("Holds a flag indicating whether the application is the only one in that session."));
			MetaData->SetValue(NewProp_SessionOwner, TEXT("ModuleRelativePath"), TEXT("Classes/SessionServiceMessages.h"));
			MetaData->SetValue(NewProp_SessionOwner, TEXT("ToolTip"), TEXT("Holds the name of the user that started the session."));
			MetaData->SetValue(NewProp_SessionName, TEXT("ModuleRelativePath"), TEXT("Classes/SessionServiceMessages.h"));
			MetaData->SetValue(NewProp_SessionName, TEXT("ToolTip"), TEXT("Holds the user defined name of the session."));
			MetaData->SetValue(NewProp_SessionId, TEXT("ModuleRelativePath"), TEXT("Classes/SessionServiceMessages.h"));
			MetaData->SetValue(NewProp_SessionId, TEXT("ToolTip"), TEXT("Holds the identifier of the session that the application belongs to."));
			MetaData->SetValue(NewProp_PlatformName, TEXT("ModuleRelativePath"), TEXT("Classes/SessionServiceMessages.h"));
			MetaData->SetValue(NewProp_PlatformName, TEXT("ToolTip"), TEXT("Holds the name of the platform that the application is running on."));
			MetaData->SetValue(NewProp_IsConsoleBuild, TEXT("ModuleRelativePath"), TEXT("Classes/SessionServiceMessages.h"));
			MetaData->SetValue(NewProp_IsConsoleBuild, TEXT("ToolTip"), TEXT("Holds a flag indicating whether the application is running on a console."));
			MetaData->SetValue(NewProp_InstanceName, TEXT("ModuleRelativePath"), TEXT("Classes/SessionServiceMessages.h"));
			MetaData->SetValue(NewProp_InstanceName, TEXT("ToolTip"), TEXT("Holds the application's instance name."));
			MetaData->SetValue(NewProp_InstanceId, TEXT("ModuleRelativePath"), TEXT("Classes/SessionServiceMessages.h"));
			MetaData->SetValue(NewProp_InstanceId, TEXT("ToolTip"), TEXT("Holds the application's instance identifier."));
			MetaData->SetValue(NewProp_DeviceName, TEXT("ModuleRelativePath"), TEXT("Classes/SessionServiceMessages.h"));
			MetaData->SetValue(NewProp_DeviceName, TEXT("ToolTip"), TEXT("Holds the name of the device that the application is running on."));
			MetaData->SetValue(NewProp_BuildDate, TEXT("ModuleRelativePath"), TEXT("Classes/SessionServiceMessages.h"));
			MetaData->SetValue(NewProp_BuildDate, TEXT("ToolTip"), TEXT("Holds the application's build date."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FSessionServicePong_CRC() { return 2925116530U; }
	UScriptStruct* Z_Construct_UScriptStruct_FSessionServicePing()
	{
		UPackage* Outer=Z_Construct_UPackage_SessionMessages();
		extern uint32 Get_Z_Construct_UScriptStruct_FSessionServicePing_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("SessionServicePing"), sizeof(FSessionServicePing), Get_Z_Construct_UScriptStruct_FSessionServicePing_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SessionServicePing"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FSessionServicePing>, EStructFlags(0x00000001));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/SessionServiceMessages.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Implements a message that is published to discover existing application sessions."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FSessionServicePing_CRC() { return 2851304443U; }
	UPackage* Z_Construct_UPackage_SessionMessages()
	{
		static UPackage* ReturnPackage = NULL;
		if (!ReturnPackage)
		{
			ReturnPackage = CastChecked<UPackage>(StaticFindObjectFast(UPackage::StaticClass(), NULL, FName(TEXT("/Script/SessionMessages")), false, false));
			ReturnPackage->SetPackageFlags(PKG_CompiledIn | 0x00000000);
			FGuid Guid;
			Guid.A = 0x6993F4E3;
			Guid.B = 0x382AC634;
			Guid.C = 0x00000000;
			Guid.D = 0x00000000;
			ReturnPackage->SetGuid(Guid);

		}
		return ReturnPackage;
	}
#endif

PRAGMA_ENABLE_DEPRECATION_WARNINGS
