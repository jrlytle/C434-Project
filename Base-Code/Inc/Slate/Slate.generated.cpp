// Copyright 1998-2015 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Boilerplate C++ definitions for a single module.
	This is automatically generated by UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "Private/SlatePrivatePCH.h"
#include "Slate.generated.dep.h"
PRAGMA_DISABLE_DEPRECATION_WARNINGS
void EmptyLinkFunctionForGeneratedCodeSlate() {}
	void UButtonWidgetStyle::StaticRegisterNativesUButtonWidgetStyle()
	{
	}
	IMPLEMENT_CLASS(UButtonWidgetStyle, 3178183852);
	void UCheckBoxWidgetStyle::StaticRegisterNativesUCheckBoxWidgetStyle()
	{
	}
	IMPLEMENT_CLASS(UCheckBoxWidgetStyle, 1175780750);
	void UComboBoxWidgetStyle::StaticRegisterNativesUComboBoxWidgetStyle()
	{
	}
	IMPLEMENT_CLASS(UComboBoxWidgetStyle, 2947788865);
	void UComboButtonWidgetStyle::StaticRegisterNativesUComboButtonWidgetStyle()
	{
	}
	IMPLEMENT_CLASS(UComboButtonWidgetStyle, 2330919864);
	void UEditableTextBoxWidgetStyle::StaticRegisterNativesUEditableTextBoxWidgetStyle()
	{
	}
	IMPLEMENT_CLASS(UEditableTextBoxWidgetStyle, 1486543110);
	void UEditableTextWidgetStyle::StaticRegisterNativesUEditableTextWidgetStyle()
	{
	}
	IMPLEMENT_CLASS(UEditableTextWidgetStyle, 1320383790);
	void UProgressWidgetStyle::StaticRegisterNativesUProgressWidgetStyle()
	{
	}
	IMPLEMENT_CLASS(UProgressWidgetStyle, 2177626206);
	void UScrollBarWidgetStyle::StaticRegisterNativesUScrollBarWidgetStyle()
	{
	}
	IMPLEMENT_CLASS(UScrollBarWidgetStyle, 2684490652);
	void UScrollBoxWidgetStyle::StaticRegisterNativesUScrollBoxWidgetStyle()
	{
	}
	IMPLEMENT_CLASS(UScrollBoxWidgetStyle, 771621722);
	void USpinBoxWidgetStyle::StaticRegisterNativesUSpinBoxWidgetStyle()
	{
	}
	IMPLEMENT_CLASS(USpinBoxWidgetStyle, 368390926);
	void UTextBlockWidgetStyle::StaticRegisterNativesUTextBlockWidgetStyle()
	{
	}
	IMPLEMENT_CLASS(UTextBlockWidgetStyle, 1888714917);
class UScriptStruct* FInputChord::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern SLATE_API class UScriptStruct* Z_Construct_UScriptStruct_FInputChord();
		extern SLATE_API uint32 Get_Z_Construct_UScriptStruct_FInputChord_CRC();
		extern SLATE_API class UPackage* Z_Construct_UPackage_Slate();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FInputChord, Z_Construct_UPackage_Slate(), TEXT("InputChord"), sizeof(FInputChord), Get_Z_Construct_UScriptStruct_FInputChord_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FInputChord(FInputChord::StaticStruct, TEXT("/Script/Slate"));
static struct FScriptStruct_Slate_StaticRegisterNativesFInputChord
{
	FScriptStruct_Slate_StaticRegisterNativesFInputChord()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("InputChord")),new UScriptStruct::TCppStructOps<FInputChord>);
	}
} ScriptStruct_Slate_StaticRegisterNativesFInputChord;
static class UEnum* ETextJustify_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern SLATE_API class UEnum* Z_Construct_UEnum_Slate_ETextJustify();
		extern SLATE_API class UPackage* Z_Construct_UPackage_Slate();
		Singleton = GetStaticEnum(Z_Construct_UEnum_Slate_ETextJustify, Z_Construct_UPackage_Slate(), TEXT("ETextJustify"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_ETextJustify(ETextJustify_StaticEnum, TEXT("/Script/Slate"));
static class UEnum* ETableViewMode_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern SLATE_API class UEnum* Z_Construct_UEnum_Slate_ETableViewMode();
		extern SLATE_API class UPackage* Z_Construct_UPackage_Slate();
		Singleton = GetStaticEnum(Z_Construct_UEnum_Slate_ETableViewMode, Z_Construct_UPackage_Slate(), TEXT("ETableViewMode"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_ETableViewMode(ETableViewMode_StaticEnum, TEXT("/Script/Slate"));
static class UEnum* ESelectionMode_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern SLATE_API class UEnum* Z_Construct_UEnum_Slate_ESelectionMode();
		extern SLATE_API class UPackage* Z_Construct_UPackage_Slate();
		Singleton = GetStaticEnum(Z_Construct_UEnum_Slate_ESelectionMode, Z_Construct_UPackage_Slate(), TEXT("ESelectionMode"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_ESelectionMode(ESelectionMode_StaticEnum, TEXT("/Script/Slate"));
class UScriptStruct* FAnchors::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern SLATE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnchors();
		extern SLATE_API uint32 Get_Z_Construct_UScriptStruct_FAnchors_CRC();
		extern SLATE_API class UPackage* Z_Construct_UPackage_Slate();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FAnchors, Z_Construct_UPackage_Slate(), TEXT("Anchors"), sizeof(FAnchors), Get_Z_Construct_UScriptStruct_FAnchors_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FAnchors(FAnchors::StaticStruct, TEXT("/Script/Slate"));
static struct FScriptStruct_Slate_StaticRegisterNativesFAnchors
{
	FScriptStruct_Slate_StaticRegisterNativesFAnchors()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("Anchors")),new UScriptStruct::TCppStructOps<FAnchors>);
	}
} ScriptStruct_Slate_StaticRegisterNativesFAnchors;
static class UEnum* EStretch_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern SLATE_API class UEnum* Z_Construct_UEnum_Slate_EStretch();
		extern SLATE_API class UPackage* Z_Construct_UPackage_Slate();
		Singleton = GetStaticEnum(Z_Construct_UEnum_Slate_EStretch, Z_Construct_UPackage_Slate(), TEXT("EStretch"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EStretch(EStretch_StaticEnum, TEXT("/Script/Slate"));
static class UEnum* EStretchDirection_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern SLATE_API class UEnum* Z_Construct_UEnum_Slate_EStretchDirection();
		extern SLATE_API class UPackage* Z_Construct_UPackage_Slate();
		Singleton = GetStaticEnum(Z_Construct_UEnum_Slate_EStretchDirection, Z_Construct_UPackage_Slate(), TEXT("EStretchDirection"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EStretchDirection(EStretchDirection_StaticEnum, TEXT("/Script/Slate"));
static class UEnum* EProgressBarFillType_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern SLATE_API class UEnum* Z_Construct_UEnum_Slate_EProgressBarFillType();
		extern SLATE_API class UPackage* Z_Construct_UPackage_Slate();
		Singleton = GetStaticEnum(Z_Construct_UEnum_Slate_EProgressBarFillType, Z_Construct_UPackage_Slate(), TEXT("EProgressBarFillType"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EProgressBarFillType(EProgressBarFillType_StaticEnum, TEXT("/Script/Slate"));
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	SLATECORE_API class UClass* Z_Construct_UClass_USlateWidgetStyleContainerBase();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FButtonStyle();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FCheckBoxStyle();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FComboBoxStyle();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FComboButtonStyle();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FEditableTextBoxStyle();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FEditableTextStyle();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FProgressBarStyle();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FScrollBarStyle();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FScrollBoxStyle();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FSpinBoxStyle();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FTextBlockStyle();
	INPUTCORE_API class UScriptStruct* Z_Construct_UScriptStruct_FKey();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FVector2D();

	SLATE_API class UClass* Z_Construct_UClass_UButtonWidgetStyle_NoRegister();
	SLATE_API class UClass* Z_Construct_UClass_UButtonWidgetStyle();
	SLATE_API class UClass* Z_Construct_UClass_UCheckBoxWidgetStyle_NoRegister();
	SLATE_API class UClass* Z_Construct_UClass_UCheckBoxWidgetStyle();
	SLATE_API class UClass* Z_Construct_UClass_UComboBoxWidgetStyle_NoRegister();
	SLATE_API class UClass* Z_Construct_UClass_UComboBoxWidgetStyle();
	SLATE_API class UClass* Z_Construct_UClass_UComboButtonWidgetStyle_NoRegister();
	SLATE_API class UClass* Z_Construct_UClass_UComboButtonWidgetStyle();
	SLATE_API class UClass* Z_Construct_UClass_UEditableTextBoxWidgetStyle_NoRegister();
	SLATE_API class UClass* Z_Construct_UClass_UEditableTextBoxWidgetStyle();
	SLATE_API class UClass* Z_Construct_UClass_UEditableTextWidgetStyle_NoRegister();
	SLATE_API class UClass* Z_Construct_UClass_UEditableTextWidgetStyle();
	SLATE_API class UClass* Z_Construct_UClass_UProgressWidgetStyle_NoRegister();
	SLATE_API class UClass* Z_Construct_UClass_UProgressWidgetStyle();
	SLATE_API class UClass* Z_Construct_UClass_UScrollBarWidgetStyle_NoRegister();
	SLATE_API class UClass* Z_Construct_UClass_UScrollBarWidgetStyle();
	SLATE_API class UClass* Z_Construct_UClass_UScrollBoxWidgetStyle_NoRegister();
	SLATE_API class UClass* Z_Construct_UClass_UScrollBoxWidgetStyle();
	SLATE_API class UClass* Z_Construct_UClass_USpinBoxWidgetStyle_NoRegister();
	SLATE_API class UClass* Z_Construct_UClass_USpinBoxWidgetStyle();
	SLATE_API class UClass* Z_Construct_UClass_UTextBlockWidgetStyle_NoRegister();
	SLATE_API class UClass* Z_Construct_UClass_UTextBlockWidgetStyle();
	SLATE_API class UScriptStruct* Z_Construct_UScriptStruct_FInputChord();
	SLATE_API class UEnum* Z_Construct_UEnum_Slate_ETextJustify();
	SLATE_API class UEnum* Z_Construct_UEnum_Slate_ETableViewMode();
	SLATE_API class UEnum* Z_Construct_UEnum_Slate_ESelectionMode();
	SLATE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnchors();
	SLATE_API class UEnum* Z_Construct_UEnum_Slate_EStretch();
	SLATE_API class UEnum* Z_Construct_UEnum_Slate_EStretchDirection();
	SLATE_API class UEnum* Z_Construct_UEnum_Slate_EProgressBarFillType();
	SLATE_API class UPackage* Z_Construct_UPackage_Slate();
	UClass* Z_Construct_UClass_UButtonWidgetStyle_NoRegister()
	{
		return UButtonWidgetStyle::StaticClass();
	}
	UClass* Z_Construct_UClass_UButtonWidgetStyle()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USlateWidgetStyleContainerBase();
			Z_Construct_UPackage_Slate();
			OuterClass = UButtonWidgetStyle::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ButtonStyle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ButtonStyle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ButtonStyle, UButtonWidgetStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FButtonStyle());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Framework/Styling/ButtonWidgetStyle.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Framework/Styling/ButtonWidgetStyle.h"));
				MetaData->SetValue(NewProp_ButtonStyle, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_ButtonStyle, TEXT("ModuleRelativePath"), TEXT("Public/Framework/Styling/ButtonWidgetStyle.h"));
				MetaData->SetValue(NewProp_ButtonStyle, TEXT("ShowOnlyInnerProperties"), TEXT(""));
				MetaData->SetValue(NewProp_ButtonStyle, TEXT("ToolTip"), TEXT("The actual data describing the button's appearance."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UButtonWidgetStyle(Z_Construct_UClass_UButtonWidgetStyle, TEXT("UButtonWidgetStyle"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UButtonWidgetStyle);
	UClass* Z_Construct_UClass_UCheckBoxWidgetStyle_NoRegister()
	{
		return UCheckBoxWidgetStyle::StaticClass();
	}
	UClass* Z_Construct_UClass_UCheckBoxWidgetStyle()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USlateWidgetStyleContainerBase();
			Z_Construct_UPackage_Slate();
			OuterClass = UCheckBoxWidgetStyle::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_CheckBoxStyle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CheckBoxStyle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(CheckBoxStyle, UCheckBoxWidgetStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FCheckBoxStyle());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Framework/Styling/CheckBoxWidgetStyle.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Framework/Styling/CheckBoxWidgetStyle.h"));
				MetaData->SetValue(NewProp_CheckBoxStyle, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_CheckBoxStyle, TEXT("ModuleRelativePath"), TEXT("Public/Framework/Styling/CheckBoxWidgetStyle.h"));
				MetaData->SetValue(NewProp_CheckBoxStyle, TEXT("ShowOnlyInnerProperties"), TEXT(""));
				MetaData->SetValue(NewProp_CheckBoxStyle, TEXT("ToolTip"), TEXT("The actual data describing the button's appearance."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UCheckBoxWidgetStyle(Z_Construct_UClass_UCheckBoxWidgetStyle, TEXT("UCheckBoxWidgetStyle"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UCheckBoxWidgetStyle);
	UClass* Z_Construct_UClass_UComboBoxWidgetStyle_NoRegister()
	{
		return UComboBoxWidgetStyle::StaticClass();
	}
	UClass* Z_Construct_UClass_UComboBoxWidgetStyle()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USlateWidgetStyleContainerBase();
			Z_Construct_UPackage_Slate();
			OuterClass = UComboBoxWidgetStyle::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ComboBoxStyle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ComboBoxStyle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ComboBoxStyle, UComboBoxWidgetStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FComboBoxStyle());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Framework/Styling/ComboBoxWidgetStyle.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Framework/Styling/ComboBoxWidgetStyle.h"));
				MetaData->SetValue(NewProp_ComboBoxStyle, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_ComboBoxStyle, TEXT("ModuleRelativePath"), TEXT("Public/Framework/Styling/ComboBoxWidgetStyle.h"));
				MetaData->SetValue(NewProp_ComboBoxStyle, TEXT("ShowOnlyInnerProperties"), TEXT(""));
				MetaData->SetValue(NewProp_ComboBoxStyle, TEXT("ToolTip"), TEXT("The actual data describing the combo box's appearance."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UComboBoxWidgetStyle(Z_Construct_UClass_UComboBoxWidgetStyle, TEXT("UComboBoxWidgetStyle"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UComboBoxWidgetStyle);
	UClass* Z_Construct_UClass_UComboButtonWidgetStyle_NoRegister()
	{
		return UComboButtonWidgetStyle::StaticClass();
	}
	UClass* Z_Construct_UClass_UComboButtonWidgetStyle()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USlateWidgetStyleContainerBase();
			Z_Construct_UPackage_Slate();
			OuterClass = UComboButtonWidgetStyle::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ComboButtonStyle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ComboButtonStyle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ComboButtonStyle, UComboButtonWidgetStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FComboButtonStyle());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Framework/Styling/ComboButtonWidgetStyle.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Framework/Styling/ComboButtonWidgetStyle.h"));
				MetaData->SetValue(NewProp_ComboButtonStyle, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_ComboButtonStyle, TEXT("ModuleRelativePath"), TEXT("Public/Framework/Styling/ComboButtonWidgetStyle.h"));
				MetaData->SetValue(NewProp_ComboButtonStyle, TEXT("ShowOnlyInnerProperties"), TEXT(""));
				MetaData->SetValue(NewProp_ComboButtonStyle, TEXT("ToolTip"), TEXT("The actual data describing the combo button's appearance."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UComboButtonWidgetStyle(Z_Construct_UClass_UComboButtonWidgetStyle, TEXT("UComboButtonWidgetStyle"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UComboButtonWidgetStyle);
	UClass* Z_Construct_UClass_UEditableTextBoxWidgetStyle_NoRegister()
	{
		return UEditableTextBoxWidgetStyle::StaticClass();
	}
	UClass* Z_Construct_UClass_UEditableTextBoxWidgetStyle()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USlateWidgetStyleContainerBase();
			Z_Construct_UPackage_Slate();
			OuterClass = UEditableTextBoxWidgetStyle::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_EditableTextBoxStyle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EditableTextBoxStyle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(EditableTextBoxStyle, UEditableTextBoxWidgetStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FEditableTextBoxStyle());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Framework/Styling/EditableTextBoxWidgetStyle.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Framework/Styling/EditableTextBoxWidgetStyle.h"));
				MetaData->SetValue(NewProp_EditableTextBoxStyle, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_EditableTextBoxStyle, TEXT("ModuleRelativePath"), TEXT("Public/Framework/Styling/EditableTextBoxWidgetStyle.h"));
				MetaData->SetValue(NewProp_EditableTextBoxStyle, TEXT("ShowOnlyInnerProperties"), TEXT(""));
				MetaData->SetValue(NewProp_EditableTextBoxStyle, TEXT("ToolTip"), TEXT("The actual data describing the button's appearance."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UEditableTextBoxWidgetStyle(Z_Construct_UClass_UEditableTextBoxWidgetStyle, TEXT("UEditableTextBoxWidgetStyle"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UEditableTextBoxWidgetStyle);
	UClass* Z_Construct_UClass_UEditableTextWidgetStyle_NoRegister()
	{
		return UEditableTextWidgetStyle::StaticClass();
	}
	UClass* Z_Construct_UClass_UEditableTextWidgetStyle()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USlateWidgetStyleContainerBase();
			Z_Construct_UPackage_Slate();
			OuterClass = UEditableTextWidgetStyle::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_EditableTextStyle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EditableTextStyle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(EditableTextStyle, UEditableTextWidgetStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FEditableTextStyle());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Framework/Styling/EditableTextWidgetStyle.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Framework/Styling/EditableTextWidgetStyle.h"));
				MetaData->SetValue(NewProp_EditableTextStyle, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_EditableTextStyle, TEXT("ModuleRelativePath"), TEXT("Public/Framework/Styling/EditableTextWidgetStyle.h"));
				MetaData->SetValue(NewProp_EditableTextStyle, TEXT("ShowOnlyInnerProperties"), TEXT(""));
				MetaData->SetValue(NewProp_EditableTextStyle, TEXT("ToolTip"), TEXT("The actual data describing the button's appearance."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UEditableTextWidgetStyle(Z_Construct_UClass_UEditableTextWidgetStyle, TEXT("UEditableTextWidgetStyle"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UEditableTextWidgetStyle);
	UClass* Z_Construct_UClass_UProgressWidgetStyle_NoRegister()
	{
		return UProgressWidgetStyle::StaticClass();
	}
	UClass* Z_Construct_UClass_UProgressWidgetStyle()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USlateWidgetStyleContainerBase();
			Z_Construct_UPackage_Slate();
			OuterClass = UProgressWidgetStyle::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ProgressBarStyle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ProgressBarStyle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ProgressBarStyle, UProgressWidgetStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FProgressBarStyle());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Framework/Styling/ProgressWidgetStyle.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Framework/Styling/ProgressWidgetStyle.h"));
				MetaData->SetValue(NewProp_ProgressBarStyle, TEXT("Category"), TEXT("Style"));
				MetaData->SetValue(NewProp_ProgressBarStyle, TEXT("ModuleRelativePath"), TEXT("Public/Framework/Styling/ProgressWidgetStyle.h"));
				MetaData->SetValue(NewProp_ProgressBarStyle, TEXT("ShowOnlyInnerProperties"), TEXT(""));
				MetaData->SetValue(NewProp_ProgressBarStyle, TEXT("ToolTip"), TEXT("The actual data describing the button's appearance."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UProgressWidgetStyle(Z_Construct_UClass_UProgressWidgetStyle, TEXT("UProgressWidgetStyle"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UProgressWidgetStyle);
	UClass* Z_Construct_UClass_UScrollBarWidgetStyle_NoRegister()
	{
		return UScrollBarWidgetStyle::StaticClass();
	}
	UClass* Z_Construct_UClass_UScrollBarWidgetStyle()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USlateWidgetStyleContainerBase();
			Z_Construct_UPackage_Slate();
			OuterClass = UScrollBarWidgetStyle::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ScrollBarStyle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ScrollBarStyle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ScrollBarStyle, UScrollBarWidgetStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FScrollBarStyle());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Framework/Styling/ScrollBarWidgetStyle.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Framework/Styling/ScrollBarWidgetStyle.h"));
				MetaData->SetValue(NewProp_ScrollBarStyle, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_ScrollBarStyle, TEXT("ModuleRelativePath"), TEXT("Public/Framework/Styling/ScrollBarWidgetStyle.h"));
				MetaData->SetValue(NewProp_ScrollBarStyle, TEXT("ShowOnlyInnerProperties"), TEXT(""));
				MetaData->SetValue(NewProp_ScrollBarStyle, TEXT("ToolTip"), TEXT("The actual data describing the scrollbox's appearance."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UScrollBarWidgetStyle(Z_Construct_UClass_UScrollBarWidgetStyle, TEXT("UScrollBarWidgetStyle"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UScrollBarWidgetStyle);
	UClass* Z_Construct_UClass_UScrollBoxWidgetStyle_NoRegister()
	{
		return UScrollBoxWidgetStyle::StaticClass();
	}
	UClass* Z_Construct_UClass_UScrollBoxWidgetStyle()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USlateWidgetStyleContainerBase();
			Z_Construct_UPackage_Slate();
			OuterClass = UScrollBoxWidgetStyle::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ScrollBoxStyle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ScrollBoxStyle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ScrollBoxStyle, UScrollBoxWidgetStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FScrollBoxStyle());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Framework/Styling/ScrollBoxWidgetStyle.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Framework/Styling/ScrollBoxWidgetStyle.h"));
				MetaData->SetValue(NewProp_ScrollBoxStyle, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_ScrollBoxStyle, TEXT("ModuleRelativePath"), TEXT("Public/Framework/Styling/ScrollBoxWidgetStyle.h"));
				MetaData->SetValue(NewProp_ScrollBoxStyle, TEXT("ShowOnlyInnerProperties"), TEXT(""));
				MetaData->SetValue(NewProp_ScrollBoxStyle, TEXT("ToolTip"), TEXT("The actual data describing the scrollbox's appearance."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UScrollBoxWidgetStyle(Z_Construct_UClass_UScrollBoxWidgetStyle, TEXT("UScrollBoxWidgetStyle"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UScrollBoxWidgetStyle);
	UClass* Z_Construct_UClass_USpinBoxWidgetStyle_NoRegister()
	{
		return USpinBoxWidgetStyle::StaticClass();
	}
	UClass* Z_Construct_UClass_USpinBoxWidgetStyle()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USlateWidgetStyleContainerBase();
			Z_Construct_UPackage_Slate();
			OuterClass = USpinBoxWidgetStyle::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_SpinBoxStyle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SpinBoxStyle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SpinBoxStyle, USpinBoxWidgetStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FSpinBoxStyle());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Framework/Styling/SpinBoxWidgetStyle.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Framework/Styling/SpinBoxWidgetStyle.h"));
				MetaData->SetValue(NewProp_SpinBoxStyle, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_SpinBoxStyle, TEXT("ModuleRelativePath"), TEXT("Public/Framework/Styling/SpinBoxWidgetStyle.h"));
				MetaData->SetValue(NewProp_SpinBoxStyle, TEXT("ShowOnlyInnerProperties"), TEXT(""));
				MetaData->SetValue(NewProp_SpinBoxStyle, TEXT("ToolTip"), TEXT("The actual data describing the button's appearance."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USpinBoxWidgetStyle(Z_Construct_UClass_USpinBoxWidgetStyle, TEXT("USpinBoxWidgetStyle"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(USpinBoxWidgetStyle);
	UClass* Z_Construct_UClass_UTextBlockWidgetStyle_NoRegister()
	{
		return UTextBlockWidgetStyle::StaticClass();
	}
	UClass* Z_Construct_UClass_UTextBlockWidgetStyle()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USlateWidgetStyleContainerBase();
			Z_Construct_UPackage_Slate();
			OuterClass = UTextBlockWidgetStyle::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_TextBlockStyle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TextBlockStyle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TextBlockStyle, UTextBlockWidgetStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FTextBlockStyle());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Framework/Styling/TextBlockWidgetStyle.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Framework/Styling/TextBlockWidgetStyle.h"));
				MetaData->SetValue(NewProp_TextBlockStyle, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_TextBlockStyle, TEXT("ModuleRelativePath"), TEXT("Public/Framework/Styling/TextBlockWidgetStyle.h"));
				MetaData->SetValue(NewProp_TextBlockStyle, TEXT("ShowOnlyInnerProperties"), TEXT(""));
				MetaData->SetValue(NewProp_TextBlockStyle, TEXT("ToolTip"), TEXT("The actual data describing the button's appearance."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UTextBlockWidgetStyle(Z_Construct_UClass_UTextBlockWidgetStyle, TEXT("UTextBlockWidgetStyle"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UTextBlockWidgetStyle);
	UScriptStruct* Z_Construct_UScriptStruct_FInputChord()
	{
		UPackage* Outer=Z_Construct_UPackage_Slate();
		extern uint32 Get_Z_Construct_UScriptStruct_FInputChord_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("InputChord"), sizeof(FInputChord), Get_Z_Construct_UScriptStruct_FInputChord_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("InputChord"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FInputChord>, EStructFlags(0x00000201));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCmd, FInputChord, uint8);
			UProperty* NewProp_bCmd = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bCmd"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCmd, FInputChord), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bCmd, FInputChord), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAlt, FInputChord, uint8);
			UProperty* NewProp_bAlt = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bAlt"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAlt, FInputChord), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bAlt, FInputChord), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCtrl, FInputChord, uint8);
			UProperty* NewProp_bCtrl = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bCtrl"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCtrl, FInputChord), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bCtrl, FInputChord), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bShift, FInputChord, uint8);
			UProperty* NewProp_bShift = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bShift"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bShift, FInputChord), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bShift, FInputChord), sizeof(uint8), false);
			UProperty* NewProp_Key = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Key"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Key, FInputChord), 0x0000000000000000, Z_Construct_UScriptStruct_FKey());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Framework/Commands/InputChord.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("An Input Chord is a key and the modifier keys that are to be held with it."));
			MetaData->SetValue(NewProp_bCmd, TEXT("ModuleRelativePath"), TEXT("Public/Framework/Commands/InputChord.h"));
			MetaData->SetValue(NewProp_bCmd, TEXT("ToolTip"), TEXT("Whether the command key is part of the chord."));
			MetaData->SetValue(NewProp_bAlt, TEXT("ModuleRelativePath"), TEXT("Public/Framework/Commands/InputChord.h"));
			MetaData->SetValue(NewProp_bAlt, TEXT("ToolTip"), TEXT("Whether the alt key is part of the chord."));
			MetaData->SetValue(NewProp_bCtrl, TEXT("ModuleRelativePath"), TEXT("Public/Framework/Commands/InputChord.h"));
			MetaData->SetValue(NewProp_bCtrl, TEXT("ToolTip"), TEXT("Whether the control key is part of the chord."));
			MetaData->SetValue(NewProp_bShift, TEXT("ModuleRelativePath"), TEXT("Public/Framework/Commands/InputChord.h"));
			MetaData->SetValue(NewProp_bShift, TEXT("ToolTip"), TEXT("Whether the shift key is part of the chord."));
			MetaData->SetValue(NewProp_Key, TEXT("ModuleRelativePath"), TEXT("Public/Framework/Commands/InputChord.h"));
			MetaData->SetValue(NewProp_Key, TEXT("ToolTip"), TEXT("The Key is the core of the chord."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FInputChord_CRC() { return 3706218272U; }
	UEnum* Z_Construct_UEnum_Slate_ETextJustify()
	{
		UPackage* Outer=Z_Construct_UPackage_Slate();
		extern uint32 Get_Z_Construct_UEnum_Slate_ETextJustify_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ETextJustify"), 0, Get_Z_Construct_UEnum_Slate_ETextJustify_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ETextJustify"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ETextJustify::Left")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ETextJustify::Center")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ETextJustify::Right")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ETextJustify::ETextJustify_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/Framework/Text/TextLayout.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Slate_ETextJustify_CRC() { return 1119205107U; }
	UEnum* Z_Construct_UEnum_Slate_ETableViewMode()
	{
		UPackage* Outer=Z_Construct_UPackage_Slate();
		extern uint32 Get_Z_Construct_UEnum_Slate_ETableViewMode_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ETableViewMode"), 0, Get_Z_Construct_UEnum_Slate_ETableViewMode_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ETableViewMode"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ETableViewMode::List")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ETableViewMode::Tile")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ETableViewMode::Tree")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ETableViewMode::ETableViewMode_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/Framework/Views/ITypedTableView.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Lists can exist as regular lists or as backing widgets for a tree."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Slate_ETableViewMode_CRC() { return 1314824039U; }
	UEnum* Z_Construct_UEnum_Slate_ESelectionMode()
	{
		UPackage* Outer=Z_Construct_UPackage_Slate();
		extern uint32 Get_Z_Construct_UEnum_Slate_ESelectionMode_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ESelectionMode"), 0, Get_Z_Construct_UEnum_Slate_ESelectionMode_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ESelectionMode"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESelectionMode::None")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESelectionMode::Single")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESelectionMode::SingleToggle")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESelectionMode::Multi")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESelectionMode::ESelectionMode_MAX")), 4));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/Framework/Views/ITypedTableView.h"));
			MetaData->SetValue(ReturnEnum, TEXT("Multi.ToolTip"), TEXT("Multiple items can be selected at the same time."));
			MetaData->SetValue(ReturnEnum, TEXT("None.ToolTip"), TEXT("Nothing can be selected and there is no hover cue for selection.  You can still handle mouse button events though."));
			MetaData->SetValue(ReturnEnum, TEXT("Single.ToolTip"), TEXT("A single item can be selected at once, or no item may be selected."));
			MetaData->SetValue(ReturnEnum, TEXT("SingleToggle.ToolTip"), TEXT("A single item can be selected at once, or no item may be selected.  You can click the item to toggle selection on and off."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Slate_ESelectionMode_CRC() { return 3833443944U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnchors()
	{
		UPackage* Outer=Z_Construct_UPackage_Slate();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnchors_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("Anchors"), sizeof(FAnchors), Get_Z_Construct_UScriptStruct_FAnchors_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Anchors"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FAnchors>, EStructFlags(0x00000001));
			UProperty* NewProp_Maximum = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Maximum"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Maximum, FAnchors), 0x0000000000000005, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_Minimum = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Minimum"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Minimum, FAnchors), 0x0000000000000005, Z_Construct_UScriptStruct_FVector2D());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Widgets/Layout/Anchors.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Describes how a widget is anchored."));
			MetaData->SetValue(NewProp_Maximum, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_Maximum, TEXT("ModuleRelativePath"), TEXT("Public/Widgets/Layout/Anchors.h"));
			MetaData->SetValue(NewProp_Maximum, TEXT("ToolTip"), TEXT("Holds the maximum anchors, right + bottom."));
			MetaData->SetValue(NewProp_Minimum, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_Minimum, TEXT("ModuleRelativePath"), TEXT("Public/Widgets/Layout/Anchors.h"));
			MetaData->SetValue(NewProp_Minimum, TEXT("ToolTip"), TEXT("Holds the minimum anchors, left + top."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnchors_CRC() { return 2786423071U; }
	UEnum* Z_Construct_UEnum_Slate_EStretch()
	{
		UPackage* Outer=Z_Construct_UPackage_Slate();
		extern uint32 Get_Z_Construct_UEnum_Slate_EStretch_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EStretch"), 0, Get_Z_Construct_UEnum_Slate_EStretch_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EStretch"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EStretch::None")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EStretch::Fill")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EStretch::ScaleToFit")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EStretch::ScaleToFitX")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EStretch::ScaleToFitY")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EStretch::ScaleToFill")), 5));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EStretch::UserSpecified")), 6));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EStretch::EStretch_MAX")), 7));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("Fill.ToolTip"), TEXT("Scales the content non-uniformly filling the entire space of the area."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/Widgets/Layout/SScaleBox.h"));
			MetaData->SetValue(ReturnEnum, TEXT("None.ToolTip"), TEXT("Does not scale the content."));
			MetaData->SetValue(ReturnEnum, TEXT("ScaleToFill.ToolTip"), TEXT("Scales the content uniformly (preserving aspect ratio), until all sides meet\nor exceed the size of the area.  Will result in clipping the longer side."));
			MetaData->SetValue(ReturnEnum, TEXT("ScaleToFit.ToolTip"), TEXT("Scales the content uniformly (preserving aspect ratio)\nuntil it can no longer scale the content without clipping it."));
			MetaData->SetValue(ReturnEnum, TEXT("ScaleToFitX.ToolTip"), TEXT("Scales the content uniformly (preserving aspect ratio)\nuntil it can no longer scale the content without clipping it along the x-axis,\nthe y-axis can/will be clipped."));
			MetaData->SetValue(ReturnEnum, TEXT("ScaleToFitY.ToolTip"), TEXT("Scales the content uniformly (preserving aspect ratio)\nuntil it can no longer scale the content without clipping it along the y-axis,\nthe x-axis can/will be clipped."));
			MetaData->SetValue(ReturnEnum, TEXT("UserSpecified.ToolTip"), TEXT("Scales the content by the scale specified by the user."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Slate_EStretch_CRC() { return 1321123654U; }
	UEnum* Z_Construct_UEnum_Slate_EStretchDirection()
	{
		UPackage* Outer=Z_Construct_UPackage_Slate();
		extern uint32 Get_Z_Construct_UEnum_Slate_EStretchDirection_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EStretchDirection"), 0, Get_Z_Construct_UEnum_Slate_EStretchDirection_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EStretchDirection"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EStretchDirection::Both")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EStretchDirection::DownOnly")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EStretchDirection::UpOnly")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EStretchDirection::EStretchDirection_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("Both.ToolTip"), TEXT("Will scale the content up or down."));
			MetaData->SetValue(ReturnEnum, TEXT("DownOnly.ToolTip"), TEXT("Will only make the content smaller, will never scale it larger than the content's desired size."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/Widgets/Layout/SScaleBox.h"));
			MetaData->SetValue(ReturnEnum, TEXT("UpOnly.ToolTip"), TEXT("Will only make the content larger, will never scale it smaller than the content's desired size."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Slate_EStretchDirection_CRC() { return 1686434873U; }
	UEnum* Z_Construct_UEnum_Slate_EProgressBarFillType()
	{
		UPackage* Outer=Z_Construct_UPackage_Slate();
		extern uint32 Get_Z_Construct_UEnum_Slate_EProgressBarFillType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EProgressBarFillType"), 0, Get_Z_Construct_UEnum_Slate_EProgressBarFillType_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EProgressBarFillType"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EProgressBarFillType::LeftToRight")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EProgressBarFillType::RightToLeft")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EProgressBarFillType::FillFromCenter")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EProgressBarFillType::TopToBottom")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EProgressBarFillType::BottomToTop")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EProgressBarFillType::EProgressBarFillType_MAX")), 5));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("BottomToTop.ToolTip"), TEXT("will fill up from the bottom to the the top"));
			MetaData->SetValue(ReturnEnum, TEXT("FillFromCenter.ToolTip"), TEXT("will fill up from the center to the outer edges"));
			MetaData->SetValue(ReturnEnum, TEXT("LeftToRight.ToolTip"), TEXT("will fill up from the left side to the right"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/Widgets/Notifications/SProgressBar.h"));
			MetaData->SetValue(ReturnEnum, TEXT("RightToLeft.ToolTip"), TEXT("will fill up from the right side to the left side"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("SProgressBar Fill Type"));
			MetaData->SetValue(ReturnEnum, TEXT("TopToBottom.ToolTip"), TEXT("will fill up from the top to the the bottom"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Slate_EProgressBarFillType_CRC() { return 960585395U; }
	UPackage* Z_Construct_UPackage_Slate()
	{
		static UPackage* ReturnPackage = NULL;
		if (!ReturnPackage)
		{
			ReturnPackage = CastChecked<UPackage>(StaticFindObjectFast(UPackage::StaticClass(), NULL, FName(TEXT("/Script/Slate")), false, false));
			ReturnPackage->SetPackageFlags(PKG_CompiledIn | 0x00000000);
			FGuid Guid;
			Guid.A = 0x9CA73846;
			Guid.B = 0xB855C1A0;
			Guid.C = 0x00000000;
			Guid.D = 0x00000000;
			ReturnPackage->SetGuid(Guid);

		}
		return ReturnPackage;
	}
#endif

PRAGMA_ENABLE_DEPRECATION_WARNINGS
